
RECEPTION_UART_H7A3ZIQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a160  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800a410  0800a410  0001a410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a510  0800a510  0001a510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a518  0800a518  0001a518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a51c  0800a51c  0001a51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  24000000  0800a520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000028c  24000084  0800a5a4  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000310  0800a5a4  00020310  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018d69  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002dd0  00000000  00000000  00038e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001198  00000000  00000000  0003bbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001060  00000000  00000000  0003cd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032201  00000000  00000000  0003dde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ab28  00000000  00000000  0006ffe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00140393  00000000  00000000  0008ab11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001caea4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d10  00000000  00000000  001caef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000084 	.word	0x24000084
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a3f8 	.word	0x0800a3f8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000088 	.word	0x24000088
 80002ec:	0800a3f8 	.word	0x0800a3f8

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <Thrust_Init>:
 *      Author: romingo
 */

#include "Process.h"

void Thrust_Init(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL);
 8000698:	4b85      	ldr	r3, [pc, #532]	; (80008b0 <Thrust_Init+0x21c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a84      	ldr	r2, [pc, #528]	; (80008b0 <Thrust_Init+0x21c>)
 800069e:	6852      	ldr	r2, [r2, #4]
 80006a0:	4611      	mov	r1, r2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f005 f946 	bl	8005934 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL);
 80006a8:	4b82      	ldr	r3, [pc, #520]	; (80008b4 <Thrust_Init+0x220>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a81      	ldr	r2, [pc, #516]	; (80008b4 <Thrust_Init+0x220>)
 80006ae:	6852      	ldr	r2, [r2, #4]
 80006b0:	4611      	mov	r1, r2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 f93e 	bl	8005934 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 80006b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006bc:	f001 fa0e 	bl	8001adc <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MIN_Thrust);
 80006c0:	4b7b      	ldr	r3, [pc, #492]	; (80008b0 <Thrust_Init+0x21c>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d105      	bne.n	80006d4 <Thrust_Init+0x40>
 80006c8:	4b79      	ldr	r3, [pc, #484]	; (80008b0 <Thrust_Init+0x21c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2264      	movs	r2, #100	; 0x64
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
 80006d2:	e02c      	b.n	800072e <Thrust_Init+0x9a>
 80006d4:	4b76      	ldr	r3, [pc, #472]	; (80008b0 <Thrust_Init+0x21c>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	2b04      	cmp	r3, #4
 80006da:	d105      	bne.n	80006e8 <Thrust_Init+0x54>
 80006dc:	4b74      	ldr	r3, [pc, #464]	; (80008b0 <Thrust_Init+0x21c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	2364      	movs	r3, #100	; 0x64
 80006e4:	6393      	str	r3, [r2, #56]	; 0x38
 80006e6:	e022      	b.n	800072e <Thrust_Init+0x9a>
 80006e8:	4b71      	ldr	r3, [pc, #452]	; (80008b0 <Thrust_Init+0x21c>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	2b08      	cmp	r3, #8
 80006ee:	d105      	bne.n	80006fc <Thrust_Init+0x68>
 80006f0:	4b6f      	ldr	r3, [pc, #444]	; (80008b0 <Thrust_Init+0x21c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006fa:	e018      	b.n	800072e <Thrust_Init+0x9a>
 80006fc:	4b6c      	ldr	r3, [pc, #432]	; (80008b0 <Thrust_Init+0x21c>)
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	2b0c      	cmp	r3, #12
 8000702:	d105      	bne.n	8000710 <Thrust_Init+0x7c>
 8000704:	4b6a      	ldr	r3, [pc, #424]	; (80008b0 <Thrust_Init+0x21c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	2364      	movs	r3, #100	; 0x64
 800070c:	6413      	str	r3, [r2, #64]	; 0x40
 800070e:	e00e      	b.n	800072e <Thrust_Init+0x9a>
 8000710:	4b67      	ldr	r3, [pc, #412]	; (80008b0 <Thrust_Init+0x21c>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	2b10      	cmp	r3, #16
 8000716:	d105      	bne.n	8000724 <Thrust_Init+0x90>
 8000718:	4b65      	ldr	r3, [pc, #404]	; (80008b0 <Thrust_Init+0x21c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	2364      	movs	r3, #100	; 0x64
 8000720:	6593      	str	r3, [r2, #88]	; 0x58
 8000722:	e004      	b.n	800072e <Thrust_Init+0x9a>
 8000724:	4b62      	ldr	r3, [pc, #392]	; (80008b0 <Thrust_Init+0x21c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MIN_Thrust);
 800072e:	4b61      	ldr	r3, [pc, #388]	; (80008b4 <Thrust_Init+0x220>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d105      	bne.n	8000742 <Thrust_Init+0xae>
 8000736:	4b5f      	ldr	r3, [pc, #380]	; (80008b4 <Thrust_Init+0x220>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2264      	movs	r2, #100	; 0x64
 800073e:	635a      	str	r2, [r3, #52]	; 0x34
 8000740:	e02c      	b.n	800079c <Thrust_Init+0x108>
 8000742:	4b5c      	ldr	r3, [pc, #368]	; (80008b4 <Thrust_Init+0x220>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	2b04      	cmp	r3, #4
 8000748:	d105      	bne.n	8000756 <Thrust_Init+0xc2>
 800074a:	4b5a      	ldr	r3, [pc, #360]	; (80008b4 <Thrust_Init+0x220>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	6393      	str	r3, [r2, #56]	; 0x38
 8000754:	e022      	b.n	800079c <Thrust_Init+0x108>
 8000756:	4b57      	ldr	r3, [pc, #348]	; (80008b4 <Thrust_Init+0x220>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	2b08      	cmp	r3, #8
 800075c:	d105      	bne.n	800076a <Thrust_Init+0xd6>
 800075e:	4b55      	ldr	r3, [pc, #340]	; (80008b4 <Thrust_Init+0x220>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000768:	e018      	b.n	800079c <Thrust_Init+0x108>
 800076a:	4b52      	ldr	r3, [pc, #328]	; (80008b4 <Thrust_Init+0x220>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	2b0c      	cmp	r3, #12
 8000770:	d105      	bne.n	800077e <Thrust_Init+0xea>
 8000772:	4b50      	ldr	r3, [pc, #320]	; (80008b4 <Thrust_Init+0x220>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	2364      	movs	r3, #100	; 0x64
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
 800077c:	e00e      	b.n	800079c <Thrust_Init+0x108>
 800077e:	4b4d      	ldr	r3, [pc, #308]	; (80008b4 <Thrust_Init+0x220>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	2b10      	cmp	r3, #16
 8000784:	d105      	bne.n	8000792 <Thrust_Init+0xfe>
 8000786:	4b4b      	ldr	r3, [pc, #300]	; (80008b4 <Thrust_Init+0x220>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	6593      	str	r3, [r2, #88]	; 0x58
 8000790:	e004      	b.n	800079c <Thrust_Init+0x108>
 8000792:	4b48      	ldr	r3, [pc, #288]	; (80008b4 <Thrust_Init+0x220>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	2364      	movs	r3, #100	; 0x64
 800079a:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(1000);
 800079c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a0:	f001 f99c 	bl	8001adc <HAL_Delay>

	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MAX_Thrust);
 80007a4:	4b42      	ldr	r3, [pc, #264]	; (80008b0 <Thrust_Init+0x21c>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d105      	bne.n	80007b8 <Thrust_Init+0x124>
 80007ac:	4b40      	ldr	r3, [pc, #256]	; (80008b0 <Thrust_Init+0x21c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2232      	movs	r2, #50	; 0x32
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
 80007b6:	e02c      	b.n	8000812 <Thrust_Init+0x17e>
 80007b8:	4b3d      	ldr	r3, [pc, #244]	; (80008b0 <Thrust_Init+0x21c>)
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	2b04      	cmp	r3, #4
 80007be:	d105      	bne.n	80007cc <Thrust_Init+0x138>
 80007c0:	4b3b      	ldr	r3, [pc, #236]	; (80008b0 <Thrust_Init+0x21c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	2332      	movs	r3, #50	; 0x32
 80007c8:	6393      	str	r3, [r2, #56]	; 0x38
 80007ca:	e022      	b.n	8000812 <Thrust_Init+0x17e>
 80007cc:	4b38      	ldr	r3, [pc, #224]	; (80008b0 <Thrust_Init+0x21c>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	2b08      	cmp	r3, #8
 80007d2:	d105      	bne.n	80007e0 <Thrust_Init+0x14c>
 80007d4:	4b36      	ldr	r3, [pc, #216]	; (80008b0 <Thrust_Init+0x21c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	2332      	movs	r3, #50	; 0x32
 80007dc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80007de:	e018      	b.n	8000812 <Thrust_Init+0x17e>
 80007e0:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <Thrust_Init+0x21c>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	2b0c      	cmp	r3, #12
 80007e6:	d105      	bne.n	80007f4 <Thrust_Init+0x160>
 80007e8:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <Thrust_Init+0x21c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	2332      	movs	r3, #50	; 0x32
 80007f0:	6413      	str	r3, [r2, #64]	; 0x40
 80007f2:	e00e      	b.n	8000812 <Thrust_Init+0x17e>
 80007f4:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <Thrust_Init+0x21c>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	2b10      	cmp	r3, #16
 80007fa:	d105      	bne.n	8000808 <Thrust_Init+0x174>
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <Thrust_Init+0x21c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	2332      	movs	r3, #50	; 0x32
 8000804:	6593      	str	r3, [r2, #88]	; 0x58
 8000806:	e004      	b.n	8000812 <Thrust_Init+0x17e>
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <Thrust_Init+0x21c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	2332      	movs	r3, #50	; 0x32
 8000810:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MAX_Thrust);
 8000812:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <Thrust_Init+0x220>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d105      	bne.n	8000826 <Thrust_Init+0x192>
 800081a:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <Thrust_Init+0x220>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2232      	movs	r2, #50	; 0x32
 8000822:	635a      	str	r2, [r3, #52]	; 0x34
 8000824:	e02c      	b.n	8000880 <Thrust_Init+0x1ec>
 8000826:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <Thrust_Init+0x220>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b04      	cmp	r3, #4
 800082c:	d105      	bne.n	800083a <Thrust_Init+0x1a6>
 800082e:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <Thrust_Init+0x220>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	2332      	movs	r3, #50	; 0x32
 8000836:	6393      	str	r3, [r2, #56]	; 0x38
 8000838:	e022      	b.n	8000880 <Thrust_Init+0x1ec>
 800083a:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <Thrust_Init+0x220>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2b08      	cmp	r3, #8
 8000840:	d105      	bne.n	800084e <Thrust_Init+0x1ba>
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <Thrust_Init+0x220>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	2332      	movs	r3, #50	; 0x32
 800084a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800084c:	e018      	b.n	8000880 <Thrust_Init+0x1ec>
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <Thrust_Init+0x220>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b0c      	cmp	r3, #12
 8000854:	d105      	bne.n	8000862 <Thrust_Init+0x1ce>
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <Thrust_Init+0x220>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	2332      	movs	r3, #50	; 0x32
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
 8000860:	e00e      	b.n	8000880 <Thrust_Init+0x1ec>
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <Thrust_Init+0x220>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2b10      	cmp	r3, #16
 8000868:	d105      	bne.n	8000876 <Thrust_Init+0x1e2>
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <Thrust_Init+0x220>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	2332      	movs	r3, #50	; 0x32
 8000872:	6593      	str	r3, [r2, #88]	; 0x58
 8000874:	e004      	b.n	8000880 <Thrust_Init+0x1ec>
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <Thrust_Init+0x220>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	2332      	movs	r3, #50	; 0x32
 800087e:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_Delay(1000);
 8000880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000884:	f001 f92a 	bl	8001adc <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MIN_Thrust);
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <Thrust_Init+0x21c>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d105      	bne.n	800089c <Thrust_Init+0x208>
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <Thrust_Init+0x21c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2264      	movs	r2, #100	; 0x64
 8000898:	635a      	str	r2, [r3, #52]	; 0x34
 800089a:	e030      	b.n	80008fe <Thrust_Init+0x26a>
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <Thrust_Init+0x21c>)
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d109      	bne.n	80008b8 <Thrust_Init+0x224>
 80008a4:	4b02      	ldr	r3, [pc, #8]	; (80008b0 <Thrust_Init+0x21c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	2364      	movs	r3, #100	; 0x64
 80008ac:	6393      	str	r3, [r2, #56]	; 0x38
 80008ae:	e026      	b.n	80008fe <Thrust_Init+0x26a>
 80008b0:	24000000 	.word	0x24000000
 80008b4:	24000008 	.word	0x24000008
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <Thrust_Init+0x2e4>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b08      	cmp	r3, #8
 80008be:	d105      	bne.n	80008cc <Thrust_Init+0x238>
 80008c0:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <Thrust_Init+0x2e4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	2364      	movs	r3, #100	; 0x64
 80008c8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008ca:	e018      	b.n	80008fe <Thrust_Init+0x26a>
 80008cc:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <Thrust_Init+0x2e4>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2b0c      	cmp	r3, #12
 80008d2:	d105      	bne.n	80008e0 <Thrust_Init+0x24c>
 80008d4:	4b28      	ldr	r3, [pc, #160]	; (8000978 <Thrust_Init+0x2e4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	2364      	movs	r3, #100	; 0x64
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	e00e      	b.n	80008fe <Thrust_Init+0x26a>
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <Thrust_Init+0x2e4>)
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2b10      	cmp	r3, #16
 80008e6:	d105      	bne.n	80008f4 <Thrust_Init+0x260>
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <Thrust_Init+0x2e4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	2364      	movs	r3, #100	; 0x64
 80008f0:	6593      	str	r3, [r2, #88]	; 0x58
 80008f2:	e004      	b.n	80008fe <Thrust_Init+0x26a>
 80008f4:	4b20      	ldr	r3, [pc, #128]	; (8000978 <Thrust_Init+0x2e4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	2364      	movs	r3, #100	; 0x64
 80008fc:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MIN_Thrust);
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <Thrust_Init+0x2e8>)
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d105      	bne.n	8000912 <Thrust_Init+0x27e>
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <Thrust_Init+0x2e8>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2264      	movs	r2, #100	; 0x64
 800090e:	635a      	str	r2, [r3, #52]	; 0x34
 8000910:	e02c      	b.n	800096c <Thrust_Init+0x2d8>
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <Thrust_Init+0x2e8>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	2b04      	cmp	r3, #4
 8000918:	d105      	bne.n	8000926 <Thrust_Init+0x292>
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <Thrust_Init+0x2e8>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	2364      	movs	r3, #100	; 0x64
 8000922:	6393      	str	r3, [r2, #56]	; 0x38
 8000924:	e022      	b.n	800096c <Thrust_Init+0x2d8>
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <Thrust_Init+0x2e8>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b08      	cmp	r3, #8
 800092c:	d105      	bne.n	800093a <Thrust_Init+0x2a6>
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <Thrust_Init+0x2e8>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	2364      	movs	r3, #100	; 0x64
 8000936:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000938:	e018      	b.n	800096c <Thrust_Init+0x2d8>
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <Thrust_Init+0x2e8>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b0c      	cmp	r3, #12
 8000940:	d105      	bne.n	800094e <Thrust_Init+0x2ba>
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <Thrust_Init+0x2e8>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	2364      	movs	r3, #100	; 0x64
 800094a:	6413      	str	r3, [r2, #64]	; 0x40
 800094c:	e00e      	b.n	800096c <Thrust_Init+0x2d8>
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <Thrust_Init+0x2e8>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	2b10      	cmp	r3, #16
 8000954:	d105      	bne.n	8000962 <Thrust_Init+0x2ce>
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <Thrust_Init+0x2e8>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	2364      	movs	r3, #100	; 0x64
 800095e:	6593      	str	r3, [r2, #88]	; 0x58
 8000960:	e004      	b.n	800096c <Thrust_Init+0x2d8>
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <Thrust_Init+0x2e8>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	2364      	movs	r3, #100	; 0x64
 800096a:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(1000);
 800096c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000970:	f001 f8b4 	bl	8001adc <HAL_Delay>
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	24000000 	.word	0x24000000
 800097c:	24000008 	.word	0x24000008

08000980 <Process_Init>:
void Process_Init(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	Thrust_Init();
 8000984:	f7ff fe86 	bl	8000694 <Thrust_Init>
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <Process>:

void Process(receiveMsg* message) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
    AdjustThrust(&TIM_PROP_G, message->thrust);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <Process+0x3c>)
 800099c:	f000 f818 	bl	80009d0 <AdjustThrust>
    AdjustThrust(&TIM_PROP_D, message->thrust);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	4809      	ldr	r0, [pc, #36]	; (80009cc <Process+0x40>)
 80009a8:	f000 f812 	bl	80009d0 <AdjustThrust>
    AdjustAngle(message->thrust,message->angle);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	781a      	ldrb	r2, [r3, #0]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80009b6:	4619      	mov	r1, r3
 80009b8:	4610      	mov	r0, r2
 80009ba:	f000 f885 	bl	8000ac8 <AdjustAngle>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	24000000 	.word	0x24000000
 80009cc:	24000008 	.word	0x24000008

080009d0 <AdjustThrust>:

void AdjustThrust(struct TIM_PROP* tim_prop, uint8_t thrust) {
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]
	float thrust_ms = 1-(thrust * ((float)(MIN_Thrust - MAX_Thrust) / 100.0)) + MIN_Thrust;
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	ee07 3a90 	vmov	s15, r3
 80009e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009e6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80009ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009ee:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80009f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80009f6:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8000ac0 <AdjustThrust+0xf0>
 80009fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a02:	edc7 7a03 	vstr	s15, [r7, #12]
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d10a      	bne.n	8000a24 <AdjustThrust+0x54>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a1c:	ee17 2a90 	vmov	r2, s15
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a22:	e045      	b.n	8000ab0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	d10a      	bne.n	8000a42 <AdjustThrust+0x72>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a3a:	ee17 3a90 	vmov	r3, s15
 8000a3e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000a40:	e036      	b.n	8000ab0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2b08      	cmp	r3, #8
 8000a48:	d10a      	bne.n	8000a60 <AdjustThrust+0x90>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a58:	ee17 3a90 	vmov	r3, s15
 8000a5c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000a5e:	e027      	b.n	8000ab0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b0c      	cmp	r3, #12
 8000a66:	d10a      	bne.n	8000a7e <AdjustThrust+0xae>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a76:	ee17 3a90 	vmov	r3, s15
 8000a7a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a7c:	e018      	b.n	8000ab0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	2b10      	cmp	r3, #16
 8000a84:	d10a      	bne.n	8000a9c <AdjustThrust+0xcc>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a94:	ee17 3a90 	vmov	r3, s15
 8000a98:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000a9a:	e009      	b.n	8000ab0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aaa:	ee17 3a90 	vmov	r3, s15
 8000aae:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	f3af 8000 	nop.w
 8000ac0:	00000000 	.word	0x00000000
 8000ac4:	40590000 	.word	0x40590000

08000ac8 <AdjustAngle>:

void AdjustAngle(uint8_t thrust,int8_t angle){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	71bb      	strb	r3, [r7, #6]
	uint8_t thrust_G = thrust;
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	73fb      	strb	r3, [r7, #15]
	uint8_t thrust_D = thrust;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	73bb      	strb	r3, [r7, #14]

	if (angle<50){//On tourne a gauche
 8000ae0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ae4:	2b31      	cmp	r3, #49	; 0x31
 8000ae6:	dc03      	bgt.n	8000af0 <AdjustAngle+0x28>
		thrust_G = thrust;
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	73fb      	strb	r3, [r7, #15]
		thrust_D = 0; // Ajouter une diminution progressive des pousses moteurs
 8000aec:	2300      	movs	r3, #0
 8000aee:	73bb      	strb	r3, [r7, #14]
	}
	if (angle>50){//On tourne a droite
 8000af0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000af4:	2b32      	cmp	r3, #50	; 0x32
 8000af6:	dd03      	ble.n	8000b00 <AdjustAngle+0x38>
		thrust_G = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	73fb      	strb	r3, [r7, #15]
		thrust_D = thrust;
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	73bb      	strb	r3, [r7, #14]
	}
	AdjustThrust(&TIM_PROP_G, thrust_G);
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <AdjustAngle+0x54>)
 8000b06:	f7ff ff63 	bl	80009d0 <AdjustThrust>
	AdjustThrust(&TIM_PROP_D, thrust_D);
 8000b0a:	7bbb      	ldrb	r3, [r7, #14]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4804      	ldr	r0, [pc, #16]	; (8000b20 <AdjustAngle+0x58>)
 8000b10:	f7ff ff5e 	bl	80009d0 <AdjustThrust>
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	24000000 	.word	0x24000000
 8000b20:	24000008 	.word	0x24000008

08000b24 <RPICom_Init>:
#include <RPICom.h>

RPICom_HandleTypeDef hRPICom;
void RPICom_Init(UART_HandleTypeDef* huart, UART_HandleTypeDef* huartDebug){
 8000b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
	hRPICom.huart = huart;
 8000b2e:	4a21      	ldr	r2, [pc, #132]	; (8000bb4 <RPICom_Init+0x90>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6013      	str	r3, [r2, #0]
	hRPICom.huartDebug = huartDebug;
 8000b34:	4a1f      	ldr	r2, [pc, #124]	; (8000bb4 <RPICom_Init+0x90>)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	6053      	str	r3, [r2, #4]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	681b      	ldr	r3, [r3, #0]
	memcpy(&(hRPICom.binaryMessage), NULL, sizeof(receiveMsg));
 8000b3e:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <RPICom_Init+0x90>)
 8000b40:	6093      	str	r3, [r2, #8]
	hRPICom.errorNumberRx = 0;
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <RPICom_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	731a      	strb	r2, [r3, #12]
	memcpy(hRPICom.RxBuffer, NULL, UART_RPI_RX_BUFFER_SIZE);
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <RPICom_Init+0x90>)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f103 020d 	add.w	r2, r3, #13
 8000b50:	460b      	mov	r3, r1
 8000b52:	cb03      	ldmia	r3!, {r0, r1}
 8000b54:	6010      	str	r0, [r2, #0]
 8000b56:	6051      	str	r1, [r2, #4]
	memcpy(hRPICom.TxBuffer, NULL, UART_RPI_TX_BUFFER_SIZE);
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <RPICom_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4614      	mov	r4, r2
 8000b5e:	f103 0c15 	add.w	ip, r3, #21
 8000b62:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8000b66:	4665      	mov	r5, ip
 8000b68:	4626      	mov	r6, r4
 8000b6a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b6c:	6028      	str	r0, [r5, #0]
 8000b6e:	6069      	str	r1, [r5, #4]
 8000b70:	60aa      	str	r2, [r5, #8]
 8000b72:	60eb      	str	r3, [r5, #12]
 8000b74:	3410      	adds	r4, #16
 8000b76:	f10c 0c10 	add.w	ip, ip, #16
 8000b7a:	4574      	cmp	r4, lr
 8000b7c:	d1f3      	bne.n	8000b66 <RPICom_Init+0x42>
	memcpy(hRPICom.DebugBuffer, NULL, UART_RPI_DEBUG_BUFFER_SIZE);
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <RPICom_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	4614      	mov	r4, r2
 8000b84:	f103 0c55 	add.w	ip, r3, #85	; 0x55
 8000b88:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8000b8c:	4665      	mov	r5, ip
 8000b8e:	4626      	mov	r6, r4
 8000b90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b92:	6028      	str	r0, [r5, #0]
 8000b94:	6069      	str	r1, [r5, #4]
 8000b96:	60aa      	str	r2, [r5, #8]
 8000b98:	60eb      	str	r3, [r5, #12]
 8000b9a:	3410      	adds	r4, #16
 8000b9c:	f10c 0c10 	add.w	ip, ip, #16
 8000ba0:	4574      	cmp	r4, lr
 8000ba2:	d1f3      	bne.n	8000b8c <RPICom_Init+0x68>
	RPICom_UartActivate(&hRPICom);
 8000ba4:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <RPICom_Init+0x90>)
 8000ba6:	f000 f807 	bl	8000bb8 <RPICom_UartActivate>
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	240000a0 	.word	0x240000a0

08000bb8 <RPICom_UartActivate>:

void RPICom_UartActivate(RPICom_HandleTypeDef* hRPI){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(hRPI->huart, hRPI->RxBuffer, UART_RPI_RX_BUFFER_SIZE);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6818      	ldr	r0, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	330d      	adds	r3, #13
 8000bc8:	2208      	movs	r2, #8
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f006 f970 	bl	8006eb0 <HAL_UART_Receive_IT>
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <checkSum>:

uint8_t checkSum(uint8_t buffer[],uint8_t buffer_size){
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	70fb      	strb	r3, [r7, #3]
	uint8_t checkSum = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < buffer_size-1; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	e009      	b.n	8000c02 <checkSum+0x2a>
		checkSum ^= buffer[i];
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	781a      	ldrb	r2, [r3, #0]
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	4053      	eors	r3, r2
 8000bfa:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < buffer_size-1; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	78fb      	ldrb	r3, [r7, #3]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	dbf0      	blt.n	8000bee <checkSum+0x16>
	}
	return checkSum;
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <RPICom_DecodeBinaryMessage>:

void RPICom_DecodeBinaryMessage(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af04      	add	r7, sp, #16
	hRPICom.errorNumberRx = '0';
 8000c22:	4b32      	ldr	r3, [pc, #200]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000c24:	2230      	movs	r2, #48	; 0x30
 8000c26:	731a      	strb	r2, [r3, #12]
	// Check Header
	if (HEADER_CheckValue1 != hRPICom.RxBuffer[0] || HEADER_CheckValue2 != hRPICom.RxBuffer[1]){//On envoie une erreur à la raspberry
 8000c28:	4b30      	ldr	r3, [pc, #192]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000c2a:	7b5b      	ldrb	r3, [r3, #13]
 8000c2c:	2bff      	cmp	r3, #255	; 0xff
 8000c2e:	d103      	bne.n	8000c38 <RPICom_DecodeBinaryMessage+0x1c>
 8000c30:	4b2e      	ldr	r3, [pc, #184]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000c32:	7b9b      	ldrb	r3, [r3, #14]
 8000c34:	2bfe      	cmp	r3, #254	; 0xfe
 8000c36:	d002      	beq.n	8000c3e <RPICom_DecodeBinaryMessage+0x22>
		hRPICom.errorNumberRx ='1';
 8000c38:	4b2c      	ldr	r3, [pc, #176]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000c3a:	2231      	movs	r2, #49	; 0x31
 8000c3c:	731a      	strb	r2, [r3, #12]
	}
	// Check Length
	if (UART_RPI_RX_BUFFER_SIZE != hRPICom.RxBuffer[2]){// Il nous manque des informations
 8000c3e:	4b2b      	ldr	r3, [pc, #172]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000c40:	7bdb      	ldrb	r3, [r3, #15]
 8000c42:	2b08      	cmp	r3, #8
 8000c44:	d002      	beq.n	8000c4c <RPICom_DecodeBinaryMessage+0x30>
		hRPICom.errorNumberRx='2';
 8000c46:	4b29      	ldr	r3, [pc, #164]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000c48:	2232      	movs	r2, #50	; 0x32
 8000c4a:	731a      	strb	r2, [r3, #12]
	}
	hRPICom.binaryMessage.thrust = hRPICom.RxBuffer[3];
 8000c4c:	4b27      	ldr	r3, [pc, #156]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000c4e:	7c1a      	ldrb	r2, [r3, #16]
 8000c50:	4b26      	ldr	r3, [pc, #152]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000c52:	721a      	strb	r2, [r3, #8]
	hRPICom.binaryMessage.angle = hRPICom.RxBuffer[4];
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000c56:	7c5b      	ldrb	r3, [r3, #17]
 8000c58:	b25a      	sxtb	r2, r3
 8000c5a:	4b24      	ldr	r3, [pc, #144]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000c5c:	725a      	strb	r2, [r3, #9]
	hRPICom.binaryMessage.depth = hRPICom.RxBuffer[5];
 8000c5e:	4b23      	ldr	r3, [pc, #140]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000c60:	7c9a      	ldrb	r2, [r3, #18]
 8000c62:	4b22      	ldr	r3, [pc, #136]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000c64:	729a      	strb	r2, [r3, #10]
	hRPICom.binaryMessage.paquetNumber = hRPICom.RxBuffer[6];
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000c68:	7cda      	ldrb	r2, [r3, #19]
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000c6c:	72da      	strb	r2, [r3, #11]

	//Checksum
	if(checkSum(hRPICom.RxBuffer,UART_RPI_RX_BUFFER_SIZE) !=  hRPICom.RxBuffer[7]){
 8000c6e:	2108      	movs	r1, #8
 8000c70:	481f      	ldr	r0, [pc, #124]	; (8000cf0 <RPICom_DecodeBinaryMessage+0xd4>)
 8000c72:	f7ff ffb1 	bl	8000bd8 <checkSum>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000c7c:	7d1b      	ldrb	r3, [r3, #20]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d002      	beq.n	8000c88 <RPICom_DecodeBinaryMessage+0x6c>
		hRPICom.errorNumberRx='3';
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000c84:	2233      	movs	r2, #51	; 0x33
 8000c86:	731a      	strb	r2, [r3, #12]
	}

	//Response RPI
	uint8_t stringLength = snprintf((char *)hRPICom.DebugBuffer, UART_RPI_DEBUG_BUFFER_SIZE, "[RECEPTION]\nPaquet: %u\r\nThrust: %u\nAngle: %u\r\nStatut: %c\r\n", hRPICom.binaryMessage.paquetNumber,hRPICom.binaryMessage.thrust,hRPICom.binaryMessage.angle,hRPICom.errorNumberRx);
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000c8a:	7adb      	ldrb	r3, [r3, #11]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000c90:	7a1b      	ldrb	r3, [r3, #8]
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000c96:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000c9e:	7b1b      	ldrb	r3, [r3, #12]
 8000ca0:	9302      	str	r3, [sp, #8]
 8000ca2:	9101      	str	r1, [sp, #4]
 8000ca4:	9200      	str	r2, [sp, #0]
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <RPICom_DecodeBinaryMessage+0xd8>)
 8000caa:	2140      	movs	r1, #64	; 0x40
 8000cac:	4812      	ldr	r0, [pc, #72]	; (8000cf8 <RPICom_DecodeBinaryMessage+0xdc>)
 8000cae:	f008 ff21 	bl	8009af4 <sniprintf>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
	hRPICom.DebugBuffer[UART_RPI_DEBUG_BUFFER_SIZE-1] = 0; //Securité de print
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	HAL_UART_Transmit(hRPICom.huartDebug, hRPICom.DebugBuffer, stringLength, 10);
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000cc0:	6858      	ldr	r0, [r3, #4]
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	490b      	ldr	r1, [pc, #44]	; (8000cf8 <RPICom_DecodeBinaryMessage+0xdc>)
 8000cca:	f005 ffcf 	bl	8006c6c <HAL_UART_Transmit>


	// Vous avez maintenant un message complet dans la structure BinaryMessage
	// Vous pouvez faire quelque chose avec ces données, par exemple, appeler une fonction de traitement

	if (hRPICom.errorNumberRx =='0'){
 8000cce:	4b07      	ldr	r3, [pc, #28]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000cd0:	7b1b      	ldrb	r3, [r3, #12]
 8000cd2:	2b30      	cmp	r3, #48	; 0x30
 8000cd4:	d102      	bne.n	8000cdc <RPICom_DecodeBinaryMessage+0xc0>
		Process(&hRPICom.binaryMessage);
 8000cd6:	4809      	ldr	r0, [pc, #36]	; (8000cfc <RPICom_DecodeBinaryMessage+0xe0>)
 8000cd8:	f7ff fe58 	bl	800098c <Process>
	}
	RPICom_UartActivate(&hRPICom);
 8000cdc:	4803      	ldr	r0, [pc, #12]	; (8000cec <RPICom_DecodeBinaryMessage+0xd0>)
 8000cde:	f7ff ff6b 	bl	8000bb8 <RPICom_UartActivate>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	240000a0 	.word	0x240000a0
 8000cf0:	240000ad 	.word	0x240000ad
 8000cf4:	0800a410 	.word	0x0800a410
 8000cf8:	240000f5 	.word	0x240000f5
 8000cfc:	240000a8 	.word	0x240000a8

08000d00 <acquireData>:
sendMsg acquireData(void){ //Factoriser surement dans un fichier AcquireData
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	sendMsg data;
	//interroge inertielle
	data.posX = 10;
 8000d08:	230a      	movs	r3, #10
 8000d0a:	723b      	strb	r3, [r7, #8]
	data.posY = 20;
 8000d0c:	2314      	movs	r3, #20
 8000d0e:	727b      	strb	r3, [r7, #9]
	data.angleDelta = 1;
 8000d10:	2301      	movs	r3, #1
 8000d12:	72bb      	strb	r3, [r7, #10]
	//interroge capteur temp
	data.temp = 25;
 8000d14:	2319      	movs	r3, #25
 8000d16:	72fb      	strb	r3, [r7, #11]
	//interroge batterie
	data.batteryPower = 90;
 8000d18:	235a      	movs	r3, #90	; 0x5a
 8000d1a:	733b      	strb	r3, [r7, #12]
	data.paquetNumber = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	737b      	strb	r3, [r7, #13]
	return  data;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	461a      	mov	r2, r3
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	6010      	str	r0, [r2, #0]
 8000d2c:	889b      	ldrh	r3, [r3, #4]
 8000d2e:	8093      	strh	r3, [r2, #4]
}
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <RPICom_SendBinaryMessage>:
void RPICom_SendBinaryMessage(void){ //Declencher par TIM5_IT ttes les 1s
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b087      	sub	sp, #28
 8000d40:	af04      	add	r7, sp, #16
	sendMsg messageData = acquireData();
 8000d42:	463b      	mov	r3, r7
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ffdb 	bl	8000d00 <acquireData>
	hRPICom.TxBuffer[0]=HEADER_CheckValue1;
 8000d4a:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <RPICom_SendBinaryMessage+0x90>)
 8000d4c:	22ff      	movs	r2, #255	; 0xff
 8000d4e:	755a      	strb	r2, [r3, #21]
	hRPICom.TxBuffer[1]=HEADER_CheckValue2;
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <RPICom_SendBinaryMessage+0x90>)
 8000d52:	22fe      	movs	r2, #254	; 0xfe
 8000d54:	759a      	strb	r2, [r3, #22]
	hRPICom.TxBuffer[2]=UART_RPI_TX_BUFFER_SIZE;
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <RPICom_SendBinaryMessage+0x90>)
 8000d58:	2240      	movs	r2, #64	; 0x40
 8000d5a:	75da      	strb	r2, [r3, #23]

	memcpy(hRPICom.TxBuffer + 3, &messageData, sizeof(messageData));
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <RPICom_SendBinaryMessage+0x94>)
 8000d5e:	461a      	mov	r2, r3
 8000d60:	463b      	mov	r3, r7
 8000d62:	6818      	ldr	r0, [r3, #0]
 8000d64:	6010      	str	r0, [r2, #0]
 8000d66:	889b      	ldrh	r3, [r3, #4]
 8000d68:	8093      	strh	r3, [r2, #4]

	hRPICom.TxBuffer[9]=checkSum(hRPICom.TxBuffer,sizeof(messageData)+3);
 8000d6a:	2109      	movs	r1, #9
 8000d6c:	4819      	ldr	r0, [pc, #100]	; (8000dd4 <RPICom_SendBinaryMessage+0x98>)
 8000d6e:	f7ff ff33 	bl	8000bd8 <checkSum>
 8000d72:	4603      	mov	r3, r0
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <RPICom_SendBinaryMessage+0x90>)
 8000d78:	779a      	strb	r2, [r3, #30]

	HAL_UART_Transmit_IT(hRPICom.huart, hRPICom.TxBuffer, UART_RPI_TX_BUFFER_SIZE);
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <RPICom_SendBinaryMessage+0x90>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2240      	movs	r2, #64	; 0x40
 8000d80:	4914      	ldr	r1, [pc, #80]	; (8000dd4 <RPICom_SendBinaryMessage+0x98>)
 8000d82:	4618      	mov	r0, r3
 8000d84:	f006 f800 	bl	8006d88 <HAL_UART_Transmit_IT>
	//Response RPI
	uint8_t stringLength = snprintf((char *)hRPICom.DebugBuffer, UART_RPI_DEBUG_BUFFER_SIZE, "[SEND]\nPaquet: %u\r\nBatteryPower: %u \nPosition: %u-%u-%u°\r\n", messageData.paquetNumber,messageData.batteryPower,messageData.posX,messageData.posY,messageData.angleDelta);
 8000d88:	797b      	ldrb	r3, [r7, #5]
 8000d8a:	461c      	mov	r4, r3
 8000d8c:	793b      	ldrb	r3, [r7, #4]
 8000d8e:	783a      	ldrb	r2, [r7, #0]
 8000d90:	7879      	ldrb	r1, [r7, #1]
 8000d92:	78b8      	ldrb	r0, [r7, #2]
 8000d94:	9003      	str	r0, [sp, #12]
 8000d96:	9102      	str	r1, [sp, #8]
 8000d98:	9201      	str	r2, [sp, #4]
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	4623      	mov	r3, r4
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <RPICom_SendBinaryMessage+0x9c>)
 8000da0:	2140      	movs	r1, #64	; 0x40
 8000da2:	480e      	ldr	r0, [pc, #56]	; (8000ddc <RPICom_SendBinaryMessage+0xa0>)
 8000da4:	f008 fea6 	bl	8009af4 <sniprintf>
 8000da8:	4603      	mov	r3, r0
 8000daa:	71fb      	strb	r3, [r7, #7]
	hRPICom.DebugBuffer[UART_RPI_DEBUG_BUFFER_SIZE-1] = 0; //Securité de print
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <RPICom_SendBinaryMessage+0x90>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	HAL_UART_Transmit(hRPICom.huartDebug, hRPICom.DebugBuffer, stringLength, 10);
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <RPICom_SendBinaryMessage+0x90>)
 8000db6:	6858      	ldr	r0, [r3, #4]
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	230a      	movs	r3, #10
 8000dbe:	4907      	ldr	r1, [pc, #28]	; (8000ddc <RPICom_SendBinaryMessage+0xa0>)
 8000dc0:	f005 ff54 	bl	8006c6c <HAL_UART_Transmit>

}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	240000a0 	.word	0x240000a0
 8000dd0:	240000b8 	.word	0x240000b8
 8000dd4:	240000b5 	.word	0x240000b5
 8000dd8:	0800a44c 	.word	0x0800a44c
 8000ddc:	240000f5 	.word	0x240000f5

08000de0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08e      	sub	sp, #56	; 0x38
 8000de4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	4b80      	ldr	r3, [pc, #512]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000df8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dfc:	4a7e      	ldr	r2, [pc, #504]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e06:	4b7c      	ldr	r3, [pc, #496]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	623b      	str	r3, [r7, #32]
 8000e12:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e14:	4b78      	ldr	r3, [pc, #480]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e1a:	4a77      	ldr	r2, [pc, #476]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e1c:	f043 0320 	orr.w	r3, r3, #32
 8000e20:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e24:	4b74      	ldr	r3, [pc, #464]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e2a:	f003 0320 	and.w	r3, r3, #32
 8000e2e:	61fb      	str	r3, [r7, #28]
 8000e30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e32:	4b71      	ldr	r3, [pc, #452]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e38:	4a6f      	ldr	r2, [pc, #444]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e3e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e42:	4b6d      	ldr	r3, [pc, #436]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e4c:	61bb      	str	r3, [r7, #24]
 8000e4e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b69      	ldr	r3, [pc, #420]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e56:	4a68      	ldr	r2, [pc, #416]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e60:	4b65      	ldr	r3, [pc, #404]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b62      	ldr	r3, [pc, #392]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e74:	4a60      	ldr	r2, [pc, #384]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e7e:	4b5e      	ldr	r3, [pc, #376]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8c:	4b5a      	ldr	r3, [pc, #360]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e92:	4a59      	ldr	r2, [pc, #356]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e94:	f043 0308 	orr.w	r3, r3, #8
 8000e98:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e9c:	4b56      	ldr	r3, [pc, #344]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ea2:	f003 0308 	and.w	r3, r3, #8
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eaa:	4b53      	ldr	r3, [pc, #332]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000eac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eb0:	4a51      	ldr	r2, [pc, #324]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eba:	4b4f      	ldr	r3, [pc, #316]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000ebc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec8:	4b4b      	ldr	r3, [pc, #300]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000eca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ece:	4a4a      	ldr	r2, [pc, #296]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000ed0:	f043 0310 	orr.w	r3, r3, #16
 8000ed4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ed8:	4b47      	ldr	r3, [pc, #284]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000eda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eec:	4843      	ldr	r0, [pc, #268]	; (8000ffc <MX_GPIO_Init+0x21c>)
 8000eee:	f001 fe3d 	bl	8002b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ef8:	4841      	ldr	r0, [pc, #260]	; (8001000 <MX_GPIO_Init+0x220>)
 8000efa:	f001 fe37 	bl	8002b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2102      	movs	r1, #2
 8000f02:	4840      	ldr	r0, [pc, #256]	; (8001004 <MX_GPIO_Init+0x224>)
 8000f04:	f001 fe32 	bl	8002b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	483a      	ldr	r0, [pc, #232]	; (8001008 <MX_GPIO_Init+0x228>)
 8000f1e:	f001 fc75 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4830      	ldr	r0, [pc, #192]	; (8000ffc <MX_GPIO_Init+0x21c>)
 8000f3c:	f001 fc66 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000f40:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	4619      	mov	r1, r3
 8000f58:	4829      	ldr	r0, [pc, #164]	; (8001000 <MX_GPIO_Init+0x220>)
 8000f5a:	f001 fc57 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	4826      	ldr	r0, [pc, #152]	; (800100c <MX_GPIO_Init+0x22c>)
 8000f74:	f001 fc4a 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4820      	ldr	r0, [pc, #128]	; (8001010 <MX_GPIO_Init+0x230>)
 8000f8e:	f001 fc3d 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fac:	4619      	mov	r1, r3
 8000fae:	4818      	ldr	r0, [pc, #96]	; (8001010 <MX_GPIO_Init+0x230>)
 8000fb0:	f001 fc2c 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000fb4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4810      	ldr	r0, [pc, #64]	; (8001010 <MX_GPIO_Init+0x230>)
 8000fce:	f001 fc1d 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4806      	ldr	r0, [pc, #24]	; (8001004 <MX_GPIO_Init+0x224>)
 8000fea:	f001 fc0f 	bl	800280c <HAL_GPIO_Init>

}
 8000fee:	bf00      	nop
 8000ff0:	3738      	adds	r7, #56	; 0x38
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	58024400 	.word	0x58024400
 8000ffc:	58021400 	.word	0x58021400
 8001000:	58020400 	.word	0x58020400
 8001004:	58021000 	.word	0x58021000
 8001008:	58020800 	.word	0x58020800
 800100c:	58021800 	.word	0x58021800
 8001010:	58020000 	.word	0x58020000

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001018:	f000 fcce 	bl	80019b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101c:	f000 f832 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001020:	f7ff fede 	bl	8000de0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001024:	f000 fb4e 	bl	80016c4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8001028:	f000 fc94 	bl	8001954 <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 800102c:	f000 faf6 	bl	800161c <MX_UART4_Init>
  MX_TIM2_Init();
 8001030:	f000 f9ac 	bl	800138c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001034:	f000 fa2c 	bl	8001490 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, (uint8_t *)"\nStarting...\r\n", 14, 10);
 8001038:	230a      	movs	r3, #10
 800103a:	220e      	movs	r2, #14
 800103c:	490c      	ldr	r1, [pc, #48]	; (8001070 <main+0x5c>)
 800103e:	480d      	ldr	r0, [pc, #52]	; (8001074 <main+0x60>)
 8001040:	f005 fe14 	bl	8006c6c <HAL_UART_Transmit>
	Process_Init();
 8001044:	f7ff fc9c 	bl	8000980 <Process_Init>
	RPICom_Init(&huart4, &huart3);
 8001048:	490a      	ldr	r1, [pc, #40]	; (8001074 <main+0x60>)
 800104a:	480b      	ldr	r0, [pc, #44]	; (8001078 <main+0x64>)
 800104c:	f7ff fd6a 	bl	8000b24 <RPICom_Init>
	HAL_UART_Transmit(&huart3, (uint8_t *)"Init Done\r\n", 11, 10);
 8001050:	230a      	movs	r3, #10
 8001052:	220b      	movs	r2, #11
 8001054:	4909      	ldr	r1, [pc, #36]	; (800107c <main+0x68>)
 8001056:	4807      	ldr	r0, [pc, #28]	; (8001074 <main+0x60>)
 8001058:	f005 fe08 	bl	8006c6c <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); //toggle the user led Green which is connected to GPIO PA5
 800105c:	2101      	movs	r1, #1
 800105e:	4808      	ldr	r0, [pc, #32]	; (8001080 <main+0x6c>)
 8001060:	f001 fd9d 	bl	8002b9e <HAL_GPIO_TogglePin>
		HAL_Delay(500); //delay 500 millisecond
 8001064:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001068:	f000 fd38 	bl	8001adc <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); //toggle the user led Green which is connected to GPIO PA5
 800106c:	e7f6      	b.n	800105c <main+0x48>
 800106e:	bf00      	nop
 8001070:	0800a488 	.word	0x0800a488
 8001074:	24000268 	.word	0x24000268
 8001078:	240001d4 	.word	0x240001d4
 800107c:	0800a498 	.word	0x0800a498
 8001080:	58020400 	.word	0x58020400

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b09c      	sub	sp, #112	; 0x70
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108e:	224c      	movs	r2, #76	; 0x4c
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f008 fd26 	bl	8009ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2220      	movs	r2, #32
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f008 fd20 	bl	8009ae4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80010a4:	4b30      	ldr	r3, [pc, #192]	; (8001168 <SystemClock_Config+0xe4>)
 80010a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80010ae:	2004      	movs	r0, #4
 80010b0:	f001 fd90 	bl	8002bd4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80010b4:	2300      	movs	r3, #0
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	4b2c      	ldr	r3, [pc, #176]	; (800116c <SystemClock_Config+0xe8>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a2b      	ldr	r2, [pc, #172]	; (800116c <SystemClock_Config+0xe8>)
 80010be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b29      	ldr	r3, [pc, #164]	; (800116c <SystemClock_Config+0xe8>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010d0:	bf00      	nop
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <SystemClock_Config+0xe8>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010de:	d1f8      	bne.n	80010d2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80010e0:	2321      	movs	r3, #33	; 0x21
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010ea:	2301      	movs	r3, #1
 80010ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ee:	2302      	movs	r3, #2
 80010f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f2:	2302      	movs	r3, #2
 80010f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80010fa:	2318      	movs	r3, #24
 80010fc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010fe:	2302      	movs	r3, #2
 8001100:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001102:	2304      	movs	r3, #4
 8001104:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001106:	2302      	movs	r3, #2
 8001108:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800110a:	230c      	movs	r3, #12
 800110c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800110e:	2300      	movs	r3, #0
 8001110:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	4618      	mov	r0, r3
 800111c:	f001 fdb4 	bl	8002c88 <HAL_RCC_OscConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001126:	f000 f823 	bl	8001170 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112a:	233f      	movs	r3, #63	; 0x3f
 800112c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112e:	2303      	movs	r3, #3
 8001130:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2102      	movs	r1, #2
 800114e:	4618      	mov	r0, r3
 8001150:	f002 f9cc 	bl	80034ec <HAL_RCC_ClockConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800115a:	f000 f809 	bl	8001170 <Error_Handler>
  }
}
 800115e:	bf00      	nop
 8001160:	3770      	adds	r7, #112	; 0x70
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	58024400 	.word	0x58024400
 800116c:	58024800 	.word	0x58024800

08001170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001174:	b672      	cpsid	i
}
 8001176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001178:	e7fe      	b.n	8001178 <Error_Handler+0x8>
	...

0800117c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_MspInit+0x30>)
 8001184:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001188:	4a08      	ldr	r2, [pc, #32]	; (80011ac <HAL_MspInit+0x30>)
 800118a:	f043 0302 	orr.w	r3, r3, #2
 800118e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_MspInit+0x30>)
 8001194:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	58024400 	.word	0x58024400

080011b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <NMI_Handler+0x4>

080011b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <HardFault_Handler+0x4>

080011bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <MemManage_Handler+0x4>

080011c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <BusFault_Handler+0x4>

080011c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <UsageFault_Handler+0x4>

080011ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011fc:	f000 fc4e 	bl	8001a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001208:	4803      	ldr	r0, [pc, #12]	; (8001218 <TIM3_IRQHandler+0x14>)
 800120a:	f004 fca1 	bl	8005b50 <HAL_TIM_IRQHandler>
  RPICom_SendBinaryMessage();
 800120e:	f7ff fd95 	bl	8000d3c <RPICom_SendBinaryMessage>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	24000188 	.word	0x24000188

0800121c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <UART4_IRQHandler+0x10>)
 8001222:	f005 fe91 	bl	8006f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  /* USER CODE END UART4_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	240001d4 	.word	0x240001d4

08001230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001238:	4a14      	ldr	r2, [pc, #80]	; (800128c <_sbrk+0x5c>)
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <_sbrk+0x60>)
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <_sbrk+0x64>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <_sbrk+0x64>)
 800124e:	4a12      	ldr	r2, [pc, #72]	; (8001298 <_sbrk+0x68>)
 8001250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	429a      	cmp	r2, r3
 800125e:	d207      	bcs.n	8001270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001260:	f008 fc16 	bl	8009a90 <__errno>
 8001264:	4603      	mov	r3, r0
 8001266:	220c      	movs	r2, #12
 8001268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800126a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800126e:	e009      	b.n	8001284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <_sbrk+0x64>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <_sbrk+0x64>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	4a05      	ldr	r2, [pc, #20]	; (8001294 <_sbrk+0x64>)
 8001280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001282:	68fb      	ldr	r3, [r7, #12]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	24100000 	.word	0x24100000
 8001290:	00000400 	.word	0x00000400
 8001294:	24000138 	.word	0x24000138
 8001298:	24000310 	.word	0x24000310

0800129c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012a0:	4b32      	ldr	r3, [pc, #200]	; (800136c <SystemInit+0xd0>)
 80012a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012a6:	4a31      	ldr	r2, [pc, #196]	; (800136c <SystemInit+0xd0>)
 80012a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012b0:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <SystemInit+0xd4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 030f 	and.w	r3, r3, #15
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d807      	bhi.n	80012cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012bc:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <SystemInit+0xd4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f023 030f 	bic.w	r3, r3, #15
 80012c4:	4a2a      	ldr	r2, [pc, #168]	; (8001370 <SystemInit+0xd4>)
 80012c6:	f043 0303 	orr.w	r3, r3, #3
 80012ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <SystemInit+0xd8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a28      	ldr	r2, [pc, #160]	; (8001374 <SystemInit+0xd8>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012d8:	4b26      	ldr	r3, [pc, #152]	; (8001374 <SystemInit+0xd8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012de:	4b25      	ldr	r3, [pc, #148]	; (8001374 <SystemInit+0xd8>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4924      	ldr	r1, [pc, #144]	; (8001374 <SystemInit+0xd8>)
 80012e4:	4b24      	ldr	r3, [pc, #144]	; (8001378 <SystemInit+0xdc>)
 80012e6:	4013      	ands	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <SystemInit+0xd4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d007      	beq.n	8001306 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012f6:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <SystemInit+0xd4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 030f 	bic.w	r3, r3, #15
 80012fe:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <SystemInit+0xd4>)
 8001300:	f043 0303 	orr.w	r3, r3, #3
 8001304:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001306:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <SystemInit+0xd8>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <SystemInit+0xd8>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <SystemInit+0xd8>)
 8001314:	2200      	movs	r2, #0
 8001316:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <SystemInit+0xd8>)
 800131a:	4a18      	ldr	r2, [pc, #96]	; (800137c <SystemInit+0xe0>)
 800131c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <SystemInit+0xd8>)
 8001320:	4a17      	ldr	r2, [pc, #92]	; (8001380 <SystemInit+0xe4>)
 8001322:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <SystemInit+0xd8>)
 8001326:	4a17      	ldr	r2, [pc, #92]	; (8001384 <SystemInit+0xe8>)
 8001328:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <SystemInit+0xd8>)
 800132c:	2200      	movs	r2, #0
 800132e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <SystemInit+0xd8>)
 8001332:	4a14      	ldr	r2, [pc, #80]	; (8001384 <SystemInit+0xe8>)
 8001334:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <SystemInit+0xd8>)
 8001338:	2200      	movs	r2, #0
 800133a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800133c:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <SystemInit+0xd8>)
 800133e:	4a11      	ldr	r2, [pc, #68]	; (8001384 <SystemInit+0xe8>)
 8001340:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <SystemInit+0xd8>)
 8001344:	2200      	movs	r2, #0
 8001346:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <SystemInit+0xd8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a09      	ldr	r2, [pc, #36]	; (8001374 <SystemInit+0xd8>)
 800134e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001352:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <SystemInit+0xd8>)
 8001356:	2200      	movs	r2, #0
 8001358:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <SystemInit+0xec>)
 800135c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001360:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00
 8001370:	52002000 	.word	0x52002000
 8001374:	58024400 	.word	0x58024400
 8001378:	eaf6ed7f 	.word	0xeaf6ed7f
 800137c:	02020200 	.word	0x02020200
 8001380:	01ff0000 	.word	0x01ff0000
 8001384:	01010280 	.word	0x01010280
 8001388:	52004000 	.word	0x52004000

0800138c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08e      	sub	sp, #56	; 0x38
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ac:	463b      	mov	r3, r7
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
 80013ba:	615a      	str	r2, [r3, #20]
 80013bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013be:	4b33      	ldr	r3, [pc, #204]	; (800148c <MX_TIM2_Init+0x100>)
 80013c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1919;
 80013c6:	4b31      	ldr	r3, [pc, #196]	; (800148c <MX_TIM2_Init+0x100>)
 80013c8:	f240 727f 	movw	r2, #1919	; 0x77f
 80013cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b2f      	ldr	r3, [pc, #188]	; (800148c <MX_TIM2_Init+0x100>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80013d4:	4b2d      	ldr	r3, [pc, #180]	; (800148c <MX_TIM2_Init+0x100>)
 80013d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013dc:	4b2b      	ldr	r3, [pc, #172]	; (800148c <MX_TIM2_Init+0x100>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e2:	4b2a      	ldr	r3, [pc, #168]	; (800148c <MX_TIM2_Init+0x100>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013e8:	4828      	ldr	r0, [pc, #160]	; (800148c <MX_TIM2_Init+0x100>)
 80013ea:	f004 f9eb 	bl	80057c4 <HAL_TIM_Base_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80013f4:	f7ff febc 	bl	8001170 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001402:	4619      	mov	r1, r3
 8001404:	4821      	ldr	r0, [pc, #132]	; (800148c <MX_TIM2_Init+0x100>)
 8001406:	f004 fdd7 	bl	8005fb8 <HAL_TIM_ConfigClockSource>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001410:	f7ff feae 	bl	8001170 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001414:	481d      	ldr	r0, [pc, #116]	; (800148c <MX_TIM2_Init+0x100>)
 8001416:	f004 fa2c 	bl	8005872 <HAL_TIM_PWM_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001420:	f7ff fea6 	bl	8001170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4619      	mov	r1, r3
 8001432:	4816      	ldr	r0, [pc, #88]	; (800148c <MX_TIM2_Init+0x100>)
 8001434:	f005 fb1e 	bl	8006a74 <HAL_TIMEx_MasterConfigSynchronization>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800143e:	f7ff fe97 	bl	8001170 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001442:	2360      	movs	r3, #96	; 0x60
 8001444:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	4619      	mov	r1, r3
 8001458:	480c      	ldr	r0, [pc, #48]	; (800148c <MX_TIM2_Init+0x100>)
 800145a:	f004 fc99 	bl	8005d90 <HAL_TIM_PWM_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001464:	f7ff fe84 	bl	8001170 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001468:	463b      	mov	r3, r7
 800146a:	2204      	movs	r2, #4
 800146c:	4619      	mov	r1, r3
 800146e:	4807      	ldr	r0, [pc, #28]	; (800148c <MX_TIM2_Init+0x100>)
 8001470:	f004 fc8e 	bl	8005d90 <HAL_TIM_PWM_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800147a:	f7ff fe79 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800147e:	4803      	ldr	r0, [pc, #12]	; (800148c <MX_TIM2_Init+0x100>)
 8001480:	f000 f894 	bl	80015ac <HAL_TIM_MspPostInit>

}
 8001484:	bf00      	nop
 8001486:	3738      	adds	r7, #56	; 0x38
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	2400013c 	.word	0x2400013c

08001490 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001496:	f107 0310 	add.w	r3, r7, #16
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ae:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <MX_TIM3_Init+0x98>)
 80014b0:	4a1e      	ldr	r2, [pc, #120]	; (800152c <MX_TIM3_Init+0x9c>)
 80014b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9599;
 80014b4:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <MX_TIM3_Init+0x98>)
 80014b6:	f242 527f 	movw	r2, #9599	; 0x257f
 80014ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <MX_TIM3_Init+0x98>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <MX_TIM3_Init+0x98>)
 80014c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MX_TIM3_Init+0x98>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <MX_TIM3_Init+0x98>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014d6:	4814      	ldr	r0, [pc, #80]	; (8001528 <MX_TIM3_Init+0x98>)
 80014d8:	f004 f974 	bl	80057c4 <HAL_TIM_Base_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80014e2:	f7ff fe45 	bl	8001170 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	4619      	mov	r1, r3
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <MX_TIM3_Init+0x98>)
 80014f4:	f004 fd60 	bl	8005fb8 <HAL_TIM_ConfigClockSource>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80014fe:	f7ff fe37 	bl	8001170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	4619      	mov	r1, r3
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <MX_TIM3_Init+0x98>)
 8001510:	f005 fab0 	bl	8006a74 <HAL_TIMEx_MasterConfigSynchronization>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800151a:	f7ff fe29 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	3720      	adds	r7, #32
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	24000188 	.word	0x24000188
 800152c:	40000400 	.word	0x40000400

08001530 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001540:	d10f      	bne.n	8001562 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_TIM_Base_MspInit+0x74>)
 8001544:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001548:	4a16      	ldr	r2, [pc, #88]	; (80015a4 <HAL_TIM_Base_MspInit+0x74>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <HAL_TIM_Base_MspInit+0x74>)
 8001554:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001560:	e01b      	b.n	800159a <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM3)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a10      	ldr	r2, [pc, #64]	; (80015a8 <HAL_TIM_Base_MspInit+0x78>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d116      	bne.n	800159a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_TIM_Base_MspInit+0x74>)
 800156e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001572:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <HAL_TIM_Base_MspInit+0x74>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <HAL_TIM_Base_MspInit+0x74>)
 800157e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	201d      	movs	r0, #29
 8001590:	f000 fba3 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001594:	201d      	movs	r0, #29
 8001596:	f000 fbba 	bl	8001d0e <HAL_NVIC_EnableIRQ>
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	58024400 	.word	0x58024400
 80015a8:	40000400 	.word	0x40000400

080015ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015cc:	d11e      	bne.n	800160c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <HAL_TIM_MspPostInit+0x68>)
 80015d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015d4:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <HAL_TIM_MspPostInit+0x68>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <HAL_TIM_MspPostInit+0x68>)
 80015e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80015ec:	2322      	movs	r3, #34	; 0x22
 80015ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015fc:	2301      	movs	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	4619      	mov	r1, r3
 8001606:	4804      	ldr	r0, [pc, #16]	; (8001618 <HAL_TIM_MspPostInit+0x6c>)
 8001608:	f001 f900 	bl	800280c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800160c:	bf00      	nop
 800160e:	3720      	adds	r7, #32
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	58024400 	.word	0x58024400
 8001618:	58020000 	.word	0x58020000

0800161c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001620:	4b26      	ldr	r3, [pc, #152]	; (80016bc <MX_UART4_Init+0xa0>)
 8001622:	4a27      	ldr	r2, [pc, #156]	; (80016c0 <MX_UART4_Init+0xa4>)
 8001624:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001626:	4b25      	ldr	r3, [pc, #148]	; (80016bc <MX_UART4_Init+0xa0>)
 8001628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800162c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b23      	ldr	r3, [pc, #140]	; (80016bc <MX_UART4_Init+0xa0>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b21      	ldr	r3, [pc, #132]	; (80016bc <MX_UART4_Init+0xa0>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800163a:	4b20      	ldr	r3, [pc, #128]	; (80016bc <MX_UART4_Init+0xa0>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <MX_UART4_Init+0xa0>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <MX_UART4_Init+0xa0>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <MX_UART4_Init+0xa0>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <MX_UART4_Init+0xa0>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <MX_UART4_Init+0xa0>)
 800165a:	2200      	movs	r2, #0
 800165c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <MX_UART4_Init+0xa0>)
 8001660:	2200      	movs	r2, #0
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001664:	4815      	ldr	r0, [pc, #84]	; (80016bc <MX_UART4_Init+0xa0>)
 8001666:	f005 fab1 	bl	8006bcc <HAL_UART_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001670:	f7ff fd7e 	bl	8001170 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001674:	2100      	movs	r1, #0
 8001676:	4811      	ldr	r0, [pc, #68]	; (80016bc <MX_UART4_Init+0xa0>)
 8001678:	f008 f93f 	bl	80098fa <HAL_UARTEx_SetTxFifoThreshold>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001682:	f7ff fd75 	bl	8001170 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001686:	2100      	movs	r1, #0
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <MX_UART4_Init+0xa0>)
 800168a:	f008 f974 	bl	8009976 <HAL_UARTEx_SetRxFifoThreshold>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001694:	f7ff fd6c 	bl	8001170 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001698:	4808      	ldr	r0, [pc, #32]	; (80016bc <MX_UART4_Init+0xa0>)
 800169a:	f008 f8f5 	bl	8009888 <HAL_UARTEx_DisableFifoMode>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80016a4:	f7ff fd64 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  // Activation de l'interruption de transmission de l'UART4
  HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2100      	movs	r1, #0
 80016ac:	2034      	movs	r0, #52	; 0x34
 80016ae:	f000 fb14 	bl	8001cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 80016b2:	2034      	movs	r0, #52	; 0x34
 80016b4:	f000 fb2b 	bl	8001d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE END UART4_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	240001d4 	.word	0x240001d4
 80016c0:	40004c00 	.word	0x40004c00

080016c4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016c8:	4b22      	ldr	r3, [pc, #136]	; (8001754 <MX_USART3_UART_Init+0x90>)
 80016ca:	4a23      	ldr	r2, [pc, #140]	; (8001758 <MX_USART3_UART_Init+0x94>)
 80016cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016ce:	4b21      	ldr	r3, [pc, #132]	; (8001754 <MX_USART3_UART_Init+0x90>)
 80016d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <MX_USART3_UART_Init+0x90>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016dc:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <MX_USART3_UART_Init+0x90>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016e2:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <MX_USART3_UART_Init+0x90>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <MX_USART3_UART_Init+0x90>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <MX_USART3_UART_Init+0x90>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f4:	4b17      	ldr	r3, [pc, #92]	; (8001754 <MX_USART3_UART_Init+0x90>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <MX_USART3_UART_Init+0x90>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <MX_USART3_UART_Init+0x90>)
 8001702:	2200      	movs	r2, #0
 8001704:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <MX_USART3_UART_Init+0x90>)
 8001708:	2200      	movs	r2, #0
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800170c:	4811      	ldr	r0, [pc, #68]	; (8001754 <MX_USART3_UART_Init+0x90>)
 800170e:	f005 fa5d 	bl	8006bcc <HAL_UART_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001718:	f7ff fd2a 	bl	8001170 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800171c:	2100      	movs	r1, #0
 800171e:	480d      	ldr	r0, [pc, #52]	; (8001754 <MX_USART3_UART_Init+0x90>)
 8001720:	f008 f8eb 	bl	80098fa <HAL_UARTEx_SetTxFifoThreshold>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800172a:	f7ff fd21 	bl	8001170 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800172e:	2100      	movs	r1, #0
 8001730:	4808      	ldr	r0, [pc, #32]	; (8001754 <MX_USART3_UART_Init+0x90>)
 8001732:	f008 f920 	bl	8009976 <HAL_UARTEx_SetRxFifoThreshold>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800173c:	f7ff fd18 	bl	8001170 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001740:	4804      	ldr	r0, [pc, #16]	; (8001754 <MX_USART3_UART_Init+0x90>)
 8001742:	f008 f8a1 	bl	8009888 <HAL_UARTEx_DisableFifoMode>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800174c:	f7ff fd10 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	24000268 	.word	0x24000268
 8001758:	40004800 	.word	0x40004800

0800175c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b0be      	sub	sp, #248	; 0xf8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001774:	f107 0320 	add.w	r3, r7, #32
 8001778:	22c0      	movs	r2, #192	; 0xc0
 800177a:	2100      	movs	r1, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f008 f9b1 	bl	8009ae4 <memset>
  if(uartHandle->Instance==UART4)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a63      	ldr	r2, [pc, #396]	; (8001914 <HAL_UART_MspInit+0x1b8>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d172      	bne.n	8001872 <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800178c:	f04f 0202 	mov.w	r2, #2
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001798:	2300      	movs	r3, #0
 800179a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800179e:	f107 0320 	add.w	r3, r7, #32
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 fa2e 	bl	8003c04 <HAL_RCCEx_PeriphCLKConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80017ae:	f7ff fcdf 	bl	8001170 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017b2:	4b59      	ldr	r3, [pc, #356]	; (8001918 <HAL_UART_MspInit+0x1bc>)
 80017b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017b8:	4a57      	ldr	r2, [pc, #348]	; (8001918 <HAL_UART_MspInit+0x1bc>)
 80017ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017be:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80017c2:	4b55      	ldr	r3, [pc, #340]	; (8001918 <HAL_UART_MspInit+0x1bc>)
 80017c4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d0:	4b51      	ldr	r3, [pc, #324]	; (8001918 <HAL_UART_MspInit+0x1bc>)
 80017d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017d6:	4a50      	ldr	r2, [pc, #320]	; (8001918 <HAL_UART_MspInit+0x1bc>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80017e0:	4b4d      	ldr	r3, [pc, #308]	; (8001918 <HAL_UART_MspInit+0x1bc>)
 80017e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	61bb      	str	r3, [r7, #24]
 80017ec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ee:	4b4a      	ldr	r3, [pc, #296]	; (8001918 <HAL_UART_MspInit+0x1bc>)
 80017f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017f4:	4a48      	ldr	r2, [pc, #288]	; (8001918 <HAL_UART_MspInit+0x1bc>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80017fe:	4b46      	ldr	r3, [pc, #280]	; (8001918 <HAL_UART_MspInit+0x1bc>)
 8001800:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800180c:	2301      	movs	r3, #1
 800180e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001824:	2308      	movs	r3, #8
 8001826:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800182e:	4619      	mov	r1, r3
 8001830:	483a      	ldr	r0, [pc, #232]	; (800191c <HAL_UART_MspInit+0x1c0>)
 8001832:	f000 ffeb 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001836:	2301      	movs	r3, #1
 8001838:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800184e:	2308      	movs	r3, #8
 8001850:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001854:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001858:	4619      	mov	r1, r3
 800185a:	4831      	ldr	r0, [pc, #196]	; (8001920 <HAL_UART_MspInit+0x1c4>)
 800185c:	f000 ffd6 	bl	800280c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2100      	movs	r1, #0
 8001864:	2034      	movs	r0, #52	; 0x34
 8001866:	f000 fa38 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800186a:	2034      	movs	r0, #52	; 0x34
 800186c:	f000 fa4f 	bl	8001d0e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001870:	e04b      	b.n	800190a <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART3)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a2b      	ldr	r2, [pc, #172]	; (8001924 <HAL_UART_MspInit+0x1c8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d146      	bne.n	800190a <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800187c:	f04f 0202 	mov.w	r2, #2
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800188e:	f107 0320 	add.w	r3, r7, #32
 8001892:	4618      	mov	r0, r3
 8001894:	f002 f9b6 	bl	8003c04 <HAL_RCCEx_PeriphCLKConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_UART_MspInit+0x146>
      Error_Handler();
 800189e:	f7ff fc67 	bl	8001170 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_UART_MspInit+0x1bc>)
 80018a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80018a8:	4a1b      	ldr	r2, [pc, #108]	; (8001918 <HAL_UART_MspInit+0x1bc>)
 80018aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ae:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_UART_MspInit+0x1bc>)
 80018b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80018b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c0:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_UART_MspInit+0x1bc>)
 80018c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018c6:	4a14      	ldr	r2, [pc, #80]	; (8001918 <HAL_UART_MspInit+0x1bc>)
 80018c8:	f043 0308 	orr.w	r3, r3, #8
 80018cc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_UART_MspInit+0x1bc>)
 80018d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80018de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018f8:	2307      	movs	r3, #7
 80018fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001902:	4619      	mov	r1, r3
 8001904:	4806      	ldr	r0, [pc, #24]	; (8001920 <HAL_UART_MspInit+0x1c4>)
 8001906:	f000 ff81 	bl	800280c <HAL_GPIO_Init>
}
 800190a:	bf00      	nop
 800190c:	37f8      	adds	r7, #248	; 0xf8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40004c00 	.word	0x40004c00
 8001918:	58024400 	.word	0x58024400
 800191c:	58020000 	.word	0x58020000
 8001920:	58020c00 	.word	0x58020c00
 8001924:	40004800 	.word	0x40004800

08001928 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a05      	ldr	r2, [pc, #20]	; (800194c <HAL_UART_RxCpltCallback+0x24>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d104      	bne.n	8001944 <HAL_UART_RxCpltCallback+0x1c>
	{
		RPICom_DecodeBinaryMessage();
 800193a:	f7ff f96f 	bl	8000c1c <RPICom_DecodeBinaryMessage>
		RPICom_UartActivate(&hRPICom);
 800193e:	4804      	ldr	r0, [pc, #16]	; (8001950 <HAL_UART_RxCpltCallback+0x28>)
 8001940:	f7ff f93a 	bl	8000bb8 <RPICom_UartActivate>
	}
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40004c00 	.word	0x40004c00
 8001950:	240000a0 	.word	0x240000a0

08001954 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800199c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001968:	f7ff fc98 	bl	800129c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800196c:	480c      	ldr	r0, [pc, #48]	; (80019a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800196e:	490d      	ldr	r1, [pc, #52]	; (80019a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001970:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001974:	e002      	b.n	800197c <LoopCopyDataInit>

08001976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197a:	3304      	adds	r3, #4

0800197c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800197c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001980:	d3f9      	bcc.n	8001976 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001984:	4c0a      	ldr	r4, [pc, #40]	; (80019b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001988:	e001      	b.n	800198e <LoopFillZerobss>

0800198a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800198c:	3204      	adds	r2, #4

0800198e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001990:	d3fb      	bcc.n	800198a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001992:	f008 f883 	bl	8009a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001996:	f7ff fb3d 	bl	8001014 <main>
  bx  lr
 800199a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800199c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80019a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019a4:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 80019a8:	0800a520 	.word	0x0800a520
  ldr r2, =_sbss
 80019ac:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 80019b0:	24000310 	.word	0x24000310

080019b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <ADC_IRQHandler>
	...

080019b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019be:	2003      	movs	r0, #3
 80019c0:	f000 f980 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80019c4:	f001 ff48 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 80019c8:	4602      	mov	r2, r0
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_Init+0x68>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	0a1b      	lsrs	r3, r3, #8
 80019d0:	f003 030f 	and.w	r3, r3, #15
 80019d4:	4913      	ldr	r1, [pc, #76]	; (8001a24 <HAL_Init+0x6c>)
 80019d6:	5ccb      	ldrb	r3, [r1, r3]
 80019d8:	f003 031f 	and.w	r3, r3, #31
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
 80019e0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_Init+0x68>)
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <HAL_Init+0x6c>)
 80019ec:	5cd3      	ldrb	r3, [r2, r3]
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
 80019f8:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <HAL_Init+0x70>)
 80019fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019fc:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <HAL_Init+0x74>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a02:	2000      	movs	r0, #0
 8001a04:	f000 f814 	bl	8001a30 <HAL_InitTick>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e002      	b.n	8001a18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a12:	f7ff fbb3 	bl	800117c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	58024400 	.word	0x58024400
 8001a24:	0800a4a4 	.word	0x0800a4a4
 8001a28:	24000014 	.word	0x24000014
 8001a2c:	24000010 	.word	0x24000010

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <HAL_InitTick+0x60>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e021      	b.n	8001a88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_InitTick+0x64>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_InitTick+0x60>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f965 	bl	8001d2a <HAL_SYSTICK_Config>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00e      	b.n	8001a88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b0f      	cmp	r3, #15
 8001a6e:	d80a      	bhi.n	8001a86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a70:	2200      	movs	r2, #0
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a78:	f000 f92f 	bl	8001cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a7c:	4a06      	ldr	r2, [pc, #24]	; (8001a98 <HAL_InitTick+0x68>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e000      	b.n	8001a88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	2400001c 	.word	0x2400001c
 8001a94:	24000010 	.word	0x24000010
 8001a98:	24000018 	.word	0x24000018

08001a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_IncTick+0x20>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_IncTick+0x24>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <HAL_IncTick+0x24>)
 8001aae:	6013      	str	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	2400001c 	.word	0x2400001c
 8001ac0:	240002fc 	.word	0x240002fc

08001ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_GetTick+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	240002fc 	.word	0x240002fc

08001adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae4:	f7ff ffee 	bl	8001ac4 <HAL_GetTick>
 8001ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001af4:	d005      	beq.n	8001b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <HAL_Delay+0x44>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b02:	bf00      	nop
 8001b04:	f7ff ffde 	bl	8001ac4 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d8f7      	bhi.n	8001b04 <HAL_Delay+0x28>
  {
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2400001c 	.word	0x2400001c

08001b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <__NVIC_SetPriorityGrouping+0x40>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b40:	4013      	ands	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b52:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <__NVIC_SetPriorityGrouping+0x40>)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	60d3      	str	r3, [r2, #12]
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00
 8001b68:	05fa0000 	.word	0x05fa0000

08001b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <__NVIC_GetPriorityGrouping+0x18>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	f003 0307 	and.w	r3, r3, #7
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	db0b      	blt.n	8001bb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	4907      	ldr	r1, [pc, #28]	; (8001bc0 <__NVIC_EnableIRQ+0x38>)
 8001ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	2001      	movs	r0, #1
 8001baa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	; (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	; (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
         );
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	; 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c90:	d301      	bcc.n	8001c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00f      	b.n	8001cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <SysTick_Config+0x40>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ca4:	f7ff ff8e 	bl	8001bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <SysTick_Config+0x40>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cae:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <SysTick_Config+0x40>)
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	e000e010 	.word	0xe000e010

08001cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff29 	bl	8001b24 <__NVIC_SetPriorityGrouping>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce8:	f7ff ff40 	bl	8001b6c <__NVIC_GetPriorityGrouping>
 8001cec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	6978      	ldr	r0, [r7, #20]
 8001cf4:	f7ff ff90 	bl	8001c18 <NVIC_EncodePriority>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff5f 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff33 	bl	8001b88 <__NVIC_EnableIRQ>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffa4 	bl	8001c80 <SysTick_Config>
 8001d38:	4603      	mov	r3, r0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001d4c:	f7ff feba 	bl	8001ac4 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e2dc      	b.n	8002316 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d008      	beq.n	8001d7a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2280      	movs	r2, #128	; 0x80
 8001d6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e2cd      	b.n	8002316 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a76      	ldr	r2, [pc, #472]	; (8001f58 <HAL_DMA_Abort+0x214>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d04a      	beq.n	8001e1a <HAL_DMA_Abort+0xd6>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a74      	ldr	r2, [pc, #464]	; (8001f5c <HAL_DMA_Abort+0x218>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d045      	beq.n	8001e1a <HAL_DMA_Abort+0xd6>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a73      	ldr	r2, [pc, #460]	; (8001f60 <HAL_DMA_Abort+0x21c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d040      	beq.n	8001e1a <HAL_DMA_Abort+0xd6>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a71      	ldr	r2, [pc, #452]	; (8001f64 <HAL_DMA_Abort+0x220>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d03b      	beq.n	8001e1a <HAL_DMA_Abort+0xd6>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a70      	ldr	r2, [pc, #448]	; (8001f68 <HAL_DMA_Abort+0x224>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d036      	beq.n	8001e1a <HAL_DMA_Abort+0xd6>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a6e      	ldr	r2, [pc, #440]	; (8001f6c <HAL_DMA_Abort+0x228>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d031      	beq.n	8001e1a <HAL_DMA_Abort+0xd6>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a6d      	ldr	r2, [pc, #436]	; (8001f70 <HAL_DMA_Abort+0x22c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d02c      	beq.n	8001e1a <HAL_DMA_Abort+0xd6>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a6b      	ldr	r2, [pc, #428]	; (8001f74 <HAL_DMA_Abort+0x230>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d027      	beq.n	8001e1a <HAL_DMA_Abort+0xd6>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a6a      	ldr	r2, [pc, #424]	; (8001f78 <HAL_DMA_Abort+0x234>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d022      	beq.n	8001e1a <HAL_DMA_Abort+0xd6>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a68      	ldr	r2, [pc, #416]	; (8001f7c <HAL_DMA_Abort+0x238>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d01d      	beq.n	8001e1a <HAL_DMA_Abort+0xd6>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a67      	ldr	r2, [pc, #412]	; (8001f80 <HAL_DMA_Abort+0x23c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d018      	beq.n	8001e1a <HAL_DMA_Abort+0xd6>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a65      	ldr	r2, [pc, #404]	; (8001f84 <HAL_DMA_Abort+0x240>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <HAL_DMA_Abort+0xd6>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a64      	ldr	r2, [pc, #400]	; (8001f88 <HAL_DMA_Abort+0x244>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d00e      	beq.n	8001e1a <HAL_DMA_Abort+0xd6>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a62      	ldr	r2, [pc, #392]	; (8001f8c <HAL_DMA_Abort+0x248>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d009      	beq.n	8001e1a <HAL_DMA_Abort+0xd6>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a61      	ldr	r2, [pc, #388]	; (8001f90 <HAL_DMA_Abort+0x24c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d004      	beq.n	8001e1a <HAL_DMA_Abort+0xd6>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a5f      	ldr	r2, [pc, #380]	; (8001f94 <HAL_DMA_Abort+0x250>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d101      	bne.n	8001e1e <HAL_DMA_Abort+0xda>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_DMA_Abort+0xdc>
 8001e1e:	2300      	movs	r3, #0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d013      	beq.n	8001e4c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 021e 	bic.w	r2, r2, #30
 8001e32:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e42:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	e00a      	b.n	8001e62 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 020e 	bic.w	r2, r2, #14
 8001e5a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a3c      	ldr	r2, [pc, #240]	; (8001f58 <HAL_DMA_Abort+0x214>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d072      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a3a      	ldr	r2, [pc, #232]	; (8001f5c <HAL_DMA_Abort+0x218>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d06d      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a39      	ldr	r2, [pc, #228]	; (8001f60 <HAL_DMA_Abort+0x21c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d068      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a37      	ldr	r2, [pc, #220]	; (8001f64 <HAL_DMA_Abort+0x220>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d063      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a36      	ldr	r2, [pc, #216]	; (8001f68 <HAL_DMA_Abort+0x224>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d05e      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a34      	ldr	r2, [pc, #208]	; (8001f6c <HAL_DMA_Abort+0x228>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d059      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a33      	ldr	r2, [pc, #204]	; (8001f70 <HAL_DMA_Abort+0x22c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d054      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a31      	ldr	r2, [pc, #196]	; (8001f74 <HAL_DMA_Abort+0x230>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d04f      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a30      	ldr	r2, [pc, #192]	; (8001f78 <HAL_DMA_Abort+0x234>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d04a      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a2e      	ldr	r2, [pc, #184]	; (8001f7c <HAL_DMA_Abort+0x238>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d045      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a2d      	ldr	r2, [pc, #180]	; (8001f80 <HAL_DMA_Abort+0x23c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d040      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a2b      	ldr	r2, [pc, #172]	; (8001f84 <HAL_DMA_Abort+0x240>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d03b      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a2a      	ldr	r2, [pc, #168]	; (8001f88 <HAL_DMA_Abort+0x244>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d036      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a28      	ldr	r2, [pc, #160]	; (8001f8c <HAL_DMA_Abort+0x248>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d031      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a27      	ldr	r2, [pc, #156]	; (8001f90 <HAL_DMA_Abort+0x24c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d02c      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a25      	ldr	r2, [pc, #148]	; (8001f94 <HAL_DMA_Abort+0x250>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d027      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a24      	ldr	r2, [pc, #144]	; (8001f98 <HAL_DMA_Abort+0x254>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d022      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a22      	ldr	r2, [pc, #136]	; (8001f9c <HAL_DMA_Abort+0x258>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01d      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a21      	ldr	r2, [pc, #132]	; (8001fa0 <HAL_DMA_Abort+0x25c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d018      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1f      	ldr	r2, [pc, #124]	; (8001fa4 <HAL_DMA_Abort+0x260>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a1e      	ldr	r2, [pc, #120]	; (8001fa8 <HAL_DMA_Abort+0x264>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00e      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1c      	ldr	r2, [pc, #112]	; (8001fac <HAL_DMA_Abort+0x268>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d009      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <HAL_DMA_Abort+0x26c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d004      	beq.n	8001f52 <HAL_DMA_Abort+0x20e>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a19      	ldr	r2, [pc, #100]	; (8001fb4 <HAL_DMA_Abort+0x270>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d132      	bne.n	8001fb8 <HAL_DMA_Abort+0x274>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e031      	b.n	8001fba <HAL_DMA_Abort+0x276>
 8001f56:	bf00      	nop
 8001f58:	40020010 	.word	0x40020010
 8001f5c:	40020028 	.word	0x40020028
 8001f60:	40020040 	.word	0x40020040
 8001f64:	40020058 	.word	0x40020058
 8001f68:	40020070 	.word	0x40020070
 8001f6c:	40020088 	.word	0x40020088
 8001f70:	400200a0 	.word	0x400200a0
 8001f74:	400200b8 	.word	0x400200b8
 8001f78:	40020410 	.word	0x40020410
 8001f7c:	40020428 	.word	0x40020428
 8001f80:	40020440 	.word	0x40020440
 8001f84:	40020458 	.word	0x40020458
 8001f88:	40020470 	.word	0x40020470
 8001f8c:	40020488 	.word	0x40020488
 8001f90:	400204a0 	.word	0x400204a0
 8001f94:	400204b8 	.word	0x400204b8
 8001f98:	58025408 	.word	0x58025408
 8001f9c:	5802541c 	.word	0x5802541c
 8001fa0:	58025430 	.word	0x58025430
 8001fa4:	58025444 	.word	0x58025444
 8001fa8:	58025458 	.word	0x58025458
 8001fac:	5802546c 	.word	0x5802546c
 8001fb0:	58025480 	.word	0x58025480
 8001fb4:	58025494 	.word	0x58025494
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a6d      	ldr	r2, [pc, #436]	; (8002188 <HAL_DMA_Abort+0x444>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d04a      	beq.n	800206e <HAL_DMA_Abort+0x32a>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a6b      	ldr	r2, [pc, #428]	; (800218c <HAL_DMA_Abort+0x448>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d045      	beq.n	800206e <HAL_DMA_Abort+0x32a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a6a      	ldr	r2, [pc, #424]	; (8002190 <HAL_DMA_Abort+0x44c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d040      	beq.n	800206e <HAL_DMA_Abort+0x32a>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a68      	ldr	r2, [pc, #416]	; (8002194 <HAL_DMA_Abort+0x450>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d03b      	beq.n	800206e <HAL_DMA_Abort+0x32a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a67      	ldr	r2, [pc, #412]	; (8002198 <HAL_DMA_Abort+0x454>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d036      	beq.n	800206e <HAL_DMA_Abort+0x32a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a65      	ldr	r2, [pc, #404]	; (800219c <HAL_DMA_Abort+0x458>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d031      	beq.n	800206e <HAL_DMA_Abort+0x32a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a64      	ldr	r2, [pc, #400]	; (80021a0 <HAL_DMA_Abort+0x45c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d02c      	beq.n	800206e <HAL_DMA_Abort+0x32a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a62      	ldr	r2, [pc, #392]	; (80021a4 <HAL_DMA_Abort+0x460>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d027      	beq.n	800206e <HAL_DMA_Abort+0x32a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a61      	ldr	r2, [pc, #388]	; (80021a8 <HAL_DMA_Abort+0x464>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d022      	beq.n	800206e <HAL_DMA_Abort+0x32a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a5f      	ldr	r2, [pc, #380]	; (80021ac <HAL_DMA_Abort+0x468>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01d      	beq.n	800206e <HAL_DMA_Abort+0x32a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a5e      	ldr	r2, [pc, #376]	; (80021b0 <HAL_DMA_Abort+0x46c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d018      	beq.n	800206e <HAL_DMA_Abort+0x32a>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a5c      	ldr	r2, [pc, #368]	; (80021b4 <HAL_DMA_Abort+0x470>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_DMA_Abort+0x32a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a5b      	ldr	r2, [pc, #364]	; (80021b8 <HAL_DMA_Abort+0x474>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00e      	beq.n	800206e <HAL_DMA_Abort+0x32a>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a59      	ldr	r2, [pc, #356]	; (80021bc <HAL_DMA_Abort+0x478>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d009      	beq.n	800206e <HAL_DMA_Abort+0x32a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a58      	ldr	r2, [pc, #352]	; (80021c0 <HAL_DMA_Abort+0x47c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d004      	beq.n	800206e <HAL_DMA_Abort+0x32a>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a56      	ldr	r2, [pc, #344]	; (80021c4 <HAL_DMA_Abort+0x480>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d108      	bne.n	8002080 <HAL_DMA_Abort+0x33c>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0201 	bic.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e007      	b.n	8002090 <HAL_DMA_Abort+0x34c>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002090:	e013      	b.n	80020ba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002092:	f7ff fd17 	bl	8001ac4 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b05      	cmp	r3, #5
 800209e:	d90c      	bls.n	80020ba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2220      	movs	r2, #32
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2203      	movs	r2, #3
 80020aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e12d      	b.n	8002316 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1e5      	bne.n	8002092 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a2f      	ldr	r2, [pc, #188]	; (8002188 <HAL_DMA_Abort+0x444>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d04a      	beq.n	8002166 <HAL_DMA_Abort+0x422>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a2d      	ldr	r2, [pc, #180]	; (800218c <HAL_DMA_Abort+0x448>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d045      	beq.n	8002166 <HAL_DMA_Abort+0x422>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a2c      	ldr	r2, [pc, #176]	; (8002190 <HAL_DMA_Abort+0x44c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d040      	beq.n	8002166 <HAL_DMA_Abort+0x422>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a2a      	ldr	r2, [pc, #168]	; (8002194 <HAL_DMA_Abort+0x450>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d03b      	beq.n	8002166 <HAL_DMA_Abort+0x422>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a29      	ldr	r2, [pc, #164]	; (8002198 <HAL_DMA_Abort+0x454>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d036      	beq.n	8002166 <HAL_DMA_Abort+0x422>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a27      	ldr	r2, [pc, #156]	; (800219c <HAL_DMA_Abort+0x458>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d031      	beq.n	8002166 <HAL_DMA_Abort+0x422>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a26      	ldr	r2, [pc, #152]	; (80021a0 <HAL_DMA_Abort+0x45c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d02c      	beq.n	8002166 <HAL_DMA_Abort+0x422>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a24      	ldr	r2, [pc, #144]	; (80021a4 <HAL_DMA_Abort+0x460>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d027      	beq.n	8002166 <HAL_DMA_Abort+0x422>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a23      	ldr	r2, [pc, #140]	; (80021a8 <HAL_DMA_Abort+0x464>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d022      	beq.n	8002166 <HAL_DMA_Abort+0x422>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a21      	ldr	r2, [pc, #132]	; (80021ac <HAL_DMA_Abort+0x468>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d01d      	beq.n	8002166 <HAL_DMA_Abort+0x422>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a20      	ldr	r2, [pc, #128]	; (80021b0 <HAL_DMA_Abort+0x46c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d018      	beq.n	8002166 <HAL_DMA_Abort+0x422>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1e      	ldr	r2, [pc, #120]	; (80021b4 <HAL_DMA_Abort+0x470>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_DMA_Abort+0x422>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a1d      	ldr	r2, [pc, #116]	; (80021b8 <HAL_DMA_Abort+0x474>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d00e      	beq.n	8002166 <HAL_DMA_Abort+0x422>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <HAL_DMA_Abort+0x478>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d009      	beq.n	8002166 <HAL_DMA_Abort+0x422>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1a      	ldr	r2, [pc, #104]	; (80021c0 <HAL_DMA_Abort+0x47c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d004      	beq.n	8002166 <HAL_DMA_Abort+0x422>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a18      	ldr	r2, [pc, #96]	; (80021c4 <HAL_DMA_Abort+0x480>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d101      	bne.n	800216a <HAL_DMA_Abort+0x426>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_DMA_Abort+0x428>
 800216a:	2300      	movs	r3, #0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d02b      	beq.n	80021c8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217a:	f003 031f 	and.w	r3, r3, #31
 800217e:	223f      	movs	r2, #63	; 0x3f
 8002180:	409a      	lsls	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	e02a      	b.n	80021de <HAL_DMA_Abort+0x49a>
 8002188:	40020010 	.word	0x40020010
 800218c:	40020028 	.word	0x40020028
 8002190:	40020040 	.word	0x40020040
 8002194:	40020058 	.word	0x40020058
 8002198:	40020070 	.word	0x40020070
 800219c:	40020088 	.word	0x40020088
 80021a0:	400200a0 	.word	0x400200a0
 80021a4:	400200b8 	.word	0x400200b8
 80021a8:	40020410 	.word	0x40020410
 80021ac:	40020428 	.word	0x40020428
 80021b0:	40020440 	.word	0x40020440
 80021b4:	40020458 	.word	0x40020458
 80021b8:	40020470 	.word	0x40020470
 80021bc:	40020488 	.word	0x40020488
 80021c0:	400204a0 	.word	0x400204a0
 80021c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021cc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	2201      	movs	r2, #1
 80021d8:	409a      	lsls	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a4f      	ldr	r2, [pc, #316]	; (8002320 <HAL_DMA_Abort+0x5dc>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d072      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a4d      	ldr	r2, [pc, #308]	; (8002324 <HAL_DMA_Abort+0x5e0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d06d      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a4c      	ldr	r2, [pc, #304]	; (8002328 <HAL_DMA_Abort+0x5e4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d068      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a4a      	ldr	r2, [pc, #296]	; (800232c <HAL_DMA_Abort+0x5e8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d063      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a49      	ldr	r2, [pc, #292]	; (8002330 <HAL_DMA_Abort+0x5ec>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d05e      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a47      	ldr	r2, [pc, #284]	; (8002334 <HAL_DMA_Abort+0x5f0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d059      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a46      	ldr	r2, [pc, #280]	; (8002338 <HAL_DMA_Abort+0x5f4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d054      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a44      	ldr	r2, [pc, #272]	; (800233c <HAL_DMA_Abort+0x5f8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d04f      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a43      	ldr	r2, [pc, #268]	; (8002340 <HAL_DMA_Abort+0x5fc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d04a      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a41      	ldr	r2, [pc, #260]	; (8002344 <HAL_DMA_Abort+0x600>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d045      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a40      	ldr	r2, [pc, #256]	; (8002348 <HAL_DMA_Abort+0x604>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d040      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a3e      	ldr	r2, [pc, #248]	; (800234c <HAL_DMA_Abort+0x608>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d03b      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a3d      	ldr	r2, [pc, #244]	; (8002350 <HAL_DMA_Abort+0x60c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d036      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a3b      	ldr	r2, [pc, #236]	; (8002354 <HAL_DMA_Abort+0x610>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d031      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a3a      	ldr	r2, [pc, #232]	; (8002358 <HAL_DMA_Abort+0x614>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d02c      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a38      	ldr	r2, [pc, #224]	; (800235c <HAL_DMA_Abort+0x618>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d027      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a37      	ldr	r2, [pc, #220]	; (8002360 <HAL_DMA_Abort+0x61c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d022      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a35      	ldr	r2, [pc, #212]	; (8002364 <HAL_DMA_Abort+0x620>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d01d      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a34      	ldr	r2, [pc, #208]	; (8002368 <HAL_DMA_Abort+0x624>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d018      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a32      	ldr	r2, [pc, #200]	; (800236c <HAL_DMA_Abort+0x628>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d013      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a31      	ldr	r2, [pc, #196]	; (8002370 <HAL_DMA_Abort+0x62c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d00e      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a2f      	ldr	r2, [pc, #188]	; (8002374 <HAL_DMA_Abort+0x630>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d009      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a2e      	ldr	r2, [pc, #184]	; (8002378 <HAL_DMA_Abort+0x634>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d004      	beq.n	80022ce <HAL_DMA_Abort+0x58a>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a2c      	ldr	r2, [pc, #176]	; (800237c <HAL_DMA_Abort+0x638>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d101      	bne.n	80022d2 <HAL_DMA_Abort+0x58e>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <HAL_DMA_Abort+0x590>
 80022d2:	2300      	movs	r3, #0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d015      	beq.n	8002304 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80022e0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00c      	beq.n	8002304 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002302:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40020010 	.word	0x40020010
 8002324:	40020028 	.word	0x40020028
 8002328:	40020040 	.word	0x40020040
 800232c:	40020058 	.word	0x40020058
 8002330:	40020070 	.word	0x40020070
 8002334:	40020088 	.word	0x40020088
 8002338:	400200a0 	.word	0x400200a0
 800233c:	400200b8 	.word	0x400200b8
 8002340:	40020410 	.word	0x40020410
 8002344:	40020428 	.word	0x40020428
 8002348:	40020440 	.word	0x40020440
 800234c:	40020458 	.word	0x40020458
 8002350:	40020470 	.word	0x40020470
 8002354:	40020488 	.word	0x40020488
 8002358:	400204a0 	.word	0x400204a0
 800235c:	400204b8 	.word	0x400204b8
 8002360:	58025408 	.word	0x58025408
 8002364:	5802541c 	.word	0x5802541c
 8002368:	58025430 	.word	0x58025430
 800236c:	58025444 	.word	0x58025444
 8002370:	58025458 	.word	0x58025458
 8002374:	5802546c 	.word	0x5802546c
 8002378:	58025480 	.word	0x58025480
 800237c:	58025494 	.word	0x58025494

08002380 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e237      	b.n	8002802 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d004      	beq.n	80023a8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2280      	movs	r2, #128	; 0x80
 80023a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e22c      	b.n	8002802 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a5c      	ldr	r2, [pc, #368]	; (8002520 <HAL_DMA_Abort_IT+0x1a0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d04a      	beq.n	8002448 <HAL_DMA_Abort_IT+0xc8>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a5b      	ldr	r2, [pc, #364]	; (8002524 <HAL_DMA_Abort_IT+0x1a4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d045      	beq.n	8002448 <HAL_DMA_Abort_IT+0xc8>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a59      	ldr	r2, [pc, #356]	; (8002528 <HAL_DMA_Abort_IT+0x1a8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d040      	beq.n	8002448 <HAL_DMA_Abort_IT+0xc8>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a58      	ldr	r2, [pc, #352]	; (800252c <HAL_DMA_Abort_IT+0x1ac>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d03b      	beq.n	8002448 <HAL_DMA_Abort_IT+0xc8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a56      	ldr	r2, [pc, #344]	; (8002530 <HAL_DMA_Abort_IT+0x1b0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d036      	beq.n	8002448 <HAL_DMA_Abort_IT+0xc8>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a55      	ldr	r2, [pc, #340]	; (8002534 <HAL_DMA_Abort_IT+0x1b4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d031      	beq.n	8002448 <HAL_DMA_Abort_IT+0xc8>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a53      	ldr	r2, [pc, #332]	; (8002538 <HAL_DMA_Abort_IT+0x1b8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d02c      	beq.n	8002448 <HAL_DMA_Abort_IT+0xc8>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a52      	ldr	r2, [pc, #328]	; (800253c <HAL_DMA_Abort_IT+0x1bc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d027      	beq.n	8002448 <HAL_DMA_Abort_IT+0xc8>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a50      	ldr	r2, [pc, #320]	; (8002540 <HAL_DMA_Abort_IT+0x1c0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d022      	beq.n	8002448 <HAL_DMA_Abort_IT+0xc8>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a4f      	ldr	r2, [pc, #316]	; (8002544 <HAL_DMA_Abort_IT+0x1c4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d01d      	beq.n	8002448 <HAL_DMA_Abort_IT+0xc8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a4d      	ldr	r2, [pc, #308]	; (8002548 <HAL_DMA_Abort_IT+0x1c8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d018      	beq.n	8002448 <HAL_DMA_Abort_IT+0xc8>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a4c      	ldr	r2, [pc, #304]	; (800254c <HAL_DMA_Abort_IT+0x1cc>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d013      	beq.n	8002448 <HAL_DMA_Abort_IT+0xc8>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a4a      	ldr	r2, [pc, #296]	; (8002550 <HAL_DMA_Abort_IT+0x1d0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d00e      	beq.n	8002448 <HAL_DMA_Abort_IT+0xc8>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a49      	ldr	r2, [pc, #292]	; (8002554 <HAL_DMA_Abort_IT+0x1d4>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d009      	beq.n	8002448 <HAL_DMA_Abort_IT+0xc8>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a47      	ldr	r2, [pc, #284]	; (8002558 <HAL_DMA_Abort_IT+0x1d8>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d004      	beq.n	8002448 <HAL_DMA_Abort_IT+0xc8>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a46      	ldr	r2, [pc, #280]	; (800255c <HAL_DMA_Abort_IT+0x1dc>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d101      	bne.n	800244c <HAL_DMA_Abort_IT+0xcc>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <HAL_DMA_Abort_IT+0xce>
 800244c:	2300      	movs	r3, #0
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 8086 	beq.w	8002560 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2204      	movs	r2, #4
 8002458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a2f      	ldr	r2, [pc, #188]	; (8002520 <HAL_DMA_Abort_IT+0x1a0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d04a      	beq.n	80024fc <HAL_DMA_Abort_IT+0x17c>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a2e      	ldr	r2, [pc, #184]	; (8002524 <HAL_DMA_Abort_IT+0x1a4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d045      	beq.n	80024fc <HAL_DMA_Abort_IT+0x17c>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a2c      	ldr	r2, [pc, #176]	; (8002528 <HAL_DMA_Abort_IT+0x1a8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d040      	beq.n	80024fc <HAL_DMA_Abort_IT+0x17c>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a2b      	ldr	r2, [pc, #172]	; (800252c <HAL_DMA_Abort_IT+0x1ac>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d03b      	beq.n	80024fc <HAL_DMA_Abort_IT+0x17c>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a29      	ldr	r2, [pc, #164]	; (8002530 <HAL_DMA_Abort_IT+0x1b0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d036      	beq.n	80024fc <HAL_DMA_Abort_IT+0x17c>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a28      	ldr	r2, [pc, #160]	; (8002534 <HAL_DMA_Abort_IT+0x1b4>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d031      	beq.n	80024fc <HAL_DMA_Abort_IT+0x17c>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a26      	ldr	r2, [pc, #152]	; (8002538 <HAL_DMA_Abort_IT+0x1b8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d02c      	beq.n	80024fc <HAL_DMA_Abort_IT+0x17c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a25      	ldr	r2, [pc, #148]	; (800253c <HAL_DMA_Abort_IT+0x1bc>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d027      	beq.n	80024fc <HAL_DMA_Abort_IT+0x17c>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a23      	ldr	r2, [pc, #140]	; (8002540 <HAL_DMA_Abort_IT+0x1c0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d022      	beq.n	80024fc <HAL_DMA_Abort_IT+0x17c>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a22      	ldr	r2, [pc, #136]	; (8002544 <HAL_DMA_Abort_IT+0x1c4>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d01d      	beq.n	80024fc <HAL_DMA_Abort_IT+0x17c>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a20      	ldr	r2, [pc, #128]	; (8002548 <HAL_DMA_Abort_IT+0x1c8>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d018      	beq.n	80024fc <HAL_DMA_Abort_IT+0x17c>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a1f      	ldr	r2, [pc, #124]	; (800254c <HAL_DMA_Abort_IT+0x1cc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d013      	beq.n	80024fc <HAL_DMA_Abort_IT+0x17c>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1d      	ldr	r2, [pc, #116]	; (8002550 <HAL_DMA_Abort_IT+0x1d0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00e      	beq.n	80024fc <HAL_DMA_Abort_IT+0x17c>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <HAL_DMA_Abort_IT+0x1d4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d009      	beq.n	80024fc <HAL_DMA_Abort_IT+0x17c>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1a      	ldr	r2, [pc, #104]	; (8002558 <HAL_DMA_Abort_IT+0x1d8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d004      	beq.n	80024fc <HAL_DMA_Abort_IT+0x17c>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a19      	ldr	r2, [pc, #100]	; (800255c <HAL_DMA_Abort_IT+0x1dc>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d108      	bne.n	800250e <HAL_DMA_Abort_IT+0x18e>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0201 	bic.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e178      	b.n	8002800 <HAL_DMA_Abort_IT+0x480>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0201 	bic.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	e16f      	b.n	8002800 <HAL_DMA_Abort_IT+0x480>
 8002520:	40020010 	.word	0x40020010
 8002524:	40020028 	.word	0x40020028
 8002528:	40020040 	.word	0x40020040
 800252c:	40020058 	.word	0x40020058
 8002530:	40020070 	.word	0x40020070
 8002534:	40020088 	.word	0x40020088
 8002538:	400200a0 	.word	0x400200a0
 800253c:	400200b8 	.word	0x400200b8
 8002540:	40020410 	.word	0x40020410
 8002544:	40020428 	.word	0x40020428
 8002548:	40020440 	.word	0x40020440
 800254c:	40020458 	.word	0x40020458
 8002550:	40020470 	.word	0x40020470
 8002554:	40020488 	.word	0x40020488
 8002558:	400204a0 	.word	0x400204a0
 800255c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 020e 	bic.w	r2, r2, #14
 800256e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a6c      	ldr	r2, [pc, #432]	; (8002728 <HAL_DMA_Abort_IT+0x3a8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d04a      	beq.n	8002610 <HAL_DMA_Abort_IT+0x290>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a6b      	ldr	r2, [pc, #428]	; (800272c <HAL_DMA_Abort_IT+0x3ac>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d045      	beq.n	8002610 <HAL_DMA_Abort_IT+0x290>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a69      	ldr	r2, [pc, #420]	; (8002730 <HAL_DMA_Abort_IT+0x3b0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d040      	beq.n	8002610 <HAL_DMA_Abort_IT+0x290>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a68      	ldr	r2, [pc, #416]	; (8002734 <HAL_DMA_Abort_IT+0x3b4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d03b      	beq.n	8002610 <HAL_DMA_Abort_IT+0x290>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a66      	ldr	r2, [pc, #408]	; (8002738 <HAL_DMA_Abort_IT+0x3b8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d036      	beq.n	8002610 <HAL_DMA_Abort_IT+0x290>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a65      	ldr	r2, [pc, #404]	; (800273c <HAL_DMA_Abort_IT+0x3bc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d031      	beq.n	8002610 <HAL_DMA_Abort_IT+0x290>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a63      	ldr	r2, [pc, #396]	; (8002740 <HAL_DMA_Abort_IT+0x3c0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d02c      	beq.n	8002610 <HAL_DMA_Abort_IT+0x290>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a62      	ldr	r2, [pc, #392]	; (8002744 <HAL_DMA_Abort_IT+0x3c4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d027      	beq.n	8002610 <HAL_DMA_Abort_IT+0x290>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a60      	ldr	r2, [pc, #384]	; (8002748 <HAL_DMA_Abort_IT+0x3c8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d022      	beq.n	8002610 <HAL_DMA_Abort_IT+0x290>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a5f      	ldr	r2, [pc, #380]	; (800274c <HAL_DMA_Abort_IT+0x3cc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d01d      	beq.n	8002610 <HAL_DMA_Abort_IT+0x290>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a5d      	ldr	r2, [pc, #372]	; (8002750 <HAL_DMA_Abort_IT+0x3d0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d018      	beq.n	8002610 <HAL_DMA_Abort_IT+0x290>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a5c      	ldr	r2, [pc, #368]	; (8002754 <HAL_DMA_Abort_IT+0x3d4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d013      	beq.n	8002610 <HAL_DMA_Abort_IT+0x290>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a5a      	ldr	r2, [pc, #360]	; (8002758 <HAL_DMA_Abort_IT+0x3d8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00e      	beq.n	8002610 <HAL_DMA_Abort_IT+0x290>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a59      	ldr	r2, [pc, #356]	; (800275c <HAL_DMA_Abort_IT+0x3dc>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d009      	beq.n	8002610 <HAL_DMA_Abort_IT+0x290>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a57      	ldr	r2, [pc, #348]	; (8002760 <HAL_DMA_Abort_IT+0x3e0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d004      	beq.n	8002610 <HAL_DMA_Abort_IT+0x290>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a56      	ldr	r2, [pc, #344]	; (8002764 <HAL_DMA_Abort_IT+0x3e4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d108      	bne.n	8002622 <HAL_DMA_Abort_IT+0x2a2>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0201 	bic.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e007      	b.n	8002632 <HAL_DMA_Abort_IT+0x2b2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a3c      	ldr	r2, [pc, #240]	; (8002728 <HAL_DMA_Abort_IT+0x3a8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d072      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a3a      	ldr	r2, [pc, #232]	; (800272c <HAL_DMA_Abort_IT+0x3ac>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d06d      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a39      	ldr	r2, [pc, #228]	; (8002730 <HAL_DMA_Abort_IT+0x3b0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d068      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a37      	ldr	r2, [pc, #220]	; (8002734 <HAL_DMA_Abort_IT+0x3b4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d063      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a36      	ldr	r2, [pc, #216]	; (8002738 <HAL_DMA_Abort_IT+0x3b8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d05e      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a34      	ldr	r2, [pc, #208]	; (800273c <HAL_DMA_Abort_IT+0x3bc>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d059      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a33      	ldr	r2, [pc, #204]	; (8002740 <HAL_DMA_Abort_IT+0x3c0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d054      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a31      	ldr	r2, [pc, #196]	; (8002744 <HAL_DMA_Abort_IT+0x3c4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d04f      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a30      	ldr	r2, [pc, #192]	; (8002748 <HAL_DMA_Abort_IT+0x3c8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d04a      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a2e      	ldr	r2, [pc, #184]	; (800274c <HAL_DMA_Abort_IT+0x3cc>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d045      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a2d      	ldr	r2, [pc, #180]	; (8002750 <HAL_DMA_Abort_IT+0x3d0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d040      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a2b      	ldr	r2, [pc, #172]	; (8002754 <HAL_DMA_Abort_IT+0x3d4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d03b      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2a      	ldr	r2, [pc, #168]	; (8002758 <HAL_DMA_Abort_IT+0x3d8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d036      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a28      	ldr	r2, [pc, #160]	; (800275c <HAL_DMA_Abort_IT+0x3dc>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d031      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a27      	ldr	r2, [pc, #156]	; (8002760 <HAL_DMA_Abort_IT+0x3e0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d02c      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a25      	ldr	r2, [pc, #148]	; (8002764 <HAL_DMA_Abort_IT+0x3e4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d027      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a24      	ldr	r2, [pc, #144]	; (8002768 <HAL_DMA_Abort_IT+0x3e8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d022      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a22      	ldr	r2, [pc, #136]	; (800276c <HAL_DMA_Abort_IT+0x3ec>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d01d      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a21      	ldr	r2, [pc, #132]	; (8002770 <HAL_DMA_Abort_IT+0x3f0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d018      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a1f      	ldr	r2, [pc, #124]	; (8002774 <HAL_DMA_Abort_IT+0x3f4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d013      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a1e      	ldr	r2, [pc, #120]	; (8002778 <HAL_DMA_Abort_IT+0x3f8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00e      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1c      	ldr	r2, [pc, #112]	; (800277c <HAL_DMA_Abort_IT+0x3fc>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d009      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1b      	ldr	r2, [pc, #108]	; (8002780 <HAL_DMA_Abort_IT+0x400>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d004      	beq.n	8002722 <HAL_DMA_Abort_IT+0x3a2>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a19      	ldr	r2, [pc, #100]	; (8002784 <HAL_DMA_Abort_IT+0x404>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d132      	bne.n	8002788 <HAL_DMA_Abort_IT+0x408>
 8002722:	2301      	movs	r3, #1
 8002724:	e031      	b.n	800278a <HAL_DMA_Abort_IT+0x40a>
 8002726:	bf00      	nop
 8002728:	40020010 	.word	0x40020010
 800272c:	40020028 	.word	0x40020028
 8002730:	40020040 	.word	0x40020040
 8002734:	40020058 	.word	0x40020058
 8002738:	40020070 	.word	0x40020070
 800273c:	40020088 	.word	0x40020088
 8002740:	400200a0 	.word	0x400200a0
 8002744:	400200b8 	.word	0x400200b8
 8002748:	40020410 	.word	0x40020410
 800274c:	40020428 	.word	0x40020428
 8002750:	40020440 	.word	0x40020440
 8002754:	40020458 	.word	0x40020458
 8002758:	40020470 	.word	0x40020470
 800275c:	40020488 	.word	0x40020488
 8002760:	400204a0 	.word	0x400204a0
 8002764:	400204b8 	.word	0x400204b8
 8002768:	58025408 	.word	0x58025408
 800276c:	5802541c 	.word	0x5802541c
 8002770:	58025430 	.word	0x58025430
 8002774:	58025444 	.word	0x58025444
 8002778:	58025458 	.word	0x58025458
 800277c:	5802546c 	.word	0x5802546c
 8002780:	58025480 	.word	0x58025480
 8002784:	58025494 	.word	0x58025494
 8002788:	2300      	movs	r3, #0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d028      	beq.n	80027e0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002798:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800279c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	f003 031f 	and.w	r3, r3, #31
 80027ac:	2201      	movs	r2, #1
 80027ae:	409a      	lsls	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80027bc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00c      	beq.n	80027e0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027d4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80027de:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop

0800280c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	; 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800281a:	4b89      	ldr	r3, [pc, #548]	; (8002a40 <HAL_GPIO_Init+0x234>)
 800281c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800281e:	e194      	b.n	8002b4a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	2101      	movs	r1, #1
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	fa01 f303 	lsl.w	r3, r1, r3
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8186 	beq.w	8002b44 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d005      	beq.n	8002850 <HAL_GPIO_Init+0x44>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d130      	bne.n	80028b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002886:	2201      	movs	r2, #1
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	f003 0201 	and.w	r2, r3, #1
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d017      	beq.n	80028ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	2203      	movs	r2, #3
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d123      	bne.n	8002942 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	08da      	lsrs	r2, r3, #3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3208      	adds	r2, #8
 8002902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	220f      	movs	r2, #15
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	691a      	ldr	r2, [r3, #16]
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	08da      	lsrs	r2, r3, #3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3208      	adds	r2, #8
 800293c:	69b9      	ldr	r1, [r7, #24]
 800293e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	2203      	movs	r2, #3
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4013      	ands	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 0203 	and.w	r2, r3, #3
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 80e0 	beq.w	8002b44 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002984:	4b2f      	ldr	r3, [pc, #188]	; (8002a44 <HAL_GPIO_Init+0x238>)
 8002986:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800298a:	4a2e      	ldr	r2, [pc, #184]	; (8002a44 <HAL_GPIO_Init+0x238>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002994:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <HAL_GPIO_Init+0x238>)
 8002996:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029a2:	4a29      	ldr	r2, [pc, #164]	; (8002a48 <HAL_GPIO_Init+0x23c>)
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	089b      	lsrs	r3, r3, #2
 80029a8:	3302      	adds	r3, #2
 80029aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	220f      	movs	r2, #15
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a20      	ldr	r2, [pc, #128]	; (8002a4c <HAL_GPIO_Init+0x240>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d052      	beq.n	8002a74 <HAL_GPIO_Init+0x268>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a1f      	ldr	r2, [pc, #124]	; (8002a50 <HAL_GPIO_Init+0x244>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d031      	beq.n	8002a3a <HAL_GPIO_Init+0x22e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a1e      	ldr	r2, [pc, #120]	; (8002a54 <HAL_GPIO_Init+0x248>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d02b      	beq.n	8002a36 <HAL_GPIO_Init+0x22a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a1d      	ldr	r2, [pc, #116]	; (8002a58 <HAL_GPIO_Init+0x24c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d025      	beq.n	8002a32 <HAL_GPIO_Init+0x226>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a1c      	ldr	r2, [pc, #112]	; (8002a5c <HAL_GPIO_Init+0x250>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d01f      	beq.n	8002a2e <HAL_GPIO_Init+0x222>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a1b      	ldr	r2, [pc, #108]	; (8002a60 <HAL_GPIO_Init+0x254>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d019      	beq.n	8002a2a <HAL_GPIO_Init+0x21e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a1a      	ldr	r2, [pc, #104]	; (8002a64 <HAL_GPIO_Init+0x258>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_GPIO_Init+0x21a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a19      	ldr	r2, [pc, #100]	; (8002a68 <HAL_GPIO_Init+0x25c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00d      	beq.n	8002a22 <HAL_GPIO_Init+0x216>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <HAL_GPIO_Init+0x260>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d007      	beq.n	8002a1e <HAL_GPIO_Init+0x212>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a17      	ldr	r2, [pc, #92]	; (8002a70 <HAL_GPIO_Init+0x264>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_GPIO_Init+0x20e>
 8002a16:	2309      	movs	r3, #9
 8002a18:	e02d      	b.n	8002a76 <HAL_GPIO_Init+0x26a>
 8002a1a:	230a      	movs	r3, #10
 8002a1c:	e02b      	b.n	8002a76 <HAL_GPIO_Init+0x26a>
 8002a1e:	2308      	movs	r3, #8
 8002a20:	e029      	b.n	8002a76 <HAL_GPIO_Init+0x26a>
 8002a22:	2307      	movs	r3, #7
 8002a24:	e027      	b.n	8002a76 <HAL_GPIO_Init+0x26a>
 8002a26:	2306      	movs	r3, #6
 8002a28:	e025      	b.n	8002a76 <HAL_GPIO_Init+0x26a>
 8002a2a:	2305      	movs	r3, #5
 8002a2c:	e023      	b.n	8002a76 <HAL_GPIO_Init+0x26a>
 8002a2e:	2304      	movs	r3, #4
 8002a30:	e021      	b.n	8002a76 <HAL_GPIO_Init+0x26a>
 8002a32:	2303      	movs	r3, #3
 8002a34:	e01f      	b.n	8002a76 <HAL_GPIO_Init+0x26a>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e01d      	b.n	8002a76 <HAL_GPIO_Init+0x26a>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e01b      	b.n	8002a76 <HAL_GPIO_Init+0x26a>
 8002a3e:	bf00      	nop
 8002a40:	58000080 	.word	0x58000080
 8002a44:	58024400 	.word	0x58024400
 8002a48:	58000400 	.word	0x58000400
 8002a4c:	58020000 	.word	0x58020000
 8002a50:	58020400 	.word	0x58020400
 8002a54:	58020800 	.word	0x58020800
 8002a58:	58020c00 	.word	0x58020c00
 8002a5c:	58021000 	.word	0x58021000
 8002a60:	58021400 	.word	0x58021400
 8002a64:	58021800 	.word	0x58021800
 8002a68:	58021c00 	.word	0x58021c00
 8002a6c:	58022000 	.word	0x58022000
 8002a70:	58022400 	.word	0x58022400
 8002a74:	2300      	movs	r3, #0
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	f002 0203 	and.w	r2, r2, #3
 8002a7c:	0092      	lsls	r2, r2, #2
 8002a7e:	4093      	lsls	r3, r2
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a86:	4938      	ldr	r1, [pc, #224]	; (8002b68 <HAL_GPIO_Init+0x35c>)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	089b      	lsrs	r3, r3, #2
 8002a8c:	3302      	adds	r3, #2
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002aba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ae8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	3301      	adds	r3, #1
 8002b48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f47f ae63 	bne.w	8002820 <HAL_GPIO_Init+0x14>
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	bf00      	nop
 8002b5e:	3724      	adds	r7, #36	; 0x24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	58000400 	.word	0x58000400

08002b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	807b      	strh	r3, [r7, #2]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b7c:	787b      	ldrb	r3, [r7, #1]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b82:	887a      	ldrh	r2, [r7, #2]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b88:	e003      	b.n	8002b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b8a:	887b      	ldrh	r3, [r7, #2]
 8002b8c:	041a      	lsls	r2, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	619a      	str	r2, [r3, #24]
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bb0:	887a      	ldrh	r2, [r7, #2]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	041a      	lsls	r2, r3, #16
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	43d9      	mvns	r1, r3
 8002bbc:	887b      	ldrh	r3, [r7, #2]
 8002bbe:	400b      	ands	r3, r1
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	619a      	str	r2, [r3, #24]
}
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002bdc:	4b29      	ldr	r3, [pc, #164]	; (8002c84 <HAL_PWREx_ConfigSupply+0xb0>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	2b06      	cmp	r3, #6
 8002be6:	d00a      	beq.n	8002bfe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002be8:	4b26      	ldr	r3, [pc, #152]	; (8002c84 <HAL_PWREx_ConfigSupply+0xb0>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d001      	beq.n	8002bfa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e040      	b.n	8002c7c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	e03e      	b.n	8002c7c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002bfe:	4b21      	ldr	r3, [pc, #132]	; (8002c84 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002c06:	491f      	ldr	r1, [pc, #124]	; (8002c84 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c0e:	f7fe ff59 	bl	8001ac4 <HAL_GetTick>
 8002c12:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c14:	e009      	b.n	8002c2a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c16:	f7fe ff55 	bl	8001ac4 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c24:	d901      	bls.n	8002c2a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e028      	b.n	8002c7c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c2a:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c36:	d1ee      	bne.n	8002c16 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b1e      	cmp	r3, #30
 8002c3c:	d008      	beq.n	8002c50 <HAL_PWREx_ConfigSupply+0x7c>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b2e      	cmp	r3, #46	; 0x2e
 8002c42:	d005      	beq.n	8002c50 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b1d      	cmp	r3, #29
 8002c48:	d002      	beq.n	8002c50 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b2d      	cmp	r3, #45	; 0x2d
 8002c4e:	d114      	bne.n	8002c7a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002c50:	f7fe ff38 	bl	8001ac4 <HAL_GetTick>
 8002c54:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002c56:	e009      	b.n	8002c6c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c58:	f7fe ff34 	bl	8001ac4 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c66:	d901      	bls.n	8002c6c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e007      	b.n	8002c7c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_PWREx_ConfigSupply+0xb0>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c78:	d1ee      	bne.n	8002c58 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	58024800 	.word	0x58024800

08002c88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08c      	sub	sp, #48	; 0x30
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d102      	bne.n	8002c9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f000 bc1f 	b.w	80034da <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 80b3 	beq.w	8002e10 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002caa:	4b95      	ldr	r3, [pc, #596]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cb4:	4b92      	ldr	r3, [pc, #584]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbc:	2b10      	cmp	r3, #16
 8002cbe:	d007      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x48>
 8002cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc2:	2b18      	cmp	r3, #24
 8002cc4:	d112      	bne.n	8002cec <HAL_RCC_OscConfig+0x64>
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d10d      	bne.n	8002cec <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	4b8b      	ldr	r3, [pc, #556]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8098 	beq.w	8002e0e <HAL_RCC_OscConfig+0x186>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f040 8093 	bne.w	8002e0e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e3f6      	b.n	80034da <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf4:	d106      	bne.n	8002d04 <HAL_RCC_OscConfig+0x7c>
 8002cf6:	4b82      	ldr	r3, [pc, #520]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a81      	ldr	r2, [pc, #516]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	e058      	b.n	8002db6 <HAL_RCC_OscConfig+0x12e>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d112      	bne.n	8002d32 <HAL_RCC_OscConfig+0xaa>
 8002d0c:	4b7c      	ldr	r3, [pc, #496]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a7b      	ldr	r2, [pc, #492]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	4b79      	ldr	r3, [pc, #484]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a78      	ldr	r2, [pc, #480]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002d1e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	4b76      	ldr	r3, [pc, #472]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a75      	ldr	r2, [pc, #468]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	e041      	b.n	8002db6 <HAL_RCC_OscConfig+0x12e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d3a:	d112      	bne.n	8002d62 <HAL_RCC_OscConfig+0xda>
 8002d3c:	4b70      	ldr	r3, [pc, #448]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a6f      	ldr	r2, [pc, #444]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002d42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b6d      	ldr	r3, [pc, #436]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a6c      	ldr	r2, [pc, #432]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002d4e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	4b6a      	ldr	r3, [pc, #424]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a69      	ldr	r2, [pc, #420]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	e029      	b.n	8002db6 <HAL_RCC_OscConfig+0x12e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002d6a:	d112      	bne.n	8002d92 <HAL_RCC_OscConfig+0x10a>
 8002d6c:	4b64      	ldr	r3, [pc, #400]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a63      	ldr	r2, [pc, #396]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002d72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	4b61      	ldr	r3, [pc, #388]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a60      	ldr	r2, [pc, #384]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002d7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b5e      	ldr	r3, [pc, #376]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a5d      	ldr	r2, [pc, #372]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	e011      	b.n	8002db6 <HAL_RCC_OscConfig+0x12e>
 8002d92:	4b5b      	ldr	r3, [pc, #364]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a5a      	ldr	r2, [pc, #360]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	4b58      	ldr	r3, [pc, #352]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a57      	ldr	r2, [pc, #348]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	4b55      	ldr	r3, [pc, #340]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a54      	ldr	r2, [pc, #336]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002db0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002db4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d013      	beq.n	8002de6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbe:	f7fe fe81 	bl	8001ac4 <HAL_GetTick>
 8002dc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc6:	f7fe fe7d 	bl	8001ac4 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b64      	cmp	r3, #100	; 0x64
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e380      	b.n	80034da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dd8:	4b49      	ldr	r3, [pc, #292]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x13e>
 8002de4:	e014      	b.n	8002e10 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de6:	f7fe fe6d 	bl	8001ac4 <HAL_GetTick>
 8002dea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dee:	f7fe fe69 	bl	8001ac4 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b64      	cmp	r3, #100	; 0x64
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e36c      	b.n	80034da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e00:	4b3f      	ldr	r3, [pc, #252]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f0      	bne.n	8002dee <HAL_RCC_OscConfig+0x166>
 8002e0c:	e000      	b.n	8002e10 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 808c 	beq.w	8002f36 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e1e:	4b38      	ldr	r3, [pc, #224]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e26:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e28:	4b35      	ldr	r3, [pc, #212]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <HAL_RCC_OscConfig+0x1bc>
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	2b18      	cmp	r3, #24
 8002e38:	d137      	bne.n	8002eaa <HAL_RCC_OscConfig+0x222>
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d132      	bne.n	8002eaa <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e44:	4b2e      	ldr	r3, [pc, #184]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_OscConfig+0x1d4>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e33e      	b.n	80034da <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e5c:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 0219 	bic.w	r2, r3, #25
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4925      	ldr	r1, [pc, #148]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fe29 	bl	8001ac4 <HAL_GetTick>
 8002e72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e76:	f7fe fe25 	bl	8001ac4 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e328      	b.n	80034da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f0      	beq.n	8002e76 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e94:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	061b      	lsls	r3, r3, #24
 8002ea2:	4917      	ldr	r1, [pc, #92]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ea8:	e045      	b.n	8002f36 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d028      	beq.n	8002f04 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002eb2:	4b13      	ldr	r3, [pc, #76]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 0219 	bic.w	r2, r3, #25
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4910      	ldr	r1, [pc, #64]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7fe fdfe 	bl	8001ac4 <HAL_GetTick>
 8002ec8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ecc:	f7fe fdfa 	bl	8001ac4 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e2fd      	b.n	80034da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ede:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	061b      	lsls	r3, r3, #24
 8002ef8:	4901      	ldr	r1, [pc, #4]	; (8002f00 <HAL_RCC_OscConfig+0x278>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	604b      	str	r3, [r1, #4]
 8002efe:	e01a      	b.n	8002f36 <HAL_RCC_OscConfig+0x2ae>
 8002f00:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f04:	4b97      	ldr	r3, [pc, #604]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a96      	ldr	r2, [pc, #600]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8002f0a:	f023 0301 	bic.w	r3, r3, #1
 8002f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fe fdd8 	bl	8001ac4 <HAL_GetTick>
 8002f14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f18:	f7fe fdd4 	bl	8001ac4 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e2d7      	b.n	80034da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f2a:	4b8e      	ldr	r3, [pc, #568]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d06a      	beq.n	8003018 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f42:	4b88      	ldr	r3, [pc, #544]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f4a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f4c:	4b85      	ldr	r3, [pc, #532]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d007      	beq.n	8002f68 <HAL_RCC_OscConfig+0x2e0>
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b18      	cmp	r3, #24
 8002f5c:	d11b      	bne.n	8002f96 <HAL_RCC_OscConfig+0x30e>
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d116      	bne.n	8002f96 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f68:	4b7e      	ldr	r3, [pc, #504]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_RCC_OscConfig+0x2f8>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	2b80      	cmp	r3, #128	; 0x80
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e2ac      	b.n	80034da <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f80:	4b78      	ldr	r3, [pc, #480]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	061b      	lsls	r3, r3, #24
 8002f8e:	4975      	ldr	r1, [pc, #468]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f94:	e040      	b.n	8003018 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d023      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f9e:	4b71      	ldr	r3, [pc, #452]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a70      	ldr	r2, [pc, #448]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8002fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002faa:	f7fe fd8b 	bl	8001ac4 <HAL_GetTick>
 8002fae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002fb2:	f7fe fd87 	bl	8001ac4 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e28a      	b.n	80034da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fc4:	4b67      	ldr	r3, [pc, #412]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fd0:	4b64      	ldr	r3, [pc, #400]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	061b      	lsls	r3, r3, #24
 8002fde:	4961      	ldr	r1, [pc, #388]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60cb      	str	r3, [r1, #12]
 8002fe4:	e018      	b.n	8003018 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002fe6:	4b5f      	ldr	r3, [pc, #380]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a5e      	ldr	r2, [pc, #376]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8002fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff2:	f7fe fd67 	bl	8001ac4 <HAL_GetTick>
 8002ff6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ffa:	f7fe fd63 	bl	8001ac4 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e266      	b.n	80034da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800300c:	4b55      	ldr	r3, [pc, #340]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f0      	bne.n	8002ffa <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d036      	beq.n	8003092 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d019      	beq.n	8003060 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800302c:	4b4d      	ldr	r3, [pc, #308]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 800302e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003030:	4a4c      	ldr	r2, [pc, #304]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003038:	f7fe fd44 	bl	8001ac4 <HAL_GetTick>
 800303c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003040:	f7fe fd40 	bl	8001ac4 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e243      	b.n	80034da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003052:	4b44      	ldr	r3, [pc, #272]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8003054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x3b8>
 800305e:	e018      	b.n	8003092 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003060:	4b40      	ldr	r3, [pc, #256]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8003062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003064:	4a3f      	ldr	r2, [pc, #252]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8003066:	f023 0301 	bic.w	r3, r3, #1
 800306a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306c:	f7fe fd2a 	bl	8001ac4 <HAL_GetTick>
 8003070:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003074:	f7fe fd26 	bl	8001ac4 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e229      	b.n	80034da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003086:	4b37      	ldr	r3, [pc, #220]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8003088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d036      	beq.n	800310c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d019      	beq.n	80030da <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030a6:	4b2f      	ldr	r3, [pc, #188]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a2e      	ldr	r2, [pc, #184]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 80030ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030b2:	f7fe fd07 	bl	8001ac4 <HAL_GetTick>
 80030b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030ba:	f7fe fd03 	bl	8001ac4 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e206      	b.n	80034da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030cc:	4b25      	ldr	r3, [pc, #148]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x432>
 80030d8:	e018      	b.n	800310c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030da:	4b22      	ldr	r3, [pc, #136]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a21      	ldr	r2, [pc, #132]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 80030e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030e6:	f7fe fced 	bl	8001ac4 <HAL_GetTick>
 80030ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030ee:	f7fe fce9 	bl	8001ac4 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e1ec      	b.n	80034da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003100:	4b18      	ldr	r3, [pc, #96]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f0      	bne.n	80030ee <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80af 	beq.w	8003278 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <HAL_RCC_OscConfig+0x4e0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a12      	ldr	r2, [pc, #72]	; (8003168 <HAL_RCC_OscConfig+0x4e0>)
 8003120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003124:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003126:	f7fe fccd 	bl	8001ac4 <HAL_GetTick>
 800312a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312e:	f7fe fcc9 	bl	8001ac4 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b64      	cmp	r3, #100	; 0x64
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e1cc      	b.n	80034da <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003140:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_RCC_OscConfig+0x4e0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d10b      	bne.n	800316c <HAL_RCC_OscConfig+0x4e4>
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 8003156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003158:	4a02      	ldr	r2, [pc, #8]	; (8003164 <HAL_RCC_OscConfig+0x4dc>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	6713      	str	r3, [r2, #112]	; 0x70
 8003160:	e05b      	b.n	800321a <HAL_RCC_OscConfig+0x592>
 8003162:	bf00      	nop
 8003164:	58024400 	.word	0x58024400
 8003168:	58024800 	.word	0x58024800
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d112      	bne.n	800319a <HAL_RCC_OscConfig+0x512>
 8003174:	4b9d      	ldr	r3, [pc, #628]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003178:	4a9c      	ldr	r2, [pc, #624]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 800317a:	f023 0301 	bic.w	r3, r3, #1
 800317e:	6713      	str	r3, [r2, #112]	; 0x70
 8003180:	4b9a      	ldr	r3, [pc, #616]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 8003182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003184:	4a99      	ldr	r2, [pc, #612]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 8003186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800318a:	6713      	str	r3, [r2, #112]	; 0x70
 800318c:	4b97      	ldr	r3, [pc, #604]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003190:	4a96      	ldr	r2, [pc, #600]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 8003192:	f023 0304 	bic.w	r3, r3, #4
 8003196:	6713      	str	r3, [r2, #112]	; 0x70
 8003198:	e03f      	b.n	800321a <HAL_RCC_OscConfig+0x592>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b05      	cmp	r3, #5
 80031a0:	d112      	bne.n	80031c8 <HAL_RCC_OscConfig+0x540>
 80031a2:	4b92      	ldr	r3, [pc, #584]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	4a91      	ldr	r2, [pc, #580]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80031a8:	f043 0304 	orr.w	r3, r3, #4
 80031ac:	6713      	str	r3, [r2, #112]	; 0x70
 80031ae:	4b8f      	ldr	r3, [pc, #572]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	4a8e      	ldr	r2, [pc, #568]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80031b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031b8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ba:	4b8c      	ldr	r3, [pc, #560]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	4a8b      	ldr	r2, [pc, #556]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	6713      	str	r3, [r2, #112]	; 0x70
 80031c6:	e028      	b.n	800321a <HAL_RCC_OscConfig+0x592>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b85      	cmp	r3, #133	; 0x85
 80031ce:	d112      	bne.n	80031f6 <HAL_RCC_OscConfig+0x56e>
 80031d0:	4b86      	ldr	r3, [pc, #536]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	4a85      	ldr	r2, [pc, #532]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80031d6:	f043 0304 	orr.w	r3, r3, #4
 80031da:	6713      	str	r3, [r2, #112]	; 0x70
 80031dc:	4b83      	ldr	r3, [pc, #524]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	4a82      	ldr	r2, [pc, #520]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80031e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e6:	6713      	str	r3, [r2, #112]	; 0x70
 80031e8:	4b80      	ldr	r3, [pc, #512]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	4a7f      	ldr	r2, [pc, #508]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6713      	str	r3, [r2, #112]	; 0x70
 80031f4:	e011      	b.n	800321a <HAL_RCC_OscConfig+0x592>
 80031f6:	4b7d      	ldr	r3, [pc, #500]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	4a7c      	ldr	r2, [pc, #496]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80031fc:	f023 0301 	bic.w	r3, r3, #1
 8003200:	6713      	str	r3, [r2, #112]	; 0x70
 8003202:	4b7a      	ldr	r3, [pc, #488]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003206:	4a79      	ldr	r2, [pc, #484]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 8003208:	f023 0304 	bic.w	r3, r3, #4
 800320c:	6713      	str	r3, [r2, #112]	; 0x70
 800320e:	4b77      	ldr	r3, [pc, #476]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003212:	4a76      	ldr	r2, [pc, #472]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 8003214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003218:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d015      	beq.n	800324e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003222:	f7fe fc4f 	bl	8001ac4 <HAL_GetTick>
 8003226:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003228:	e00a      	b.n	8003240 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322a:	f7fe fc4b 	bl	8001ac4 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	f241 3288 	movw	r2, #5000	; 0x1388
 8003238:	4293      	cmp	r3, r2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e14c      	b.n	80034da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003240:	4b6a      	ldr	r3, [pc, #424]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0ee      	beq.n	800322a <HAL_RCC_OscConfig+0x5a2>
 800324c:	e014      	b.n	8003278 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324e:	f7fe fc39 	bl	8001ac4 <HAL_GetTick>
 8003252:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003254:	e00a      	b.n	800326c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003256:	f7fe fc35 	bl	8001ac4 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	f241 3288 	movw	r2, #5000	; 0x1388
 8003264:	4293      	cmp	r3, r2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e136      	b.n	80034da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800326c:	4b5f      	ldr	r3, [pc, #380]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1ee      	bne.n	8003256 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 812b 	beq.w	80034d8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003282:	4b5a      	ldr	r3, [pc, #360]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800328a:	2b18      	cmp	r3, #24
 800328c:	f000 80bb 	beq.w	8003406 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	2b02      	cmp	r3, #2
 8003296:	f040 8095 	bne.w	80033c4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329a:	4b54      	ldr	r3, [pc, #336]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a53      	ldr	r2, [pc, #332]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80032a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a6:	f7fe fc0d 	bl	8001ac4 <HAL_GetTick>
 80032aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ae:	f7fe fc09 	bl	8001ac4 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e10c      	b.n	80034da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032c0:	4b4a      	ldr	r3, [pc, #296]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f0      	bne.n	80032ae <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032cc:	4b47      	ldr	r3, [pc, #284]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80032ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032d0:	4b47      	ldr	r3, [pc, #284]	; (80033f0 <HAL_RCC_OscConfig+0x768>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032dc:	0112      	lsls	r2, r2, #4
 80032de:	430a      	orrs	r2, r1
 80032e0:	4942      	ldr	r1, [pc, #264]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	628b      	str	r3, [r1, #40]	; 0x28
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	3b01      	subs	r3, #1
 80032ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f4:	3b01      	subs	r3, #1
 80032f6:	025b      	lsls	r3, r3, #9
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003300:	3b01      	subs	r3, #1
 8003302:	041b      	lsls	r3, r3, #16
 8003304:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003308:	431a      	orrs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330e:	3b01      	subs	r3, #1
 8003310:	061b      	lsls	r3, r3, #24
 8003312:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003316:	4935      	ldr	r1, [pc, #212]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 8003318:	4313      	orrs	r3, r2
 800331a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800331c:	4b33      	ldr	r3, [pc, #204]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	4a32      	ldr	r2, [pc, #200]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 8003322:	f023 0301 	bic.w	r3, r3, #1
 8003326:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003328:	4b30      	ldr	r3, [pc, #192]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 800332a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800332c:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <HAL_RCC_OscConfig+0x76c>)
 800332e:	4013      	ands	r3, r2
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003334:	00d2      	lsls	r2, r2, #3
 8003336:	492d      	ldr	r1, [pc, #180]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 8003338:	4313      	orrs	r3, r2
 800333a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800333c:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	f023 020c 	bic.w	r2, r3, #12
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	4928      	ldr	r1, [pc, #160]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 800334a:	4313      	orrs	r3, r2
 800334c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800334e:	4b27      	ldr	r3, [pc, #156]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	f023 0202 	bic.w	r2, r3, #2
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	4924      	ldr	r1, [pc, #144]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 800335c:	4313      	orrs	r3, r2
 800335e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003360:	4b22      	ldr	r3, [pc, #136]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	4a21      	ldr	r2, [pc, #132]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 8003366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800336c:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	4a1e      	ldr	r2, [pc, #120]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 8003372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003376:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003378:	4b1c      	ldr	r3, [pc, #112]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	4a1b      	ldr	r2, [pc, #108]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 800337e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003382:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003384:	4b19      	ldr	r3, [pc, #100]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	4a18      	ldr	r2, [pc, #96]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003390:	4b16      	ldr	r3, [pc, #88]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a15      	ldr	r2, [pc, #84]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 8003396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800339a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fe fb92 	bl	8001ac4 <HAL_GetTick>
 80033a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a4:	f7fe fb8e 	bl	8001ac4 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e091      	b.n	80034da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033b6:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0x71c>
 80033c2:	e089      	b.n	80034d8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a08      	ldr	r2, [pc, #32]	; (80033ec <HAL_RCC_OscConfig+0x764>)
 80033ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fe fb78 	bl	8001ac4 <HAL_GetTick>
 80033d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033d6:	e00f      	b.n	80033f8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fe fb74 	bl	8001ac4 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d908      	bls.n	80033f8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e077      	b.n	80034da <HAL_RCC_OscConfig+0x852>
 80033ea:	bf00      	nop
 80033ec:	58024400 	.word	0x58024400
 80033f0:	fffffc0c 	.word	0xfffffc0c
 80033f4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033f8:	4b3a      	ldr	r3, [pc, #232]	; (80034e4 <HAL_RCC_OscConfig+0x85c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1e9      	bne.n	80033d8 <HAL_RCC_OscConfig+0x750>
 8003404:	e068      	b.n	80034d8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003406:	4b37      	ldr	r3, [pc, #220]	; (80034e4 <HAL_RCC_OscConfig+0x85c>)
 8003408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800340c:	4b35      	ldr	r3, [pc, #212]	; (80034e4 <HAL_RCC_OscConfig+0x85c>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	2b01      	cmp	r3, #1
 8003418:	d031      	beq.n	800347e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f003 0203 	and.w	r2, r3, #3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003424:	429a      	cmp	r2, r3
 8003426:	d12a      	bne.n	800347e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003434:	429a      	cmp	r2, r3
 8003436:	d122      	bne.n	800347e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003444:	429a      	cmp	r2, r3
 8003446:	d11a      	bne.n	800347e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	0a5b      	lsrs	r3, r3, #9
 800344c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003454:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d111      	bne.n	800347e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	0c1b      	lsrs	r3, r3, #16
 800345e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003466:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003468:	429a      	cmp	r2, r3
 800346a:	d108      	bne.n	800347e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003478:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800347a:	429a      	cmp	r2, r3
 800347c:	d001      	beq.n	8003482 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e02b      	b.n	80034da <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003482:	4b18      	ldr	r3, [pc, #96]	; (80034e4 <HAL_RCC_OscConfig+0x85c>)
 8003484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003486:	08db      	lsrs	r3, r3, #3
 8003488:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800348c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	429a      	cmp	r2, r3
 8003496:	d01f      	beq.n	80034d8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003498:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <HAL_RCC_OscConfig+0x85c>)
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	4a11      	ldr	r2, [pc, #68]	; (80034e4 <HAL_RCC_OscConfig+0x85c>)
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034a4:	f7fe fb0e 	bl	8001ac4 <HAL_GetTick>
 80034a8:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80034aa:	bf00      	nop
 80034ac:	f7fe fb0a 	bl	8001ac4 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d0f9      	beq.n	80034ac <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034b8:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <HAL_RCC_OscConfig+0x85c>)
 80034ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034bc:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <HAL_RCC_OscConfig+0x860>)
 80034be:	4013      	ands	r3, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034c4:	00d2      	lsls	r2, r2, #3
 80034c6:	4907      	ldr	r1, [pc, #28]	; (80034e4 <HAL_RCC_OscConfig+0x85c>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_RCC_OscConfig+0x85c>)
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	4a04      	ldr	r2, [pc, #16]	; (80034e4 <HAL_RCC_OscConfig+0x85c>)
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3730      	adds	r7, #48	; 0x30
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	58024400 	.word	0x58024400
 80034e8:	ffff0007 	.word	0xffff0007

080034ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e19c      	b.n	800383a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003500:	4b8a      	ldr	r3, [pc, #552]	; (800372c <HAL_RCC_ClockConfig+0x240>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d910      	bls.n	8003530 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350e:	4b87      	ldr	r3, [pc, #540]	; (800372c <HAL_RCC_ClockConfig+0x240>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 020f 	bic.w	r2, r3, #15
 8003516:	4985      	ldr	r1, [pc, #532]	; (800372c <HAL_RCC_ClockConfig+0x240>)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	4313      	orrs	r3, r2
 800351c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800351e:	4b83      	ldr	r3, [pc, #524]	; (800372c <HAL_RCC_ClockConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d001      	beq.n	8003530 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e184      	b.n	800383a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d010      	beq.n	800355e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	4b7b      	ldr	r3, [pc, #492]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003548:	429a      	cmp	r2, r3
 800354a:	d908      	bls.n	800355e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800354c:	4b78      	ldr	r3, [pc, #480]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	4975      	ldr	r1, [pc, #468]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 800355a:	4313      	orrs	r3, r2
 800355c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d010      	beq.n	800358c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695a      	ldr	r2, [r3, #20]
 800356e:	4b70      	ldr	r3, [pc, #448]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003576:	429a      	cmp	r2, r3
 8003578:	d908      	bls.n	800358c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800357a:	4b6d      	ldr	r3, [pc, #436]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	496a      	ldr	r1, [pc, #424]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 8003588:	4313      	orrs	r3, r2
 800358a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	2b00      	cmp	r3, #0
 8003596:	d010      	beq.n	80035ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699a      	ldr	r2, [r3, #24]
 800359c:	4b64      	ldr	r3, [pc, #400]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d908      	bls.n	80035ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035a8:	4b61      	ldr	r3, [pc, #388]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	495e      	ldr	r1, [pc, #376]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d010      	beq.n	80035e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69da      	ldr	r2, [r3, #28]
 80035ca:	4b59      	ldr	r3, [pc, #356]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d908      	bls.n	80035e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035d6:	4b56      	ldr	r3, [pc, #344]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	4953      	ldr	r1, [pc, #332]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d010      	beq.n	8003616 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	4b4d      	ldr	r3, [pc, #308]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f003 030f 	and.w	r3, r3, #15
 8003600:	429a      	cmp	r2, r3
 8003602:	d908      	bls.n	8003616 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003604:	4b4a      	ldr	r3, [pc, #296]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	f023 020f 	bic.w	r2, r3, #15
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4947      	ldr	r1, [pc, #284]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 8003612:	4313      	orrs	r3, r2
 8003614:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d055      	beq.n	80036ce <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003622:	4b43      	ldr	r3, [pc, #268]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	4940      	ldr	r1, [pc, #256]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 8003630:	4313      	orrs	r3, r2
 8003632:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d107      	bne.n	800364c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800363c:	4b3c      	ldr	r3, [pc, #240]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d121      	bne.n	800368c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0f6      	b.n	800383a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b03      	cmp	r3, #3
 8003652:	d107      	bne.n	8003664 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003654:	4b36      	ldr	r3, [pc, #216]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d115      	bne.n	800368c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0ea      	b.n	800383a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d107      	bne.n	800367c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800366c:	4b30      	ldr	r3, [pc, #192]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d109      	bne.n	800368c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0de      	b.n	800383a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800367c:	4b2c      	ldr	r3, [pc, #176]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0d6      	b.n	800383a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800368c:	4b28      	ldr	r3, [pc, #160]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f023 0207 	bic.w	r2, r3, #7
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	4925      	ldr	r1, [pc, #148]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 800369a:	4313      	orrs	r3, r2
 800369c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800369e:	f7fe fa11 	bl	8001ac4 <HAL_GetTick>
 80036a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a4:	e00a      	b.n	80036bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a6:	f7fe fa0d 	bl	8001ac4 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e0be      	b.n	800383a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036bc:	4b1c      	ldr	r3, [pc, #112]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d1eb      	bne.n	80036a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d010      	beq.n	80036fc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	4b14      	ldr	r3, [pc, #80]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d208      	bcs.n	80036fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ea:	4b11      	ldr	r3, [pc, #68]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f023 020f 	bic.w	r2, r3, #15
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	490e      	ldr	r1, [pc, #56]	; (8003730 <HAL_RCC_ClockConfig+0x244>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <HAL_RCC_ClockConfig+0x240>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 030f 	and.w	r3, r3, #15
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d214      	bcs.n	8003734 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370a:	4b08      	ldr	r3, [pc, #32]	; (800372c <HAL_RCC_ClockConfig+0x240>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 020f 	bic.w	r2, r3, #15
 8003712:	4906      	ldr	r1, [pc, #24]	; (800372c <HAL_RCC_ClockConfig+0x240>)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371a:	4b04      	ldr	r3, [pc, #16]	; (800372c <HAL_RCC_ClockConfig+0x240>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d005      	beq.n	8003734 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e086      	b.n	800383a <HAL_RCC_ClockConfig+0x34e>
 800372c:	52002000 	.word	0x52002000
 8003730:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d010      	beq.n	8003762 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	4b3f      	ldr	r3, [pc, #252]	; (8003844 <HAL_RCC_ClockConfig+0x358>)
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800374c:	429a      	cmp	r2, r3
 800374e:	d208      	bcs.n	8003762 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003750:	4b3c      	ldr	r3, [pc, #240]	; (8003844 <HAL_RCC_ClockConfig+0x358>)
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	4939      	ldr	r1, [pc, #228]	; (8003844 <HAL_RCC_ClockConfig+0x358>)
 800375e:	4313      	orrs	r3, r2
 8003760:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d010      	beq.n	8003790 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695a      	ldr	r2, [r3, #20]
 8003772:	4b34      	ldr	r3, [pc, #208]	; (8003844 <HAL_RCC_ClockConfig+0x358>)
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800377a:	429a      	cmp	r2, r3
 800377c:	d208      	bcs.n	8003790 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800377e:	4b31      	ldr	r3, [pc, #196]	; (8003844 <HAL_RCC_ClockConfig+0x358>)
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	492e      	ldr	r1, [pc, #184]	; (8003844 <HAL_RCC_ClockConfig+0x358>)
 800378c:	4313      	orrs	r3, r2
 800378e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0310 	and.w	r3, r3, #16
 8003798:	2b00      	cmp	r3, #0
 800379a:	d010      	beq.n	80037be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699a      	ldr	r2, [r3, #24]
 80037a0:	4b28      	ldr	r3, [pc, #160]	; (8003844 <HAL_RCC_ClockConfig+0x358>)
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d208      	bcs.n	80037be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037ac:	4b25      	ldr	r3, [pc, #148]	; (8003844 <HAL_RCC_ClockConfig+0x358>)
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	4922      	ldr	r1, [pc, #136]	; (8003844 <HAL_RCC_ClockConfig+0x358>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d010      	beq.n	80037ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69da      	ldr	r2, [r3, #28]
 80037ce:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <HAL_RCC_ClockConfig+0x358>)
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d208      	bcs.n	80037ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037da:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <HAL_RCC_ClockConfig+0x358>)
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	4917      	ldr	r1, [pc, #92]	; (8003844 <HAL_RCC_ClockConfig+0x358>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80037ec:	f000 f834 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 80037f0:	4602      	mov	r2, r0
 80037f2:	4b14      	ldr	r3, [pc, #80]	; (8003844 <HAL_RCC_ClockConfig+0x358>)
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	0a1b      	lsrs	r3, r3, #8
 80037f8:	f003 030f 	and.w	r3, r3, #15
 80037fc:	4912      	ldr	r1, [pc, #72]	; (8003848 <HAL_RCC_ClockConfig+0x35c>)
 80037fe:	5ccb      	ldrb	r3, [r1, r3]
 8003800:	f003 031f 	and.w	r3, r3, #31
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
 8003808:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800380a:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <HAL_RCC_ClockConfig+0x358>)
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	4a0d      	ldr	r2, [pc, #52]	; (8003848 <HAL_RCC_ClockConfig+0x35c>)
 8003814:	5cd3      	ldrb	r3, [r2, r3]
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	fa22 f303 	lsr.w	r3, r2, r3
 8003820:	4a0a      	ldr	r2, [pc, #40]	; (800384c <HAL_RCC_ClockConfig+0x360>)
 8003822:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003824:	4a0a      	ldr	r2, [pc, #40]	; (8003850 <HAL_RCC_ClockConfig+0x364>)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800382a:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <HAL_RCC_ClockConfig+0x368>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe f8fe 	bl	8001a30 <HAL_InitTick>
 8003834:	4603      	mov	r3, r0
 8003836:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003838:	7bfb      	ldrb	r3, [r7, #15]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	58024400 	.word	0x58024400
 8003848:	0800a4a4 	.word	0x0800a4a4
 800384c:	24000014 	.word	0x24000014
 8003850:	24000010 	.word	0x24000010
 8003854:	24000018 	.word	0x24000018

08003858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003858:	b480      	push	{r7}
 800385a:	b089      	sub	sp, #36	; 0x24
 800385c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800385e:	4bb3      	ldr	r3, [pc, #716]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003866:	2b18      	cmp	r3, #24
 8003868:	f200 8155 	bhi.w	8003b16 <HAL_RCC_GetSysClockFreq+0x2be>
 800386c:	a201      	add	r2, pc, #4	; (adr r2, 8003874 <HAL_RCC_GetSysClockFreq+0x1c>)
 800386e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003872:	bf00      	nop
 8003874:	080038d9 	.word	0x080038d9
 8003878:	08003b17 	.word	0x08003b17
 800387c:	08003b17 	.word	0x08003b17
 8003880:	08003b17 	.word	0x08003b17
 8003884:	08003b17 	.word	0x08003b17
 8003888:	08003b17 	.word	0x08003b17
 800388c:	08003b17 	.word	0x08003b17
 8003890:	08003b17 	.word	0x08003b17
 8003894:	080038ff 	.word	0x080038ff
 8003898:	08003b17 	.word	0x08003b17
 800389c:	08003b17 	.word	0x08003b17
 80038a0:	08003b17 	.word	0x08003b17
 80038a4:	08003b17 	.word	0x08003b17
 80038a8:	08003b17 	.word	0x08003b17
 80038ac:	08003b17 	.word	0x08003b17
 80038b0:	08003b17 	.word	0x08003b17
 80038b4:	08003905 	.word	0x08003905
 80038b8:	08003b17 	.word	0x08003b17
 80038bc:	08003b17 	.word	0x08003b17
 80038c0:	08003b17 	.word	0x08003b17
 80038c4:	08003b17 	.word	0x08003b17
 80038c8:	08003b17 	.word	0x08003b17
 80038cc:	08003b17 	.word	0x08003b17
 80038d0:	08003b17 	.word	0x08003b17
 80038d4:	0800390b 	.word	0x0800390b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038d8:	4b94      	ldr	r3, [pc, #592]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d009      	beq.n	80038f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038e4:	4b91      	ldr	r3, [pc, #580]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	08db      	lsrs	r3, r3, #3
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	4a90      	ldr	r2, [pc, #576]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038f0:	fa22 f303 	lsr.w	r3, r2, r3
 80038f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80038f6:	e111      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80038f8:	4b8d      	ldr	r3, [pc, #564]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038fa:	61bb      	str	r3, [r7, #24]
      break;
 80038fc:	e10e      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80038fe:	4b8d      	ldr	r3, [pc, #564]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003900:	61bb      	str	r3, [r7, #24]
      break;
 8003902:	e10b      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003904:	4b8c      	ldr	r3, [pc, #560]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003906:	61bb      	str	r3, [r7, #24]
      break;
 8003908:	e108      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800390a:	4b88      	ldr	r3, [pc, #544]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003914:	4b85      	ldr	r3, [pc, #532]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800391e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003920:	4b82      	ldr	r3, [pc, #520]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800392a:	4b80      	ldr	r3, [pc, #512]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800392c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392e:	08db      	lsrs	r3, r3, #3
 8003930:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	fb02 f303 	mul.w	r3, r2, r3
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003942:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80e1 	beq.w	8003b10 <HAL_RCC_GetSysClockFreq+0x2b8>
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b02      	cmp	r3, #2
 8003952:	f000 8083 	beq.w	8003a5c <HAL_RCC_GetSysClockFreq+0x204>
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b02      	cmp	r3, #2
 800395a:	f200 80a1 	bhi.w	8003aa0 <HAL_RCC_GetSysClockFreq+0x248>
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_RCC_GetSysClockFreq+0x114>
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d056      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x1c0>
 800396a:	e099      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800396c:	4b6f      	ldr	r3, [pc, #444]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b00      	cmp	r3, #0
 8003976:	d02d      	beq.n	80039d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003978:	4b6c      	ldr	r3, [pc, #432]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	08db      	lsrs	r3, r3, #3
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	4a6b      	ldr	r2, [pc, #428]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
 8003988:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	ee07 3a90 	vmov	s15, r3
 8003990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800399e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039a2:	4b62      	ldr	r3, [pc, #392]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039aa:	ee07 3a90 	vmov	s15, r3
 80039ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80039b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003b3c <HAL_RCC_GetSysClockFreq+0x2e4>
 80039ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80039d2:	e087      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	ee07 3a90 	vmov	s15, r3
 80039da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003b40 <HAL_RCC_GetSysClockFreq+0x2e8>
 80039e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039e6:	4b51      	ldr	r3, [pc, #324]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80039fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003b3c <HAL_RCC_GetSysClockFreq+0x2e4>
 80039fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a16:	e065      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a22:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003b44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a2a:	4b40      	ldr	r3, [pc, #256]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a3e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003b3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a5a:	e043      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a66:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003b48 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a6e:	4b2f      	ldr	r3, [pc, #188]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a82:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003b3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a9e:	e021      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aaa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003b44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ab2:	4b1e      	ldr	r3, [pc, #120]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ac6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003b3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ade:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ae2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003ae4:	4b11      	ldr	r3, [pc, #68]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	0a5b      	lsrs	r3, r3, #9
 8003aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aee:	3301      	adds	r3, #1
 8003af0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	ee07 3a90 	vmov	s15, r3
 8003af8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003afc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b08:	ee17 3a90 	vmov	r3, s15
 8003b0c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003b0e:	e005      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61bb      	str	r3, [r7, #24]
      break;
 8003b14:	e002      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003b16:	4b07      	ldr	r3, [pc, #28]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b18:	61bb      	str	r3, [r7, #24]
      break;
 8003b1a:	bf00      	nop
  }

  return sysclockfreq;
 8003b1c:	69bb      	ldr	r3, [r7, #24]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3724      	adds	r7, #36	; 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	58024400 	.word	0x58024400
 8003b30:	03d09000 	.word	0x03d09000
 8003b34:	003d0900 	.word	0x003d0900
 8003b38:	007a1200 	.word	0x007a1200
 8003b3c:	46000000 	.word	0x46000000
 8003b40:	4c742400 	.word	0x4c742400
 8003b44:	4a742400 	.word	0x4a742400
 8003b48:	4af42400 	.word	0x4af42400

08003b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003b52:	f7ff fe81 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 8003b56:	4602      	mov	r2, r0
 8003b58:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <HAL_RCC_GetHCLKFreq+0x50>)
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	0a1b      	lsrs	r3, r3, #8
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	490f      	ldr	r1, [pc, #60]	; (8003ba0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b64:	5ccb      	ldrb	r3, [r1, r3]
 8003b66:	f003 031f 	and.w	r3, r3, #31
 8003b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <HAL_RCC_GetHCLKFreq+0x50>)
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	4a09      	ldr	r2, [pc, #36]	; (8003ba0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b7a:	5cd3      	ldrb	r3, [r2, r3]
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	fa22 f303 	lsr.w	r3, r2, r3
 8003b86:	4a07      	ldr	r2, [pc, #28]	; (8003ba4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b8a:	4a07      	ldr	r2, [pc, #28]	; (8003ba8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b90:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b92:	681b      	ldr	r3, [r3, #0]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	58024400 	.word	0x58024400
 8003ba0:	0800a4a4 	.word	0x0800a4a4
 8003ba4:	24000014 	.word	0x24000014
 8003ba8:	24000010 	.word	0x24000010

08003bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003bb0:	f7ff ffcc 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	091b      	lsrs	r3, r3, #4
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	4904      	ldr	r1, [pc, #16]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bc2:	5ccb      	ldrb	r3, [r1, r3]
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	58024400 	.word	0x58024400
 8003bd4:	0800a4a4 	.word	0x0800a4a4

08003bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003bdc:	f7ff ffb6 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	0a1b      	lsrs	r3, r3, #8
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4904      	ldr	r1, [pc, #16]	; (8003c00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	f003 031f 	and.w	r3, r3, #31
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	58024400 	.word	0x58024400
 8003c00:	0800a4a4 	.word	0x0800a4a4

08003c04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c08:	b0c8      	sub	sp, #288	; 0x120
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c10:	2300      	movs	r3, #0
 8003c12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c16:	2300      	movs	r3, #0
 8003c18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003c28:	2500      	movs	r5, #0
 8003c2a:	ea54 0305 	orrs.w	r3, r4, r5
 8003c2e:	d049      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c3a:	d02f      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003c3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c40:	d828      	bhi.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c46:	d01a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c4c:	d822      	bhi.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c56:	d007      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c58:	e01c      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c5a:	4ba7      	ldr	r3, [pc, #668]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	4aa6      	ldr	r2, [pc, #664]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c66:	e01a      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c6c:	3308      	adds	r3, #8
 8003c6e:	2102      	movs	r1, #2
 8003c70:	4618      	mov	r0, r3
 8003c72:	f001 fc43 	bl	80054fc <RCCEx_PLL2_Config>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c7c:	e00f      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c82:	3328      	adds	r3, #40	; 0x28
 8003c84:	2102      	movs	r1, #2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f001 fcea 	bl	8005660 <RCCEx_PLL3_Config>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c92:	e004      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c9a:	e000      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10a      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ca6:	4b94      	ldr	r3, [pc, #592]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003caa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb4:	4a90      	ldr	r2, [pc, #576]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	6513      	str	r3, [r2, #80]	; 0x50
 8003cba:	e003      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cc0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ccc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003cd0:	f04f 0900 	mov.w	r9, #0
 8003cd4:	ea58 0309 	orrs.w	r3, r8, r9
 8003cd8:	d047      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d82a      	bhi.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003ce4:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cea:	bf00      	nop
 8003cec:	08003d01 	.word	0x08003d01
 8003cf0:	08003d0f 	.word	0x08003d0f
 8003cf4:	08003d25 	.word	0x08003d25
 8003cf8:	08003d43 	.word	0x08003d43
 8003cfc:	08003d43 	.word	0x08003d43
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d00:	4b7d      	ldr	r3, [pc, #500]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	4a7c      	ldr	r2, [pc, #496]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d0c:	e01a      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d12:	3308      	adds	r3, #8
 8003d14:	2100      	movs	r1, #0
 8003d16:	4618      	mov	r0, r3
 8003d18:	f001 fbf0 	bl	80054fc <RCCEx_PLL2_Config>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d22:	e00f      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d28:	3328      	adds	r3, #40	; 0x28
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f001 fc97 	bl	8005660 <RCCEx_PLL3_Config>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d38:	e004      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d40:	e000      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10a      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d4c:	4b6a      	ldr	r3, [pc, #424]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d50:	f023 0107 	bic.w	r1, r3, #7
 8003d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5a:	4a67      	ldr	r2, [pc, #412]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6513      	str	r3, [r2, #80]	; 0x50
 8003d60:	e003      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d66:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d72:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003d76:	f04f 0b00 	mov.w	fp, #0
 8003d7a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d7e:	d054      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d86:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d8a:	d036      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003d8c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d90:	d82f      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d96:	d032      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d9c:	d829      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d9e:	2bc0      	cmp	r3, #192	; 0xc0
 8003da0:	d02f      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003da2:	2bc0      	cmp	r3, #192	; 0xc0
 8003da4:	d825      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003da6:	2b80      	cmp	r3, #128	; 0x80
 8003da8:	d018      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003daa:	2b80      	cmp	r3, #128	; 0x80
 8003dac:	d821      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003db2:	2b40      	cmp	r3, #64	; 0x40
 8003db4:	d007      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003db6:	e01c      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db8:	4b4f      	ldr	r3, [pc, #316]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	4a4e      	ldr	r2, [pc, #312]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003dc4:	e01e      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dca:	3308      	adds	r3, #8
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f001 fb94 	bl	80054fc <RCCEx_PLL2_Config>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003dda:	e013      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de0:	3328      	adds	r3, #40	; 0x28
 8003de2:	2100      	movs	r1, #0
 8003de4:	4618      	mov	r0, r3
 8003de6:	f001 fc3b 	bl	8005660 <RCCEx_PLL3_Config>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003df0:	e008      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003df8:	e004      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003dfa:	bf00      	nop
 8003dfc:	e002      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003dfe:	bf00      	nop
 8003e00:	e000      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003e0c:	4b3a      	ldr	r3, [pc, #232]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e10:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1a:	4a37      	ldr	r2, [pc, #220]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	6513      	str	r3, [r2, #80]	; 0x50
 8003e20:	e003      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e26:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e32:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003e36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e40:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003e44:	460b      	mov	r3, r1
 8003e46:	4313      	orrs	r3, r2
 8003e48:	d05c      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e50:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003e54:	d03b      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e56:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003e5a:	d834      	bhi.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e60:	d037      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e66:	d82e      	bhi.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e6c:	d033      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003e6e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e72:	d828      	bhi.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e78:	d01a      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7e:	d822      	bhi.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e88:	d007      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003e8a:	e01c      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e8c:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	4a19      	ldr	r2, [pc, #100]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003e98:	e01e      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f001 fb2a 	bl	80054fc <RCCEx_PLL2_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003eae:	e013      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eb4:	3328      	adds	r3, #40	; 0x28
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f001 fbd1 	bl	8005660 <RCCEx_PLL3_Config>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ecc:	e004      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003ece:	bf00      	nop
 8003ed0:	e002      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003ed2:	bf00      	nop
 8003ed4:	e000      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003ed6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10d      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eee:	4a02      	ldr	r2, [pc, #8]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	6513      	str	r3, [r2, #80]	; 0x50
 8003ef4:	e006      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003ef6:	bf00      	nop
 8003ef8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f00:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003f10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003f14:	2300      	movs	r3, #0
 8003f16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003f1a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4313      	orrs	r3, r2
 8003f22:	d03a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2a:	2b30      	cmp	r3, #48	; 0x30
 8003f2c:	d01f      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003f2e:	2b30      	cmp	r3, #48	; 0x30
 8003f30:	d819      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003f32:	2b20      	cmp	r3, #32
 8003f34:	d00c      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d815      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d019      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003f3e:	2b10      	cmp	r3, #16
 8003f40:	d111      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f42:	4bae      	ldr	r3, [pc, #696]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	4aad      	ldr	r2, [pc, #692]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f4e:	e011      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f54:	3308      	adds	r3, #8
 8003f56:	2102      	movs	r1, #2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f001 facf 	bl	80054fc <RCCEx_PLL2_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f64:	e006      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f6c:	e002      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003f6e:	bf00      	nop
 8003f70:	e000      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003f7c:	4b9f      	ldr	r3, [pc, #636]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f80:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8a:	4a9c      	ldr	r2, [pc, #624]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f90:	e003      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f96:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003fa6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003faa:	2300      	movs	r3, #0
 8003fac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fb0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	d051      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fc4:	d035      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fca:	d82e      	bhi.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003fcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fd0:	d031      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003fd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fd6:	d828      	bhi.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fdc:	d01a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe2:	d822      	bhi.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fec:	d007      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003fee:	e01c      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff0:	4b82      	ldr	r3, [pc, #520]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	4a81      	ldr	r2, [pc, #516]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ffc:	e01c      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004002:	3308      	adds	r3, #8
 8004004:	2100      	movs	r1, #0
 8004006:	4618      	mov	r0, r3
 8004008:	f001 fa78 	bl	80054fc <RCCEx_PLL2_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004012:	e011      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004014:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004018:	3328      	adds	r3, #40	; 0x28
 800401a:	2100      	movs	r1, #0
 800401c:	4618      	mov	r0, r3
 800401e:	f001 fb1f 	bl	8005660 <RCCEx_PLL3_Config>
 8004022:	4603      	mov	r3, r0
 8004024:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004028:	e006      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004030:	e002      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004032:	bf00      	nop
 8004034:	e000      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004036:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004038:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004040:	4b6e      	ldr	r3, [pc, #440]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004044:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004048:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800404c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800404e:	4a6b      	ldr	r2, [pc, #428]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004050:	430b      	orrs	r3, r1
 8004052:	6513      	str	r3, [r2, #80]	; 0x50
 8004054:	e003      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004056:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800405a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800405e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004066:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800406a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800406e:	2300      	movs	r3, #0
 8004070:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004074:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004078:	460b      	mov	r3, r1
 800407a:	4313      	orrs	r3, r2
 800407c:	d053      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800407e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004088:	d033      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800408a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800408e:	d82c      	bhi.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004090:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004094:	d02f      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004096:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800409a:	d826      	bhi.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800409c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040a0:	d02b      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80040a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040a6:	d820      	bhi.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80040a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ac:	d012      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80040ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040b2:	d81a      	bhi.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d022      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80040b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040bc:	d115      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c2:	3308      	adds	r3, #8
 80040c4:	2101      	movs	r1, #1
 80040c6:	4618      	mov	r0, r3
 80040c8:	f001 fa18 	bl	80054fc <RCCEx_PLL2_Config>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040d2:	e015      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040d8:	3328      	adds	r3, #40	; 0x28
 80040da:	2101      	movs	r1, #1
 80040dc:	4618      	mov	r0, r3
 80040de:	f001 fabf 	bl	8005660 <RCCEx_PLL3_Config>
 80040e2:	4603      	mov	r3, r0
 80040e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040e8:	e00a      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040f0:	e006      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040f2:	bf00      	nop
 80040f4:	e004      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040f6:	bf00      	nop
 80040f8:	e002      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040fa:	bf00      	nop
 80040fc:	e000      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004100:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004108:	4b3c      	ldr	r3, [pc, #240]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800410a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004110:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004116:	4a39      	ldr	r2, [pc, #228]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004118:	430b      	orrs	r3, r1
 800411a:	6513      	str	r3, [r2, #80]	; 0x50
 800411c:	e003      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004122:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004132:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004136:	2300      	movs	r3, #0
 8004138:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800413c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004140:	460b      	mov	r3, r1
 8004142:	4313      	orrs	r3, r2
 8004144:	d060      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004146:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800414a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800414e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004152:	d039      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004154:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004158:	d832      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800415a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800415e:	d035      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004164:	d82c      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416a:	d031      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800416c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004170:	d826      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004172:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004176:	d02d      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004178:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800417c:	d820      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800417e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004182:	d012      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004188:	d81a      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d024      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800418e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004192:	d115      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004198:	3308      	adds	r3, #8
 800419a:	2101      	movs	r1, #1
 800419c:	4618      	mov	r0, r3
 800419e:	f001 f9ad 	bl	80054fc <RCCEx_PLL2_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041a8:	e017      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ae:	3328      	adds	r3, #40	; 0x28
 80041b0:	2101      	movs	r1, #1
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 fa54 	bl	8005660 <RCCEx_PLL3_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041be:	e00c      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041c6:	e008      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041c8:	bf00      	nop
 80041ca:	e006      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041cc:	bf00      	nop
 80041ce:	e004      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041d0:	bf00      	nop
 80041d2:	e002      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041d4:	bf00      	nop
 80041d6:	e000      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10e      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80041e2:	4b06      	ldr	r3, [pc, #24]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80041ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041f2:	4a02      	ldr	r2, [pc, #8]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041f4:	430b      	orrs	r3, r1
 80041f6:	6593      	str	r3, [r2, #88]	; 0x58
 80041f8:	e006      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80041fa:	bf00      	nop
 80041fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004200:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004204:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800420c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004210:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004214:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004218:	2300      	movs	r3, #0
 800421a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800421e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004222:	460b      	mov	r3, r1
 8004224:	4313      	orrs	r3, r2
 8004226:	d037      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004228:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800422c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800422e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004232:	d00e      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004238:	d816      	bhi.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800423a:	2b00      	cmp	r3, #0
 800423c:	d018      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800423e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004242:	d111      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004244:	4bc4      	ldr	r3, [pc, #784]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	4ac3      	ldr	r2, [pc, #780]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800424a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800424e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004250:	e00f      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004252:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004256:	3308      	adds	r3, #8
 8004258:	2101      	movs	r1, #1
 800425a:	4618      	mov	r0, r3
 800425c:	f001 f94e 	bl	80054fc <RCCEx_PLL2_Config>
 8004260:	4603      	mov	r3, r0
 8004262:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004266:	e004      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800426e:	e000      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004270:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004272:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10a      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800427a:	4bb7      	ldr	r3, [pc, #732]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800427c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004288:	4ab3      	ldr	r2, [pc, #716]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800428a:	430b      	orrs	r3, r1
 800428c:	6513      	str	r3, [r2, #80]	; 0x50
 800428e:	e003      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004290:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004294:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80042a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042a8:	2300      	movs	r3, #0
 80042aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80042ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4313      	orrs	r3, r2
 80042b6:	d039      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80042b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042be:	2b03      	cmp	r3, #3
 80042c0:	d81c      	bhi.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80042c2:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80042c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c8:	08004305 	.word	0x08004305
 80042cc:	080042d9 	.word	0x080042d9
 80042d0:	080042e7 	.word	0x080042e7
 80042d4:	08004305 	.word	0x08004305
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d8:	4b9f      	ldr	r3, [pc, #636]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	4a9e      	ldr	r2, [pc, #632]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042e4:	e00f      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ea:	3308      	adds	r3, #8
 80042ec:	2102      	movs	r1, #2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f001 f904 	bl	80054fc <RCCEx_PLL2_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042fa:	e004      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004302:	e000      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004306:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800430e:	4b92      	ldr	r3, [pc, #584]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004312:	f023 0103 	bic.w	r1, r3, #3
 8004316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800431a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800431c:	4a8e      	ldr	r2, [pc, #568]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800431e:	430b      	orrs	r3, r1
 8004320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004322:	e003      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004324:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004328:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800432c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004334:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004338:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800433c:	2300      	movs	r3, #0
 800433e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004342:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004346:	460b      	mov	r3, r1
 8004348:	4313      	orrs	r3, r2
 800434a:	f000 8099 	beq.w	8004480 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800434e:	4b83      	ldr	r3, [pc, #524]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a82      	ldr	r2, [pc, #520]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004358:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800435a:	f7fd fbb3 	bl	8001ac4 <HAL_GetTick>
 800435e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004362:	e00b      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004364:	f7fd fbae 	bl	8001ac4 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b64      	cmp	r3, #100	; 0x64
 8004372:	d903      	bls.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800437a:	e005      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800437c:	4b77      	ldr	r3, [pc, #476]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ed      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004388:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800438c:	2b00      	cmp	r3, #0
 800438e:	d173      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004390:	4b71      	ldr	r3, [pc, #452]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004392:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004398:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800439c:	4053      	eors	r3, r2
 800439e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d015      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043a6:	4b6c      	ldr	r3, [pc, #432]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043b2:	4b69      	ldr	r3, [pc, #420]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	4a68      	ldr	r2, [pc, #416]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043bc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043be:	4b66      	ldr	r3, [pc, #408]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	4a65      	ldr	r2, [pc, #404]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80043ca:	4a63      	ldr	r2, [pc, #396]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043de:	d118      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7fd fb70 	bl	8001ac4 <HAL_GetTick>
 80043e4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043e8:	e00d      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ea:	f7fd fb6b 	bl	8001ac4 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80043f4:	1ad2      	subs	r2, r2, r3
 80043f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d903      	bls.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8004404:	e005      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004406:	4b54      	ldr	r3, [pc, #336]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0eb      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004412:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004416:	2b00      	cmp	r3, #0
 8004418:	d129      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800441a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800441e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800442a:	d10e      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800442c:	4b4a      	ldr	r3, [pc, #296]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004438:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800443c:	091a      	lsrs	r2, r3, #4
 800443e:	4b48      	ldr	r3, [pc, #288]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004440:	4013      	ands	r3, r2
 8004442:	4a45      	ldr	r2, [pc, #276]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004444:	430b      	orrs	r3, r1
 8004446:	6113      	str	r3, [r2, #16]
 8004448:	e005      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800444a:	4b43      	ldr	r3, [pc, #268]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	4a42      	ldr	r2, [pc, #264]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004450:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004454:	6113      	str	r3, [r2, #16]
 8004456:	4b40      	ldr	r3, [pc, #256]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004458:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800445a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800445e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004466:	4a3c      	ldr	r2, [pc, #240]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004468:	430b      	orrs	r3, r1
 800446a:	6713      	str	r3, [r2, #112]	; 0x70
 800446c:	e008      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800446e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004472:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004476:	e003      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800447c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004480:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f002 0301 	and.w	r3, r2, #1
 800448c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004490:	2300      	movs	r3, #0
 8004492:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004496:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800449a:	460b      	mov	r3, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	f000 8090 	beq.w	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80044a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044aa:	2b28      	cmp	r3, #40	; 0x28
 80044ac:	d870      	bhi.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80044ae:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80044b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b4:	08004599 	.word	0x08004599
 80044b8:	08004591 	.word	0x08004591
 80044bc:	08004591 	.word	0x08004591
 80044c0:	08004591 	.word	0x08004591
 80044c4:	08004591 	.word	0x08004591
 80044c8:	08004591 	.word	0x08004591
 80044cc:	08004591 	.word	0x08004591
 80044d0:	08004591 	.word	0x08004591
 80044d4:	08004565 	.word	0x08004565
 80044d8:	08004591 	.word	0x08004591
 80044dc:	08004591 	.word	0x08004591
 80044e0:	08004591 	.word	0x08004591
 80044e4:	08004591 	.word	0x08004591
 80044e8:	08004591 	.word	0x08004591
 80044ec:	08004591 	.word	0x08004591
 80044f0:	08004591 	.word	0x08004591
 80044f4:	0800457b 	.word	0x0800457b
 80044f8:	08004591 	.word	0x08004591
 80044fc:	08004591 	.word	0x08004591
 8004500:	08004591 	.word	0x08004591
 8004504:	08004591 	.word	0x08004591
 8004508:	08004591 	.word	0x08004591
 800450c:	08004591 	.word	0x08004591
 8004510:	08004591 	.word	0x08004591
 8004514:	08004599 	.word	0x08004599
 8004518:	08004591 	.word	0x08004591
 800451c:	08004591 	.word	0x08004591
 8004520:	08004591 	.word	0x08004591
 8004524:	08004591 	.word	0x08004591
 8004528:	08004591 	.word	0x08004591
 800452c:	08004591 	.word	0x08004591
 8004530:	08004591 	.word	0x08004591
 8004534:	08004599 	.word	0x08004599
 8004538:	08004591 	.word	0x08004591
 800453c:	08004591 	.word	0x08004591
 8004540:	08004591 	.word	0x08004591
 8004544:	08004591 	.word	0x08004591
 8004548:	08004591 	.word	0x08004591
 800454c:	08004591 	.word	0x08004591
 8004550:	08004591 	.word	0x08004591
 8004554:	08004599 	.word	0x08004599
 8004558:	58024400 	.word	0x58024400
 800455c:	58024800 	.word	0x58024800
 8004560:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004568:	3308      	adds	r3, #8
 800456a:	2101      	movs	r1, #1
 800456c:	4618      	mov	r0, r3
 800456e:	f000 ffc5 	bl	80054fc <RCCEx_PLL2_Config>
 8004572:	4603      	mov	r3, r0
 8004574:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004578:	e00f      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800457a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800457e:	3328      	adds	r3, #40	; 0x28
 8004580:	2101      	movs	r1, #1
 8004582:	4618      	mov	r0, r3
 8004584:	f001 f86c 	bl	8005660 <RCCEx_PLL3_Config>
 8004588:	4603      	mov	r3, r0
 800458a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800458e:	e004      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004596:	e000      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800459a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10b      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045a2:	4bc0      	ldr	r3, [pc, #768]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80045aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b2:	4abc      	ldr	r2, [pc, #752]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045b4:	430b      	orrs	r3, r1
 80045b6:	6553      	str	r3, [r2, #84]	; 0x54
 80045b8:	e003      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80045c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ca:	f002 0302 	and.w	r3, r2, #2
 80045ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045d2:	2300      	movs	r3, #0
 80045d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80045d8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80045dc:	460b      	mov	r3, r1
 80045de:	4313      	orrs	r3, r2
 80045e0:	d043      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80045e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ea:	2b05      	cmp	r3, #5
 80045ec:	d824      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80045ee:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80045f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f4:	08004641 	.word	0x08004641
 80045f8:	0800460d 	.word	0x0800460d
 80045fc:	08004623 	.word	0x08004623
 8004600:	08004641 	.word	0x08004641
 8004604:	08004641 	.word	0x08004641
 8004608:	08004641 	.word	0x08004641
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800460c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004610:	3308      	adds	r3, #8
 8004612:	2101      	movs	r1, #1
 8004614:	4618      	mov	r0, r3
 8004616:	f000 ff71 	bl	80054fc <RCCEx_PLL2_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004620:	e00f      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004626:	3328      	adds	r3, #40	; 0x28
 8004628:	2101      	movs	r1, #1
 800462a:	4618      	mov	r0, r3
 800462c:	f001 f818 	bl	8005660 <RCCEx_PLL3_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004636:	e004      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800463e:	e000      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004642:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10b      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800464a:	4b96      	ldr	r3, [pc, #600]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	f023 0107 	bic.w	r1, r3, #7
 8004652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800465a:	4a92      	ldr	r2, [pc, #584]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800465c:	430b      	orrs	r3, r1
 800465e:	6553      	str	r3, [r2, #84]	; 0x54
 8004660:	e003      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004662:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004666:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800466a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	f002 0304 	and.w	r3, r2, #4
 8004676:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800467a:	2300      	movs	r3, #0
 800467c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004680:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004684:	460b      	mov	r3, r1
 8004686:	4313      	orrs	r3, r2
 8004688:	d043      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800468a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800468e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004692:	2b05      	cmp	r3, #5
 8004694:	d824      	bhi.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004696:	a201      	add	r2, pc, #4	; (adr r2, 800469c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469c:	080046e9 	.word	0x080046e9
 80046a0:	080046b5 	.word	0x080046b5
 80046a4:	080046cb 	.word	0x080046cb
 80046a8:	080046e9 	.word	0x080046e9
 80046ac:	080046e9 	.word	0x080046e9
 80046b0:	080046e9 	.word	0x080046e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b8:	3308      	adds	r3, #8
 80046ba:	2101      	movs	r1, #1
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 ff1d 	bl	80054fc <RCCEx_PLL2_Config>
 80046c2:	4603      	mov	r3, r0
 80046c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046c8:	e00f      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ce:	3328      	adds	r3, #40	; 0x28
 80046d0:	2101      	movs	r1, #1
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 ffc4 	bl	8005660 <RCCEx_PLL3_Config>
 80046d8:	4603      	mov	r3, r0
 80046da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046de:	e004      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80046e6:	e000      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80046e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10b      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046f2:	4b6c      	ldr	r3, [pc, #432]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f6:	f023 0107 	bic.w	r1, r3, #7
 80046fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004702:	4a68      	ldr	r2, [pc, #416]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004704:	430b      	orrs	r3, r1
 8004706:	6593      	str	r3, [r2, #88]	; 0x58
 8004708:	e003      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800470e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	f002 0320 	and.w	r3, r2, #32
 800471e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004722:	2300      	movs	r3, #0
 8004724:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004728:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800472c:	460b      	mov	r3, r1
 800472e:	4313      	orrs	r3, r2
 8004730:	d055      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004736:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800473a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800473e:	d033      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004744:	d82c      	bhi.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474a:	d02f      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800474c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004750:	d826      	bhi.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004752:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004756:	d02b      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004758:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800475c:	d820      	bhi.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800475e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004762:	d012      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004768:	d81a      	bhi.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d022      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800476e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004772:	d115      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004778:	3308      	adds	r3, #8
 800477a:	2100      	movs	r1, #0
 800477c:	4618      	mov	r0, r3
 800477e:	f000 febd 	bl	80054fc <RCCEx_PLL2_Config>
 8004782:	4603      	mov	r3, r0
 8004784:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004788:	e015      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800478a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800478e:	3328      	adds	r3, #40	; 0x28
 8004790:	2102      	movs	r1, #2
 8004792:	4618      	mov	r0, r3
 8004794:	f000 ff64 	bl	8005660 <RCCEx_PLL3_Config>
 8004798:	4603      	mov	r3, r0
 800479a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800479e:	e00a      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80047a6:	e006      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80047a8:	bf00      	nop
 80047aa:	e004      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80047ac:	bf00      	nop
 80047ae:	e002      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80047b0:	bf00      	nop
 80047b2:	e000      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80047b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10b      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047be:	4b39      	ldr	r3, [pc, #228]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80047c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ce:	4a35      	ldr	r2, [pc, #212]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047d0:	430b      	orrs	r3, r1
 80047d2:	6553      	str	r3, [r2, #84]	; 0x54
 80047d4:	e003      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80047de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80047ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047ee:	2300      	movs	r3, #0
 80047f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80047f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80047f8:	460b      	mov	r3, r1
 80047fa:	4313      	orrs	r3, r2
 80047fc:	d058      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80047fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004802:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004806:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800480a:	d033      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800480c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004810:	d82c      	bhi.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004816:	d02f      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481c:	d826      	bhi.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800481e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004822:	d02b      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004824:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004828:	d820      	bhi.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800482a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800482e:	d012      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004834:	d81a      	bhi.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004836:	2b00      	cmp	r3, #0
 8004838:	d022      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800483a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800483e:	d115      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004844:	3308      	adds	r3, #8
 8004846:	2100      	movs	r1, #0
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fe57 	bl	80054fc <RCCEx_PLL2_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004854:	e015      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004856:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800485a:	3328      	adds	r3, #40	; 0x28
 800485c:	2102      	movs	r1, #2
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fefe 	bl	8005660 <RCCEx_PLL3_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800486a:	e00a      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004872:	e006      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004874:	bf00      	nop
 8004876:	e004      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004878:	bf00      	nop
 800487a:	e002      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800487c:	bf00      	nop
 800487e:	e000      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004882:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10e      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800488a:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800488c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004896:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800489a:	4a02      	ldr	r2, [pc, #8]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800489c:	430b      	orrs	r3, r1
 800489e:	6593      	str	r3, [r2, #88]	; 0x58
 80048a0:	e006      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80048a2:	bf00      	nop
 80048a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80048b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80048bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048c0:	2300      	movs	r3, #0
 80048c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80048ca:	460b      	mov	r3, r1
 80048cc:	4313      	orrs	r3, r2
 80048ce:	d055      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80048d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048dc:	d033      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80048de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048e2:	d82c      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80048e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048e8:	d02f      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80048ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ee:	d826      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80048f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048f4:	d02b      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80048f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048fa:	d820      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80048fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004900:	d012      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004902:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004906:	d81a      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004908:	2b00      	cmp	r3, #0
 800490a:	d022      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800490c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004910:	d115      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004916:	3308      	adds	r3, #8
 8004918:	2100      	movs	r1, #0
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fdee 	bl	80054fc <RCCEx_PLL2_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004926:	e015      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800492c:	3328      	adds	r3, #40	; 0x28
 800492e:	2102      	movs	r1, #2
 8004930:	4618      	mov	r0, r3
 8004932:	f000 fe95 	bl	8005660 <RCCEx_PLL3_Config>
 8004936:	4603      	mov	r3, r0
 8004938:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800493c:	e00a      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004944:	e006      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004946:	bf00      	nop
 8004948:	e004      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800494a:	bf00      	nop
 800494c:	e002      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800494e:	bf00      	nop
 8004950:	e000      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004954:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10b      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800495c:	4ba1      	ldr	r3, [pc, #644]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800495e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004960:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004968:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800496c:	4a9d      	ldr	r2, [pc, #628]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800496e:	430b      	orrs	r3, r1
 8004970:	6593      	str	r3, [r2, #88]	; 0x58
 8004972:	e003      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004974:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004978:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800497c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004984:	f002 0308 	and.w	r3, r2, #8
 8004988:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800498c:	2300      	movs	r3, #0
 800498e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004992:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004996:	460b      	mov	r3, r1
 8004998:	4313      	orrs	r3, r2
 800499a:	d01e      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800499c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ae:	3328      	adds	r3, #40	; 0x28
 80049b0:	2102      	movs	r1, #2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fe54 	bl	8005660 <RCCEx_PLL3_Config>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80049c4:	4b87      	ldr	r3, [pc, #540]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049d4:	4a83      	ldr	r2, [pc, #524]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049d6:	430b      	orrs	r3, r1
 80049d8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	f002 0310 	and.w	r3, r2, #16
 80049e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049ea:	2300      	movs	r3, #0
 80049ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80049f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80049f4:	460b      	mov	r3, r1
 80049f6:	4313      	orrs	r3, r2
 80049f8:	d01e      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80049fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a06:	d10c      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a0c:	3328      	adds	r3, #40	; 0x28
 8004a0e:	2102      	movs	r1, #2
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fe25 	bl	8005660 <RCCEx_PLL3_Config>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a22:	4b70      	ldr	r3, [pc, #448]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a32:	4a6c      	ldr	r2, [pc, #432]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a34:	430b      	orrs	r3, r1
 8004a36:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a40:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004a44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a4e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004a52:	460b      	mov	r3, r1
 8004a54:	4313      	orrs	r3, r2
 8004a56:	d03e      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a64:	d022      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004a66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a6a:	d81b      	bhi.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a74:	d00b      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004a76:	e015      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	2100      	movs	r1, #0
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fd3b 	bl	80054fc <RCCEx_PLL2_Config>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a8c:	e00f      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a92:	3328      	adds	r3, #40	; 0x28
 8004a94:	2102      	movs	r1, #2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fde2 	bl	8005660 <RCCEx_PLL3_Config>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004aa2:	e004      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004aaa:	e000      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10b      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ab6:	4b4b      	ldr	r3, [pc, #300]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ac2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ac6:	4a47      	ldr	r2, [pc, #284]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	6593      	str	r3, [r2, #88]	; 0x58
 8004acc:	e003      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ace:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ad2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004ae2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ae8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004aec:	460b      	mov	r3, r1
 8004aee:	4313      	orrs	r3, r2
 8004af0:	d03b      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004afe:	d01f      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004b00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b04:	d818      	bhi.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b0a:	d003      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004b0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b10:	d007      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004b12:	e011      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b14:	4b33      	ldr	r3, [pc, #204]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	4a32      	ldr	r2, [pc, #200]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b20:	e00f      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b26:	3328      	adds	r3, #40	; 0x28
 8004b28:	2101      	movs	r1, #1
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fd98 	bl	8005660 <RCCEx_PLL3_Config>
 8004b30:	4603      	mov	r3, r0
 8004b32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b36:	e004      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b3e:	e000      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10b      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b4a:	4b26      	ldr	r3, [pc, #152]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5a:	4a22      	ldr	r2, [pc, #136]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	6553      	str	r3, [r2, #84]	; 0x54
 8004b60:	e003      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b66:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b72:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004b76:	673b      	str	r3, [r7, #112]	; 0x70
 8004b78:	2300      	movs	r3, #0
 8004b7a:	677b      	str	r3, [r7, #116]	; 0x74
 8004b7c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004b80:	460b      	mov	r3, r1
 8004b82:	4313      	orrs	r3, r2
 8004b84:	d034      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b94:	d007      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004b96:	e011      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b98:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	4a11      	ldr	r2, [pc, #68]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ba2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ba4:	e00e      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004baa:	3308      	adds	r3, #8
 8004bac:	2102      	movs	r1, #2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fca4 	bl	80054fc <RCCEx_PLL2_Config>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bba:	e003      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10d      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004bcc:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bda:	4a02      	ldr	r2, [pc, #8]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004be0:	e006      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004be2:	bf00      	nop
 8004be4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004bfc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bfe:	2300      	movs	r3, #0
 8004c00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c02:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004c06:	460b      	mov	r3, r1
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	d00c      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c10:	3328      	adds	r3, #40	; 0x28
 8004c12:	2102      	movs	r1, #2
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fd23 	bl	8005660 <RCCEx_PLL3_Config>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004c32:	663b      	str	r3, [r7, #96]	; 0x60
 8004c34:	2300      	movs	r3, #0
 8004c36:	667b      	str	r3, [r7, #100]	; 0x64
 8004c38:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	d038      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c4e:	d018      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004c50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c54:	d811      	bhi.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c5a:	d014      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c60:	d80b      	bhi.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d011      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c6a:	d106      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c6c:	4bc3      	ldr	r3, [pc, #780]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	4ac2      	ldr	r2, [pc, #776]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c78:	e008      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c80:	e004      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004c82:	bf00      	nop
 8004c84:	e002      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004c86:	bf00      	nop
 8004c88:	e000      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10b      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c94:	4bb9      	ldr	r3, [pc, #740]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c98:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca4:	4ab5      	ldr	r2, [pc, #724]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ca6:	430b      	orrs	r3, r1
 8004ca8:	6553      	str	r3, [r2, #84]	; 0x54
 8004caa:	e003      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cb0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004cc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cc6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	d009      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cd0:	4baa      	ldr	r3, [pc, #680]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cde:	4aa7      	ldr	r2, [pc, #668]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004cf0:	653b      	str	r3, [r7, #80]	; 0x50
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	657b      	str	r3, [r7, #84]	; 0x54
 8004cf6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	d009      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d00:	4b9e      	ldr	r3, [pc, #632]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d04:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0e:	4a9b      	ldr	r2, [pc, #620]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d10:	430b      	orrs	r3, r1
 8004d12:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004d20:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d22:	2300      	movs	r3, #0
 8004d24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d26:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	d009      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004d30:	4b92      	ldr	r3, [pc, #584]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d34:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d3e:	4a8f      	ldr	r2, [pc, #572]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d40:	430b      	orrs	r3, r1
 8004d42:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004d50:	643b      	str	r3, [r7, #64]	; 0x40
 8004d52:	2300      	movs	r3, #0
 8004d54:	647b      	str	r3, [r7, #68]	; 0x44
 8004d56:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d60:	4b86      	ldr	r3, [pc, #536]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	4a85      	ldr	r2, [pc, #532]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d6a:	6113      	str	r3, [r2, #16]
 8004d6c:	4b83      	ldr	r3, [pc, #524]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d6e:	6919      	ldr	r1, [r3, #16]
 8004d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004d78:	4a80      	ldr	r2, [pc, #512]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d7a:	430b      	orrs	r3, r1
 8004d7c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d86:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004d8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d90:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004d94:	460b      	mov	r3, r1
 8004d96:	4313      	orrs	r3, r2
 8004d98:	d009      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d9a:	4b78      	ldr	r3, [pc, #480]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da8:	4a74      	ldr	r2, [pc, #464]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004daa:	430b      	orrs	r3, r1
 8004dac:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004dba:	633b      	str	r3, [r7, #48]	; 0x30
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	d00a      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dca:	4b6c      	ldr	r3, [pc, #432]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dce:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dda:	4a68      	ldr	r2, [pc, #416]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ddc:	430b      	orrs	r3, r1
 8004dde:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de8:	2100      	movs	r1, #0
 8004dea:	62b9      	str	r1, [r7, #40]	; 0x28
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004df6:	460b      	mov	r3, r1
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	d011      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e00:	3308      	adds	r3, #8
 8004e02:	2100      	movs	r1, #0
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fb79 	bl	80054fc <RCCEx_PLL2_Config>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004e10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e28:	2100      	movs	r1, #0
 8004e2a:	6239      	str	r1, [r7, #32]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	627b      	str	r3, [r7, #36]	; 0x24
 8004e32:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e36:	460b      	mov	r3, r1
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	d011      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e40:	3308      	adds	r3, #8
 8004e42:	2101      	movs	r1, #1
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 fb59 	bl	80054fc <RCCEx_PLL2_Config>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004e50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e68:	2100      	movs	r1, #0
 8004e6a:	61b9      	str	r1, [r7, #24]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	61fb      	str	r3, [r7, #28]
 8004e72:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e76:	460b      	mov	r3, r1
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	d011      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e80:	3308      	adds	r3, #8
 8004e82:	2102      	movs	r1, #2
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fb39 	bl	80054fc <RCCEx_PLL2_Config>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004e90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004ea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	6139      	str	r1, [r7, #16]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	d011      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec0:	3328      	adds	r3, #40	; 0x28
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fbcb 	bl	8005660 <RCCEx_PLL3_Config>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004ed0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004edc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004ee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee8:	2100      	movs	r1, #0
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	d011      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f00:	3328      	adds	r3, #40	; 0x28
 8004f02:	2101      	movs	r1, #1
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fbab 	bl	8005660 <RCCEx_PLL3_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004f10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f28:	2100      	movs	r1, #0
 8004f2a:	6039      	str	r1, [r7, #0]
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	607b      	str	r3, [r7, #4]
 8004f32:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f36:	460b      	mov	r3, r1
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	d011      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f40:	3328      	adds	r3, #40	; 0x28
 8004f42:	2102      	movs	r1, #2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fb8b 	bl	8005660 <RCCEx_PLL3_Config>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004f50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004f60:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	e000      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004f74:	46bd      	mov	sp, r7
 8004f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f7a:	bf00      	nop
 8004f7c:	58024400 	.word	0x58024400

08004f80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004f84:	f7fe fde2 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	091b      	lsrs	r3, r3, #4
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	4904      	ldr	r1, [pc, #16]	; (8004fa8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004f96:	5ccb      	ldrb	r3, [r1, r3]
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	58024400 	.word	0x58024400
 8004fa8:	0800a4a4 	.word	0x0800a4a4

08004fac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b089      	sub	sp, #36	; 0x24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fb4:	4ba1      	ldr	r3, [pc, #644]	; (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	f003 0303 	and.w	r3, r3, #3
 8004fbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004fbe:	4b9f      	ldr	r3, [pc, #636]	; (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	0b1b      	lsrs	r3, r3, #12
 8004fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004fca:	4b9c      	ldr	r3, [pc, #624]	; (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fce:	091b      	lsrs	r3, r3, #4
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004fd6:	4b99      	ldr	r3, [pc, #612]	; (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fda:	08db      	lsrs	r3, r3, #3
 8004fdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	fb02 f303 	mul.w	r3, r2, r3
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8111 	beq.w	800521c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	f000 8083 	beq.w	8005108 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	2b02      	cmp	r3, #2
 8005006:	f200 80a1 	bhi.w	800514c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d056      	beq.n	80050c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005016:	e099      	b.n	800514c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005018:	4b88      	ldr	r3, [pc, #544]	; (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	d02d      	beq.n	8005080 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005024:	4b85      	ldr	r3, [pc, #532]	; (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	08db      	lsrs	r3, r3, #3
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	4a84      	ldr	r2, [pc, #528]	; (8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005030:	fa22 f303 	lsr.w	r3, r2, r3
 8005034:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	ee07 3a90 	vmov	s15, r3
 800503c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800504e:	4b7b      	ldr	r3, [pc, #492]	; (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800505e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005062:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800506a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800506e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800507e:	e087      	b.n	8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	ee07 3a90 	vmov	s15, r3
 8005086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005248 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800508e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005092:	4b6a      	ldr	r3, [pc, #424]	; (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050c2:	e065      	b.n	8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800524c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d6:	4b59      	ldr	r3, [pc, #356]	; (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005106:	e043      	b.n	8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005112:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511a:	4b48      	ldr	r3, [pc, #288]	; (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800511c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512a:	ed97 6a03 	vldr	s12, [r7, #12]
 800512e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800513e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800514a:	e021      	b.n	8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005156:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800524c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800515a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515e:	4b37      	ldr	r3, [pc, #220]	; (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800516e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005172:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800517e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800518e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005190:	4b2a      	ldr	r3, [pc, #168]	; (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	0a5b      	lsrs	r3, r3, #9
 8005196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80051ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051b6:	ee17 2a90 	vmov	r2, s15
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80051be:	4b1f      	ldr	r3, [pc, #124]	; (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	0c1b      	lsrs	r3, r3, #16
 80051c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c8:	ee07 3a90 	vmov	s15, r3
 80051cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80051dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051e4:	ee17 2a90 	vmov	r2, s15
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80051ec:	4b13      	ldr	r3, [pc, #76]	; (800523c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f0:	0e1b      	lsrs	r3, r3, #24
 80051f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005202:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005206:	edd7 6a07 	vldr	s13, [r7, #28]
 800520a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800520e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005212:	ee17 2a90 	vmov	r2, s15
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800521a:	e008      	b.n	800522e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	609a      	str	r2, [r3, #8]
}
 800522e:	bf00      	nop
 8005230:	3724      	adds	r7, #36	; 0x24
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	58024400 	.word	0x58024400
 8005240:	03d09000 	.word	0x03d09000
 8005244:	46000000 	.word	0x46000000
 8005248:	4c742400 	.word	0x4c742400
 800524c:	4a742400 	.word	0x4a742400
 8005250:	4af42400 	.word	0x4af42400

08005254 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005254:	b480      	push	{r7}
 8005256:	b089      	sub	sp, #36	; 0x24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800525c:	4ba1      	ldr	r3, [pc, #644]	; (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005260:	f003 0303 	and.w	r3, r3, #3
 8005264:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005266:	4b9f      	ldr	r3, [pc, #636]	; (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526a:	0d1b      	lsrs	r3, r3, #20
 800526c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005270:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005272:	4b9c      	ldr	r3, [pc, #624]	; (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005276:	0a1b      	lsrs	r3, r3, #8
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800527e:	4b99      	ldr	r3, [pc, #612]	; (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005282:	08db      	lsrs	r3, r3, #3
 8005284:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	fb02 f303 	mul.w	r3, r2, r3
 800528e:	ee07 3a90 	vmov	s15, r3
 8005292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005296:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 8111 	beq.w	80054c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	f000 8083 	beq.w	80053b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	f200 80a1 	bhi.w	80053f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d056      	beq.n	800536c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80052be:	e099      	b.n	80053f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052c0:	4b88      	ldr	r3, [pc, #544]	; (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0320 	and.w	r3, r3, #32
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d02d      	beq.n	8005328 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052cc:	4b85      	ldr	r3, [pc, #532]	; (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	08db      	lsrs	r3, r3, #3
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	4a84      	ldr	r2, [pc, #528]	; (80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
 80052dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	ee07 3a90 	vmov	s15, r3
 80052e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052f6:	4b7b      	ldr	r3, [pc, #492]	; (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052fe:	ee07 3a90 	vmov	s15, r3
 8005302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005306:	ed97 6a03 	vldr	s12, [r7, #12]
 800530a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800530e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800531a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800531e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005322:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005326:	e087      	b.n	8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	ee07 3a90 	vmov	s15, r3
 800532e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005332:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80054f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533a:	4b6a      	ldr	r3, [pc, #424]	; (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800534a:	ed97 6a03 	vldr	s12, [r7, #12]
 800534e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800535a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800535e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800536a:	e065      	b.n	8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	ee07 3a90 	vmov	s15, r3
 8005372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005376:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800537a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800537e:	4b59      	ldr	r3, [pc, #356]	; (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005386:	ee07 3a90 	vmov	s15, r3
 800538a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800538e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005392:	eddf 5a56 	vldr	s11, [pc, #344]	; 80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800539a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800539e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053ae:	e043      	b.n	8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80053be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c2:	4b48      	ldr	r3, [pc, #288]	; (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ca:	ee07 3a90 	vmov	s15, r3
 80053ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053f2:	e021      	b.n	8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005406:	4b37      	ldr	r3, [pc, #220]	; (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540e:	ee07 3a90 	vmov	s15, r3
 8005412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005416:	ed97 6a03 	vldr	s12, [r7, #12]
 800541a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800541e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800542a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800542e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005436:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005438:	4b2a      	ldr	r3, [pc, #168]	; (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800543a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543c:	0a5b      	lsrs	r3, r3, #9
 800543e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005442:	ee07 3a90 	vmov	s15, r3
 8005446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800544e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005452:	edd7 6a07 	vldr	s13, [r7, #28]
 8005456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800545a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800545e:	ee17 2a90 	vmov	r2, s15
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005466:	4b1f      	ldr	r3, [pc, #124]	; (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	0c1b      	lsrs	r3, r3, #16
 800546c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005470:	ee07 3a90 	vmov	s15, r3
 8005474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005478:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800547c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005480:	edd7 6a07 	vldr	s13, [r7, #28]
 8005484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800548c:	ee17 2a90 	vmov	r2, s15
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005494:	4b13      	ldr	r3, [pc, #76]	; (80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005498:	0e1b      	lsrs	r3, r3, #24
 800549a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80054b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ba:	ee17 2a90 	vmov	r2, s15
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80054c2:	e008      	b.n	80054d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	609a      	str	r2, [r3, #8]
}
 80054d6:	bf00      	nop
 80054d8:	3724      	adds	r7, #36	; 0x24
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	58024400 	.word	0x58024400
 80054e8:	03d09000 	.word	0x03d09000
 80054ec:	46000000 	.word	0x46000000
 80054f0:	4c742400 	.word	0x4c742400
 80054f4:	4a742400 	.word	0x4a742400
 80054f8:	4af42400 	.word	0x4af42400

080054fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800550a:	4b53      	ldr	r3, [pc, #332]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 800550c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2b03      	cmp	r3, #3
 8005514:	d101      	bne.n	800551a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e099      	b.n	800564e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800551a:	4b4f      	ldr	r3, [pc, #316]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a4e      	ldr	r2, [pc, #312]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 8005520:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005526:	f7fc facd 	bl	8001ac4 <HAL_GetTick>
 800552a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800552c:	e008      	b.n	8005540 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800552e:	f7fc fac9 	bl	8001ac4 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e086      	b.n	800564e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005540:	4b45      	ldr	r3, [pc, #276]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f0      	bne.n	800552e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800554c:	4b42      	ldr	r3, [pc, #264]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 800554e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005550:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	031b      	lsls	r3, r3, #12
 800555a:	493f      	ldr	r1, [pc, #252]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 800555c:	4313      	orrs	r3, r2
 800555e:	628b      	str	r3, [r1, #40]	; 0x28
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	3b01      	subs	r3, #1
 8005566:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	3b01      	subs	r3, #1
 8005570:	025b      	lsls	r3, r3, #9
 8005572:	b29b      	uxth	r3, r3
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	3b01      	subs	r3, #1
 800557c:	041b      	lsls	r3, r3, #16
 800557e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	3b01      	subs	r3, #1
 800558a:	061b      	lsls	r3, r3, #24
 800558c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005590:	4931      	ldr	r1, [pc, #196]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 8005592:	4313      	orrs	r3, r2
 8005594:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005596:	4b30      	ldr	r3, [pc, #192]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	492d      	ldr	r1, [pc, #180]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80055a8:	4b2b      	ldr	r3, [pc, #172]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	f023 0220 	bic.w	r2, r3, #32
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	4928      	ldr	r1, [pc, #160]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80055ba:	4b27      	ldr	r3, [pc, #156]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055be:	4a26      	ldr	r2, [pc, #152]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055c0:	f023 0310 	bic.w	r3, r3, #16
 80055c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80055c6:	4b24      	ldr	r3, [pc, #144]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055ca:	4b24      	ldr	r3, [pc, #144]	; (800565c <RCCEx_PLL2_Config+0x160>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	69d2      	ldr	r2, [r2, #28]
 80055d2:	00d2      	lsls	r2, r2, #3
 80055d4:	4920      	ldr	r1, [pc, #128]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80055da:	4b1f      	ldr	r3, [pc, #124]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	4a1e      	ldr	r2, [pc, #120]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055e0:	f043 0310 	orr.w	r3, r3, #16
 80055e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d106      	bne.n	80055fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80055ec:	4b1a      	ldr	r3, [pc, #104]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f0:	4a19      	ldr	r2, [pc, #100]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 80055f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055f8:	e00f      	b.n	800561a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d106      	bne.n	800560e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005600:	4b15      	ldr	r3, [pc, #84]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	4a14      	ldr	r2, [pc, #80]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 8005606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800560a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800560c:	e005      	b.n	800561a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800560e:	4b12      	ldr	r3, [pc, #72]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 8005610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005612:	4a11      	ldr	r2, [pc, #68]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 8005614:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005618:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800561a:	4b0f      	ldr	r3, [pc, #60]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a0e      	ldr	r2, [pc, #56]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 8005620:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005626:	f7fc fa4d 	bl	8001ac4 <HAL_GetTick>
 800562a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800562c:	e008      	b.n	8005640 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800562e:	f7fc fa49 	bl	8001ac4 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e006      	b.n	800564e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005640:	4b05      	ldr	r3, [pc, #20]	; (8005658 <RCCEx_PLL2_Config+0x15c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0f0      	beq.n	800562e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800564c:	7bfb      	ldrb	r3, [r7, #15]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	58024400 	.word	0x58024400
 800565c:	ffff0007 	.word	0xffff0007

08005660 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800566e:	4b53      	ldr	r3, [pc, #332]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	2b03      	cmp	r3, #3
 8005678:	d101      	bne.n	800567e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e099      	b.n	80057b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800567e:	4b4f      	ldr	r3, [pc, #316]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a4e      	ldr	r2, [pc, #312]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800568a:	f7fc fa1b 	bl	8001ac4 <HAL_GetTick>
 800568e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005690:	e008      	b.n	80056a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005692:	f7fc fa17 	bl	8001ac4 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d901      	bls.n	80056a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e086      	b.n	80057b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056a4:	4b45      	ldr	r3, [pc, #276]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1f0      	bne.n	8005692 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80056b0:	4b42      	ldr	r3, [pc, #264]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 80056b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	051b      	lsls	r3, r3, #20
 80056be:	493f      	ldr	r1, [pc, #252]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	628b      	str	r3, [r1, #40]	; 0x28
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	025b      	lsls	r3, r3, #9
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	3b01      	subs	r3, #1
 80056e0:	041b      	lsls	r3, r3, #16
 80056e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	3b01      	subs	r3, #1
 80056ee:	061b      	lsls	r3, r3, #24
 80056f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80056f4:	4931      	ldr	r1, [pc, #196]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80056fa:	4b30      	ldr	r3, [pc, #192]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	492d      	ldr	r1, [pc, #180]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005708:	4313      	orrs	r3, r2
 800570a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800570c:	4b2b      	ldr	r3, [pc, #172]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	4928      	ldr	r1, [pc, #160]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 800571a:	4313      	orrs	r3, r2
 800571c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800571e:	4b27      	ldr	r3, [pc, #156]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	4a26      	ldr	r2, [pc, #152]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005728:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800572a:	4b24      	ldr	r3, [pc, #144]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 800572c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800572e:	4b24      	ldr	r3, [pc, #144]	; (80057c0 <RCCEx_PLL3_Config+0x160>)
 8005730:	4013      	ands	r3, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	69d2      	ldr	r2, [r2, #28]
 8005736:	00d2      	lsls	r2, r2, #3
 8005738:	4920      	ldr	r1, [pc, #128]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 800573a:	4313      	orrs	r3, r2
 800573c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800573e:	4b1f      	ldr	r3, [pc, #124]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	4a1e      	ldr	r2, [pc, #120]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005748:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d106      	bne.n	800575e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005750:	4b1a      	ldr	r3, [pc, #104]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	4a19      	ldr	r2, [pc, #100]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005756:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800575a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800575c:	e00f      	b.n	800577e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d106      	bne.n	8005772 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005764:	4b15      	ldr	r3, [pc, #84]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	4a14      	ldr	r2, [pc, #80]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 800576a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800576e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005770:	e005      	b.n	800577e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005772:	4b12      	ldr	r3, [pc, #72]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005776:	4a11      	ldr	r2, [pc, #68]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005778:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800577c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800577e:	4b0f      	ldr	r3, [pc, #60]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a0e      	ldr	r2, [pc, #56]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 8005784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005788:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800578a:	f7fc f99b 	bl	8001ac4 <HAL_GetTick>
 800578e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005790:	e008      	b.n	80057a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005792:	f7fc f997 	bl	8001ac4 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d901      	bls.n	80057a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e006      	b.n	80057b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <RCCEx_PLL3_Config+0x15c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0f0      	beq.n	8005792 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	58024400 	.word	0x58024400
 80057c0:	ffff0007 	.word	0xffff0007

080057c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e049      	b.n	800586a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d106      	bne.n	80057f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fb fea0 	bl	8001530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3304      	adds	r3, #4
 8005800:	4619      	mov	r1, r3
 8005802:	4610      	mov	r0, r2
 8005804:	f000 fd02 	bl	800620c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b082      	sub	sp, #8
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e049      	b.n	8005918 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d106      	bne.n	800589e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f841 	bl	8005920 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2202      	movs	r2, #2
 80058a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	3304      	adds	r3, #4
 80058ae:	4619      	mov	r1, r3
 80058b0:	4610      	mov	r0, r2
 80058b2:	f000 fcab 	bl	800620c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d109      	bne.n	8005958 <HAL_TIM_PWM_Start+0x24>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b01      	cmp	r3, #1
 800594e:	bf14      	ite	ne
 8005950:	2301      	movne	r3, #1
 8005952:	2300      	moveq	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	e03c      	b.n	80059d2 <HAL_TIM_PWM_Start+0x9e>
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2b04      	cmp	r3, #4
 800595c:	d109      	bne.n	8005972 <HAL_TIM_PWM_Start+0x3e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b01      	cmp	r3, #1
 8005968:	bf14      	ite	ne
 800596a:	2301      	movne	r3, #1
 800596c:	2300      	moveq	r3, #0
 800596e:	b2db      	uxtb	r3, r3
 8005970:	e02f      	b.n	80059d2 <HAL_TIM_PWM_Start+0x9e>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b08      	cmp	r3, #8
 8005976:	d109      	bne.n	800598c <HAL_TIM_PWM_Start+0x58>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b01      	cmp	r3, #1
 8005982:	bf14      	ite	ne
 8005984:	2301      	movne	r3, #1
 8005986:	2300      	moveq	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	e022      	b.n	80059d2 <HAL_TIM_PWM_Start+0x9e>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2b0c      	cmp	r3, #12
 8005990:	d109      	bne.n	80059a6 <HAL_TIM_PWM_Start+0x72>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b01      	cmp	r3, #1
 800599c:	bf14      	ite	ne
 800599e:	2301      	movne	r3, #1
 80059a0:	2300      	moveq	r3, #0
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	e015      	b.n	80059d2 <HAL_TIM_PWM_Start+0x9e>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d109      	bne.n	80059c0 <HAL_TIM_PWM_Start+0x8c>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	bf14      	ite	ne
 80059b8:	2301      	movne	r3, #1
 80059ba:	2300      	moveq	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	e008      	b.n	80059d2 <HAL_TIM_PWM_Start+0x9e>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	bf14      	ite	ne
 80059cc:	2301      	movne	r3, #1
 80059ce:	2300      	moveq	r3, #0
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e0a1      	b.n	8005b1e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d104      	bne.n	80059ea <HAL_TIM_PWM_Start+0xb6>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059e8:	e023      	b.n	8005a32 <HAL_TIM_PWM_Start+0xfe>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d104      	bne.n	80059fa <HAL_TIM_PWM_Start+0xc6>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059f8:	e01b      	b.n	8005a32 <HAL_TIM_PWM_Start+0xfe>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d104      	bne.n	8005a0a <HAL_TIM_PWM_Start+0xd6>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a08:	e013      	b.n	8005a32 <HAL_TIM_PWM_Start+0xfe>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b0c      	cmp	r3, #12
 8005a0e:	d104      	bne.n	8005a1a <HAL_TIM_PWM_Start+0xe6>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a18:	e00b      	b.n	8005a32 <HAL_TIM_PWM_Start+0xfe>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b10      	cmp	r3, #16
 8005a1e:	d104      	bne.n	8005a2a <HAL_TIM_PWM_Start+0xf6>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a28:	e003      	b.n	8005a32 <HAL_TIM_PWM_Start+0xfe>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2201      	movs	r2, #1
 8005a38:	6839      	ldr	r1, [r7, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fff4 	bl	8006a28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a38      	ldr	r2, [pc, #224]	; (8005b28 <HAL_TIM_PWM_Start+0x1f4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d013      	beq.n	8005a72 <HAL_TIM_PWM_Start+0x13e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a37      	ldr	r2, [pc, #220]	; (8005b2c <HAL_TIM_PWM_Start+0x1f8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d00e      	beq.n	8005a72 <HAL_TIM_PWM_Start+0x13e>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a35      	ldr	r2, [pc, #212]	; (8005b30 <HAL_TIM_PWM_Start+0x1fc>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d009      	beq.n	8005a72 <HAL_TIM_PWM_Start+0x13e>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a34      	ldr	r2, [pc, #208]	; (8005b34 <HAL_TIM_PWM_Start+0x200>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d004      	beq.n	8005a72 <HAL_TIM_PWM_Start+0x13e>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a32      	ldr	r2, [pc, #200]	; (8005b38 <HAL_TIM_PWM_Start+0x204>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d101      	bne.n	8005a76 <HAL_TIM_PWM_Start+0x142>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e000      	b.n	8005a78 <HAL_TIM_PWM_Start+0x144>
 8005a76:	2300      	movs	r3, #0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d007      	beq.n	8005a8c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a8a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a25      	ldr	r2, [pc, #148]	; (8005b28 <HAL_TIM_PWM_Start+0x1f4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d022      	beq.n	8005adc <HAL_TIM_PWM_Start+0x1a8>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a9e:	d01d      	beq.n	8005adc <HAL_TIM_PWM_Start+0x1a8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a25      	ldr	r2, [pc, #148]	; (8005b3c <HAL_TIM_PWM_Start+0x208>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d018      	beq.n	8005adc <HAL_TIM_PWM_Start+0x1a8>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a24      	ldr	r2, [pc, #144]	; (8005b40 <HAL_TIM_PWM_Start+0x20c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d013      	beq.n	8005adc <HAL_TIM_PWM_Start+0x1a8>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a22      	ldr	r2, [pc, #136]	; (8005b44 <HAL_TIM_PWM_Start+0x210>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00e      	beq.n	8005adc <HAL_TIM_PWM_Start+0x1a8>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a1a      	ldr	r2, [pc, #104]	; (8005b2c <HAL_TIM_PWM_Start+0x1f8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d009      	beq.n	8005adc <HAL_TIM_PWM_Start+0x1a8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1e      	ldr	r2, [pc, #120]	; (8005b48 <HAL_TIM_PWM_Start+0x214>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d004      	beq.n	8005adc <HAL_TIM_PWM_Start+0x1a8>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a16      	ldr	r2, [pc, #88]	; (8005b30 <HAL_TIM_PWM_Start+0x1fc>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d115      	bne.n	8005b08 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	4b1a      	ldr	r3, [pc, #104]	; (8005b4c <HAL_TIM_PWM_Start+0x218>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2b06      	cmp	r3, #6
 8005aec:	d015      	beq.n	8005b1a <HAL_TIM_PWM_Start+0x1e6>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af4:	d011      	beq.n	8005b1a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 0201 	orr.w	r2, r2, #1
 8005b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b06:	e008      	b.n	8005b1a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0201 	orr.w	r2, r2, #1
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	e000      	b.n	8005b1c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	40010000 	.word	0x40010000
 8005b2c:	40010400 	.word	0x40010400
 8005b30:	40014000 	.word	0x40014000
 8005b34:	40014400 	.word	0x40014400
 8005b38:	40014800 	.word	0x40014800
 8005b3c:	40000400 	.word	0x40000400
 8005b40:	40000800 	.word	0x40000800
 8005b44:	40000c00 	.word	0x40000c00
 8005b48:	40001800 	.word	0x40001800
 8005b4c:	00010007 	.word	0x00010007

08005b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d122      	bne.n	8005bac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d11b      	bne.n	8005bac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f06f 0202 	mvn.w	r2, #2
 8005b7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fb1c 	bl	80061d0 <HAL_TIM_IC_CaptureCallback>
 8005b98:	e005      	b.n	8005ba6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fb0e 	bl	80061bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fb1f 	bl	80061e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d122      	bne.n	8005c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	d11b      	bne.n	8005c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f06f 0204 	mvn.w	r2, #4
 8005bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 faf2 	bl	80061d0 <HAL_TIM_IC_CaptureCallback>
 8005bec:	e005      	b.n	8005bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fae4 	bl	80061bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 faf5 	bl	80061e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f003 0308 	and.w	r3, r3, #8
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	d122      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d11b      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f06f 0208 	mvn.w	r2, #8
 8005c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2204      	movs	r2, #4
 8005c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	f003 0303 	and.w	r3, r3, #3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fac8 	bl	80061d0 <HAL_TIM_IC_CaptureCallback>
 8005c40:	e005      	b.n	8005c4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 faba 	bl	80061bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 facb 	bl	80061e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f003 0310 	and.w	r3, r3, #16
 8005c5e:	2b10      	cmp	r3, #16
 8005c60:	d122      	bne.n	8005ca8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f003 0310 	and.w	r3, r3, #16
 8005c6c:	2b10      	cmp	r3, #16
 8005c6e:	d11b      	bne.n	8005ca8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0210 	mvn.w	r2, #16
 8005c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2208      	movs	r2, #8
 8005c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fa9e 	bl	80061d0 <HAL_TIM_IC_CaptureCallback>
 8005c94:	e005      	b.n	8005ca2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fa90 	bl	80061bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 faa1 	bl	80061e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d10e      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d107      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f06f 0201 	mvn.w	r2, #1
 8005ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fa6a 	bl	80061a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cde:	2b80      	cmp	r3, #128	; 0x80
 8005ce0:	d10e      	bne.n	8005d00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cec:	2b80      	cmp	r3, #128	; 0x80
 8005cee:	d107      	bne.n	8005d00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 ff52 	bl	8006ba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d0e:	d10e      	bne.n	8005d2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1a:	2b80      	cmp	r3, #128	; 0x80
 8005d1c:	d107      	bne.n	8005d2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 ff45 	bl	8006bb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d38:	2b40      	cmp	r3, #64	; 0x40
 8005d3a:	d10e      	bne.n	8005d5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d46:	2b40      	cmp	r3, #64	; 0x40
 8005d48:	d107      	bne.n	8005d5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fa4f 	bl	80061f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	f003 0320 	and.w	r3, r3, #32
 8005d64:	2b20      	cmp	r3, #32
 8005d66:	d10e      	bne.n	8005d86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f003 0320 	and.w	r3, r3, #32
 8005d72:	2b20      	cmp	r3, #32
 8005d74:	d107      	bne.n	8005d86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f06f 0220 	mvn.w	r2, #32
 8005d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 ff05 	bl	8006b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d86:	bf00      	nop
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d101      	bne.n	8005dae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005daa:	2302      	movs	r3, #2
 8005dac:	e0ff      	b.n	8005fae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b14      	cmp	r3, #20
 8005dba:	f200 80f0 	bhi.w	8005f9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005dbe:	a201      	add	r2, pc, #4	; (adr r2, 8005dc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc4:	08005e19 	.word	0x08005e19
 8005dc8:	08005f9f 	.word	0x08005f9f
 8005dcc:	08005f9f 	.word	0x08005f9f
 8005dd0:	08005f9f 	.word	0x08005f9f
 8005dd4:	08005e59 	.word	0x08005e59
 8005dd8:	08005f9f 	.word	0x08005f9f
 8005ddc:	08005f9f 	.word	0x08005f9f
 8005de0:	08005f9f 	.word	0x08005f9f
 8005de4:	08005e9b 	.word	0x08005e9b
 8005de8:	08005f9f 	.word	0x08005f9f
 8005dec:	08005f9f 	.word	0x08005f9f
 8005df0:	08005f9f 	.word	0x08005f9f
 8005df4:	08005edb 	.word	0x08005edb
 8005df8:	08005f9f 	.word	0x08005f9f
 8005dfc:	08005f9f 	.word	0x08005f9f
 8005e00:	08005f9f 	.word	0x08005f9f
 8005e04:	08005f1d 	.word	0x08005f1d
 8005e08:	08005f9f 	.word	0x08005f9f
 8005e0c:	08005f9f 	.word	0x08005f9f
 8005e10:	08005f9f 	.word	0x08005f9f
 8005e14:	08005f5d 	.word	0x08005f5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fa8e 	bl	8006340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0208 	orr.w	r2, r2, #8
 8005e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0204 	bic.w	r2, r2, #4
 8005e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6999      	ldr	r1, [r3, #24]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	691a      	ldr	r2, [r3, #16]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	619a      	str	r2, [r3, #24]
      break;
 8005e56:	e0a5      	b.n	8005fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68b9      	ldr	r1, [r7, #8]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 fafe 	bl	8006460 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699a      	ldr	r2, [r3, #24]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	699a      	ldr	r2, [r3, #24]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6999      	ldr	r1, [r3, #24]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	021a      	lsls	r2, r3, #8
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	619a      	str	r2, [r3, #24]
      break;
 8005e98:	e084      	b.n	8005fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68b9      	ldr	r1, [r7, #8]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 fb67 	bl	8006574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69da      	ldr	r2, [r3, #28]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f042 0208 	orr.w	r2, r2, #8
 8005eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69da      	ldr	r2, [r3, #28]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0204 	bic.w	r2, r2, #4
 8005ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69d9      	ldr	r1, [r3, #28]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	691a      	ldr	r2, [r3, #16]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	61da      	str	r2, [r3, #28]
      break;
 8005ed8:	e064      	b.n	8005fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68b9      	ldr	r1, [r7, #8]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 fbcf 	bl	8006684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69da      	ldr	r2, [r3, #28]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	69da      	ldr	r2, [r3, #28]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	69d9      	ldr	r1, [r3, #28]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	021a      	lsls	r2, r3, #8
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	61da      	str	r2, [r3, #28]
      break;
 8005f1a:	e043      	b.n	8005fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68b9      	ldr	r1, [r7, #8]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fc18 	bl	8006758 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0208 	orr.w	r2, r2, #8
 8005f36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0204 	bic.w	r2, r2, #4
 8005f46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	691a      	ldr	r2, [r3, #16]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f5a:	e023      	b.n	8005fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68b9      	ldr	r1, [r7, #8]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 fc5c 	bl	8006820 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	021a      	lsls	r2, r3, #8
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f9c:	e002      	b.n	8005fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8005fa2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop

08005fb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_TIM_ConfigClockSource+0x1c>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e0dc      	b.n	800618e <HAL_TIM_ConfigClockSource+0x1d6>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	4b6a      	ldr	r3, [pc, #424]	; (8006198 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ffa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a64      	ldr	r2, [pc, #400]	; (800619c <HAL_TIM_ConfigClockSource+0x1e4>)
 800600a:	4293      	cmp	r3, r2
 800600c:	f000 80a9 	beq.w	8006162 <HAL_TIM_ConfigClockSource+0x1aa>
 8006010:	4a62      	ldr	r2, [pc, #392]	; (800619c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	f200 80ae 	bhi.w	8006174 <HAL_TIM_ConfigClockSource+0x1bc>
 8006018:	4a61      	ldr	r2, [pc, #388]	; (80061a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	f000 80a1 	beq.w	8006162 <HAL_TIM_ConfigClockSource+0x1aa>
 8006020:	4a5f      	ldr	r2, [pc, #380]	; (80061a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	f200 80a6 	bhi.w	8006174 <HAL_TIM_ConfigClockSource+0x1bc>
 8006028:	4a5e      	ldr	r2, [pc, #376]	; (80061a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800602a:	4293      	cmp	r3, r2
 800602c:	f000 8099 	beq.w	8006162 <HAL_TIM_ConfigClockSource+0x1aa>
 8006030:	4a5c      	ldr	r2, [pc, #368]	; (80061a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006032:	4293      	cmp	r3, r2
 8006034:	f200 809e 	bhi.w	8006174 <HAL_TIM_ConfigClockSource+0x1bc>
 8006038:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800603c:	f000 8091 	beq.w	8006162 <HAL_TIM_ConfigClockSource+0x1aa>
 8006040:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006044:	f200 8096 	bhi.w	8006174 <HAL_TIM_ConfigClockSource+0x1bc>
 8006048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800604c:	f000 8089 	beq.w	8006162 <HAL_TIM_ConfigClockSource+0x1aa>
 8006050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006054:	f200 808e 	bhi.w	8006174 <HAL_TIM_ConfigClockSource+0x1bc>
 8006058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800605c:	d03e      	beq.n	80060dc <HAL_TIM_ConfigClockSource+0x124>
 800605e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006062:	f200 8087 	bhi.w	8006174 <HAL_TIM_ConfigClockSource+0x1bc>
 8006066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800606a:	f000 8086 	beq.w	800617a <HAL_TIM_ConfigClockSource+0x1c2>
 800606e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006072:	d87f      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x1bc>
 8006074:	2b70      	cmp	r3, #112	; 0x70
 8006076:	d01a      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0xf6>
 8006078:	2b70      	cmp	r3, #112	; 0x70
 800607a:	d87b      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x1bc>
 800607c:	2b60      	cmp	r3, #96	; 0x60
 800607e:	d050      	beq.n	8006122 <HAL_TIM_ConfigClockSource+0x16a>
 8006080:	2b60      	cmp	r3, #96	; 0x60
 8006082:	d877      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x1bc>
 8006084:	2b50      	cmp	r3, #80	; 0x50
 8006086:	d03c      	beq.n	8006102 <HAL_TIM_ConfigClockSource+0x14a>
 8006088:	2b50      	cmp	r3, #80	; 0x50
 800608a:	d873      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x1bc>
 800608c:	2b40      	cmp	r3, #64	; 0x40
 800608e:	d058      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x18a>
 8006090:	2b40      	cmp	r3, #64	; 0x40
 8006092:	d86f      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x1bc>
 8006094:	2b30      	cmp	r3, #48	; 0x30
 8006096:	d064      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x1aa>
 8006098:	2b30      	cmp	r3, #48	; 0x30
 800609a:	d86b      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x1bc>
 800609c:	2b20      	cmp	r3, #32
 800609e:	d060      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x1aa>
 80060a0:	2b20      	cmp	r3, #32
 80060a2:	d867      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x1bc>
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d05c      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x1aa>
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d05a      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x1aa>
 80060ac:	e062      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6818      	ldr	r0, [r3, #0]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	6899      	ldr	r1, [r3, #8]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f000 fc93 	bl	80069e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	609a      	str	r2, [r3, #8]
      break;
 80060da:	e04f      	b.n	800617c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6818      	ldr	r0, [r3, #0]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	6899      	ldr	r1, [r3, #8]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f000 fc7c 	bl	80069e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060fe:	609a      	str	r2, [r3, #8]
      break;
 8006100:	e03c      	b.n	800617c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6818      	ldr	r0, [r3, #0]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	6859      	ldr	r1, [r3, #4]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	461a      	mov	r2, r3
 8006110:	f000 fbec 	bl	80068ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2150      	movs	r1, #80	; 0x50
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fc46 	bl	80069ac <TIM_ITRx_SetConfig>
      break;
 8006120:	e02c      	b.n	800617c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6818      	ldr	r0, [r3, #0]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	6859      	ldr	r1, [r3, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	461a      	mov	r2, r3
 8006130:	f000 fc0b 	bl	800694a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2160      	movs	r1, #96	; 0x60
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fc36 	bl	80069ac <TIM_ITRx_SetConfig>
      break;
 8006140:	e01c      	b.n	800617c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6859      	ldr	r1, [r3, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	461a      	mov	r2, r3
 8006150:	f000 fbcc 	bl	80068ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2140      	movs	r1, #64	; 0x40
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fc26 	bl	80069ac <TIM_ITRx_SetConfig>
      break;
 8006160:	e00c      	b.n	800617c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4619      	mov	r1, r3
 800616c:	4610      	mov	r0, r2
 800616e:	f000 fc1d 	bl	80069ac <TIM_ITRx_SetConfig>
      break;
 8006172:	e003      	b.n	800617c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	73fb      	strb	r3, [r7, #15]
      break;
 8006178:	e000      	b.n	800617c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800617a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800618c:	7bfb      	ldrb	r3, [r7, #15]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	ffceff88 	.word	0xffceff88
 800619c:	00100040 	.word	0x00100040
 80061a0:	00100030 	.word	0x00100030
 80061a4:	00100020 	.word	0x00100020

080061a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a40      	ldr	r2, [pc, #256]	; (8006320 <TIM_Base_SetConfig+0x114>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d013      	beq.n	800624c <TIM_Base_SetConfig+0x40>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800622a:	d00f      	beq.n	800624c <TIM_Base_SetConfig+0x40>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a3d      	ldr	r2, [pc, #244]	; (8006324 <TIM_Base_SetConfig+0x118>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d00b      	beq.n	800624c <TIM_Base_SetConfig+0x40>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a3c      	ldr	r2, [pc, #240]	; (8006328 <TIM_Base_SetConfig+0x11c>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d007      	beq.n	800624c <TIM_Base_SetConfig+0x40>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a3b      	ldr	r2, [pc, #236]	; (800632c <TIM_Base_SetConfig+0x120>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d003      	beq.n	800624c <TIM_Base_SetConfig+0x40>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a3a      	ldr	r2, [pc, #232]	; (8006330 <TIM_Base_SetConfig+0x124>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d108      	bne.n	800625e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a2f      	ldr	r2, [pc, #188]	; (8006320 <TIM_Base_SetConfig+0x114>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d01f      	beq.n	80062a6 <TIM_Base_SetConfig+0x9a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800626c:	d01b      	beq.n	80062a6 <TIM_Base_SetConfig+0x9a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a2c      	ldr	r2, [pc, #176]	; (8006324 <TIM_Base_SetConfig+0x118>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d017      	beq.n	80062a6 <TIM_Base_SetConfig+0x9a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a2b      	ldr	r2, [pc, #172]	; (8006328 <TIM_Base_SetConfig+0x11c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d013      	beq.n	80062a6 <TIM_Base_SetConfig+0x9a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a2a      	ldr	r2, [pc, #168]	; (800632c <TIM_Base_SetConfig+0x120>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00f      	beq.n	80062a6 <TIM_Base_SetConfig+0x9a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a29      	ldr	r2, [pc, #164]	; (8006330 <TIM_Base_SetConfig+0x124>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d00b      	beq.n	80062a6 <TIM_Base_SetConfig+0x9a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a28      	ldr	r2, [pc, #160]	; (8006334 <TIM_Base_SetConfig+0x128>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d007      	beq.n	80062a6 <TIM_Base_SetConfig+0x9a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a27      	ldr	r2, [pc, #156]	; (8006338 <TIM_Base_SetConfig+0x12c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d003      	beq.n	80062a6 <TIM_Base_SetConfig+0x9a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a26      	ldr	r2, [pc, #152]	; (800633c <TIM_Base_SetConfig+0x130>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d108      	bne.n	80062b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a10      	ldr	r2, [pc, #64]	; (8006320 <TIM_Base_SetConfig+0x114>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d00f      	beq.n	8006304 <TIM_Base_SetConfig+0xf8>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a12      	ldr	r2, [pc, #72]	; (8006330 <TIM_Base_SetConfig+0x124>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00b      	beq.n	8006304 <TIM_Base_SetConfig+0xf8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a11      	ldr	r2, [pc, #68]	; (8006334 <TIM_Base_SetConfig+0x128>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d007      	beq.n	8006304 <TIM_Base_SetConfig+0xf8>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a10      	ldr	r2, [pc, #64]	; (8006338 <TIM_Base_SetConfig+0x12c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d003      	beq.n	8006304 <TIM_Base_SetConfig+0xf8>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a0f      	ldr	r2, [pc, #60]	; (800633c <TIM_Base_SetConfig+0x130>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d103      	bne.n	800630c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	691a      	ldr	r2, [r3, #16]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	615a      	str	r2, [r3, #20]
}
 8006312:	bf00      	nop
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	40010000 	.word	0x40010000
 8006324:	40000400 	.word	0x40000400
 8006328:	40000800 	.word	0x40000800
 800632c:	40000c00 	.word	0x40000c00
 8006330:	40010400 	.word	0x40010400
 8006334:	40014000 	.word	0x40014000
 8006338:	40014400 	.word	0x40014400
 800633c:	40014800 	.word	0x40014800

08006340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	f023 0201 	bic.w	r2, r3, #1
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	4b37      	ldr	r3, [pc, #220]	; (8006448 <TIM_OC1_SetConfig+0x108>)
 800636c:	4013      	ands	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0303 	bic.w	r3, r3, #3
 8006376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f023 0302 	bic.w	r3, r3, #2
 8006388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a2d      	ldr	r2, [pc, #180]	; (800644c <TIM_OC1_SetConfig+0x10c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00f      	beq.n	80063bc <TIM_OC1_SetConfig+0x7c>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a2c      	ldr	r2, [pc, #176]	; (8006450 <TIM_OC1_SetConfig+0x110>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d00b      	beq.n	80063bc <TIM_OC1_SetConfig+0x7c>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a2b      	ldr	r2, [pc, #172]	; (8006454 <TIM_OC1_SetConfig+0x114>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d007      	beq.n	80063bc <TIM_OC1_SetConfig+0x7c>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a2a      	ldr	r2, [pc, #168]	; (8006458 <TIM_OC1_SetConfig+0x118>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d003      	beq.n	80063bc <TIM_OC1_SetConfig+0x7c>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a29      	ldr	r2, [pc, #164]	; (800645c <TIM_OC1_SetConfig+0x11c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d10c      	bne.n	80063d6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f023 0308 	bic.w	r3, r3, #8
 80063c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f023 0304 	bic.w	r3, r3, #4
 80063d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a1c      	ldr	r2, [pc, #112]	; (800644c <TIM_OC1_SetConfig+0x10c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d00f      	beq.n	80063fe <TIM_OC1_SetConfig+0xbe>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a1b      	ldr	r2, [pc, #108]	; (8006450 <TIM_OC1_SetConfig+0x110>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00b      	beq.n	80063fe <TIM_OC1_SetConfig+0xbe>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a1a      	ldr	r2, [pc, #104]	; (8006454 <TIM_OC1_SetConfig+0x114>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d007      	beq.n	80063fe <TIM_OC1_SetConfig+0xbe>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a19      	ldr	r2, [pc, #100]	; (8006458 <TIM_OC1_SetConfig+0x118>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d003      	beq.n	80063fe <TIM_OC1_SetConfig+0xbe>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a18      	ldr	r2, [pc, #96]	; (800645c <TIM_OC1_SetConfig+0x11c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d111      	bne.n	8006422 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800640c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	4313      	orrs	r3, r2
 8006420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	621a      	str	r2, [r3, #32]
}
 800643c:	bf00      	nop
 800643e:	371c      	adds	r7, #28
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	fffeff8f 	.word	0xfffeff8f
 800644c:	40010000 	.word	0x40010000
 8006450:	40010400 	.word	0x40010400
 8006454:	40014000 	.word	0x40014000
 8006458:	40014400 	.word	0x40014400
 800645c:	40014800 	.word	0x40014800

08006460 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	f023 0210 	bic.w	r2, r3, #16
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4b34      	ldr	r3, [pc, #208]	; (800655c <TIM_OC2_SetConfig+0xfc>)
 800648c:	4013      	ands	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	021b      	lsls	r3, r3, #8
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f023 0320 	bic.w	r3, r3, #32
 80064aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	011b      	lsls	r3, r3, #4
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a29      	ldr	r2, [pc, #164]	; (8006560 <TIM_OC2_SetConfig+0x100>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d003      	beq.n	80064c8 <TIM_OC2_SetConfig+0x68>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a28      	ldr	r2, [pc, #160]	; (8006564 <TIM_OC2_SetConfig+0x104>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d10d      	bne.n	80064e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	4313      	orrs	r3, r2
 80064da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a1e      	ldr	r2, [pc, #120]	; (8006560 <TIM_OC2_SetConfig+0x100>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00f      	beq.n	800650c <TIM_OC2_SetConfig+0xac>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a1d      	ldr	r2, [pc, #116]	; (8006564 <TIM_OC2_SetConfig+0x104>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00b      	beq.n	800650c <TIM_OC2_SetConfig+0xac>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a1c      	ldr	r2, [pc, #112]	; (8006568 <TIM_OC2_SetConfig+0x108>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d007      	beq.n	800650c <TIM_OC2_SetConfig+0xac>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a1b      	ldr	r2, [pc, #108]	; (800656c <TIM_OC2_SetConfig+0x10c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d003      	beq.n	800650c <TIM_OC2_SetConfig+0xac>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a1a      	ldr	r2, [pc, #104]	; (8006570 <TIM_OC2_SetConfig+0x110>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d113      	bne.n	8006534 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006512:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800651a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	4313      	orrs	r3, r2
 8006532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	621a      	str	r2, [r3, #32]
}
 800654e:	bf00      	nop
 8006550:	371c      	adds	r7, #28
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	feff8fff 	.word	0xfeff8fff
 8006560:	40010000 	.word	0x40010000
 8006564:	40010400 	.word	0x40010400
 8006568:	40014000 	.word	0x40014000
 800656c:	40014400 	.word	0x40014400
 8006570:	40014800 	.word	0x40014800

08006574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4b33      	ldr	r3, [pc, #204]	; (800666c <TIM_OC3_SetConfig+0xf8>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 0303 	bic.w	r3, r3, #3
 80065aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	021b      	lsls	r3, r3, #8
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a28      	ldr	r2, [pc, #160]	; (8006670 <TIM_OC3_SetConfig+0xfc>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d003      	beq.n	80065da <TIM_OC3_SetConfig+0x66>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a27      	ldr	r2, [pc, #156]	; (8006674 <TIM_OC3_SetConfig+0x100>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d10d      	bne.n	80065f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	021b      	lsls	r3, r3, #8
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a1d      	ldr	r2, [pc, #116]	; (8006670 <TIM_OC3_SetConfig+0xfc>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00f      	beq.n	800661e <TIM_OC3_SetConfig+0xaa>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a1c      	ldr	r2, [pc, #112]	; (8006674 <TIM_OC3_SetConfig+0x100>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d00b      	beq.n	800661e <TIM_OC3_SetConfig+0xaa>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a1b      	ldr	r2, [pc, #108]	; (8006678 <TIM_OC3_SetConfig+0x104>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d007      	beq.n	800661e <TIM_OC3_SetConfig+0xaa>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a1a      	ldr	r2, [pc, #104]	; (800667c <TIM_OC3_SetConfig+0x108>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d003      	beq.n	800661e <TIM_OC3_SetConfig+0xaa>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a19      	ldr	r2, [pc, #100]	; (8006680 <TIM_OC3_SetConfig+0x10c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d113      	bne.n	8006646 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800662c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	011b      	lsls	r3, r3, #4
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	4313      	orrs	r3, r2
 8006638:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	011b      	lsls	r3, r3, #4
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	4313      	orrs	r3, r2
 8006644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	621a      	str	r2, [r3, #32]
}
 8006660:	bf00      	nop
 8006662:	371c      	adds	r7, #28
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	fffeff8f 	.word	0xfffeff8f
 8006670:	40010000 	.word	0x40010000
 8006674:	40010400 	.word	0x40010400
 8006678:	40014000 	.word	0x40014000
 800667c:	40014400 	.word	0x40014400
 8006680:	40014800 	.word	0x40014800

08006684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4b24      	ldr	r3, [pc, #144]	; (8006740 <TIM_OC4_SetConfig+0xbc>)
 80066b0:	4013      	ands	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	021b      	lsls	r3, r3, #8
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	031b      	lsls	r3, r3, #12
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a19      	ldr	r2, [pc, #100]	; (8006744 <TIM_OC4_SetConfig+0xc0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00f      	beq.n	8006704 <TIM_OC4_SetConfig+0x80>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a18      	ldr	r2, [pc, #96]	; (8006748 <TIM_OC4_SetConfig+0xc4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00b      	beq.n	8006704 <TIM_OC4_SetConfig+0x80>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a17      	ldr	r2, [pc, #92]	; (800674c <TIM_OC4_SetConfig+0xc8>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d007      	beq.n	8006704 <TIM_OC4_SetConfig+0x80>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a16      	ldr	r2, [pc, #88]	; (8006750 <TIM_OC4_SetConfig+0xcc>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d003      	beq.n	8006704 <TIM_OC4_SetConfig+0x80>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a15      	ldr	r2, [pc, #84]	; (8006754 <TIM_OC4_SetConfig+0xd0>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d109      	bne.n	8006718 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800670a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	019b      	lsls	r3, r3, #6
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	4313      	orrs	r3, r2
 8006716:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	621a      	str	r2, [r3, #32]
}
 8006732:	bf00      	nop
 8006734:	371c      	adds	r7, #28
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	feff8fff 	.word	0xfeff8fff
 8006744:	40010000 	.word	0x40010000
 8006748:	40010400 	.word	0x40010400
 800674c:	40014000 	.word	0x40014000
 8006750:	40014400 	.word	0x40014400
 8006754:	40014800 	.word	0x40014800

08006758 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4b21      	ldr	r3, [pc, #132]	; (8006808 <TIM_OC5_SetConfig+0xb0>)
 8006784:	4013      	ands	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006798:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	041b      	lsls	r3, r3, #16
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a18      	ldr	r2, [pc, #96]	; (800680c <TIM_OC5_SetConfig+0xb4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d00f      	beq.n	80067ce <TIM_OC5_SetConfig+0x76>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a17      	ldr	r2, [pc, #92]	; (8006810 <TIM_OC5_SetConfig+0xb8>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d00b      	beq.n	80067ce <TIM_OC5_SetConfig+0x76>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a16      	ldr	r2, [pc, #88]	; (8006814 <TIM_OC5_SetConfig+0xbc>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d007      	beq.n	80067ce <TIM_OC5_SetConfig+0x76>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a15      	ldr	r2, [pc, #84]	; (8006818 <TIM_OC5_SetConfig+0xc0>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d003      	beq.n	80067ce <TIM_OC5_SetConfig+0x76>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a14      	ldr	r2, [pc, #80]	; (800681c <TIM_OC5_SetConfig+0xc4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d109      	bne.n	80067e2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	021b      	lsls	r3, r3, #8
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	4313      	orrs	r3, r2
 80067e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	621a      	str	r2, [r3, #32]
}
 80067fc:	bf00      	nop
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	fffeff8f 	.word	0xfffeff8f
 800680c:	40010000 	.word	0x40010000
 8006810:	40010400 	.word	0x40010400
 8006814:	40014000 	.word	0x40014000
 8006818:	40014400 	.word	0x40014400
 800681c:	40014800 	.word	0x40014800

08006820 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4b22      	ldr	r3, [pc, #136]	; (80068d4 <TIM_OC6_SetConfig+0xb4>)
 800684c:	4013      	ands	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	021b      	lsls	r3, r3, #8
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	4313      	orrs	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006862:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	051b      	lsls	r3, r3, #20
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	4313      	orrs	r3, r2
 800686e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a19      	ldr	r2, [pc, #100]	; (80068d8 <TIM_OC6_SetConfig+0xb8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00f      	beq.n	8006898 <TIM_OC6_SetConfig+0x78>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a18      	ldr	r2, [pc, #96]	; (80068dc <TIM_OC6_SetConfig+0xbc>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d00b      	beq.n	8006898 <TIM_OC6_SetConfig+0x78>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a17      	ldr	r2, [pc, #92]	; (80068e0 <TIM_OC6_SetConfig+0xc0>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d007      	beq.n	8006898 <TIM_OC6_SetConfig+0x78>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a16      	ldr	r2, [pc, #88]	; (80068e4 <TIM_OC6_SetConfig+0xc4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d003      	beq.n	8006898 <TIM_OC6_SetConfig+0x78>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a15      	ldr	r2, [pc, #84]	; (80068e8 <TIM_OC6_SetConfig+0xc8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d109      	bne.n	80068ac <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800689e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	029b      	lsls	r3, r3, #10
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	621a      	str	r2, [r3, #32]
}
 80068c6:	bf00      	nop
 80068c8:	371c      	adds	r7, #28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	feff8fff 	.word	0xfeff8fff
 80068d8:	40010000 	.word	0x40010000
 80068dc:	40010400 	.word	0x40010400
 80068e0:	40014000 	.word	0x40014000
 80068e4:	40014400 	.word	0x40014400
 80068e8:	40014800 	.word	0x40014800

080068ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	f023 0201 	bic.w	r2, r3, #1
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	011b      	lsls	r3, r3, #4
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	4313      	orrs	r3, r2
 8006920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f023 030a 	bic.w	r3, r3, #10
 8006928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	621a      	str	r2, [r3, #32]
}
 800693e:	bf00      	nop
 8006940:	371c      	adds	r7, #28
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800694a:	b480      	push	{r7}
 800694c:	b087      	sub	sp, #28
 800694e:	af00      	add	r7, sp, #0
 8006950:	60f8      	str	r0, [r7, #12]
 8006952:	60b9      	str	r1, [r7, #8]
 8006954:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	f023 0210 	bic.w	r2, r3, #16
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006974:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	031b      	lsls	r3, r3, #12
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	4313      	orrs	r3, r2
 800697e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006986:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	011b      	lsls	r3, r3, #4
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4313      	orrs	r3, r2
 8006990:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	621a      	str	r2, [r3, #32]
}
 800699e:	bf00      	nop
 80069a0:	371c      	adds	r7, #28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
	...

080069ac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	4b09      	ldr	r3, [pc, #36]	; (80069e4 <TIM_ITRx_SetConfig+0x38>)
 80069c0:	4013      	ands	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	f043 0307 	orr.w	r3, r3, #7
 80069ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	609a      	str	r2, [r3, #8]
}
 80069d6:	bf00      	nop
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	ffcfff8f 	.word	0xffcfff8f

080069e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	021a      	lsls	r2, r3, #8
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	609a      	str	r2, [r3, #8]
}
 8006a1c:	bf00      	nop
 8006a1e:	371c      	adds	r7, #28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f003 031f 	and.w	r3, r3, #31
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6a1a      	ldr	r2, [r3, #32]
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	43db      	mvns	r3, r3
 8006a4a:	401a      	ands	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6a1a      	ldr	r2, [r3, #32]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f003 031f 	and.w	r3, r3, #31
 8006a5a:	6879      	ldr	r1, [r7, #4]
 8006a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a60:	431a      	orrs	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	621a      	str	r2, [r3, #32]
}
 8006a66:	bf00      	nop
 8006a68:	371c      	adds	r7, #28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
	...

08006a74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d101      	bne.n	8006a8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a88:	2302      	movs	r3, #2
 8006a8a:	e06d      	b.n	8006b68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2202      	movs	r2, #2
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a30      	ldr	r2, [pc, #192]	; (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d004      	beq.n	8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a2f      	ldr	r2, [pc, #188]	; (8006b78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d108      	bne.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ac6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a20      	ldr	r2, [pc, #128]	; (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d022      	beq.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006afe:	d01d      	beq.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a1d      	ldr	r2, [pc, #116]	; (8006b7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d018      	beq.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a1c      	ldr	r2, [pc, #112]	; (8006b80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d013      	beq.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a1a      	ldr	r2, [pc, #104]	; (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d00e      	beq.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a15      	ldr	r2, [pc, #84]	; (8006b78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d009      	beq.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a16      	ldr	r2, [pc, #88]	; (8006b88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d004      	beq.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a15      	ldr	r2, [pc, #84]	; (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d10c      	bne.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	40010000 	.word	0x40010000
 8006b78:	40010400 	.word	0x40010400
 8006b7c:	40000400 	.word	0x40000400
 8006b80:	40000800 	.word	0x40000800
 8006b84:	40000c00 	.word	0x40000c00
 8006b88:	40001800 	.word	0x40001800
 8006b8c:	40014000 	.word	0x40014000

08006b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e042      	b.n	8006c64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d106      	bne.n	8006bf6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7fa fdb3 	bl	800175c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2224      	movs	r2, #36	; 0x24
 8006bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f022 0201 	bic.w	r2, r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fd74 	bl	80076fc <UART_SetConfig>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d101      	bne.n	8006c1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e022      	b.n	8006c64 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d002      	beq.n	8006c2c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f001 fbd4 	bl	80083d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0201 	orr.w	r2, r2, #1
 8006c5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f001 fc5b 	bl	8008518 <UART_CheckIdleState>
 8006c62:	4603      	mov	r3, r0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b08a      	sub	sp, #40	; 0x28
 8006c70:	af02      	add	r7, sp, #8
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	d17b      	bne.n	8006d7e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <HAL_UART_Transmit+0x26>
 8006c8c:	88fb      	ldrh	r3, [r7, #6]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e074      	b.n	8006d80 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2221      	movs	r2, #33	; 0x21
 8006ca2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ca6:	f7fa ff0d 	bl	8001ac4 <HAL_GetTick>
 8006caa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	88fa      	ldrh	r2, [r7, #6]
 8006cb0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	88fa      	ldrh	r2, [r7, #6]
 8006cb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc4:	d108      	bne.n	8006cd8 <HAL_UART_Transmit+0x6c>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d104      	bne.n	8006cd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	61bb      	str	r3, [r7, #24]
 8006cd6:	e003      	b.n	8006ce0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ce0:	e030      	b.n	8006d44 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2180      	movs	r1, #128	; 0x80
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f001 fcbd 	bl	800866c <UART_WaitOnFlagUntilTimeout>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d005      	beq.n	8006d04 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e03d      	b.n	8006d80 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10b      	bne.n	8006d22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	3302      	adds	r3, #2
 8006d1e:	61bb      	str	r3, [r7, #24]
 8006d20:	e007      	b.n	8006d32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	781a      	ldrb	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1c8      	bne.n	8006ce2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	2200      	movs	r2, #0
 8006d58:	2140      	movs	r1, #64	; 0x40
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f001 fc86 	bl	800866c <UART_WaitOnFlagUntilTimeout>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d005      	beq.n	8006d72 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e006      	b.n	8006d80 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	e000      	b.n	8006d80 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d7e:	2302      	movs	r3, #2
  }
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3720      	adds	r7, #32
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b091      	sub	sp, #68	; 0x44
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	4613      	mov	r3, r2
 8006d94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d9c:	2b20      	cmp	r3, #32
 8006d9e:	d178      	bne.n	8006e92 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <HAL_UART_Transmit_IT+0x24>
 8006da6:	88fb      	ldrh	r3, [r7, #6]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e071      	b.n	8006e94 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	88fa      	ldrh	r2, [r7, #6]
 8006dba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	88fa      	ldrh	r2, [r7, #6]
 8006dc2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2221      	movs	r2, #33	; 0x21
 8006dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006de4:	d12a      	bne.n	8006e3c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dee:	d107      	bne.n	8006e00 <HAL_UART_Transmit_IT+0x78>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d103      	bne.n	8006e00 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4a29      	ldr	r2, [pc, #164]	; (8006ea0 <HAL_UART_Transmit_IT+0x118>)
 8006dfc:	679a      	str	r2, [r3, #120]	; 0x78
 8006dfe:	e002      	b.n	8006e06 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4a28      	ldr	r2, [pc, #160]	; (8006ea4 <HAL_UART_Transmit_IT+0x11c>)
 8006e04:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3308      	adds	r3, #8
 8006e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e10:	e853 3f00 	ldrex	r3, [r3]
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3308      	adds	r3, #8
 8006e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e26:	637a      	str	r2, [r7, #52]	; 0x34
 8006e28:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e2e:	e841 2300 	strex	r3, r2, [r1]
 8006e32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1e5      	bne.n	8006e06 <HAL_UART_Transmit_IT+0x7e>
 8006e3a:	e028      	b.n	8006e8e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e44:	d107      	bne.n	8006e56 <HAL_UART_Transmit_IT+0xce>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d103      	bne.n	8006e56 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4a15      	ldr	r2, [pc, #84]	; (8006ea8 <HAL_UART_Transmit_IT+0x120>)
 8006e52:	679a      	str	r2, [r3, #120]	; 0x78
 8006e54:	e002      	b.n	8006e5c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	4a14      	ldr	r2, [pc, #80]	; (8006eac <HAL_UART_Transmit_IT+0x124>)
 8006e5a:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	613b      	str	r3, [r7, #16]
   return(result);
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7a:	623b      	str	r3, [r7, #32]
 8006e7c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	69f9      	ldr	r1, [r7, #28]
 8006e80:	6a3a      	ldr	r2, [r7, #32]
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e6      	bne.n	8006e5c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	e000      	b.n	8006e94 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006e92:	2302      	movs	r3, #2
  }
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3744      	adds	r7, #68	; 0x44
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	08008cd3 	.word	0x08008cd3
 8006ea4:	08008bf3 	.word	0x08008bf3
 8006ea8:	08008b31 	.word	0x08008b31
 8006eac:	08008a79 	.word	0x08008a79

08006eb0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08a      	sub	sp, #40	; 0x28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ec4:	2b20      	cmp	r3, #32
 8006ec6:	d137      	bne.n	8006f38 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d002      	beq.n	8006ed4 <HAL_UART_Receive_IT+0x24>
 8006ece:	88fb      	ldrh	r3, [r7, #6]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e030      	b.n	8006f3a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a18      	ldr	r2, [pc, #96]	; (8006f44 <HAL_UART_Receive_IT+0x94>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d01f      	beq.n	8006f28 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d018      	beq.n	8006f28 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	e853 3f00 	ldrex	r3, [r3]
 8006f02:	613b      	str	r3, [r7, #16]
   return(result);
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	461a      	mov	r2, r3
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	623b      	str	r3, [r7, #32]
 8006f16:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f18:	69f9      	ldr	r1, [r7, #28]
 8006f1a:	6a3a      	ldr	r2, [r7, #32]
 8006f1c:	e841 2300 	strex	r3, r2, [r1]
 8006f20:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1e6      	bne.n	8006ef6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f28:	88fb      	ldrh	r3, [r7, #6]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f001 fc04 	bl	800873c <UART_Start_Receive_IT>
 8006f34:	4603      	mov	r3, r0
 8006f36:	e000      	b.n	8006f3a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f38:	2302      	movs	r3, #2
  }
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3728      	adds	r7, #40	; 0x28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	58000c00 	.word	0x58000c00

08006f48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b0ba      	sub	sp, #232	; 0xe8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006f72:	f640 030f 	movw	r3, #2063	; 0x80f
 8006f76:	4013      	ands	r3, r2
 8006f78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006f7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d11b      	bne.n	8006fbc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f88:	f003 0320 	and.w	r3, r3, #32
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d015      	beq.n	8006fbc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f94:	f003 0320 	and.w	r3, r3, #32
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d105      	bne.n	8006fa8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d009      	beq.n	8006fbc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 8377 	beq.w	80076a0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	4798      	blx	r3
      }
      return;
 8006fba:	e371      	b.n	80076a0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006fbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 8123 	beq.w	800720c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006fc6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006fca:	4b8d      	ldr	r3, [pc, #564]	; (8007200 <HAL_UART_IRQHandler+0x2b8>)
 8006fcc:	4013      	ands	r3, r2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d106      	bne.n	8006fe0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006fd2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006fd6:	4b8b      	ldr	r3, [pc, #556]	; (8007204 <HAL_UART_IRQHandler+0x2bc>)
 8006fd8:	4013      	ands	r3, r2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 8116 	beq.w	800720c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d011      	beq.n	8007010 <HAL_UART_IRQHandler+0xc8>
 8006fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00b      	beq.n	8007010 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007006:	f043 0201 	orr.w	r2, r3, #1
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007014:	f003 0302 	and.w	r3, r3, #2
 8007018:	2b00      	cmp	r3, #0
 800701a:	d011      	beq.n	8007040 <HAL_UART_IRQHandler+0xf8>
 800701c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00b      	beq.n	8007040 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2202      	movs	r2, #2
 800702e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007036:	f043 0204 	orr.w	r2, r3, #4
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007044:	f003 0304 	and.w	r3, r3, #4
 8007048:	2b00      	cmp	r3, #0
 800704a:	d011      	beq.n	8007070 <HAL_UART_IRQHandler+0x128>
 800704c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00b      	beq.n	8007070 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2204      	movs	r2, #4
 800705e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007066:	f043 0202 	orr.w	r2, r3, #2
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007074:	f003 0308 	and.w	r3, r3, #8
 8007078:	2b00      	cmp	r3, #0
 800707a:	d017      	beq.n	80070ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800707c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007080:	f003 0320 	and.w	r3, r3, #32
 8007084:	2b00      	cmp	r3, #0
 8007086:	d105      	bne.n	8007094 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007088:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800708c:	4b5c      	ldr	r3, [pc, #368]	; (8007200 <HAL_UART_IRQHandler+0x2b8>)
 800708e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00b      	beq.n	80070ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2208      	movs	r2, #8
 800709a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a2:	f043 0208 	orr.w	r2, r3, #8
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80070ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d012      	beq.n	80070de <HAL_UART_IRQHandler+0x196>
 80070b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00c      	beq.n	80070de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d4:	f043 0220 	orr.w	r2, r3, #32
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 82dd 	beq.w	80076a4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80070ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ee:	f003 0320 	and.w	r3, r3, #32
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d013      	beq.n	800711e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80070f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070fa:	f003 0320 	and.w	r3, r3, #32
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d105      	bne.n	800710e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d007      	beq.n	800711e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007124:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007132:	2b40      	cmp	r3, #64	; 0x40
 8007134:	d005      	beq.n	8007142 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007136:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800713a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800713e:	2b00      	cmp	r3, #0
 8007140:	d054      	beq.n	80071ec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f001 fc1c 	bl	8008980 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007152:	2b40      	cmp	r3, #64	; 0x40
 8007154:	d146      	bne.n	80071e4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	3308      	adds	r3, #8
 800715c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007160:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800716c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3308      	adds	r3, #8
 800717e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007182:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800718e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800719a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1d9      	bne.n	8007156 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d017      	beq.n	80071dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071b2:	4a15      	ldr	r2, [pc, #84]	; (8007208 <HAL_UART_IRQHandler+0x2c0>)
 80071b4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fb f8df 	bl	8002380 <HAL_DMA_Abort_IT>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d019      	beq.n	80071fc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80071d6:	4610      	mov	r0, r2
 80071d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071da:	e00f      	b.n	80071fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fa77 	bl	80076d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e2:	e00b      	b.n	80071fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fa73 	bl	80076d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ea:	e007      	b.n	80071fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fa6f 	bl	80076d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80071fa:	e253      	b.n	80076a4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071fc:	bf00      	nop
    return;
 80071fe:	e251      	b.n	80076a4 <HAL_UART_IRQHandler+0x75c>
 8007200:	10000001 	.word	0x10000001
 8007204:	04000120 	.word	0x04000120
 8007208:	08008a4d 	.word	0x08008a4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007210:	2b01      	cmp	r3, #1
 8007212:	f040 81e7 	bne.w	80075e4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800721a:	f003 0310 	and.w	r3, r3, #16
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 81e0 	beq.w	80075e4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007228:	f003 0310 	and.w	r3, r3, #16
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 81d9 	beq.w	80075e4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2210      	movs	r2, #16
 8007238:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007244:	2b40      	cmp	r3, #64	; 0x40
 8007246:	f040 8151 	bne.w	80074ec <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a96      	ldr	r2, [pc, #600]	; (80074ac <HAL_UART_IRQHandler+0x564>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d068      	beq.n	800732a <HAL_UART_IRQHandler+0x3e2>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a93      	ldr	r2, [pc, #588]	; (80074b0 <HAL_UART_IRQHandler+0x568>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d061      	beq.n	800732a <HAL_UART_IRQHandler+0x3e2>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a91      	ldr	r2, [pc, #580]	; (80074b4 <HAL_UART_IRQHandler+0x56c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d05a      	beq.n	800732a <HAL_UART_IRQHandler+0x3e2>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a8e      	ldr	r2, [pc, #568]	; (80074b8 <HAL_UART_IRQHandler+0x570>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d053      	beq.n	800732a <HAL_UART_IRQHandler+0x3e2>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a8c      	ldr	r2, [pc, #560]	; (80074bc <HAL_UART_IRQHandler+0x574>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d04c      	beq.n	800732a <HAL_UART_IRQHandler+0x3e2>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a89      	ldr	r2, [pc, #548]	; (80074c0 <HAL_UART_IRQHandler+0x578>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d045      	beq.n	800732a <HAL_UART_IRQHandler+0x3e2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a87      	ldr	r2, [pc, #540]	; (80074c4 <HAL_UART_IRQHandler+0x57c>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d03e      	beq.n	800732a <HAL_UART_IRQHandler+0x3e2>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a84      	ldr	r2, [pc, #528]	; (80074c8 <HAL_UART_IRQHandler+0x580>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d037      	beq.n	800732a <HAL_UART_IRQHandler+0x3e2>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a82      	ldr	r2, [pc, #520]	; (80074cc <HAL_UART_IRQHandler+0x584>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d030      	beq.n	800732a <HAL_UART_IRQHandler+0x3e2>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a7f      	ldr	r2, [pc, #508]	; (80074d0 <HAL_UART_IRQHandler+0x588>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d029      	beq.n	800732a <HAL_UART_IRQHandler+0x3e2>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a7d      	ldr	r2, [pc, #500]	; (80074d4 <HAL_UART_IRQHandler+0x58c>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d022      	beq.n	800732a <HAL_UART_IRQHandler+0x3e2>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a7a      	ldr	r2, [pc, #488]	; (80074d8 <HAL_UART_IRQHandler+0x590>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d01b      	beq.n	800732a <HAL_UART_IRQHandler+0x3e2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a78      	ldr	r2, [pc, #480]	; (80074dc <HAL_UART_IRQHandler+0x594>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d014      	beq.n	800732a <HAL_UART_IRQHandler+0x3e2>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a75      	ldr	r2, [pc, #468]	; (80074e0 <HAL_UART_IRQHandler+0x598>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d00d      	beq.n	800732a <HAL_UART_IRQHandler+0x3e2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a73      	ldr	r2, [pc, #460]	; (80074e4 <HAL_UART_IRQHandler+0x59c>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d006      	beq.n	800732a <HAL_UART_IRQHandler+0x3e2>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a70      	ldr	r2, [pc, #448]	; (80074e8 <HAL_UART_IRQHandler+0x5a0>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d106      	bne.n	8007338 <HAL_UART_IRQHandler+0x3f0>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	b29b      	uxth	r3, r3
 8007336:	e005      	b.n	8007344 <HAL_UART_IRQHandler+0x3fc>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	b29b      	uxth	r3, r3
 8007344:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007348:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 81ab 	beq.w	80076a8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007358:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800735c:	429a      	cmp	r2, r3
 800735e:	f080 81a3 	bcs.w	80076a8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007368:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007372:	69db      	ldr	r3, [r3, #28]
 8007374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007378:	f000 8087 	beq.w	800748a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007384:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007390:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007398:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	461a      	mov	r2, r3
 80073a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80073aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073b6:	e841 2300 	strex	r3, r2, [r1]
 80073ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1da      	bne.n	800737c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3308      	adds	r3, #8
 80073cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073d8:	f023 0301 	bic.w	r3, r3, #1
 80073dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3308      	adds	r3, #8
 80073e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073f6:	e841 2300 	strex	r3, r2, [r1]
 80073fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1e1      	bne.n	80073c6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3308      	adds	r3, #8
 8007408:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800740c:	e853 3f00 	ldrex	r3, [r3]
 8007410:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007418:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3308      	adds	r3, #8
 8007422:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007426:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007428:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800742c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e3      	bne.n	8007402 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2220      	movs	r2, #32
 800743e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007450:	e853 3f00 	ldrex	r3, [r3]
 8007454:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007458:	f023 0310 	bic.w	r3, r3, #16
 800745c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	461a      	mov	r2, r3
 8007466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800746a:	65bb      	str	r3, [r7, #88]	; 0x58
 800746c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007470:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007472:	e841 2300 	strex	r3, r2, [r1]
 8007476:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1e4      	bne.n	8007448 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007484:	4618      	mov	r0, r3
 8007486:	f7fa fc5d 	bl	8001d44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2202      	movs	r2, #2
 800748e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800749c:	b29b      	uxth	r3, r3
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f91d 	bl	80076e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074aa:	e0fd      	b.n	80076a8 <HAL_UART_IRQHandler+0x760>
 80074ac:	40020010 	.word	0x40020010
 80074b0:	40020028 	.word	0x40020028
 80074b4:	40020040 	.word	0x40020040
 80074b8:	40020058 	.word	0x40020058
 80074bc:	40020070 	.word	0x40020070
 80074c0:	40020088 	.word	0x40020088
 80074c4:	400200a0 	.word	0x400200a0
 80074c8:	400200b8 	.word	0x400200b8
 80074cc:	40020410 	.word	0x40020410
 80074d0:	40020428 	.word	0x40020428
 80074d4:	40020440 	.word	0x40020440
 80074d8:	40020458 	.word	0x40020458
 80074dc:	40020470 	.word	0x40020470
 80074e0:	40020488 	.word	0x40020488
 80074e4:	400204a0 	.word	0x400204a0
 80074e8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007506:	b29b      	uxth	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 80cf 	beq.w	80076ac <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800750e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 80ca 	beq.w	80076ac <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007520:	e853 3f00 	ldrex	r3, [r3]
 8007524:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007528:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800752c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	461a      	mov	r2, r3
 8007536:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800753a:	647b      	str	r3, [r7, #68]	; 0x44
 800753c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007540:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007542:	e841 2300 	strex	r3, r2, [r1]
 8007546:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1e4      	bne.n	8007518 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3308      	adds	r3, #8
 8007554:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	e853 3f00 	ldrex	r3, [r3]
 800755c:	623b      	str	r3, [r7, #32]
   return(result);
 800755e:	6a3a      	ldr	r2, [r7, #32]
 8007560:	4b55      	ldr	r3, [pc, #340]	; (80076b8 <HAL_UART_IRQHandler+0x770>)
 8007562:	4013      	ands	r3, r2
 8007564:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3308      	adds	r3, #8
 800756e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007572:	633a      	str	r2, [r7, #48]	; 0x30
 8007574:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800757a:	e841 2300 	strex	r3, r2, [r1]
 800757e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1e3      	bne.n	800754e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2220      	movs	r2, #32
 800758a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	e853 3f00 	ldrex	r3, [r3]
 80075a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 0310 	bic.w	r3, r3, #16
 80075ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	461a      	mov	r2, r3
 80075b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80075bc:	61fb      	str	r3, [r7, #28]
 80075be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c0:	69b9      	ldr	r1, [r7, #24]
 80075c2:	69fa      	ldr	r2, [r7, #28]
 80075c4:	e841 2300 	strex	r3, r2, [r1]
 80075c8:	617b      	str	r3, [r7, #20]
   return(result);
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e4      	bne.n	800759a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f881 	bl	80076e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075e2:	e063      	b.n	80076ac <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80075e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00e      	beq.n	800760e <HAL_UART_IRQHandler+0x6c6>
 80075f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d008      	beq.n	800760e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007604:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f002 f920 	bl	800984c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800760c:	e051      	b.n	80076b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800760e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007616:	2b00      	cmp	r3, #0
 8007618:	d014      	beq.n	8007644 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800761a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800761e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007622:	2b00      	cmp	r3, #0
 8007624:	d105      	bne.n	8007632 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800762a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d008      	beq.n	8007644 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007636:	2b00      	cmp	r3, #0
 8007638:	d03a      	beq.n	80076b0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	4798      	blx	r3
    }
    return;
 8007642:	e035      	b.n	80076b0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764c:	2b00      	cmp	r3, #0
 800764e:	d009      	beq.n	8007664 <HAL_UART_IRQHandler+0x71c>
 8007650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 fbad 	bl	8008dbc <UART_EndTransmit_IT>
    return;
 8007662:	e026      	b.n	80076b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007668:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d009      	beq.n	8007684 <HAL_UART_IRQHandler+0x73c>
 8007670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007674:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d003      	beq.n	8007684 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f002 f8f9 	bl	8009874 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007682:	e016      	b.n	80076b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d010      	beq.n	80076b2 <HAL_UART_IRQHandler+0x76a>
 8007690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007694:	2b00      	cmp	r3, #0
 8007696:	da0c      	bge.n	80076b2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f002 f8e1 	bl	8009860 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800769e:	e008      	b.n	80076b2 <HAL_UART_IRQHandler+0x76a>
      return;
 80076a0:	bf00      	nop
 80076a2:	e006      	b.n	80076b2 <HAL_UART_IRQHandler+0x76a>
    return;
 80076a4:	bf00      	nop
 80076a6:	e004      	b.n	80076b2 <HAL_UART_IRQHandler+0x76a>
      return;
 80076a8:	bf00      	nop
 80076aa:	e002      	b.n	80076b2 <HAL_UART_IRQHandler+0x76a>
      return;
 80076ac:	bf00      	nop
 80076ae:	e000      	b.n	80076b2 <HAL_UART_IRQHandler+0x76a>
    return;
 80076b0:	bf00      	nop
  }
}
 80076b2:	37e8      	adds	r7, #232	; 0xe8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	effffffe 	.word	0xeffffffe

080076bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007700:	b092      	sub	sp, #72	; 0x48
 8007702:	af00      	add	r7, sp, #0
 8007704:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	431a      	orrs	r2, r3
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	431a      	orrs	r2, r3
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	4313      	orrs	r3, r2
 8007722:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	4bbe      	ldr	r3, [pc, #760]	; (8007a24 <UART_SetConfig+0x328>)
 800772c:	4013      	ands	r3, r2
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	6812      	ldr	r2, [r2, #0]
 8007732:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007734:	430b      	orrs	r3, r1
 8007736:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	68da      	ldr	r2, [r3, #12]
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4ab3      	ldr	r2, [pc, #716]	; (8007a28 <UART_SetConfig+0x32c>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d004      	beq.n	8007768 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007764:	4313      	orrs	r3, r2
 8007766:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689a      	ldr	r2, [r3, #8]
 800776e:	4baf      	ldr	r3, [pc, #700]	; (8007a2c <UART_SetConfig+0x330>)
 8007770:	4013      	ands	r3, r2
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	6812      	ldr	r2, [r2, #0]
 8007776:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007778:	430b      	orrs	r3, r1
 800777a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007782:	f023 010f 	bic.w	r1, r3, #15
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	430a      	orrs	r2, r1
 8007790:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4aa6      	ldr	r2, [pc, #664]	; (8007a30 <UART_SetConfig+0x334>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d177      	bne.n	800788c <UART_SetConfig+0x190>
 800779c:	4ba5      	ldr	r3, [pc, #660]	; (8007a34 <UART_SetConfig+0x338>)
 800779e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077a4:	2b28      	cmp	r3, #40	; 0x28
 80077a6:	d86d      	bhi.n	8007884 <UART_SetConfig+0x188>
 80077a8:	a201      	add	r2, pc, #4	; (adr r2, 80077b0 <UART_SetConfig+0xb4>)
 80077aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ae:	bf00      	nop
 80077b0:	08007855 	.word	0x08007855
 80077b4:	08007885 	.word	0x08007885
 80077b8:	08007885 	.word	0x08007885
 80077bc:	08007885 	.word	0x08007885
 80077c0:	08007885 	.word	0x08007885
 80077c4:	08007885 	.word	0x08007885
 80077c8:	08007885 	.word	0x08007885
 80077cc:	08007885 	.word	0x08007885
 80077d0:	0800785d 	.word	0x0800785d
 80077d4:	08007885 	.word	0x08007885
 80077d8:	08007885 	.word	0x08007885
 80077dc:	08007885 	.word	0x08007885
 80077e0:	08007885 	.word	0x08007885
 80077e4:	08007885 	.word	0x08007885
 80077e8:	08007885 	.word	0x08007885
 80077ec:	08007885 	.word	0x08007885
 80077f0:	08007865 	.word	0x08007865
 80077f4:	08007885 	.word	0x08007885
 80077f8:	08007885 	.word	0x08007885
 80077fc:	08007885 	.word	0x08007885
 8007800:	08007885 	.word	0x08007885
 8007804:	08007885 	.word	0x08007885
 8007808:	08007885 	.word	0x08007885
 800780c:	08007885 	.word	0x08007885
 8007810:	0800786d 	.word	0x0800786d
 8007814:	08007885 	.word	0x08007885
 8007818:	08007885 	.word	0x08007885
 800781c:	08007885 	.word	0x08007885
 8007820:	08007885 	.word	0x08007885
 8007824:	08007885 	.word	0x08007885
 8007828:	08007885 	.word	0x08007885
 800782c:	08007885 	.word	0x08007885
 8007830:	08007875 	.word	0x08007875
 8007834:	08007885 	.word	0x08007885
 8007838:	08007885 	.word	0x08007885
 800783c:	08007885 	.word	0x08007885
 8007840:	08007885 	.word	0x08007885
 8007844:	08007885 	.word	0x08007885
 8007848:	08007885 	.word	0x08007885
 800784c:	08007885 	.word	0x08007885
 8007850:	0800787d 	.word	0x0800787d
 8007854:	2301      	movs	r3, #1
 8007856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800785a:	e326      	b.n	8007eaa <UART_SetConfig+0x7ae>
 800785c:	2304      	movs	r3, #4
 800785e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007862:	e322      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007864:	2308      	movs	r3, #8
 8007866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800786a:	e31e      	b.n	8007eaa <UART_SetConfig+0x7ae>
 800786c:	2310      	movs	r3, #16
 800786e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007872:	e31a      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007874:	2320      	movs	r3, #32
 8007876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800787a:	e316      	b.n	8007eaa <UART_SetConfig+0x7ae>
 800787c:	2340      	movs	r3, #64	; 0x40
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007882:	e312      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007884:	2380      	movs	r3, #128	; 0x80
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800788a:	e30e      	b.n	8007eaa <UART_SetConfig+0x7ae>
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a69      	ldr	r2, [pc, #420]	; (8007a38 <UART_SetConfig+0x33c>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d130      	bne.n	80078f8 <UART_SetConfig+0x1fc>
 8007896:	4b67      	ldr	r3, [pc, #412]	; (8007a34 <UART_SetConfig+0x338>)
 8007898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	2b05      	cmp	r3, #5
 80078a0:	d826      	bhi.n	80078f0 <UART_SetConfig+0x1f4>
 80078a2:	a201      	add	r2, pc, #4	; (adr r2, 80078a8 <UART_SetConfig+0x1ac>)
 80078a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a8:	080078c1 	.word	0x080078c1
 80078ac:	080078c9 	.word	0x080078c9
 80078b0:	080078d1 	.word	0x080078d1
 80078b4:	080078d9 	.word	0x080078d9
 80078b8:	080078e1 	.word	0x080078e1
 80078bc:	080078e9 	.word	0x080078e9
 80078c0:	2300      	movs	r3, #0
 80078c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078c6:	e2f0      	b.n	8007eaa <UART_SetConfig+0x7ae>
 80078c8:	2304      	movs	r3, #4
 80078ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ce:	e2ec      	b.n	8007eaa <UART_SetConfig+0x7ae>
 80078d0:	2308      	movs	r3, #8
 80078d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078d6:	e2e8      	b.n	8007eaa <UART_SetConfig+0x7ae>
 80078d8:	2310      	movs	r3, #16
 80078da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078de:	e2e4      	b.n	8007eaa <UART_SetConfig+0x7ae>
 80078e0:	2320      	movs	r3, #32
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078e6:	e2e0      	b.n	8007eaa <UART_SetConfig+0x7ae>
 80078e8:	2340      	movs	r3, #64	; 0x40
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ee:	e2dc      	b.n	8007eaa <UART_SetConfig+0x7ae>
 80078f0:	2380      	movs	r3, #128	; 0x80
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078f6:	e2d8      	b.n	8007eaa <UART_SetConfig+0x7ae>
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a4f      	ldr	r2, [pc, #316]	; (8007a3c <UART_SetConfig+0x340>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d130      	bne.n	8007964 <UART_SetConfig+0x268>
 8007902:	4b4c      	ldr	r3, [pc, #304]	; (8007a34 <UART_SetConfig+0x338>)
 8007904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	2b05      	cmp	r3, #5
 800790c:	d826      	bhi.n	800795c <UART_SetConfig+0x260>
 800790e:	a201      	add	r2, pc, #4	; (adr r2, 8007914 <UART_SetConfig+0x218>)
 8007910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007914:	0800792d 	.word	0x0800792d
 8007918:	08007935 	.word	0x08007935
 800791c:	0800793d 	.word	0x0800793d
 8007920:	08007945 	.word	0x08007945
 8007924:	0800794d 	.word	0x0800794d
 8007928:	08007955 	.word	0x08007955
 800792c:	2300      	movs	r3, #0
 800792e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007932:	e2ba      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007934:	2304      	movs	r3, #4
 8007936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800793a:	e2b6      	b.n	8007eaa <UART_SetConfig+0x7ae>
 800793c:	2308      	movs	r3, #8
 800793e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007942:	e2b2      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007944:	2310      	movs	r3, #16
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800794a:	e2ae      	b.n	8007eaa <UART_SetConfig+0x7ae>
 800794c:	2320      	movs	r3, #32
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007952:	e2aa      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007954:	2340      	movs	r3, #64	; 0x40
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800795a:	e2a6      	b.n	8007eaa <UART_SetConfig+0x7ae>
 800795c:	2380      	movs	r3, #128	; 0x80
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007962:	e2a2      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a35      	ldr	r2, [pc, #212]	; (8007a40 <UART_SetConfig+0x344>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d130      	bne.n	80079d0 <UART_SetConfig+0x2d4>
 800796e:	4b31      	ldr	r3, [pc, #196]	; (8007a34 <UART_SetConfig+0x338>)
 8007970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007972:	f003 0307 	and.w	r3, r3, #7
 8007976:	2b05      	cmp	r3, #5
 8007978:	d826      	bhi.n	80079c8 <UART_SetConfig+0x2cc>
 800797a:	a201      	add	r2, pc, #4	; (adr r2, 8007980 <UART_SetConfig+0x284>)
 800797c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007980:	08007999 	.word	0x08007999
 8007984:	080079a1 	.word	0x080079a1
 8007988:	080079a9 	.word	0x080079a9
 800798c:	080079b1 	.word	0x080079b1
 8007990:	080079b9 	.word	0x080079b9
 8007994:	080079c1 	.word	0x080079c1
 8007998:	2300      	movs	r3, #0
 800799a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800799e:	e284      	b.n	8007eaa <UART_SetConfig+0x7ae>
 80079a0:	2304      	movs	r3, #4
 80079a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079a6:	e280      	b.n	8007eaa <UART_SetConfig+0x7ae>
 80079a8:	2308      	movs	r3, #8
 80079aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ae:	e27c      	b.n	8007eaa <UART_SetConfig+0x7ae>
 80079b0:	2310      	movs	r3, #16
 80079b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079b6:	e278      	b.n	8007eaa <UART_SetConfig+0x7ae>
 80079b8:	2320      	movs	r3, #32
 80079ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079be:	e274      	b.n	8007eaa <UART_SetConfig+0x7ae>
 80079c0:	2340      	movs	r3, #64	; 0x40
 80079c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079c6:	e270      	b.n	8007eaa <UART_SetConfig+0x7ae>
 80079c8:	2380      	movs	r3, #128	; 0x80
 80079ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ce:	e26c      	b.n	8007eaa <UART_SetConfig+0x7ae>
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a1b      	ldr	r2, [pc, #108]	; (8007a44 <UART_SetConfig+0x348>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d142      	bne.n	8007a60 <UART_SetConfig+0x364>
 80079da:	4b16      	ldr	r3, [pc, #88]	; (8007a34 <UART_SetConfig+0x338>)
 80079dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079de:	f003 0307 	and.w	r3, r3, #7
 80079e2:	2b05      	cmp	r3, #5
 80079e4:	d838      	bhi.n	8007a58 <UART_SetConfig+0x35c>
 80079e6:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <UART_SetConfig+0x2f0>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	08007a05 	.word	0x08007a05
 80079f0:	08007a0d 	.word	0x08007a0d
 80079f4:	08007a15 	.word	0x08007a15
 80079f8:	08007a1d 	.word	0x08007a1d
 80079fc:	08007a49 	.word	0x08007a49
 8007a00:	08007a51 	.word	0x08007a51
 8007a04:	2300      	movs	r3, #0
 8007a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a0a:	e24e      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007a0c:	2304      	movs	r3, #4
 8007a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a12:	e24a      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007a14:	2308      	movs	r3, #8
 8007a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a1a:	e246      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007a1c:	2310      	movs	r3, #16
 8007a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a22:	e242      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007a24:	cfff69f3 	.word	0xcfff69f3
 8007a28:	58000c00 	.word	0x58000c00
 8007a2c:	11fff4ff 	.word	0x11fff4ff
 8007a30:	40011000 	.word	0x40011000
 8007a34:	58024400 	.word	0x58024400
 8007a38:	40004400 	.word	0x40004400
 8007a3c:	40004800 	.word	0x40004800
 8007a40:	40004c00 	.word	0x40004c00
 8007a44:	40005000 	.word	0x40005000
 8007a48:	2320      	movs	r3, #32
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a4e:	e22c      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007a50:	2340      	movs	r3, #64	; 0x40
 8007a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a56:	e228      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007a58:	2380      	movs	r3, #128	; 0x80
 8007a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a5e:	e224      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4ab1      	ldr	r2, [pc, #708]	; (8007d2c <UART_SetConfig+0x630>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d176      	bne.n	8007b58 <UART_SetConfig+0x45c>
 8007a6a:	4bb1      	ldr	r3, [pc, #708]	; (8007d30 <UART_SetConfig+0x634>)
 8007a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a72:	2b28      	cmp	r3, #40	; 0x28
 8007a74:	d86c      	bhi.n	8007b50 <UART_SetConfig+0x454>
 8007a76:	a201      	add	r2, pc, #4	; (adr r2, 8007a7c <UART_SetConfig+0x380>)
 8007a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7c:	08007b21 	.word	0x08007b21
 8007a80:	08007b51 	.word	0x08007b51
 8007a84:	08007b51 	.word	0x08007b51
 8007a88:	08007b51 	.word	0x08007b51
 8007a8c:	08007b51 	.word	0x08007b51
 8007a90:	08007b51 	.word	0x08007b51
 8007a94:	08007b51 	.word	0x08007b51
 8007a98:	08007b51 	.word	0x08007b51
 8007a9c:	08007b29 	.word	0x08007b29
 8007aa0:	08007b51 	.word	0x08007b51
 8007aa4:	08007b51 	.word	0x08007b51
 8007aa8:	08007b51 	.word	0x08007b51
 8007aac:	08007b51 	.word	0x08007b51
 8007ab0:	08007b51 	.word	0x08007b51
 8007ab4:	08007b51 	.word	0x08007b51
 8007ab8:	08007b51 	.word	0x08007b51
 8007abc:	08007b31 	.word	0x08007b31
 8007ac0:	08007b51 	.word	0x08007b51
 8007ac4:	08007b51 	.word	0x08007b51
 8007ac8:	08007b51 	.word	0x08007b51
 8007acc:	08007b51 	.word	0x08007b51
 8007ad0:	08007b51 	.word	0x08007b51
 8007ad4:	08007b51 	.word	0x08007b51
 8007ad8:	08007b51 	.word	0x08007b51
 8007adc:	08007b39 	.word	0x08007b39
 8007ae0:	08007b51 	.word	0x08007b51
 8007ae4:	08007b51 	.word	0x08007b51
 8007ae8:	08007b51 	.word	0x08007b51
 8007aec:	08007b51 	.word	0x08007b51
 8007af0:	08007b51 	.word	0x08007b51
 8007af4:	08007b51 	.word	0x08007b51
 8007af8:	08007b51 	.word	0x08007b51
 8007afc:	08007b41 	.word	0x08007b41
 8007b00:	08007b51 	.word	0x08007b51
 8007b04:	08007b51 	.word	0x08007b51
 8007b08:	08007b51 	.word	0x08007b51
 8007b0c:	08007b51 	.word	0x08007b51
 8007b10:	08007b51 	.word	0x08007b51
 8007b14:	08007b51 	.word	0x08007b51
 8007b18:	08007b51 	.word	0x08007b51
 8007b1c:	08007b49 	.word	0x08007b49
 8007b20:	2301      	movs	r3, #1
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b26:	e1c0      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007b28:	2304      	movs	r3, #4
 8007b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b2e:	e1bc      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007b30:	2308      	movs	r3, #8
 8007b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b36:	e1b8      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007b38:	2310      	movs	r3, #16
 8007b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b3e:	e1b4      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007b40:	2320      	movs	r3, #32
 8007b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b46:	e1b0      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007b48:	2340      	movs	r3, #64	; 0x40
 8007b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b4e:	e1ac      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007b50:	2380      	movs	r3, #128	; 0x80
 8007b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b56:	e1a8      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a75      	ldr	r2, [pc, #468]	; (8007d34 <UART_SetConfig+0x638>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d130      	bne.n	8007bc4 <UART_SetConfig+0x4c8>
 8007b62:	4b73      	ldr	r3, [pc, #460]	; (8007d30 <UART_SetConfig+0x634>)
 8007b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	2b05      	cmp	r3, #5
 8007b6c:	d826      	bhi.n	8007bbc <UART_SetConfig+0x4c0>
 8007b6e:	a201      	add	r2, pc, #4	; (adr r2, 8007b74 <UART_SetConfig+0x478>)
 8007b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b74:	08007b8d 	.word	0x08007b8d
 8007b78:	08007b95 	.word	0x08007b95
 8007b7c:	08007b9d 	.word	0x08007b9d
 8007b80:	08007ba5 	.word	0x08007ba5
 8007b84:	08007bad 	.word	0x08007bad
 8007b88:	08007bb5 	.word	0x08007bb5
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b92:	e18a      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007b94:	2304      	movs	r3, #4
 8007b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b9a:	e186      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007b9c:	2308      	movs	r3, #8
 8007b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ba2:	e182      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007ba4:	2310      	movs	r3, #16
 8007ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007baa:	e17e      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007bac:	2320      	movs	r3, #32
 8007bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bb2:	e17a      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007bb4:	2340      	movs	r3, #64	; 0x40
 8007bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bba:	e176      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007bbc:	2380      	movs	r3, #128	; 0x80
 8007bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bc2:	e172      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a5b      	ldr	r2, [pc, #364]	; (8007d38 <UART_SetConfig+0x63c>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d130      	bne.n	8007c30 <UART_SetConfig+0x534>
 8007bce:	4b58      	ldr	r3, [pc, #352]	; (8007d30 <UART_SetConfig+0x634>)
 8007bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd2:	f003 0307 	and.w	r3, r3, #7
 8007bd6:	2b05      	cmp	r3, #5
 8007bd8:	d826      	bhi.n	8007c28 <UART_SetConfig+0x52c>
 8007bda:	a201      	add	r2, pc, #4	; (adr r2, 8007be0 <UART_SetConfig+0x4e4>)
 8007bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be0:	08007bf9 	.word	0x08007bf9
 8007be4:	08007c01 	.word	0x08007c01
 8007be8:	08007c09 	.word	0x08007c09
 8007bec:	08007c11 	.word	0x08007c11
 8007bf0:	08007c19 	.word	0x08007c19
 8007bf4:	08007c21 	.word	0x08007c21
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bfe:	e154      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007c00:	2304      	movs	r3, #4
 8007c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c06:	e150      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007c08:	2308      	movs	r3, #8
 8007c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c0e:	e14c      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007c10:	2310      	movs	r3, #16
 8007c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c16:	e148      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007c18:	2320      	movs	r3, #32
 8007c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c1e:	e144      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007c20:	2340      	movs	r3, #64	; 0x40
 8007c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c26:	e140      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007c28:	2380      	movs	r3, #128	; 0x80
 8007c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c2e:	e13c      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a41      	ldr	r2, [pc, #260]	; (8007d3c <UART_SetConfig+0x640>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	f040 8082 	bne.w	8007d40 <UART_SetConfig+0x644>
 8007c3c:	4b3c      	ldr	r3, [pc, #240]	; (8007d30 <UART_SetConfig+0x634>)
 8007c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c44:	2b28      	cmp	r3, #40	; 0x28
 8007c46:	d86d      	bhi.n	8007d24 <UART_SetConfig+0x628>
 8007c48:	a201      	add	r2, pc, #4	; (adr r2, 8007c50 <UART_SetConfig+0x554>)
 8007c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4e:	bf00      	nop
 8007c50:	08007cf5 	.word	0x08007cf5
 8007c54:	08007d25 	.word	0x08007d25
 8007c58:	08007d25 	.word	0x08007d25
 8007c5c:	08007d25 	.word	0x08007d25
 8007c60:	08007d25 	.word	0x08007d25
 8007c64:	08007d25 	.word	0x08007d25
 8007c68:	08007d25 	.word	0x08007d25
 8007c6c:	08007d25 	.word	0x08007d25
 8007c70:	08007cfd 	.word	0x08007cfd
 8007c74:	08007d25 	.word	0x08007d25
 8007c78:	08007d25 	.word	0x08007d25
 8007c7c:	08007d25 	.word	0x08007d25
 8007c80:	08007d25 	.word	0x08007d25
 8007c84:	08007d25 	.word	0x08007d25
 8007c88:	08007d25 	.word	0x08007d25
 8007c8c:	08007d25 	.word	0x08007d25
 8007c90:	08007d05 	.word	0x08007d05
 8007c94:	08007d25 	.word	0x08007d25
 8007c98:	08007d25 	.word	0x08007d25
 8007c9c:	08007d25 	.word	0x08007d25
 8007ca0:	08007d25 	.word	0x08007d25
 8007ca4:	08007d25 	.word	0x08007d25
 8007ca8:	08007d25 	.word	0x08007d25
 8007cac:	08007d25 	.word	0x08007d25
 8007cb0:	08007d0d 	.word	0x08007d0d
 8007cb4:	08007d25 	.word	0x08007d25
 8007cb8:	08007d25 	.word	0x08007d25
 8007cbc:	08007d25 	.word	0x08007d25
 8007cc0:	08007d25 	.word	0x08007d25
 8007cc4:	08007d25 	.word	0x08007d25
 8007cc8:	08007d25 	.word	0x08007d25
 8007ccc:	08007d25 	.word	0x08007d25
 8007cd0:	08007d15 	.word	0x08007d15
 8007cd4:	08007d25 	.word	0x08007d25
 8007cd8:	08007d25 	.word	0x08007d25
 8007cdc:	08007d25 	.word	0x08007d25
 8007ce0:	08007d25 	.word	0x08007d25
 8007ce4:	08007d25 	.word	0x08007d25
 8007ce8:	08007d25 	.word	0x08007d25
 8007cec:	08007d25 	.word	0x08007d25
 8007cf0:	08007d1d 	.word	0x08007d1d
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cfa:	e0d6      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007cfc:	2304      	movs	r3, #4
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d02:	e0d2      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007d04:	2308      	movs	r3, #8
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d0a:	e0ce      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007d0c:	2310      	movs	r3, #16
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d12:	e0ca      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007d14:	2320      	movs	r3, #32
 8007d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d1a:	e0c6      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007d1c:	2340      	movs	r3, #64	; 0x40
 8007d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d22:	e0c2      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007d24:	2380      	movs	r3, #128	; 0x80
 8007d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2a:	e0be      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007d2c:	40011400 	.word	0x40011400
 8007d30:	58024400 	.word	0x58024400
 8007d34:	40007800 	.word	0x40007800
 8007d38:	40007c00 	.word	0x40007c00
 8007d3c:	40011800 	.word	0x40011800
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4aad      	ldr	r2, [pc, #692]	; (8007ffc <UART_SetConfig+0x900>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d176      	bne.n	8007e38 <UART_SetConfig+0x73c>
 8007d4a:	4bad      	ldr	r3, [pc, #692]	; (8008000 <UART_SetConfig+0x904>)
 8007d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d52:	2b28      	cmp	r3, #40	; 0x28
 8007d54:	d86c      	bhi.n	8007e30 <UART_SetConfig+0x734>
 8007d56:	a201      	add	r2, pc, #4	; (adr r2, 8007d5c <UART_SetConfig+0x660>)
 8007d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5c:	08007e01 	.word	0x08007e01
 8007d60:	08007e31 	.word	0x08007e31
 8007d64:	08007e31 	.word	0x08007e31
 8007d68:	08007e31 	.word	0x08007e31
 8007d6c:	08007e31 	.word	0x08007e31
 8007d70:	08007e31 	.word	0x08007e31
 8007d74:	08007e31 	.word	0x08007e31
 8007d78:	08007e31 	.word	0x08007e31
 8007d7c:	08007e09 	.word	0x08007e09
 8007d80:	08007e31 	.word	0x08007e31
 8007d84:	08007e31 	.word	0x08007e31
 8007d88:	08007e31 	.word	0x08007e31
 8007d8c:	08007e31 	.word	0x08007e31
 8007d90:	08007e31 	.word	0x08007e31
 8007d94:	08007e31 	.word	0x08007e31
 8007d98:	08007e31 	.word	0x08007e31
 8007d9c:	08007e11 	.word	0x08007e11
 8007da0:	08007e31 	.word	0x08007e31
 8007da4:	08007e31 	.word	0x08007e31
 8007da8:	08007e31 	.word	0x08007e31
 8007dac:	08007e31 	.word	0x08007e31
 8007db0:	08007e31 	.word	0x08007e31
 8007db4:	08007e31 	.word	0x08007e31
 8007db8:	08007e31 	.word	0x08007e31
 8007dbc:	08007e19 	.word	0x08007e19
 8007dc0:	08007e31 	.word	0x08007e31
 8007dc4:	08007e31 	.word	0x08007e31
 8007dc8:	08007e31 	.word	0x08007e31
 8007dcc:	08007e31 	.word	0x08007e31
 8007dd0:	08007e31 	.word	0x08007e31
 8007dd4:	08007e31 	.word	0x08007e31
 8007dd8:	08007e31 	.word	0x08007e31
 8007ddc:	08007e21 	.word	0x08007e21
 8007de0:	08007e31 	.word	0x08007e31
 8007de4:	08007e31 	.word	0x08007e31
 8007de8:	08007e31 	.word	0x08007e31
 8007dec:	08007e31 	.word	0x08007e31
 8007df0:	08007e31 	.word	0x08007e31
 8007df4:	08007e31 	.word	0x08007e31
 8007df8:	08007e31 	.word	0x08007e31
 8007dfc:	08007e29 	.word	0x08007e29
 8007e00:	2301      	movs	r3, #1
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e06:	e050      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007e08:	2304      	movs	r3, #4
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0e:	e04c      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007e10:	2308      	movs	r3, #8
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e16:	e048      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007e18:	2310      	movs	r3, #16
 8007e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e1e:	e044      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007e20:	2320      	movs	r3, #32
 8007e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e26:	e040      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007e28:	2340      	movs	r3, #64	; 0x40
 8007e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e2e:	e03c      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007e30:	2380      	movs	r3, #128	; 0x80
 8007e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e36:	e038      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a71      	ldr	r2, [pc, #452]	; (8008004 <UART_SetConfig+0x908>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d130      	bne.n	8007ea4 <UART_SetConfig+0x7a8>
 8007e42:	4b6f      	ldr	r3, [pc, #444]	; (8008000 <UART_SetConfig+0x904>)
 8007e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e46:	f003 0307 	and.w	r3, r3, #7
 8007e4a:	2b05      	cmp	r3, #5
 8007e4c:	d826      	bhi.n	8007e9c <UART_SetConfig+0x7a0>
 8007e4e:	a201      	add	r2, pc, #4	; (adr r2, 8007e54 <UART_SetConfig+0x758>)
 8007e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e54:	08007e6d 	.word	0x08007e6d
 8007e58:	08007e75 	.word	0x08007e75
 8007e5c:	08007e7d 	.word	0x08007e7d
 8007e60:	08007e85 	.word	0x08007e85
 8007e64:	08007e8d 	.word	0x08007e8d
 8007e68:	08007e95 	.word	0x08007e95
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e72:	e01a      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007e74:	2304      	movs	r3, #4
 8007e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e7a:	e016      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007e7c:	2308      	movs	r3, #8
 8007e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e82:	e012      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007e84:	2310      	movs	r3, #16
 8007e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e8a:	e00e      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007e8c:	2320      	movs	r3, #32
 8007e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e92:	e00a      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007e94:	2340      	movs	r3, #64	; 0x40
 8007e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e9a:	e006      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007e9c:	2380      	movs	r3, #128	; 0x80
 8007e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ea2:	e002      	b.n	8007eaa <UART_SetConfig+0x7ae>
 8007ea4:	2380      	movs	r3, #128	; 0x80
 8007ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a55      	ldr	r2, [pc, #340]	; (8008004 <UART_SetConfig+0x908>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	f040 80f8 	bne.w	80080a6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007eb6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007eba:	2b20      	cmp	r3, #32
 8007ebc:	dc46      	bgt.n	8007f4c <UART_SetConfig+0x850>
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	db75      	blt.n	8007fae <UART_SetConfig+0x8b2>
 8007ec2:	3b02      	subs	r3, #2
 8007ec4:	2b1e      	cmp	r3, #30
 8007ec6:	d872      	bhi.n	8007fae <UART_SetConfig+0x8b2>
 8007ec8:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <UART_SetConfig+0x7d4>)
 8007eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ece:	bf00      	nop
 8007ed0:	08007f53 	.word	0x08007f53
 8007ed4:	08007faf 	.word	0x08007faf
 8007ed8:	08007f5b 	.word	0x08007f5b
 8007edc:	08007faf 	.word	0x08007faf
 8007ee0:	08007faf 	.word	0x08007faf
 8007ee4:	08007faf 	.word	0x08007faf
 8007ee8:	08007f6b 	.word	0x08007f6b
 8007eec:	08007faf 	.word	0x08007faf
 8007ef0:	08007faf 	.word	0x08007faf
 8007ef4:	08007faf 	.word	0x08007faf
 8007ef8:	08007faf 	.word	0x08007faf
 8007efc:	08007faf 	.word	0x08007faf
 8007f00:	08007faf 	.word	0x08007faf
 8007f04:	08007faf 	.word	0x08007faf
 8007f08:	08007f7b 	.word	0x08007f7b
 8007f0c:	08007faf 	.word	0x08007faf
 8007f10:	08007faf 	.word	0x08007faf
 8007f14:	08007faf 	.word	0x08007faf
 8007f18:	08007faf 	.word	0x08007faf
 8007f1c:	08007faf 	.word	0x08007faf
 8007f20:	08007faf 	.word	0x08007faf
 8007f24:	08007faf 	.word	0x08007faf
 8007f28:	08007faf 	.word	0x08007faf
 8007f2c:	08007faf 	.word	0x08007faf
 8007f30:	08007faf 	.word	0x08007faf
 8007f34:	08007faf 	.word	0x08007faf
 8007f38:	08007faf 	.word	0x08007faf
 8007f3c:	08007faf 	.word	0x08007faf
 8007f40:	08007faf 	.word	0x08007faf
 8007f44:	08007faf 	.word	0x08007faf
 8007f48:	08007fa1 	.word	0x08007fa1
 8007f4c:	2b40      	cmp	r3, #64	; 0x40
 8007f4e:	d02a      	beq.n	8007fa6 <UART_SetConfig+0x8aa>
 8007f50:	e02d      	b.n	8007fae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007f52:	f7fd f815 	bl	8004f80 <HAL_RCCEx_GetD3PCLK1Freq>
 8007f56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f58:	e02f      	b.n	8007fba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fd f824 	bl	8004fac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f68:	e027      	b.n	8007fba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f6a:	f107 0318 	add.w	r3, r7, #24
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fd f970 	bl	8005254 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f78:	e01f      	b.n	8007fba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f7a:	4b21      	ldr	r3, [pc, #132]	; (8008000 <UART_SetConfig+0x904>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0320 	and.w	r3, r3, #32
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d009      	beq.n	8007f9a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f86:	4b1e      	ldr	r3, [pc, #120]	; (8008000 <UART_SetConfig+0x904>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	08db      	lsrs	r3, r3, #3
 8007f8c:	f003 0303 	and.w	r3, r3, #3
 8007f90:	4a1d      	ldr	r2, [pc, #116]	; (8008008 <UART_SetConfig+0x90c>)
 8007f92:	fa22 f303 	lsr.w	r3, r2, r3
 8007f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f98:	e00f      	b.n	8007fba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007f9a:	4b1b      	ldr	r3, [pc, #108]	; (8008008 <UART_SetConfig+0x90c>)
 8007f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f9e:	e00c      	b.n	8007fba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007fa0:	4b1a      	ldr	r3, [pc, #104]	; (800800c <UART_SetConfig+0x910>)
 8007fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fa4:	e009      	b.n	8007fba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fac:	e005      	b.n	8007fba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007fb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f000 81ee 	beq.w	800839e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc6:	4a12      	ldr	r2, [pc, #72]	; (8008010 <UART_SetConfig+0x914>)
 8007fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fd4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	005b      	lsls	r3, r3, #1
 8007fde:	4413      	add	r3, r2
 8007fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d305      	bcc.n	8007ff2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d910      	bls.n	8008014 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007ff8:	e1d1      	b.n	800839e <UART_SetConfig+0xca2>
 8007ffa:	bf00      	nop
 8007ffc:	40011c00 	.word	0x40011c00
 8008000:	58024400 	.word	0x58024400
 8008004:	58000c00 	.word	0x58000c00
 8008008:	03d09000 	.word	0x03d09000
 800800c:	003d0900 	.word	0x003d0900
 8008010:	0800a4b4 	.word	0x0800a4b4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008016:	2200      	movs	r2, #0
 8008018:	60bb      	str	r3, [r7, #8]
 800801a:	60fa      	str	r2, [r7, #12]
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	4ac0      	ldr	r2, [pc, #768]	; (8008324 <UART_SetConfig+0xc28>)
 8008022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008026:	b29b      	uxth	r3, r3
 8008028:	2200      	movs	r2, #0
 800802a:	603b      	str	r3, [r7, #0]
 800802c:	607a      	str	r2, [r7, #4]
 800802e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008032:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008036:	f7f8 f9ab 	bl	8000390 <__aeabi_uldivmod>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4610      	mov	r0, r2
 8008040:	4619      	mov	r1, r3
 8008042:	f04f 0200 	mov.w	r2, #0
 8008046:	f04f 0300 	mov.w	r3, #0
 800804a:	020b      	lsls	r3, r1, #8
 800804c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008050:	0202      	lsls	r2, r0, #8
 8008052:	6979      	ldr	r1, [r7, #20]
 8008054:	6849      	ldr	r1, [r1, #4]
 8008056:	0849      	lsrs	r1, r1, #1
 8008058:	2000      	movs	r0, #0
 800805a:	460c      	mov	r4, r1
 800805c:	4605      	mov	r5, r0
 800805e:	eb12 0804 	adds.w	r8, r2, r4
 8008062:	eb43 0905 	adc.w	r9, r3, r5
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	469a      	mov	sl, r3
 800806e:	4693      	mov	fp, r2
 8008070:	4652      	mov	r2, sl
 8008072:	465b      	mov	r3, fp
 8008074:	4640      	mov	r0, r8
 8008076:	4649      	mov	r1, r9
 8008078:	f7f8 f98a 	bl	8000390 <__aeabi_uldivmod>
 800807c:	4602      	mov	r2, r0
 800807e:	460b      	mov	r3, r1
 8008080:	4613      	mov	r3, r2
 8008082:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800808a:	d308      	bcc.n	800809e <UART_SetConfig+0x9a2>
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008092:	d204      	bcs.n	800809e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800809a:	60da      	str	r2, [r3, #12]
 800809c:	e17f      	b.n	800839e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80080a4:	e17b      	b.n	800839e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080ae:	f040 80bd 	bne.w	800822c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80080b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80080b6:	2b20      	cmp	r3, #32
 80080b8:	dc48      	bgt.n	800814c <UART_SetConfig+0xa50>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	db7b      	blt.n	80081b6 <UART_SetConfig+0xaba>
 80080be:	2b20      	cmp	r3, #32
 80080c0:	d879      	bhi.n	80081b6 <UART_SetConfig+0xaba>
 80080c2:	a201      	add	r2, pc, #4	; (adr r2, 80080c8 <UART_SetConfig+0x9cc>)
 80080c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c8:	08008153 	.word	0x08008153
 80080cc:	0800815b 	.word	0x0800815b
 80080d0:	080081b7 	.word	0x080081b7
 80080d4:	080081b7 	.word	0x080081b7
 80080d8:	08008163 	.word	0x08008163
 80080dc:	080081b7 	.word	0x080081b7
 80080e0:	080081b7 	.word	0x080081b7
 80080e4:	080081b7 	.word	0x080081b7
 80080e8:	08008173 	.word	0x08008173
 80080ec:	080081b7 	.word	0x080081b7
 80080f0:	080081b7 	.word	0x080081b7
 80080f4:	080081b7 	.word	0x080081b7
 80080f8:	080081b7 	.word	0x080081b7
 80080fc:	080081b7 	.word	0x080081b7
 8008100:	080081b7 	.word	0x080081b7
 8008104:	080081b7 	.word	0x080081b7
 8008108:	08008183 	.word	0x08008183
 800810c:	080081b7 	.word	0x080081b7
 8008110:	080081b7 	.word	0x080081b7
 8008114:	080081b7 	.word	0x080081b7
 8008118:	080081b7 	.word	0x080081b7
 800811c:	080081b7 	.word	0x080081b7
 8008120:	080081b7 	.word	0x080081b7
 8008124:	080081b7 	.word	0x080081b7
 8008128:	080081b7 	.word	0x080081b7
 800812c:	080081b7 	.word	0x080081b7
 8008130:	080081b7 	.word	0x080081b7
 8008134:	080081b7 	.word	0x080081b7
 8008138:	080081b7 	.word	0x080081b7
 800813c:	080081b7 	.word	0x080081b7
 8008140:	080081b7 	.word	0x080081b7
 8008144:	080081b7 	.word	0x080081b7
 8008148:	080081a9 	.word	0x080081a9
 800814c:	2b40      	cmp	r3, #64	; 0x40
 800814e:	d02e      	beq.n	80081ae <UART_SetConfig+0xab2>
 8008150:	e031      	b.n	80081b6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008152:	f7fb fd2b 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 8008156:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008158:	e033      	b.n	80081c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800815a:	f7fb fd3d 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 800815e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008160:	e02f      	b.n	80081c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008166:	4618      	mov	r0, r3
 8008168:	f7fc ff20 	bl	8004fac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800816c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008170:	e027      	b.n	80081c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008172:	f107 0318 	add.w	r3, r7, #24
 8008176:	4618      	mov	r0, r3
 8008178:	f7fd f86c 	bl	8005254 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008180:	e01f      	b.n	80081c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008182:	4b69      	ldr	r3, [pc, #420]	; (8008328 <UART_SetConfig+0xc2c>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b00      	cmp	r3, #0
 800818c:	d009      	beq.n	80081a2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800818e:	4b66      	ldr	r3, [pc, #408]	; (8008328 <UART_SetConfig+0xc2c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	08db      	lsrs	r3, r3, #3
 8008194:	f003 0303 	and.w	r3, r3, #3
 8008198:	4a64      	ldr	r2, [pc, #400]	; (800832c <UART_SetConfig+0xc30>)
 800819a:	fa22 f303 	lsr.w	r3, r2, r3
 800819e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081a0:	e00f      	b.n	80081c2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80081a2:	4b62      	ldr	r3, [pc, #392]	; (800832c <UART_SetConfig+0xc30>)
 80081a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081a6:	e00c      	b.n	80081c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081a8:	4b61      	ldr	r3, [pc, #388]	; (8008330 <UART_SetConfig+0xc34>)
 80081aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ac:	e009      	b.n	80081c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081b4:	e005      	b.n	80081c2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80081b6:	2300      	movs	r3, #0
 80081b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80081c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 80ea 	beq.w	800839e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ce:	4a55      	ldr	r2, [pc, #340]	; (8008324 <UART_SetConfig+0xc28>)
 80081d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081d4:	461a      	mov	r2, r3
 80081d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80081dc:	005a      	lsls	r2, r3, #1
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	085b      	lsrs	r3, r3, #1
 80081e4:	441a      	add	r2, r3
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f2:	2b0f      	cmp	r3, #15
 80081f4:	d916      	bls.n	8008224 <UART_SetConfig+0xb28>
 80081f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081fc:	d212      	bcs.n	8008224 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008200:	b29b      	uxth	r3, r3
 8008202:	f023 030f 	bic.w	r3, r3, #15
 8008206:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820a:	085b      	lsrs	r3, r3, #1
 800820c:	b29b      	uxth	r3, r3
 800820e:	f003 0307 	and.w	r3, r3, #7
 8008212:	b29a      	uxth	r2, r3
 8008214:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008216:	4313      	orrs	r3, r2
 8008218:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008220:	60da      	str	r2, [r3, #12]
 8008222:	e0bc      	b.n	800839e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800822a:	e0b8      	b.n	800839e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800822c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008230:	2b20      	cmp	r3, #32
 8008232:	dc4b      	bgt.n	80082cc <UART_SetConfig+0xbd0>
 8008234:	2b00      	cmp	r3, #0
 8008236:	f2c0 8087 	blt.w	8008348 <UART_SetConfig+0xc4c>
 800823a:	2b20      	cmp	r3, #32
 800823c:	f200 8084 	bhi.w	8008348 <UART_SetConfig+0xc4c>
 8008240:	a201      	add	r2, pc, #4	; (adr r2, 8008248 <UART_SetConfig+0xb4c>)
 8008242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008246:	bf00      	nop
 8008248:	080082d3 	.word	0x080082d3
 800824c:	080082db 	.word	0x080082db
 8008250:	08008349 	.word	0x08008349
 8008254:	08008349 	.word	0x08008349
 8008258:	080082e3 	.word	0x080082e3
 800825c:	08008349 	.word	0x08008349
 8008260:	08008349 	.word	0x08008349
 8008264:	08008349 	.word	0x08008349
 8008268:	080082f3 	.word	0x080082f3
 800826c:	08008349 	.word	0x08008349
 8008270:	08008349 	.word	0x08008349
 8008274:	08008349 	.word	0x08008349
 8008278:	08008349 	.word	0x08008349
 800827c:	08008349 	.word	0x08008349
 8008280:	08008349 	.word	0x08008349
 8008284:	08008349 	.word	0x08008349
 8008288:	08008303 	.word	0x08008303
 800828c:	08008349 	.word	0x08008349
 8008290:	08008349 	.word	0x08008349
 8008294:	08008349 	.word	0x08008349
 8008298:	08008349 	.word	0x08008349
 800829c:	08008349 	.word	0x08008349
 80082a0:	08008349 	.word	0x08008349
 80082a4:	08008349 	.word	0x08008349
 80082a8:	08008349 	.word	0x08008349
 80082ac:	08008349 	.word	0x08008349
 80082b0:	08008349 	.word	0x08008349
 80082b4:	08008349 	.word	0x08008349
 80082b8:	08008349 	.word	0x08008349
 80082bc:	08008349 	.word	0x08008349
 80082c0:	08008349 	.word	0x08008349
 80082c4:	08008349 	.word	0x08008349
 80082c8:	0800833b 	.word	0x0800833b
 80082cc:	2b40      	cmp	r3, #64	; 0x40
 80082ce:	d037      	beq.n	8008340 <UART_SetConfig+0xc44>
 80082d0:	e03a      	b.n	8008348 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082d2:	f7fb fc6b 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 80082d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80082d8:	e03c      	b.n	8008354 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082da:	f7fb fc7d 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 80082de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80082e0:	e038      	b.n	8008354 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fc fe60 	bl	8004fac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082f0:	e030      	b.n	8008354 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082f2:	f107 0318 	add.w	r3, r7, #24
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fc ffac 	bl	8005254 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008300:	e028      	b.n	8008354 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008302:	4b09      	ldr	r3, [pc, #36]	; (8008328 <UART_SetConfig+0xc2c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0320 	and.w	r3, r3, #32
 800830a:	2b00      	cmp	r3, #0
 800830c:	d012      	beq.n	8008334 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800830e:	4b06      	ldr	r3, [pc, #24]	; (8008328 <UART_SetConfig+0xc2c>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	08db      	lsrs	r3, r3, #3
 8008314:	f003 0303 	and.w	r3, r3, #3
 8008318:	4a04      	ldr	r2, [pc, #16]	; (800832c <UART_SetConfig+0xc30>)
 800831a:	fa22 f303 	lsr.w	r3, r2, r3
 800831e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008320:	e018      	b.n	8008354 <UART_SetConfig+0xc58>
 8008322:	bf00      	nop
 8008324:	0800a4b4 	.word	0x0800a4b4
 8008328:	58024400 	.word	0x58024400
 800832c:	03d09000 	.word	0x03d09000
 8008330:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008334:	4b24      	ldr	r3, [pc, #144]	; (80083c8 <UART_SetConfig+0xccc>)
 8008336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008338:	e00c      	b.n	8008354 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800833a:	4b24      	ldr	r3, [pc, #144]	; (80083cc <UART_SetConfig+0xcd0>)
 800833c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800833e:	e009      	b.n	8008354 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008344:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008346:	e005      	b.n	8008354 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008348:	2300      	movs	r3, #0
 800834a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008352:	bf00      	nop
    }

    if (pclk != 0U)
 8008354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008356:	2b00      	cmp	r3, #0
 8008358:	d021      	beq.n	800839e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	4a1c      	ldr	r2, [pc, #112]	; (80083d0 <UART_SetConfig+0xcd4>)
 8008360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008364:	461a      	mov	r2, r3
 8008366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008368:	fbb3 f2f2 	udiv	r2, r3, r2
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	085b      	lsrs	r3, r3, #1
 8008372:	441a      	add	r2, r3
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	fbb2 f3f3 	udiv	r3, r2, r3
 800837c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800837e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008380:	2b0f      	cmp	r3, #15
 8008382:	d909      	bls.n	8008398 <UART_SetConfig+0xc9c>
 8008384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800838a:	d205      	bcs.n	8008398 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800838c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838e:	b29a      	uxth	r2, r3
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	60da      	str	r2, [r3, #12]
 8008396:	e002      	b.n	800839e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	2200      	movs	r2, #0
 80083b2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	2200      	movs	r2, #0
 80083b8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80083ba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3748      	adds	r7, #72	; 0x48
 80083c2:	46bd      	mov	sp, r7
 80083c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083c8:	03d09000 	.word	0x03d09000
 80083cc:	003d0900 	.word	0x003d0900
 80083d0:	0800a4b4 	.word	0x0800a4b4

080083d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00a      	beq.n	80083fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008402:	f003 0302 	and.w	r3, r3, #2
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00a      	beq.n	8008420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	430a      	orrs	r2, r1
 800841e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008424:	f003 0304 	and.w	r3, r3, #4
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00a      	beq.n	8008442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008446:	f003 0308 	and.w	r3, r3, #8
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00a      	beq.n	8008464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	430a      	orrs	r2, r1
 8008462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008468:	f003 0310 	and.w	r3, r3, #16
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00a      	beq.n	8008486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848a:	f003 0320 	and.w	r3, r3, #32
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00a      	beq.n	80084a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d01a      	beq.n	80084ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084d2:	d10a      	bne.n	80084ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	430a      	orrs	r2, r1
 80084e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00a      	beq.n	800850c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	430a      	orrs	r2, r1
 800850a:	605a      	str	r2, [r3, #4]
  }
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b098      	sub	sp, #96	; 0x60
 800851c:	af02      	add	r7, sp, #8
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008528:	f7f9 facc 	bl	8001ac4 <HAL_GetTick>
 800852c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0308 	and.w	r3, r3, #8
 8008538:	2b08      	cmp	r3, #8
 800853a:	d12f      	bne.n	800859c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800853c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008544:	2200      	movs	r2, #0
 8008546:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f88e 	bl	800866c <UART_WaitOnFlagUntilTimeout>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d022      	beq.n	800859c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855e:	e853 3f00 	ldrex	r3, [r3]
 8008562:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800856a:	653b      	str	r3, [r7, #80]	; 0x50
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	461a      	mov	r2, r3
 8008572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008574:	647b      	str	r3, [r7, #68]	; 0x44
 8008576:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008578:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800857a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800857c:	e841 2300 	strex	r3, r2, [r1]
 8008580:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e6      	bne.n	8008556 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2220      	movs	r2, #32
 800858c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e063      	b.n	8008664 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0304 	and.w	r3, r3, #4
 80085a6:	2b04      	cmp	r3, #4
 80085a8:	d149      	bne.n	800863e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085b2:	2200      	movs	r2, #0
 80085b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f857 	bl	800866c <UART_WaitOnFlagUntilTimeout>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d03c      	beq.n	800863e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085cc:	e853 3f00 	ldrex	r3, [r3]
 80085d0:	623b      	str	r3, [r7, #32]
   return(result);
 80085d2:	6a3b      	ldr	r3, [r7, #32]
 80085d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e2:	633b      	str	r3, [r7, #48]	; 0x30
 80085e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ea:	e841 2300 	strex	r3, r2, [r1]
 80085ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1e6      	bne.n	80085c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3308      	adds	r3, #8
 80085fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	e853 3f00 	ldrex	r3, [r3]
 8008604:	60fb      	str	r3, [r7, #12]
   return(result);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f023 0301 	bic.w	r3, r3, #1
 800860c:	64bb      	str	r3, [r7, #72]	; 0x48
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3308      	adds	r3, #8
 8008614:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008616:	61fa      	str	r2, [r7, #28]
 8008618:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861a:	69b9      	ldr	r1, [r7, #24]
 800861c:	69fa      	ldr	r2, [r7, #28]
 800861e:	e841 2300 	strex	r3, r2, [r1]
 8008622:	617b      	str	r3, [r7, #20]
   return(result);
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1e5      	bne.n	80085f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2220      	movs	r2, #32
 800862e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e012      	b.n	8008664 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2220      	movs	r2, #32
 8008642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2220      	movs	r2, #32
 800864a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3758      	adds	r7, #88	; 0x58
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	603b      	str	r3, [r7, #0]
 8008678:	4613      	mov	r3, r2
 800867a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800867c:	e049      	b.n	8008712 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008684:	d045      	beq.n	8008712 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008686:	f7f9 fa1d 	bl	8001ac4 <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	69ba      	ldr	r2, [r7, #24]
 8008692:	429a      	cmp	r2, r3
 8008694:	d302      	bcc.n	800869c <UART_WaitOnFlagUntilTimeout+0x30>
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d101      	bne.n	80086a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e048      	b.n	8008732 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0304 	and.w	r3, r3, #4
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d031      	beq.n	8008712 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	69db      	ldr	r3, [r3, #28]
 80086b4:	f003 0308 	and.w	r3, r3, #8
 80086b8:	2b08      	cmp	r3, #8
 80086ba:	d110      	bne.n	80086de <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2208      	movs	r2, #8
 80086c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 f95b 	bl	8008980 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2208      	movs	r2, #8
 80086ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e029      	b.n	8008732 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	69db      	ldr	r3, [r3, #28]
 80086e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086ec:	d111      	bne.n	8008712 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f000 f941 	bl	8008980 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2220      	movs	r2, #32
 8008702:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e00f      	b.n	8008732 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	69da      	ldr	r2, [r3, #28]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	4013      	ands	r3, r2
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	429a      	cmp	r2, r3
 8008720:	bf0c      	ite	eq
 8008722:	2301      	moveq	r3, #1
 8008724:	2300      	movne	r3, #0
 8008726:	b2db      	uxtb	r3, r3
 8008728:	461a      	mov	r2, r3
 800872a:	79fb      	ldrb	r3, [r7, #7]
 800872c:	429a      	cmp	r2, r3
 800872e:	d0a6      	beq.n	800867e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
	...

0800873c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800873c:	b480      	push	{r7}
 800873e:	b0a3      	sub	sp, #140	; 0x8c
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	4613      	mov	r3, r2
 8008748:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	88fa      	ldrh	r2, [r7, #6]
 8008754:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	88fa      	ldrh	r2, [r7, #6]
 800875c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800876e:	d10e      	bne.n	800878e <UART_Start_Receive_IT+0x52>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d105      	bne.n	8008784 <UART_Start_Receive_IT+0x48>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800877e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008782:	e02d      	b.n	80087e0 <UART_Start_Receive_IT+0xa4>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	22ff      	movs	r2, #255	; 0xff
 8008788:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800878c:	e028      	b.n	80087e0 <UART_Start_Receive_IT+0xa4>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10d      	bne.n	80087b2 <UART_Start_Receive_IT+0x76>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d104      	bne.n	80087a8 <UART_Start_Receive_IT+0x6c>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	22ff      	movs	r2, #255	; 0xff
 80087a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087a6:	e01b      	b.n	80087e0 <UART_Start_Receive_IT+0xa4>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	227f      	movs	r2, #127	; 0x7f
 80087ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087b0:	e016      	b.n	80087e0 <UART_Start_Receive_IT+0xa4>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087ba:	d10d      	bne.n	80087d8 <UART_Start_Receive_IT+0x9c>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d104      	bne.n	80087ce <UART_Start_Receive_IT+0x92>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	227f      	movs	r2, #127	; 0x7f
 80087c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087cc:	e008      	b.n	80087e0 <UART_Start_Receive_IT+0xa4>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	223f      	movs	r2, #63	; 0x3f
 80087d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087d6:	e003      	b.n	80087e0 <UART_Start_Receive_IT+0xa4>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2222      	movs	r2, #34	; 0x22
 80087ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3308      	adds	r3, #8
 80087f6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087fa:	e853 3f00 	ldrex	r3, [r3]
 80087fe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008802:	f043 0301 	orr.w	r3, r3, #1
 8008806:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3308      	adds	r3, #8
 8008810:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008814:	673a      	str	r2, [r7, #112]	; 0x70
 8008816:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008818:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800881a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800881c:	e841 2300 	strex	r3, r2, [r1]
 8008820:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008822:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1e3      	bne.n	80087f0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800882c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008830:	d14f      	bne.n	80088d2 <UART_Start_Receive_IT+0x196>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008838:	88fa      	ldrh	r2, [r7, #6]
 800883a:	429a      	cmp	r2, r3
 800883c:	d349      	bcc.n	80088d2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008846:	d107      	bne.n	8008858 <UART_Start_Receive_IT+0x11c>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d103      	bne.n	8008858 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4a47      	ldr	r2, [pc, #284]	; (8008970 <UART_Start_Receive_IT+0x234>)
 8008854:	675a      	str	r2, [r3, #116]	; 0x74
 8008856:	e002      	b.n	800885e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	4a46      	ldr	r2, [pc, #280]	; (8008974 <UART_Start_Receive_IT+0x238>)
 800885c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d01a      	beq.n	800889c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800886e:	e853 3f00 	ldrex	r3, [r3]
 8008872:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800887a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	461a      	mov	r2, r3
 8008884:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008888:	65fb      	str	r3, [r7, #92]	; 0x5c
 800888a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800888e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008890:	e841 2300 	strex	r3, r2, [r1]
 8008894:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1e4      	bne.n	8008866 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	3308      	adds	r3, #8
 80088a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a6:	e853 3f00 	ldrex	r3, [r3]
 80088aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3308      	adds	r3, #8
 80088ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80088bc:	64ba      	str	r2, [r7, #72]	; 0x48
 80088be:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088c4:	e841 2300 	strex	r3, r2, [r1]
 80088c8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80088ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1e5      	bne.n	800889c <UART_Start_Receive_IT+0x160>
 80088d0:	e046      	b.n	8008960 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088da:	d107      	bne.n	80088ec <UART_Start_Receive_IT+0x1b0>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d103      	bne.n	80088ec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4a24      	ldr	r2, [pc, #144]	; (8008978 <UART_Start_Receive_IT+0x23c>)
 80088e8:	675a      	str	r2, [r3, #116]	; 0x74
 80088ea:	e002      	b.n	80088f2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	4a23      	ldr	r2, [pc, #140]	; (800897c <UART_Start_Receive_IT+0x240>)
 80088f0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d019      	beq.n	800892e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008902:	e853 3f00 	ldrex	r3, [r3]
 8008906:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800890e:	677b      	str	r3, [r7, #116]	; 0x74
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	461a      	mov	r2, r3
 8008916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008918:	637b      	str	r3, [r7, #52]	; 0x34
 800891a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800891e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008920:	e841 2300 	strex	r3, r2, [r1]
 8008924:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1e6      	bne.n	80088fa <UART_Start_Receive_IT+0x1be>
 800892c:	e018      	b.n	8008960 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	e853 3f00 	ldrex	r3, [r3]
 800893a:	613b      	str	r3, [r7, #16]
   return(result);
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	f043 0320 	orr.w	r3, r3, #32
 8008942:	67bb      	str	r3, [r7, #120]	; 0x78
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	461a      	mov	r2, r3
 800894a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800894c:	623b      	str	r3, [r7, #32]
 800894e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008950:	69f9      	ldr	r1, [r7, #28]
 8008952:	6a3a      	ldr	r2, [r7, #32]
 8008954:	e841 2300 	strex	r3, r2, [r1]
 8008958:	61bb      	str	r3, [r7, #24]
   return(result);
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1e6      	bne.n	800892e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	378c      	adds	r7, #140	; 0x8c
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	080094e5 	.word	0x080094e5
 8008974:	08009185 	.word	0x08009185
 8008978:	08008fcd 	.word	0x08008fcd
 800897c:	08008e15 	.word	0x08008e15

08008980 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008980:	b480      	push	{r7}
 8008982:	b095      	sub	sp, #84	; 0x54
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008990:	e853 3f00 	ldrex	r3, [r3]
 8008994:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008998:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800899c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089a6:	643b      	str	r3, [r7, #64]	; 0x40
 80089a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089ae:	e841 2300 	strex	r3, r2, [r1]
 80089b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1e6      	bne.n	8008988 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3308      	adds	r3, #8
 80089c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80089ca:	69fa      	ldr	r2, [r7, #28]
 80089cc:	4b1e      	ldr	r3, [pc, #120]	; (8008a48 <UART_EndRxTransfer+0xc8>)
 80089ce:	4013      	ands	r3, r2
 80089d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	3308      	adds	r3, #8
 80089d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e5      	bne.n	80089ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d118      	bne.n	8008a28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	e853 3f00 	ldrex	r3, [r3]
 8008a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	f023 0310 	bic.w	r3, r3, #16
 8008a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	461a      	mov	r2, r3
 8008a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a14:	61bb      	str	r3, [r7, #24]
 8008a16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a18:	6979      	ldr	r1, [r7, #20]
 8008a1a:	69ba      	ldr	r2, [r7, #24]
 8008a1c:	e841 2300 	strex	r3, r2, [r1]
 8008a20:	613b      	str	r3, [r7, #16]
   return(result);
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1e6      	bne.n	80089f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008a3c:	bf00      	nop
 8008a3e:	3754      	adds	r7, #84	; 0x54
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	effffffe 	.word	0xeffffffe

08008a4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f7fe fe30 	bl	80076d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a70:	bf00      	nop
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b08f      	sub	sp, #60	; 0x3c
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a86:	2b21      	cmp	r3, #33	; 0x21
 8008a88:	d14c      	bne.n	8008b24 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d132      	bne.n	8008afc <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	e853 3f00 	ldrex	r3, [r3]
 8008aa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ab6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008abc:	e841 2300 	strex	r3, r2, [r1]
 8008ac0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1e6      	bne.n	8008a96 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	e853 3f00 	ldrex	r3, [r3]
 8008ad4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008adc:	633b      	str	r3, [r7, #48]	; 0x30
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae6:	61bb      	str	r3, [r7, #24]
 8008ae8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aea:	6979      	ldr	r1, [r7, #20]
 8008aec:	69ba      	ldr	r2, [r7, #24]
 8008aee:	e841 2300 	strex	r3, r2, [r1]
 8008af2:	613b      	str	r3, [r7, #16]
   return(result);
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1e6      	bne.n	8008ac8 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008afa:	e013      	b.n	8008b24 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b00:	781a      	ldrb	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b0c:	1c5a      	adds	r2, r3, #1
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008b24:	bf00      	nop
 8008b26:	373c      	adds	r7, #60	; 0x3c
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b091      	sub	sp, #68	; 0x44
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b3e:	2b21      	cmp	r3, #33	; 0x21
 8008b40:	d151      	bne.n	8008be6 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d132      	bne.n	8008bb4 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b56:	e853 3f00 	ldrex	r3, [r3]
 8008b5a:	623b      	str	r3, [r7, #32]
   return(result);
 8008b5c:	6a3b      	ldr	r3, [r7, #32]
 8008b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b62:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	461a      	mov	r2, r3
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8008b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b74:	e841 2300 	strex	r3, r2, [r1]
 8008b78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d1e6      	bne.n	8008b4e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	e853 3f00 	ldrex	r3, [r3]
 8008b8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b94:	637b      	str	r3, [r7, #52]	; 0x34
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9e:	61fb      	str	r3, [r7, #28]
 8008ba0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba2:	69b9      	ldr	r1, [r7, #24]
 8008ba4:	69fa      	ldr	r2, [r7, #28]
 8008ba6:	e841 2300 	strex	r3, r2, [r1]
 8008baa:	617b      	str	r3, [r7, #20]
   return(result);
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1e6      	bne.n	8008b80 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008bb2:	e018      	b.n	8008be6 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bc8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bce:	1c9a      	adds	r2, r3, #2
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008be6:	bf00      	nop
 8008be8:	3744      	adds	r7, #68	; 0x44
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b091      	sub	sp, #68	; 0x44
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c00:	2b21      	cmp	r3, #33	; 0x21
 8008c02:	d160      	bne.n	8008cc6 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c0a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008c0c:	e057      	b.n	8008cbe <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d133      	bne.n	8008c82 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	3308      	adds	r3, #8
 8008c20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c24:	e853 3f00 	ldrex	r3, [r3]
 8008c28:	623b      	str	r3, [r7, #32]
   return(result);
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008c30:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	3308      	adds	r3, #8
 8008c38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c3a:	633a      	str	r2, [r7, #48]	; 0x30
 8008c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c42:	e841 2300 	strex	r3, r2, [r1]
 8008c46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1e5      	bne.n	8008c1a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	e853 3f00 	ldrex	r3, [r3]
 8008c5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c62:	637b      	str	r3, [r7, #52]	; 0x34
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6c:	61fb      	str	r3, [r7, #28]
 8008c6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c70:	69b9      	ldr	r1, [r7, #24]
 8008c72:	69fa      	ldr	r2, [r7, #28]
 8008c74:	e841 2300 	strex	r3, r2, [r1]
 8008c78:	617b      	str	r3, [r7, #20]
   return(result);
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1e6      	bne.n	8008c4e <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008c80:	e021      	b.n	8008cc6 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d013      	beq.n	8008cb8 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c94:	781a      	ldrb	r2, [r3, #0]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca0:	1c5a      	adds	r2, r3, #1
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008cb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008cbe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1a4      	bne.n	8008c0e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008cc4:	e7ff      	b.n	8008cc6 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008cc6:	bf00      	nop
 8008cc8:	3744      	adds	r7, #68	; 0x44
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b091      	sub	sp, #68	; 0x44
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ce0:	2b21      	cmp	r3, #33	; 0x21
 8008ce2:	d165      	bne.n	8008db0 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008cea:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008cec:	e05c      	b.n	8008da8 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d133      	bne.n	8008d62 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	3308      	adds	r3, #8
 8008d00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	e853 3f00 	ldrex	r3, [r3]
 8008d08:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008d10:	637b      	str	r3, [r7, #52]	; 0x34
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3308      	adds	r3, #8
 8008d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d22:	e841 2300 	strex	r3, r2, [r1]
 8008d26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1e5      	bne.n	8008cfa <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	e853 3f00 	ldrex	r3, [r3]
 8008d3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d42:	633b      	str	r3, [r7, #48]	; 0x30
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	461a      	mov	r2, r3
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4c:	61bb      	str	r3, [r7, #24]
 8008d4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d50:	6979      	ldr	r1, [r7, #20]
 8008d52:	69ba      	ldr	r2, [r7, #24]
 8008d54:	e841 2300 	strex	r3, r2, [r1]
 8008d58:	613b      	str	r3, [r7, #16]
   return(result);
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1e6      	bne.n	8008d2e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008d60:	e026      	b.n	8008db0 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d018      	beq.n	8008da2 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d74:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d84:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d8a:	1c9a      	adds	r2, r3, #2
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008da2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008da4:	3b01      	subs	r3, #1
 8008da6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008da8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d19f      	bne.n	8008cee <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008dae:	e7ff      	b.n	8008db0 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008db0:	bf00      	nop
 8008db2:	3744      	adds	r7, #68	; 0x44
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b088      	sub	sp, #32
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	e853 3f00 	ldrex	r3, [r3]
 8008dd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dd8:	61fb      	str	r3, [r7, #28]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	461a      	mov	r2, r3
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	61bb      	str	r3, [r7, #24]
 8008de4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de6:	6979      	ldr	r1, [r7, #20]
 8008de8:	69ba      	ldr	r2, [r7, #24]
 8008dea:	e841 2300 	strex	r3, r2, [r1]
 8008dee:	613b      	str	r3, [r7, #16]
   return(result);
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1e6      	bne.n	8008dc4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2220      	movs	r2, #32
 8008dfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f7fe fc59 	bl	80076bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e0a:	bf00      	nop
 8008e0c:	3720      	adds	r7, #32
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
	...

08008e14 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b09c      	sub	sp, #112	; 0x70
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e22:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e2c:	2b22      	cmp	r3, #34	; 0x22
 8008e2e:	f040 80be 	bne.w	8008fae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008e40:	b2d9      	uxtb	r1, r3
 8008e42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e4c:	400a      	ands	r2, r1
 8008e4e:	b2d2      	uxtb	r2, r2
 8008e50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e56:	1c5a      	adds	r2, r3, #1
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	3b01      	subs	r3, #1
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f040 80a1 	bne.w	8008fbe <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e84:	e853 3f00 	ldrex	r3, [r3]
 8008e88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e90:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	461a      	mov	r2, r3
 8008e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e9c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ea0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ea2:	e841 2300 	strex	r3, r2, [r1]
 8008ea6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1e6      	bne.n	8008e7c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3308      	adds	r3, #8
 8008eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb8:	e853 3f00 	ldrex	r3, [r3]
 8008ebc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec0:	f023 0301 	bic.w	r3, r3, #1
 8008ec4:	667b      	str	r3, [r7, #100]	; 0x64
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3308      	adds	r3, #8
 8008ecc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ece:	647a      	str	r2, [r7, #68]	; 0x44
 8008ed0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ed4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ed6:	e841 2300 	strex	r3, r2, [r1]
 8008eda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1e5      	bne.n	8008eae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2220      	movs	r2, #32
 8008ee6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a33      	ldr	r2, [pc, #204]	; (8008fc8 <UART_RxISR_8BIT+0x1b4>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d01f      	beq.n	8008f40 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d018      	beq.n	8008f40 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f16:	e853 3f00 	ldrex	r3, [r3]
 8008f1a:	623b      	str	r3, [r7, #32]
   return(result);
 8008f1c:	6a3b      	ldr	r3, [r7, #32]
 8008f1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f22:	663b      	str	r3, [r7, #96]	; 0x60
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	461a      	mov	r2, r3
 8008f2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8008f2e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f34:	e841 2300 	strex	r3, r2, [r1]
 8008f38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1e6      	bne.n	8008f0e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d12e      	bne.n	8008fa6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	e853 3f00 	ldrex	r3, [r3]
 8008f5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f023 0310 	bic.w	r3, r3, #16
 8008f62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	461a      	mov	r2, r3
 8008f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f6c:	61fb      	str	r3, [r7, #28]
 8008f6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f70:	69b9      	ldr	r1, [r7, #24]
 8008f72:	69fa      	ldr	r2, [r7, #28]
 8008f74:	e841 2300 	strex	r3, r2, [r1]
 8008f78:	617b      	str	r3, [r7, #20]
   return(result);
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d1e6      	bne.n	8008f4e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	f003 0310 	and.w	r3, r3, #16
 8008f8a:	2b10      	cmp	r3, #16
 8008f8c:	d103      	bne.n	8008f96 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2210      	movs	r2, #16
 8008f94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7fe fba0 	bl	80076e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fa4:	e00b      	b.n	8008fbe <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7f8 fcbe 	bl	8001928 <HAL_UART_RxCpltCallback>
}
 8008fac:	e007      	b.n	8008fbe <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	699a      	ldr	r2, [r3, #24]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f042 0208 	orr.w	r2, r2, #8
 8008fbc:	619a      	str	r2, [r3, #24]
}
 8008fbe:	bf00      	nop
 8008fc0:	3770      	adds	r7, #112	; 0x70
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	58000c00 	.word	0x58000c00

08008fcc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b09c      	sub	sp, #112	; 0x70
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008fda:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fe4:	2b22      	cmp	r3, #34	; 0x22
 8008fe6:	f040 80be 	bne.w	8009166 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008ffa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008ffe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009002:	4013      	ands	r3, r2
 8009004:	b29a      	uxth	r2, r3
 8009006:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009008:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800900e:	1c9a      	adds	r2, r3, #2
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800901a:	b29b      	uxth	r3, r3
 800901c:	3b01      	subs	r3, #1
 800901e:	b29a      	uxth	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800902c:	b29b      	uxth	r3, r3
 800902e:	2b00      	cmp	r3, #0
 8009030:	f040 80a1 	bne.w	8009176 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800903c:	e853 3f00 	ldrex	r3, [r3]
 8009040:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009044:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009048:	667b      	str	r3, [r7, #100]	; 0x64
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	461a      	mov	r2, r3
 8009050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009052:	657b      	str	r3, [r7, #84]	; 0x54
 8009054:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009056:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009058:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800905a:	e841 2300 	strex	r3, r2, [r1]
 800905e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1e6      	bne.n	8009034 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3308      	adds	r3, #8
 800906c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009078:	f023 0301 	bic.w	r3, r3, #1
 800907c:	663b      	str	r3, [r7, #96]	; 0x60
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3308      	adds	r3, #8
 8009084:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009086:	643a      	str	r2, [r7, #64]	; 0x40
 8009088:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800908c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e5      	bne.n	8009066 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2220      	movs	r2, #32
 800909e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a33      	ldr	r2, [pc, #204]	; (8009180 <UART_RxISR_16BIT+0x1b4>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d01f      	beq.n	80090f8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d018      	beq.n	80090f8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	6a3b      	ldr	r3, [r7, #32]
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80090da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	461a      	mov	r2, r3
 80090e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090e6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090ec:	e841 2300 	strex	r3, r2, [r1]
 80090f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1e6      	bne.n	80090c6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d12e      	bne.n	800915e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	e853 3f00 	ldrex	r3, [r3]
 8009112:	60bb      	str	r3, [r7, #8]
   return(result);
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	f023 0310 	bic.w	r3, r3, #16
 800911a:	65bb      	str	r3, [r7, #88]	; 0x58
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	461a      	mov	r2, r3
 8009122:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009124:	61bb      	str	r3, [r7, #24]
 8009126:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009128:	6979      	ldr	r1, [r7, #20]
 800912a:	69ba      	ldr	r2, [r7, #24]
 800912c:	e841 2300 	strex	r3, r2, [r1]
 8009130:	613b      	str	r3, [r7, #16]
   return(result);
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d1e6      	bne.n	8009106 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	f003 0310 	and.w	r3, r3, #16
 8009142:	2b10      	cmp	r3, #16
 8009144:	d103      	bne.n	800914e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2210      	movs	r2, #16
 800914c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009154:	4619      	mov	r1, r3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f7fe fac4 	bl	80076e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800915c:	e00b      	b.n	8009176 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7f8 fbe2 	bl	8001928 <HAL_UART_RxCpltCallback>
}
 8009164:	e007      	b.n	8009176 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	699a      	ldr	r2, [r3, #24]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f042 0208 	orr.w	r2, r2, #8
 8009174:	619a      	str	r2, [r3, #24]
}
 8009176:	bf00      	nop
 8009178:	3770      	adds	r7, #112	; 0x70
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	58000c00 	.word	0x58000c00

08009184 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b0ac      	sub	sp, #176	; 0xb0
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009192:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	69db      	ldr	r3, [r3, #28]
 800919c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091ba:	2b22      	cmp	r3, #34	; 0x22
 80091bc:	f040 8180 	bne.w	80094c0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091c6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091ca:	e123      	b.n	8009414 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80091d6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80091da:	b2d9      	uxtb	r1, r3
 80091dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80091e0:	b2da      	uxtb	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091e6:	400a      	ands	r2, r1
 80091e8:	b2d2      	uxtb	r2, r2
 80091ea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091f0:	1c5a      	adds	r2, r3, #1
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	3b01      	subs	r3, #1
 8009200:	b29a      	uxth	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	69db      	ldr	r3, [r3, #28]
 800920e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009216:	f003 0307 	and.w	r3, r3, #7
 800921a:	2b00      	cmp	r3, #0
 800921c:	d053      	beq.n	80092c6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800921e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b00      	cmp	r3, #0
 8009228:	d011      	beq.n	800924e <UART_RxISR_8BIT_FIFOEN+0xca>
 800922a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800922e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00b      	beq.n	800924e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2201      	movs	r2, #1
 800923c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009244:	f043 0201 	orr.w	r2, r3, #1
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800924e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009252:	f003 0302 	and.w	r3, r3, #2
 8009256:	2b00      	cmp	r3, #0
 8009258:	d011      	beq.n	800927e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800925a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00b      	beq.n	800927e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2202      	movs	r2, #2
 800926c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009274:	f043 0204 	orr.w	r2, r3, #4
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800927e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009282:	f003 0304 	and.w	r3, r3, #4
 8009286:	2b00      	cmp	r3, #0
 8009288:	d011      	beq.n	80092ae <UART_RxISR_8BIT_FIFOEN+0x12a>
 800928a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00b      	beq.n	80092ae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2204      	movs	r2, #4
 800929c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092a4:	f043 0202 	orr.w	r2, r3, #2
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d006      	beq.n	80092c6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f7fe fa09 	bl	80076d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f040 80a0 	bne.w	8009414 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092dc:	e853 3f00 	ldrex	r3, [r3]
 80092e0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80092e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	461a      	mov	r2, r3
 80092f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80092f8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80092fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80092fe:	e841 2300 	strex	r3, r2, [r1]
 8009302:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1e4      	bne.n	80092d4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	3308      	adds	r3, #8
 8009310:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009314:	e853 3f00 	ldrex	r3, [r3]
 8009318:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800931a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800931c:	4b6e      	ldr	r3, [pc, #440]	; (80094d8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800931e:	4013      	ands	r3, r2
 8009320:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	3308      	adds	r3, #8
 800932a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800932e:	66ba      	str	r2, [r7, #104]	; 0x68
 8009330:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009332:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009334:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009336:	e841 2300 	strex	r3, r2, [r1]
 800933a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800933c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e3      	bne.n	800930a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2220      	movs	r2, #32
 8009346:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a60      	ldr	r2, [pc, #384]	; (80094dc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d021      	beq.n	80093a4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800936a:	2b00      	cmp	r3, #0
 800936c:	d01a      	beq.n	80093a4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009376:	e853 3f00 	ldrex	r3, [r3]
 800937a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800937c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800937e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009382:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	461a      	mov	r2, r3
 800938c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009390:	657b      	str	r3, [r7, #84]	; 0x54
 8009392:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009394:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009396:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009398:	e841 2300 	strex	r3, r2, [r1]
 800939c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800939e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e4      	bne.n	800936e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d130      	bne.n	800940e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ba:	e853 3f00 	ldrex	r3, [r3]
 80093be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80093c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c2:	f023 0310 	bic.w	r3, r3, #16
 80093c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	461a      	mov	r2, r3
 80093d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093d4:	643b      	str	r3, [r7, #64]	; 0x40
 80093d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093dc:	e841 2300 	strex	r3, r2, [r1]
 80093e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1e4      	bne.n	80093b2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	69db      	ldr	r3, [r3, #28]
 80093ee:	f003 0310 	and.w	r3, r3, #16
 80093f2:	2b10      	cmp	r3, #16
 80093f4:	d103      	bne.n	80093fe <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2210      	movs	r2, #16
 80093fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009404:	4619      	mov	r1, r3
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f7fe f96c 	bl	80076e4 <HAL_UARTEx_RxEventCallback>
 800940c:	e002      	b.n	8009414 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f7f8 fa8a 	bl	8001928 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009414:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009418:	2b00      	cmp	r3, #0
 800941a:	d006      	beq.n	800942a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800941c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009420:	f003 0320 	and.w	r3, r3, #32
 8009424:	2b00      	cmp	r3, #0
 8009426:	f47f aed1 	bne.w	80091cc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009430:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009434:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009438:	2b00      	cmp	r3, #0
 800943a:	d049      	beq.n	80094d0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009442:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009446:	429a      	cmp	r2, r3
 8009448:	d242      	bcs.n	80094d0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	3308      	adds	r3, #8
 8009450:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009452:	6a3b      	ldr	r3, [r7, #32]
 8009454:	e853 3f00 	ldrex	r3, [r3]
 8009458:	61fb      	str	r3, [r7, #28]
   return(result);
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	3308      	adds	r3, #8
 800946a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800946e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009470:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009472:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009476:	e841 2300 	strex	r3, r2, [r1]
 800947a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800947c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1e3      	bne.n	800944a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a16      	ldr	r2, [pc, #88]	; (80094e0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009486:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	60bb      	str	r3, [r7, #8]
   return(result);
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	f043 0320 	orr.w	r3, r3, #32
 800949c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	461a      	mov	r2, r3
 80094a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80094aa:	61bb      	str	r3, [r7, #24]
 80094ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ae:	6979      	ldr	r1, [r7, #20]
 80094b0:	69ba      	ldr	r2, [r7, #24]
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	613b      	str	r3, [r7, #16]
   return(result);
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1e4      	bne.n	8009488 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094be:	e007      	b.n	80094d0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	699a      	ldr	r2, [r3, #24]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f042 0208 	orr.w	r2, r2, #8
 80094ce:	619a      	str	r2, [r3, #24]
}
 80094d0:	bf00      	nop
 80094d2:	37b0      	adds	r7, #176	; 0xb0
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	effffffe 	.word	0xeffffffe
 80094dc:	58000c00 	.word	0x58000c00
 80094e0:	08008e15 	.word	0x08008e15

080094e4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b0ae      	sub	sp, #184	; 0xb8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80094f2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	69db      	ldr	r3, [r3, #28]
 80094fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800951a:	2b22      	cmp	r3, #34	; 0x22
 800951c:	f040 8184 	bne.w	8009828 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009526:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800952a:	e127      	b.n	800977c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009532:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800953a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800953e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009542:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009546:	4013      	ands	r3, r2
 8009548:	b29a      	uxth	r2, r3
 800954a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800954e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009554:	1c9a      	adds	r2, r3, #2
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009560:	b29b      	uxth	r3, r3
 8009562:	3b01      	subs	r3, #1
 8009564:	b29a      	uxth	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	69db      	ldr	r3, [r3, #28]
 8009572:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009576:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800957a:	f003 0307 	and.w	r3, r3, #7
 800957e:	2b00      	cmp	r3, #0
 8009580:	d053      	beq.n	800962a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009582:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009586:	f003 0301 	and.w	r3, r3, #1
 800958a:	2b00      	cmp	r3, #0
 800958c:	d011      	beq.n	80095b2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800958e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00b      	beq.n	80095b2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2201      	movs	r2, #1
 80095a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095a8:	f043 0201 	orr.w	r2, r3, #1
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80095b6:	f003 0302 	and.w	r3, r3, #2
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d011      	beq.n	80095e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80095be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00b      	beq.n	80095e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2202      	movs	r2, #2
 80095d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095d8:	f043 0204 	orr.w	r2, r3, #4
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80095e6:	f003 0304 	and.w	r3, r3, #4
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d011      	beq.n	8009612 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80095ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00b      	beq.n	8009612 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2204      	movs	r2, #4
 8009600:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009608:	f043 0202 	orr.w	r2, r3, #2
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009618:	2b00      	cmp	r3, #0
 800961a:	d006      	beq.n	800962a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f7fe f857 	bl	80076d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009630:	b29b      	uxth	r3, r3
 8009632:	2b00      	cmp	r3, #0
 8009634:	f040 80a2 	bne.w	800977c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009640:	e853 3f00 	ldrex	r3, [r3]
 8009644:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800964c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	461a      	mov	r2, r3
 8009656:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800965a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800965e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009660:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009662:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009666:	e841 2300 	strex	r3, r2, [r1]
 800966a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800966c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1e2      	bne.n	8009638 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3308      	adds	r3, #8
 8009678:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800967c:	e853 3f00 	ldrex	r3, [r3]
 8009680:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009682:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009684:	4b6e      	ldr	r3, [pc, #440]	; (8009840 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8009686:	4013      	ands	r3, r2
 8009688:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3308      	adds	r3, #8
 8009692:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009696:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009698:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800969c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800969e:	e841 2300 	strex	r3, r2, [r1]
 80096a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80096a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1e3      	bne.n	8009672 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2220      	movs	r2, #32
 80096ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a60      	ldr	r2, [pc, #384]	; (8009844 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d021      	beq.n	800970c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d01a      	beq.n	800970c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096de:	e853 3f00 	ldrex	r3, [r3]
 80096e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80096e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80096ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80096f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80096fa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80096fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009700:	e841 2300 	strex	r3, r2, [r1]
 8009704:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1e4      	bne.n	80096d6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009710:	2b01      	cmp	r3, #1
 8009712:	d130      	bne.n	8009776 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009722:	e853 3f00 	ldrex	r3, [r3]
 8009726:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800972a:	f023 0310 	bic.w	r3, r3, #16
 800972e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800973c:	647b      	str	r3, [r7, #68]	; 0x44
 800973e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009740:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009744:	e841 2300 	strex	r3, r2, [r1]
 8009748:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800974a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1e4      	bne.n	800971a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	69db      	ldr	r3, [r3, #28]
 8009756:	f003 0310 	and.w	r3, r3, #16
 800975a:	2b10      	cmp	r3, #16
 800975c:	d103      	bne.n	8009766 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2210      	movs	r2, #16
 8009764:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7fd ffb8 	bl	80076e4 <HAL_UARTEx_RxEventCallback>
 8009774:	e002      	b.n	800977c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f7f8 f8d6 	bl	8001928 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800977c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009780:	2b00      	cmp	r3, #0
 8009782:	d006      	beq.n	8009792 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8009784:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009788:	f003 0320 	and.w	r3, r3, #32
 800978c:	2b00      	cmp	r3, #0
 800978e:	f47f aecd 	bne.w	800952c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009798:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800979c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d049      	beq.n	8009838 <UART_RxISR_16BIT_FIFOEN+0x354>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80097aa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d242      	bcs.n	8009838 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	3308      	adds	r3, #8
 80097b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097bc:	e853 3f00 	ldrex	r3, [r3]
 80097c0:	623b      	str	r3, [r7, #32]
   return(result);
 80097c2:	6a3b      	ldr	r3, [r7, #32]
 80097c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	3308      	adds	r3, #8
 80097d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80097d6:	633a      	str	r2, [r7, #48]	; 0x30
 80097d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097de:	e841 2300 	strex	r3, r2, [r1]
 80097e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1e3      	bne.n	80097b2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a16      	ldr	r2, [pc, #88]	; (8009848 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80097ee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	e853 3f00 	ldrex	r3, [r3]
 80097fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f043 0320 	orr.w	r3, r3, #32
 8009804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	461a      	mov	r2, r3
 800980e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009812:	61fb      	str	r3, [r7, #28]
 8009814:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009816:	69b9      	ldr	r1, [r7, #24]
 8009818:	69fa      	ldr	r2, [r7, #28]
 800981a:	e841 2300 	strex	r3, r2, [r1]
 800981e:	617b      	str	r3, [r7, #20]
   return(result);
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1e4      	bne.n	80097f0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009826:	e007      	b.n	8009838 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	699a      	ldr	r2, [r3, #24]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f042 0208 	orr.w	r2, r2, #8
 8009836:	619a      	str	r2, [r3, #24]
}
 8009838:	bf00      	nop
 800983a:	37b8      	adds	r7, #184	; 0xb8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	effffffe 	.word	0xeffffffe
 8009844:	58000c00 	.word	0x58000c00
 8009848:	08008fcd 	.word	0x08008fcd

0800984c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009868:	bf00      	nop
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800987c:	bf00      	nop
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009896:	2b01      	cmp	r3, #1
 8009898:	d101      	bne.n	800989e <HAL_UARTEx_DisableFifoMode+0x16>
 800989a:	2302      	movs	r3, #2
 800989c:	e027      	b.n	80098ee <HAL_UARTEx_DisableFifoMode+0x66>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2224      	movs	r2, #36	; 0x24
 80098aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f022 0201 	bic.w	r2, r2, #1
 80098c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80098cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2220      	movs	r2, #32
 80098e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3714      	adds	r7, #20
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr

080098fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800990a:	2b01      	cmp	r3, #1
 800990c:	d101      	bne.n	8009912 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800990e:	2302      	movs	r3, #2
 8009910:	e02d      	b.n	800996e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2201      	movs	r2, #1
 8009916:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2224      	movs	r2, #36	; 0x24
 800991e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f022 0201 	bic.w	r2, r2, #1
 8009938:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	430a      	orrs	r2, r1
 800994c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f850 	bl	80099f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2220      	movs	r2, #32
 8009960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b084      	sub	sp, #16
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009986:	2b01      	cmp	r3, #1
 8009988:	d101      	bne.n	800998e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800998a:	2302      	movs	r3, #2
 800998c:	e02d      	b.n	80099ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2224      	movs	r2, #36	; 0x24
 800999a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f022 0201 	bic.w	r2, r2, #1
 80099b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	683a      	ldr	r2, [r7, #0]
 80099c6:	430a      	orrs	r2, r1
 80099c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 f812 	bl	80099f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2220      	movs	r2, #32
 80099dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
	...

080099f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d108      	bne.n	8009a16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a14:	e031      	b.n	8009a7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a16:	2310      	movs	r3, #16
 8009a18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a1a:	2310      	movs	r3, #16
 8009a1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	0e5b      	lsrs	r3, r3, #25
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	f003 0307 	and.w	r3, r3, #7
 8009a2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	0f5b      	lsrs	r3, r3, #29
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	f003 0307 	and.w	r3, r3, #7
 8009a3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a3e:	7bbb      	ldrb	r3, [r7, #14]
 8009a40:	7b3a      	ldrb	r2, [r7, #12]
 8009a42:	4911      	ldr	r1, [pc, #68]	; (8009a88 <UARTEx_SetNbDataToProcess+0x94>)
 8009a44:	5c8a      	ldrb	r2, [r1, r2]
 8009a46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a4a:	7b3a      	ldrb	r2, [r7, #12]
 8009a4c:	490f      	ldr	r1, [pc, #60]	; (8009a8c <UARTEx_SetNbDataToProcess+0x98>)
 8009a4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a50:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
 8009a5e:	7b7a      	ldrb	r2, [r7, #13]
 8009a60:	4909      	ldr	r1, [pc, #36]	; (8009a88 <UARTEx_SetNbDataToProcess+0x94>)
 8009a62:	5c8a      	ldrb	r2, [r1, r2]
 8009a64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a68:	7b7a      	ldrb	r2, [r7, #13]
 8009a6a:	4908      	ldr	r1, [pc, #32]	; (8009a8c <UARTEx_SetNbDataToProcess+0x98>)
 8009a6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009a7a:	bf00      	nop
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	0800a4cc 	.word	0x0800a4cc
 8009a8c:	0800a4d4 	.word	0x0800a4d4

08009a90 <__errno>:
 8009a90:	4b01      	ldr	r3, [pc, #4]	; (8009a98 <__errno+0x8>)
 8009a92:	6818      	ldr	r0, [r3, #0]
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	24000020 	.word	0x24000020

08009a9c <__libc_init_array>:
 8009a9c:	b570      	push	{r4, r5, r6, lr}
 8009a9e:	4d0d      	ldr	r5, [pc, #52]	; (8009ad4 <__libc_init_array+0x38>)
 8009aa0:	4c0d      	ldr	r4, [pc, #52]	; (8009ad8 <__libc_init_array+0x3c>)
 8009aa2:	1b64      	subs	r4, r4, r5
 8009aa4:	10a4      	asrs	r4, r4, #2
 8009aa6:	2600      	movs	r6, #0
 8009aa8:	42a6      	cmp	r6, r4
 8009aaa:	d109      	bne.n	8009ac0 <__libc_init_array+0x24>
 8009aac:	4d0b      	ldr	r5, [pc, #44]	; (8009adc <__libc_init_array+0x40>)
 8009aae:	4c0c      	ldr	r4, [pc, #48]	; (8009ae0 <__libc_init_array+0x44>)
 8009ab0:	f000 fca2 	bl	800a3f8 <_init>
 8009ab4:	1b64      	subs	r4, r4, r5
 8009ab6:	10a4      	asrs	r4, r4, #2
 8009ab8:	2600      	movs	r6, #0
 8009aba:	42a6      	cmp	r6, r4
 8009abc:	d105      	bne.n	8009aca <__libc_init_array+0x2e>
 8009abe:	bd70      	pop	{r4, r5, r6, pc}
 8009ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ac4:	4798      	blx	r3
 8009ac6:	3601      	adds	r6, #1
 8009ac8:	e7ee      	b.n	8009aa8 <__libc_init_array+0xc>
 8009aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ace:	4798      	blx	r3
 8009ad0:	3601      	adds	r6, #1
 8009ad2:	e7f2      	b.n	8009aba <__libc_init_array+0x1e>
 8009ad4:	0800a518 	.word	0x0800a518
 8009ad8:	0800a518 	.word	0x0800a518
 8009adc:	0800a518 	.word	0x0800a518
 8009ae0:	0800a51c 	.word	0x0800a51c

08009ae4 <memset>:
 8009ae4:	4402      	add	r2, r0
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d100      	bne.n	8009aee <memset+0xa>
 8009aec:	4770      	bx	lr
 8009aee:	f803 1b01 	strb.w	r1, [r3], #1
 8009af2:	e7f9      	b.n	8009ae8 <memset+0x4>

08009af4 <sniprintf>:
 8009af4:	b40c      	push	{r2, r3}
 8009af6:	b530      	push	{r4, r5, lr}
 8009af8:	4b17      	ldr	r3, [pc, #92]	; (8009b58 <sniprintf+0x64>)
 8009afa:	1e0c      	subs	r4, r1, #0
 8009afc:	681d      	ldr	r5, [r3, #0]
 8009afe:	b09d      	sub	sp, #116	; 0x74
 8009b00:	da08      	bge.n	8009b14 <sniprintf+0x20>
 8009b02:	238b      	movs	r3, #139	; 0x8b
 8009b04:	602b      	str	r3, [r5, #0]
 8009b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b0a:	b01d      	add	sp, #116	; 0x74
 8009b0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b10:	b002      	add	sp, #8
 8009b12:	4770      	bx	lr
 8009b14:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009b18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009b1c:	bf14      	ite	ne
 8009b1e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009b22:	4623      	moveq	r3, r4
 8009b24:	9304      	str	r3, [sp, #16]
 8009b26:	9307      	str	r3, [sp, #28]
 8009b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b2c:	9002      	str	r0, [sp, #8]
 8009b2e:	9006      	str	r0, [sp, #24]
 8009b30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009b34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009b36:	ab21      	add	r3, sp, #132	; 0x84
 8009b38:	a902      	add	r1, sp, #8
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	9301      	str	r3, [sp, #4]
 8009b3e:	f000 f869 	bl	8009c14 <_svfiprintf_r>
 8009b42:	1c43      	adds	r3, r0, #1
 8009b44:	bfbc      	itt	lt
 8009b46:	238b      	movlt	r3, #139	; 0x8b
 8009b48:	602b      	strlt	r3, [r5, #0]
 8009b4a:	2c00      	cmp	r4, #0
 8009b4c:	d0dd      	beq.n	8009b0a <sniprintf+0x16>
 8009b4e:	9b02      	ldr	r3, [sp, #8]
 8009b50:	2200      	movs	r2, #0
 8009b52:	701a      	strb	r2, [r3, #0]
 8009b54:	e7d9      	b.n	8009b0a <sniprintf+0x16>
 8009b56:	bf00      	nop
 8009b58:	24000020 	.word	0x24000020

08009b5c <__ssputs_r>:
 8009b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b60:	688e      	ldr	r6, [r1, #8]
 8009b62:	429e      	cmp	r6, r3
 8009b64:	4682      	mov	sl, r0
 8009b66:	460c      	mov	r4, r1
 8009b68:	4690      	mov	r8, r2
 8009b6a:	461f      	mov	r7, r3
 8009b6c:	d838      	bhi.n	8009be0 <__ssputs_r+0x84>
 8009b6e:	898a      	ldrh	r2, [r1, #12]
 8009b70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b74:	d032      	beq.n	8009bdc <__ssputs_r+0x80>
 8009b76:	6825      	ldr	r5, [r4, #0]
 8009b78:	6909      	ldr	r1, [r1, #16]
 8009b7a:	eba5 0901 	sub.w	r9, r5, r1
 8009b7e:	6965      	ldr	r5, [r4, #20]
 8009b80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b88:	3301      	adds	r3, #1
 8009b8a:	444b      	add	r3, r9
 8009b8c:	106d      	asrs	r5, r5, #1
 8009b8e:	429d      	cmp	r5, r3
 8009b90:	bf38      	it	cc
 8009b92:	461d      	movcc	r5, r3
 8009b94:	0553      	lsls	r3, r2, #21
 8009b96:	d531      	bpl.n	8009bfc <__ssputs_r+0xa0>
 8009b98:	4629      	mov	r1, r5
 8009b9a:	f000 fb63 	bl	800a264 <_malloc_r>
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	b950      	cbnz	r0, 8009bb8 <__ssputs_r+0x5c>
 8009ba2:	230c      	movs	r3, #12
 8009ba4:	f8ca 3000 	str.w	r3, [sl]
 8009ba8:	89a3      	ldrh	r3, [r4, #12]
 8009baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bae:	81a3      	strh	r3, [r4, #12]
 8009bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb8:	6921      	ldr	r1, [r4, #16]
 8009bba:	464a      	mov	r2, r9
 8009bbc:	f000 fabe 	bl	800a13c <memcpy>
 8009bc0:	89a3      	ldrh	r3, [r4, #12]
 8009bc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bca:	81a3      	strh	r3, [r4, #12]
 8009bcc:	6126      	str	r6, [r4, #16]
 8009bce:	6165      	str	r5, [r4, #20]
 8009bd0:	444e      	add	r6, r9
 8009bd2:	eba5 0509 	sub.w	r5, r5, r9
 8009bd6:	6026      	str	r6, [r4, #0]
 8009bd8:	60a5      	str	r5, [r4, #8]
 8009bda:	463e      	mov	r6, r7
 8009bdc:	42be      	cmp	r6, r7
 8009bde:	d900      	bls.n	8009be2 <__ssputs_r+0x86>
 8009be0:	463e      	mov	r6, r7
 8009be2:	6820      	ldr	r0, [r4, #0]
 8009be4:	4632      	mov	r2, r6
 8009be6:	4641      	mov	r1, r8
 8009be8:	f000 fab6 	bl	800a158 <memmove>
 8009bec:	68a3      	ldr	r3, [r4, #8]
 8009bee:	1b9b      	subs	r3, r3, r6
 8009bf0:	60a3      	str	r3, [r4, #8]
 8009bf2:	6823      	ldr	r3, [r4, #0]
 8009bf4:	4433      	add	r3, r6
 8009bf6:	6023      	str	r3, [r4, #0]
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	e7db      	b.n	8009bb4 <__ssputs_r+0x58>
 8009bfc:	462a      	mov	r2, r5
 8009bfe:	f000 fba5 	bl	800a34c <_realloc_r>
 8009c02:	4606      	mov	r6, r0
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d1e1      	bne.n	8009bcc <__ssputs_r+0x70>
 8009c08:	6921      	ldr	r1, [r4, #16]
 8009c0a:	4650      	mov	r0, sl
 8009c0c:	f000 fabe 	bl	800a18c <_free_r>
 8009c10:	e7c7      	b.n	8009ba2 <__ssputs_r+0x46>
	...

08009c14 <_svfiprintf_r>:
 8009c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c18:	4698      	mov	r8, r3
 8009c1a:	898b      	ldrh	r3, [r1, #12]
 8009c1c:	061b      	lsls	r3, r3, #24
 8009c1e:	b09d      	sub	sp, #116	; 0x74
 8009c20:	4607      	mov	r7, r0
 8009c22:	460d      	mov	r5, r1
 8009c24:	4614      	mov	r4, r2
 8009c26:	d50e      	bpl.n	8009c46 <_svfiprintf_r+0x32>
 8009c28:	690b      	ldr	r3, [r1, #16]
 8009c2a:	b963      	cbnz	r3, 8009c46 <_svfiprintf_r+0x32>
 8009c2c:	2140      	movs	r1, #64	; 0x40
 8009c2e:	f000 fb19 	bl	800a264 <_malloc_r>
 8009c32:	6028      	str	r0, [r5, #0]
 8009c34:	6128      	str	r0, [r5, #16]
 8009c36:	b920      	cbnz	r0, 8009c42 <_svfiprintf_r+0x2e>
 8009c38:	230c      	movs	r3, #12
 8009c3a:	603b      	str	r3, [r7, #0]
 8009c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c40:	e0d1      	b.n	8009de6 <_svfiprintf_r+0x1d2>
 8009c42:	2340      	movs	r3, #64	; 0x40
 8009c44:	616b      	str	r3, [r5, #20]
 8009c46:	2300      	movs	r3, #0
 8009c48:	9309      	str	r3, [sp, #36]	; 0x24
 8009c4a:	2320      	movs	r3, #32
 8009c4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c50:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c54:	2330      	movs	r3, #48	; 0x30
 8009c56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e00 <_svfiprintf_r+0x1ec>
 8009c5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c5e:	f04f 0901 	mov.w	r9, #1
 8009c62:	4623      	mov	r3, r4
 8009c64:	469a      	mov	sl, r3
 8009c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c6a:	b10a      	cbz	r2, 8009c70 <_svfiprintf_r+0x5c>
 8009c6c:	2a25      	cmp	r2, #37	; 0x25
 8009c6e:	d1f9      	bne.n	8009c64 <_svfiprintf_r+0x50>
 8009c70:	ebba 0b04 	subs.w	fp, sl, r4
 8009c74:	d00b      	beq.n	8009c8e <_svfiprintf_r+0x7a>
 8009c76:	465b      	mov	r3, fp
 8009c78:	4622      	mov	r2, r4
 8009c7a:	4629      	mov	r1, r5
 8009c7c:	4638      	mov	r0, r7
 8009c7e:	f7ff ff6d 	bl	8009b5c <__ssputs_r>
 8009c82:	3001      	adds	r0, #1
 8009c84:	f000 80aa 	beq.w	8009ddc <_svfiprintf_r+0x1c8>
 8009c88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c8a:	445a      	add	r2, fp
 8009c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f000 80a2 	beq.w	8009ddc <_svfiprintf_r+0x1c8>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ca2:	f10a 0a01 	add.w	sl, sl, #1
 8009ca6:	9304      	str	r3, [sp, #16]
 8009ca8:	9307      	str	r3, [sp, #28]
 8009caa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cae:	931a      	str	r3, [sp, #104]	; 0x68
 8009cb0:	4654      	mov	r4, sl
 8009cb2:	2205      	movs	r2, #5
 8009cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb8:	4851      	ldr	r0, [pc, #324]	; (8009e00 <_svfiprintf_r+0x1ec>)
 8009cba:	f7f6 fb19 	bl	80002f0 <memchr>
 8009cbe:	9a04      	ldr	r2, [sp, #16]
 8009cc0:	b9d8      	cbnz	r0, 8009cfa <_svfiprintf_r+0xe6>
 8009cc2:	06d0      	lsls	r0, r2, #27
 8009cc4:	bf44      	itt	mi
 8009cc6:	2320      	movmi	r3, #32
 8009cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ccc:	0711      	lsls	r1, r2, #28
 8009cce:	bf44      	itt	mi
 8009cd0:	232b      	movmi	r3, #43	; 0x2b
 8009cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8009cda:	2b2a      	cmp	r3, #42	; 0x2a
 8009cdc:	d015      	beq.n	8009d0a <_svfiprintf_r+0xf6>
 8009cde:	9a07      	ldr	r2, [sp, #28]
 8009ce0:	4654      	mov	r4, sl
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	f04f 0c0a 	mov.w	ip, #10
 8009ce8:	4621      	mov	r1, r4
 8009cea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cee:	3b30      	subs	r3, #48	; 0x30
 8009cf0:	2b09      	cmp	r3, #9
 8009cf2:	d94e      	bls.n	8009d92 <_svfiprintf_r+0x17e>
 8009cf4:	b1b0      	cbz	r0, 8009d24 <_svfiprintf_r+0x110>
 8009cf6:	9207      	str	r2, [sp, #28]
 8009cf8:	e014      	b.n	8009d24 <_svfiprintf_r+0x110>
 8009cfa:	eba0 0308 	sub.w	r3, r0, r8
 8009cfe:	fa09 f303 	lsl.w	r3, r9, r3
 8009d02:	4313      	orrs	r3, r2
 8009d04:	9304      	str	r3, [sp, #16]
 8009d06:	46a2      	mov	sl, r4
 8009d08:	e7d2      	b.n	8009cb0 <_svfiprintf_r+0x9c>
 8009d0a:	9b03      	ldr	r3, [sp, #12]
 8009d0c:	1d19      	adds	r1, r3, #4
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	9103      	str	r1, [sp, #12]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	bfbb      	ittet	lt
 8009d16:	425b      	neglt	r3, r3
 8009d18:	f042 0202 	orrlt.w	r2, r2, #2
 8009d1c:	9307      	strge	r3, [sp, #28]
 8009d1e:	9307      	strlt	r3, [sp, #28]
 8009d20:	bfb8      	it	lt
 8009d22:	9204      	strlt	r2, [sp, #16]
 8009d24:	7823      	ldrb	r3, [r4, #0]
 8009d26:	2b2e      	cmp	r3, #46	; 0x2e
 8009d28:	d10c      	bne.n	8009d44 <_svfiprintf_r+0x130>
 8009d2a:	7863      	ldrb	r3, [r4, #1]
 8009d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8009d2e:	d135      	bne.n	8009d9c <_svfiprintf_r+0x188>
 8009d30:	9b03      	ldr	r3, [sp, #12]
 8009d32:	1d1a      	adds	r2, r3, #4
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	9203      	str	r2, [sp, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	bfb8      	it	lt
 8009d3c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009d40:	3402      	adds	r4, #2
 8009d42:	9305      	str	r3, [sp, #20]
 8009d44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e10 <_svfiprintf_r+0x1fc>
 8009d48:	7821      	ldrb	r1, [r4, #0]
 8009d4a:	2203      	movs	r2, #3
 8009d4c:	4650      	mov	r0, sl
 8009d4e:	f7f6 facf 	bl	80002f0 <memchr>
 8009d52:	b140      	cbz	r0, 8009d66 <_svfiprintf_r+0x152>
 8009d54:	2340      	movs	r3, #64	; 0x40
 8009d56:	eba0 000a 	sub.w	r0, r0, sl
 8009d5a:	fa03 f000 	lsl.w	r0, r3, r0
 8009d5e:	9b04      	ldr	r3, [sp, #16]
 8009d60:	4303      	orrs	r3, r0
 8009d62:	3401      	adds	r4, #1
 8009d64:	9304      	str	r3, [sp, #16]
 8009d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d6a:	4826      	ldr	r0, [pc, #152]	; (8009e04 <_svfiprintf_r+0x1f0>)
 8009d6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d70:	2206      	movs	r2, #6
 8009d72:	f7f6 fabd 	bl	80002f0 <memchr>
 8009d76:	2800      	cmp	r0, #0
 8009d78:	d038      	beq.n	8009dec <_svfiprintf_r+0x1d8>
 8009d7a:	4b23      	ldr	r3, [pc, #140]	; (8009e08 <_svfiprintf_r+0x1f4>)
 8009d7c:	bb1b      	cbnz	r3, 8009dc6 <_svfiprintf_r+0x1b2>
 8009d7e:	9b03      	ldr	r3, [sp, #12]
 8009d80:	3307      	adds	r3, #7
 8009d82:	f023 0307 	bic.w	r3, r3, #7
 8009d86:	3308      	adds	r3, #8
 8009d88:	9303      	str	r3, [sp, #12]
 8009d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d8c:	4433      	add	r3, r6
 8009d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d90:	e767      	b.n	8009c62 <_svfiprintf_r+0x4e>
 8009d92:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d96:	460c      	mov	r4, r1
 8009d98:	2001      	movs	r0, #1
 8009d9a:	e7a5      	b.n	8009ce8 <_svfiprintf_r+0xd4>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	3401      	adds	r4, #1
 8009da0:	9305      	str	r3, [sp, #20]
 8009da2:	4619      	mov	r1, r3
 8009da4:	f04f 0c0a 	mov.w	ip, #10
 8009da8:	4620      	mov	r0, r4
 8009daa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dae:	3a30      	subs	r2, #48	; 0x30
 8009db0:	2a09      	cmp	r2, #9
 8009db2:	d903      	bls.n	8009dbc <_svfiprintf_r+0x1a8>
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d0c5      	beq.n	8009d44 <_svfiprintf_r+0x130>
 8009db8:	9105      	str	r1, [sp, #20]
 8009dba:	e7c3      	b.n	8009d44 <_svfiprintf_r+0x130>
 8009dbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dc0:	4604      	mov	r4, r0
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e7f0      	b.n	8009da8 <_svfiprintf_r+0x194>
 8009dc6:	ab03      	add	r3, sp, #12
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	462a      	mov	r2, r5
 8009dcc:	4b0f      	ldr	r3, [pc, #60]	; (8009e0c <_svfiprintf_r+0x1f8>)
 8009dce:	a904      	add	r1, sp, #16
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	f3af 8000 	nop.w
 8009dd6:	1c42      	adds	r2, r0, #1
 8009dd8:	4606      	mov	r6, r0
 8009dda:	d1d6      	bne.n	8009d8a <_svfiprintf_r+0x176>
 8009ddc:	89ab      	ldrh	r3, [r5, #12]
 8009dde:	065b      	lsls	r3, r3, #25
 8009de0:	f53f af2c 	bmi.w	8009c3c <_svfiprintf_r+0x28>
 8009de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009de6:	b01d      	add	sp, #116	; 0x74
 8009de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dec:	ab03      	add	r3, sp, #12
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	462a      	mov	r2, r5
 8009df2:	4b06      	ldr	r3, [pc, #24]	; (8009e0c <_svfiprintf_r+0x1f8>)
 8009df4:	a904      	add	r1, sp, #16
 8009df6:	4638      	mov	r0, r7
 8009df8:	f000 f87a 	bl	8009ef0 <_printf_i>
 8009dfc:	e7eb      	b.n	8009dd6 <_svfiprintf_r+0x1c2>
 8009dfe:	bf00      	nop
 8009e00:	0800a4dc 	.word	0x0800a4dc
 8009e04:	0800a4e6 	.word	0x0800a4e6
 8009e08:	00000000 	.word	0x00000000
 8009e0c:	08009b5d 	.word	0x08009b5d
 8009e10:	0800a4e2 	.word	0x0800a4e2

08009e14 <_printf_common>:
 8009e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e18:	4616      	mov	r6, r2
 8009e1a:	4699      	mov	r9, r3
 8009e1c:	688a      	ldr	r2, [r1, #8]
 8009e1e:	690b      	ldr	r3, [r1, #16]
 8009e20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e24:	4293      	cmp	r3, r2
 8009e26:	bfb8      	it	lt
 8009e28:	4613      	movlt	r3, r2
 8009e2a:	6033      	str	r3, [r6, #0]
 8009e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e30:	4607      	mov	r7, r0
 8009e32:	460c      	mov	r4, r1
 8009e34:	b10a      	cbz	r2, 8009e3a <_printf_common+0x26>
 8009e36:	3301      	adds	r3, #1
 8009e38:	6033      	str	r3, [r6, #0]
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	0699      	lsls	r1, r3, #26
 8009e3e:	bf42      	ittt	mi
 8009e40:	6833      	ldrmi	r3, [r6, #0]
 8009e42:	3302      	addmi	r3, #2
 8009e44:	6033      	strmi	r3, [r6, #0]
 8009e46:	6825      	ldr	r5, [r4, #0]
 8009e48:	f015 0506 	ands.w	r5, r5, #6
 8009e4c:	d106      	bne.n	8009e5c <_printf_common+0x48>
 8009e4e:	f104 0a19 	add.w	sl, r4, #25
 8009e52:	68e3      	ldr	r3, [r4, #12]
 8009e54:	6832      	ldr	r2, [r6, #0]
 8009e56:	1a9b      	subs	r3, r3, r2
 8009e58:	42ab      	cmp	r3, r5
 8009e5a:	dc26      	bgt.n	8009eaa <_printf_common+0x96>
 8009e5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e60:	1e13      	subs	r3, r2, #0
 8009e62:	6822      	ldr	r2, [r4, #0]
 8009e64:	bf18      	it	ne
 8009e66:	2301      	movne	r3, #1
 8009e68:	0692      	lsls	r2, r2, #26
 8009e6a:	d42b      	bmi.n	8009ec4 <_printf_common+0xb0>
 8009e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e70:	4649      	mov	r1, r9
 8009e72:	4638      	mov	r0, r7
 8009e74:	47c0      	blx	r8
 8009e76:	3001      	adds	r0, #1
 8009e78:	d01e      	beq.n	8009eb8 <_printf_common+0xa4>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	68e5      	ldr	r5, [r4, #12]
 8009e7e:	6832      	ldr	r2, [r6, #0]
 8009e80:	f003 0306 	and.w	r3, r3, #6
 8009e84:	2b04      	cmp	r3, #4
 8009e86:	bf08      	it	eq
 8009e88:	1aad      	subeq	r5, r5, r2
 8009e8a:	68a3      	ldr	r3, [r4, #8]
 8009e8c:	6922      	ldr	r2, [r4, #16]
 8009e8e:	bf0c      	ite	eq
 8009e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e94:	2500      	movne	r5, #0
 8009e96:	4293      	cmp	r3, r2
 8009e98:	bfc4      	itt	gt
 8009e9a:	1a9b      	subgt	r3, r3, r2
 8009e9c:	18ed      	addgt	r5, r5, r3
 8009e9e:	2600      	movs	r6, #0
 8009ea0:	341a      	adds	r4, #26
 8009ea2:	42b5      	cmp	r5, r6
 8009ea4:	d11a      	bne.n	8009edc <_printf_common+0xc8>
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	e008      	b.n	8009ebc <_printf_common+0xa8>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	4652      	mov	r2, sl
 8009eae:	4649      	mov	r1, r9
 8009eb0:	4638      	mov	r0, r7
 8009eb2:	47c0      	blx	r8
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	d103      	bne.n	8009ec0 <_printf_common+0xac>
 8009eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec0:	3501      	adds	r5, #1
 8009ec2:	e7c6      	b.n	8009e52 <_printf_common+0x3e>
 8009ec4:	18e1      	adds	r1, r4, r3
 8009ec6:	1c5a      	adds	r2, r3, #1
 8009ec8:	2030      	movs	r0, #48	; 0x30
 8009eca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ece:	4422      	add	r2, r4
 8009ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ed4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ed8:	3302      	adds	r3, #2
 8009eda:	e7c7      	b.n	8009e6c <_printf_common+0x58>
 8009edc:	2301      	movs	r3, #1
 8009ede:	4622      	mov	r2, r4
 8009ee0:	4649      	mov	r1, r9
 8009ee2:	4638      	mov	r0, r7
 8009ee4:	47c0      	blx	r8
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	d0e6      	beq.n	8009eb8 <_printf_common+0xa4>
 8009eea:	3601      	adds	r6, #1
 8009eec:	e7d9      	b.n	8009ea2 <_printf_common+0x8e>
	...

08009ef0 <_printf_i>:
 8009ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef4:	7e0f      	ldrb	r7, [r1, #24]
 8009ef6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ef8:	2f78      	cmp	r7, #120	; 0x78
 8009efa:	4691      	mov	r9, r2
 8009efc:	4680      	mov	r8, r0
 8009efe:	460c      	mov	r4, r1
 8009f00:	469a      	mov	sl, r3
 8009f02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f06:	d807      	bhi.n	8009f18 <_printf_i+0x28>
 8009f08:	2f62      	cmp	r7, #98	; 0x62
 8009f0a:	d80a      	bhi.n	8009f22 <_printf_i+0x32>
 8009f0c:	2f00      	cmp	r7, #0
 8009f0e:	f000 80d8 	beq.w	800a0c2 <_printf_i+0x1d2>
 8009f12:	2f58      	cmp	r7, #88	; 0x58
 8009f14:	f000 80a3 	beq.w	800a05e <_printf_i+0x16e>
 8009f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f20:	e03a      	b.n	8009f98 <_printf_i+0xa8>
 8009f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f26:	2b15      	cmp	r3, #21
 8009f28:	d8f6      	bhi.n	8009f18 <_printf_i+0x28>
 8009f2a:	a101      	add	r1, pc, #4	; (adr r1, 8009f30 <_printf_i+0x40>)
 8009f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f30:	08009f89 	.word	0x08009f89
 8009f34:	08009f9d 	.word	0x08009f9d
 8009f38:	08009f19 	.word	0x08009f19
 8009f3c:	08009f19 	.word	0x08009f19
 8009f40:	08009f19 	.word	0x08009f19
 8009f44:	08009f19 	.word	0x08009f19
 8009f48:	08009f9d 	.word	0x08009f9d
 8009f4c:	08009f19 	.word	0x08009f19
 8009f50:	08009f19 	.word	0x08009f19
 8009f54:	08009f19 	.word	0x08009f19
 8009f58:	08009f19 	.word	0x08009f19
 8009f5c:	0800a0a9 	.word	0x0800a0a9
 8009f60:	08009fcd 	.word	0x08009fcd
 8009f64:	0800a08b 	.word	0x0800a08b
 8009f68:	08009f19 	.word	0x08009f19
 8009f6c:	08009f19 	.word	0x08009f19
 8009f70:	0800a0cb 	.word	0x0800a0cb
 8009f74:	08009f19 	.word	0x08009f19
 8009f78:	08009fcd 	.word	0x08009fcd
 8009f7c:	08009f19 	.word	0x08009f19
 8009f80:	08009f19 	.word	0x08009f19
 8009f84:	0800a093 	.word	0x0800a093
 8009f88:	682b      	ldr	r3, [r5, #0]
 8009f8a:	1d1a      	adds	r2, r3, #4
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	602a      	str	r2, [r5, #0]
 8009f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e0a3      	b.n	800a0e4 <_printf_i+0x1f4>
 8009f9c:	6820      	ldr	r0, [r4, #0]
 8009f9e:	6829      	ldr	r1, [r5, #0]
 8009fa0:	0606      	lsls	r6, r0, #24
 8009fa2:	f101 0304 	add.w	r3, r1, #4
 8009fa6:	d50a      	bpl.n	8009fbe <_printf_i+0xce>
 8009fa8:	680e      	ldr	r6, [r1, #0]
 8009faa:	602b      	str	r3, [r5, #0]
 8009fac:	2e00      	cmp	r6, #0
 8009fae:	da03      	bge.n	8009fb8 <_printf_i+0xc8>
 8009fb0:	232d      	movs	r3, #45	; 0x2d
 8009fb2:	4276      	negs	r6, r6
 8009fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fb8:	485e      	ldr	r0, [pc, #376]	; (800a134 <_printf_i+0x244>)
 8009fba:	230a      	movs	r3, #10
 8009fbc:	e019      	b.n	8009ff2 <_printf_i+0x102>
 8009fbe:	680e      	ldr	r6, [r1, #0]
 8009fc0:	602b      	str	r3, [r5, #0]
 8009fc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009fc6:	bf18      	it	ne
 8009fc8:	b236      	sxthne	r6, r6
 8009fca:	e7ef      	b.n	8009fac <_printf_i+0xbc>
 8009fcc:	682b      	ldr	r3, [r5, #0]
 8009fce:	6820      	ldr	r0, [r4, #0]
 8009fd0:	1d19      	adds	r1, r3, #4
 8009fd2:	6029      	str	r1, [r5, #0]
 8009fd4:	0601      	lsls	r1, r0, #24
 8009fd6:	d501      	bpl.n	8009fdc <_printf_i+0xec>
 8009fd8:	681e      	ldr	r6, [r3, #0]
 8009fda:	e002      	b.n	8009fe2 <_printf_i+0xf2>
 8009fdc:	0646      	lsls	r6, r0, #25
 8009fde:	d5fb      	bpl.n	8009fd8 <_printf_i+0xe8>
 8009fe0:	881e      	ldrh	r6, [r3, #0]
 8009fe2:	4854      	ldr	r0, [pc, #336]	; (800a134 <_printf_i+0x244>)
 8009fe4:	2f6f      	cmp	r7, #111	; 0x6f
 8009fe6:	bf0c      	ite	eq
 8009fe8:	2308      	moveq	r3, #8
 8009fea:	230a      	movne	r3, #10
 8009fec:	2100      	movs	r1, #0
 8009fee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ff2:	6865      	ldr	r5, [r4, #4]
 8009ff4:	60a5      	str	r5, [r4, #8]
 8009ff6:	2d00      	cmp	r5, #0
 8009ff8:	bfa2      	ittt	ge
 8009ffa:	6821      	ldrge	r1, [r4, #0]
 8009ffc:	f021 0104 	bicge.w	r1, r1, #4
 800a000:	6021      	strge	r1, [r4, #0]
 800a002:	b90e      	cbnz	r6, 800a008 <_printf_i+0x118>
 800a004:	2d00      	cmp	r5, #0
 800a006:	d04d      	beq.n	800a0a4 <_printf_i+0x1b4>
 800a008:	4615      	mov	r5, r2
 800a00a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a00e:	fb03 6711 	mls	r7, r3, r1, r6
 800a012:	5dc7      	ldrb	r7, [r0, r7]
 800a014:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a018:	4637      	mov	r7, r6
 800a01a:	42bb      	cmp	r3, r7
 800a01c:	460e      	mov	r6, r1
 800a01e:	d9f4      	bls.n	800a00a <_printf_i+0x11a>
 800a020:	2b08      	cmp	r3, #8
 800a022:	d10b      	bne.n	800a03c <_printf_i+0x14c>
 800a024:	6823      	ldr	r3, [r4, #0]
 800a026:	07de      	lsls	r6, r3, #31
 800a028:	d508      	bpl.n	800a03c <_printf_i+0x14c>
 800a02a:	6923      	ldr	r3, [r4, #16]
 800a02c:	6861      	ldr	r1, [r4, #4]
 800a02e:	4299      	cmp	r1, r3
 800a030:	bfde      	ittt	le
 800a032:	2330      	movle	r3, #48	; 0x30
 800a034:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a038:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a03c:	1b52      	subs	r2, r2, r5
 800a03e:	6122      	str	r2, [r4, #16]
 800a040:	f8cd a000 	str.w	sl, [sp]
 800a044:	464b      	mov	r3, r9
 800a046:	aa03      	add	r2, sp, #12
 800a048:	4621      	mov	r1, r4
 800a04a:	4640      	mov	r0, r8
 800a04c:	f7ff fee2 	bl	8009e14 <_printf_common>
 800a050:	3001      	adds	r0, #1
 800a052:	d14c      	bne.n	800a0ee <_printf_i+0x1fe>
 800a054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a058:	b004      	add	sp, #16
 800a05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a05e:	4835      	ldr	r0, [pc, #212]	; (800a134 <_printf_i+0x244>)
 800a060:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a064:	6829      	ldr	r1, [r5, #0]
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	f851 6b04 	ldr.w	r6, [r1], #4
 800a06c:	6029      	str	r1, [r5, #0]
 800a06e:	061d      	lsls	r5, r3, #24
 800a070:	d514      	bpl.n	800a09c <_printf_i+0x1ac>
 800a072:	07df      	lsls	r7, r3, #31
 800a074:	bf44      	itt	mi
 800a076:	f043 0320 	orrmi.w	r3, r3, #32
 800a07a:	6023      	strmi	r3, [r4, #0]
 800a07c:	b91e      	cbnz	r6, 800a086 <_printf_i+0x196>
 800a07e:	6823      	ldr	r3, [r4, #0]
 800a080:	f023 0320 	bic.w	r3, r3, #32
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	2310      	movs	r3, #16
 800a088:	e7b0      	b.n	8009fec <_printf_i+0xfc>
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	f043 0320 	orr.w	r3, r3, #32
 800a090:	6023      	str	r3, [r4, #0]
 800a092:	2378      	movs	r3, #120	; 0x78
 800a094:	4828      	ldr	r0, [pc, #160]	; (800a138 <_printf_i+0x248>)
 800a096:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a09a:	e7e3      	b.n	800a064 <_printf_i+0x174>
 800a09c:	0659      	lsls	r1, r3, #25
 800a09e:	bf48      	it	mi
 800a0a0:	b2b6      	uxthmi	r6, r6
 800a0a2:	e7e6      	b.n	800a072 <_printf_i+0x182>
 800a0a4:	4615      	mov	r5, r2
 800a0a6:	e7bb      	b.n	800a020 <_printf_i+0x130>
 800a0a8:	682b      	ldr	r3, [r5, #0]
 800a0aa:	6826      	ldr	r6, [r4, #0]
 800a0ac:	6961      	ldr	r1, [r4, #20]
 800a0ae:	1d18      	adds	r0, r3, #4
 800a0b0:	6028      	str	r0, [r5, #0]
 800a0b2:	0635      	lsls	r5, r6, #24
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	d501      	bpl.n	800a0bc <_printf_i+0x1cc>
 800a0b8:	6019      	str	r1, [r3, #0]
 800a0ba:	e002      	b.n	800a0c2 <_printf_i+0x1d2>
 800a0bc:	0670      	lsls	r0, r6, #25
 800a0be:	d5fb      	bpl.n	800a0b8 <_printf_i+0x1c8>
 800a0c0:	8019      	strh	r1, [r3, #0]
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	6123      	str	r3, [r4, #16]
 800a0c6:	4615      	mov	r5, r2
 800a0c8:	e7ba      	b.n	800a040 <_printf_i+0x150>
 800a0ca:	682b      	ldr	r3, [r5, #0]
 800a0cc:	1d1a      	adds	r2, r3, #4
 800a0ce:	602a      	str	r2, [r5, #0]
 800a0d0:	681d      	ldr	r5, [r3, #0]
 800a0d2:	6862      	ldr	r2, [r4, #4]
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f7f6 f90a 	bl	80002f0 <memchr>
 800a0dc:	b108      	cbz	r0, 800a0e2 <_printf_i+0x1f2>
 800a0de:	1b40      	subs	r0, r0, r5
 800a0e0:	6060      	str	r0, [r4, #4]
 800a0e2:	6863      	ldr	r3, [r4, #4]
 800a0e4:	6123      	str	r3, [r4, #16]
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0ec:	e7a8      	b.n	800a040 <_printf_i+0x150>
 800a0ee:	6923      	ldr	r3, [r4, #16]
 800a0f0:	462a      	mov	r2, r5
 800a0f2:	4649      	mov	r1, r9
 800a0f4:	4640      	mov	r0, r8
 800a0f6:	47d0      	blx	sl
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	d0ab      	beq.n	800a054 <_printf_i+0x164>
 800a0fc:	6823      	ldr	r3, [r4, #0]
 800a0fe:	079b      	lsls	r3, r3, #30
 800a100:	d413      	bmi.n	800a12a <_printf_i+0x23a>
 800a102:	68e0      	ldr	r0, [r4, #12]
 800a104:	9b03      	ldr	r3, [sp, #12]
 800a106:	4298      	cmp	r0, r3
 800a108:	bfb8      	it	lt
 800a10a:	4618      	movlt	r0, r3
 800a10c:	e7a4      	b.n	800a058 <_printf_i+0x168>
 800a10e:	2301      	movs	r3, #1
 800a110:	4632      	mov	r2, r6
 800a112:	4649      	mov	r1, r9
 800a114:	4640      	mov	r0, r8
 800a116:	47d0      	blx	sl
 800a118:	3001      	adds	r0, #1
 800a11a:	d09b      	beq.n	800a054 <_printf_i+0x164>
 800a11c:	3501      	adds	r5, #1
 800a11e:	68e3      	ldr	r3, [r4, #12]
 800a120:	9903      	ldr	r1, [sp, #12]
 800a122:	1a5b      	subs	r3, r3, r1
 800a124:	42ab      	cmp	r3, r5
 800a126:	dcf2      	bgt.n	800a10e <_printf_i+0x21e>
 800a128:	e7eb      	b.n	800a102 <_printf_i+0x212>
 800a12a:	2500      	movs	r5, #0
 800a12c:	f104 0619 	add.w	r6, r4, #25
 800a130:	e7f5      	b.n	800a11e <_printf_i+0x22e>
 800a132:	bf00      	nop
 800a134:	0800a4ed 	.word	0x0800a4ed
 800a138:	0800a4fe 	.word	0x0800a4fe

0800a13c <memcpy>:
 800a13c:	440a      	add	r2, r1
 800a13e:	4291      	cmp	r1, r2
 800a140:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a144:	d100      	bne.n	800a148 <memcpy+0xc>
 800a146:	4770      	bx	lr
 800a148:	b510      	push	{r4, lr}
 800a14a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a14e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a152:	4291      	cmp	r1, r2
 800a154:	d1f9      	bne.n	800a14a <memcpy+0xe>
 800a156:	bd10      	pop	{r4, pc}

0800a158 <memmove>:
 800a158:	4288      	cmp	r0, r1
 800a15a:	b510      	push	{r4, lr}
 800a15c:	eb01 0402 	add.w	r4, r1, r2
 800a160:	d902      	bls.n	800a168 <memmove+0x10>
 800a162:	4284      	cmp	r4, r0
 800a164:	4623      	mov	r3, r4
 800a166:	d807      	bhi.n	800a178 <memmove+0x20>
 800a168:	1e43      	subs	r3, r0, #1
 800a16a:	42a1      	cmp	r1, r4
 800a16c:	d008      	beq.n	800a180 <memmove+0x28>
 800a16e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a172:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a176:	e7f8      	b.n	800a16a <memmove+0x12>
 800a178:	4402      	add	r2, r0
 800a17a:	4601      	mov	r1, r0
 800a17c:	428a      	cmp	r2, r1
 800a17e:	d100      	bne.n	800a182 <memmove+0x2a>
 800a180:	bd10      	pop	{r4, pc}
 800a182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a186:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a18a:	e7f7      	b.n	800a17c <memmove+0x24>

0800a18c <_free_r>:
 800a18c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a18e:	2900      	cmp	r1, #0
 800a190:	d044      	beq.n	800a21c <_free_r+0x90>
 800a192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a196:	9001      	str	r0, [sp, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f1a1 0404 	sub.w	r4, r1, #4
 800a19e:	bfb8      	it	lt
 800a1a0:	18e4      	addlt	r4, r4, r3
 800a1a2:	f000 f913 	bl	800a3cc <__malloc_lock>
 800a1a6:	4a1e      	ldr	r2, [pc, #120]	; (800a220 <_free_r+0x94>)
 800a1a8:	9801      	ldr	r0, [sp, #4]
 800a1aa:	6813      	ldr	r3, [r2, #0]
 800a1ac:	b933      	cbnz	r3, 800a1bc <_free_r+0x30>
 800a1ae:	6063      	str	r3, [r4, #4]
 800a1b0:	6014      	str	r4, [r2, #0]
 800a1b2:	b003      	add	sp, #12
 800a1b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1b8:	f000 b90e 	b.w	800a3d8 <__malloc_unlock>
 800a1bc:	42a3      	cmp	r3, r4
 800a1be:	d908      	bls.n	800a1d2 <_free_r+0x46>
 800a1c0:	6825      	ldr	r5, [r4, #0]
 800a1c2:	1961      	adds	r1, r4, r5
 800a1c4:	428b      	cmp	r3, r1
 800a1c6:	bf01      	itttt	eq
 800a1c8:	6819      	ldreq	r1, [r3, #0]
 800a1ca:	685b      	ldreq	r3, [r3, #4]
 800a1cc:	1949      	addeq	r1, r1, r5
 800a1ce:	6021      	streq	r1, [r4, #0]
 800a1d0:	e7ed      	b.n	800a1ae <_free_r+0x22>
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	b10b      	cbz	r3, 800a1dc <_free_r+0x50>
 800a1d8:	42a3      	cmp	r3, r4
 800a1da:	d9fa      	bls.n	800a1d2 <_free_r+0x46>
 800a1dc:	6811      	ldr	r1, [r2, #0]
 800a1de:	1855      	adds	r5, r2, r1
 800a1e0:	42a5      	cmp	r5, r4
 800a1e2:	d10b      	bne.n	800a1fc <_free_r+0x70>
 800a1e4:	6824      	ldr	r4, [r4, #0]
 800a1e6:	4421      	add	r1, r4
 800a1e8:	1854      	adds	r4, r2, r1
 800a1ea:	42a3      	cmp	r3, r4
 800a1ec:	6011      	str	r1, [r2, #0]
 800a1ee:	d1e0      	bne.n	800a1b2 <_free_r+0x26>
 800a1f0:	681c      	ldr	r4, [r3, #0]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	6053      	str	r3, [r2, #4]
 800a1f6:	4421      	add	r1, r4
 800a1f8:	6011      	str	r1, [r2, #0]
 800a1fa:	e7da      	b.n	800a1b2 <_free_r+0x26>
 800a1fc:	d902      	bls.n	800a204 <_free_r+0x78>
 800a1fe:	230c      	movs	r3, #12
 800a200:	6003      	str	r3, [r0, #0]
 800a202:	e7d6      	b.n	800a1b2 <_free_r+0x26>
 800a204:	6825      	ldr	r5, [r4, #0]
 800a206:	1961      	adds	r1, r4, r5
 800a208:	428b      	cmp	r3, r1
 800a20a:	bf04      	itt	eq
 800a20c:	6819      	ldreq	r1, [r3, #0]
 800a20e:	685b      	ldreq	r3, [r3, #4]
 800a210:	6063      	str	r3, [r4, #4]
 800a212:	bf04      	itt	eq
 800a214:	1949      	addeq	r1, r1, r5
 800a216:	6021      	streq	r1, [r4, #0]
 800a218:	6054      	str	r4, [r2, #4]
 800a21a:	e7ca      	b.n	800a1b2 <_free_r+0x26>
 800a21c:	b003      	add	sp, #12
 800a21e:	bd30      	pop	{r4, r5, pc}
 800a220:	24000300 	.word	0x24000300

0800a224 <sbrk_aligned>:
 800a224:	b570      	push	{r4, r5, r6, lr}
 800a226:	4e0e      	ldr	r6, [pc, #56]	; (800a260 <sbrk_aligned+0x3c>)
 800a228:	460c      	mov	r4, r1
 800a22a:	6831      	ldr	r1, [r6, #0]
 800a22c:	4605      	mov	r5, r0
 800a22e:	b911      	cbnz	r1, 800a236 <sbrk_aligned+0x12>
 800a230:	f000 f8bc 	bl	800a3ac <_sbrk_r>
 800a234:	6030      	str	r0, [r6, #0]
 800a236:	4621      	mov	r1, r4
 800a238:	4628      	mov	r0, r5
 800a23a:	f000 f8b7 	bl	800a3ac <_sbrk_r>
 800a23e:	1c43      	adds	r3, r0, #1
 800a240:	d00a      	beq.n	800a258 <sbrk_aligned+0x34>
 800a242:	1cc4      	adds	r4, r0, #3
 800a244:	f024 0403 	bic.w	r4, r4, #3
 800a248:	42a0      	cmp	r0, r4
 800a24a:	d007      	beq.n	800a25c <sbrk_aligned+0x38>
 800a24c:	1a21      	subs	r1, r4, r0
 800a24e:	4628      	mov	r0, r5
 800a250:	f000 f8ac 	bl	800a3ac <_sbrk_r>
 800a254:	3001      	adds	r0, #1
 800a256:	d101      	bne.n	800a25c <sbrk_aligned+0x38>
 800a258:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a25c:	4620      	mov	r0, r4
 800a25e:	bd70      	pop	{r4, r5, r6, pc}
 800a260:	24000304 	.word	0x24000304

0800a264 <_malloc_r>:
 800a264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a268:	1ccd      	adds	r5, r1, #3
 800a26a:	f025 0503 	bic.w	r5, r5, #3
 800a26e:	3508      	adds	r5, #8
 800a270:	2d0c      	cmp	r5, #12
 800a272:	bf38      	it	cc
 800a274:	250c      	movcc	r5, #12
 800a276:	2d00      	cmp	r5, #0
 800a278:	4607      	mov	r7, r0
 800a27a:	db01      	blt.n	800a280 <_malloc_r+0x1c>
 800a27c:	42a9      	cmp	r1, r5
 800a27e:	d905      	bls.n	800a28c <_malloc_r+0x28>
 800a280:	230c      	movs	r3, #12
 800a282:	603b      	str	r3, [r7, #0]
 800a284:	2600      	movs	r6, #0
 800a286:	4630      	mov	r0, r6
 800a288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a28c:	4e2e      	ldr	r6, [pc, #184]	; (800a348 <_malloc_r+0xe4>)
 800a28e:	f000 f89d 	bl	800a3cc <__malloc_lock>
 800a292:	6833      	ldr	r3, [r6, #0]
 800a294:	461c      	mov	r4, r3
 800a296:	bb34      	cbnz	r4, 800a2e6 <_malloc_r+0x82>
 800a298:	4629      	mov	r1, r5
 800a29a:	4638      	mov	r0, r7
 800a29c:	f7ff ffc2 	bl	800a224 <sbrk_aligned>
 800a2a0:	1c43      	adds	r3, r0, #1
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	d14d      	bne.n	800a342 <_malloc_r+0xde>
 800a2a6:	6834      	ldr	r4, [r6, #0]
 800a2a8:	4626      	mov	r6, r4
 800a2aa:	2e00      	cmp	r6, #0
 800a2ac:	d140      	bne.n	800a330 <_malloc_r+0xcc>
 800a2ae:	6823      	ldr	r3, [r4, #0]
 800a2b0:	4631      	mov	r1, r6
 800a2b2:	4638      	mov	r0, r7
 800a2b4:	eb04 0803 	add.w	r8, r4, r3
 800a2b8:	f000 f878 	bl	800a3ac <_sbrk_r>
 800a2bc:	4580      	cmp	r8, r0
 800a2be:	d13a      	bne.n	800a336 <_malloc_r+0xd2>
 800a2c0:	6821      	ldr	r1, [r4, #0]
 800a2c2:	3503      	adds	r5, #3
 800a2c4:	1a6d      	subs	r5, r5, r1
 800a2c6:	f025 0503 	bic.w	r5, r5, #3
 800a2ca:	3508      	adds	r5, #8
 800a2cc:	2d0c      	cmp	r5, #12
 800a2ce:	bf38      	it	cc
 800a2d0:	250c      	movcc	r5, #12
 800a2d2:	4629      	mov	r1, r5
 800a2d4:	4638      	mov	r0, r7
 800a2d6:	f7ff ffa5 	bl	800a224 <sbrk_aligned>
 800a2da:	3001      	adds	r0, #1
 800a2dc:	d02b      	beq.n	800a336 <_malloc_r+0xd2>
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	442b      	add	r3, r5
 800a2e2:	6023      	str	r3, [r4, #0]
 800a2e4:	e00e      	b.n	800a304 <_malloc_r+0xa0>
 800a2e6:	6822      	ldr	r2, [r4, #0]
 800a2e8:	1b52      	subs	r2, r2, r5
 800a2ea:	d41e      	bmi.n	800a32a <_malloc_r+0xc6>
 800a2ec:	2a0b      	cmp	r2, #11
 800a2ee:	d916      	bls.n	800a31e <_malloc_r+0xba>
 800a2f0:	1961      	adds	r1, r4, r5
 800a2f2:	42a3      	cmp	r3, r4
 800a2f4:	6025      	str	r5, [r4, #0]
 800a2f6:	bf18      	it	ne
 800a2f8:	6059      	strne	r1, [r3, #4]
 800a2fa:	6863      	ldr	r3, [r4, #4]
 800a2fc:	bf08      	it	eq
 800a2fe:	6031      	streq	r1, [r6, #0]
 800a300:	5162      	str	r2, [r4, r5]
 800a302:	604b      	str	r3, [r1, #4]
 800a304:	4638      	mov	r0, r7
 800a306:	f104 060b 	add.w	r6, r4, #11
 800a30a:	f000 f865 	bl	800a3d8 <__malloc_unlock>
 800a30e:	f026 0607 	bic.w	r6, r6, #7
 800a312:	1d23      	adds	r3, r4, #4
 800a314:	1af2      	subs	r2, r6, r3
 800a316:	d0b6      	beq.n	800a286 <_malloc_r+0x22>
 800a318:	1b9b      	subs	r3, r3, r6
 800a31a:	50a3      	str	r3, [r4, r2]
 800a31c:	e7b3      	b.n	800a286 <_malloc_r+0x22>
 800a31e:	6862      	ldr	r2, [r4, #4]
 800a320:	42a3      	cmp	r3, r4
 800a322:	bf0c      	ite	eq
 800a324:	6032      	streq	r2, [r6, #0]
 800a326:	605a      	strne	r2, [r3, #4]
 800a328:	e7ec      	b.n	800a304 <_malloc_r+0xa0>
 800a32a:	4623      	mov	r3, r4
 800a32c:	6864      	ldr	r4, [r4, #4]
 800a32e:	e7b2      	b.n	800a296 <_malloc_r+0x32>
 800a330:	4634      	mov	r4, r6
 800a332:	6876      	ldr	r6, [r6, #4]
 800a334:	e7b9      	b.n	800a2aa <_malloc_r+0x46>
 800a336:	230c      	movs	r3, #12
 800a338:	603b      	str	r3, [r7, #0]
 800a33a:	4638      	mov	r0, r7
 800a33c:	f000 f84c 	bl	800a3d8 <__malloc_unlock>
 800a340:	e7a1      	b.n	800a286 <_malloc_r+0x22>
 800a342:	6025      	str	r5, [r4, #0]
 800a344:	e7de      	b.n	800a304 <_malloc_r+0xa0>
 800a346:	bf00      	nop
 800a348:	24000300 	.word	0x24000300

0800a34c <_realloc_r>:
 800a34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a350:	4680      	mov	r8, r0
 800a352:	4614      	mov	r4, r2
 800a354:	460e      	mov	r6, r1
 800a356:	b921      	cbnz	r1, 800a362 <_realloc_r+0x16>
 800a358:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a35c:	4611      	mov	r1, r2
 800a35e:	f7ff bf81 	b.w	800a264 <_malloc_r>
 800a362:	b92a      	cbnz	r2, 800a370 <_realloc_r+0x24>
 800a364:	f7ff ff12 	bl	800a18c <_free_r>
 800a368:	4625      	mov	r5, r4
 800a36a:	4628      	mov	r0, r5
 800a36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a370:	f000 f838 	bl	800a3e4 <_malloc_usable_size_r>
 800a374:	4284      	cmp	r4, r0
 800a376:	4607      	mov	r7, r0
 800a378:	d802      	bhi.n	800a380 <_realloc_r+0x34>
 800a37a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a37e:	d812      	bhi.n	800a3a6 <_realloc_r+0x5a>
 800a380:	4621      	mov	r1, r4
 800a382:	4640      	mov	r0, r8
 800a384:	f7ff ff6e 	bl	800a264 <_malloc_r>
 800a388:	4605      	mov	r5, r0
 800a38a:	2800      	cmp	r0, #0
 800a38c:	d0ed      	beq.n	800a36a <_realloc_r+0x1e>
 800a38e:	42bc      	cmp	r4, r7
 800a390:	4622      	mov	r2, r4
 800a392:	4631      	mov	r1, r6
 800a394:	bf28      	it	cs
 800a396:	463a      	movcs	r2, r7
 800a398:	f7ff fed0 	bl	800a13c <memcpy>
 800a39c:	4631      	mov	r1, r6
 800a39e:	4640      	mov	r0, r8
 800a3a0:	f7ff fef4 	bl	800a18c <_free_r>
 800a3a4:	e7e1      	b.n	800a36a <_realloc_r+0x1e>
 800a3a6:	4635      	mov	r5, r6
 800a3a8:	e7df      	b.n	800a36a <_realloc_r+0x1e>
	...

0800a3ac <_sbrk_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	4d06      	ldr	r5, [pc, #24]	; (800a3c8 <_sbrk_r+0x1c>)
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	4608      	mov	r0, r1
 800a3b6:	602b      	str	r3, [r5, #0]
 800a3b8:	f7f6 ff3a 	bl	8001230 <_sbrk>
 800a3bc:	1c43      	adds	r3, r0, #1
 800a3be:	d102      	bne.n	800a3c6 <_sbrk_r+0x1a>
 800a3c0:	682b      	ldr	r3, [r5, #0]
 800a3c2:	b103      	cbz	r3, 800a3c6 <_sbrk_r+0x1a>
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	bd38      	pop	{r3, r4, r5, pc}
 800a3c8:	24000308 	.word	0x24000308

0800a3cc <__malloc_lock>:
 800a3cc:	4801      	ldr	r0, [pc, #4]	; (800a3d4 <__malloc_lock+0x8>)
 800a3ce:	f000 b811 	b.w	800a3f4 <__retarget_lock_acquire_recursive>
 800a3d2:	bf00      	nop
 800a3d4:	2400030c 	.word	0x2400030c

0800a3d8 <__malloc_unlock>:
 800a3d8:	4801      	ldr	r0, [pc, #4]	; (800a3e0 <__malloc_unlock+0x8>)
 800a3da:	f000 b80c 	b.w	800a3f6 <__retarget_lock_release_recursive>
 800a3de:	bf00      	nop
 800a3e0:	2400030c 	.word	0x2400030c

0800a3e4 <_malloc_usable_size_r>:
 800a3e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3e8:	1f18      	subs	r0, r3, #4
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	bfbc      	itt	lt
 800a3ee:	580b      	ldrlt	r3, [r1, r0]
 800a3f0:	18c0      	addlt	r0, r0, r3
 800a3f2:	4770      	bx	lr

0800a3f4 <__retarget_lock_acquire_recursive>:
 800a3f4:	4770      	bx	lr

0800a3f6 <__retarget_lock_release_recursive>:
 800a3f6:	4770      	bx	lr

0800a3f8 <_init>:
 800a3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fa:	bf00      	nop
 800a3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3fe:	bc08      	pop	{r3}
 800a400:	469e      	mov	lr, r3
 800a402:	4770      	bx	lr

0800a404 <_fini>:
 800a404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a406:	bf00      	nop
 800a408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a40a:	bc08      	pop	{r3}
 800a40c:	469e      	mov	lr, r3
 800a40e:	4770      	bx	lr
