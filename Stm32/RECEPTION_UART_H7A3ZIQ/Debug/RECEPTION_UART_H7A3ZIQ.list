
RECEPTION_UART_H7A3ZIQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097f8  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08009aa8  08009aa8  00019aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009b64  08009b64  00019b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009b6c  08009b6c  00019b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009b70  08009b70  00019b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  24000000  08009b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000200  24000084  08009bf8  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000284  08009bf8  00020284  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001841a  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d99  00000000  00000000  000384cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001178  00000000  00000000  0003b268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001040  00000000  00000000  0003c3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003177b  00000000  00000000  0003d420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a3df  00000000  00000000  0006eb9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013f331  00000000  00000000  00088f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c82ab  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004c88  00000000  00000000  001c82fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000084 	.word	0x24000084
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009a90 	.word	0x08009a90

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000088 	.word	0x24000088
 80002ec:	08009a90 	.word	0x08009a90

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <Thrust_Init>:
 *      Author: romingo
 */

#include "Process.h"

void Thrust_Init(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL);
 8000698:	4b85      	ldr	r3, [pc, #532]	; (80008b0 <Thrust_Init+0x21c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a84      	ldr	r2, [pc, #528]	; (80008b0 <Thrust_Init+0x21c>)
 800069e:	6852      	ldr	r2, [r2, #4]
 80006a0:	4611      	mov	r1, r2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f005 f838 	bl	8005718 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL);
 80006a8:	4b82      	ldr	r3, [pc, #520]	; (80008b4 <Thrust_Init+0x220>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a81      	ldr	r2, [pc, #516]	; (80008b4 <Thrust_Init+0x220>)
 80006ae:	6852      	ldr	r2, [r2, #4]
 80006b0:	4611      	mov	r1, r2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 f830 	bl	8005718 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 80006b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006bc:	f001 f900 	bl	80018c0 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MIN_Thrust);
 80006c0:	4b7b      	ldr	r3, [pc, #492]	; (80008b0 <Thrust_Init+0x21c>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d105      	bne.n	80006d4 <Thrust_Init+0x40>
 80006c8:	4b79      	ldr	r3, [pc, #484]	; (80008b0 <Thrust_Init+0x21c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2264      	movs	r2, #100	; 0x64
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
 80006d2:	e02c      	b.n	800072e <Thrust_Init+0x9a>
 80006d4:	4b76      	ldr	r3, [pc, #472]	; (80008b0 <Thrust_Init+0x21c>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	2b04      	cmp	r3, #4
 80006da:	d105      	bne.n	80006e8 <Thrust_Init+0x54>
 80006dc:	4b74      	ldr	r3, [pc, #464]	; (80008b0 <Thrust_Init+0x21c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	2364      	movs	r3, #100	; 0x64
 80006e4:	6393      	str	r3, [r2, #56]	; 0x38
 80006e6:	e022      	b.n	800072e <Thrust_Init+0x9a>
 80006e8:	4b71      	ldr	r3, [pc, #452]	; (80008b0 <Thrust_Init+0x21c>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	2b08      	cmp	r3, #8
 80006ee:	d105      	bne.n	80006fc <Thrust_Init+0x68>
 80006f0:	4b6f      	ldr	r3, [pc, #444]	; (80008b0 <Thrust_Init+0x21c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006fa:	e018      	b.n	800072e <Thrust_Init+0x9a>
 80006fc:	4b6c      	ldr	r3, [pc, #432]	; (80008b0 <Thrust_Init+0x21c>)
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	2b0c      	cmp	r3, #12
 8000702:	d105      	bne.n	8000710 <Thrust_Init+0x7c>
 8000704:	4b6a      	ldr	r3, [pc, #424]	; (80008b0 <Thrust_Init+0x21c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	2364      	movs	r3, #100	; 0x64
 800070c:	6413      	str	r3, [r2, #64]	; 0x40
 800070e:	e00e      	b.n	800072e <Thrust_Init+0x9a>
 8000710:	4b67      	ldr	r3, [pc, #412]	; (80008b0 <Thrust_Init+0x21c>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	2b10      	cmp	r3, #16
 8000716:	d105      	bne.n	8000724 <Thrust_Init+0x90>
 8000718:	4b65      	ldr	r3, [pc, #404]	; (80008b0 <Thrust_Init+0x21c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	2364      	movs	r3, #100	; 0x64
 8000720:	6593      	str	r3, [r2, #88]	; 0x58
 8000722:	e004      	b.n	800072e <Thrust_Init+0x9a>
 8000724:	4b62      	ldr	r3, [pc, #392]	; (80008b0 <Thrust_Init+0x21c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MIN_Thrust);
 800072e:	4b61      	ldr	r3, [pc, #388]	; (80008b4 <Thrust_Init+0x220>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d105      	bne.n	8000742 <Thrust_Init+0xae>
 8000736:	4b5f      	ldr	r3, [pc, #380]	; (80008b4 <Thrust_Init+0x220>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2264      	movs	r2, #100	; 0x64
 800073e:	635a      	str	r2, [r3, #52]	; 0x34
 8000740:	e02c      	b.n	800079c <Thrust_Init+0x108>
 8000742:	4b5c      	ldr	r3, [pc, #368]	; (80008b4 <Thrust_Init+0x220>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	2b04      	cmp	r3, #4
 8000748:	d105      	bne.n	8000756 <Thrust_Init+0xc2>
 800074a:	4b5a      	ldr	r3, [pc, #360]	; (80008b4 <Thrust_Init+0x220>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	6393      	str	r3, [r2, #56]	; 0x38
 8000754:	e022      	b.n	800079c <Thrust_Init+0x108>
 8000756:	4b57      	ldr	r3, [pc, #348]	; (80008b4 <Thrust_Init+0x220>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	2b08      	cmp	r3, #8
 800075c:	d105      	bne.n	800076a <Thrust_Init+0xd6>
 800075e:	4b55      	ldr	r3, [pc, #340]	; (80008b4 <Thrust_Init+0x220>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000768:	e018      	b.n	800079c <Thrust_Init+0x108>
 800076a:	4b52      	ldr	r3, [pc, #328]	; (80008b4 <Thrust_Init+0x220>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	2b0c      	cmp	r3, #12
 8000770:	d105      	bne.n	800077e <Thrust_Init+0xea>
 8000772:	4b50      	ldr	r3, [pc, #320]	; (80008b4 <Thrust_Init+0x220>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	2364      	movs	r3, #100	; 0x64
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
 800077c:	e00e      	b.n	800079c <Thrust_Init+0x108>
 800077e:	4b4d      	ldr	r3, [pc, #308]	; (80008b4 <Thrust_Init+0x220>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	2b10      	cmp	r3, #16
 8000784:	d105      	bne.n	8000792 <Thrust_Init+0xfe>
 8000786:	4b4b      	ldr	r3, [pc, #300]	; (80008b4 <Thrust_Init+0x220>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	6593      	str	r3, [r2, #88]	; 0x58
 8000790:	e004      	b.n	800079c <Thrust_Init+0x108>
 8000792:	4b48      	ldr	r3, [pc, #288]	; (80008b4 <Thrust_Init+0x220>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	2364      	movs	r3, #100	; 0x64
 800079a:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(1000);
 800079c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a0:	f001 f88e 	bl	80018c0 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MAX_Thrust);
 80007a4:	4b42      	ldr	r3, [pc, #264]	; (80008b0 <Thrust_Init+0x21c>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d105      	bne.n	80007b8 <Thrust_Init+0x124>
 80007ac:	4b40      	ldr	r3, [pc, #256]	; (80008b0 <Thrust_Init+0x21c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2232      	movs	r2, #50	; 0x32
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
 80007b6:	e02c      	b.n	8000812 <Thrust_Init+0x17e>
 80007b8:	4b3d      	ldr	r3, [pc, #244]	; (80008b0 <Thrust_Init+0x21c>)
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	2b04      	cmp	r3, #4
 80007be:	d105      	bne.n	80007cc <Thrust_Init+0x138>
 80007c0:	4b3b      	ldr	r3, [pc, #236]	; (80008b0 <Thrust_Init+0x21c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	2332      	movs	r3, #50	; 0x32
 80007c8:	6393      	str	r3, [r2, #56]	; 0x38
 80007ca:	e022      	b.n	8000812 <Thrust_Init+0x17e>
 80007cc:	4b38      	ldr	r3, [pc, #224]	; (80008b0 <Thrust_Init+0x21c>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	2b08      	cmp	r3, #8
 80007d2:	d105      	bne.n	80007e0 <Thrust_Init+0x14c>
 80007d4:	4b36      	ldr	r3, [pc, #216]	; (80008b0 <Thrust_Init+0x21c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	2332      	movs	r3, #50	; 0x32
 80007dc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80007de:	e018      	b.n	8000812 <Thrust_Init+0x17e>
 80007e0:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <Thrust_Init+0x21c>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	2b0c      	cmp	r3, #12
 80007e6:	d105      	bne.n	80007f4 <Thrust_Init+0x160>
 80007e8:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <Thrust_Init+0x21c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	2332      	movs	r3, #50	; 0x32
 80007f0:	6413      	str	r3, [r2, #64]	; 0x40
 80007f2:	e00e      	b.n	8000812 <Thrust_Init+0x17e>
 80007f4:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <Thrust_Init+0x21c>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	2b10      	cmp	r3, #16
 80007fa:	d105      	bne.n	8000808 <Thrust_Init+0x174>
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <Thrust_Init+0x21c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	2332      	movs	r3, #50	; 0x32
 8000804:	6593      	str	r3, [r2, #88]	; 0x58
 8000806:	e004      	b.n	8000812 <Thrust_Init+0x17e>
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <Thrust_Init+0x21c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	2332      	movs	r3, #50	; 0x32
 8000810:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MAX_Thrust);
 8000812:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <Thrust_Init+0x220>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d105      	bne.n	8000826 <Thrust_Init+0x192>
 800081a:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <Thrust_Init+0x220>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2232      	movs	r2, #50	; 0x32
 8000822:	635a      	str	r2, [r3, #52]	; 0x34
 8000824:	e02c      	b.n	8000880 <Thrust_Init+0x1ec>
 8000826:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <Thrust_Init+0x220>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b04      	cmp	r3, #4
 800082c:	d105      	bne.n	800083a <Thrust_Init+0x1a6>
 800082e:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <Thrust_Init+0x220>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	2332      	movs	r3, #50	; 0x32
 8000836:	6393      	str	r3, [r2, #56]	; 0x38
 8000838:	e022      	b.n	8000880 <Thrust_Init+0x1ec>
 800083a:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <Thrust_Init+0x220>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2b08      	cmp	r3, #8
 8000840:	d105      	bne.n	800084e <Thrust_Init+0x1ba>
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <Thrust_Init+0x220>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	2332      	movs	r3, #50	; 0x32
 800084a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800084c:	e018      	b.n	8000880 <Thrust_Init+0x1ec>
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <Thrust_Init+0x220>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b0c      	cmp	r3, #12
 8000854:	d105      	bne.n	8000862 <Thrust_Init+0x1ce>
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <Thrust_Init+0x220>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	2332      	movs	r3, #50	; 0x32
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
 8000860:	e00e      	b.n	8000880 <Thrust_Init+0x1ec>
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <Thrust_Init+0x220>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2b10      	cmp	r3, #16
 8000868:	d105      	bne.n	8000876 <Thrust_Init+0x1e2>
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <Thrust_Init+0x220>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	2332      	movs	r3, #50	; 0x32
 8000872:	6593      	str	r3, [r2, #88]	; 0x58
 8000874:	e004      	b.n	8000880 <Thrust_Init+0x1ec>
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <Thrust_Init+0x220>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	2332      	movs	r3, #50	; 0x32
 800087e:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_Delay(1000);
 8000880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000884:	f001 f81c 	bl	80018c0 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MIN_Thrust);
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <Thrust_Init+0x21c>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d105      	bne.n	800089c <Thrust_Init+0x208>
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <Thrust_Init+0x21c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2264      	movs	r2, #100	; 0x64
 8000898:	635a      	str	r2, [r3, #52]	; 0x34
 800089a:	e030      	b.n	80008fe <Thrust_Init+0x26a>
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <Thrust_Init+0x21c>)
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d109      	bne.n	80008b8 <Thrust_Init+0x224>
 80008a4:	4b02      	ldr	r3, [pc, #8]	; (80008b0 <Thrust_Init+0x21c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	2364      	movs	r3, #100	; 0x64
 80008ac:	6393      	str	r3, [r2, #56]	; 0x38
 80008ae:	e026      	b.n	80008fe <Thrust_Init+0x26a>
 80008b0:	24000000 	.word	0x24000000
 80008b4:	24000008 	.word	0x24000008
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <Thrust_Init+0x2e4>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b08      	cmp	r3, #8
 80008be:	d105      	bne.n	80008cc <Thrust_Init+0x238>
 80008c0:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <Thrust_Init+0x2e4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	2364      	movs	r3, #100	; 0x64
 80008c8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008ca:	e018      	b.n	80008fe <Thrust_Init+0x26a>
 80008cc:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <Thrust_Init+0x2e4>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2b0c      	cmp	r3, #12
 80008d2:	d105      	bne.n	80008e0 <Thrust_Init+0x24c>
 80008d4:	4b28      	ldr	r3, [pc, #160]	; (8000978 <Thrust_Init+0x2e4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	2364      	movs	r3, #100	; 0x64
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	e00e      	b.n	80008fe <Thrust_Init+0x26a>
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <Thrust_Init+0x2e4>)
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2b10      	cmp	r3, #16
 80008e6:	d105      	bne.n	80008f4 <Thrust_Init+0x260>
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <Thrust_Init+0x2e4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	2364      	movs	r3, #100	; 0x64
 80008f0:	6593      	str	r3, [r2, #88]	; 0x58
 80008f2:	e004      	b.n	80008fe <Thrust_Init+0x26a>
 80008f4:	4b20      	ldr	r3, [pc, #128]	; (8000978 <Thrust_Init+0x2e4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	2364      	movs	r3, #100	; 0x64
 80008fc:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MIN_Thrust);
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <Thrust_Init+0x2e8>)
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d105      	bne.n	8000912 <Thrust_Init+0x27e>
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <Thrust_Init+0x2e8>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2264      	movs	r2, #100	; 0x64
 800090e:	635a      	str	r2, [r3, #52]	; 0x34
 8000910:	e02c      	b.n	800096c <Thrust_Init+0x2d8>
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <Thrust_Init+0x2e8>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	2b04      	cmp	r3, #4
 8000918:	d105      	bne.n	8000926 <Thrust_Init+0x292>
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <Thrust_Init+0x2e8>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	2364      	movs	r3, #100	; 0x64
 8000922:	6393      	str	r3, [r2, #56]	; 0x38
 8000924:	e022      	b.n	800096c <Thrust_Init+0x2d8>
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <Thrust_Init+0x2e8>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b08      	cmp	r3, #8
 800092c:	d105      	bne.n	800093a <Thrust_Init+0x2a6>
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <Thrust_Init+0x2e8>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	2364      	movs	r3, #100	; 0x64
 8000936:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000938:	e018      	b.n	800096c <Thrust_Init+0x2d8>
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <Thrust_Init+0x2e8>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b0c      	cmp	r3, #12
 8000940:	d105      	bne.n	800094e <Thrust_Init+0x2ba>
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <Thrust_Init+0x2e8>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	2364      	movs	r3, #100	; 0x64
 800094a:	6413      	str	r3, [r2, #64]	; 0x40
 800094c:	e00e      	b.n	800096c <Thrust_Init+0x2d8>
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <Thrust_Init+0x2e8>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	2b10      	cmp	r3, #16
 8000954:	d105      	bne.n	8000962 <Thrust_Init+0x2ce>
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <Thrust_Init+0x2e8>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	2364      	movs	r3, #100	; 0x64
 800095e:	6593      	str	r3, [r2, #88]	; 0x58
 8000960:	e004      	b.n	800096c <Thrust_Init+0x2d8>
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <Thrust_Init+0x2e8>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	2364      	movs	r3, #100	; 0x64
 800096a:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(1000);
 800096c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000970:	f000 ffa6 	bl	80018c0 <HAL_Delay>
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	24000000 	.word	0x24000000
 800097c:	24000008 	.word	0x24000008

08000980 <Process_Init>:
void Process_Init(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	Thrust_Init();
 8000984:	f7ff fe86 	bl	8000694 <Thrust_Init>
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <Process>:

void Process(commandMsg* message) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
    AdjustThrust(&TIM_PROP_G, message->thrust);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <Process+0x3c>)
 800099c:	f000 f818 	bl	80009d0 <AdjustThrust>
    AdjustThrust(&TIM_PROP_D, message->thrust);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	4809      	ldr	r0, [pc, #36]	; (80009cc <Process+0x40>)
 80009a8:	f000 f812 	bl	80009d0 <AdjustThrust>
    AdjustAngle(message->thrust,message->angle);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	781a      	ldrb	r2, [r3, #0]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80009b6:	4619      	mov	r1, r3
 80009b8:	4610      	mov	r0, r2
 80009ba:	f000 f885 	bl	8000ac8 <AdjustAngle>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	24000000 	.word	0x24000000
 80009cc:	24000008 	.word	0x24000008

080009d0 <AdjustThrust>:

void AdjustThrust(struct TIM_PROP* tim_prop, uint8_t thrust) {
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]
	float thrust_ms = 1-(thrust * ((float)(MIN_Thrust - MAX_Thrust) / 100.0)) + MIN_Thrust;
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	ee07 3a90 	vmov	s15, r3
 80009e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009e6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80009ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009ee:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80009f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80009f6:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8000ac0 <AdjustThrust+0xf0>
 80009fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a02:	edc7 7a03 	vstr	s15, [r7, #12]
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d10a      	bne.n	8000a24 <AdjustThrust+0x54>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a1c:	ee17 2a90 	vmov	r2, s15
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a22:	e045      	b.n	8000ab0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	d10a      	bne.n	8000a42 <AdjustThrust+0x72>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a3a:	ee17 3a90 	vmov	r3, s15
 8000a3e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000a40:	e036      	b.n	8000ab0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2b08      	cmp	r3, #8
 8000a48:	d10a      	bne.n	8000a60 <AdjustThrust+0x90>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a58:	ee17 3a90 	vmov	r3, s15
 8000a5c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000a5e:	e027      	b.n	8000ab0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b0c      	cmp	r3, #12
 8000a66:	d10a      	bne.n	8000a7e <AdjustThrust+0xae>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a76:	ee17 3a90 	vmov	r3, s15
 8000a7a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a7c:	e018      	b.n	8000ab0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	2b10      	cmp	r3, #16
 8000a84:	d10a      	bne.n	8000a9c <AdjustThrust+0xcc>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a94:	ee17 3a90 	vmov	r3, s15
 8000a98:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000a9a:	e009      	b.n	8000ab0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aaa:	ee17 3a90 	vmov	r3, s15
 8000aae:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	f3af 8000 	nop.w
 8000ac0:	00000000 	.word	0x00000000
 8000ac4:	40590000 	.word	0x40590000

08000ac8 <AdjustAngle>:

void AdjustAngle(uint8_t thrust,int8_t angle){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	71bb      	strb	r3, [r7, #6]
	uint8_t thrust_G = thrust;
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	73fb      	strb	r3, [r7, #15]
	uint8_t thrust_D = thrust;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	73bb      	strb	r3, [r7, #14]

	if (angle<50){//On tourne a gauche
 8000ae0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ae4:	2b31      	cmp	r3, #49	; 0x31
 8000ae6:	dc03      	bgt.n	8000af0 <AdjustAngle+0x28>
		thrust_G = thrust;
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	73fb      	strb	r3, [r7, #15]
		thrust_D = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	73bb      	strb	r3, [r7, #14]
	}
	if (angle>50){//On tourne a droite
 8000af0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000af4:	2b32      	cmp	r3, #50	; 0x32
 8000af6:	dd03      	ble.n	8000b00 <AdjustAngle+0x38>
		thrust_G = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	73fb      	strb	r3, [r7, #15]
		thrust_D = thrust;
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	73bb      	strb	r3, [r7, #14]
	}
	AdjustThrust(&TIM_PROP_G, thrust_G);
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <AdjustAngle+0x54>)
 8000b06:	f7ff ff63 	bl	80009d0 <AdjustThrust>
	AdjustThrust(&TIM_PROP_D, thrust_D);
 8000b0a:	7bbb      	ldrb	r3, [r7, #14]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4804      	ldr	r0, [pc, #16]	; (8000b20 <AdjustAngle+0x58>)
 8000b10:	f7ff ff5e 	bl	80009d0 <AdjustThrust>
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	24000000 	.word	0x24000000
 8000b20:	24000008 	.word	0x24000008

08000b24 <RPICom_Init>:
#include <RPICom.h>

//uint8_t uartRpiRxBuffer[UART_RPI_RX_BUFFER_SIZE];
//commandMsg binaryMessage;
RPICom_HandleTypeDef hRPICom;
void RPICom_Init(UART_HandleTypeDef* huart, UART_HandleTypeDef* huartDebug){
 8000b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
	hRPICom.huart = huart;
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <RPICom_Init+0x68>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6013      	str	r3, [r2, #0]
	hRPICom.huartDebug = huartDebug;
 8000b34:	4a15      	ldr	r2, [pc, #84]	; (8000b8c <RPICom_Init+0x68>)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	6053      	str	r3, [r2, #4]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	681b      	ldr	r3, [r3, #0]
	memcpy(&(hRPICom.binaryMessage), NULL, sizeof(commandMsg));
 8000b3e:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <RPICom_Init+0x68>)
 8000b40:	6093      	str	r3, [r2, #8]
	hRPICom.errorNumber = 0;
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <RPICom_Init+0x68>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	731a      	strb	r2, [r3, #12]
	memcpy(hRPICom.RxBuffer, NULL, UART_RPI_RX_BUFFER_SIZE);
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <RPICom_Init+0x68>)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f103 020d 	add.w	r2, r3, #13
 8000b50:	460b      	mov	r3, r1
 8000b52:	cb03      	ldmia	r3!, {r0, r1}
 8000b54:	6010      	str	r0, [r2, #0]
 8000b56:	6051      	str	r1, [r2, #4]
	memcpy(hRPICom.TxBuffer, NULL, UART_RPI_TX_BUFFER_SIZE);
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <RPICom_Init+0x68>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4614      	mov	r4, r2
 8000b5e:	f103 0c15 	add.w	ip, r3, #21
 8000b62:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8000b66:	4665      	mov	r5, ip
 8000b68:	4626      	mov	r6, r4
 8000b6a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b6c:	6028      	str	r0, [r5, #0]
 8000b6e:	6069      	str	r1, [r5, #4]
 8000b70:	60aa      	str	r2, [r5, #8]
 8000b72:	60eb      	str	r3, [r5, #12]
 8000b74:	3410      	adds	r4, #16
 8000b76:	f10c 0c10 	add.w	ip, ip, #16
 8000b7a:	4574      	cmp	r4, lr
 8000b7c:	d1f3      	bne.n	8000b66 <RPICom_Init+0x42>
	RPICom_UartActivate(&hRPICom);
 8000b7e:	4803      	ldr	r0, [pc, #12]	; (8000b8c <RPICom_Init+0x68>)
 8000b80:	f000 f806 	bl	8000b90 <RPICom_UartActivate>
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b8c:	240000a0 	.word	0x240000a0

08000b90 <RPICom_UartActivate>:

void RPICom_UartActivate(RPICom_HandleTypeDef* hRPI){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(hRPI->huart, hRPI->RxBuffer, UART_RPI_RX_BUFFER_SIZE);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6818      	ldr	r0, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	330d      	adds	r3, #13
 8000ba0:	2208      	movs	r2, #8
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f005 fe72 	bl	800688c <HAL_UART_Receive_IT>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <checkSum>:

uint8_t checkSum(void){
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
	uint8_t checkSum = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < UART_RPI_RX_BUFFER_SIZE-1; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	e00a      	b.n	8000bd6 <checkSum+0x26>
		checkSum ^= hRPICom.RxBuffer[i];
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <checkSum+0x3c>)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	330d      	adds	r3, #13
 8000bc8:	781a      	ldrb	r2, [r3, #0]
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	4053      	eors	r3, r2
 8000bce:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < UART_RPI_RX_BUFFER_SIZE-1; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	2b06      	cmp	r3, #6
 8000bda:	ddf1      	ble.n	8000bc0 <checkSum+0x10>
	}
	return checkSum;
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	240000a0 	.word	0x240000a0

08000bf0 <RPICom_DecodeBinaryMessage>:

void RPICom_DecodeBinaryMessage(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af04      	add	r7, sp, #16
	hRPICom.errorNumber = '0';
 8000bf6:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000bf8:	2230      	movs	r2, #48	; 0x30
 8000bfa:	731a      	strb	r2, [r3, #12]
	// Check Header
	if (HEADER_CheckValue1 != hRPICom.RxBuffer[0] || HEADER_CheckValue2 != hRPICom.RxBuffer[1]){//On envoie une erreur à la raspberry
 8000bfc:	4b2f      	ldr	r3, [pc, #188]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000bfe:	7b5b      	ldrb	r3, [r3, #13]
 8000c00:	2bff      	cmp	r3, #255	; 0xff
 8000c02:	d103      	bne.n	8000c0c <RPICom_DecodeBinaryMessage+0x1c>
 8000c04:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000c06:	7b9b      	ldrb	r3, [r3, #14]
 8000c08:	2bfe      	cmp	r3, #254	; 0xfe
 8000c0a:	d002      	beq.n	8000c12 <RPICom_DecodeBinaryMessage+0x22>
		hRPICom.errorNumber ='1';
 8000c0c:	4b2b      	ldr	r3, [pc, #172]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000c0e:	2231      	movs	r2, #49	; 0x31
 8000c10:	731a      	strb	r2, [r3, #12]
	}
	// Check Length
	if (UART_RPI_RX_BUFFER_SIZE != hRPICom.RxBuffer[2]){// Il nous manque des informations
 8000c12:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000c14:	7bdb      	ldrb	r3, [r3, #15]
 8000c16:	2b08      	cmp	r3, #8
 8000c18:	d002      	beq.n	8000c20 <RPICom_DecodeBinaryMessage+0x30>
		hRPICom.errorNumber='2';
 8000c1a:	4b28      	ldr	r3, [pc, #160]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000c1c:	2232      	movs	r2, #50	; 0x32
 8000c1e:	731a      	strb	r2, [r3, #12]
	}
	hRPICom.binaryMessage.thrust = hRPICom.RxBuffer[3];
 8000c20:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000c22:	7c1a      	ldrb	r2, [r3, #16]
 8000c24:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000c26:	721a      	strb	r2, [r3, #8]
	hRPICom.binaryMessage.angle = hRPICom.RxBuffer[4];
 8000c28:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000c2a:	7c5b      	ldrb	r3, [r3, #17]
 8000c2c:	b25a      	sxtb	r2, r3
 8000c2e:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000c30:	725a      	strb	r2, [r3, #9]
	hRPICom.binaryMessage.depth = hRPICom.RxBuffer[5];
 8000c32:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000c34:	7c9a      	ldrb	r2, [r3, #18]
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000c38:	729a      	strb	r2, [r3, #10]
	hRPICom.binaryMessage.paquetNumber = hRPICom.RxBuffer[6];
 8000c3a:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000c3c:	7cda      	ldrb	r2, [r3, #19]
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000c40:	72da      	strb	r2, [r3, #11]

	//Checksum
	if(checkSum() !=  hRPICom.RxBuffer[7]){
 8000c42:	f7ff ffb5 	bl	8000bb0 <checkSum>
 8000c46:	4603      	mov	r3, r0
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000c4c:	7d1b      	ldrb	r3, [r3, #20]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d002      	beq.n	8000c58 <RPICom_DecodeBinaryMessage+0x68>
		hRPICom.errorNumber='3';
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000c54:	2233      	movs	r2, #51	; 0x33
 8000c56:	731a      	strb	r2, [r3, #12]
	}

	//Response RPI
	uint8_t stringLength = snprintf((char *)hRPICom.TxBuffer, UART_RPI_TX_BUFFER_SIZE, "Paquet: %u\r\nThrust: %u \ Angle: %u\r\nStatut: %c\r\n", hRPICom.binaryMessage.paquetNumber,hRPICom.binaryMessage.thrust,hRPICom.binaryMessage.angle,hRPICom.errorNumber);
 8000c58:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000c5a:	7adb      	ldrb	r3, [r3, #11]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000c60:	7a1b      	ldrb	r3, [r3, #8]
 8000c62:	461a      	mov	r2, r3
 8000c64:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000c66:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000c6e:	7b1b      	ldrb	r3, [r3, #12]
 8000c70:	9302      	str	r3, [sp, #8]
 8000c72:	9101      	str	r1, [sp, #4]
 8000c74:	9200      	str	r2, [sp, #0]
 8000c76:	4603      	mov	r3, r0
 8000c78:	4a11      	ldr	r2, [pc, #68]	; (8000cc0 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c7a:	2140      	movs	r1, #64	; 0x40
 8000c7c:	4811      	ldr	r0, [pc, #68]	; (8000cc4 <RPICom_DecodeBinaryMessage+0xd4>)
 8000c7e:	f008 fa85 	bl	800918c <sniprintf>
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	hRPICom.TxBuffer[UART_RPI_TX_BUFFER_SIZE-1] = 0; //Securité de print
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	HAL_UART_Transmit(hRPICom.huartDebug, hRPICom.TxBuffer, stringLength, 10);
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000c90:	6858      	ldr	r0, [r3, #4]
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	230a      	movs	r3, #10
 8000c98:	490a      	ldr	r1, [pc, #40]	; (8000cc4 <RPICom_DecodeBinaryMessage+0xd4>)
 8000c9a:	f005 fd69 	bl	8006770 <HAL_UART_Transmit>


	// Vous avez maintenant un message complet dans la structure BinaryMessage
	// Vous pouvez faire quelque chose avec ces données, par exemple, appeler une fonction de traitement

	if (hRPICom.errorNumber =='0'){
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000ca0:	7b1b      	ldrb	r3, [r3, #12]
 8000ca2:	2b30      	cmp	r3, #48	; 0x30
 8000ca4:	d102      	bne.n	8000cac <RPICom_DecodeBinaryMessage+0xbc>
		Process(&hRPICom.binaryMessage);
 8000ca6:	4808      	ldr	r0, [pc, #32]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd8>)
 8000ca8:	f7ff fe70 	bl	800098c <Process>
	}
	RPICom_UartActivate(&hRPICom);
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <RPICom_DecodeBinaryMessage+0xcc>)
 8000cae:	f7ff ff6f 	bl	8000b90 <RPICom_UartActivate>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	240000a0 	.word	0x240000a0
 8000cc0:	08009aa8 	.word	0x08009aa8
 8000cc4:	240000b5 	.word	0x240000b5
 8000cc8:	240000a8 	.word	0x240000a8

08000ccc <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08e      	sub	sp, #56	; 0x38
 8000cd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce2:	4b80      	ldr	r3, [pc, #512]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000ce4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ce8:	4a7e      	ldr	r2, [pc, #504]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cf2:	4b7c      	ldr	r3, [pc, #496]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000cf4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	623b      	str	r3, [r7, #32]
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d00:	4b78      	ldr	r3, [pc, #480]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000d02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d06:	4a77      	ldr	r2, [pc, #476]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000d08:	f043 0320 	orr.w	r3, r3, #32
 8000d0c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d10:	4b74      	ldr	r3, [pc, #464]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000d12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d16:	f003 0320 	and.w	r3, r3, #32
 8000d1a:	61fb      	str	r3, [r7, #28]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1e:	4b71      	ldr	r3, [pc, #452]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000d20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d24:	4a6f      	ldr	r2, [pc, #444]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d2e:	4b6d      	ldr	r3, [pc, #436]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000d30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d38:	61bb      	str	r3, [r7, #24]
 8000d3a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3c:	4b69      	ldr	r3, [pc, #420]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000d3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d42:	4a68      	ldr	r2, [pc, #416]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d4c:	4b65      	ldr	r3, [pc, #404]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000d4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	4b62      	ldr	r3, [pc, #392]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000d5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d60:	4a60      	ldr	r2, [pc, #384]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000d62:	f043 0302 	orr.w	r3, r3, #2
 8000d66:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d6a:	4b5e      	ldr	r3, [pc, #376]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000d6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d78:	4b5a      	ldr	r3, [pc, #360]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000d7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d7e:	4a59      	ldr	r2, [pc, #356]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d88:	4b56      	ldr	r3, [pc, #344]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000d8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d96:	4b53      	ldr	r3, [pc, #332]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000d98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d9c:	4a51      	ldr	r2, [pc, #324]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000da6:	4b4f      	ldr	r3, [pc, #316]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000da8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db4:	4b4b      	ldr	r3, [pc, #300]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000db6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dba:	4a4a      	ldr	r2, [pc, #296]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000dbc:	f043 0310 	orr.w	r3, r3, #16
 8000dc0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dc4:	4b47      	ldr	r3, [pc, #284]	; (8000ee4 <MX_GPIO_Init+0x218>)
 8000dc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dca:	f003 0310 	and.w	r3, r3, #16
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd8:	4843      	ldr	r0, [pc, #268]	; (8000ee8 <MX_GPIO_Init+0x21c>)
 8000dda:	f001 fdb9 	bl	8002950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f244 0101 	movw	r1, #16385	; 0x4001
 8000de4:	4841      	ldr	r0, [pc, #260]	; (8000eec <MX_GPIO_Init+0x220>)
 8000de6:	f001 fdb3 	bl	8002950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2102      	movs	r1, #2
 8000dee:	4840      	ldr	r0, [pc, #256]	; (8000ef0 <MX_GPIO_Init+0x224>)
 8000df0:	f001 fdae 	bl	8002950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000df4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e06:	4619      	mov	r1, r3
 8000e08:	483a      	ldr	r0, [pc, #232]	; (8000ef4 <MX_GPIO_Init+0x228>)
 8000e0a:	f001 fbf1 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	4619      	mov	r1, r3
 8000e26:	4830      	ldr	r0, [pc, #192]	; (8000ee8 <MX_GPIO_Init+0x21c>)
 8000e28:	f001 fbe2 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e2c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	4829      	ldr	r0, [pc, #164]	; (8000eec <MX_GPIO_Init+0x220>)
 8000e46:	f001 fbd3 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4826      	ldr	r0, [pc, #152]	; (8000ef8 <MX_GPIO_Init+0x22c>)
 8000e60:	f001 fbc6 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e76:	4619      	mov	r1, r3
 8000e78:	4820      	ldr	r0, [pc, #128]	; (8000efc <MX_GPIO_Init+0x230>)
 8000e7a:	f001 fbb9 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000e90:	230a      	movs	r3, #10
 8000e92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4818      	ldr	r0, [pc, #96]	; (8000efc <MX_GPIO_Init+0x230>)
 8000e9c:	f001 fba8 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000ea0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4810      	ldr	r0, [pc, #64]	; (8000efc <MX_GPIO_Init+0x230>)
 8000eba:	f001 fb99 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <MX_GPIO_Init+0x224>)
 8000ed6:	f001 fb8b 	bl	80025f0 <HAL_GPIO_Init>

}
 8000eda:	bf00      	nop
 8000edc:	3738      	adds	r7, #56	; 0x38
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	58024400 	.word	0x58024400
 8000ee8:	58021400 	.word	0x58021400
 8000eec:	58020400 	.word	0x58020400
 8000ef0:	58021000 	.word	0x58021000
 8000ef4:	58020800 	.word	0x58020800
 8000ef8:	58021800 	.word	0x58021800
 8000efc:	58020000 	.word	0x58020000

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f000 fc4a 	bl	800179c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f830 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f7ff fede 	bl	8000ccc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f10:	f000 faca 	bl	80014a8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000f14:	f000 fc10 	bl	8001738 <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 8000f18:	f000 fa7a 	bl	8001410 <MX_UART4_Init>
  MX_TIM2_Init();
 8000f1c:	f000 f99e 	bl	800125c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, "\nStarting...\r\n", 14, 10);
 8000f20:	230a      	movs	r3, #10
 8000f22:	220e      	movs	r2, #14
 8000f24:	490c      	ldr	r1, [pc, #48]	; (8000f58 <main+0x58>)
 8000f26:	480d      	ldr	r0, [pc, #52]	; (8000f5c <main+0x5c>)
 8000f28:	f005 fc22 	bl	8006770 <HAL_UART_Transmit>
	Process_Init();
 8000f2c:	f7ff fd28 	bl	8000980 <Process_Init>
	RPICom_Init(&huart4, &huart3);
 8000f30:	490a      	ldr	r1, [pc, #40]	; (8000f5c <main+0x5c>)
 8000f32:	480b      	ldr	r0, [pc, #44]	; (8000f60 <main+0x60>)
 8000f34:	f7ff fdf6 	bl	8000b24 <RPICom_Init>
	HAL_UART_Transmit(&huart3, "Init Done\r\n", 11, 10);
 8000f38:	230a      	movs	r3, #10
 8000f3a:	220b      	movs	r2, #11
 8000f3c:	4909      	ldr	r1, [pc, #36]	; (8000f64 <main+0x64>)
 8000f3e:	4807      	ldr	r0, [pc, #28]	; (8000f5c <main+0x5c>)
 8000f40:	f005 fc16 	bl	8006770 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); //toggle the user led Green which is connected to GPIO PA5
 8000f44:	2101      	movs	r1, #1
 8000f46:	4808      	ldr	r0, [pc, #32]	; (8000f68 <main+0x68>)
 8000f48:	f001 fd1b 	bl	8002982 <HAL_GPIO_TogglePin>
		HAL_Delay(500); //delay 500 millisecond
 8000f4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f50:	f000 fcb6 	bl	80018c0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); //toggle the user led Green which is connected to GPIO PA5
 8000f54:	e7f6      	b.n	8000f44 <main+0x44>
 8000f56:	bf00      	nop
 8000f58:	08009adc 	.word	0x08009adc
 8000f5c:	240001dc 	.word	0x240001dc
 8000f60:	24000148 	.word	0x24000148
 8000f64:	08009aec 	.word	0x08009aec
 8000f68:	58020400 	.word	0x58020400

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b09c      	sub	sp, #112	; 0x70
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f76:	224c      	movs	r2, #76	; 0x4c
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f008 f8fe 	bl	800917c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2220      	movs	r2, #32
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f008 f8f8 	bl	800917c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000f8c:	4b30      	ldr	r3, [pc, #192]	; (8001050 <SystemClock_Config+0xe4>)
 8000f8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f96:	2004      	movs	r0, #4
 8000f98:	f001 fd0e 	bl	80029b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <SystemClock_Config+0xe8>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a2b      	ldr	r2, [pc, #172]	; (8001054 <SystemClock_Config+0xe8>)
 8000fa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b29      	ldr	r3, [pc, #164]	; (8001054 <SystemClock_Config+0xe8>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fb8:	bf00      	nop
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <SystemClock_Config+0xe8>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fc6:	d1f8      	bne.n	8000fba <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000fc8:	2321      	movs	r3, #33	; 0x21
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fcc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000fe2:	2318      	movs	r3, #24
 8000fe4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fea:	2304      	movs	r3, #4
 8000fec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ff2:	230c      	movs	r3, #12
 8000ff4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001002:	4618      	mov	r0, r3
 8001004:	f001 fd32 	bl	8002a6c <HAL_RCC_OscConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800100e:	f000 f823 	bl	8001058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001012:	233f      	movs	r3, #63	; 0x3f
 8001014:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001016:	2303      	movs	r3, #3
 8001018:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2102      	movs	r1, #2
 8001036:	4618      	mov	r0, r3
 8001038:	f002 f94a 	bl	80032d0 <HAL_RCC_ClockConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001042:	f000 f809 	bl	8001058 <Error_Handler>
  }
}
 8001046:	bf00      	nop
 8001048:	3770      	adds	r7, #112	; 0x70
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58024400 	.word	0x58024400
 8001054:	58024800 	.word	0x58024800

08001058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
}
 800105e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001060:	e7fe      	b.n	8001060 <Error_Handler+0x8>
	...

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_MspInit+0x30>)
 800106c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001070:	4a08      	ldr	r2, [pc, #32]	; (8001094 <HAL_MspInit+0x30>)
 8001072:	f043 0302 	orr.w	r3, r3, #2
 8001076:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_MspInit+0x30>)
 800107c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	58024400 	.word	0x58024400

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800109c:	e7fe      	b.n	800109c <NMI_Handler+0x4>

0800109e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <MemManage_Handler+0x4>

080010aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e4:	f000 fbcc 	bl	8001880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}

080010ec <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <UART4_IRQHandler+0x10>)
 80010f2:	f005 fc17 	bl	8006924 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  /* USER CODE END UART4_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	24000148 	.word	0x24000148

08001100 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001108:	4a14      	ldr	r2, [pc, #80]	; (800115c <_sbrk+0x5c>)
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <_sbrk+0x60>)
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d102      	bne.n	8001122 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <_sbrk+0x64>)
 800111e:	4a12      	ldr	r2, [pc, #72]	; (8001168 <_sbrk+0x68>)
 8001120:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	429a      	cmp	r2, r3
 800112e:	d207      	bcs.n	8001140 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001130:	f007 fffa 	bl	8009128 <__errno>
 8001134:	4603      	mov	r3, r0
 8001136:	220c      	movs	r2, #12
 8001138:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800113e:	e009      	b.n	8001154 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <_sbrk+0x64>)
 8001150:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001152:	68fb      	ldr	r3, [r7, #12]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	24100000 	.word	0x24100000
 8001160:	00000400 	.word	0x00000400
 8001164:	240000f8 	.word	0x240000f8
 8001168:	24000288 	.word	0x24000288

0800116c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001170:	4b32      	ldr	r3, [pc, #200]	; (800123c <SystemInit+0xd0>)
 8001172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001176:	4a31      	ldr	r2, [pc, #196]	; (800123c <SystemInit+0xd0>)
 8001178:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800117c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <SystemInit+0xd4>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 030f 	and.w	r3, r3, #15
 8001188:	2b02      	cmp	r3, #2
 800118a:	d807      	bhi.n	800119c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800118c:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <SystemInit+0xd4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f023 030f 	bic.w	r3, r3, #15
 8001194:	4a2a      	ldr	r2, [pc, #168]	; (8001240 <SystemInit+0xd4>)
 8001196:	f043 0303 	orr.w	r3, r3, #3
 800119a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <SystemInit+0xd8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a28      	ldr	r2, [pc, #160]	; (8001244 <SystemInit+0xd8>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <SystemInit+0xd8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <SystemInit+0xd8>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4924      	ldr	r1, [pc, #144]	; (8001244 <SystemInit+0xd8>)
 80011b4:	4b24      	ldr	r3, [pc, #144]	; (8001248 <SystemInit+0xdc>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011ba:	4b21      	ldr	r3, [pc, #132]	; (8001240 <SystemInit+0xd4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d007      	beq.n	80011d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <SystemInit+0xd4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 030f 	bic.w	r3, r3, #15
 80011ce:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <SystemInit+0xd4>)
 80011d0:	f043 0303 	orr.w	r3, r3, #3
 80011d4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <SystemInit+0xd8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <SystemInit+0xd8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <SystemInit+0xd8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <SystemInit+0xd8>)
 80011ea:	4a18      	ldr	r2, [pc, #96]	; (800124c <SystemInit+0xe0>)
 80011ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <SystemInit+0xd8>)
 80011f0:	4a17      	ldr	r2, [pc, #92]	; (8001250 <SystemInit+0xe4>)
 80011f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <SystemInit+0xd8>)
 80011f6:	4a17      	ldr	r2, [pc, #92]	; (8001254 <SystemInit+0xe8>)
 80011f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <SystemInit+0xd8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <SystemInit+0xd8>)
 8001202:	4a14      	ldr	r2, [pc, #80]	; (8001254 <SystemInit+0xe8>)
 8001204:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <SystemInit+0xd8>)
 8001208:	2200      	movs	r2, #0
 800120a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <SystemInit+0xd8>)
 800120e:	4a11      	ldr	r2, [pc, #68]	; (8001254 <SystemInit+0xe8>)
 8001210:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <SystemInit+0xd8>)
 8001214:	2200      	movs	r2, #0
 8001216:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <SystemInit+0xd8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a09      	ldr	r2, [pc, #36]	; (8001244 <SystemInit+0xd8>)
 800121e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001222:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <SystemInit+0xd8>)
 8001226:	2200      	movs	r2, #0
 8001228:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <SystemInit+0xec>)
 800122c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001230:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00
 8001240:	52002000 	.word	0x52002000
 8001244:	58024400 	.word	0x58024400
 8001248:	eaf6ed7f 	.word	0xeaf6ed7f
 800124c:	02020200 	.word	0x02020200
 8001250:	01ff0000 	.word	0x01ff0000
 8001254:	01010280 	.word	0x01010280
 8001258:	52004000 	.word	0x52004000

0800125c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08e      	sub	sp, #56	; 0x38
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127c:	463b      	mov	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]
 800128a:	615a      	str	r2, [r3, #20]
 800128c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800128e:	4b33      	ldr	r3, [pc, #204]	; (800135c <MX_TIM2_Init+0x100>)
 8001290:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001294:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1919;
 8001296:	4b31      	ldr	r3, [pc, #196]	; (800135c <MX_TIM2_Init+0x100>)
 8001298:	f240 727f 	movw	r2, #1919	; 0x77f
 800129c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129e:	4b2f      	ldr	r3, [pc, #188]	; (800135c <MX_TIM2_Init+0x100>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80012a4:	4b2d      	ldr	r3, [pc, #180]	; (800135c <MX_TIM2_Init+0x100>)
 80012a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ac:	4b2b      	ldr	r3, [pc, #172]	; (800135c <MX_TIM2_Init+0x100>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b2:	4b2a      	ldr	r3, [pc, #168]	; (800135c <MX_TIM2_Init+0x100>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b8:	4828      	ldr	r0, [pc, #160]	; (800135c <MX_TIM2_Init+0x100>)
 80012ba:	f004 f975 	bl	80055a8 <HAL_TIM_Base_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80012c4:	f7ff fec8 	bl	8001058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4821      	ldr	r0, [pc, #132]	; (800135c <MX_TIM2_Init+0x100>)
 80012d6:	f004 fc41 	bl	8005b5c <HAL_TIM_ConfigClockSource>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80012e0:	f7ff feba 	bl	8001058 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012e4:	481d      	ldr	r0, [pc, #116]	; (800135c <MX_TIM2_Init+0x100>)
 80012e6:	f004 f9b6 	bl	8005656 <HAL_TIM_PWM_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80012f0:	f7ff feb2 	bl	8001058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4619      	mov	r1, r3
 8001302:	4816      	ldr	r0, [pc, #88]	; (800135c <MX_TIM2_Init+0x100>)
 8001304:	f005 f956 	bl	80065b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800130e:	f7ff fea3 	bl	8001058 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001312:	2360      	movs	r3, #96	; 0x60
 8001314:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001322:	463b      	mov	r3, r7
 8001324:	2200      	movs	r2, #0
 8001326:	4619      	mov	r1, r3
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <MX_TIM2_Init+0x100>)
 800132a:	f004 fb03 	bl	8005934 <HAL_TIM_PWM_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001334:	f7ff fe90 	bl	8001058 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	2204      	movs	r2, #4
 800133c:	4619      	mov	r1, r3
 800133e:	4807      	ldr	r0, [pc, #28]	; (800135c <MX_TIM2_Init+0x100>)
 8001340:	f004 faf8 	bl	8005934 <HAL_TIM_PWM_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800134a:	f7ff fe85 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800134e:	4803      	ldr	r0, [pc, #12]	; (800135c <MX_TIM2_Init+0x100>)
 8001350:	f000 f826 	bl	80013a0 <HAL_TIM_MspPostInit>

}
 8001354:	bf00      	nop
 8001356:	3738      	adds	r7, #56	; 0x38
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	240000fc 	.word	0x240000fc

08001360 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001370:	d10e      	bne.n	8001390 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_TIM_Base_MspInit+0x3c>)
 8001374:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001378:	4a08      	ldr	r2, [pc, #32]	; (800139c <HAL_TIM_Base_MspInit+0x3c>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_TIM_Base_MspInit+0x3c>)
 8001384:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	58024400 	.word	0x58024400

080013a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c0:	d11e      	bne.n	8001400 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_TIM_MspPostInit+0x68>)
 80013c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013c8:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <HAL_TIM_MspPostInit+0x68>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HAL_TIM_MspPostInit+0x68>)
 80013d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80013e0:	2322      	movs	r3, #34	; 0x22
 80013e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013f0:	2301      	movs	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	4619      	mov	r1, r3
 80013fa:	4804      	ldr	r0, [pc, #16]	; (800140c <HAL_TIM_MspPostInit+0x6c>)
 80013fc:	f001 f8f8 	bl	80025f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001400:	bf00      	nop
 8001402:	3720      	adds	r7, #32
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	58024400 	.word	0x58024400
 800140c:	58020000 	.word	0x58020000

08001410 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001414:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <MX_UART4_Init+0x90>)
 8001416:	4a23      	ldr	r2, [pc, #140]	; (80014a4 <MX_UART4_Init+0x94>)
 8001418:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800141a:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <MX_UART4_Init+0x90>)
 800141c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001420:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001422:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <MX_UART4_Init+0x90>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <MX_UART4_Init+0x90>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <MX_UART4_Init+0x90>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001434:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <MX_UART4_Init+0x90>)
 8001436:	220c      	movs	r2, #12
 8001438:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <MX_UART4_Init+0x90>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <MX_UART4_Init+0x90>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <MX_UART4_Init+0x90>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_UART4_Init+0x90>)
 800144e:	2200      	movs	r2, #0
 8001450:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <MX_UART4_Init+0x90>)
 8001454:	2200      	movs	r2, #0
 8001456:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001458:	4811      	ldr	r0, [pc, #68]	; (80014a0 <MX_UART4_Init+0x90>)
 800145a:	f005 f939 	bl	80066d0 <HAL_UART_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001464:	f7ff fdf8 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001468:	2100      	movs	r1, #0
 800146a:	480d      	ldr	r0, [pc, #52]	; (80014a0 <MX_UART4_Init+0x90>)
 800146c:	f007 fd91 	bl	8008f92 <HAL_UARTEx_SetTxFifoThreshold>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001476:	f7ff fdef 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800147a:	2100      	movs	r1, #0
 800147c:	4808      	ldr	r0, [pc, #32]	; (80014a0 <MX_UART4_Init+0x90>)
 800147e:	f007 fdc6 	bl	800900e <HAL_UARTEx_SetRxFifoThreshold>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001488:	f7ff fde6 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800148c:	4804      	ldr	r0, [pc, #16]	; (80014a0 <MX_UART4_Init+0x90>)
 800148e:	f007 fd47 	bl	8008f20 <HAL_UARTEx_DisableFifoMode>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001498:	f7ff fdde 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	24000148 	.word	0x24000148
 80014a4:	40004c00 	.word	0x40004c00

080014a8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014ac:	4b22      	ldr	r3, [pc, #136]	; (8001538 <MX_USART3_UART_Init+0x90>)
 80014ae:	4a23      	ldr	r2, [pc, #140]	; (800153c <MX_USART3_UART_Init+0x94>)
 80014b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <MX_USART3_UART_Init+0x90>)
 80014b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <MX_USART3_UART_Init+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014c0:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <MX_USART3_UART_Init+0x90>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014c6:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <MX_USART3_UART_Init+0x90>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <MX_USART3_UART_Init+0x90>)
 80014ce:	220c      	movs	r2, #12
 80014d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <MX_USART3_UART_Init+0x90>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <MX_USART3_UART_Init+0x90>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <MX_USART3_UART_Init+0x90>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_USART3_UART_Init+0x90>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <MX_USART3_UART_Init+0x90>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014f0:	4811      	ldr	r0, [pc, #68]	; (8001538 <MX_USART3_UART_Init+0x90>)
 80014f2:	f005 f8ed 	bl	80066d0 <HAL_UART_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014fc:	f7ff fdac 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001500:	2100      	movs	r1, #0
 8001502:	480d      	ldr	r0, [pc, #52]	; (8001538 <MX_USART3_UART_Init+0x90>)
 8001504:	f007 fd45 	bl	8008f92 <HAL_UARTEx_SetTxFifoThreshold>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800150e:	f7ff fda3 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001512:	2100      	movs	r1, #0
 8001514:	4808      	ldr	r0, [pc, #32]	; (8001538 <MX_USART3_UART_Init+0x90>)
 8001516:	f007 fd7a 	bl	800900e <HAL_UARTEx_SetRxFifoThreshold>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001520:	f7ff fd9a 	bl	8001058 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001524:	4804      	ldr	r0, [pc, #16]	; (8001538 <MX_USART3_UART_Init+0x90>)
 8001526:	f007 fcfb 	bl	8008f20 <HAL_UARTEx_DisableFifoMode>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001530:	f7ff fd92 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	240001dc 	.word	0x240001dc
 800153c:	40004800 	.word	0x40004800

08001540 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b0be      	sub	sp, #248	; 0xf8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001558:	f107 0320 	add.w	r3, r7, #32
 800155c:	22c0      	movs	r2, #192	; 0xc0
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f007 fe0b 	bl	800917c <memset>
  if(uartHandle->Instance==UART4)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a63      	ldr	r2, [pc, #396]	; (80016f8 <HAL_UART_MspInit+0x1b8>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d172      	bne.n	8001656 <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001570:	f04f 0202 	mov.w	r2, #2
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001582:	f107 0320 	add.w	r3, r7, #32
 8001586:	4618      	mov	r0, r3
 8001588:	f002 fa2e 	bl	80039e8 <HAL_RCCEx_PeriphCLKConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001592:	f7ff fd61 	bl	8001058 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001596:	4b59      	ldr	r3, [pc, #356]	; (80016fc <HAL_UART_MspInit+0x1bc>)
 8001598:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800159c:	4a57      	ldr	r2, [pc, #348]	; (80016fc <HAL_UART_MspInit+0x1bc>)
 800159e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015a2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80015a6:	4b55      	ldr	r3, [pc, #340]	; (80016fc <HAL_UART_MspInit+0x1bc>)
 80015a8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b51      	ldr	r3, [pc, #324]	; (80016fc <HAL_UART_MspInit+0x1bc>)
 80015b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015ba:	4a50      	ldr	r2, [pc, #320]	; (80016fc <HAL_UART_MspInit+0x1bc>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015c4:	4b4d      	ldr	r3, [pc, #308]	; (80016fc <HAL_UART_MspInit+0x1bc>)
 80015c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	61bb      	str	r3, [r7, #24]
 80015d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d2:	4b4a      	ldr	r3, [pc, #296]	; (80016fc <HAL_UART_MspInit+0x1bc>)
 80015d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015d8:	4a48      	ldr	r2, [pc, #288]	; (80016fc <HAL_UART_MspInit+0x1bc>)
 80015da:	f043 0308 	orr.w	r3, r3, #8
 80015de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015e2:	4b46      	ldr	r3, [pc, #280]	; (80016fc <HAL_UART_MspInit+0x1bc>)
 80015e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015f0:	2301      	movs	r3, #1
 80015f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001608:	2308      	movs	r3, #8
 800160a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001612:	4619      	mov	r1, r3
 8001614:	483a      	ldr	r0, [pc, #232]	; (8001700 <HAL_UART_MspInit+0x1c0>)
 8001616:	f000 ffeb 	bl	80025f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800161a:	2301      	movs	r3, #1
 800161c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001632:	2308      	movs	r3, #8
 8001634:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001638:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800163c:	4619      	mov	r1, r3
 800163e:	4831      	ldr	r0, [pc, #196]	; (8001704 <HAL_UART_MspInit+0x1c4>)
 8001640:	f000 ffd6 	bl	80025f0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	2100      	movs	r1, #0
 8001648:	2034      	movs	r0, #52	; 0x34
 800164a:	f000 fa38 	bl	8001abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800164e:	2034      	movs	r0, #52	; 0x34
 8001650:	f000 fa4f 	bl	8001af2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001654:	e04b      	b.n	80016ee <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART3)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a2b      	ldr	r2, [pc, #172]	; (8001708 <HAL_UART_MspInit+0x1c8>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d146      	bne.n	80016ee <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001660:	f04f 0202 	mov.w	r2, #2
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800166c:	2300      	movs	r3, #0
 800166e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001672:	f107 0320 	add.w	r3, r7, #32
 8001676:	4618      	mov	r0, r3
 8001678:	f002 f9b6 	bl	80039e8 <HAL_RCCEx_PeriphCLKConfig>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_UART_MspInit+0x146>
      Error_Handler();
 8001682:	f7ff fce9 	bl	8001058 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001686:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <HAL_UART_MspInit+0x1bc>)
 8001688:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800168c:	4a1b      	ldr	r2, [pc, #108]	; (80016fc <HAL_UART_MspInit+0x1bc>)
 800168e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001692:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <HAL_UART_MspInit+0x1bc>)
 8001698:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800169c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_UART_MspInit+0x1bc>)
 80016a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016aa:	4a14      	ldr	r2, [pc, #80]	; (80016fc <HAL_UART_MspInit+0x1bc>)
 80016ac:	f043 0308 	orr.w	r3, r3, #8
 80016b0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_UART_MspInit+0x1bc>)
 80016b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80016c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016dc:	2307      	movs	r3, #7
 80016de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80016e6:	4619      	mov	r1, r3
 80016e8:	4806      	ldr	r0, [pc, #24]	; (8001704 <HAL_UART_MspInit+0x1c4>)
 80016ea:	f000 ff81 	bl	80025f0 <HAL_GPIO_Init>
}
 80016ee:	bf00      	nop
 80016f0:	37f8      	adds	r7, #248	; 0xf8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40004c00 	.word	0x40004c00
 80016fc:	58024400 	.word	0x58024400
 8001700:	58020000 	.word	0x58020000
 8001704:	58020c00 	.word	0x58020c00
 8001708:	40004800 	.word	0x40004800

0800170c <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a05      	ldr	r2, [pc, #20]	; (8001730 <HAL_UART_RxCpltCallback+0x24>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d104      	bne.n	8001728 <HAL_UART_RxCpltCallback+0x1c>
	{
		RPICom_DecodeBinaryMessage();
 800171e:	f7ff fa67 	bl	8000bf0 <RPICom_DecodeBinaryMessage>
		RPICom_UartActivate(&hRPICom);
 8001722:	4804      	ldr	r0, [pc, #16]	; (8001734 <HAL_UART_RxCpltCallback+0x28>)
 8001724:	f7ff fa34 	bl	8000b90 <RPICom_UartActivate>
	}
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40004c00 	.word	0x40004c00
 8001734:	240000a0 	.word	0x240000a0

08001738 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001780 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800174c:	f7ff fd0e 	bl	800116c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001752:	490d      	ldr	r1, [pc, #52]	; (8001788 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001754:	4a0d      	ldr	r2, [pc, #52]	; (800178c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001768:	4c0a      	ldr	r4, [pc, #40]	; (8001794 <LoopFillZerobss+0x22>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001776:	f007 fcdd 	bl	8009134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177a:	f7ff fbc1 	bl	8000f00 <main>
  bx  lr
 800177e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001780:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001784:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001788:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 800178c:	08009b74 	.word	0x08009b74
  ldr r2, =_sbss
 8001790:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 8001794:	24000284 	.word	0x24000284

08001798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC_IRQHandler>
	...

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a2:	2003      	movs	r0, #3
 80017a4:	f000 f980 	bl	8001aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80017a8:	f001 ff48 	bl	800363c <HAL_RCC_GetSysClockFreq>
 80017ac:	4602      	mov	r2, r0
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_Init+0x68>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	0a1b      	lsrs	r3, r3, #8
 80017b4:	f003 030f 	and.w	r3, r3, #15
 80017b8:	4913      	ldr	r1, [pc, #76]	; (8001808 <HAL_Init+0x6c>)
 80017ba:	5ccb      	ldrb	r3, [r1, r3]
 80017bc:	f003 031f 	and.w	r3, r3, #31
 80017c0:	fa22 f303 	lsr.w	r3, r2, r3
 80017c4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_Init+0x68>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <HAL_Init+0x6c>)
 80017d0:	5cd3      	ldrb	r3, [r2, r3]
 80017d2:	f003 031f 	and.w	r3, r3, #31
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	fa22 f303 	lsr.w	r3, r2, r3
 80017dc:	4a0b      	ldr	r2, [pc, #44]	; (800180c <HAL_Init+0x70>)
 80017de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017e0:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <HAL_Init+0x74>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017e6:	2000      	movs	r0, #0
 80017e8:	f000 f814 	bl	8001814 <HAL_InitTick>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e002      	b.n	80017fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017f6:	f7ff fc35 	bl	8001064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	58024400 	.word	0x58024400
 8001808:	08009af8 	.word	0x08009af8
 800180c:	24000014 	.word	0x24000014
 8001810:	24000010 	.word	0x24000010

08001814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_InitTick+0x60>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e021      	b.n	800186c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <HAL_InitTick+0x64>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_InitTick+0x60>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001836:	fbb3 f3f1 	udiv	r3, r3, r1
 800183a:	fbb2 f3f3 	udiv	r3, r2, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f000 f965 	bl	8001b0e <HAL_SYSTICK_Config>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e00e      	b.n	800186c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b0f      	cmp	r3, #15
 8001852:	d80a      	bhi.n	800186a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001854:	2200      	movs	r2, #0
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800185c:	f000 f92f 	bl	8001abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001860:	4a06      	ldr	r2, [pc, #24]	; (800187c <HAL_InitTick+0x68>)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	e000      	b.n	800186c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	2400001c 	.word	0x2400001c
 8001878:	24000010 	.word	0x24000010
 800187c:	24000018 	.word	0x24000018

08001880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_IncTick+0x20>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_IncTick+0x24>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4413      	add	r3, r2
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <HAL_IncTick+0x24>)
 8001892:	6013      	str	r3, [r2, #0]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	2400001c 	.word	0x2400001c
 80018a4:	24000270 	.word	0x24000270

080018a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return uwTick;
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <HAL_GetTick+0x14>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	24000270 	.word	0x24000270

080018c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c8:	f7ff ffee 	bl	80018a8 <HAL_GetTick>
 80018cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018d8:	d005      	beq.n	80018e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_Delay+0x44>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018e6:	bf00      	nop
 80018e8:	f7ff ffde 	bl	80018a8 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d8f7      	bhi.n	80018e8 <HAL_Delay+0x28>
  {
  }
}
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2400001c 	.word	0x2400001c

08001908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <__NVIC_SetPriorityGrouping+0x40>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001924:	4013      	ands	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	4313      	orrs	r3, r2
 8001934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001936:	4a04      	ldr	r2, [pc, #16]	; (8001948 <__NVIC_SetPriorityGrouping+0x40>)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	60d3      	str	r3, [r2, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00
 800194c:	05fa0000 	.word	0x05fa0000

08001950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <__NVIC_GetPriorityGrouping+0x18>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	f003 0307 	and.w	r3, r3, #7
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800197a:	2b00      	cmp	r3, #0
 800197c:	db0b      	blt.n	8001996 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	f003 021f 	and.w	r2, r3, #31
 8001984:	4907      	ldr	r1, [pc, #28]	; (80019a4 <__NVIC_EnableIRQ+0x38>)
 8001986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	2001      	movs	r0, #1
 800198e:	fa00 f202 	lsl.w	r2, r0, r2
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000e100 	.word	0xe000e100

080019a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	6039      	str	r1, [r7, #0]
 80019b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	db0a      	blt.n	80019d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	490c      	ldr	r1, [pc, #48]	; (80019f4 <__NVIC_SetPriority+0x4c>)
 80019c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c6:	0112      	lsls	r2, r2, #4
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	440b      	add	r3, r1
 80019cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d0:	e00a      	b.n	80019e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4908      	ldr	r1, [pc, #32]	; (80019f8 <__NVIC_SetPriority+0x50>)
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	3b04      	subs	r3, #4
 80019e0:	0112      	lsls	r2, r2, #4
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	440b      	add	r3, r1
 80019e6:	761a      	strb	r2, [r3, #24]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000e100 	.word	0xe000e100
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b089      	sub	sp, #36	; 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f1c3 0307 	rsb	r3, r3, #7
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	bf28      	it	cs
 8001a1a:	2304      	movcs	r3, #4
 8001a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3304      	adds	r3, #4
 8001a22:	2b06      	cmp	r3, #6
 8001a24:	d902      	bls.n	8001a2c <NVIC_EncodePriority+0x30>
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3b03      	subs	r3, #3
 8001a2a:	e000      	b.n	8001a2e <NVIC_EncodePriority+0x32>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	401a      	ands	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	43d9      	mvns	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	4313      	orrs	r3, r2
         );
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3724      	adds	r7, #36	; 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a74:	d301      	bcc.n	8001a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00f      	b.n	8001a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <SysTick_Config+0x40>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a82:	210f      	movs	r1, #15
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a88:	f7ff ff8e 	bl	80019a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <SysTick_Config+0x40>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a92:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <SysTick_Config+0x40>)
 8001a94:	2207      	movs	r2, #7
 8001a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	e000e010 	.word	0xe000e010

08001aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ff29 	bl	8001908 <__NVIC_SetPriorityGrouping>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001acc:	f7ff ff40 	bl	8001950 <__NVIC_GetPriorityGrouping>
 8001ad0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	6978      	ldr	r0, [r7, #20]
 8001ad8:	f7ff ff90 	bl	80019fc <NVIC_EncodePriority>
 8001adc:	4602      	mov	r2, r0
 8001ade:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff5f 	bl	80019a8 <__NVIC_SetPriority>
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001afc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff33 	bl	800196c <__NVIC_EnableIRQ>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ffa4 	bl	8001a64 <SysTick_Config>
 8001b1c:	4603      	mov	r3, r0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001b30:	f7ff feba 	bl	80018a8 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e2dc      	b.n	80020fa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d008      	beq.n	8001b5e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e2cd      	b.n	80020fa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a76      	ldr	r2, [pc, #472]	; (8001d3c <HAL_DMA_Abort+0x214>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d04a      	beq.n	8001bfe <HAL_DMA_Abort+0xd6>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a74      	ldr	r2, [pc, #464]	; (8001d40 <HAL_DMA_Abort+0x218>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d045      	beq.n	8001bfe <HAL_DMA_Abort+0xd6>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a73      	ldr	r2, [pc, #460]	; (8001d44 <HAL_DMA_Abort+0x21c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d040      	beq.n	8001bfe <HAL_DMA_Abort+0xd6>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a71      	ldr	r2, [pc, #452]	; (8001d48 <HAL_DMA_Abort+0x220>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d03b      	beq.n	8001bfe <HAL_DMA_Abort+0xd6>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a70      	ldr	r2, [pc, #448]	; (8001d4c <HAL_DMA_Abort+0x224>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d036      	beq.n	8001bfe <HAL_DMA_Abort+0xd6>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a6e      	ldr	r2, [pc, #440]	; (8001d50 <HAL_DMA_Abort+0x228>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d031      	beq.n	8001bfe <HAL_DMA_Abort+0xd6>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a6d      	ldr	r2, [pc, #436]	; (8001d54 <HAL_DMA_Abort+0x22c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d02c      	beq.n	8001bfe <HAL_DMA_Abort+0xd6>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a6b      	ldr	r2, [pc, #428]	; (8001d58 <HAL_DMA_Abort+0x230>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d027      	beq.n	8001bfe <HAL_DMA_Abort+0xd6>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a6a      	ldr	r2, [pc, #424]	; (8001d5c <HAL_DMA_Abort+0x234>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d022      	beq.n	8001bfe <HAL_DMA_Abort+0xd6>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a68      	ldr	r2, [pc, #416]	; (8001d60 <HAL_DMA_Abort+0x238>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d01d      	beq.n	8001bfe <HAL_DMA_Abort+0xd6>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a67      	ldr	r2, [pc, #412]	; (8001d64 <HAL_DMA_Abort+0x23c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d018      	beq.n	8001bfe <HAL_DMA_Abort+0xd6>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a65      	ldr	r2, [pc, #404]	; (8001d68 <HAL_DMA_Abort+0x240>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d013      	beq.n	8001bfe <HAL_DMA_Abort+0xd6>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a64      	ldr	r2, [pc, #400]	; (8001d6c <HAL_DMA_Abort+0x244>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d00e      	beq.n	8001bfe <HAL_DMA_Abort+0xd6>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a62      	ldr	r2, [pc, #392]	; (8001d70 <HAL_DMA_Abort+0x248>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d009      	beq.n	8001bfe <HAL_DMA_Abort+0xd6>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a61      	ldr	r2, [pc, #388]	; (8001d74 <HAL_DMA_Abort+0x24c>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d004      	beq.n	8001bfe <HAL_DMA_Abort+0xd6>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a5f      	ldr	r2, [pc, #380]	; (8001d78 <HAL_DMA_Abort+0x250>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_DMA_Abort+0xda>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <HAL_DMA_Abort+0xdc>
 8001c02:	2300      	movs	r3, #0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d013      	beq.n	8001c30 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 021e 	bic.w	r2, r2, #30
 8001c16:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c26:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	e00a      	b.n	8001c46 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 020e 	bic.w	r2, r2, #14
 8001c3e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a3c      	ldr	r2, [pc, #240]	; (8001d3c <HAL_DMA_Abort+0x214>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d072      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a3a      	ldr	r2, [pc, #232]	; (8001d40 <HAL_DMA_Abort+0x218>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d06d      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a39      	ldr	r2, [pc, #228]	; (8001d44 <HAL_DMA_Abort+0x21c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d068      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a37      	ldr	r2, [pc, #220]	; (8001d48 <HAL_DMA_Abort+0x220>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d063      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a36      	ldr	r2, [pc, #216]	; (8001d4c <HAL_DMA_Abort+0x224>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d05e      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a34      	ldr	r2, [pc, #208]	; (8001d50 <HAL_DMA_Abort+0x228>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d059      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a33      	ldr	r2, [pc, #204]	; (8001d54 <HAL_DMA_Abort+0x22c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d054      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a31      	ldr	r2, [pc, #196]	; (8001d58 <HAL_DMA_Abort+0x230>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d04f      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a30      	ldr	r2, [pc, #192]	; (8001d5c <HAL_DMA_Abort+0x234>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d04a      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a2e      	ldr	r2, [pc, #184]	; (8001d60 <HAL_DMA_Abort+0x238>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d045      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a2d      	ldr	r2, [pc, #180]	; (8001d64 <HAL_DMA_Abort+0x23c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d040      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a2b      	ldr	r2, [pc, #172]	; (8001d68 <HAL_DMA_Abort+0x240>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d03b      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a2a      	ldr	r2, [pc, #168]	; (8001d6c <HAL_DMA_Abort+0x244>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d036      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a28      	ldr	r2, [pc, #160]	; (8001d70 <HAL_DMA_Abort+0x248>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d031      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a27      	ldr	r2, [pc, #156]	; (8001d74 <HAL_DMA_Abort+0x24c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d02c      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a25      	ldr	r2, [pc, #148]	; (8001d78 <HAL_DMA_Abort+0x250>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d027      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a24      	ldr	r2, [pc, #144]	; (8001d7c <HAL_DMA_Abort+0x254>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d022      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a22      	ldr	r2, [pc, #136]	; (8001d80 <HAL_DMA_Abort+0x258>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d01d      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <HAL_DMA_Abort+0x25c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d018      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <HAL_DMA_Abort+0x260>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d013      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <HAL_DMA_Abort+0x264>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d00e      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1c      	ldr	r2, [pc, #112]	; (8001d90 <HAL_DMA_Abort+0x268>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d009      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1b      	ldr	r2, [pc, #108]	; (8001d94 <HAL_DMA_Abort+0x26c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d004      	beq.n	8001d36 <HAL_DMA_Abort+0x20e>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a19      	ldr	r2, [pc, #100]	; (8001d98 <HAL_DMA_Abort+0x270>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d132      	bne.n	8001d9c <HAL_DMA_Abort+0x274>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e031      	b.n	8001d9e <HAL_DMA_Abort+0x276>
 8001d3a:	bf00      	nop
 8001d3c:	40020010 	.word	0x40020010
 8001d40:	40020028 	.word	0x40020028
 8001d44:	40020040 	.word	0x40020040
 8001d48:	40020058 	.word	0x40020058
 8001d4c:	40020070 	.word	0x40020070
 8001d50:	40020088 	.word	0x40020088
 8001d54:	400200a0 	.word	0x400200a0
 8001d58:	400200b8 	.word	0x400200b8
 8001d5c:	40020410 	.word	0x40020410
 8001d60:	40020428 	.word	0x40020428
 8001d64:	40020440 	.word	0x40020440
 8001d68:	40020458 	.word	0x40020458
 8001d6c:	40020470 	.word	0x40020470
 8001d70:	40020488 	.word	0x40020488
 8001d74:	400204a0 	.word	0x400204a0
 8001d78:	400204b8 	.word	0x400204b8
 8001d7c:	58025408 	.word	0x58025408
 8001d80:	5802541c 	.word	0x5802541c
 8001d84:	58025430 	.word	0x58025430
 8001d88:	58025444 	.word	0x58025444
 8001d8c:	58025458 	.word	0x58025458
 8001d90:	5802546c 	.word	0x5802546c
 8001d94:	58025480 	.word	0x58025480
 8001d98:	58025494 	.word	0x58025494
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001db0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a6d      	ldr	r2, [pc, #436]	; (8001f6c <HAL_DMA_Abort+0x444>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d04a      	beq.n	8001e52 <HAL_DMA_Abort+0x32a>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a6b      	ldr	r2, [pc, #428]	; (8001f70 <HAL_DMA_Abort+0x448>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d045      	beq.n	8001e52 <HAL_DMA_Abort+0x32a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a6a      	ldr	r2, [pc, #424]	; (8001f74 <HAL_DMA_Abort+0x44c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d040      	beq.n	8001e52 <HAL_DMA_Abort+0x32a>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a68      	ldr	r2, [pc, #416]	; (8001f78 <HAL_DMA_Abort+0x450>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d03b      	beq.n	8001e52 <HAL_DMA_Abort+0x32a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a67      	ldr	r2, [pc, #412]	; (8001f7c <HAL_DMA_Abort+0x454>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d036      	beq.n	8001e52 <HAL_DMA_Abort+0x32a>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a65      	ldr	r2, [pc, #404]	; (8001f80 <HAL_DMA_Abort+0x458>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d031      	beq.n	8001e52 <HAL_DMA_Abort+0x32a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a64      	ldr	r2, [pc, #400]	; (8001f84 <HAL_DMA_Abort+0x45c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d02c      	beq.n	8001e52 <HAL_DMA_Abort+0x32a>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a62      	ldr	r2, [pc, #392]	; (8001f88 <HAL_DMA_Abort+0x460>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d027      	beq.n	8001e52 <HAL_DMA_Abort+0x32a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a61      	ldr	r2, [pc, #388]	; (8001f8c <HAL_DMA_Abort+0x464>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d022      	beq.n	8001e52 <HAL_DMA_Abort+0x32a>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a5f      	ldr	r2, [pc, #380]	; (8001f90 <HAL_DMA_Abort+0x468>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d01d      	beq.n	8001e52 <HAL_DMA_Abort+0x32a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a5e      	ldr	r2, [pc, #376]	; (8001f94 <HAL_DMA_Abort+0x46c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d018      	beq.n	8001e52 <HAL_DMA_Abort+0x32a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a5c      	ldr	r2, [pc, #368]	; (8001f98 <HAL_DMA_Abort+0x470>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d013      	beq.n	8001e52 <HAL_DMA_Abort+0x32a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a5b      	ldr	r2, [pc, #364]	; (8001f9c <HAL_DMA_Abort+0x474>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d00e      	beq.n	8001e52 <HAL_DMA_Abort+0x32a>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a59      	ldr	r2, [pc, #356]	; (8001fa0 <HAL_DMA_Abort+0x478>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d009      	beq.n	8001e52 <HAL_DMA_Abort+0x32a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a58      	ldr	r2, [pc, #352]	; (8001fa4 <HAL_DMA_Abort+0x47c>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d004      	beq.n	8001e52 <HAL_DMA_Abort+0x32a>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a56      	ldr	r2, [pc, #344]	; (8001fa8 <HAL_DMA_Abort+0x480>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d108      	bne.n	8001e64 <HAL_DMA_Abort+0x33c>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0201 	bic.w	r2, r2, #1
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	e007      	b.n	8001e74 <HAL_DMA_Abort+0x34c>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e74:	e013      	b.n	8001e9e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e76:	f7ff fd17 	bl	80018a8 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b05      	cmp	r3, #5
 8001e82:	d90c      	bls.n	8001e9e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2220      	movs	r2, #32
 8001e88:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e12d      	b.n	80020fa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1e5      	bne.n	8001e76 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a2f      	ldr	r2, [pc, #188]	; (8001f6c <HAL_DMA_Abort+0x444>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d04a      	beq.n	8001f4a <HAL_DMA_Abort+0x422>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a2d      	ldr	r2, [pc, #180]	; (8001f70 <HAL_DMA_Abort+0x448>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d045      	beq.n	8001f4a <HAL_DMA_Abort+0x422>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a2c      	ldr	r2, [pc, #176]	; (8001f74 <HAL_DMA_Abort+0x44c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d040      	beq.n	8001f4a <HAL_DMA_Abort+0x422>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a2a      	ldr	r2, [pc, #168]	; (8001f78 <HAL_DMA_Abort+0x450>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d03b      	beq.n	8001f4a <HAL_DMA_Abort+0x422>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a29      	ldr	r2, [pc, #164]	; (8001f7c <HAL_DMA_Abort+0x454>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d036      	beq.n	8001f4a <HAL_DMA_Abort+0x422>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a27      	ldr	r2, [pc, #156]	; (8001f80 <HAL_DMA_Abort+0x458>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d031      	beq.n	8001f4a <HAL_DMA_Abort+0x422>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a26      	ldr	r2, [pc, #152]	; (8001f84 <HAL_DMA_Abort+0x45c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d02c      	beq.n	8001f4a <HAL_DMA_Abort+0x422>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a24      	ldr	r2, [pc, #144]	; (8001f88 <HAL_DMA_Abort+0x460>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d027      	beq.n	8001f4a <HAL_DMA_Abort+0x422>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a23      	ldr	r2, [pc, #140]	; (8001f8c <HAL_DMA_Abort+0x464>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d022      	beq.n	8001f4a <HAL_DMA_Abort+0x422>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a21      	ldr	r2, [pc, #132]	; (8001f90 <HAL_DMA_Abort+0x468>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d01d      	beq.n	8001f4a <HAL_DMA_Abort+0x422>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a20      	ldr	r2, [pc, #128]	; (8001f94 <HAL_DMA_Abort+0x46c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d018      	beq.n	8001f4a <HAL_DMA_Abort+0x422>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1e      	ldr	r2, [pc, #120]	; (8001f98 <HAL_DMA_Abort+0x470>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <HAL_DMA_Abort+0x422>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <HAL_DMA_Abort+0x474>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d00e      	beq.n	8001f4a <HAL_DMA_Abort+0x422>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a1b      	ldr	r2, [pc, #108]	; (8001fa0 <HAL_DMA_Abort+0x478>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d009      	beq.n	8001f4a <HAL_DMA_Abort+0x422>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a1a      	ldr	r2, [pc, #104]	; (8001fa4 <HAL_DMA_Abort+0x47c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d004      	beq.n	8001f4a <HAL_DMA_Abort+0x422>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <HAL_DMA_Abort+0x480>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d101      	bne.n	8001f4e <HAL_DMA_Abort+0x426>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_DMA_Abort+0x428>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d02b      	beq.n	8001fac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5e:	f003 031f 	and.w	r3, r3, #31
 8001f62:	223f      	movs	r2, #63	; 0x3f
 8001f64:	409a      	lsls	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	e02a      	b.n	8001fc2 <HAL_DMA_Abort+0x49a>
 8001f6c:	40020010 	.word	0x40020010
 8001f70:	40020028 	.word	0x40020028
 8001f74:	40020040 	.word	0x40020040
 8001f78:	40020058 	.word	0x40020058
 8001f7c:	40020070 	.word	0x40020070
 8001f80:	40020088 	.word	0x40020088
 8001f84:	400200a0 	.word	0x400200a0
 8001f88:	400200b8 	.word	0x400200b8
 8001f8c:	40020410 	.word	0x40020410
 8001f90:	40020428 	.word	0x40020428
 8001f94:	40020440 	.word	0x40020440
 8001f98:	40020458 	.word	0x40020458
 8001f9c:	40020470 	.word	0x40020470
 8001fa0:	40020488 	.word	0x40020488
 8001fa4:	400204a0 	.word	0x400204a0
 8001fa8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	2201      	movs	r2, #1
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a4f      	ldr	r2, [pc, #316]	; (8002104 <HAL_DMA_Abort+0x5dc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d072      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a4d      	ldr	r2, [pc, #308]	; (8002108 <HAL_DMA_Abort+0x5e0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d06d      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a4c      	ldr	r2, [pc, #304]	; (800210c <HAL_DMA_Abort+0x5e4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d068      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a4a      	ldr	r2, [pc, #296]	; (8002110 <HAL_DMA_Abort+0x5e8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d063      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a49      	ldr	r2, [pc, #292]	; (8002114 <HAL_DMA_Abort+0x5ec>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d05e      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a47      	ldr	r2, [pc, #284]	; (8002118 <HAL_DMA_Abort+0x5f0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d059      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a46      	ldr	r2, [pc, #280]	; (800211c <HAL_DMA_Abort+0x5f4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d054      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a44      	ldr	r2, [pc, #272]	; (8002120 <HAL_DMA_Abort+0x5f8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d04f      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a43      	ldr	r2, [pc, #268]	; (8002124 <HAL_DMA_Abort+0x5fc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d04a      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a41      	ldr	r2, [pc, #260]	; (8002128 <HAL_DMA_Abort+0x600>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d045      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a40      	ldr	r2, [pc, #256]	; (800212c <HAL_DMA_Abort+0x604>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d040      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a3e      	ldr	r2, [pc, #248]	; (8002130 <HAL_DMA_Abort+0x608>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d03b      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a3d      	ldr	r2, [pc, #244]	; (8002134 <HAL_DMA_Abort+0x60c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d036      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a3b      	ldr	r2, [pc, #236]	; (8002138 <HAL_DMA_Abort+0x610>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d031      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a3a      	ldr	r2, [pc, #232]	; (800213c <HAL_DMA_Abort+0x614>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d02c      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a38      	ldr	r2, [pc, #224]	; (8002140 <HAL_DMA_Abort+0x618>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d027      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a37      	ldr	r2, [pc, #220]	; (8002144 <HAL_DMA_Abort+0x61c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d022      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a35      	ldr	r2, [pc, #212]	; (8002148 <HAL_DMA_Abort+0x620>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01d      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a34      	ldr	r2, [pc, #208]	; (800214c <HAL_DMA_Abort+0x624>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d018      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a32      	ldr	r2, [pc, #200]	; (8002150 <HAL_DMA_Abort+0x628>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a31      	ldr	r2, [pc, #196]	; (8002154 <HAL_DMA_Abort+0x62c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d00e      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a2f      	ldr	r2, [pc, #188]	; (8002158 <HAL_DMA_Abort+0x630>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d009      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a2e      	ldr	r2, [pc, #184]	; (800215c <HAL_DMA_Abort+0x634>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d004      	beq.n	80020b2 <HAL_DMA_Abort+0x58a>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a2c      	ldr	r2, [pc, #176]	; (8002160 <HAL_DMA_Abort+0x638>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d101      	bne.n	80020b6 <HAL_DMA_Abort+0x58e>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <HAL_DMA_Abort+0x590>
 80020b6:	2300      	movs	r3, #0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d015      	beq.n	80020e8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80020c4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00c      	beq.n	80020e8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020dc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80020e6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40020010 	.word	0x40020010
 8002108:	40020028 	.word	0x40020028
 800210c:	40020040 	.word	0x40020040
 8002110:	40020058 	.word	0x40020058
 8002114:	40020070 	.word	0x40020070
 8002118:	40020088 	.word	0x40020088
 800211c:	400200a0 	.word	0x400200a0
 8002120:	400200b8 	.word	0x400200b8
 8002124:	40020410 	.word	0x40020410
 8002128:	40020428 	.word	0x40020428
 800212c:	40020440 	.word	0x40020440
 8002130:	40020458 	.word	0x40020458
 8002134:	40020470 	.word	0x40020470
 8002138:	40020488 	.word	0x40020488
 800213c:	400204a0 	.word	0x400204a0
 8002140:	400204b8 	.word	0x400204b8
 8002144:	58025408 	.word	0x58025408
 8002148:	5802541c 	.word	0x5802541c
 800214c:	58025430 	.word	0x58025430
 8002150:	58025444 	.word	0x58025444
 8002154:	58025458 	.word	0x58025458
 8002158:	5802546c 	.word	0x5802546c
 800215c:	58025480 	.word	0x58025480
 8002160:	58025494 	.word	0x58025494

08002164 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e237      	b.n	80025e6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d004      	beq.n	800218c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2280      	movs	r2, #128	; 0x80
 8002186:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e22c      	b.n	80025e6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a5c      	ldr	r2, [pc, #368]	; (8002304 <HAL_DMA_Abort_IT+0x1a0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d04a      	beq.n	800222c <HAL_DMA_Abort_IT+0xc8>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a5b      	ldr	r2, [pc, #364]	; (8002308 <HAL_DMA_Abort_IT+0x1a4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d045      	beq.n	800222c <HAL_DMA_Abort_IT+0xc8>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a59      	ldr	r2, [pc, #356]	; (800230c <HAL_DMA_Abort_IT+0x1a8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d040      	beq.n	800222c <HAL_DMA_Abort_IT+0xc8>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a58      	ldr	r2, [pc, #352]	; (8002310 <HAL_DMA_Abort_IT+0x1ac>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d03b      	beq.n	800222c <HAL_DMA_Abort_IT+0xc8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a56      	ldr	r2, [pc, #344]	; (8002314 <HAL_DMA_Abort_IT+0x1b0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d036      	beq.n	800222c <HAL_DMA_Abort_IT+0xc8>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a55      	ldr	r2, [pc, #340]	; (8002318 <HAL_DMA_Abort_IT+0x1b4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d031      	beq.n	800222c <HAL_DMA_Abort_IT+0xc8>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a53      	ldr	r2, [pc, #332]	; (800231c <HAL_DMA_Abort_IT+0x1b8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d02c      	beq.n	800222c <HAL_DMA_Abort_IT+0xc8>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a52      	ldr	r2, [pc, #328]	; (8002320 <HAL_DMA_Abort_IT+0x1bc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d027      	beq.n	800222c <HAL_DMA_Abort_IT+0xc8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a50      	ldr	r2, [pc, #320]	; (8002324 <HAL_DMA_Abort_IT+0x1c0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d022      	beq.n	800222c <HAL_DMA_Abort_IT+0xc8>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a4f      	ldr	r2, [pc, #316]	; (8002328 <HAL_DMA_Abort_IT+0x1c4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d01d      	beq.n	800222c <HAL_DMA_Abort_IT+0xc8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a4d      	ldr	r2, [pc, #308]	; (800232c <HAL_DMA_Abort_IT+0x1c8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d018      	beq.n	800222c <HAL_DMA_Abort_IT+0xc8>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a4c      	ldr	r2, [pc, #304]	; (8002330 <HAL_DMA_Abort_IT+0x1cc>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d013      	beq.n	800222c <HAL_DMA_Abort_IT+0xc8>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a4a      	ldr	r2, [pc, #296]	; (8002334 <HAL_DMA_Abort_IT+0x1d0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d00e      	beq.n	800222c <HAL_DMA_Abort_IT+0xc8>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a49      	ldr	r2, [pc, #292]	; (8002338 <HAL_DMA_Abort_IT+0x1d4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d009      	beq.n	800222c <HAL_DMA_Abort_IT+0xc8>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a47      	ldr	r2, [pc, #284]	; (800233c <HAL_DMA_Abort_IT+0x1d8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d004      	beq.n	800222c <HAL_DMA_Abort_IT+0xc8>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a46      	ldr	r2, [pc, #280]	; (8002340 <HAL_DMA_Abort_IT+0x1dc>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d101      	bne.n	8002230 <HAL_DMA_Abort_IT+0xcc>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <HAL_DMA_Abort_IT+0xce>
 8002230:	2300      	movs	r3, #0
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8086 	beq.w	8002344 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2204      	movs	r2, #4
 800223c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a2f      	ldr	r2, [pc, #188]	; (8002304 <HAL_DMA_Abort_IT+0x1a0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d04a      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x17c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a2e      	ldr	r2, [pc, #184]	; (8002308 <HAL_DMA_Abort_IT+0x1a4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d045      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x17c>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a2c      	ldr	r2, [pc, #176]	; (800230c <HAL_DMA_Abort_IT+0x1a8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d040      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x17c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a2b      	ldr	r2, [pc, #172]	; (8002310 <HAL_DMA_Abort_IT+0x1ac>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d03b      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x17c>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a29      	ldr	r2, [pc, #164]	; (8002314 <HAL_DMA_Abort_IT+0x1b0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d036      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x17c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a28      	ldr	r2, [pc, #160]	; (8002318 <HAL_DMA_Abort_IT+0x1b4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d031      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x17c>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a26      	ldr	r2, [pc, #152]	; (800231c <HAL_DMA_Abort_IT+0x1b8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d02c      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x17c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a25      	ldr	r2, [pc, #148]	; (8002320 <HAL_DMA_Abort_IT+0x1bc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d027      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x17c>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a23      	ldr	r2, [pc, #140]	; (8002324 <HAL_DMA_Abort_IT+0x1c0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d022      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x17c>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a22      	ldr	r2, [pc, #136]	; (8002328 <HAL_DMA_Abort_IT+0x1c4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d01d      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x17c>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a20      	ldr	r2, [pc, #128]	; (800232c <HAL_DMA_Abort_IT+0x1c8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d018      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x17c>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1f      	ldr	r2, [pc, #124]	; (8002330 <HAL_DMA_Abort_IT+0x1cc>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d013      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x17c>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1d      	ldr	r2, [pc, #116]	; (8002334 <HAL_DMA_Abort_IT+0x1d0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00e      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x17c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1c      	ldr	r2, [pc, #112]	; (8002338 <HAL_DMA_Abort_IT+0x1d4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d009      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x17c>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1a      	ldr	r2, [pc, #104]	; (800233c <HAL_DMA_Abort_IT+0x1d8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d004      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x17c>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a19      	ldr	r2, [pc, #100]	; (8002340 <HAL_DMA_Abort_IT+0x1dc>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d108      	bne.n	80022f2 <HAL_DMA_Abort_IT+0x18e>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0201 	bic.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	e178      	b.n	80025e4 <HAL_DMA_Abort_IT+0x480>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0201 	bic.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	e16f      	b.n	80025e4 <HAL_DMA_Abort_IT+0x480>
 8002304:	40020010 	.word	0x40020010
 8002308:	40020028 	.word	0x40020028
 800230c:	40020040 	.word	0x40020040
 8002310:	40020058 	.word	0x40020058
 8002314:	40020070 	.word	0x40020070
 8002318:	40020088 	.word	0x40020088
 800231c:	400200a0 	.word	0x400200a0
 8002320:	400200b8 	.word	0x400200b8
 8002324:	40020410 	.word	0x40020410
 8002328:	40020428 	.word	0x40020428
 800232c:	40020440 	.word	0x40020440
 8002330:	40020458 	.word	0x40020458
 8002334:	40020470 	.word	0x40020470
 8002338:	40020488 	.word	0x40020488
 800233c:	400204a0 	.word	0x400204a0
 8002340:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 020e 	bic.w	r2, r2, #14
 8002352:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a6c      	ldr	r2, [pc, #432]	; (800250c <HAL_DMA_Abort_IT+0x3a8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d04a      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x290>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a6b      	ldr	r2, [pc, #428]	; (8002510 <HAL_DMA_Abort_IT+0x3ac>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d045      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x290>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a69      	ldr	r2, [pc, #420]	; (8002514 <HAL_DMA_Abort_IT+0x3b0>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d040      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x290>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a68      	ldr	r2, [pc, #416]	; (8002518 <HAL_DMA_Abort_IT+0x3b4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d03b      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x290>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a66      	ldr	r2, [pc, #408]	; (800251c <HAL_DMA_Abort_IT+0x3b8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d036      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x290>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a65      	ldr	r2, [pc, #404]	; (8002520 <HAL_DMA_Abort_IT+0x3bc>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d031      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x290>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a63      	ldr	r2, [pc, #396]	; (8002524 <HAL_DMA_Abort_IT+0x3c0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d02c      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x290>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a62      	ldr	r2, [pc, #392]	; (8002528 <HAL_DMA_Abort_IT+0x3c4>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d027      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x290>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a60      	ldr	r2, [pc, #384]	; (800252c <HAL_DMA_Abort_IT+0x3c8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d022      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x290>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a5f      	ldr	r2, [pc, #380]	; (8002530 <HAL_DMA_Abort_IT+0x3cc>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d01d      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x290>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a5d      	ldr	r2, [pc, #372]	; (8002534 <HAL_DMA_Abort_IT+0x3d0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d018      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x290>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a5c      	ldr	r2, [pc, #368]	; (8002538 <HAL_DMA_Abort_IT+0x3d4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d013      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x290>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a5a      	ldr	r2, [pc, #360]	; (800253c <HAL_DMA_Abort_IT+0x3d8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00e      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x290>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a59      	ldr	r2, [pc, #356]	; (8002540 <HAL_DMA_Abort_IT+0x3dc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d009      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x290>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a57      	ldr	r2, [pc, #348]	; (8002544 <HAL_DMA_Abort_IT+0x3e0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d004      	beq.n	80023f4 <HAL_DMA_Abort_IT+0x290>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a56      	ldr	r2, [pc, #344]	; (8002548 <HAL_DMA_Abort_IT+0x3e4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d108      	bne.n	8002406 <HAL_DMA_Abort_IT+0x2a2>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e007      	b.n	8002416 <HAL_DMA_Abort_IT+0x2b2>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0201 	bic.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a3c      	ldr	r2, [pc, #240]	; (800250c <HAL_DMA_Abort_IT+0x3a8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d072      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a3a      	ldr	r2, [pc, #232]	; (8002510 <HAL_DMA_Abort_IT+0x3ac>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d06d      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a39      	ldr	r2, [pc, #228]	; (8002514 <HAL_DMA_Abort_IT+0x3b0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d068      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a37      	ldr	r2, [pc, #220]	; (8002518 <HAL_DMA_Abort_IT+0x3b4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d063      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a36      	ldr	r2, [pc, #216]	; (800251c <HAL_DMA_Abort_IT+0x3b8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d05e      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a34      	ldr	r2, [pc, #208]	; (8002520 <HAL_DMA_Abort_IT+0x3bc>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d059      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a33      	ldr	r2, [pc, #204]	; (8002524 <HAL_DMA_Abort_IT+0x3c0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d054      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a31      	ldr	r2, [pc, #196]	; (8002528 <HAL_DMA_Abort_IT+0x3c4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d04f      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a30      	ldr	r2, [pc, #192]	; (800252c <HAL_DMA_Abort_IT+0x3c8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d04a      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a2e      	ldr	r2, [pc, #184]	; (8002530 <HAL_DMA_Abort_IT+0x3cc>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d045      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a2d      	ldr	r2, [pc, #180]	; (8002534 <HAL_DMA_Abort_IT+0x3d0>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d040      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a2b      	ldr	r2, [pc, #172]	; (8002538 <HAL_DMA_Abort_IT+0x3d4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d03b      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a2a      	ldr	r2, [pc, #168]	; (800253c <HAL_DMA_Abort_IT+0x3d8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d036      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a28      	ldr	r2, [pc, #160]	; (8002540 <HAL_DMA_Abort_IT+0x3dc>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d031      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a27      	ldr	r2, [pc, #156]	; (8002544 <HAL_DMA_Abort_IT+0x3e0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d02c      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a25      	ldr	r2, [pc, #148]	; (8002548 <HAL_DMA_Abort_IT+0x3e4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d027      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a24      	ldr	r2, [pc, #144]	; (800254c <HAL_DMA_Abort_IT+0x3e8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d022      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a22      	ldr	r2, [pc, #136]	; (8002550 <HAL_DMA_Abort_IT+0x3ec>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d01d      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a21      	ldr	r2, [pc, #132]	; (8002554 <HAL_DMA_Abort_IT+0x3f0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d018      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1f      	ldr	r2, [pc, #124]	; (8002558 <HAL_DMA_Abort_IT+0x3f4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d013      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1e      	ldr	r2, [pc, #120]	; (800255c <HAL_DMA_Abort_IT+0x3f8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00e      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1c      	ldr	r2, [pc, #112]	; (8002560 <HAL_DMA_Abort_IT+0x3fc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d009      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1b      	ldr	r2, [pc, #108]	; (8002564 <HAL_DMA_Abort_IT+0x400>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d004      	beq.n	8002506 <HAL_DMA_Abort_IT+0x3a2>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a19      	ldr	r2, [pc, #100]	; (8002568 <HAL_DMA_Abort_IT+0x404>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d132      	bne.n	800256c <HAL_DMA_Abort_IT+0x408>
 8002506:	2301      	movs	r3, #1
 8002508:	e031      	b.n	800256e <HAL_DMA_Abort_IT+0x40a>
 800250a:	bf00      	nop
 800250c:	40020010 	.word	0x40020010
 8002510:	40020028 	.word	0x40020028
 8002514:	40020040 	.word	0x40020040
 8002518:	40020058 	.word	0x40020058
 800251c:	40020070 	.word	0x40020070
 8002520:	40020088 	.word	0x40020088
 8002524:	400200a0 	.word	0x400200a0
 8002528:	400200b8 	.word	0x400200b8
 800252c:	40020410 	.word	0x40020410
 8002530:	40020428 	.word	0x40020428
 8002534:	40020440 	.word	0x40020440
 8002538:	40020458 	.word	0x40020458
 800253c:	40020470 	.word	0x40020470
 8002540:	40020488 	.word	0x40020488
 8002544:	400204a0 	.word	0x400204a0
 8002548:	400204b8 	.word	0x400204b8
 800254c:	58025408 	.word	0x58025408
 8002550:	5802541c 	.word	0x5802541c
 8002554:	58025430 	.word	0x58025430
 8002558:	58025444 	.word	0x58025444
 800255c:	58025458 	.word	0x58025458
 8002560:	5802546c 	.word	0x5802546c
 8002564:	58025480 	.word	0x58025480
 8002568:	58025494 	.word	0x58025494
 800256c:	2300      	movs	r3, #0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d028      	beq.n	80025c4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002580:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002586:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	2201      	movs	r2, #1
 8002592:	409a      	lsls	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80025a0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00c      	beq.n	80025c4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025b8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80025c2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop

080025f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	; 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80025fe:	4b89      	ldr	r3, [pc, #548]	; (8002824 <HAL_GPIO_Init+0x234>)
 8002600:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002602:	e194      	b.n	800292e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2101      	movs	r1, #1
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	fa01 f303 	lsl.w	r3, r1, r3
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 8186 	beq.w	8002928 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d005      	beq.n	8002634 <HAL_GPIO_Init+0x44>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d130      	bne.n	8002696 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800266a:	2201      	movs	r2, #1
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	f003 0201 	and.w	r2, r3, #1
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d017      	beq.n	80026d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	2203      	movs	r2, #3
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d123      	bne.n	8002726 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	08da      	lsrs	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3208      	adds	r2, #8
 80026e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	220f      	movs	r2, #15
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	08da      	lsrs	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3208      	adds	r2, #8
 8002720:	69b9      	ldr	r1, [r7, #24]
 8002722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	2203      	movs	r2, #3
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0203 	and.w	r2, r3, #3
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 80e0 	beq.w	8002928 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002768:	4b2f      	ldr	r3, [pc, #188]	; (8002828 <HAL_GPIO_Init+0x238>)
 800276a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800276e:	4a2e      	ldr	r2, [pc, #184]	; (8002828 <HAL_GPIO_Init+0x238>)
 8002770:	f043 0302 	orr.w	r3, r3, #2
 8002774:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002778:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <HAL_GPIO_Init+0x238>)
 800277a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002786:	4a29      	ldr	r2, [pc, #164]	; (800282c <HAL_GPIO_Init+0x23c>)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	3302      	adds	r3, #2
 800278e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	220f      	movs	r2, #15
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a20      	ldr	r2, [pc, #128]	; (8002830 <HAL_GPIO_Init+0x240>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d052      	beq.n	8002858 <HAL_GPIO_Init+0x268>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a1f      	ldr	r2, [pc, #124]	; (8002834 <HAL_GPIO_Init+0x244>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d031      	beq.n	800281e <HAL_GPIO_Init+0x22e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a1e      	ldr	r2, [pc, #120]	; (8002838 <HAL_GPIO_Init+0x248>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d02b      	beq.n	800281a <HAL_GPIO_Init+0x22a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a1d      	ldr	r2, [pc, #116]	; (800283c <HAL_GPIO_Init+0x24c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d025      	beq.n	8002816 <HAL_GPIO_Init+0x226>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a1c      	ldr	r2, [pc, #112]	; (8002840 <HAL_GPIO_Init+0x250>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01f      	beq.n	8002812 <HAL_GPIO_Init+0x222>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <HAL_GPIO_Init+0x254>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d019      	beq.n	800280e <HAL_GPIO_Init+0x21e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a1a      	ldr	r2, [pc, #104]	; (8002848 <HAL_GPIO_Init+0x258>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d013      	beq.n	800280a <HAL_GPIO_Init+0x21a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a19      	ldr	r2, [pc, #100]	; (800284c <HAL_GPIO_Init+0x25c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00d      	beq.n	8002806 <HAL_GPIO_Init+0x216>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a18      	ldr	r2, [pc, #96]	; (8002850 <HAL_GPIO_Init+0x260>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d007      	beq.n	8002802 <HAL_GPIO_Init+0x212>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a17      	ldr	r2, [pc, #92]	; (8002854 <HAL_GPIO_Init+0x264>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d101      	bne.n	80027fe <HAL_GPIO_Init+0x20e>
 80027fa:	2309      	movs	r3, #9
 80027fc:	e02d      	b.n	800285a <HAL_GPIO_Init+0x26a>
 80027fe:	230a      	movs	r3, #10
 8002800:	e02b      	b.n	800285a <HAL_GPIO_Init+0x26a>
 8002802:	2308      	movs	r3, #8
 8002804:	e029      	b.n	800285a <HAL_GPIO_Init+0x26a>
 8002806:	2307      	movs	r3, #7
 8002808:	e027      	b.n	800285a <HAL_GPIO_Init+0x26a>
 800280a:	2306      	movs	r3, #6
 800280c:	e025      	b.n	800285a <HAL_GPIO_Init+0x26a>
 800280e:	2305      	movs	r3, #5
 8002810:	e023      	b.n	800285a <HAL_GPIO_Init+0x26a>
 8002812:	2304      	movs	r3, #4
 8002814:	e021      	b.n	800285a <HAL_GPIO_Init+0x26a>
 8002816:	2303      	movs	r3, #3
 8002818:	e01f      	b.n	800285a <HAL_GPIO_Init+0x26a>
 800281a:	2302      	movs	r3, #2
 800281c:	e01d      	b.n	800285a <HAL_GPIO_Init+0x26a>
 800281e:	2301      	movs	r3, #1
 8002820:	e01b      	b.n	800285a <HAL_GPIO_Init+0x26a>
 8002822:	bf00      	nop
 8002824:	58000080 	.word	0x58000080
 8002828:	58024400 	.word	0x58024400
 800282c:	58000400 	.word	0x58000400
 8002830:	58020000 	.word	0x58020000
 8002834:	58020400 	.word	0x58020400
 8002838:	58020800 	.word	0x58020800
 800283c:	58020c00 	.word	0x58020c00
 8002840:	58021000 	.word	0x58021000
 8002844:	58021400 	.word	0x58021400
 8002848:	58021800 	.word	0x58021800
 800284c:	58021c00 	.word	0x58021c00
 8002850:	58022000 	.word	0x58022000
 8002854:	58022400 	.word	0x58022400
 8002858:	2300      	movs	r3, #0
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	f002 0203 	and.w	r2, r2, #3
 8002860:	0092      	lsls	r2, r2, #2
 8002862:	4093      	lsls	r3, r2
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800286a:	4938      	ldr	r1, [pc, #224]	; (800294c <HAL_GPIO_Init+0x35c>)
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	3302      	adds	r3, #2
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800289e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80028cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	3301      	adds	r3, #1
 800292c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	fa22 f303 	lsr.w	r3, r2, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	f47f ae63 	bne.w	8002604 <HAL_GPIO_Init+0x14>
  }
}
 800293e:	bf00      	nop
 8002940:	bf00      	nop
 8002942:	3724      	adds	r7, #36	; 0x24
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	58000400 	.word	0x58000400

08002950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	807b      	strh	r3, [r7, #2]
 800295c:	4613      	mov	r3, r2
 800295e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002960:	787b      	ldrb	r3, [r7, #1]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002966:	887a      	ldrh	r2, [r7, #2]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800296c:	e003      	b.n	8002976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800296e:	887b      	ldrh	r3, [r7, #2]
 8002970:	041a      	lsls	r2, r3, #16
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	619a      	str	r2, [r3, #24]
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002982:	b480      	push	{r7}
 8002984:	b085      	sub	sp, #20
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	460b      	mov	r3, r1
 800298c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002994:	887a      	ldrh	r2, [r7, #2]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4013      	ands	r3, r2
 800299a:	041a      	lsls	r2, r3, #16
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	43d9      	mvns	r1, r3
 80029a0:	887b      	ldrh	r3, [r7, #2]
 80029a2:	400b      	ands	r3, r1
 80029a4:	431a      	orrs	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	619a      	str	r2, [r3, #24]
}
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80029c0:	4b29      	ldr	r3, [pc, #164]	; (8002a68 <HAL_PWREx_ConfigSupply+0xb0>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	2b06      	cmp	r3, #6
 80029ca:	d00a      	beq.n	80029e2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80029cc:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <HAL_PWREx_ConfigSupply+0xb0>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d001      	beq.n	80029de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e040      	b.n	8002a60 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e03e      	b.n	8002a60 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80029e2:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <HAL_PWREx_ConfigSupply+0xb0>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80029ea:	491f      	ldr	r1, [pc, #124]	; (8002a68 <HAL_PWREx_ConfigSupply+0xb0>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80029f2:	f7fe ff59 	bl	80018a8 <HAL_GetTick>
 80029f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029f8:	e009      	b.n	8002a0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80029fa:	f7fe ff55 	bl	80018a8 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a08:	d901      	bls.n	8002a0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e028      	b.n	8002a60 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a0e:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a1a:	d1ee      	bne.n	80029fa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b1e      	cmp	r3, #30
 8002a20:	d008      	beq.n	8002a34 <HAL_PWREx_ConfigSupply+0x7c>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b2e      	cmp	r3, #46	; 0x2e
 8002a26:	d005      	beq.n	8002a34 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b1d      	cmp	r3, #29
 8002a2c:	d002      	beq.n	8002a34 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b2d      	cmp	r3, #45	; 0x2d
 8002a32:	d114      	bne.n	8002a5e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002a34:	f7fe ff38 	bl	80018a8 <HAL_GetTick>
 8002a38:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002a3a:	e009      	b.n	8002a50 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a3c:	f7fe ff34 	bl	80018a8 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a4a:	d901      	bls.n	8002a50 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e007      	b.n	8002a60 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5c:	d1ee      	bne.n	8002a3c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	58024800 	.word	0x58024800

08002a6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08c      	sub	sp, #48	; 0x30
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d102      	bne.n	8002a80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	f000 bc1f 	b.w	80032be <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80b3 	beq.w	8002bf4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a8e:	4b95      	ldr	r3, [pc, #596]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a98:	4b92      	ldr	r3, [pc, #584]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d007      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x48>
 8002aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa6:	2b18      	cmp	r3, #24
 8002aa8:	d112      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x64>
 8002aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d10d      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab4:	4b8b      	ldr	r3, [pc, #556]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 8098 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x186>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f040 8093 	bne.w	8002bf2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e3f6      	b.n	80032be <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad8:	d106      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x7c>
 8002ada:	4b82      	ldr	r3, [pc, #520]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a81      	ldr	r2, [pc, #516]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e058      	b.n	8002b9a <HAL_RCC_OscConfig+0x12e>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d112      	bne.n	8002b16 <HAL_RCC_OscConfig+0xaa>
 8002af0:	4b7c      	ldr	r3, [pc, #496]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a7b      	ldr	r2, [pc, #492]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	4b79      	ldr	r3, [pc, #484]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a78      	ldr	r2, [pc, #480]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	4b76      	ldr	r3, [pc, #472]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a75      	ldr	r2, [pc, #468]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	e041      	b.n	8002b9a <HAL_RCC_OscConfig+0x12e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b1e:	d112      	bne.n	8002b46 <HAL_RCC_OscConfig+0xda>
 8002b20:	4b70      	ldr	r3, [pc, #448]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a6f      	ldr	r2, [pc, #444]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	4b6d      	ldr	r3, [pc, #436]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a6c      	ldr	r2, [pc, #432]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4b6a      	ldr	r3, [pc, #424]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a69      	ldr	r2, [pc, #420]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	e029      	b.n	8002b9a <HAL_RCC_OscConfig+0x12e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002b4e:	d112      	bne.n	8002b76 <HAL_RCC_OscConfig+0x10a>
 8002b50:	4b64      	ldr	r3, [pc, #400]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a63      	ldr	r2, [pc, #396]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b61      	ldr	r3, [pc, #388]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a60      	ldr	r2, [pc, #384]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	4b5e      	ldr	r3, [pc, #376]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a5d      	ldr	r2, [pc, #372]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	e011      	b.n	8002b9a <HAL_RCC_OscConfig+0x12e>
 8002b76:	4b5b      	ldr	r3, [pc, #364]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a5a      	ldr	r2, [pc, #360]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	4b58      	ldr	r3, [pc, #352]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a57      	ldr	r2, [pc, #348]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	4b55      	ldr	r3, [pc, #340]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a54      	ldr	r2, [pc, #336]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002b94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b98:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d013      	beq.n	8002bca <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7fe fe81 	bl	80018a8 <HAL_GetTick>
 8002ba6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002baa:	f7fe fe7d 	bl	80018a8 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b64      	cmp	r3, #100	; 0x64
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e380      	b.n	80032be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bbc:	4b49      	ldr	r3, [pc, #292]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x13e>
 8002bc8:	e014      	b.n	8002bf4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bca:	f7fe fe6d 	bl	80018a8 <HAL_GetTick>
 8002bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd2:	f7fe fe69 	bl	80018a8 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b64      	cmp	r3, #100	; 0x64
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e36c      	b.n	80032be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002be4:	4b3f      	ldr	r3, [pc, #252]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f0      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x166>
 8002bf0:	e000      	b.n	8002bf4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 808c 	beq.w	8002d1a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c02:	4b38      	ldr	r3, [pc, #224]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c0a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c0c:	4b35      	ldr	r3, [pc, #212]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <HAL_RCC_OscConfig+0x1bc>
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	2b18      	cmp	r3, #24
 8002c1c:	d137      	bne.n	8002c8e <HAL_RCC_OscConfig+0x222>
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d132      	bne.n	8002c8e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c28:	4b2e      	ldr	r3, [pc, #184]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_RCC_OscConfig+0x1d4>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e33e      	b.n	80032be <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c40:	4b28      	ldr	r3, [pc, #160]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f023 0219 	bic.w	r2, r3, #25
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4925      	ldr	r1, [pc, #148]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c52:	f7fe fe29 	bl	80018a8 <HAL_GetTick>
 8002c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5a:	f7fe fe25 	bl	80018a8 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e328      	b.n	80032be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c78:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	4917      	ldr	r1, [pc, #92]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c8c:	e045      	b.n	8002d1a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d028      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c96:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 0219 	bic.w	r2, r3, #25
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	4910      	ldr	r1, [pc, #64]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fe fdfe 	bl	80018a8 <HAL_GetTick>
 8002cac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb0:	f7fe fdfa 	bl	80018a8 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e2fd      	b.n	80032be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cc2:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cce:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	061b      	lsls	r3, r3, #24
 8002cdc:	4901      	ldr	r1, [pc, #4]	; (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	604b      	str	r3, [r1, #4]
 8002ce2:	e01a      	b.n	8002d1a <HAL_RCC_OscConfig+0x2ae>
 8002ce4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce8:	4b97      	ldr	r3, [pc, #604]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a96      	ldr	r2, [pc, #600]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002cee:	f023 0301 	bic.w	r3, r3, #1
 8002cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fe fdd8 	bl	80018a8 <HAL_GetTick>
 8002cf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfc:	f7fe fdd4 	bl	80018a8 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e2d7      	b.n	80032be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d0e:	4b8e      	ldr	r3, [pc, #568]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d06a      	beq.n	8002dfc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d26:	4b88      	ldr	r3, [pc, #544]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d2e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d30:	4b85      	ldr	r3, [pc, #532]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d007      	beq.n	8002d4c <HAL_RCC_OscConfig+0x2e0>
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	2b18      	cmp	r3, #24
 8002d40:	d11b      	bne.n	8002d7a <HAL_RCC_OscConfig+0x30e>
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d116      	bne.n	8002d7a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d4c:	4b7e      	ldr	r3, [pc, #504]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_OscConfig+0x2f8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	2b80      	cmp	r3, #128	; 0x80
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e2ac      	b.n	80032be <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d64:	4b78      	ldr	r3, [pc, #480]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	061b      	lsls	r3, r3, #24
 8002d72:	4975      	ldr	r1, [pc, #468]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d78:	e040      	b.n	8002dfc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d023      	beq.n	8002dca <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d82:	4b71      	ldr	r3, [pc, #452]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a70      	ldr	r2, [pc, #448]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8e:	f7fe fd8b 	bl	80018a8 <HAL_GetTick>
 8002d92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d96:	f7fe fd87 	bl	80018a8 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e28a      	b.n	80032be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002da8:	4b67      	ldr	r3, [pc, #412]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002db4:	4b64      	ldr	r3, [pc, #400]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	061b      	lsls	r3, r3, #24
 8002dc2:	4961      	ldr	r1, [pc, #388]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60cb      	str	r3, [r1, #12]
 8002dc8:	e018      	b.n	8002dfc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002dca:	4b5f      	ldr	r3, [pc, #380]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a5e      	ldr	r2, [pc, #376]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd6:	f7fe fd67 	bl	80018a8 <HAL_GetTick>
 8002dda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002dde:	f7fe fd63 	bl	80018a8 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e266      	b.n	80032be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002df0:	4b55      	ldr	r3, [pc, #340]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f0      	bne.n	8002dde <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d036      	beq.n	8002e76 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d019      	beq.n	8002e44 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e10:	4b4d      	ldr	r3, [pc, #308]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e14:	4a4c      	ldr	r2, [pc, #304]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1c:	f7fe fd44 	bl	80018a8 <HAL_GetTick>
 8002e20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e24:	f7fe fd40 	bl	80018a8 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e243      	b.n	80032be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e36:	4b44      	ldr	r3, [pc, #272]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x3b8>
 8002e42:	e018      	b.n	8002e76 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e44:	4b40      	ldr	r3, [pc, #256]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e48:	4a3f      	ldr	r2, [pc, #252]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
 8002e4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e50:	f7fe fd2a 	bl	80018a8 <HAL_GetTick>
 8002e54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e58:	f7fe fd26 	bl	80018a8 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e229      	b.n	80032be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e6a:	4b37      	ldr	r3, [pc, #220]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d036      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d019      	beq.n	8002ebe <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e8a:	4b2f      	ldr	r3, [pc, #188]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a2e      	ldr	r2, [pc, #184]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002e90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e96:	f7fe fd07 	bl	80018a8 <HAL_GetTick>
 8002e9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e9e:	f7fe fd03 	bl	80018a8 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e206      	b.n	80032be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002eb0:	4b25      	ldr	r3, [pc, #148]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x432>
 8002ebc:	e018      	b.n	8002ef0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ebe:	4b22      	ldr	r3, [pc, #136]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a21      	ldr	r2, [pc, #132]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002ec4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ec8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002eca:	f7fe fced 	bl	80018a8 <HAL_GetTick>
 8002ece:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ed2:	f7fe fce9 	bl	80018a8 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e1ec      	b.n	80032be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ee4:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f0      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80af 	beq.w	800305c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002efe:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <HAL_RCC_OscConfig+0x4e0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a12      	ldr	r2, [pc, #72]	; (8002f4c <HAL_RCC_OscConfig+0x4e0>)
 8002f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f0a:	f7fe fccd 	bl	80018a8 <HAL_GetTick>
 8002f0e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f12:	f7fe fcc9 	bl	80018a8 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b64      	cmp	r3, #100	; 0x64
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e1cc      	b.n	80032be <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <HAL_RCC_OscConfig+0x4e0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0f0      	beq.n	8002f12 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d10b      	bne.n	8002f50 <HAL_RCC_OscConfig+0x4e4>
 8002f38:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3c:	4a02      	ldr	r2, [pc, #8]	; (8002f48 <HAL_RCC_OscConfig+0x4dc>)
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	6713      	str	r3, [r2, #112]	; 0x70
 8002f44:	e05b      	b.n	8002ffe <HAL_RCC_OscConfig+0x592>
 8002f46:	bf00      	nop
 8002f48:	58024400 	.word	0x58024400
 8002f4c:	58024800 	.word	0x58024800
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d112      	bne.n	8002f7e <HAL_RCC_OscConfig+0x512>
 8002f58:	4b9d      	ldr	r3, [pc, #628]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5c:	4a9c      	ldr	r2, [pc, #624]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002f5e:	f023 0301 	bic.w	r3, r3, #1
 8002f62:	6713      	str	r3, [r2, #112]	; 0x70
 8002f64:	4b9a      	ldr	r3, [pc, #616]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	4a99      	ldr	r2, [pc, #612]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f70:	4b97      	ldr	r3, [pc, #604]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	4a96      	ldr	r2, [pc, #600]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002f76:	f023 0304 	bic.w	r3, r3, #4
 8002f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7c:	e03f      	b.n	8002ffe <HAL_RCC_OscConfig+0x592>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b05      	cmp	r3, #5
 8002f84:	d112      	bne.n	8002fac <HAL_RCC_OscConfig+0x540>
 8002f86:	4b92      	ldr	r3, [pc, #584]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8a:	4a91      	ldr	r2, [pc, #580]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002f8c:	f043 0304 	orr.w	r3, r3, #4
 8002f90:	6713      	str	r3, [r2, #112]	; 0x70
 8002f92:	4b8f      	ldr	r3, [pc, #572]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f96:	4a8e      	ldr	r2, [pc, #568]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9e:	4b8c      	ldr	r3, [pc, #560]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	4a8b      	ldr	r2, [pc, #556]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002faa:	e028      	b.n	8002ffe <HAL_RCC_OscConfig+0x592>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b85      	cmp	r3, #133	; 0x85
 8002fb2:	d112      	bne.n	8002fda <HAL_RCC_OscConfig+0x56e>
 8002fb4:	4b86      	ldr	r3, [pc, #536]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	4a85      	ldr	r2, [pc, #532]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002fba:	f043 0304 	orr.w	r3, r3, #4
 8002fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc0:	4b83      	ldr	r3, [pc, #524]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	4a82      	ldr	r2, [pc, #520]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fca:	6713      	str	r3, [r2, #112]	; 0x70
 8002fcc:	4b80      	ldr	r3, [pc, #512]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	4a7f      	ldr	r2, [pc, #508]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd8:	e011      	b.n	8002ffe <HAL_RCC_OscConfig+0x592>
 8002fda:	4b7d      	ldr	r3, [pc, #500]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	4a7c      	ldr	r2, [pc, #496]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe6:	4b7a      	ldr	r3, [pc, #488]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	4a79      	ldr	r2, [pc, #484]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002fec:	f023 0304 	bic.w	r3, r3, #4
 8002ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff2:	4b77      	ldr	r3, [pc, #476]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff6:	4a76      	ldr	r2, [pc, #472]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8002ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ffc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d015      	beq.n	8003032 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003006:	f7fe fc4f 	bl	80018a8 <HAL_GetTick>
 800300a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800300c:	e00a      	b.n	8003024 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300e:	f7fe fc4b 	bl	80018a8 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f241 3288 	movw	r2, #5000	; 0x1388
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e14c      	b.n	80032be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003024:	4b6a      	ldr	r3, [pc, #424]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8003026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0ee      	beq.n	800300e <HAL_RCC_OscConfig+0x5a2>
 8003030:	e014      	b.n	800305c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003032:	f7fe fc39 	bl	80018a8 <HAL_GetTick>
 8003036:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303a:	f7fe fc35 	bl	80018a8 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f241 3288 	movw	r2, #5000	; 0x1388
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e136      	b.n	80032be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003050:	4b5f      	ldr	r3, [pc, #380]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1ee      	bne.n	800303a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 812b 	beq.w	80032bc <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003066:	4b5a      	ldr	r3, [pc, #360]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800306e:	2b18      	cmp	r3, #24
 8003070:	f000 80bb 	beq.w	80031ea <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	2b02      	cmp	r3, #2
 800307a:	f040 8095 	bne.w	80031a8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307e:	4b54      	ldr	r3, [pc, #336]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a53      	ldr	r2, [pc, #332]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8003084:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308a:	f7fe fc0d 	bl	80018a8 <HAL_GetTick>
 800308e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003092:	f7fe fc09 	bl	80018a8 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e10c      	b.n	80032be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030a4:	4b4a      	ldr	r3, [pc, #296]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1f0      	bne.n	8003092 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b0:	4b47      	ldr	r3, [pc, #284]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 80030b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030b4:	4b47      	ldr	r3, [pc, #284]	; (80031d4 <HAL_RCC_OscConfig+0x768>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	430a      	orrs	r2, r1
 80030c4:	4942      	ldr	r1, [pc, #264]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	628b      	str	r3, [r1, #40]	; 0x28
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	3b01      	subs	r3, #1
 80030d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d8:	3b01      	subs	r3, #1
 80030da:	025b      	lsls	r3, r3, #9
 80030dc:	b29b      	uxth	r3, r3
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e4:	3b01      	subs	r3, #1
 80030e6:	041b      	lsls	r3, r3, #16
 80030e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f2:	3b01      	subs	r3, #1
 80030f4:	061b      	lsls	r3, r3, #24
 80030f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80030fa:	4935      	ldr	r1, [pc, #212]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003100:	4b33      	ldr	r3, [pc, #204]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	4a32      	ldr	r2, [pc, #200]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8003106:	f023 0301 	bic.w	r3, r3, #1
 800310a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800310c:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 800310e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003110:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <HAL_RCC_OscConfig+0x76c>)
 8003112:	4013      	ands	r3, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003118:	00d2      	lsls	r2, r2, #3
 800311a:	492d      	ldr	r1, [pc, #180]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 800311c:	4313      	orrs	r3, r2
 800311e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003120:	4b2b      	ldr	r3, [pc, #172]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	f023 020c 	bic.w	r2, r3, #12
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	4928      	ldr	r1, [pc, #160]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 800312e:	4313      	orrs	r3, r2
 8003130:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003132:	4b27      	ldr	r3, [pc, #156]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	f023 0202 	bic.w	r2, r3, #2
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	4924      	ldr	r1, [pc, #144]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8003140:	4313      	orrs	r3, r2
 8003142:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003144:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	4a21      	ldr	r2, [pc, #132]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 800314a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003150:	4b1f      	ldr	r3, [pc, #124]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	4a1e      	ldr	r2, [pc, #120]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8003156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800315a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800315c:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	4a1b      	ldr	r2, [pc, #108]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8003162:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	4a18      	ldr	r2, [pc, #96]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003174:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a15      	ldr	r2, [pc, #84]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 800317a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800317e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fe fb92 	bl	80018a8 <HAL_GetTick>
 8003184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003188:	f7fe fb8e 	bl	80018a8 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e091      	b.n	80032be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800319a:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0x71c>
 80031a6:	e089      	b.n	80032bc <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <HAL_RCC_OscConfig+0x764>)
 80031ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b4:	f7fe fb78 	bl	80018a8 <HAL_GetTick>
 80031b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031ba:	e00f      	b.n	80031dc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031bc:	f7fe fb74 	bl	80018a8 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d908      	bls.n	80031dc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e077      	b.n	80032be <HAL_RCC_OscConfig+0x852>
 80031ce:	bf00      	nop
 80031d0:	58024400 	.word	0x58024400
 80031d4:	fffffc0c 	.word	0xfffffc0c
 80031d8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031dc:	4b3a      	ldr	r3, [pc, #232]	; (80032c8 <HAL_RCC_OscConfig+0x85c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e9      	bne.n	80031bc <HAL_RCC_OscConfig+0x750>
 80031e8:	e068      	b.n	80032bc <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80031ea:	4b37      	ldr	r3, [pc, #220]	; (80032c8 <HAL_RCC_OscConfig+0x85c>)
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80031f0:	4b35      	ldr	r3, [pc, #212]	; (80032c8 <HAL_RCC_OscConfig+0x85c>)
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d031      	beq.n	8003262 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f003 0203 	and.w	r2, r3, #3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d12a      	bne.n	8003262 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	091b      	lsrs	r3, r3, #4
 8003210:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d122      	bne.n	8003262 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003228:	429a      	cmp	r2, r3
 800322a:	d11a      	bne.n	8003262 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	0a5b      	lsrs	r3, r3, #9
 8003230:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003238:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800323a:	429a      	cmp	r2, r3
 800323c:	d111      	bne.n	8003262 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	0c1b      	lsrs	r3, r3, #16
 8003242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800324c:	429a      	cmp	r2, r3
 800324e:	d108      	bne.n	8003262 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	0e1b      	lsrs	r3, r3, #24
 8003254:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800325e:	429a      	cmp	r2, r3
 8003260:	d001      	beq.n	8003266 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e02b      	b.n	80032be <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003266:	4b18      	ldr	r3, [pc, #96]	; (80032c8 <HAL_RCC_OscConfig+0x85c>)
 8003268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326a:	08db      	lsrs	r3, r3, #3
 800326c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003270:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	429a      	cmp	r2, r3
 800327a:	d01f      	beq.n	80032bc <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800327c:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <HAL_RCC_OscConfig+0x85c>)
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	4a11      	ldr	r2, [pc, #68]	; (80032c8 <HAL_RCC_OscConfig+0x85c>)
 8003282:	f023 0301 	bic.w	r3, r3, #1
 8003286:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003288:	f7fe fb0e 	bl	80018a8 <HAL_GetTick>
 800328c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800328e:	bf00      	nop
 8003290:	f7fe fb0a 	bl	80018a8 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	4293      	cmp	r3, r2
 800329a:	d0f9      	beq.n	8003290 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <HAL_RCC_OscConfig+0x85c>)
 800329e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032a0:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <HAL_RCC_OscConfig+0x860>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032a8:	00d2      	lsls	r2, r2, #3
 80032aa:	4907      	ldr	r1, [pc, #28]	; (80032c8 <HAL_RCC_OscConfig+0x85c>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <HAL_RCC_OscConfig+0x85c>)
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	4a04      	ldr	r2, [pc, #16]	; (80032c8 <HAL_RCC_OscConfig+0x85c>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3730      	adds	r7, #48	; 0x30
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	58024400 	.word	0x58024400
 80032cc:	ffff0007 	.word	0xffff0007

080032d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e19c      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032e4:	4b8a      	ldr	r3, [pc, #552]	; (8003510 <HAL_RCC_ClockConfig+0x240>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d910      	bls.n	8003314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b87      	ldr	r3, [pc, #540]	; (8003510 <HAL_RCC_ClockConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 020f 	bic.w	r2, r3, #15
 80032fa:	4985      	ldr	r1, [pc, #532]	; (8003510 <HAL_RCC_ClockConfig+0x240>)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003302:	4b83      	ldr	r3, [pc, #524]	; (8003510 <HAL_RCC_ClockConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e184      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d010      	beq.n	8003342 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	4b7b      	ldr	r3, [pc, #492]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800332c:	429a      	cmp	r2, r3
 800332e:	d908      	bls.n	8003342 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003330:	4b78      	ldr	r3, [pc, #480]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	4975      	ldr	r1, [pc, #468]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 800333e:	4313      	orrs	r3, r2
 8003340:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d010      	beq.n	8003370 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	4b70      	ldr	r3, [pc, #448]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800335a:	429a      	cmp	r2, r3
 800335c:	d908      	bls.n	8003370 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800335e:	4b6d      	ldr	r3, [pc, #436]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	496a      	ldr	r1, [pc, #424]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 800336c:	4313      	orrs	r3, r2
 800336e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0310 	and.w	r3, r3, #16
 8003378:	2b00      	cmp	r3, #0
 800337a:	d010      	beq.n	800339e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699a      	ldr	r2, [r3, #24]
 8003380:	4b64      	ldr	r3, [pc, #400]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003388:	429a      	cmp	r2, r3
 800338a:	d908      	bls.n	800339e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800338c:	4b61      	ldr	r3, [pc, #388]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	495e      	ldr	r1, [pc, #376]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 800339a:	4313      	orrs	r3, r2
 800339c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d010      	beq.n	80033cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69da      	ldr	r2, [r3, #28]
 80033ae:	4b59      	ldr	r3, [pc, #356]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d908      	bls.n	80033cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80033ba:	4b56      	ldr	r3, [pc, #344]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	4953      	ldr	r1, [pc, #332]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d010      	beq.n	80033fa <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	4b4d      	ldr	r3, [pc, #308]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d908      	bls.n	80033fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e8:	4b4a      	ldr	r3, [pc, #296]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f023 020f 	bic.w	r2, r3, #15
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4947      	ldr	r1, [pc, #284]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d055      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003406:	4b43      	ldr	r3, [pc, #268]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	4940      	ldr	r1, [pc, #256]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003414:	4313      	orrs	r3, r2
 8003416:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d107      	bne.n	8003430 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003420:	4b3c      	ldr	r3, [pc, #240]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d121      	bne.n	8003470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e0f6      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b03      	cmp	r3, #3
 8003436:	d107      	bne.n	8003448 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003438:	4b36      	ldr	r3, [pc, #216]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d115      	bne.n	8003470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0ea      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d107      	bne.n	8003460 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003450:	4b30      	ldr	r3, [pc, #192]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d109      	bne.n	8003470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0de      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003460:	4b2c      	ldr	r3, [pc, #176]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0d6      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003470:	4b28      	ldr	r3, [pc, #160]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f023 0207 	bic.w	r2, r3, #7
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4925      	ldr	r1, [pc, #148]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 800347e:	4313      	orrs	r3, r2
 8003480:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003482:	f7fe fa11 	bl	80018a8 <HAL_GetTick>
 8003486:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003488:	e00a      	b.n	80034a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800348a:	f7fe fa0d 	bl	80018a8 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e0be      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a0:	4b1c      	ldr	r3, [pc, #112]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d1eb      	bne.n	800348a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d010      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d208      	bcs.n	80034e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ce:	4b11      	ldr	r3, [pc, #68]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	f023 020f 	bic.w	r2, r3, #15
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	490e      	ldr	r1, [pc, #56]	; (8003514 <HAL_RCC_ClockConfig+0x244>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <HAL_RCC_ClockConfig+0x240>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d214      	bcs.n	8003518 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <HAL_RCC_ClockConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 020f 	bic.w	r2, r3, #15
 80034f6:	4906      	ldr	r1, [pc, #24]	; (8003510 <HAL_RCC_ClockConfig+0x240>)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fe:	4b04      	ldr	r3, [pc, #16]	; (8003510 <HAL_RCC_ClockConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d005      	beq.n	8003518 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e086      	b.n	800361e <HAL_RCC_ClockConfig+0x34e>
 8003510:	52002000 	.word	0x52002000
 8003514:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d010      	beq.n	8003546 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	4b3f      	ldr	r3, [pc, #252]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003530:	429a      	cmp	r2, r3
 8003532:	d208      	bcs.n	8003546 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003534:	4b3c      	ldr	r3, [pc, #240]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	4939      	ldr	r1, [pc, #228]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003542:	4313      	orrs	r3, r2
 8003544:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d010      	beq.n	8003574 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	4b34      	ldr	r3, [pc, #208]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800355e:	429a      	cmp	r2, r3
 8003560:	d208      	bcs.n	8003574 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003562:	4b31      	ldr	r3, [pc, #196]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	492e      	ldr	r1, [pc, #184]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003570:	4313      	orrs	r3, r2
 8003572:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	d010      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699a      	ldr	r2, [r3, #24]
 8003584:	4b28      	ldr	r3, [pc, #160]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800358c:	429a      	cmp	r2, r3
 800358e:	d208      	bcs.n	80035a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003590:	4b25      	ldr	r3, [pc, #148]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	4922      	ldr	r1, [pc, #136]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d010      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d208      	bcs.n	80035d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035be:	4b1a      	ldr	r3, [pc, #104]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	4917      	ldr	r1, [pc, #92]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80035d0:	f000 f834 	bl	800363c <HAL_RCC_GetSysClockFreq>
 80035d4:	4602      	mov	r2, r0
 80035d6:	4b14      	ldr	r3, [pc, #80]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	0a1b      	lsrs	r3, r3, #8
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	4912      	ldr	r1, [pc, #72]	; (800362c <HAL_RCC_ClockConfig+0x35c>)
 80035e2:	5ccb      	ldrb	r3, [r1, r3]
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
 80035ec:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80035ee:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <HAL_RCC_ClockConfig+0x358>)
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	4a0d      	ldr	r2, [pc, #52]	; (800362c <HAL_RCC_ClockConfig+0x35c>)
 80035f8:	5cd3      	ldrb	r3, [r2, r3]
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
 8003604:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <HAL_RCC_ClockConfig+0x360>)
 8003606:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003608:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <HAL_RCC_ClockConfig+0x364>)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800360e:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <HAL_RCC_ClockConfig+0x368>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fe f8fe 	bl	8001814 <HAL_InitTick>
 8003618:	4603      	mov	r3, r0
 800361a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800361c:	7bfb      	ldrb	r3, [r7, #15]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	58024400 	.word	0x58024400
 800362c:	08009af8 	.word	0x08009af8
 8003630:	24000014 	.word	0x24000014
 8003634:	24000010 	.word	0x24000010
 8003638:	24000018 	.word	0x24000018

0800363c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800363c:	b480      	push	{r7}
 800363e:	b089      	sub	sp, #36	; 0x24
 8003640:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003642:	4bb3      	ldr	r3, [pc, #716]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800364a:	2b18      	cmp	r3, #24
 800364c:	f200 8155 	bhi.w	80038fa <HAL_RCC_GetSysClockFreq+0x2be>
 8003650:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003656:	bf00      	nop
 8003658:	080036bd 	.word	0x080036bd
 800365c:	080038fb 	.word	0x080038fb
 8003660:	080038fb 	.word	0x080038fb
 8003664:	080038fb 	.word	0x080038fb
 8003668:	080038fb 	.word	0x080038fb
 800366c:	080038fb 	.word	0x080038fb
 8003670:	080038fb 	.word	0x080038fb
 8003674:	080038fb 	.word	0x080038fb
 8003678:	080036e3 	.word	0x080036e3
 800367c:	080038fb 	.word	0x080038fb
 8003680:	080038fb 	.word	0x080038fb
 8003684:	080038fb 	.word	0x080038fb
 8003688:	080038fb 	.word	0x080038fb
 800368c:	080038fb 	.word	0x080038fb
 8003690:	080038fb 	.word	0x080038fb
 8003694:	080038fb 	.word	0x080038fb
 8003698:	080036e9 	.word	0x080036e9
 800369c:	080038fb 	.word	0x080038fb
 80036a0:	080038fb 	.word	0x080038fb
 80036a4:	080038fb 	.word	0x080038fb
 80036a8:	080038fb 	.word	0x080038fb
 80036ac:	080038fb 	.word	0x080038fb
 80036b0:	080038fb 	.word	0x080038fb
 80036b4:	080038fb 	.word	0x080038fb
 80036b8:	080036ef 	.word	0x080036ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036bc:	4b94      	ldr	r3, [pc, #592]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d009      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036c8:	4b91      	ldr	r3, [pc, #580]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	08db      	lsrs	r3, r3, #3
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	4a90      	ldr	r2, [pc, #576]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
 80036d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80036da:	e111      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80036dc:	4b8d      	ldr	r3, [pc, #564]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036de:	61bb      	str	r3, [r7, #24]
      break;
 80036e0:	e10e      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80036e2:	4b8d      	ldr	r3, [pc, #564]	; (8003918 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036e4:	61bb      	str	r3, [r7, #24]
      break;
 80036e6:	e10b      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80036e8:	4b8c      	ldr	r3, [pc, #560]	; (800391c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80036ea:	61bb      	str	r3, [r7, #24]
      break;
 80036ec:	e108      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036ee:	4b88      	ldr	r3, [pc, #544]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80036f8:	4b85      	ldr	r3, [pc, #532]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003702:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003704:	4b82      	ldr	r3, [pc, #520]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800370e:	4b80      	ldr	r3, [pc, #512]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003712:	08db      	lsrs	r3, r3, #3
 8003714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	ee07 3a90 	vmov	s15, r3
 8003722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003726:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80e1 	beq.w	80038f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2b02      	cmp	r3, #2
 8003736:	f000 8083 	beq.w	8003840 <HAL_RCC_GetSysClockFreq+0x204>
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2b02      	cmp	r3, #2
 800373e:	f200 80a1 	bhi.w	8003884 <HAL_RCC_GetSysClockFreq+0x248>
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_RCC_GetSysClockFreq+0x114>
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d056      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800374e:	e099      	b.n	8003884 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003750:	4b6f      	ldr	r3, [pc, #444]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d02d      	beq.n	80037b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800375c:	4b6c      	ldr	r3, [pc, #432]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	08db      	lsrs	r3, r3, #3
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	4a6b      	ldr	r2, [pc, #428]	; (8003914 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003768:	fa22 f303 	lsr.w	r3, r2, r3
 800376c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	ee07 3a90 	vmov	s15, r3
 8003774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	ee07 3a90 	vmov	s15, r3
 800377e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003786:	4b62      	ldr	r3, [pc, #392]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003796:	ed97 6a02 	vldr	s12, [r7, #8]
 800379a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003920 <HAL_RCC_GetSysClockFreq+0x2e4>
 800379e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80037b6:	e087      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003924 <HAL_RCC_GetSysClockFreq+0x2e8>
 80037c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ca:	4b51      	ldr	r3, [pc, #324]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037da:	ed97 6a02 	vldr	s12, [r7, #8]
 80037de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003920 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037fa:	e065      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003806:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003928 <HAL_RCC_GetSysClockFreq+0x2ec>
 800380a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800380e:	4b40      	ldr	r3, [pc, #256]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800381e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003822:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003920 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800382a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800382e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800383e:	e043      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800392c <HAL_RCC_GetSysClockFreq+0x2f0>
 800384e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003852:	4b2f      	ldr	r3, [pc, #188]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003862:	ed97 6a02 	vldr	s12, [r7, #8]
 8003866:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003920 <HAL_RCC_GetSysClockFreq+0x2e4>
 800386a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800386e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800387a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003882:	e021      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003928 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003896:	4b1e      	ldr	r3, [pc, #120]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80038aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003920 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	0a5b      	lsrs	r3, r3, #9
 80038ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038d2:	3301      	adds	r3, #1
 80038d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	ee07 3a90 	vmov	s15, r3
 80038dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80038e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ec:	ee17 3a90 	vmov	r3, s15
 80038f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80038f2:	e005      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61bb      	str	r3, [r7, #24]
      break;
 80038f8:	e002      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80038fa:	4b07      	ldr	r3, [pc, #28]	; (8003918 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038fc:	61bb      	str	r3, [r7, #24]
      break;
 80038fe:	bf00      	nop
  }

  return sysclockfreq;
 8003900:	69bb      	ldr	r3, [r7, #24]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3724      	adds	r7, #36	; 0x24
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	58024400 	.word	0x58024400
 8003914:	03d09000 	.word	0x03d09000
 8003918:	003d0900 	.word	0x003d0900
 800391c:	007a1200 	.word	0x007a1200
 8003920:	46000000 	.word	0x46000000
 8003924:	4c742400 	.word	0x4c742400
 8003928:	4a742400 	.word	0x4a742400
 800392c:	4af42400 	.word	0x4af42400

08003930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003936:	f7ff fe81 	bl	800363c <HAL_RCC_GetSysClockFreq>
 800393a:	4602      	mov	r2, r0
 800393c:	4b10      	ldr	r3, [pc, #64]	; (8003980 <HAL_RCC_GetHCLKFreq+0x50>)
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	0a1b      	lsrs	r3, r3, #8
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	490f      	ldr	r1, [pc, #60]	; (8003984 <HAL_RCC_GetHCLKFreq+0x54>)
 8003948:	5ccb      	ldrb	r3, [r1, r3]
 800394a:	f003 031f 	and.w	r3, r3, #31
 800394e:	fa22 f303 	lsr.w	r3, r2, r3
 8003952:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003954:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <HAL_RCC_GetHCLKFreq+0x50>)
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	4a09      	ldr	r2, [pc, #36]	; (8003984 <HAL_RCC_GetHCLKFreq+0x54>)
 800395e:	5cd3      	ldrb	r3, [r2, r3]
 8003960:	f003 031f 	and.w	r3, r3, #31
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	fa22 f303 	lsr.w	r3, r2, r3
 800396a:	4a07      	ldr	r2, [pc, #28]	; (8003988 <HAL_RCC_GetHCLKFreq+0x58>)
 800396c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800396e:	4a07      	ldr	r2, [pc, #28]	; (800398c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003974:	4b04      	ldr	r3, [pc, #16]	; (8003988 <HAL_RCC_GetHCLKFreq+0x58>)
 8003976:	681b      	ldr	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	58024400 	.word	0x58024400
 8003984:	08009af8 	.word	0x08009af8
 8003988:	24000014 	.word	0x24000014
 800398c:	24000010 	.word	0x24000010

08003990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003994:	f7ff ffcc 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 8003998:	4602      	mov	r2, r0
 800399a:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	4904      	ldr	r1, [pc, #16]	; (80039b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039a6:	5ccb      	ldrb	r3, [r1, r3]
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	58024400 	.word	0x58024400
 80039b8:	08009af8 	.word	0x08009af8

080039bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80039c0:	f7ff ffb6 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 80039c4:	4602      	mov	r2, r0
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	0a1b      	lsrs	r3, r3, #8
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	4904      	ldr	r1, [pc, #16]	; (80039e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039d2:	5ccb      	ldrb	r3, [r1, r3]
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80039dc:	4618      	mov	r0, r3
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	58024400 	.word	0x58024400
 80039e4:	08009af8 	.word	0x08009af8

080039e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039ec:	b0c8      	sub	sp, #288	; 0x120
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039f4:	2300      	movs	r3, #0
 80039f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039fa:	2300      	movs	r3, #0
 80039fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a08:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003a0c:	2500      	movs	r5, #0
 8003a0e:	ea54 0305 	orrs.w	r3, r4, r5
 8003a12:	d049      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a1e:	d02f      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003a20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a24:	d828      	bhi.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a2a:	d01a      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a30:	d822      	bhi.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a3a:	d007      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a3c:	e01c      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a3e:	4ba7      	ldr	r3, [pc, #668]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	4aa6      	ldr	r2, [pc, #664]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a4a:	e01a      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a50:	3308      	adds	r3, #8
 8003a52:	2102      	movs	r1, #2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f001 fc43 	bl	80052e0 <RCCEx_PLL2_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a60:	e00f      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a66:	3328      	adds	r3, #40	; 0x28
 8003a68:	2102      	movs	r1, #2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f001 fcea 	bl	8005444 <RCCEx_PLL3_Config>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a76:	e004      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a7e:	e000      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10a      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a8a:	4b94      	ldr	r3, [pc, #592]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a98:	4a90      	ldr	r2, [pc, #576]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	6513      	str	r3, [r2, #80]	; 0x50
 8003a9e:	e003      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003aa4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003ab4:	f04f 0900 	mov.w	r9, #0
 8003ab8:	ea58 0309 	orrs.w	r3, r8, r9
 8003abc:	d047      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d82a      	bhi.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003ac8:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ace:	bf00      	nop
 8003ad0:	08003ae5 	.word	0x08003ae5
 8003ad4:	08003af3 	.word	0x08003af3
 8003ad8:	08003b09 	.word	0x08003b09
 8003adc:	08003b27 	.word	0x08003b27
 8003ae0:	08003b27 	.word	0x08003b27
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ae4:	4b7d      	ldr	r3, [pc, #500]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	4a7c      	ldr	r2, [pc, #496]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003af0:	e01a      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af6:	3308      	adds	r3, #8
 8003af8:	2100      	movs	r1, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f001 fbf0 	bl	80052e0 <RCCEx_PLL2_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b06:	e00f      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b0c:	3328      	adds	r3, #40	; 0x28
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 fc97 	bl	8005444 <RCCEx_PLL3_Config>
 8003b16:	4603      	mov	r3, r0
 8003b18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b1c:	e004      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b24:	e000      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003b26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b30:	4b6a      	ldr	r3, [pc, #424]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b34:	f023 0107 	bic.w	r1, r3, #7
 8003b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3e:	4a67      	ldr	r2, [pc, #412]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b40:	430b      	orrs	r3, r1
 8003b42:	6513      	str	r3, [r2, #80]	; 0x50
 8003b44:	e003      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003b4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b56:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003b5a:	f04f 0b00 	mov.w	fp, #0
 8003b5e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003b62:	d054      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003b6e:	d036      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003b70:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003b74:	d82f      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7a:	d032      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b80:	d829      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b82:	2bc0      	cmp	r3, #192	; 0xc0
 8003b84:	d02f      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003b86:	2bc0      	cmp	r3, #192	; 0xc0
 8003b88:	d825      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b8a:	2b80      	cmp	r3, #128	; 0x80
 8003b8c:	d018      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003b8e:	2b80      	cmp	r3, #128	; 0x80
 8003b90:	d821      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003b96:	2b40      	cmp	r3, #64	; 0x40
 8003b98:	d007      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003b9a:	e01c      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b9c:	4b4f      	ldr	r3, [pc, #316]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	4a4e      	ldr	r2, [pc, #312]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003ba8:	e01e      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bae:	3308      	adds	r3, #8
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f001 fb94 	bl	80052e0 <RCCEx_PLL2_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003bbe:	e013      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bc4:	3328      	adds	r3, #40	; 0x28
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f001 fc3b 	bl	8005444 <RCCEx_PLL3_Config>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003bd4:	e008      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003bdc:	e004      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003bde:	bf00      	nop
 8003be0:	e002      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003be2:	bf00      	nop
 8003be4:	e000      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003be6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003bf0:	4b3a      	ldr	r3, [pc, #232]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfe:	4a37      	ldr	r2, [pc, #220]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c00:	430b      	orrs	r3, r1
 8003c02:	6513      	str	r3, [r2, #80]	; 0x50
 8003c04:	e003      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c0a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c16:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003c1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003c24:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	d05c      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c34:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003c38:	d03b      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003c3a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003c3e:	d834      	bhi.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c44:	d037      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c4a:	d82e      	bhi.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003c4c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c50:	d033      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003c52:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c56:	d828      	bhi.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5c:	d01a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c62:	d822      	bhi.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c6c:	d007      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003c6e:	e01c      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c70:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003c7c:	e01e      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c82:	3308      	adds	r3, #8
 8003c84:	2100      	movs	r1, #0
 8003c86:	4618      	mov	r0, r3
 8003c88:	f001 fb2a 	bl	80052e0 <RCCEx_PLL2_Config>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003c92:	e013      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c98:	3328      	adds	r3, #40	; 0x28
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f001 fbd1 	bl	8005444 <RCCEx_PLL3_Config>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003ca8:	e008      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003cb0:	e004      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003cb2:	bf00      	nop
 8003cb4:	e002      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10d      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd2:	4a02      	ldr	r2, [pc, #8]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	6513      	str	r3, [r2, #80]	; 0x50
 8003cd8:	e006      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003cda:	bf00      	nop
 8003cdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ce4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003cfe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003d02:	460b      	mov	r3, r1
 8003d04:	4313      	orrs	r3, r2
 8003d06:	d03a      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	2b30      	cmp	r3, #48	; 0x30
 8003d10:	d01f      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003d12:	2b30      	cmp	r3, #48	; 0x30
 8003d14:	d819      	bhi.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	d00c      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	d815      	bhi.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d019      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003d22:	2b10      	cmp	r3, #16
 8003d24:	d111      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d26:	4bae      	ldr	r3, [pc, #696]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	4aad      	ldr	r2, [pc, #692]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003d32:	e011      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d38:	3308      	adds	r3, #8
 8003d3a:	2102      	movs	r1, #2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f001 facf 	bl	80052e0 <RCCEx_PLL2_Config>
 8003d42:	4603      	mov	r3, r0
 8003d44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003d48:	e006      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d50:	e002      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003d52:	bf00      	nop
 8003d54:	e000      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003d60:	4b9f      	ldr	r3, [pc, #636]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d64:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6e:	4a9c      	ldr	r2, [pc, #624]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d70:	430b      	orrs	r3, r1
 8003d72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d74:	e003      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d7a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d86:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003d8a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003d94:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	d051      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003da4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003da8:	d035      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003daa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dae:	d82e      	bhi.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003db0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003db4:	d031      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003db6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dba:	d828      	bhi.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc0:	d01a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc6:	d822      	bhi.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd0:	d007      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003dd2:	e01c      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd4:	4b82      	ldr	r3, [pc, #520]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	4a81      	ldr	r2, [pc, #516]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003de0:	e01c      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de6:	3308      	adds	r3, #8
 8003de8:	2100      	movs	r1, #0
 8003dea:	4618      	mov	r0, r3
 8003dec:	f001 fa78 	bl	80052e0 <RCCEx_PLL2_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003df6:	e011      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dfc:	3328      	adds	r3, #40	; 0x28
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f001 fb1f 	bl	8005444 <RCCEx_PLL3_Config>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e0c:	e006      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e14:	e002      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003e16:	bf00      	nop
 8003e18:	e000      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e24:	4b6e      	ldr	r3, [pc, #440]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e28:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e32:	4a6b      	ldr	r2, [pc, #428]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6513      	str	r3, [r2, #80]	; 0x50
 8003e38:	e003      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e52:	2300      	movs	r3, #0
 8003e54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	d053      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e6c:	d033      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003e6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e72:	d82c      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e78:	d02f      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003e7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e7e:	d826      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e84:	d02b      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003e86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e8a:	d820      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e90:	d012      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003e92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e96:	d81a      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d022      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea0:	d115      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea6:	3308      	adds	r3, #8
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f001 fa18 	bl	80052e0 <RCCEx_PLL2_Config>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003eb6:	e015      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ebc:	3328      	adds	r3, #40	; 0x28
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f001 fabf 	bl	8005444 <RCCEx_PLL3_Config>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ecc:	e00a      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ed4:	e006      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003ed6:	bf00      	nop
 8003ed8:	e004      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003eda:	bf00      	nop
 8003edc:	e002      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003ede:	bf00      	nop
 8003ee0:	e000      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ee4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003eec:	4b3c      	ldr	r3, [pc, #240]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003efa:	4a39      	ldr	r2, [pc, #228]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003efc:	430b      	orrs	r3, r1
 8003efe:	6513      	str	r3, [r2, #80]	; 0x50
 8003f00:	e003      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f06:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f12:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003f16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f20:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4313      	orrs	r3, r2
 8003f28:	d060      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f32:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003f36:	d039      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003f38:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003f3c:	d832      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f42:	d035      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f48:	d82c      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4e:	d031      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f54:	d826      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f5a:	d02d      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003f5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f60:	d820      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f66:	d012      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f6c:	d81a      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d024      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f76:	d115      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	2101      	movs	r1, #1
 8003f80:	4618      	mov	r0, r3
 8003f82:	f001 f9ad 	bl	80052e0 <RCCEx_PLL2_Config>
 8003f86:	4603      	mov	r3, r0
 8003f88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f8c:	e017      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f92:	3328      	adds	r3, #40	; 0x28
 8003f94:	2101      	movs	r1, #1
 8003f96:	4618      	mov	r0, r3
 8003f98:	f001 fa54 	bl	8005444 <RCCEx_PLL3_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003fa2:	e00c      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003faa:	e008      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003fac:	bf00      	nop
 8003fae:	e006      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003fb0:	bf00      	nop
 8003fb2:	e004      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003fb4:	bf00      	nop
 8003fb6:	e002      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003fb8:	bf00      	nop
 8003fba:	e000      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fbe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10e      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003fc6:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fca:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fd6:	4a02      	ldr	r2, [pc, #8]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fd8:	430b      	orrs	r3, r1
 8003fda:	6593      	str	r3, [r2, #88]	; 0x58
 8003fdc:	e006      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003fde:	bf00      	nop
 8003fe0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fe8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004002:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004006:	460b      	mov	r3, r1
 8004008:	4313      	orrs	r3, r2
 800400a:	d037      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800400c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004016:	d00e      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800401c:	d816      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800401e:	2b00      	cmp	r3, #0
 8004020:	d018      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004022:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004026:	d111      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004028:	4bc4      	ldr	r3, [pc, #784]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	4ac3      	ldr	r2, [pc, #780]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800402e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004032:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004034:	e00f      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004036:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800403a:	3308      	adds	r3, #8
 800403c:	2101      	movs	r1, #1
 800403e:	4618      	mov	r0, r3
 8004040:	f001 f94e 	bl	80052e0 <RCCEx_PLL2_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800404a:	e004      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004052:	e000      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004056:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10a      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800405e:	4bb7      	ldr	r3, [pc, #732]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004062:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800406a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800406c:	4ab3      	ldr	r2, [pc, #716]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800406e:	430b      	orrs	r3, r1
 8004070:	6513      	str	r3, [r2, #80]	; 0x50
 8004072:	e003      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004074:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004078:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800407c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004088:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800408c:	2300      	movs	r3, #0
 800408e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004092:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004096:	460b      	mov	r3, r1
 8004098:	4313      	orrs	r3, r2
 800409a:	d039      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800409c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d81c      	bhi.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80040a6:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80040a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ac:	080040e9 	.word	0x080040e9
 80040b0:	080040bd 	.word	0x080040bd
 80040b4:	080040cb 	.word	0x080040cb
 80040b8:	080040e9 	.word	0x080040e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040bc:	4b9f      	ldr	r3, [pc, #636]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	4a9e      	ldr	r2, [pc, #632]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040c8:	e00f      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ce:	3308      	adds	r3, #8
 80040d0:	2102      	movs	r1, #2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f001 f904 	bl	80052e0 <RCCEx_PLL2_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040de:	e004      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040e6:	e000      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80040e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10a      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80040f2:	4b92      	ldr	r3, [pc, #584]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f6:	f023 0103 	bic.w	r1, r3, #3
 80040fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004100:	4a8e      	ldr	r2, [pc, #568]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004102:	430b      	orrs	r3, r1
 8004104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004106:	e003      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004108:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800410c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004110:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800411c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004120:	2300      	movs	r3, #0
 8004122:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004126:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800412a:	460b      	mov	r3, r1
 800412c:	4313      	orrs	r3, r2
 800412e:	f000 8099 	beq.w	8004264 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004132:	4b83      	ldr	r3, [pc, #524]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a82      	ldr	r2, [pc, #520]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800413e:	f7fd fbb3 	bl	80018a8 <HAL_GetTick>
 8004142:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004146:	e00b      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004148:	f7fd fbae 	bl	80018a8 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b64      	cmp	r3, #100	; 0x64
 8004156:	d903      	bls.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800415e:	e005      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004160:	4b77      	ldr	r3, [pc, #476]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0ed      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800416c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004170:	2b00      	cmp	r3, #0
 8004172:	d173      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004174:	4b71      	ldr	r3, [pc, #452]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004176:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004178:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800417c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004180:	4053      	eors	r3, r2
 8004182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004186:	2b00      	cmp	r3, #0
 8004188:	d015      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800418a:	4b6c      	ldr	r3, [pc, #432]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004192:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004196:	4b69      	ldr	r3, [pc, #420]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	4a68      	ldr	r2, [pc, #416]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800419c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041a2:	4b66      	ldr	r3, [pc, #408]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	4a65      	ldr	r2, [pc, #404]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80041ae:	4a63      	ldr	r2, [pc, #396]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80041b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c2:	d118      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c4:	f7fd fb70 	bl	80018a8 <HAL_GetTick>
 80041c8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041cc:	e00d      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ce:	f7fd fb6b 	bl	80018a8 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80041d8:	1ad2      	subs	r2, r2, r3
 80041da:	f241 3388 	movw	r3, #5000	; 0x1388
 80041de:	429a      	cmp	r2, r3
 80041e0:	d903      	bls.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80041e8:	e005      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041ea:	4b54      	ldr	r3, [pc, #336]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0eb      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80041f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d129      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004202:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800420e:	d10e      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004210:	4b4a      	ldr	r3, [pc, #296]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800421c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004220:	091a      	lsrs	r2, r3, #4
 8004222:	4b48      	ldr	r3, [pc, #288]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004224:	4013      	ands	r3, r2
 8004226:	4a45      	ldr	r2, [pc, #276]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004228:	430b      	orrs	r3, r1
 800422a:	6113      	str	r3, [r2, #16]
 800422c:	e005      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800422e:	4b43      	ldr	r3, [pc, #268]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	4a42      	ldr	r2, [pc, #264]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004234:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004238:	6113      	str	r3, [r2, #16]
 800423a:	4b40      	ldr	r3, [pc, #256]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800423c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800423e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004242:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800424a:	4a3c      	ldr	r2, [pc, #240]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800424c:	430b      	orrs	r3, r1
 800424e:	6713      	str	r3, [r2, #112]	; 0x70
 8004250:	e008      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004252:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004256:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800425a:	e003      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004260:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	f002 0301 	and.w	r3, r2, #1
 8004270:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004274:	2300      	movs	r3, #0
 8004276:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800427a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800427e:	460b      	mov	r3, r1
 8004280:	4313      	orrs	r3, r2
 8004282:	f000 8090 	beq.w	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800428a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800428e:	2b28      	cmp	r3, #40	; 0x28
 8004290:	d870      	bhi.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	0800437d 	.word	0x0800437d
 800429c:	08004375 	.word	0x08004375
 80042a0:	08004375 	.word	0x08004375
 80042a4:	08004375 	.word	0x08004375
 80042a8:	08004375 	.word	0x08004375
 80042ac:	08004375 	.word	0x08004375
 80042b0:	08004375 	.word	0x08004375
 80042b4:	08004375 	.word	0x08004375
 80042b8:	08004349 	.word	0x08004349
 80042bc:	08004375 	.word	0x08004375
 80042c0:	08004375 	.word	0x08004375
 80042c4:	08004375 	.word	0x08004375
 80042c8:	08004375 	.word	0x08004375
 80042cc:	08004375 	.word	0x08004375
 80042d0:	08004375 	.word	0x08004375
 80042d4:	08004375 	.word	0x08004375
 80042d8:	0800435f 	.word	0x0800435f
 80042dc:	08004375 	.word	0x08004375
 80042e0:	08004375 	.word	0x08004375
 80042e4:	08004375 	.word	0x08004375
 80042e8:	08004375 	.word	0x08004375
 80042ec:	08004375 	.word	0x08004375
 80042f0:	08004375 	.word	0x08004375
 80042f4:	08004375 	.word	0x08004375
 80042f8:	0800437d 	.word	0x0800437d
 80042fc:	08004375 	.word	0x08004375
 8004300:	08004375 	.word	0x08004375
 8004304:	08004375 	.word	0x08004375
 8004308:	08004375 	.word	0x08004375
 800430c:	08004375 	.word	0x08004375
 8004310:	08004375 	.word	0x08004375
 8004314:	08004375 	.word	0x08004375
 8004318:	0800437d 	.word	0x0800437d
 800431c:	08004375 	.word	0x08004375
 8004320:	08004375 	.word	0x08004375
 8004324:	08004375 	.word	0x08004375
 8004328:	08004375 	.word	0x08004375
 800432c:	08004375 	.word	0x08004375
 8004330:	08004375 	.word	0x08004375
 8004334:	08004375 	.word	0x08004375
 8004338:	0800437d 	.word	0x0800437d
 800433c:	58024400 	.word	0x58024400
 8004340:	58024800 	.word	0x58024800
 8004344:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800434c:	3308      	adds	r3, #8
 800434e:	2101      	movs	r1, #1
 8004350:	4618      	mov	r0, r3
 8004352:	f000 ffc5 	bl	80052e0 <RCCEx_PLL2_Config>
 8004356:	4603      	mov	r3, r0
 8004358:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800435c:	e00f      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800435e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004362:	3328      	adds	r3, #40	; 0x28
 8004364:	2101      	movs	r1, #1
 8004366:	4618      	mov	r0, r3
 8004368:	f001 f86c 	bl	8005444 <RCCEx_PLL3_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004372:	e004      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800437a:	e000      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800437c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800437e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10b      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004386:	4bc0      	ldr	r3, [pc, #768]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800438e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004396:	4abc      	ldr	r2, [pc, #752]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004398:	430b      	orrs	r3, r1
 800439a:	6553      	str	r3, [r2, #84]	; 0x54
 800439c:	e003      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80043a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	f002 0302 	and.w	r3, r2, #2
 80043b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043b6:	2300      	movs	r3, #0
 80043b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80043bc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80043c0:	460b      	mov	r3, r1
 80043c2:	4313      	orrs	r3, r2
 80043c4:	d043      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80043c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ce:	2b05      	cmp	r3, #5
 80043d0:	d824      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80043d2:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80043d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d8:	08004425 	.word	0x08004425
 80043dc:	080043f1 	.word	0x080043f1
 80043e0:	08004407 	.word	0x08004407
 80043e4:	08004425 	.word	0x08004425
 80043e8:	08004425 	.word	0x08004425
 80043ec:	08004425 	.word	0x08004425
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f4:	3308      	adds	r3, #8
 80043f6:	2101      	movs	r1, #1
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 ff71 	bl	80052e0 <RCCEx_PLL2_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004404:	e00f      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800440a:	3328      	adds	r3, #40	; 0x28
 800440c:	2101      	movs	r1, #1
 800440e:	4618      	mov	r0, r3
 8004410:	f001 f818 	bl	8005444 <RCCEx_PLL3_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800441a:	e004      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004422:	e000      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004426:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10b      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800442e:	4b96      	ldr	r3, [pc, #600]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004432:	f023 0107 	bic.w	r1, r3, #7
 8004436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800443a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800443e:	4a92      	ldr	r2, [pc, #584]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004440:	430b      	orrs	r3, r1
 8004442:	6553      	str	r3, [r2, #84]	; 0x54
 8004444:	e003      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004446:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800444a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800444e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004456:	f002 0304 	and.w	r3, r2, #4
 800445a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800445e:	2300      	movs	r3, #0
 8004460:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004464:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004468:	460b      	mov	r3, r1
 800446a:	4313      	orrs	r3, r2
 800446c:	d043      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800446e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004472:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004476:	2b05      	cmp	r3, #5
 8004478:	d824      	bhi.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800447a:	a201      	add	r2, pc, #4	; (adr r2, 8004480 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800447c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004480:	080044cd 	.word	0x080044cd
 8004484:	08004499 	.word	0x08004499
 8004488:	080044af 	.word	0x080044af
 800448c:	080044cd 	.word	0x080044cd
 8004490:	080044cd 	.word	0x080044cd
 8004494:	080044cd 	.word	0x080044cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800449c:	3308      	adds	r3, #8
 800449e:	2101      	movs	r1, #1
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 ff1d 	bl	80052e0 <RCCEx_PLL2_Config>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044ac:	e00f      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044b2:	3328      	adds	r3, #40	; 0x28
 80044b4:	2101      	movs	r1, #1
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 ffc4 	bl	8005444 <RCCEx_PLL3_Config>
 80044bc:	4603      	mov	r3, r0
 80044be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044c2:	e004      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044ca:	e000      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80044cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10b      	bne.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044d6:	4b6c      	ldr	r3, [pc, #432]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80044d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044da:	f023 0107 	bic.w	r1, r3, #7
 80044de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044e6:	4a68      	ldr	r2, [pc, #416]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80044e8:	430b      	orrs	r3, r1
 80044ea:	6593      	str	r3, [r2, #88]	; 0x58
 80044ec:	e003      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fe:	f002 0320 	and.w	r3, r2, #32
 8004502:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004506:	2300      	movs	r3, #0
 8004508:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800450c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004510:	460b      	mov	r3, r1
 8004512:	4313      	orrs	r3, r2
 8004514:	d055      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800451a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800451e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004522:	d033      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004524:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004528:	d82c      	bhi.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800452a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452e:	d02f      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004534:	d826      	bhi.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004536:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800453a:	d02b      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800453c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004540:	d820      	bhi.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004546:	d012      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800454c:	d81a      	bhi.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800454e:	2b00      	cmp	r3, #0
 8004550:	d022      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004552:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004556:	d115      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004558:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800455c:	3308      	adds	r3, #8
 800455e:	2100      	movs	r1, #0
 8004560:	4618      	mov	r0, r3
 8004562:	f000 febd 	bl	80052e0 <RCCEx_PLL2_Config>
 8004566:	4603      	mov	r3, r0
 8004568:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800456c:	e015      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800456e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004572:	3328      	adds	r3, #40	; 0x28
 8004574:	2102      	movs	r1, #2
 8004576:	4618      	mov	r0, r3
 8004578:	f000 ff64 	bl	8005444 <RCCEx_PLL3_Config>
 800457c:	4603      	mov	r3, r0
 800457e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004582:	e00a      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800458a:	e006      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800458c:	bf00      	nop
 800458e:	e004      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004590:	bf00      	nop
 8004592:	e002      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004594:	bf00      	nop
 8004596:	e000      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800459a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10b      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045a2:	4b39      	ldr	r3, [pc, #228]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80045aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045b2:	4a35      	ldr	r2, [pc, #212]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045b4:	430b      	orrs	r3, r1
 80045b6:	6553      	str	r3, [r2, #84]	; 0x54
 80045b8:	e003      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80045ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045d2:	2300      	movs	r3, #0
 80045d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80045d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80045dc:	460b      	mov	r3, r1
 80045de:	4313      	orrs	r3, r2
 80045e0:	d058      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80045e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80045ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045ee:	d033      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80045f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80045f4:	d82c      	bhi.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80045f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045fa:	d02f      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80045fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004600:	d826      	bhi.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004602:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004606:	d02b      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004608:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800460c:	d820      	bhi.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800460e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004612:	d012      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004618:	d81a      	bhi.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d022      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800461e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004622:	d115      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004628:	3308      	adds	r3, #8
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f000 fe57 	bl	80052e0 <RCCEx_PLL2_Config>
 8004632:	4603      	mov	r3, r0
 8004634:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004638:	e015      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800463a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800463e:	3328      	adds	r3, #40	; 0x28
 8004640:	2102      	movs	r1, #2
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fefe 	bl	8005444 <RCCEx_PLL3_Config>
 8004648:	4603      	mov	r3, r0
 800464a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800464e:	e00a      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004656:	e006      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004658:	bf00      	nop
 800465a:	e004      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800465c:	bf00      	nop
 800465e:	e002      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004660:	bf00      	nop
 8004662:	e000      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004666:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10e      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800466e:	4b06      	ldr	r3, [pc, #24]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004672:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800467a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800467e:	4a02      	ldr	r2, [pc, #8]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004680:	430b      	orrs	r3, r1
 8004682:	6593      	str	r3, [r2, #88]	; 0x58
 8004684:	e006      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004686:	bf00      	nop
 8004688:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004690:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80046a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046a4:	2300      	movs	r3, #0
 80046a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80046ae:	460b      	mov	r3, r1
 80046b0:	4313      	orrs	r3, r2
 80046b2:	d055      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80046b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046c0:	d033      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80046c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046c6:	d82c      	bhi.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80046c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046cc:	d02f      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80046ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d2:	d826      	bhi.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80046d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046d8:	d02b      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80046da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046de:	d820      	bhi.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80046e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046e4:	d012      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80046e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046ea:	d81a      	bhi.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d022      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80046f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f4:	d115      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046fa:	3308      	adds	r3, #8
 80046fc:	2100      	movs	r1, #0
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fdee 	bl	80052e0 <RCCEx_PLL2_Config>
 8004704:	4603      	mov	r3, r0
 8004706:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800470a:	e015      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800470c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004710:	3328      	adds	r3, #40	; 0x28
 8004712:	2102      	movs	r1, #2
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fe95 	bl	8005444 <RCCEx_PLL3_Config>
 800471a:	4603      	mov	r3, r0
 800471c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004720:	e00a      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004728:	e006      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800472a:	bf00      	nop
 800472c:	e004      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800472e:	bf00      	nop
 8004730:	e002      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004732:	bf00      	nop
 8004734:	e000      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004736:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004738:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10b      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004740:	4ba1      	ldr	r3, [pc, #644]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004744:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800474c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004750:	4a9d      	ldr	r2, [pc, #628]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004752:	430b      	orrs	r3, r1
 8004754:	6593      	str	r3, [r2, #88]	; 0x58
 8004756:	e003      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004758:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800475c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004768:	f002 0308 	and.w	r3, r2, #8
 800476c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004770:	2300      	movs	r3, #0
 8004772:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004776:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800477a:	460b      	mov	r3, r1
 800477c:	4313      	orrs	r3, r2
 800477e:	d01e      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800478c:	d10c      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800478e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004792:	3328      	adds	r3, #40	; 0x28
 8004794:	2102      	movs	r1, #2
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fe54 	bl	8005444 <RCCEx_PLL3_Config>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047a8:	4b87      	ldr	r3, [pc, #540]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b8:	4a83      	ldr	r2, [pc, #524]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80047ba:	430b      	orrs	r3, r1
 80047bc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	f002 0310 	and.w	r3, r2, #16
 80047ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047ce:	2300      	movs	r3, #0
 80047d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80047d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80047d8:	460b      	mov	r3, r1
 80047da:	4313      	orrs	r3, r2
 80047dc:	d01e      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80047de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ea:	d10c      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f0:	3328      	adds	r3, #40	; 0x28
 80047f2:	2102      	movs	r1, #2
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fe25 	bl	8005444 <RCCEx_PLL3_Config>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004806:	4b70      	ldr	r3, [pc, #448]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800480e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004812:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004816:	4a6c      	ldr	r2, [pc, #432]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004818:	430b      	orrs	r3, r1
 800481a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800481c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004824:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004828:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800482c:	2300      	movs	r3, #0
 800482e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004832:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004836:	460b      	mov	r3, r1
 8004838:	4313      	orrs	r3, r2
 800483a:	d03e      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800483c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004840:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004848:	d022      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800484a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800484e:	d81b      	bhi.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004858:	d00b      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800485a:	e015      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800485c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004860:	3308      	adds	r3, #8
 8004862:	2100      	movs	r1, #0
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fd3b 	bl	80052e0 <RCCEx_PLL2_Config>
 800486a:	4603      	mov	r3, r0
 800486c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004870:	e00f      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004876:	3328      	adds	r3, #40	; 0x28
 8004878:	2102      	movs	r1, #2
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fde2 	bl	8005444 <RCCEx_PLL3_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004886:	e004      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800488e:	e000      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004892:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10b      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800489a:	4b4b      	ldr	r3, [pc, #300]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800489c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80048a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80048aa:	4a47      	ldr	r2, [pc, #284]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048ac:	430b      	orrs	r3, r1
 80048ae:	6593      	str	r3, [r2, #88]	; 0x58
 80048b0:	e003      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048b6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80048c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80048c8:	2300      	movs	r3, #0
 80048ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80048d0:	460b      	mov	r3, r1
 80048d2:	4313      	orrs	r3, r2
 80048d4:	d03b      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80048d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048e2:	d01f      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80048e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048e8:	d818      	bhi.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80048ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ee:	d003      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80048f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048f4:	d007      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80048f6:	e011      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f8:	4b33      	ldr	r3, [pc, #204]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	4a32      	ldr	r2, [pc, #200]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004902:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004904:	e00f      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800490a:	3328      	adds	r3, #40	; 0x28
 800490c:	2101      	movs	r1, #1
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fd98 	bl	8005444 <RCCEx_PLL3_Config>
 8004914:	4603      	mov	r3, r0
 8004916:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800491a:	e004      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004922:	e000      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004926:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10b      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800492e:	4b26      	ldr	r3, [pc, #152]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004932:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800493a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493e:	4a22      	ldr	r2, [pc, #136]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004940:	430b      	orrs	r3, r1
 8004942:	6553      	str	r3, [r2, #84]	; 0x54
 8004944:	e003      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004946:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800494a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800494e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004956:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800495a:	673b      	str	r3, [r7, #112]	; 0x70
 800495c:	2300      	movs	r3, #0
 800495e:	677b      	str	r3, [r7, #116]	; 0x74
 8004960:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004964:	460b      	mov	r3, r1
 8004966:	4313      	orrs	r3, r2
 8004968:	d034      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800496a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800496e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004978:	d007      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800497a:	e011      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800497c:	4b12      	ldr	r3, [pc, #72]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	4a11      	ldr	r2, [pc, #68]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004986:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004988:	e00e      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800498a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800498e:	3308      	adds	r3, #8
 8004990:	2102      	movs	r1, #2
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fca4 	bl	80052e0 <RCCEx_PLL2_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800499e:	e003      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80049a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10d      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049b0:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049be:	4a02      	ldr	r2, [pc, #8]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049c0:	430b      	orrs	r3, r1
 80049c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049c4:	e006      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80049c6:	bf00      	nop
 80049c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80049e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80049e2:	2300      	movs	r3, #0
 80049e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80049ea:	460b      	mov	r3, r1
 80049ec:	4313      	orrs	r3, r2
 80049ee:	d00c      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049f4:	3328      	adds	r3, #40	; 0x28
 80049f6:	2102      	movs	r1, #2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fd23 	bl	8005444 <RCCEx_PLL3_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004a16:	663b      	str	r3, [r7, #96]	; 0x60
 8004a18:	2300      	movs	r3, #0
 8004a1a:	667b      	str	r3, [r7, #100]	; 0x64
 8004a1c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004a20:	460b      	mov	r3, r1
 8004a22:	4313      	orrs	r3, r2
 8004a24:	d038      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a32:	d018      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a38:	d811      	bhi.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a3e:	d014      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a44:	d80b      	bhi.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d011      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4e:	d106      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a50:	4bc3      	ldr	r3, [pc, #780]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	4ac2      	ldr	r2, [pc, #776]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a5c:	e008      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a64:	e004      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004a66:	bf00      	nop
 8004a68:	e002      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004a6a:	bf00      	nop
 8004a6c:	e000      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10b      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a78:	4bb9      	ldr	r3, [pc, #740]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a88:	4ab5      	ldr	r2, [pc, #724]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a8a:	430b      	orrs	r3, r1
 8004a8c:	6553      	str	r3, [r2, #84]	; 0x54
 8004a8e:	e003      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a94:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004aa4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aaa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	d009      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ab4:	4baa      	ldr	r3, [pc, #680]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ac2:	4aa7      	ldr	r2, [pc, #668]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004ad4:	653b      	str	r3, [r7, #80]	; 0x50
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	657b      	str	r3, [r7, #84]	; 0x54
 8004ada:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	d009      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ae4:	4b9e      	ldr	r3, [pc, #632]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af2:	4a9b      	ldr	r2, [pc, #620]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004af4:	430b      	orrs	r3, r1
 8004af6:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b00:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004b04:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b06:	2300      	movs	r3, #0
 8004b08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b0a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4313      	orrs	r3, r2
 8004b12:	d009      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004b14:	4b92      	ldr	r3, [pc, #584]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b18:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b22:	4a8f      	ldr	r2, [pc, #572]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b24:	430b      	orrs	r3, r1
 8004b26:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b30:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004b34:	643b      	str	r3, [r7, #64]	; 0x40
 8004b36:	2300      	movs	r3, #0
 8004b38:	647b      	str	r3, [r7, #68]	; 0x44
 8004b3a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4313      	orrs	r3, r2
 8004b42:	d00e      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b44:	4b86      	ldr	r3, [pc, #536]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	4a85      	ldr	r2, [pc, #532]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b4e:	6113      	str	r3, [r2, #16]
 8004b50:	4b83      	ldr	r3, [pc, #524]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b52:	6919      	ldr	r1, [r3, #16]
 8004b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004b5c:	4a80      	ldr	r2, [pc, #512]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b70:	2300      	movs	r3, #0
 8004b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b74:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	d009      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b7e:	4b78      	ldr	r3, [pc, #480]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b82:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8c:	4a74      	ldr	r2, [pc, #464]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b8e:	430b      	orrs	r3, r1
 8004b90:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004b9e:	633b      	str	r3, [r7, #48]	; 0x30
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ba4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4313      	orrs	r3, r2
 8004bac:	d00a      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bae:	4b6c      	ldr	r3, [pc, #432]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bbe:	4a68      	ldr	r2, [pc, #416]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bcc:	2100      	movs	r1, #0
 8004bce:	62b9      	str	r1, [r7, #40]	; 0x28
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	d011      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004be4:	3308      	adds	r3, #8
 8004be6:	2100      	movs	r1, #0
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fb79 	bl	80052e0 <RCCEx_PLL2_Config>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004bf4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c00:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	6239      	str	r1, [r7, #32]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24
 8004c16:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	d011      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c24:	3308      	adds	r3, #8
 8004c26:	2101      	movs	r1, #1
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fb59 	bl	80052e0 <RCCEx_PLL2_Config>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004c34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	61b9      	str	r1, [r7, #24]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	61fb      	str	r3, [r7, #28]
 8004c56:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	d011      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c64:	3308      	adds	r3, #8
 8004c66:	2102      	movs	r1, #2
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fb39 	bl	80052e0 <RCCEx_PLL2_Config>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004c74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c80:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	6139      	str	r1, [r7, #16]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	d011      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ca4:	3328      	adds	r3, #40	; 0x28
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fbcb 	bl	8005444 <RCCEx_PLL3_Config>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004cb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cc0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	2100      	movs	r1, #0
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	d011      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ce4:	3328      	adds	r3, #40	; 0x28
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fbab 	bl	8005444 <RCCEx_PLL3_Config>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004cf4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cfc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d00:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	6039      	str	r1, [r7, #0]
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	607b      	str	r3, [r7, #4]
 8004d16:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	d011      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d24:	3328      	adds	r3, #40	; 0x28
 8004d26:	2102      	movs	r1, #2
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fb8b 	bl	8005444 <RCCEx_PLL3_Config>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004d34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004d44:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e000      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d5e:	bf00      	nop
 8004d60:	58024400 	.word	0x58024400

08004d64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004d68:	f7fe fde2 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	091b      	lsrs	r3, r3, #4
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	4904      	ldr	r1, [pc, #16]	; (8004d8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d7a:	5ccb      	ldrb	r3, [r1, r3]
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	58024400 	.word	0x58024400
 8004d8c:	08009af8 	.word	0x08009af8

08004d90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b089      	sub	sp, #36	; 0x24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d98:	4ba1      	ldr	r3, [pc, #644]	; (8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004da2:	4b9f      	ldr	r3, [pc, #636]	; (8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	0b1b      	lsrs	r3, r3, #12
 8004da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004dae:	4b9c      	ldr	r3, [pc, #624]	; (8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db2:	091b      	lsrs	r3, r3, #4
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004dba:	4b99      	ldr	r3, [pc, #612]	; (8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbe:	08db      	lsrs	r3, r3, #3
 8004dc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	fb02 f303 	mul.w	r3, r2, r3
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 8111 	beq.w	8005000 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	f000 8083 	beq.w	8004eec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	f200 80a1 	bhi.w	8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d056      	beq.n	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004dfa:	e099      	b.n	8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dfc:	4b88      	ldr	r3, [pc, #544]	; (8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0320 	and.w	r3, r3, #32
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d02d      	beq.n	8004e64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e08:	4b85      	ldr	r3, [pc, #532]	; (8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	08db      	lsrs	r3, r3, #3
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	4a84      	ldr	r2, [pc, #528]	; (8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004e14:	fa22 f303 	lsr.w	r3, r2, r3
 8004e18:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	ee07 3a90 	vmov	s15, r3
 8004e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e32:	4b7b      	ldr	r3, [pc, #492]	; (8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3a:	ee07 3a90 	vmov	s15, r3
 8004e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e62:	e087      	b.n	8004f74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800502c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e76:	4b6a      	ldr	r3, [pc, #424]	; (8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7e:	ee07 3a90 	vmov	s15, r3
 8004e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ea6:	e065      	b.n	8004f74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eba:	4b59      	ldr	r3, [pc, #356]	; (8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec2:	ee07 3a90 	vmov	s15, r3
 8004ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ece:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eea:	e043      	b.n	8004f74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004efe:	4b48      	ldr	r3, [pc, #288]	; (8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f2e:	e021      	b.n	8004f74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f42:	4b37      	ldr	r3, [pc, #220]	; (8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004f74:	4b2a      	ldr	r3, [pc, #168]	; (8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	0a5b      	lsrs	r3, r3, #9
 8004f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f9a:	ee17 2a90 	vmov	r2, s15
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004fa2:	4b1f      	ldr	r3, [pc, #124]	; (8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa6:	0c1b      	lsrs	r3, r3, #16
 8004fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fac:	ee07 3a90 	vmov	s15, r3
 8004fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fc8:	ee17 2a90 	vmov	r2, s15
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004fd0:	4b13      	ldr	r3, [pc, #76]	; (8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	0e1b      	lsrs	r3, r3, #24
 8004fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fda:	ee07 3a90 	vmov	s15, r3
 8004fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fea:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ff6:	ee17 2a90 	vmov	r2, s15
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004ffe:	e008      	b.n	8005012 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	609a      	str	r2, [r3, #8]
}
 8005012:	bf00      	nop
 8005014:	3724      	adds	r7, #36	; 0x24
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	58024400 	.word	0x58024400
 8005024:	03d09000 	.word	0x03d09000
 8005028:	46000000 	.word	0x46000000
 800502c:	4c742400 	.word	0x4c742400
 8005030:	4a742400 	.word	0x4a742400
 8005034:	4af42400 	.word	0x4af42400

08005038 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005038:	b480      	push	{r7}
 800503a:	b089      	sub	sp, #36	; 0x24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005040:	4ba1      	ldr	r3, [pc, #644]	; (80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005044:	f003 0303 	and.w	r3, r3, #3
 8005048:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800504a:	4b9f      	ldr	r3, [pc, #636]	; (80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	0d1b      	lsrs	r3, r3, #20
 8005050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005054:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005056:	4b9c      	ldr	r3, [pc, #624]	; (80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	0a1b      	lsrs	r3, r3, #8
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005062:	4b99      	ldr	r3, [pc, #612]	; (80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	08db      	lsrs	r3, r3, #3
 8005068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	fb02 f303 	mul.w	r3, r2, r3
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8111 	beq.w	80052a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b02      	cmp	r3, #2
 800508a:	f000 8083 	beq.w	8005194 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	2b02      	cmp	r3, #2
 8005092:	f200 80a1 	bhi.w	80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d056      	beq.n	8005150 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80050a2:	e099      	b.n	80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050a4:	4b88      	ldr	r3, [pc, #544]	; (80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d02d      	beq.n	800510c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050b0:	4b85      	ldr	r3, [pc, #532]	; (80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	08db      	lsrs	r3, r3, #3
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	4a84      	ldr	r2, [pc, #528]	; (80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
 80050c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	ee07 3a90 	vmov	s15, r3
 80050c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050da:	4b7b      	ldr	r3, [pc, #492]	; (80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e2:	ee07 3a90 	vmov	s15, r3
 80050e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005106:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800510a:	e087      	b.n	800521c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005116:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800511a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511e:	4b6a      	ldr	r3, [pc, #424]	; (80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005126:	ee07 3a90 	vmov	s15, r3
 800512a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005132:	eddf 5a67 	vldr	s11, [pc, #412]	; 80052d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800514e:	e065      	b.n	800521c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800515e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005162:	4b59      	ldr	r3, [pc, #356]	; (80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005172:	ed97 6a03 	vldr	s12, [r7, #12]
 8005176:	eddf 5a56 	vldr	s11, [pc, #344]	; 80052d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800517a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005192:	e043      	b.n	800521c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80051a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051a6:	4b48      	ldr	r3, [pc, #288]	; (80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80052d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051d6:	e021      	b.n	800521c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ea:	4b37      	ldr	r3, [pc, #220]	; (80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80051fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80052d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800520a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800520e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800521a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800521c:	4b2a      	ldr	r3, [pc, #168]	; (80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	0a5b      	lsrs	r3, r3, #9
 8005222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005236:	edd7 6a07 	vldr	s13, [r7, #28]
 800523a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800523e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005242:	ee17 2a90 	vmov	r2, s15
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800524a:	4b1f      	ldr	r3, [pc, #124]	; (80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	0c1b      	lsrs	r3, r3, #16
 8005250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005254:	ee07 3a90 	vmov	s15, r3
 8005258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005260:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005264:	edd7 6a07 	vldr	s13, [r7, #28]
 8005268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800526c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005270:	ee17 2a90 	vmov	r2, s15
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005278:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	0e1b      	lsrs	r3, r3, #24
 800527e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800528e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005292:	edd7 6a07 	vldr	s13, [r7, #28]
 8005296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800529a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800529e:	ee17 2a90 	vmov	r2, s15
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80052a6:	e008      	b.n	80052ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	609a      	str	r2, [r3, #8]
}
 80052ba:	bf00      	nop
 80052bc:	3724      	adds	r7, #36	; 0x24
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	58024400 	.word	0x58024400
 80052cc:	03d09000 	.word	0x03d09000
 80052d0:	46000000 	.word	0x46000000
 80052d4:	4c742400 	.word	0x4c742400
 80052d8:	4a742400 	.word	0x4a742400
 80052dc:	4af42400 	.word	0x4af42400

080052e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052ee:	4b53      	ldr	r3, [pc, #332]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 80052f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	d101      	bne.n	80052fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e099      	b.n	8005432 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80052fe:	4b4f      	ldr	r3, [pc, #316]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a4e      	ldr	r2, [pc, #312]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 8005304:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530a:	f7fc facd 	bl	80018a8 <HAL_GetTick>
 800530e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005310:	e008      	b.n	8005324 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005312:	f7fc fac9 	bl	80018a8 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d901      	bls.n	8005324 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e086      	b.n	8005432 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005324:	4b45      	ldr	r3, [pc, #276]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1f0      	bne.n	8005312 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005330:	4b42      	ldr	r3, [pc, #264]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	031b      	lsls	r3, r3, #12
 800533e:	493f      	ldr	r1, [pc, #252]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 8005340:	4313      	orrs	r3, r2
 8005342:	628b      	str	r3, [r1, #40]	; 0x28
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	3b01      	subs	r3, #1
 800534a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	3b01      	subs	r3, #1
 8005354:	025b      	lsls	r3, r3, #9
 8005356:	b29b      	uxth	r3, r3
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	3b01      	subs	r3, #1
 8005360:	041b      	lsls	r3, r3, #16
 8005362:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	3b01      	subs	r3, #1
 800536e:	061b      	lsls	r3, r3, #24
 8005370:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005374:	4931      	ldr	r1, [pc, #196]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 8005376:	4313      	orrs	r3, r2
 8005378:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800537a:	4b30      	ldr	r3, [pc, #192]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	492d      	ldr	r1, [pc, #180]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 8005388:	4313      	orrs	r3, r2
 800538a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800538c:	4b2b      	ldr	r3, [pc, #172]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	f023 0220 	bic.w	r2, r3, #32
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	4928      	ldr	r1, [pc, #160]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 800539a:	4313      	orrs	r3, r2
 800539c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800539e:	4b27      	ldr	r3, [pc, #156]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	4a26      	ldr	r2, [pc, #152]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 80053a4:	f023 0310 	bic.w	r3, r3, #16
 80053a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80053aa:	4b24      	ldr	r3, [pc, #144]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 80053ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053ae:	4b24      	ldr	r3, [pc, #144]	; (8005440 <RCCEx_PLL2_Config+0x160>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	69d2      	ldr	r2, [r2, #28]
 80053b6:	00d2      	lsls	r2, r2, #3
 80053b8:	4920      	ldr	r1, [pc, #128]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80053be:	4b1f      	ldr	r3, [pc, #124]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 80053c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c2:	4a1e      	ldr	r2, [pc, #120]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 80053c4:	f043 0310 	orr.w	r3, r3, #16
 80053c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d106      	bne.n	80053de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80053d0:	4b1a      	ldr	r3, [pc, #104]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 80053d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d4:	4a19      	ldr	r2, [pc, #100]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 80053d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053dc:	e00f      	b.n	80053fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d106      	bne.n	80053f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80053e4:	4b15      	ldr	r3, [pc, #84]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	4a14      	ldr	r2, [pc, #80]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 80053ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053f0:	e005      	b.n	80053fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80053f2:	4b12      	ldr	r3, [pc, #72]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 80053f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f6:	4a11      	ldr	r2, [pc, #68]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 80053f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80053fe:	4b0f      	ldr	r3, [pc, #60]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a0e      	ldr	r2, [pc, #56]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 8005404:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005408:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800540a:	f7fc fa4d 	bl	80018a8 <HAL_GetTick>
 800540e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005410:	e008      	b.n	8005424 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005412:	f7fc fa49 	bl	80018a8 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e006      	b.n	8005432 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005424:	4b05      	ldr	r3, [pc, #20]	; (800543c <RCCEx_PLL2_Config+0x15c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0f0      	beq.n	8005412 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005430:	7bfb      	ldrb	r3, [r7, #15]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	58024400 	.word	0x58024400
 8005440:	ffff0007 	.word	0xffff0007

08005444 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005452:	4b53      	ldr	r3, [pc, #332]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 8005454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	2b03      	cmp	r3, #3
 800545c:	d101      	bne.n	8005462 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e099      	b.n	8005596 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005462:	4b4f      	ldr	r3, [pc, #316]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a4e      	ldr	r2, [pc, #312]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 8005468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800546c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800546e:	f7fc fa1b 	bl	80018a8 <HAL_GetTick>
 8005472:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005474:	e008      	b.n	8005488 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005476:	f7fc fa17 	bl	80018a8 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d901      	bls.n	8005488 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e086      	b.n	8005596 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005488:	4b45      	ldr	r3, [pc, #276]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1f0      	bne.n	8005476 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005494:	4b42      	ldr	r3, [pc, #264]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 8005496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005498:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	051b      	lsls	r3, r3, #20
 80054a2:	493f      	ldr	r1, [pc, #252]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	628b      	str	r3, [r1, #40]	; 0x28
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	025b      	lsls	r3, r3, #9
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	041b      	lsls	r3, r3, #16
 80054c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	061b      	lsls	r3, r3, #24
 80054d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80054d8:	4931      	ldr	r1, [pc, #196]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80054de:	4b30      	ldr	r3, [pc, #192]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 80054e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	492d      	ldr	r1, [pc, #180]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80054f0:	4b2b      	ldr	r3, [pc, #172]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	4928      	ldr	r1, [pc, #160]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005502:	4b27      	ldr	r3, [pc, #156]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 8005504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005506:	4a26      	ldr	r2, [pc, #152]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 8005508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800550c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800550e:	4b24      	ldr	r3, [pc, #144]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 8005510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005512:	4b24      	ldr	r3, [pc, #144]	; (80055a4 <RCCEx_PLL3_Config+0x160>)
 8005514:	4013      	ands	r3, r2
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	69d2      	ldr	r2, [r2, #28]
 800551a:	00d2      	lsls	r2, r2, #3
 800551c:	4920      	ldr	r1, [pc, #128]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 800551e:	4313      	orrs	r3, r2
 8005520:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005522:	4b1f      	ldr	r3, [pc, #124]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 8005524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005526:	4a1e      	ldr	r2, [pc, #120]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 8005528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d106      	bne.n	8005542 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005534:	4b1a      	ldr	r3, [pc, #104]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	4a19      	ldr	r2, [pc, #100]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 800553a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800553e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005540:	e00f      	b.n	8005562 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d106      	bne.n	8005556 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005548:	4b15      	ldr	r3, [pc, #84]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	4a14      	ldr	r2, [pc, #80]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 800554e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005552:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005554:	e005      	b.n	8005562 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005556:	4b12      	ldr	r3, [pc, #72]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 8005558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555a:	4a11      	ldr	r2, [pc, #68]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 800555c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005560:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005562:	4b0f      	ldr	r3, [pc, #60]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a0e      	ldr	r2, [pc, #56]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 8005568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800556c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800556e:	f7fc f99b 	bl	80018a8 <HAL_GetTick>
 8005572:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005574:	e008      	b.n	8005588 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005576:	f7fc f997 	bl	80018a8 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e006      	b.n	8005596 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005588:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <RCCEx_PLL3_Config+0x15c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0f0      	beq.n	8005576 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005594:	7bfb      	ldrb	r3, [r7, #15]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	58024400 	.word	0x58024400
 80055a4:	ffff0007 	.word	0xffff0007

080055a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e049      	b.n	800564e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d106      	bne.n	80055d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7fb fec6 	bl	8001360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3304      	adds	r3, #4
 80055e4:	4619      	mov	r1, r3
 80055e6:	4610      	mov	r0, r2
 80055e8:	f000 fbb0 	bl	8005d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b082      	sub	sp, #8
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e049      	b.n	80056fc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d106      	bne.n	8005682 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f841 	bl	8005704 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2202      	movs	r2, #2
 8005686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3304      	adds	r3, #4
 8005692:	4619      	mov	r1, r3
 8005694:	4610      	mov	r0, r2
 8005696:	f000 fb59 	bl	8005d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d109      	bne.n	800573c <HAL_TIM_PWM_Start+0x24>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b01      	cmp	r3, #1
 8005732:	bf14      	ite	ne
 8005734:	2301      	movne	r3, #1
 8005736:	2300      	moveq	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	e03c      	b.n	80057b6 <HAL_TIM_PWM_Start+0x9e>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2b04      	cmp	r3, #4
 8005740:	d109      	bne.n	8005756 <HAL_TIM_PWM_Start+0x3e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b01      	cmp	r3, #1
 800574c:	bf14      	ite	ne
 800574e:	2301      	movne	r3, #1
 8005750:	2300      	moveq	r3, #0
 8005752:	b2db      	uxtb	r3, r3
 8005754:	e02f      	b.n	80057b6 <HAL_TIM_PWM_Start+0x9e>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b08      	cmp	r3, #8
 800575a:	d109      	bne.n	8005770 <HAL_TIM_PWM_Start+0x58>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b01      	cmp	r3, #1
 8005766:	bf14      	ite	ne
 8005768:	2301      	movne	r3, #1
 800576a:	2300      	moveq	r3, #0
 800576c:	b2db      	uxtb	r3, r3
 800576e:	e022      	b.n	80057b6 <HAL_TIM_PWM_Start+0x9e>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b0c      	cmp	r3, #12
 8005774:	d109      	bne.n	800578a <HAL_TIM_PWM_Start+0x72>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b01      	cmp	r3, #1
 8005780:	bf14      	ite	ne
 8005782:	2301      	movne	r3, #1
 8005784:	2300      	moveq	r3, #0
 8005786:	b2db      	uxtb	r3, r3
 8005788:	e015      	b.n	80057b6 <HAL_TIM_PWM_Start+0x9e>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b10      	cmp	r3, #16
 800578e:	d109      	bne.n	80057a4 <HAL_TIM_PWM_Start+0x8c>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b01      	cmp	r3, #1
 800579a:	bf14      	ite	ne
 800579c:	2301      	movne	r3, #1
 800579e:	2300      	moveq	r3, #0
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	e008      	b.n	80057b6 <HAL_TIM_PWM_Start+0x9e>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	bf14      	ite	ne
 80057b0:	2301      	movne	r3, #1
 80057b2:	2300      	moveq	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e0a1      	b.n	8005902 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d104      	bne.n	80057ce <HAL_TIM_PWM_Start+0xb6>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057cc:	e023      	b.n	8005816 <HAL_TIM_PWM_Start+0xfe>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d104      	bne.n	80057de <HAL_TIM_PWM_Start+0xc6>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057dc:	e01b      	b.n	8005816 <HAL_TIM_PWM_Start+0xfe>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d104      	bne.n	80057ee <HAL_TIM_PWM_Start+0xd6>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057ec:	e013      	b.n	8005816 <HAL_TIM_PWM_Start+0xfe>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b0c      	cmp	r3, #12
 80057f2:	d104      	bne.n	80057fe <HAL_TIM_PWM_Start+0xe6>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057fc:	e00b      	b.n	8005816 <HAL_TIM_PWM_Start+0xfe>
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2b10      	cmp	r3, #16
 8005802:	d104      	bne.n	800580e <HAL_TIM_PWM_Start+0xf6>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800580c:	e003      	b.n	8005816 <HAL_TIM_PWM_Start+0xfe>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2202      	movs	r2, #2
 8005812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2201      	movs	r2, #1
 800581c:	6839      	ldr	r1, [r7, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fea2 	bl	8006568 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a38      	ldr	r2, [pc, #224]	; (800590c <HAL_TIM_PWM_Start+0x1f4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d013      	beq.n	8005856 <HAL_TIM_PWM_Start+0x13e>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a37      	ldr	r2, [pc, #220]	; (8005910 <HAL_TIM_PWM_Start+0x1f8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00e      	beq.n	8005856 <HAL_TIM_PWM_Start+0x13e>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a35      	ldr	r2, [pc, #212]	; (8005914 <HAL_TIM_PWM_Start+0x1fc>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d009      	beq.n	8005856 <HAL_TIM_PWM_Start+0x13e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a34      	ldr	r2, [pc, #208]	; (8005918 <HAL_TIM_PWM_Start+0x200>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d004      	beq.n	8005856 <HAL_TIM_PWM_Start+0x13e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a32      	ldr	r2, [pc, #200]	; (800591c <HAL_TIM_PWM_Start+0x204>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d101      	bne.n	800585a <HAL_TIM_PWM_Start+0x142>
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <HAL_TIM_PWM_Start+0x144>
 800585a:	2300      	movs	r3, #0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d007      	beq.n	8005870 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800586e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a25      	ldr	r2, [pc, #148]	; (800590c <HAL_TIM_PWM_Start+0x1f4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d022      	beq.n	80058c0 <HAL_TIM_PWM_Start+0x1a8>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005882:	d01d      	beq.n	80058c0 <HAL_TIM_PWM_Start+0x1a8>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a25      	ldr	r2, [pc, #148]	; (8005920 <HAL_TIM_PWM_Start+0x208>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d018      	beq.n	80058c0 <HAL_TIM_PWM_Start+0x1a8>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a24      	ldr	r2, [pc, #144]	; (8005924 <HAL_TIM_PWM_Start+0x20c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d013      	beq.n	80058c0 <HAL_TIM_PWM_Start+0x1a8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a22      	ldr	r2, [pc, #136]	; (8005928 <HAL_TIM_PWM_Start+0x210>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00e      	beq.n	80058c0 <HAL_TIM_PWM_Start+0x1a8>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a1a      	ldr	r2, [pc, #104]	; (8005910 <HAL_TIM_PWM_Start+0x1f8>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d009      	beq.n	80058c0 <HAL_TIM_PWM_Start+0x1a8>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a1e      	ldr	r2, [pc, #120]	; (800592c <HAL_TIM_PWM_Start+0x214>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d004      	beq.n	80058c0 <HAL_TIM_PWM_Start+0x1a8>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a16      	ldr	r2, [pc, #88]	; (8005914 <HAL_TIM_PWM_Start+0x1fc>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d115      	bne.n	80058ec <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689a      	ldr	r2, [r3, #8]
 80058c6:	4b1a      	ldr	r3, [pc, #104]	; (8005930 <HAL_TIM_PWM_Start+0x218>)
 80058c8:	4013      	ands	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b06      	cmp	r3, #6
 80058d0:	d015      	beq.n	80058fe <HAL_TIM_PWM_Start+0x1e6>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d8:	d011      	beq.n	80058fe <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0201 	orr.w	r2, r2, #1
 80058e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ea:	e008      	b.n	80058fe <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0201 	orr.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	e000      	b.n	8005900 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40010000 	.word	0x40010000
 8005910:	40010400 	.word	0x40010400
 8005914:	40014000 	.word	0x40014000
 8005918:	40014400 	.word	0x40014400
 800591c:	40014800 	.word	0x40014800
 8005920:	40000400 	.word	0x40000400
 8005924:	40000800 	.word	0x40000800
 8005928:	40000c00 	.word	0x40000c00
 800592c:	40001800 	.word	0x40001800
 8005930:	00010007 	.word	0x00010007

08005934 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005940:	2300      	movs	r3, #0
 8005942:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800594a:	2b01      	cmp	r3, #1
 800594c:	d101      	bne.n	8005952 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800594e:	2302      	movs	r3, #2
 8005950:	e0ff      	b.n	8005b52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b14      	cmp	r3, #20
 800595e:	f200 80f0 	bhi.w	8005b42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005962:	a201      	add	r2, pc, #4	; (adr r2, 8005968 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005968:	080059bd 	.word	0x080059bd
 800596c:	08005b43 	.word	0x08005b43
 8005970:	08005b43 	.word	0x08005b43
 8005974:	08005b43 	.word	0x08005b43
 8005978:	080059fd 	.word	0x080059fd
 800597c:	08005b43 	.word	0x08005b43
 8005980:	08005b43 	.word	0x08005b43
 8005984:	08005b43 	.word	0x08005b43
 8005988:	08005a3f 	.word	0x08005a3f
 800598c:	08005b43 	.word	0x08005b43
 8005990:	08005b43 	.word	0x08005b43
 8005994:	08005b43 	.word	0x08005b43
 8005998:	08005a7f 	.word	0x08005a7f
 800599c:	08005b43 	.word	0x08005b43
 80059a0:	08005b43 	.word	0x08005b43
 80059a4:	08005b43 	.word	0x08005b43
 80059a8:	08005ac1 	.word	0x08005ac1
 80059ac:	08005b43 	.word	0x08005b43
 80059b0:	08005b43 	.word	0x08005b43
 80059b4:	08005b43 	.word	0x08005b43
 80059b8:	08005b01 	.word	0x08005b01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68b9      	ldr	r1, [r7, #8]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fa5c 	bl	8005e80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0208 	orr.w	r2, r2, #8
 80059d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0204 	bic.w	r2, r2, #4
 80059e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6999      	ldr	r1, [r3, #24]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	691a      	ldr	r2, [r3, #16]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	619a      	str	r2, [r3, #24]
      break;
 80059fa:	e0a5      	b.n	8005b48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68b9      	ldr	r1, [r7, #8]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 facc 	bl	8005fa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699a      	ldr	r2, [r3, #24]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6999      	ldr	r1, [r3, #24]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	021a      	lsls	r2, r3, #8
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	619a      	str	r2, [r3, #24]
      break;
 8005a3c:	e084      	b.n	8005b48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 fb35 	bl	80060b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69da      	ldr	r2, [r3, #28]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f042 0208 	orr.w	r2, r2, #8
 8005a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69da      	ldr	r2, [r3, #28]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0204 	bic.w	r2, r2, #4
 8005a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69d9      	ldr	r1, [r3, #28]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	61da      	str	r2, [r3, #28]
      break;
 8005a7c:	e064      	b.n	8005b48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 fb9d 	bl	80061c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69da      	ldr	r2, [r3, #28]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69da      	ldr	r2, [r3, #28]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69d9      	ldr	r1, [r3, #28]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	021a      	lsls	r2, r3, #8
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	61da      	str	r2, [r3, #28]
      break;
 8005abe:	e043      	b.n	8005b48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68b9      	ldr	r1, [r7, #8]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fbe6 	bl	8006298 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0208 	orr.w	r2, r2, #8
 8005ada:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0204 	bic.w	r2, r2, #4
 8005aea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	691a      	ldr	r2, [r3, #16]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005afe:	e023      	b.n	8005b48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fc2a 	bl	8006360 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	021a      	lsls	r2, r3, #8
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b40:	e002      	b.n	8005b48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	75fb      	strb	r3, [r7, #23]
      break;
 8005b46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop

08005b5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_TIM_ConfigClockSource+0x1c>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e0dc      	b.n	8005d32 <HAL_TIM_ConfigClockSource+0x1d6>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	4b6a      	ldr	r3, [pc, #424]	; (8005d3c <HAL_TIM_ConfigClockSource+0x1e0>)
 8005b94:	4013      	ands	r3, r2
 8005b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a64      	ldr	r2, [pc, #400]	; (8005d40 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	f000 80a9 	beq.w	8005d06 <HAL_TIM_ConfigClockSource+0x1aa>
 8005bb4:	4a62      	ldr	r2, [pc, #392]	; (8005d40 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	f200 80ae 	bhi.w	8005d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8005bbc:	4a61      	ldr	r2, [pc, #388]	; (8005d44 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	f000 80a1 	beq.w	8005d06 <HAL_TIM_ConfigClockSource+0x1aa>
 8005bc4:	4a5f      	ldr	r2, [pc, #380]	; (8005d44 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	f200 80a6 	bhi.w	8005d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8005bcc:	4a5e      	ldr	r2, [pc, #376]	; (8005d48 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	f000 8099 	beq.w	8005d06 <HAL_TIM_ConfigClockSource+0x1aa>
 8005bd4:	4a5c      	ldr	r2, [pc, #368]	; (8005d48 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	f200 809e 	bhi.w	8005d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8005bdc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005be0:	f000 8091 	beq.w	8005d06 <HAL_TIM_ConfigClockSource+0x1aa>
 8005be4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005be8:	f200 8096 	bhi.w	8005d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8005bec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf0:	f000 8089 	beq.w	8005d06 <HAL_TIM_ConfigClockSource+0x1aa>
 8005bf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf8:	f200 808e 	bhi.w	8005d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8005bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c00:	d03e      	beq.n	8005c80 <HAL_TIM_ConfigClockSource+0x124>
 8005c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c06:	f200 8087 	bhi.w	8005d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8005c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0e:	f000 8086 	beq.w	8005d1e <HAL_TIM_ConfigClockSource+0x1c2>
 8005c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c16:	d87f      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8005c18:	2b70      	cmp	r3, #112	; 0x70
 8005c1a:	d01a      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0xf6>
 8005c1c:	2b70      	cmp	r3, #112	; 0x70
 8005c1e:	d87b      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8005c20:	2b60      	cmp	r3, #96	; 0x60
 8005c22:	d050      	beq.n	8005cc6 <HAL_TIM_ConfigClockSource+0x16a>
 8005c24:	2b60      	cmp	r3, #96	; 0x60
 8005c26:	d877      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8005c28:	2b50      	cmp	r3, #80	; 0x50
 8005c2a:	d03c      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0x14a>
 8005c2c:	2b50      	cmp	r3, #80	; 0x50
 8005c2e:	d873      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	d058      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0x18a>
 8005c34:	2b40      	cmp	r3, #64	; 0x40
 8005c36:	d86f      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8005c38:	2b30      	cmp	r3, #48	; 0x30
 8005c3a:	d064      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x1aa>
 8005c3c:	2b30      	cmp	r3, #48	; 0x30
 8005c3e:	d86b      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	d060      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x1aa>
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d867      	bhi.n	8005d18 <HAL_TIM_ConfigClockSource+0x1bc>
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d05c      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x1aa>
 8005c4c:	2b10      	cmp	r3, #16
 8005c4e:	d05a      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x1aa>
 8005c50:	e062      	b.n	8005d18 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6818      	ldr	r0, [r3, #0]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	6899      	ldr	r1, [r3, #8]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f000 fc61 	bl	8006528 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	609a      	str	r2, [r3, #8]
      break;
 8005c7e:	e04f      	b.n	8005d20 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6818      	ldr	r0, [r3, #0]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	6899      	ldr	r1, [r3, #8]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f000 fc4a 	bl	8006528 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ca2:	609a      	str	r2, [r3, #8]
      break;
 8005ca4:	e03c      	b.n	8005d20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	6859      	ldr	r1, [r3, #4]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f000 fbba 	bl	800642c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2150      	movs	r1, #80	; 0x50
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 fc14 	bl	80064ec <TIM_ITRx_SetConfig>
      break;
 8005cc4:	e02c      	b.n	8005d20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	6859      	ldr	r1, [r3, #4]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f000 fbd9 	bl	800648a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2160      	movs	r1, #96	; 0x60
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fc04 	bl	80064ec <TIM_ITRx_SetConfig>
      break;
 8005ce4:	e01c      	b.n	8005d20 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6859      	ldr	r1, [r3, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f000 fb9a 	bl	800642c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2140      	movs	r1, #64	; 0x40
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fbf4 	bl	80064ec <TIM_ITRx_SetConfig>
      break;
 8005d04:	e00c      	b.n	8005d20 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4610      	mov	r0, r2
 8005d12:	f000 fbeb 	bl	80064ec <TIM_ITRx_SetConfig>
      break;
 8005d16:	e003      	b.n	8005d20 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d1c:	e000      	b.n	8005d20 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005d1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	ffceff88 	.word	0xffceff88
 8005d40:	00100040 	.word	0x00100040
 8005d44:	00100030 	.word	0x00100030
 8005d48:	00100020 	.word	0x00100020

08005d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a40      	ldr	r2, [pc, #256]	; (8005e60 <TIM_Base_SetConfig+0x114>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d013      	beq.n	8005d8c <TIM_Base_SetConfig+0x40>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6a:	d00f      	beq.n	8005d8c <TIM_Base_SetConfig+0x40>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a3d      	ldr	r2, [pc, #244]	; (8005e64 <TIM_Base_SetConfig+0x118>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00b      	beq.n	8005d8c <TIM_Base_SetConfig+0x40>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a3c      	ldr	r2, [pc, #240]	; (8005e68 <TIM_Base_SetConfig+0x11c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d007      	beq.n	8005d8c <TIM_Base_SetConfig+0x40>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a3b      	ldr	r2, [pc, #236]	; (8005e6c <TIM_Base_SetConfig+0x120>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d003      	beq.n	8005d8c <TIM_Base_SetConfig+0x40>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a3a      	ldr	r2, [pc, #232]	; (8005e70 <TIM_Base_SetConfig+0x124>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d108      	bne.n	8005d9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a2f      	ldr	r2, [pc, #188]	; (8005e60 <TIM_Base_SetConfig+0x114>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d01f      	beq.n	8005de6 <TIM_Base_SetConfig+0x9a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dac:	d01b      	beq.n	8005de6 <TIM_Base_SetConfig+0x9a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a2c      	ldr	r2, [pc, #176]	; (8005e64 <TIM_Base_SetConfig+0x118>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d017      	beq.n	8005de6 <TIM_Base_SetConfig+0x9a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a2b      	ldr	r2, [pc, #172]	; (8005e68 <TIM_Base_SetConfig+0x11c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d013      	beq.n	8005de6 <TIM_Base_SetConfig+0x9a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a2a      	ldr	r2, [pc, #168]	; (8005e6c <TIM_Base_SetConfig+0x120>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00f      	beq.n	8005de6 <TIM_Base_SetConfig+0x9a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a29      	ldr	r2, [pc, #164]	; (8005e70 <TIM_Base_SetConfig+0x124>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00b      	beq.n	8005de6 <TIM_Base_SetConfig+0x9a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a28      	ldr	r2, [pc, #160]	; (8005e74 <TIM_Base_SetConfig+0x128>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d007      	beq.n	8005de6 <TIM_Base_SetConfig+0x9a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a27      	ldr	r2, [pc, #156]	; (8005e78 <TIM_Base_SetConfig+0x12c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d003      	beq.n	8005de6 <TIM_Base_SetConfig+0x9a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a26      	ldr	r2, [pc, #152]	; (8005e7c <TIM_Base_SetConfig+0x130>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d108      	bne.n	8005df8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a10      	ldr	r2, [pc, #64]	; (8005e60 <TIM_Base_SetConfig+0x114>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00f      	beq.n	8005e44 <TIM_Base_SetConfig+0xf8>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a12      	ldr	r2, [pc, #72]	; (8005e70 <TIM_Base_SetConfig+0x124>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d00b      	beq.n	8005e44 <TIM_Base_SetConfig+0xf8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a11      	ldr	r2, [pc, #68]	; (8005e74 <TIM_Base_SetConfig+0x128>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d007      	beq.n	8005e44 <TIM_Base_SetConfig+0xf8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a10      	ldr	r2, [pc, #64]	; (8005e78 <TIM_Base_SetConfig+0x12c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d003      	beq.n	8005e44 <TIM_Base_SetConfig+0xf8>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a0f      	ldr	r2, [pc, #60]	; (8005e7c <TIM_Base_SetConfig+0x130>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d103      	bne.n	8005e4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	615a      	str	r2, [r3, #20]
}
 8005e52:	bf00      	nop
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	40010000 	.word	0x40010000
 8005e64:	40000400 	.word	0x40000400
 8005e68:	40000800 	.word	0x40000800
 8005e6c:	40000c00 	.word	0x40000c00
 8005e70:	40010400 	.word	0x40010400
 8005e74:	40014000 	.word	0x40014000
 8005e78:	40014400 	.word	0x40014400
 8005e7c:	40014800 	.word	0x40014800

08005e80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f023 0201 	bic.w	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4b37      	ldr	r3, [pc, #220]	; (8005f88 <TIM_OC1_SetConfig+0x108>)
 8005eac:	4013      	ands	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 0303 	bic.w	r3, r3, #3
 8005eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f023 0302 	bic.w	r3, r3, #2
 8005ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a2d      	ldr	r2, [pc, #180]	; (8005f8c <TIM_OC1_SetConfig+0x10c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d00f      	beq.n	8005efc <TIM_OC1_SetConfig+0x7c>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a2c      	ldr	r2, [pc, #176]	; (8005f90 <TIM_OC1_SetConfig+0x110>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00b      	beq.n	8005efc <TIM_OC1_SetConfig+0x7c>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a2b      	ldr	r2, [pc, #172]	; (8005f94 <TIM_OC1_SetConfig+0x114>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d007      	beq.n	8005efc <TIM_OC1_SetConfig+0x7c>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a2a      	ldr	r2, [pc, #168]	; (8005f98 <TIM_OC1_SetConfig+0x118>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d003      	beq.n	8005efc <TIM_OC1_SetConfig+0x7c>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a29      	ldr	r2, [pc, #164]	; (8005f9c <TIM_OC1_SetConfig+0x11c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d10c      	bne.n	8005f16 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f023 0308 	bic.w	r3, r3, #8
 8005f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f023 0304 	bic.w	r3, r3, #4
 8005f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a1c      	ldr	r2, [pc, #112]	; (8005f8c <TIM_OC1_SetConfig+0x10c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00f      	beq.n	8005f3e <TIM_OC1_SetConfig+0xbe>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a1b      	ldr	r2, [pc, #108]	; (8005f90 <TIM_OC1_SetConfig+0x110>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00b      	beq.n	8005f3e <TIM_OC1_SetConfig+0xbe>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a1a      	ldr	r2, [pc, #104]	; (8005f94 <TIM_OC1_SetConfig+0x114>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d007      	beq.n	8005f3e <TIM_OC1_SetConfig+0xbe>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a19      	ldr	r2, [pc, #100]	; (8005f98 <TIM_OC1_SetConfig+0x118>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d003      	beq.n	8005f3e <TIM_OC1_SetConfig+0xbe>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a18      	ldr	r2, [pc, #96]	; (8005f9c <TIM_OC1_SetConfig+0x11c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d111      	bne.n	8005f62 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	621a      	str	r2, [r3, #32]
}
 8005f7c:	bf00      	nop
 8005f7e:	371c      	adds	r7, #28
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	fffeff8f 	.word	0xfffeff8f
 8005f8c:	40010000 	.word	0x40010000
 8005f90:	40010400 	.word	0x40010400
 8005f94:	40014000 	.word	0x40014000
 8005f98:	40014400 	.word	0x40014400
 8005f9c:	40014800 	.word	0x40014800

08005fa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	f023 0210 	bic.w	r2, r3, #16
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	4b34      	ldr	r3, [pc, #208]	; (800609c <TIM_OC2_SetConfig+0xfc>)
 8005fcc:	4013      	ands	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	021b      	lsls	r3, r3, #8
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f023 0320 	bic.w	r3, r3, #32
 8005fea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a29      	ldr	r2, [pc, #164]	; (80060a0 <TIM_OC2_SetConfig+0x100>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d003      	beq.n	8006008 <TIM_OC2_SetConfig+0x68>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a28      	ldr	r2, [pc, #160]	; (80060a4 <TIM_OC2_SetConfig+0x104>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d10d      	bne.n	8006024 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800600e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	4313      	orrs	r3, r2
 800601a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006022:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a1e      	ldr	r2, [pc, #120]	; (80060a0 <TIM_OC2_SetConfig+0x100>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00f      	beq.n	800604c <TIM_OC2_SetConfig+0xac>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a1d      	ldr	r2, [pc, #116]	; (80060a4 <TIM_OC2_SetConfig+0x104>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00b      	beq.n	800604c <TIM_OC2_SetConfig+0xac>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a1c      	ldr	r2, [pc, #112]	; (80060a8 <TIM_OC2_SetConfig+0x108>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d007      	beq.n	800604c <TIM_OC2_SetConfig+0xac>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a1b      	ldr	r2, [pc, #108]	; (80060ac <TIM_OC2_SetConfig+0x10c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d003      	beq.n	800604c <TIM_OC2_SetConfig+0xac>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a1a      	ldr	r2, [pc, #104]	; (80060b0 <TIM_OC2_SetConfig+0x110>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d113      	bne.n	8006074 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006052:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800605a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4313      	orrs	r3, r2
 8006072:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	621a      	str	r2, [r3, #32]
}
 800608e:	bf00      	nop
 8006090:	371c      	adds	r7, #28
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	feff8fff 	.word	0xfeff8fff
 80060a0:	40010000 	.word	0x40010000
 80060a4:	40010400 	.word	0x40010400
 80060a8:	40014000 	.word	0x40014000
 80060ac:	40014400 	.word	0x40014400
 80060b0:	40014800 	.word	0x40014800

080060b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	4b33      	ldr	r3, [pc, #204]	; (80061ac <TIM_OC3_SetConfig+0xf8>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 0303 	bic.w	r3, r3, #3
 80060ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	021b      	lsls	r3, r3, #8
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a28      	ldr	r2, [pc, #160]	; (80061b0 <TIM_OC3_SetConfig+0xfc>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d003      	beq.n	800611a <TIM_OC3_SetConfig+0x66>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a27      	ldr	r2, [pc, #156]	; (80061b4 <TIM_OC3_SetConfig+0x100>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d10d      	bne.n	8006136 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006120:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	021b      	lsls	r3, r3, #8
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a1d      	ldr	r2, [pc, #116]	; (80061b0 <TIM_OC3_SetConfig+0xfc>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00f      	beq.n	800615e <TIM_OC3_SetConfig+0xaa>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a1c      	ldr	r2, [pc, #112]	; (80061b4 <TIM_OC3_SetConfig+0x100>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d00b      	beq.n	800615e <TIM_OC3_SetConfig+0xaa>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a1b      	ldr	r2, [pc, #108]	; (80061b8 <TIM_OC3_SetConfig+0x104>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d007      	beq.n	800615e <TIM_OC3_SetConfig+0xaa>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a1a      	ldr	r2, [pc, #104]	; (80061bc <TIM_OC3_SetConfig+0x108>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d003      	beq.n	800615e <TIM_OC3_SetConfig+0xaa>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a19      	ldr	r2, [pc, #100]	; (80061c0 <TIM_OC3_SetConfig+0x10c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d113      	bne.n	8006186 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800616c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	011b      	lsls	r3, r3, #4
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	4313      	orrs	r3, r2
 8006178:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	621a      	str	r2, [r3, #32]
}
 80061a0:	bf00      	nop
 80061a2:	371c      	adds	r7, #28
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	fffeff8f 	.word	0xfffeff8f
 80061b0:	40010000 	.word	0x40010000
 80061b4:	40010400 	.word	0x40010400
 80061b8:	40014000 	.word	0x40014000
 80061bc:	40014400 	.word	0x40014400
 80061c0:	40014800 	.word	0x40014800

080061c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4b24      	ldr	r3, [pc, #144]	; (8006280 <TIM_OC4_SetConfig+0xbc>)
 80061f0:	4013      	ands	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	021b      	lsls	r3, r3, #8
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	4313      	orrs	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800620e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	031b      	lsls	r3, r3, #12
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4313      	orrs	r3, r2
 800621a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a19      	ldr	r2, [pc, #100]	; (8006284 <TIM_OC4_SetConfig+0xc0>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d00f      	beq.n	8006244 <TIM_OC4_SetConfig+0x80>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a18      	ldr	r2, [pc, #96]	; (8006288 <TIM_OC4_SetConfig+0xc4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d00b      	beq.n	8006244 <TIM_OC4_SetConfig+0x80>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a17      	ldr	r2, [pc, #92]	; (800628c <TIM_OC4_SetConfig+0xc8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d007      	beq.n	8006244 <TIM_OC4_SetConfig+0x80>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a16      	ldr	r2, [pc, #88]	; (8006290 <TIM_OC4_SetConfig+0xcc>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d003      	beq.n	8006244 <TIM_OC4_SetConfig+0x80>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a15      	ldr	r2, [pc, #84]	; (8006294 <TIM_OC4_SetConfig+0xd0>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d109      	bne.n	8006258 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800624a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	019b      	lsls	r3, r3, #6
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	4313      	orrs	r3, r2
 8006256:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	621a      	str	r2, [r3, #32]
}
 8006272:	bf00      	nop
 8006274:	371c      	adds	r7, #28
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	feff8fff 	.word	0xfeff8fff
 8006284:	40010000 	.word	0x40010000
 8006288:	40010400 	.word	0x40010400
 800628c:	40014000 	.word	0x40014000
 8006290:	40014400 	.word	0x40014400
 8006294:	40014800 	.word	0x40014800

08006298 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	4b21      	ldr	r3, [pc, #132]	; (8006348 <TIM_OC5_SetConfig+0xb0>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80062d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	041b      	lsls	r3, r3, #16
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a18      	ldr	r2, [pc, #96]	; (800634c <TIM_OC5_SetConfig+0xb4>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00f      	beq.n	800630e <TIM_OC5_SetConfig+0x76>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a17      	ldr	r2, [pc, #92]	; (8006350 <TIM_OC5_SetConfig+0xb8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00b      	beq.n	800630e <TIM_OC5_SetConfig+0x76>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a16      	ldr	r2, [pc, #88]	; (8006354 <TIM_OC5_SetConfig+0xbc>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d007      	beq.n	800630e <TIM_OC5_SetConfig+0x76>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a15      	ldr	r2, [pc, #84]	; (8006358 <TIM_OC5_SetConfig+0xc0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d003      	beq.n	800630e <TIM_OC5_SetConfig+0x76>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a14      	ldr	r2, [pc, #80]	; (800635c <TIM_OC5_SetConfig+0xc4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d109      	bne.n	8006322 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006314:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	021b      	lsls	r3, r3, #8
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	4313      	orrs	r3, r2
 8006320:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	621a      	str	r2, [r3, #32]
}
 800633c:	bf00      	nop
 800633e:	371c      	adds	r7, #28
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	fffeff8f 	.word	0xfffeff8f
 800634c:	40010000 	.word	0x40010000
 8006350:	40010400 	.word	0x40010400
 8006354:	40014000 	.word	0x40014000
 8006358:	40014400 	.word	0x40014400
 800635c:	40014800 	.word	0x40014800

08006360 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	4b22      	ldr	r3, [pc, #136]	; (8006414 <TIM_OC6_SetConfig+0xb4>)
 800638c:	4013      	ands	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	051b      	lsls	r3, r3, #20
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a19      	ldr	r2, [pc, #100]	; (8006418 <TIM_OC6_SetConfig+0xb8>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00f      	beq.n	80063d8 <TIM_OC6_SetConfig+0x78>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a18      	ldr	r2, [pc, #96]	; (800641c <TIM_OC6_SetConfig+0xbc>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d00b      	beq.n	80063d8 <TIM_OC6_SetConfig+0x78>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a17      	ldr	r2, [pc, #92]	; (8006420 <TIM_OC6_SetConfig+0xc0>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d007      	beq.n	80063d8 <TIM_OC6_SetConfig+0x78>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a16      	ldr	r2, [pc, #88]	; (8006424 <TIM_OC6_SetConfig+0xc4>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d003      	beq.n	80063d8 <TIM_OC6_SetConfig+0x78>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a15      	ldr	r2, [pc, #84]	; (8006428 <TIM_OC6_SetConfig+0xc8>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d109      	bne.n	80063ec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	029b      	lsls	r3, r3, #10
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	621a      	str	r2, [r3, #32]
}
 8006406:	bf00      	nop
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	feff8fff 	.word	0xfeff8fff
 8006418:	40010000 	.word	0x40010000
 800641c:	40010400 	.word	0x40010400
 8006420:	40014000 	.word	0x40014000
 8006424:	40014400 	.word	0x40014400
 8006428:	40014800 	.word	0x40014800

0800642c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800642c:	b480      	push	{r7}
 800642e:	b087      	sub	sp, #28
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	f023 0201 	bic.w	r2, r3, #1
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	4313      	orrs	r3, r2
 8006460:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f023 030a 	bic.w	r3, r3, #10
 8006468:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	621a      	str	r2, [r3, #32]
}
 800647e:	bf00      	nop
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800648a:	b480      	push	{r7}
 800648c:	b087      	sub	sp, #28
 800648e:	af00      	add	r7, sp, #0
 8006490:	60f8      	str	r0, [r7, #12]
 8006492:	60b9      	str	r1, [r7, #8]
 8006494:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	f023 0210 	bic.w	r2, r3, #16
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	031b      	lsls	r3, r3, #12
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	4313      	orrs	r3, r2
 80064be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	011b      	lsls	r3, r3, #4
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	621a      	str	r2, [r3, #32]
}
 80064de:	bf00      	nop
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
	...

080064ec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	4b09      	ldr	r3, [pc, #36]	; (8006524 <TIM_ITRx_SetConfig+0x38>)
 8006500:	4013      	ands	r3, r2
 8006502:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4313      	orrs	r3, r2
 800650a:	f043 0307 	orr.w	r3, r3, #7
 800650e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	609a      	str	r2, [r3, #8]
}
 8006516:	bf00      	nop
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	ffcfff8f 	.word	0xffcfff8f

08006528 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006542:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	021a      	lsls	r2, r3, #8
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	431a      	orrs	r2, r3
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4313      	orrs	r3, r2
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	4313      	orrs	r3, r2
 8006554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	609a      	str	r2, [r3, #8]
}
 800655c:	bf00      	nop
 800655e:	371c      	adds	r7, #28
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f003 031f 	and.w	r3, r3, #31
 800657a:	2201      	movs	r2, #1
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a1a      	ldr	r2, [r3, #32]
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	43db      	mvns	r3, r3
 800658a:	401a      	ands	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a1a      	ldr	r2, [r3, #32]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f003 031f 	and.w	r3, r3, #31
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	fa01 f303 	lsl.w	r3, r1, r3
 80065a0:	431a      	orrs	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	621a      	str	r2, [r3, #32]
}
 80065a6:	bf00      	nop
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d101      	bne.n	80065cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065c8:	2302      	movs	r3, #2
 80065ca:	e06d      	b.n	80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a30      	ldr	r2, [pc, #192]	; (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d004      	beq.n	8006600 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a2f      	ldr	r2, [pc, #188]	; (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d108      	bne.n	8006612 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006606:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006618:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a20      	ldr	r2, [pc, #128]	; (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d022      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663e:	d01d      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a1d      	ldr	r2, [pc, #116]	; (80066bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d018      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a1c      	ldr	r2, [pc, #112]	; (80066c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d013      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1a      	ldr	r2, [pc, #104]	; (80066c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00e      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a15      	ldr	r2, [pc, #84]	; (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d009      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a16      	ldr	r2, [pc, #88]	; (80066c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d004      	beq.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a15      	ldr	r2, [pc, #84]	; (80066cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d10c      	bne.n	8006696 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006682:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	4313      	orrs	r3, r2
 800668c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	40010000 	.word	0x40010000
 80066b8:	40010400 	.word	0x40010400
 80066bc:	40000400 	.word	0x40000400
 80066c0:	40000800 	.word	0x40000800
 80066c4:	40000c00 	.word	0x40000c00
 80066c8:	40001800 	.word	0x40001800
 80066cc:	40014000 	.word	0x40014000

080066d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e042      	b.n	8006768 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d106      	bne.n	80066fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7fa ff23 	bl	8001540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2224      	movs	r2, #36	; 0x24
 80066fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 0201 	bic.w	r2, r2, #1
 8006710:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fce0 	bl	80070d8 <UART_SetConfig>
 8006718:	4603      	mov	r3, r0
 800671a:	2b01      	cmp	r3, #1
 800671c:	d101      	bne.n	8006722 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e022      	b.n	8006768 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f001 fb40 	bl	8007db0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800673e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689a      	ldr	r2, [r3, #8]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800674e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0201 	orr.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f001 fbc7 	bl	8007ef4 <UART_CheckIdleState>
 8006766:	4603      	mov	r3, r0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b08a      	sub	sp, #40	; 0x28
 8006774:	af02      	add	r7, sp, #8
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	603b      	str	r3, [r7, #0]
 800677c:	4613      	mov	r3, r2
 800677e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006786:	2b20      	cmp	r3, #32
 8006788:	d17b      	bne.n	8006882 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d002      	beq.n	8006796 <HAL_UART_Transmit+0x26>
 8006790:	88fb      	ldrh	r3, [r7, #6]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e074      	b.n	8006884 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2221      	movs	r2, #33	; 0x21
 80067a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067aa:	f7fb f87d 	bl	80018a8 <HAL_GetTick>
 80067ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	88fa      	ldrh	r2, [r7, #6]
 80067b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	88fa      	ldrh	r2, [r7, #6]
 80067bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c8:	d108      	bne.n	80067dc <HAL_UART_Transmit+0x6c>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d104      	bne.n	80067dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067d2:	2300      	movs	r3, #0
 80067d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	61bb      	str	r3, [r7, #24]
 80067da:	e003      	b.n	80067e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067e0:	2300      	movs	r3, #0
 80067e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067e4:	e030      	b.n	8006848 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	2200      	movs	r2, #0
 80067ee:	2180      	movs	r1, #128	; 0x80
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f001 fc29 	bl	8008048 <UART_WaitOnFlagUntilTimeout>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2220      	movs	r2, #32
 8006800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e03d      	b.n	8006884 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10b      	bne.n	8006826 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800681c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	3302      	adds	r3, #2
 8006822:	61bb      	str	r3, [r7, #24]
 8006824:	e007      	b.n	8006836 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	781a      	ldrb	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	3301      	adds	r3, #1
 8006834:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800683c:	b29b      	uxth	r3, r3
 800683e:	3b01      	subs	r3, #1
 8006840:	b29a      	uxth	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800684e:	b29b      	uxth	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1c8      	bne.n	80067e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2200      	movs	r2, #0
 800685c:	2140      	movs	r1, #64	; 0x40
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f001 fbf2 	bl	8008048 <UART_WaitOnFlagUntilTimeout>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d005      	beq.n	8006876 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2220      	movs	r2, #32
 800686e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e006      	b.n	8006884 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2220      	movs	r2, #32
 800687a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	e000      	b.n	8006884 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006882:	2302      	movs	r3, #2
  }
}
 8006884:	4618      	mov	r0, r3
 8006886:	3720      	adds	r7, #32
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b08a      	sub	sp, #40	; 0x28
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	4613      	mov	r3, r2
 8006898:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068a0:	2b20      	cmp	r3, #32
 80068a2:	d137      	bne.n	8006914 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d002      	beq.n	80068b0 <HAL_UART_Receive_IT+0x24>
 80068aa:	88fb      	ldrh	r3, [r7, #6]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e030      	b.n	8006916 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a18      	ldr	r2, [pc, #96]	; (8006920 <HAL_UART_Receive_IT+0x94>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d01f      	beq.n	8006904 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d018      	beq.n	8006904 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	e853 3f00 	ldrex	r3, [r3]
 80068de:	613b      	str	r3, [r7, #16]
   return(result);
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	461a      	mov	r2, r3
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	623b      	str	r3, [r7, #32]
 80068f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f4:	69f9      	ldr	r1, [r7, #28]
 80068f6:	6a3a      	ldr	r2, [r7, #32]
 80068f8:	e841 2300 	strex	r3, r2, [r1]
 80068fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e6      	bne.n	80068d2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006904:	88fb      	ldrh	r3, [r7, #6]
 8006906:	461a      	mov	r2, r3
 8006908:	68b9      	ldr	r1, [r7, #8]
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f001 fc04 	bl	8008118 <UART_Start_Receive_IT>
 8006910:	4603      	mov	r3, r0
 8006912:	e000      	b.n	8006916 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006914:	2302      	movs	r3, #2
  }
}
 8006916:	4618      	mov	r0, r3
 8006918:	3728      	adds	r7, #40	; 0x28
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	58000c00 	.word	0x58000c00

08006924 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b0ba      	sub	sp, #232	; 0xe8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800694a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800694e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006952:	4013      	ands	r3, r2
 8006954:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006958:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800695c:	2b00      	cmp	r3, #0
 800695e:	d11b      	bne.n	8006998 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006964:	f003 0320 	and.w	r3, r3, #32
 8006968:	2b00      	cmp	r3, #0
 800696a:	d015      	beq.n	8006998 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800696c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006970:	f003 0320 	and.w	r3, r3, #32
 8006974:	2b00      	cmp	r3, #0
 8006976:	d105      	bne.n	8006984 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800697c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d009      	beq.n	8006998 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 8377 	beq.w	800707c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	4798      	blx	r3
      }
      return;
 8006996:	e371      	b.n	800707c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006998:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 8123 	beq.w	8006be8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80069a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80069a6:	4b8d      	ldr	r3, [pc, #564]	; (8006bdc <HAL_UART_IRQHandler+0x2b8>)
 80069a8:	4013      	ands	r3, r2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80069ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80069b2:	4b8b      	ldr	r3, [pc, #556]	; (8006be0 <HAL_UART_IRQHandler+0x2bc>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 8116 	beq.w	8006be8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d011      	beq.n	80069ec <HAL_UART_IRQHandler+0xc8>
 80069c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00b      	beq.n	80069ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2201      	movs	r2, #1
 80069da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e2:	f043 0201 	orr.w	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d011      	beq.n	8006a1c <HAL_UART_IRQHandler+0xf8>
 80069f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00b      	beq.n	8006a1c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a12:	f043 0204 	orr.w	r2, r3, #4
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a20:	f003 0304 	and.w	r3, r3, #4
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d011      	beq.n	8006a4c <HAL_UART_IRQHandler+0x128>
 8006a28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00b      	beq.n	8006a4c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2204      	movs	r2, #4
 8006a3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a42:	f043 0202 	orr.w	r2, r3, #2
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a50:	f003 0308 	and.w	r3, r3, #8
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d017      	beq.n	8006a88 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a5c:	f003 0320 	and.w	r3, r3, #32
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d105      	bne.n	8006a70 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006a64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006a68:	4b5c      	ldr	r3, [pc, #368]	; (8006bdc <HAL_UART_IRQHandler+0x2b8>)
 8006a6a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2208      	movs	r2, #8
 8006a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7e:	f043 0208 	orr.w	r2, r3, #8
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d012      	beq.n	8006aba <HAL_UART_IRQHandler+0x196>
 8006a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00c      	beq.n	8006aba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006aa8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab0:	f043 0220 	orr.w	r2, r3, #32
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 82dd 	beq.w	8007080 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aca:	f003 0320 	and.w	r3, r3, #32
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d013      	beq.n	8006afa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad6:	f003 0320 	and.w	r3, r3, #32
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d105      	bne.n	8006aea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d007      	beq.n	8006afa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0e:	2b40      	cmp	r3, #64	; 0x40
 8006b10:	d005      	beq.n	8006b1e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d054      	beq.n	8006bc8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f001 fc1c 	bl	800835c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2e:	2b40      	cmp	r3, #64	; 0x40
 8006b30:	d146      	bne.n	8006bc0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3308      	adds	r3, #8
 8006b38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3308      	adds	r3, #8
 8006b5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1d9      	bne.n	8006b32 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d017      	beq.n	8006bb8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b8e:	4a15      	ldr	r2, [pc, #84]	; (8006be4 <HAL_UART_IRQHandler+0x2c0>)
 8006b90:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fb fae3 	bl	8002164 <HAL_DMA_Abort_IT>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d019      	beq.n	8006bd8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006bb2:	4610      	mov	r0, r2
 8006bb4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb6:	e00f      	b.n	8006bd8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fa77 	bl	80070ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bbe:	e00b      	b.n	8006bd8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fa73 	bl	80070ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc6:	e007      	b.n	8006bd8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fa6f 	bl	80070ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006bd6:	e253      	b.n	8007080 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd8:	bf00      	nop
    return;
 8006bda:	e251      	b.n	8007080 <HAL_UART_IRQHandler+0x75c>
 8006bdc:	10000001 	.word	0x10000001
 8006be0:	04000120 	.word	0x04000120
 8006be4:	08008429 	.word	0x08008429

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	f040 81e7 	bne.w	8006fc0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf6:	f003 0310 	and.w	r3, r3, #16
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 81e0 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c04:	f003 0310 	and.w	r3, r3, #16
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 81d9 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2210      	movs	r2, #16
 8006c14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c20:	2b40      	cmp	r3, #64	; 0x40
 8006c22:	f040 8151 	bne.w	8006ec8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a96      	ldr	r2, [pc, #600]	; (8006e88 <HAL_UART_IRQHandler+0x564>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d068      	beq.n	8006d06 <HAL_UART_IRQHandler+0x3e2>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a93      	ldr	r2, [pc, #588]	; (8006e8c <HAL_UART_IRQHandler+0x568>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d061      	beq.n	8006d06 <HAL_UART_IRQHandler+0x3e2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a91      	ldr	r2, [pc, #580]	; (8006e90 <HAL_UART_IRQHandler+0x56c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d05a      	beq.n	8006d06 <HAL_UART_IRQHandler+0x3e2>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a8e      	ldr	r2, [pc, #568]	; (8006e94 <HAL_UART_IRQHandler+0x570>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d053      	beq.n	8006d06 <HAL_UART_IRQHandler+0x3e2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a8c      	ldr	r2, [pc, #560]	; (8006e98 <HAL_UART_IRQHandler+0x574>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d04c      	beq.n	8006d06 <HAL_UART_IRQHandler+0x3e2>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a89      	ldr	r2, [pc, #548]	; (8006e9c <HAL_UART_IRQHandler+0x578>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d045      	beq.n	8006d06 <HAL_UART_IRQHandler+0x3e2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a87      	ldr	r2, [pc, #540]	; (8006ea0 <HAL_UART_IRQHandler+0x57c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d03e      	beq.n	8006d06 <HAL_UART_IRQHandler+0x3e2>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a84      	ldr	r2, [pc, #528]	; (8006ea4 <HAL_UART_IRQHandler+0x580>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d037      	beq.n	8006d06 <HAL_UART_IRQHandler+0x3e2>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a82      	ldr	r2, [pc, #520]	; (8006ea8 <HAL_UART_IRQHandler+0x584>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d030      	beq.n	8006d06 <HAL_UART_IRQHandler+0x3e2>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a7f      	ldr	r2, [pc, #508]	; (8006eac <HAL_UART_IRQHandler+0x588>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d029      	beq.n	8006d06 <HAL_UART_IRQHandler+0x3e2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a7d      	ldr	r2, [pc, #500]	; (8006eb0 <HAL_UART_IRQHandler+0x58c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d022      	beq.n	8006d06 <HAL_UART_IRQHandler+0x3e2>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a7a      	ldr	r2, [pc, #488]	; (8006eb4 <HAL_UART_IRQHandler+0x590>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d01b      	beq.n	8006d06 <HAL_UART_IRQHandler+0x3e2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a78      	ldr	r2, [pc, #480]	; (8006eb8 <HAL_UART_IRQHandler+0x594>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d014      	beq.n	8006d06 <HAL_UART_IRQHandler+0x3e2>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a75      	ldr	r2, [pc, #468]	; (8006ebc <HAL_UART_IRQHandler+0x598>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d00d      	beq.n	8006d06 <HAL_UART_IRQHandler+0x3e2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a73      	ldr	r2, [pc, #460]	; (8006ec0 <HAL_UART_IRQHandler+0x59c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d006      	beq.n	8006d06 <HAL_UART_IRQHandler+0x3e2>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a70      	ldr	r2, [pc, #448]	; (8006ec4 <HAL_UART_IRQHandler+0x5a0>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d106      	bne.n	8006d14 <HAL_UART_IRQHandler+0x3f0>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	e005      	b.n	8006d20 <HAL_UART_IRQHandler+0x3fc>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 81ab 	beq.w	8007084 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	f080 81a3 	bcs.w	8007084 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d54:	f000 8087 	beq.w	8006e66 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d64:	e853 3f00 	ldrex	r3, [r3]
 8006d68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d86:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1da      	bne.n	8006d58 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3308      	adds	r3, #8
 8006da8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dac:	e853 3f00 	ldrex	r3, [r3]
 8006db0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006db2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006db4:	f023 0301 	bic.w	r3, r3, #1
 8006db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006dc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006dca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dcc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006dce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1e1      	bne.n	8006da2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3308      	adds	r3, #8
 8006de4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006de8:	e853 3f00 	ldrex	r3, [r3]
 8006dec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e0a:	e841 2300 	strex	r3, r2, [r1]
 8006e0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1e3      	bne.n	8006dde <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2220      	movs	r2, #32
 8006e1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e2c:	e853 3f00 	ldrex	r3, [r3]
 8006e30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e34:	f023 0310 	bic.w	r3, r3, #16
 8006e38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	461a      	mov	r2, r3
 8006e42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e46:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e48:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e4      	bne.n	8006e24 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7fa fe61 	bl	8001b28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2202      	movs	r2, #2
 8006e6a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f91d 	bl	80070c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e86:	e0fd      	b.n	8007084 <HAL_UART_IRQHandler+0x760>
 8006e88:	40020010 	.word	0x40020010
 8006e8c:	40020028 	.word	0x40020028
 8006e90:	40020040 	.word	0x40020040
 8006e94:	40020058 	.word	0x40020058
 8006e98:	40020070 	.word	0x40020070
 8006e9c:	40020088 	.word	0x40020088
 8006ea0:	400200a0 	.word	0x400200a0
 8006ea4:	400200b8 	.word	0x400200b8
 8006ea8:	40020410 	.word	0x40020410
 8006eac:	40020428 	.word	0x40020428
 8006eb0:	40020440 	.word	0x40020440
 8006eb4:	40020458 	.word	0x40020458
 8006eb8:	40020470 	.word	0x40020470
 8006ebc:	40020488 	.word	0x40020488
 8006ec0:	400204a0 	.word	0x400204a0
 8006ec4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 80cf 	beq.w	8007088 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8006eea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f000 80ca 	beq.w	8007088 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efc:	e853 3f00 	ldrex	r3, [r3]
 8006f00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	461a      	mov	r2, r3
 8006f12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f16:	647b      	str	r3, [r7, #68]	; 0x44
 8006f18:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f1e:	e841 2300 	strex	r3, r2, [r1]
 8006f22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1e4      	bne.n	8006ef4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3308      	adds	r3, #8
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	e853 3f00 	ldrex	r3, [r3]
 8006f38:	623b      	str	r3, [r7, #32]
   return(result);
 8006f3a:	6a3a      	ldr	r2, [r7, #32]
 8006f3c:	4b55      	ldr	r3, [pc, #340]	; (8007094 <HAL_UART_IRQHandler+0x770>)
 8006f3e:	4013      	ands	r3, r2
 8006f40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3308      	adds	r3, #8
 8006f4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f4e:	633a      	str	r2, [r7, #48]	; 0x30
 8006f50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f56:	e841 2300 	strex	r3, r2, [r1]
 8006f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1e3      	bne.n	8006f2a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 0310 	bic.w	r3, r3, #16
 8006f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	461a      	mov	r2, r3
 8006f94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f98:	61fb      	str	r3, [r7, #28]
 8006f9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	69b9      	ldr	r1, [r7, #24]
 8006f9e:	69fa      	ldr	r2, [r7, #28]
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e4      	bne.n	8006f76 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f881 	bl	80070c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fbe:	e063      	b.n	8007088 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00e      	beq.n	8006fea <HAL_UART_IRQHandler+0x6c6>
 8006fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d008      	beq.n	8006fea <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006fe0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f001 ff7e 	bl	8008ee4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fe8:	e051      	b.n	800708e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d014      	beq.n	8007020 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d105      	bne.n	800700e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007006:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d008      	beq.n	8007020 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007012:	2b00      	cmp	r3, #0
 8007014:	d03a      	beq.n	800708c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	4798      	blx	r3
    }
    return;
 800701e:	e035      	b.n	800708c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007028:	2b00      	cmp	r3, #0
 800702a:	d009      	beq.n	8007040 <HAL_UART_IRQHandler+0x71c>
 800702c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007034:	2b00      	cmp	r3, #0
 8007036:	d003      	beq.n	8007040 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f001 fa0b 	bl	8008454 <UART_EndTransmit_IT>
    return;
 800703e:	e026      	b.n	800708e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007044:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d009      	beq.n	8007060 <HAL_UART_IRQHandler+0x73c>
 800704c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007050:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d003      	beq.n	8007060 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f001 ff57 	bl	8008f0c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800705e:	e016      	b.n	800708e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d010      	beq.n	800708e <HAL_UART_IRQHandler+0x76a>
 800706c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007070:	2b00      	cmp	r3, #0
 8007072:	da0c      	bge.n	800708e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f001 ff3f 	bl	8008ef8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800707a:	e008      	b.n	800708e <HAL_UART_IRQHandler+0x76a>
      return;
 800707c:	bf00      	nop
 800707e:	e006      	b.n	800708e <HAL_UART_IRQHandler+0x76a>
    return;
 8007080:	bf00      	nop
 8007082:	e004      	b.n	800708e <HAL_UART_IRQHandler+0x76a>
      return;
 8007084:	bf00      	nop
 8007086:	e002      	b.n	800708e <HAL_UART_IRQHandler+0x76a>
      return;
 8007088:	bf00      	nop
 800708a:	e000      	b.n	800708e <HAL_UART_IRQHandler+0x76a>
    return;
 800708c:	bf00      	nop
  }
}
 800708e:	37e8      	adds	r7, #232	; 0xe8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	effffffe 	.word	0xeffffffe

08007098 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070dc:	b092      	sub	sp, #72	; 0x48
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	431a      	orrs	r2, r3
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	431a      	orrs	r2, r3
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	69db      	ldr	r3, [r3, #28]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	4bbe      	ldr	r3, [pc, #760]	; (8007400 <UART_SetConfig+0x328>)
 8007108:	4013      	ands	r3, r2
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	6812      	ldr	r2, [r2, #0]
 800710e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007110:	430b      	orrs	r3, r1
 8007112:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	68da      	ldr	r2, [r3, #12]
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	430a      	orrs	r2, r1
 8007128:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4ab3      	ldr	r2, [pc, #716]	; (8007404 <UART_SetConfig+0x32c>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d004      	beq.n	8007144 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007140:	4313      	orrs	r3, r2
 8007142:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	4baf      	ldr	r3, [pc, #700]	; (8007408 <UART_SetConfig+0x330>)
 800714c:	4013      	ands	r3, r2
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	6812      	ldr	r2, [r2, #0]
 8007152:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007154:	430b      	orrs	r3, r1
 8007156:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715e:	f023 010f 	bic.w	r1, r3, #15
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4aa6      	ldr	r2, [pc, #664]	; (800740c <UART_SetConfig+0x334>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d177      	bne.n	8007268 <UART_SetConfig+0x190>
 8007178:	4ba5      	ldr	r3, [pc, #660]	; (8007410 <UART_SetConfig+0x338>)
 800717a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007180:	2b28      	cmp	r3, #40	; 0x28
 8007182:	d86d      	bhi.n	8007260 <UART_SetConfig+0x188>
 8007184:	a201      	add	r2, pc, #4	; (adr r2, 800718c <UART_SetConfig+0xb4>)
 8007186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718a:	bf00      	nop
 800718c:	08007231 	.word	0x08007231
 8007190:	08007261 	.word	0x08007261
 8007194:	08007261 	.word	0x08007261
 8007198:	08007261 	.word	0x08007261
 800719c:	08007261 	.word	0x08007261
 80071a0:	08007261 	.word	0x08007261
 80071a4:	08007261 	.word	0x08007261
 80071a8:	08007261 	.word	0x08007261
 80071ac:	08007239 	.word	0x08007239
 80071b0:	08007261 	.word	0x08007261
 80071b4:	08007261 	.word	0x08007261
 80071b8:	08007261 	.word	0x08007261
 80071bc:	08007261 	.word	0x08007261
 80071c0:	08007261 	.word	0x08007261
 80071c4:	08007261 	.word	0x08007261
 80071c8:	08007261 	.word	0x08007261
 80071cc:	08007241 	.word	0x08007241
 80071d0:	08007261 	.word	0x08007261
 80071d4:	08007261 	.word	0x08007261
 80071d8:	08007261 	.word	0x08007261
 80071dc:	08007261 	.word	0x08007261
 80071e0:	08007261 	.word	0x08007261
 80071e4:	08007261 	.word	0x08007261
 80071e8:	08007261 	.word	0x08007261
 80071ec:	08007249 	.word	0x08007249
 80071f0:	08007261 	.word	0x08007261
 80071f4:	08007261 	.word	0x08007261
 80071f8:	08007261 	.word	0x08007261
 80071fc:	08007261 	.word	0x08007261
 8007200:	08007261 	.word	0x08007261
 8007204:	08007261 	.word	0x08007261
 8007208:	08007261 	.word	0x08007261
 800720c:	08007251 	.word	0x08007251
 8007210:	08007261 	.word	0x08007261
 8007214:	08007261 	.word	0x08007261
 8007218:	08007261 	.word	0x08007261
 800721c:	08007261 	.word	0x08007261
 8007220:	08007261 	.word	0x08007261
 8007224:	08007261 	.word	0x08007261
 8007228:	08007261 	.word	0x08007261
 800722c:	08007259 	.word	0x08007259
 8007230:	2301      	movs	r3, #1
 8007232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007236:	e326      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007238:	2304      	movs	r3, #4
 800723a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800723e:	e322      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007240:	2308      	movs	r3, #8
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007246:	e31e      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007248:	2310      	movs	r3, #16
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800724e:	e31a      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007250:	2320      	movs	r3, #32
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007256:	e316      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007258:	2340      	movs	r3, #64	; 0x40
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800725e:	e312      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007260:	2380      	movs	r3, #128	; 0x80
 8007262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007266:	e30e      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a69      	ldr	r2, [pc, #420]	; (8007414 <UART_SetConfig+0x33c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d130      	bne.n	80072d4 <UART_SetConfig+0x1fc>
 8007272:	4b67      	ldr	r3, [pc, #412]	; (8007410 <UART_SetConfig+0x338>)
 8007274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007276:	f003 0307 	and.w	r3, r3, #7
 800727a:	2b05      	cmp	r3, #5
 800727c:	d826      	bhi.n	80072cc <UART_SetConfig+0x1f4>
 800727e:	a201      	add	r2, pc, #4	; (adr r2, 8007284 <UART_SetConfig+0x1ac>)
 8007280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007284:	0800729d 	.word	0x0800729d
 8007288:	080072a5 	.word	0x080072a5
 800728c:	080072ad 	.word	0x080072ad
 8007290:	080072b5 	.word	0x080072b5
 8007294:	080072bd 	.word	0x080072bd
 8007298:	080072c5 	.word	0x080072c5
 800729c:	2300      	movs	r3, #0
 800729e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072a2:	e2f0      	b.n	8007886 <UART_SetConfig+0x7ae>
 80072a4:	2304      	movs	r3, #4
 80072a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072aa:	e2ec      	b.n	8007886 <UART_SetConfig+0x7ae>
 80072ac:	2308      	movs	r3, #8
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072b2:	e2e8      	b.n	8007886 <UART_SetConfig+0x7ae>
 80072b4:	2310      	movs	r3, #16
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ba:	e2e4      	b.n	8007886 <UART_SetConfig+0x7ae>
 80072bc:	2320      	movs	r3, #32
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072c2:	e2e0      	b.n	8007886 <UART_SetConfig+0x7ae>
 80072c4:	2340      	movs	r3, #64	; 0x40
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ca:	e2dc      	b.n	8007886 <UART_SetConfig+0x7ae>
 80072cc:	2380      	movs	r3, #128	; 0x80
 80072ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072d2:	e2d8      	b.n	8007886 <UART_SetConfig+0x7ae>
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a4f      	ldr	r2, [pc, #316]	; (8007418 <UART_SetConfig+0x340>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d130      	bne.n	8007340 <UART_SetConfig+0x268>
 80072de:	4b4c      	ldr	r3, [pc, #304]	; (8007410 <UART_SetConfig+0x338>)
 80072e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	2b05      	cmp	r3, #5
 80072e8:	d826      	bhi.n	8007338 <UART_SetConfig+0x260>
 80072ea:	a201      	add	r2, pc, #4	; (adr r2, 80072f0 <UART_SetConfig+0x218>)
 80072ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f0:	08007309 	.word	0x08007309
 80072f4:	08007311 	.word	0x08007311
 80072f8:	08007319 	.word	0x08007319
 80072fc:	08007321 	.word	0x08007321
 8007300:	08007329 	.word	0x08007329
 8007304:	08007331 	.word	0x08007331
 8007308:	2300      	movs	r3, #0
 800730a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800730e:	e2ba      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007310:	2304      	movs	r3, #4
 8007312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007316:	e2b6      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007318:	2308      	movs	r3, #8
 800731a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800731e:	e2b2      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007320:	2310      	movs	r3, #16
 8007322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007326:	e2ae      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007328:	2320      	movs	r3, #32
 800732a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800732e:	e2aa      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007330:	2340      	movs	r3, #64	; 0x40
 8007332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007336:	e2a6      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007338:	2380      	movs	r3, #128	; 0x80
 800733a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800733e:	e2a2      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a35      	ldr	r2, [pc, #212]	; (800741c <UART_SetConfig+0x344>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d130      	bne.n	80073ac <UART_SetConfig+0x2d4>
 800734a:	4b31      	ldr	r3, [pc, #196]	; (8007410 <UART_SetConfig+0x338>)
 800734c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734e:	f003 0307 	and.w	r3, r3, #7
 8007352:	2b05      	cmp	r3, #5
 8007354:	d826      	bhi.n	80073a4 <UART_SetConfig+0x2cc>
 8007356:	a201      	add	r2, pc, #4	; (adr r2, 800735c <UART_SetConfig+0x284>)
 8007358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735c:	08007375 	.word	0x08007375
 8007360:	0800737d 	.word	0x0800737d
 8007364:	08007385 	.word	0x08007385
 8007368:	0800738d 	.word	0x0800738d
 800736c:	08007395 	.word	0x08007395
 8007370:	0800739d 	.word	0x0800739d
 8007374:	2300      	movs	r3, #0
 8007376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800737a:	e284      	b.n	8007886 <UART_SetConfig+0x7ae>
 800737c:	2304      	movs	r3, #4
 800737e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007382:	e280      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007384:	2308      	movs	r3, #8
 8007386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800738a:	e27c      	b.n	8007886 <UART_SetConfig+0x7ae>
 800738c:	2310      	movs	r3, #16
 800738e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007392:	e278      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007394:	2320      	movs	r3, #32
 8007396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800739a:	e274      	b.n	8007886 <UART_SetConfig+0x7ae>
 800739c:	2340      	movs	r3, #64	; 0x40
 800739e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073a2:	e270      	b.n	8007886 <UART_SetConfig+0x7ae>
 80073a4:	2380      	movs	r3, #128	; 0x80
 80073a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073aa:	e26c      	b.n	8007886 <UART_SetConfig+0x7ae>
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a1b      	ldr	r2, [pc, #108]	; (8007420 <UART_SetConfig+0x348>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d142      	bne.n	800743c <UART_SetConfig+0x364>
 80073b6:	4b16      	ldr	r3, [pc, #88]	; (8007410 <UART_SetConfig+0x338>)
 80073b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ba:	f003 0307 	and.w	r3, r3, #7
 80073be:	2b05      	cmp	r3, #5
 80073c0:	d838      	bhi.n	8007434 <UART_SetConfig+0x35c>
 80073c2:	a201      	add	r2, pc, #4	; (adr r2, 80073c8 <UART_SetConfig+0x2f0>)
 80073c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c8:	080073e1 	.word	0x080073e1
 80073cc:	080073e9 	.word	0x080073e9
 80073d0:	080073f1 	.word	0x080073f1
 80073d4:	080073f9 	.word	0x080073f9
 80073d8:	08007425 	.word	0x08007425
 80073dc:	0800742d 	.word	0x0800742d
 80073e0:	2300      	movs	r3, #0
 80073e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073e6:	e24e      	b.n	8007886 <UART_SetConfig+0x7ae>
 80073e8:	2304      	movs	r3, #4
 80073ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ee:	e24a      	b.n	8007886 <UART_SetConfig+0x7ae>
 80073f0:	2308      	movs	r3, #8
 80073f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073f6:	e246      	b.n	8007886 <UART_SetConfig+0x7ae>
 80073f8:	2310      	movs	r3, #16
 80073fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073fe:	e242      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007400:	cfff69f3 	.word	0xcfff69f3
 8007404:	58000c00 	.word	0x58000c00
 8007408:	11fff4ff 	.word	0x11fff4ff
 800740c:	40011000 	.word	0x40011000
 8007410:	58024400 	.word	0x58024400
 8007414:	40004400 	.word	0x40004400
 8007418:	40004800 	.word	0x40004800
 800741c:	40004c00 	.word	0x40004c00
 8007420:	40005000 	.word	0x40005000
 8007424:	2320      	movs	r3, #32
 8007426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800742a:	e22c      	b.n	8007886 <UART_SetConfig+0x7ae>
 800742c:	2340      	movs	r3, #64	; 0x40
 800742e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007432:	e228      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007434:	2380      	movs	r3, #128	; 0x80
 8007436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800743a:	e224      	b.n	8007886 <UART_SetConfig+0x7ae>
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4ab1      	ldr	r2, [pc, #708]	; (8007708 <UART_SetConfig+0x630>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d176      	bne.n	8007534 <UART_SetConfig+0x45c>
 8007446:	4bb1      	ldr	r3, [pc, #708]	; (800770c <UART_SetConfig+0x634>)
 8007448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800744e:	2b28      	cmp	r3, #40	; 0x28
 8007450:	d86c      	bhi.n	800752c <UART_SetConfig+0x454>
 8007452:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <UART_SetConfig+0x380>)
 8007454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007458:	080074fd 	.word	0x080074fd
 800745c:	0800752d 	.word	0x0800752d
 8007460:	0800752d 	.word	0x0800752d
 8007464:	0800752d 	.word	0x0800752d
 8007468:	0800752d 	.word	0x0800752d
 800746c:	0800752d 	.word	0x0800752d
 8007470:	0800752d 	.word	0x0800752d
 8007474:	0800752d 	.word	0x0800752d
 8007478:	08007505 	.word	0x08007505
 800747c:	0800752d 	.word	0x0800752d
 8007480:	0800752d 	.word	0x0800752d
 8007484:	0800752d 	.word	0x0800752d
 8007488:	0800752d 	.word	0x0800752d
 800748c:	0800752d 	.word	0x0800752d
 8007490:	0800752d 	.word	0x0800752d
 8007494:	0800752d 	.word	0x0800752d
 8007498:	0800750d 	.word	0x0800750d
 800749c:	0800752d 	.word	0x0800752d
 80074a0:	0800752d 	.word	0x0800752d
 80074a4:	0800752d 	.word	0x0800752d
 80074a8:	0800752d 	.word	0x0800752d
 80074ac:	0800752d 	.word	0x0800752d
 80074b0:	0800752d 	.word	0x0800752d
 80074b4:	0800752d 	.word	0x0800752d
 80074b8:	08007515 	.word	0x08007515
 80074bc:	0800752d 	.word	0x0800752d
 80074c0:	0800752d 	.word	0x0800752d
 80074c4:	0800752d 	.word	0x0800752d
 80074c8:	0800752d 	.word	0x0800752d
 80074cc:	0800752d 	.word	0x0800752d
 80074d0:	0800752d 	.word	0x0800752d
 80074d4:	0800752d 	.word	0x0800752d
 80074d8:	0800751d 	.word	0x0800751d
 80074dc:	0800752d 	.word	0x0800752d
 80074e0:	0800752d 	.word	0x0800752d
 80074e4:	0800752d 	.word	0x0800752d
 80074e8:	0800752d 	.word	0x0800752d
 80074ec:	0800752d 	.word	0x0800752d
 80074f0:	0800752d 	.word	0x0800752d
 80074f4:	0800752d 	.word	0x0800752d
 80074f8:	08007525 	.word	0x08007525
 80074fc:	2301      	movs	r3, #1
 80074fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007502:	e1c0      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007504:	2304      	movs	r3, #4
 8007506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750a:	e1bc      	b.n	8007886 <UART_SetConfig+0x7ae>
 800750c:	2308      	movs	r3, #8
 800750e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007512:	e1b8      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007514:	2310      	movs	r3, #16
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800751a:	e1b4      	b.n	8007886 <UART_SetConfig+0x7ae>
 800751c:	2320      	movs	r3, #32
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007522:	e1b0      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007524:	2340      	movs	r3, #64	; 0x40
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800752a:	e1ac      	b.n	8007886 <UART_SetConfig+0x7ae>
 800752c:	2380      	movs	r3, #128	; 0x80
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007532:	e1a8      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a75      	ldr	r2, [pc, #468]	; (8007710 <UART_SetConfig+0x638>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d130      	bne.n	80075a0 <UART_SetConfig+0x4c8>
 800753e:	4b73      	ldr	r3, [pc, #460]	; (800770c <UART_SetConfig+0x634>)
 8007540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007542:	f003 0307 	and.w	r3, r3, #7
 8007546:	2b05      	cmp	r3, #5
 8007548:	d826      	bhi.n	8007598 <UART_SetConfig+0x4c0>
 800754a:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <UART_SetConfig+0x478>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	08007569 	.word	0x08007569
 8007554:	08007571 	.word	0x08007571
 8007558:	08007579 	.word	0x08007579
 800755c:	08007581 	.word	0x08007581
 8007560:	08007589 	.word	0x08007589
 8007564:	08007591 	.word	0x08007591
 8007568:	2300      	movs	r3, #0
 800756a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800756e:	e18a      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007570:	2304      	movs	r3, #4
 8007572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007576:	e186      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007578:	2308      	movs	r3, #8
 800757a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800757e:	e182      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007580:	2310      	movs	r3, #16
 8007582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007586:	e17e      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007588:	2320      	movs	r3, #32
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800758e:	e17a      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007590:	2340      	movs	r3, #64	; 0x40
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007596:	e176      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007598:	2380      	movs	r3, #128	; 0x80
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800759e:	e172      	b.n	8007886 <UART_SetConfig+0x7ae>
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a5b      	ldr	r2, [pc, #364]	; (8007714 <UART_SetConfig+0x63c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d130      	bne.n	800760c <UART_SetConfig+0x534>
 80075aa:	4b58      	ldr	r3, [pc, #352]	; (800770c <UART_SetConfig+0x634>)
 80075ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ae:	f003 0307 	and.w	r3, r3, #7
 80075b2:	2b05      	cmp	r3, #5
 80075b4:	d826      	bhi.n	8007604 <UART_SetConfig+0x52c>
 80075b6:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <UART_SetConfig+0x4e4>)
 80075b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075bc:	080075d5 	.word	0x080075d5
 80075c0:	080075dd 	.word	0x080075dd
 80075c4:	080075e5 	.word	0x080075e5
 80075c8:	080075ed 	.word	0x080075ed
 80075cc:	080075f5 	.word	0x080075f5
 80075d0:	080075fd 	.word	0x080075fd
 80075d4:	2300      	movs	r3, #0
 80075d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075da:	e154      	b.n	8007886 <UART_SetConfig+0x7ae>
 80075dc:	2304      	movs	r3, #4
 80075de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075e2:	e150      	b.n	8007886 <UART_SetConfig+0x7ae>
 80075e4:	2308      	movs	r3, #8
 80075e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ea:	e14c      	b.n	8007886 <UART_SetConfig+0x7ae>
 80075ec:	2310      	movs	r3, #16
 80075ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075f2:	e148      	b.n	8007886 <UART_SetConfig+0x7ae>
 80075f4:	2320      	movs	r3, #32
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075fa:	e144      	b.n	8007886 <UART_SetConfig+0x7ae>
 80075fc:	2340      	movs	r3, #64	; 0x40
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007602:	e140      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007604:	2380      	movs	r3, #128	; 0x80
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800760a:	e13c      	b.n	8007886 <UART_SetConfig+0x7ae>
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a41      	ldr	r2, [pc, #260]	; (8007718 <UART_SetConfig+0x640>)
 8007612:	4293      	cmp	r3, r2
 8007614:	f040 8082 	bne.w	800771c <UART_SetConfig+0x644>
 8007618:	4b3c      	ldr	r3, [pc, #240]	; (800770c <UART_SetConfig+0x634>)
 800761a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800761c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007620:	2b28      	cmp	r3, #40	; 0x28
 8007622:	d86d      	bhi.n	8007700 <UART_SetConfig+0x628>
 8007624:	a201      	add	r2, pc, #4	; (adr r2, 800762c <UART_SetConfig+0x554>)
 8007626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762a:	bf00      	nop
 800762c:	080076d1 	.word	0x080076d1
 8007630:	08007701 	.word	0x08007701
 8007634:	08007701 	.word	0x08007701
 8007638:	08007701 	.word	0x08007701
 800763c:	08007701 	.word	0x08007701
 8007640:	08007701 	.word	0x08007701
 8007644:	08007701 	.word	0x08007701
 8007648:	08007701 	.word	0x08007701
 800764c:	080076d9 	.word	0x080076d9
 8007650:	08007701 	.word	0x08007701
 8007654:	08007701 	.word	0x08007701
 8007658:	08007701 	.word	0x08007701
 800765c:	08007701 	.word	0x08007701
 8007660:	08007701 	.word	0x08007701
 8007664:	08007701 	.word	0x08007701
 8007668:	08007701 	.word	0x08007701
 800766c:	080076e1 	.word	0x080076e1
 8007670:	08007701 	.word	0x08007701
 8007674:	08007701 	.word	0x08007701
 8007678:	08007701 	.word	0x08007701
 800767c:	08007701 	.word	0x08007701
 8007680:	08007701 	.word	0x08007701
 8007684:	08007701 	.word	0x08007701
 8007688:	08007701 	.word	0x08007701
 800768c:	080076e9 	.word	0x080076e9
 8007690:	08007701 	.word	0x08007701
 8007694:	08007701 	.word	0x08007701
 8007698:	08007701 	.word	0x08007701
 800769c:	08007701 	.word	0x08007701
 80076a0:	08007701 	.word	0x08007701
 80076a4:	08007701 	.word	0x08007701
 80076a8:	08007701 	.word	0x08007701
 80076ac:	080076f1 	.word	0x080076f1
 80076b0:	08007701 	.word	0x08007701
 80076b4:	08007701 	.word	0x08007701
 80076b8:	08007701 	.word	0x08007701
 80076bc:	08007701 	.word	0x08007701
 80076c0:	08007701 	.word	0x08007701
 80076c4:	08007701 	.word	0x08007701
 80076c8:	08007701 	.word	0x08007701
 80076cc:	080076f9 	.word	0x080076f9
 80076d0:	2301      	movs	r3, #1
 80076d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076d6:	e0d6      	b.n	8007886 <UART_SetConfig+0x7ae>
 80076d8:	2304      	movs	r3, #4
 80076da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076de:	e0d2      	b.n	8007886 <UART_SetConfig+0x7ae>
 80076e0:	2308      	movs	r3, #8
 80076e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076e6:	e0ce      	b.n	8007886 <UART_SetConfig+0x7ae>
 80076e8:	2310      	movs	r3, #16
 80076ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076ee:	e0ca      	b.n	8007886 <UART_SetConfig+0x7ae>
 80076f0:	2320      	movs	r3, #32
 80076f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076f6:	e0c6      	b.n	8007886 <UART_SetConfig+0x7ae>
 80076f8:	2340      	movs	r3, #64	; 0x40
 80076fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076fe:	e0c2      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007700:	2380      	movs	r3, #128	; 0x80
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007706:	e0be      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007708:	40011400 	.word	0x40011400
 800770c:	58024400 	.word	0x58024400
 8007710:	40007800 	.word	0x40007800
 8007714:	40007c00 	.word	0x40007c00
 8007718:	40011800 	.word	0x40011800
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4aad      	ldr	r2, [pc, #692]	; (80079d8 <UART_SetConfig+0x900>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d176      	bne.n	8007814 <UART_SetConfig+0x73c>
 8007726:	4bad      	ldr	r3, [pc, #692]	; (80079dc <UART_SetConfig+0x904>)
 8007728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800772e:	2b28      	cmp	r3, #40	; 0x28
 8007730:	d86c      	bhi.n	800780c <UART_SetConfig+0x734>
 8007732:	a201      	add	r2, pc, #4	; (adr r2, 8007738 <UART_SetConfig+0x660>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	080077dd 	.word	0x080077dd
 800773c:	0800780d 	.word	0x0800780d
 8007740:	0800780d 	.word	0x0800780d
 8007744:	0800780d 	.word	0x0800780d
 8007748:	0800780d 	.word	0x0800780d
 800774c:	0800780d 	.word	0x0800780d
 8007750:	0800780d 	.word	0x0800780d
 8007754:	0800780d 	.word	0x0800780d
 8007758:	080077e5 	.word	0x080077e5
 800775c:	0800780d 	.word	0x0800780d
 8007760:	0800780d 	.word	0x0800780d
 8007764:	0800780d 	.word	0x0800780d
 8007768:	0800780d 	.word	0x0800780d
 800776c:	0800780d 	.word	0x0800780d
 8007770:	0800780d 	.word	0x0800780d
 8007774:	0800780d 	.word	0x0800780d
 8007778:	080077ed 	.word	0x080077ed
 800777c:	0800780d 	.word	0x0800780d
 8007780:	0800780d 	.word	0x0800780d
 8007784:	0800780d 	.word	0x0800780d
 8007788:	0800780d 	.word	0x0800780d
 800778c:	0800780d 	.word	0x0800780d
 8007790:	0800780d 	.word	0x0800780d
 8007794:	0800780d 	.word	0x0800780d
 8007798:	080077f5 	.word	0x080077f5
 800779c:	0800780d 	.word	0x0800780d
 80077a0:	0800780d 	.word	0x0800780d
 80077a4:	0800780d 	.word	0x0800780d
 80077a8:	0800780d 	.word	0x0800780d
 80077ac:	0800780d 	.word	0x0800780d
 80077b0:	0800780d 	.word	0x0800780d
 80077b4:	0800780d 	.word	0x0800780d
 80077b8:	080077fd 	.word	0x080077fd
 80077bc:	0800780d 	.word	0x0800780d
 80077c0:	0800780d 	.word	0x0800780d
 80077c4:	0800780d 	.word	0x0800780d
 80077c8:	0800780d 	.word	0x0800780d
 80077cc:	0800780d 	.word	0x0800780d
 80077d0:	0800780d 	.word	0x0800780d
 80077d4:	0800780d 	.word	0x0800780d
 80077d8:	08007805 	.word	0x08007805
 80077dc:	2301      	movs	r3, #1
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077e2:	e050      	b.n	8007886 <UART_SetConfig+0x7ae>
 80077e4:	2304      	movs	r3, #4
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ea:	e04c      	b.n	8007886 <UART_SetConfig+0x7ae>
 80077ec:	2308      	movs	r3, #8
 80077ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077f2:	e048      	b.n	8007886 <UART_SetConfig+0x7ae>
 80077f4:	2310      	movs	r3, #16
 80077f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077fa:	e044      	b.n	8007886 <UART_SetConfig+0x7ae>
 80077fc:	2320      	movs	r3, #32
 80077fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007802:	e040      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007804:	2340      	movs	r3, #64	; 0x40
 8007806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800780a:	e03c      	b.n	8007886 <UART_SetConfig+0x7ae>
 800780c:	2380      	movs	r3, #128	; 0x80
 800780e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007812:	e038      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a71      	ldr	r2, [pc, #452]	; (80079e0 <UART_SetConfig+0x908>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d130      	bne.n	8007880 <UART_SetConfig+0x7a8>
 800781e:	4b6f      	ldr	r3, [pc, #444]	; (80079dc <UART_SetConfig+0x904>)
 8007820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007822:	f003 0307 	and.w	r3, r3, #7
 8007826:	2b05      	cmp	r3, #5
 8007828:	d826      	bhi.n	8007878 <UART_SetConfig+0x7a0>
 800782a:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <UART_SetConfig+0x758>)
 800782c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007830:	08007849 	.word	0x08007849
 8007834:	08007851 	.word	0x08007851
 8007838:	08007859 	.word	0x08007859
 800783c:	08007861 	.word	0x08007861
 8007840:	08007869 	.word	0x08007869
 8007844:	08007871 	.word	0x08007871
 8007848:	2302      	movs	r3, #2
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800784e:	e01a      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007850:	2304      	movs	r3, #4
 8007852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007856:	e016      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007858:	2308      	movs	r3, #8
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800785e:	e012      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007860:	2310      	movs	r3, #16
 8007862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007866:	e00e      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007868:	2320      	movs	r3, #32
 800786a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800786e:	e00a      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007870:	2340      	movs	r3, #64	; 0x40
 8007872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007876:	e006      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007878:	2380      	movs	r3, #128	; 0x80
 800787a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800787e:	e002      	b.n	8007886 <UART_SetConfig+0x7ae>
 8007880:	2380      	movs	r3, #128	; 0x80
 8007882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a55      	ldr	r2, [pc, #340]	; (80079e0 <UART_SetConfig+0x908>)
 800788c:	4293      	cmp	r3, r2
 800788e:	f040 80f8 	bne.w	8007a82 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007892:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007896:	2b20      	cmp	r3, #32
 8007898:	dc46      	bgt.n	8007928 <UART_SetConfig+0x850>
 800789a:	2b02      	cmp	r3, #2
 800789c:	db75      	blt.n	800798a <UART_SetConfig+0x8b2>
 800789e:	3b02      	subs	r3, #2
 80078a0:	2b1e      	cmp	r3, #30
 80078a2:	d872      	bhi.n	800798a <UART_SetConfig+0x8b2>
 80078a4:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <UART_SetConfig+0x7d4>)
 80078a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078aa:	bf00      	nop
 80078ac:	0800792f 	.word	0x0800792f
 80078b0:	0800798b 	.word	0x0800798b
 80078b4:	08007937 	.word	0x08007937
 80078b8:	0800798b 	.word	0x0800798b
 80078bc:	0800798b 	.word	0x0800798b
 80078c0:	0800798b 	.word	0x0800798b
 80078c4:	08007947 	.word	0x08007947
 80078c8:	0800798b 	.word	0x0800798b
 80078cc:	0800798b 	.word	0x0800798b
 80078d0:	0800798b 	.word	0x0800798b
 80078d4:	0800798b 	.word	0x0800798b
 80078d8:	0800798b 	.word	0x0800798b
 80078dc:	0800798b 	.word	0x0800798b
 80078e0:	0800798b 	.word	0x0800798b
 80078e4:	08007957 	.word	0x08007957
 80078e8:	0800798b 	.word	0x0800798b
 80078ec:	0800798b 	.word	0x0800798b
 80078f0:	0800798b 	.word	0x0800798b
 80078f4:	0800798b 	.word	0x0800798b
 80078f8:	0800798b 	.word	0x0800798b
 80078fc:	0800798b 	.word	0x0800798b
 8007900:	0800798b 	.word	0x0800798b
 8007904:	0800798b 	.word	0x0800798b
 8007908:	0800798b 	.word	0x0800798b
 800790c:	0800798b 	.word	0x0800798b
 8007910:	0800798b 	.word	0x0800798b
 8007914:	0800798b 	.word	0x0800798b
 8007918:	0800798b 	.word	0x0800798b
 800791c:	0800798b 	.word	0x0800798b
 8007920:	0800798b 	.word	0x0800798b
 8007924:	0800797d 	.word	0x0800797d
 8007928:	2b40      	cmp	r3, #64	; 0x40
 800792a:	d02a      	beq.n	8007982 <UART_SetConfig+0x8aa>
 800792c:	e02d      	b.n	800798a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800792e:	f7fd fa19 	bl	8004d64 <HAL_RCCEx_GetD3PCLK1Freq>
 8007932:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007934:	e02f      	b.n	8007996 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800793a:	4618      	mov	r0, r3
 800793c:	f7fd fa28 	bl	8004d90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007944:	e027      	b.n	8007996 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007946:	f107 0318 	add.w	r3, r7, #24
 800794a:	4618      	mov	r0, r3
 800794c:	f7fd fb74 	bl	8005038 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007954:	e01f      	b.n	8007996 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007956:	4b21      	ldr	r3, [pc, #132]	; (80079dc <UART_SetConfig+0x904>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0320 	and.w	r3, r3, #32
 800795e:	2b00      	cmp	r3, #0
 8007960:	d009      	beq.n	8007976 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007962:	4b1e      	ldr	r3, [pc, #120]	; (80079dc <UART_SetConfig+0x904>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	08db      	lsrs	r3, r3, #3
 8007968:	f003 0303 	and.w	r3, r3, #3
 800796c:	4a1d      	ldr	r2, [pc, #116]	; (80079e4 <UART_SetConfig+0x90c>)
 800796e:	fa22 f303 	lsr.w	r3, r2, r3
 8007972:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007974:	e00f      	b.n	8007996 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007976:	4b1b      	ldr	r3, [pc, #108]	; (80079e4 <UART_SetConfig+0x90c>)
 8007978:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800797a:	e00c      	b.n	8007996 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800797c:	4b1a      	ldr	r3, [pc, #104]	; (80079e8 <UART_SetConfig+0x910>)
 800797e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007980:	e009      	b.n	8007996 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007988:	e005      	b.n	8007996 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007994:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 81ee 	beq.w	8007d7a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	4a12      	ldr	r2, [pc, #72]	; (80079ec <UART_SetConfig+0x914>)
 80079a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079a8:	461a      	mov	r2, r3
 80079aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80079b0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	685a      	ldr	r2, [r3, #4]
 80079b6:	4613      	mov	r3, r2
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	4413      	add	r3, r2
 80079bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079be:	429a      	cmp	r2, r3
 80079c0:	d305      	bcc.n	80079ce <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d910      	bls.n	80079f0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80079d4:	e1d1      	b.n	8007d7a <UART_SetConfig+0xca2>
 80079d6:	bf00      	nop
 80079d8:	40011c00 	.word	0x40011c00
 80079dc:	58024400 	.word	0x58024400
 80079e0:	58000c00 	.word	0x58000c00
 80079e4:	03d09000 	.word	0x03d09000
 80079e8:	003d0900 	.word	0x003d0900
 80079ec:	08009b08 	.word	0x08009b08
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f2:	2200      	movs	r2, #0
 80079f4:	60bb      	str	r3, [r7, #8]
 80079f6:	60fa      	str	r2, [r7, #12]
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fc:	4ac0      	ldr	r2, [pc, #768]	; (8007d00 <UART_SetConfig+0xc28>)
 80079fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	2200      	movs	r2, #0
 8007a06:	603b      	str	r3, [r7, #0]
 8007a08:	607a      	str	r2, [r7, #4]
 8007a0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a12:	f7f8 fcbd 	bl	8000390 <__aeabi_uldivmod>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	f04f 0200 	mov.w	r2, #0
 8007a22:	f04f 0300 	mov.w	r3, #0
 8007a26:	020b      	lsls	r3, r1, #8
 8007a28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a2c:	0202      	lsls	r2, r0, #8
 8007a2e:	6979      	ldr	r1, [r7, #20]
 8007a30:	6849      	ldr	r1, [r1, #4]
 8007a32:	0849      	lsrs	r1, r1, #1
 8007a34:	2000      	movs	r0, #0
 8007a36:	460c      	mov	r4, r1
 8007a38:	4605      	mov	r5, r0
 8007a3a:	eb12 0804 	adds.w	r8, r2, r4
 8007a3e:	eb43 0905 	adc.w	r9, r3, r5
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	469a      	mov	sl, r3
 8007a4a:	4693      	mov	fp, r2
 8007a4c:	4652      	mov	r2, sl
 8007a4e:	465b      	mov	r3, fp
 8007a50:	4640      	mov	r0, r8
 8007a52:	4649      	mov	r1, r9
 8007a54:	f7f8 fc9c 	bl	8000390 <__aeabi_uldivmod>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a66:	d308      	bcc.n	8007a7a <UART_SetConfig+0x9a2>
 8007a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a6e:	d204      	bcs.n	8007a7a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a76:	60da      	str	r2, [r3, #12]
 8007a78:	e17f      	b.n	8007d7a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007a80:	e17b      	b.n	8007d7a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a8a:	f040 80bd 	bne.w	8007c08 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007a8e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a92:	2b20      	cmp	r3, #32
 8007a94:	dc48      	bgt.n	8007b28 <UART_SetConfig+0xa50>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	db7b      	blt.n	8007b92 <UART_SetConfig+0xaba>
 8007a9a:	2b20      	cmp	r3, #32
 8007a9c:	d879      	bhi.n	8007b92 <UART_SetConfig+0xaba>
 8007a9e:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <UART_SetConfig+0x9cc>)
 8007aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa4:	08007b2f 	.word	0x08007b2f
 8007aa8:	08007b37 	.word	0x08007b37
 8007aac:	08007b93 	.word	0x08007b93
 8007ab0:	08007b93 	.word	0x08007b93
 8007ab4:	08007b3f 	.word	0x08007b3f
 8007ab8:	08007b93 	.word	0x08007b93
 8007abc:	08007b93 	.word	0x08007b93
 8007ac0:	08007b93 	.word	0x08007b93
 8007ac4:	08007b4f 	.word	0x08007b4f
 8007ac8:	08007b93 	.word	0x08007b93
 8007acc:	08007b93 	.word	0x08007b93
 8007ad0:	08007b93 	.word	0x08007b93
 8007ad4:	08007b93 	.word	0x08007b93
 8007ad8:	08007b93 	.word	0x08007b93
 8007adc:	08007b93 	.word	0x08007b93
 8007ae0:	08007b93 	.word	0x08007b93
 8007ae4:	08007b5f 	.word	0x08007b5f
 8007ae8:	08007b93 	.word	0x08007b93
 8007aec:	08007b93 	.word	0x08007b93
 8007af0:	08007b93 	.word	0x08007b93
 8007af4:	08007b93 	.word	0x08007b93
 8007af8:	08007b93 	.word	0x08007b93
 8007afc:	08007b93 	.word	0x08007b93
 8007b00:	08007b93 	.word	0x08007b93
 8007b04:	08007b93 	.word	0x08007b93
 8007b08:	08007b93 	.word	0x08007b93
 8007b0c:	08007b93 	.word	0x08007b93
 8007b10:	08007b93 	.word	0x08007b93
 8007b14:	08007b93 	.word	0x08007b93
 8007b18:	08007b93 	.word	0x08007b93
 8007b1c:	08007b93 	.word	0x08007b93
 8007b20:	08007b93 	.word	0x08007b93
 8007b24:	08007b85 	.word	0x08007b85
 8007b28:	2b40      	cmp	r3, #64	; 0x40
 8007b2a:	d02e      	beq.n	8007b8a <UART_SetConfig+0xab2>
 8007b2c:	e031      	b.n	8007b92 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b2e:	f7fb ff2f 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8007b32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007b34:	e033      	b.n	8007b9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b36:	f7fb ff41 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
 8007b3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007b3c:	e02f      	b.n	8007b9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fd f924 	bl	8004d90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b4c:	e027      	b.n	8007b9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b4e:	f107 0318 	add.w	r3, r7, #24
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fd fa70 	bl	8005038 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b5c:	e01f      	b.n	8007b9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b5e:	4b69      	ldr	r3, [pc, #420]	; (8007d04 <UART_SetConfig+0xc2c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0320 	and.w	r3, r3, #32
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d009      	beq.n	8007b7e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b6a:	4b66      	ldr	r3, [pc, #408]	; (8007d04 <UART_SetConfig+0xc2c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	08db      	lsrs	r3, r3, #3
 8007b70:	f003 0303 	and.w	r3, r3, #3
 8007b74:	4a64      	ldr	r2, [pc, #400]	; (8007d08 <UART_SetConfig+0xc30>)
 8007b76:	fa22 f303 	lsr.w	r3, r2, r3
 8007b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b7c:	e00f      	b.n	8007b9e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007b7e:	4b62      	ldr	r3, [pc, #392]	; (8007d08 <UART_SetConfig+0xc30>)
 8007b80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b82:	e00c      	b.n	8007b9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b84:	4b61      	ldr	r3, [pc, #388]	; (8007d0c <UART_SetConfig+0xc34>)
 8007b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b88:	e009      	b.n	8007b9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b90:	e005      	b.n	8007b9e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007b92:	2300      	movs	r3, #0
 8007b94:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007b9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 80ea 	beq.w	8007d7a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	4a55      	ldr	r2, [pc, #340]	; (8007d00 <UART_SetConfig+0xc28>)
 8007bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bb8:	005a      	lsls	r2, r3, #1
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	085b      	lsrs	r3, r3, #1
 8007bc0:	441a      	add	r2, r3
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bce:	2b0f      	cmp	r3, #15
 8007bd0:	d916      	bls.n	8007c00 <UART_SetConfig+0xb28>
 8007bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bd8:	d212      	bcs.n	8007c00 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	f023 030f 	bic.w	r3, r3, #15
 8007be2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be6:	085b      	lsrs	r3, r3, #1
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	f003 0307 	and.w	r3, r3, #7
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007bfc:	60da      	str	r2, [r3, #12]
 8007bfe:	e0bc      	b.n	8007d7a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007c06:	e0b8      	b.n	8007d7a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007c0c:	2b20      	cmp	r3, #32
 8007c0e:	dc4b      	bgt.n	8007ca8 <UART_SetConfig+0xbd0>
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f2c0 8087 	blt.w	8007d24 <UART_SetConfig+0xc4c>
 8007c16:	2b20      	cmp	r3, #32
 8007c18:	f200 8084 	bhi.w	8007d24 <UART_SetConfig+0xc4c>
 8007c1c:	a201      	add	r2, pc, #4	; (adr r2, 8007c24 <UART_SetConfig+0xb4c>)
 8007c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c22:	bf00      	nop
 8007c24:	08007caf 	.word	0x08007caf
 8007c28:	08007cb7 	.word	0x08007cb7
 8007c2c:	08007d25 	.word	0x08007d25
 8007c30:	08007d25 	.word	0x08007d25
 8007c34:	08007cbf 	.word	0x08007cbf
 8007c38:	08007d25 	.word	0x08007d25
 8007c3c:	08007d25 	.word	0x08007d25
 8007c40:	08007d25 	.word	0x08007d25
 8007c44:	08007ccf 	.word	0x08007ccf
 8007c48:	08007d25 	.word	0x08007d25
 8007c4c:	08007d25 	.word	0x08007d25
 8007c50:	08007d25 	.word	0x08007d25
 8007c54:	08007d25 	.word	0x08007d25
 8007c58:	08007d25 	.word	0x08007d25
 8007c5c:	08007d25 	.word	0x08007d25
 8007c60:	08007d25 	.word	0x08007d25
 8007c64:	08007cdf 	.word	0x08007cdf
 8007c68:	08007d25 	.word	0x08007d25
 8007c6c:	08007d25 	.word	0x08007d25
 8007c70:	08007d25 	.word	0x08007d25
 8007c74:	08007d25 	.word	0x08007d25
 8007c78:	08007d25 	.word	0x08007d25
 8007c7c:	08007d25 	.word	0x08007d25
 8007c80:	08007d25 	.word	0x08007d25
 8007c84:	08007d25 	.word	0x08007d25
 8007c88:	08007d25 	.word	0x08007d25
 8007c8c:	08007d25 	.word	0x08007d25
 8007c90:	08007d25 	.word	0x08007d25
 8007c94:	08007d25 	.word	0x08007d25
 8007c98:	08007d25 	.word	0x08007d25
 8007c9c:	08007d25 	.word	0x08007d25
 8007ca0:	08007d25 	.word	0x08007d25
 8007ca4:	08007d17 	.word	0x08007d17
 8007ca8:	2b40      	cmp	r3, #64	; 0x40
 8007caa:	d037      	beq.n	8007d1c <UART_SetConfig+0xc44>
 8007cac:	e03a      	b.n	8007d24 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cae:	f7fb fe6f 	bl	8003990 <HAL_RCC_GetPCLK1Freq>
 8007cb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007cb4:	e03c      	b.n	8007d30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cb6:	f7fb fe81 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
 8007cba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007cbc:	e038      	b.n	8007d30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fd f864 	bl	8004d90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ccc:	e030      	b.n	8007d30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cce:	f107 0318 	add.w	r3, r7, #24
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fd f9b0 	bl	8005038 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cdc:	e028      	b.n	8007d30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cde:	4b09      	ldr	r3, [pc, #36]	; (8007d04 <UART_SetConfig+0xc2c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0320 	and.w	r3, r3, #32
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d012      	beq.n	8007d10 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cea:	4b06      	ldr	r3, [pc, #24]	; (8007d04 <UART_SetConfig+0xc2c>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	08db      	lsrs	r3, r3, #3
 8007cf0:	f003 0303 	and.w	r3, r3, #3
 8007cf4:	4a04      	ldr	r2, [pc, #16]	; (8007d08 <UART_SetConfig+0xc30>)
 8007cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007cfc:	e018      	b.n	8007d30 <UART_SetConfig+0xc58>
 8007cfe:	bf00      	nop
 8007d00:	08009b08 	.word	0x08009b08
 8007d04:	58024400 	.word	0x58024400
 8007d08:	03d09000 	.word	0x03d09000
 8007d0c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007d10:	4b24      	ldr	r3, [pc, #144]	; (8007da4 <UART_SetConfig+0xccc>)
 8007d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d14:	e00c      	b.n	8007d30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d16:	4b24      	ldr	r3, [pc, #144]	; (8007da8 <UART_SetConfig+0xcd0>)
 8007d18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d1a:	e009      	b.n	8007d30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d22:	e005      	b.n	8007d30 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007d2e:	bf00      	nop
    }

    if (pclk != 0U)
 8007d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d021      	beq.n	8007d7a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	4a1c      	ldr	r2, [pc, #112]	; (8007dac <UART_SetConfig+0xcd4>)
 8007d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d40:	461a      	mov	r2, r3
 8007d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d44:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	085b      	lsrs	r3, r3, #1
 8007d4e:	441a      	add	r2, r3
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d58:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5c:	2b0f      	cmp	r3, #15
 8007d5e:	d909      	bls.n	8007d74 <UART_SetConfig+0xc9c>
 8007d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d66:	d205      	bcs.n	8007d74 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	60da      	str	r2, [r3, #12]
 8007d72:	e002      	b.n	8007d7a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	2200      	movs	r2, #0
 8007d94:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007d96:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3748      	adds	r7, #72	; 0x48
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007da4:	03d09000 	.word	0x03d09000
 8007da8:	003d0900 	.word	0x003d0900
 8007dac:	08009b08 	.word	0x08009b08

08007db0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dbc:	f003 0301 	and.w	r3, r3, #1
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00a      	beq.n	8007dda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00a      	beq.n	8007dfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e00:	f003 0304 	and.w	r3, r3, #4
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00a      	beq.n	8007e1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e22:	f003 0308 	and.w	r3, r3, #8
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00a      	beq.n	8007e40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e44:	f003 0310 	and.w	r3, r3, #16
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00a      	beq.n	8007e62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e66:	f003 0320 	and.w	r3, r3, #32
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00a      	beq.n	8007e84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	430a      	orrs	r2, r1
 8007e82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d01a      	beq.n	8007ec6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eae:	d10a      	bne.n	8007ec6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00a      	beq.n	8007ee8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	605a      	str	r2, [r3, #4]
  }
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b098      	sub	sp, #96	; 0x60
 8007ef8:	af02      	add	r7, sp, #8
 8007efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f04:	f7f9 fcd0 	bl	80018a8 <HAL_GetTick>
 8007f08:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 0308 	and.w	r3, r3, #8
 8007f14:	2b08      	cmp	r3, #8
 8007f16:	d12f      	bne.n	8007f78 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f20:	2200      	movs	r2, #0
 8007f22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f88e 	bl	8008048 <UART_WaitOnFlagUntilTimeout>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d022      	beq.n	8007f78 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3a:	e853 3f00 	ldrex	r3, [r3]
 8007f3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f46:	653b      	str	r3, [r7, #80]	; 0x50
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f50:	647b      	str	r3, [r7, #68]	; 0x44
 8007f52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f58:	e841 2300 	strex	r3, r2, [r1]
 8007f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1e6      	bne.n	8007f32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2220      	movs	r2, #32
 8007f68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e063      	b.n	8008040 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0304 	and.w	r3, r3, #4
 8007f82:	2b04      	cmp	r3, #4
 8007f84:	d149      	bne.n	800801a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f857 	bl	8008048 <UART_WaitOnFlagUntilTimeout>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d03c      	beq.n	800801a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	623b      	str	r3, [r7, #32]
   return(result);
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fbe:	633b      	str	r3, [r7, #48]	; 0x30
 8007fc0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1e6      	bne.n	8007fa0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	3308      	adds	r3, #8
 8007fd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	e853 3f00 	ldrex	r3, [r3]
 8007fe0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f023 0301 	bic.w	r3, r3, #1
 8007fe8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	3308      	adds	r3, #8
 8007ff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ff2:	61fa      	str	r2, [r7, #28]
 8007ff4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff6:	69b9      	ldr	r1, [r7, #24]
 8007ff8:	69fa      	ldr	r2, [r7, #28]
 8007ffa:	e841 2300 	strex	r3, r2, [r1]
 8007ffe:	617b      	str	r3, [r7, #20]
   return(result);
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1e5      	bne.n	8007fd2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2220      	movs	r2, #32
 800800a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e012      	b.n	8008040 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2220      	movs	r2, #32
 800801e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2220      	movs	r2, #32
 8008026:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3758      	adds	r7, #88	; 0x58
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	603b      	str	r3, [r7, #0]
 8008054:	4613      	mov	r3, r2
 8008056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008058:	e049      	b.n	80080ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008060:	d045      	beq.n	80080ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008062:	f7f9 fc21 	bl	80018a8 <HAL_GetTick>
 8008066:	4602      	mov	r2, r0
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	429a      	cmp	r2, r3
 8008070:	d302      	bcc.n	8008078 <UART_WaitOnFlagUntilTimeout+0x30>
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e048      	b.n	800810e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0304 	and.w	r3, r3, #4
 8008086:	2b00      	cmp	r3, #0
 8008088:	d031      	beq.n	80080ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	69db      	ldr	r3, [r3, #28]
 8008090:	f003 0308 	and.w	r3, r3, #8
 8008094:	2b08      	cmp	r3, #8
 8008096:	d110      	bne.n	80080ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2208      	movs	r2, #8
 800809e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 f95b 	bl	800835c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2208      	movs	r2, #8
 80080aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e029      	b.n	800810e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	69db      	ldr	r3, [r3, #28]
 80080c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080c8:	d111      	bne.n	80080ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f000 f941 	bl	800835c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2220      	movs	r2, #32
 80080de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e00f      	b.n	800810e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	69da      	ldr	r2, [r3, #28]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	4013      	ands	r3, r2
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	bf0c      	ite	eq
 80080fe:	2301      	moveq	r3, #1
 8008100:	2300      	movne	r3, #0
 8008102:	b2db      	uxtb	r3, r3
 8008104:	461a      	mov	r2, r3
 8008106:	79fb      	ldrb	r3, [r7, #7]
 8008108:	429a      	cmp	r2, r3
 800810a:	d0a6      	beq.n	800805a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
	...

08008118 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008118:	b480      	push	{r7}
 800811a:	b0a3      	sub	sp, #140	; 0x8c
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	4613      	mov	r3, r2
 8008124:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	88fa      	ldrh	r2, [r7, #6]
 8008130:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	88fa      	ldrh	r2, [r7, #6]
 8008138:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800814a:	d10e      	bne.n	800816a <UART_Start_Receive_IT+0x52>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d105      	bne.n	8008160 <UART_Start_Receive_IT+0x48>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f240 12ff 	movw	r2, #511	; 0x1ff
 800815a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800815e:	e02d      	b.n	80081bc <UART_Start_Receive_IT+0xa4>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	22ff      	movs	r2, #255	; 0xff
 8008164:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008168:	e028      	b.n	80081bc <UART_Start_Receive_IT+0xa4>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10d      	bne.n	800818e <UART_Start_Receive_IT+0x76>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d104      	bne.n	8008184 <UART_Start_Receive_IT+0x6c>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	22ff      	movs	r2, #255	; 0xff
 800817e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008182:	e01b      	b.n	80081bc <UART_Start_Receive_IT+0xa4>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	227f      	movs	r2, #127	; 0x7f
 8008188:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800818c:	e016      	b.n	80081bc <UART_Start_Receive_IT+0xa4>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008196:	d10d      	bne.n	80081b4 <UART_Start_Receive_IT+0x9c>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d104      	bne.n	80081aa <UART_Start_Receive_IT+0x92>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	227f      	movs	r2, #127	; 0x7f
 80081a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80081a8:	e008      	b.n	80081bc <UART_Start_Receive_IT+0xa4>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	223f      	movs	r2, #63	; 0x3f
 80081ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80081b2:	e003      	b.n	80081bc <UART_Start_Receive_IT+0xa4>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2222      	movs	r2, #34	; 0x22
 80081c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	3308      	adds	r3, #8
 80081d2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081d6:	e853 3f00 	ldrex	r3, [r3]
 80081da:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80081dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081de:	f043 0301 	orr.w	r3, r3, #1
 80081e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3308      	adds	r3, #8
 80081ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80081f0:	673a      	str	r2, [r7, #112]	; 0x70
 80081f2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80081f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80081f8:	e841 2300 	strex	r3, r2, [r1]
 80081fc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80081fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1e3      	bne.n	80081cc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800820c:	d14f      	bne.n	80082ae <UART_Start_Receive_IT+0x196>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008214:	88fa      	ldrh	r2, [r7, #6]
 8008216:	429a      	cmp	r2, r3
 8008218:	d349      	bcc.n	80082ae <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008222:	d107      	bne.n	8008234 <UART_Start_Receive_IT+0x11c>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d103      	bne.n	8008234 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	4a47      	ldr	r2, [pc, #284]	; (800834c <UART_Start_Receive_IT+0x234>)
 8008230:	675a      	str	r2, [r3, #116]	; 0x74
 8008232:	e002      	b.n	800823a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	4a46      	ldr	r2, [pc, #280]	; (8008350 <UART_Start_Receive_IT+0x238>)
 8008238:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d01a      	beq.n	8008278 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800824a:	e853 3f00 	ldrex	r3, [r3]
 800824e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008256:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008264:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008266:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008268:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800826a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800826c:	e841 2300 	strex	r3, r2, [r1]
 8008270:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1e4      	bne.n	8008242 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3308      	adds	r3, #8
 800827e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008282:	e853 3f00 	ldrex	r3, [r3]
 8008286:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800828e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3308      	adds	r3, #8
 8008296:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008298:	64ba      	str	r2, [r7, #72]	; 0x48
 800829a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800829e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082a0:	e841 2300 	strex	r3, r2, [r1]
 80082a4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1e5      	bne.n	8008278 <UART_Start_Receive_IT+0x160>
 80082ac:	e046      	b.n	800833c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082b6:	d107      	bne.n	80082c8 <UART_Start_Receive_IT+0x1b0>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d103      	bne.n	80082c8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4a24      	ldr	r2, [pc, #144]	; (8008354 <UART_Start_Receive_IT+0x23c>)
 80082c4:	675a      	str	r2, [r3, #116]	; 0x74
 80082c6:	e002      	b.n	80082ce <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	4a23      	ldr	r2, [pc, #140]	; (8008358 <UART_Start_Receive_IT+0x240>)
 80082cc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d019      	beq.n	800830a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082de:	e853 3f00 	ldrex	r3, [r3]
 80082e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80082ea:	677b      	str	r3, [r7, #116]	; 0x74
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082f4:	637b      	str	r3, [r7, #52]	; 0x34
 80082f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e6      	bne.n	80082d6 <UART_Start_Receive_IT+0x1be>
 8008308:	e018      	b.n	800833c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	613b      	str	r3, [r7, #16]
   return(result);
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	f043 0320 	orr.w	r3, r3, #32
 800831e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	461a      	mov	r2, r3
 8008326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008328:	623b      	str	r3, [r7, #32]
 800832a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	69f9      	ldr	r1, [r7, #28]
 800832e:	6a3a      	ldr	r2, [r7, #32]
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	61bb      	str	r3, [r7, #24]
   return(result);
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e6      	bne.n	800830a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	378c      	adds	r7, #140	; 0x8c
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	08008b7d 	.word	0x08008b7d
 8008350:	0800881d 	.word	0x0800881d
 8008354:	08008665 	.word	0x08008665
 8008358:	080084ad 	.word	0x080084ad

0800835c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800835c:	b480      	push	{r7}
 800835e:	b095      	sub	sp, #84	; 0x54
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800836c:	e853 3f00 	ldrex	r3, [r3]
 8008370:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008374:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008378:	64fb      	str	r3, [r7, #76]	; 0x4c
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	461a      	mov	r2, r3
 8008380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008382:	643b      	str	r3, [r7, #64]	; 0x40
 8008384:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008386:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008388:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800838a:	e841 2300 	strex	r3, r2, [r1]
 800838e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1e6      	bne.n	8008364 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3308      	adds	r3, #8
 800839c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	e853 3f00 	ldrex	r3, [r3]
 80083a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80083a6:	69fa      	ldr	r2, [r7, #28]
 80083a8:	4b1e      	ldr	r3, [pc, #120]	; (8008424 <UART_EndRxTransfer+0xc8>)
 80083aa:	4013      	ands	r3, r2
 80083ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	3308      	adds	r3, #8
 80083b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083be:	e841 2300 	strex	r3, r2, [r1]
 80083c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1e5      	bne.n	8008396 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d118      	bne.n	8008404 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	e853 3f00 	ldrex	r3, [r3]
 80083de:	60bb      	str	r3, [r7, #8]
   return(result);
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	f023 0310 	bic.w	r3, r3, #16
 80083e6:	647b      	str	r3, [r7, #68]	; 0x44
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	461a      	mov	r2, r3
 80083ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083f0:	61bb      	str	r3, [r7, #24]
 80083f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f4:	6979      	ldr	r1, [r7, #20]
 80083f6:	69ba      	ldr	r2, [r7, #24]
 80083f8:	e841 2300 	strex	r3, r2, [r1]
 80083fc:	613b      	str	r3, [r7, #16]
   return(result);
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1e6      	bne.n	80083d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2220      	movs	r2, #32
 8008408:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008418:	bf00      	nop
 800841a:	3754      	adds	r7, #84	; 0x54
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr
 8008424:	effffffe 	.word	0xeffffffe

08008428 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008434:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f7fe fe30 	bl	80070ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800844c:	bf00      	nop
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	60bb      	str	r3, [r7, #8]
   return(result);
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008470:	61fb      	str	r3, [r7, #28]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	61bb      	str	r3, [r7, #24]
 800847c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	6979      	ldr	r1, [r7, #20]
 8008480:	69ba      	ldr	r2, [r7, #24]
 8008482:	e841 2300 	strex	r3, r2, [r1]
 8008486:	613b      	str	r3, [r7, #16]
   return(result);
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e6      	bne.n	800845c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2220      	movs	r2, #32
 8008492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7fe fdfb 	bl	8007098 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084a2:	bf00      	nop
 80084a4:	3720      	adds	r7, #32
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b09c      	sub	sp, #112	; 0x70
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80084ba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084c4:	2b22      	cmp	r3, #34	; 0x22
 80084c6:	f040 80be 	bne.w	8008646 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80084d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80084d8:	b2d9      	uxtb	r1, r3
 80084da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80084de:	b2da      	uxtb	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e4:	400a      	ands	r2, r1
 80084e6:	b2d2      	uxtb	r2, r2
 80084e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	3b01      	subs	r3, #1
 80084fe:	b29a      	uxth	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800850c:	b29b      	uxth	r3, r3
 800850e:	2b00      	cmp	r3, #0
 8008510:	f040 80a1 	bne.w	8008656 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800851c:	e853 3f00 	ldrex	r3, [r3]
 8008520:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008524:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008528:	66bb      	str	r3, [r7, #104]	; 0x68
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	461a      	mov	r2, r3
 8008530:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008532:	65bb      	str	r3, [r7, #88]	; 0x58
 8008534:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008536:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008538:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800853a:	e841 2300 	strex	r3, r2, [r1]
 800853e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1e6      	bne.n	8008514 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3308      	adds	r3, #8
 800854c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008550:	e853 3f00 	ldrex	r3, [r3]
 8008554:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008558:	f023 0301 	bic.w	r3, r3, #1
 800855c:	667b      	str	r3, [r7, #100]	; 0x64
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3308      	adds	r3, #8
 8008564:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008566:	647a      	str	r2, [r7, #68]	; 0x44
 8008568:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800856c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800856e:	e841 2300 	strex	r3, r2, [r1]
 8008572:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1e5      	bne.n	8008546 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2220      	movs	r2, #32
 800857e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a33      	ldr	r2, [pc, #204]	; (8008660 <UART_RxISR_8BIT+0x1b4>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d01f      	beq.n	80085d8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d018      	beq.n	80085d8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	e853 3f00 	ldrex	r3, [r3]
 80085b2:	623b      	str	r3, [r7, #32]
   return(result);
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085ba:	663b      	str	r3, [r7, #96]	; 0x60
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	461a      	mov	r2, r3
 80085c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085c4:	633b      	str	r3, [r7, #48]	; 0x30
 80085c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085cc:	e841 2300 	strex	r3, r2, [r1]
 80085d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1e6      	bne.n	80085a6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d12e      	bne.n	800863e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	e853 3f00 	ldrex	r3, [r3]
 80085f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 0310 	bic.w	r3, r3, #16
 80085fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	461a      	mov	r2, r3
 8008602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008604:	61fb      	str	r3, [r7, #28]
 8008606:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008608:	69b9      	ldr	r1, [r7, #24]
 800860a:	69fa      	ldr	r2, [r7, #28]
 800860c:	e841 2300 	strex	r3, r2, [r1]
 8008610:	617b      	str	r3, [r7, #20]
   return(result);
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1e6      	bne.n	80085e6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	f003 0310 	and.w	r3, r3, #16
 8008622:	2b10      	cmp	r3, #16
 8008624:	d103      	bne.n	800862e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2210      	movs	r2, #16
 800862c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008634:	4619      	mov	r1, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7fe fd42 	bl	80070c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800863c:	e00b      	b.n	8008656 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7f9 f864 	bl	800170c <HAL_UART_RxCpltCallback>
}
 8008644:	e007      	b.n	8008656 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	699a      	ldr	r2, [r3, #24]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f042 0208 	orr.w	r2, r2, #8
 8008654:	619a      	str	r2, [r3, #24]
}
 8008656:	bf00      	nop
 8008658:	3770      	adds	r7, #112	; 0x70
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	58000c00 	.word	0x58000c00

08008664 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b09c      	sub	sp, #112	; 0x70
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008672:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800867c:	2b22      	cmp	r3, #34	; 0x22
 800867e:	f040 80be 	bne.w	80087fe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008688:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008690:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008692:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008696:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800869a:	4013      	ands	r3, r2
 800869c:	b29a      	uxth	r2, r3
 800869e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086a6:	1c9a      	adds	r2, r3, #2
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	3b01      	subs	r3, #1
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f040 80a1 	bne.w	800880e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086d4:	e853 3f00 	ldrex	r3, [r3]
 80086d8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80086da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086e0:	667b      	str	r3, [r7, #100]	; 0x64
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086ea:	657b      	str	r3, [r7, #84]	; 0x54
 80086ec:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086f2:	e841 2300 	strex	r3, r2, [r1]
 80086f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1e6      	bne.n	80086cc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3308      	adds	r3, #8
 8008704:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008708:	e853 3f00 	ldrex	r3, [r3]
 800870c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008710:	f023 0301 	bic.w	r3, r3, #1
 8008714:	663b      	str	r3, [r7, #96]	; 0x60
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3308      	adds	r3, #8
 800871c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800871e:	643a      	str	r2, [r7, #64]	; 0x40
 8008720:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008722:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008724:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008726:	e841 2300 	strex	r3, r2, [r1]
 800872a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800872c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1e5      	bne.n	80086fe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2220      	movs	r2, #32
 8008736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a33      	ldr	r2, [pc, #204]	; (8008818 <UART_RxISR_16BIT+0x1b4>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d01f      	beq.n	8008790 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d018      	beq.n	8008790 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	e853 3f00 	ldrex	r3, [r3]
 800876a:	61fb      	str	r3, [r7, #28]
   return(result);
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008772:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	461a      	mov	r2, r3
 800877a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800877c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800877e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008784:	e841 2300 	strex	r3, r2, [r1]
 8008788:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1e6      	bne.n	800875e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008794:	2b01      	cmp	r3, #1
 8008796:	d12e      	bne.n	80087f6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	e853 3f00 	ldrex	r3, [r3]
 80087aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f023 0310 	bic.w	r3, r3, #16
 80087b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	461a      	mov	r2, r3
 80087ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087bc:	61bb      	str	r3, [r7, #24]
 80087be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c0:	6979      	ldr	r1, [r7, #20]
 80087c2:	69ba      	ldr	r2, [r7, #24]
 80087c4:	e841 2300 	strex	r3, r2, [r1]
 80087c8:	613b      	str	r3, [r7, #16]
   return(result);
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e6      	bne.n	800879e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	69db      	ldr	r3, [r3, #28]
 80087d6:	f003 0310 	and.w	r3, r3, #16
 80087da:	2b10      	cmp	r3, #16
 80087dc:	d103      	bne.n	80087e6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2210      	movs	r2, #16
 80087e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087ec:	4619      	mov	r1, r3
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7fe fc66 	bl	80070c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087f4:	e00b      	b.n	800880e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7f8 ff88 	bl	800170c <HAL_UART_RxCpltCallback>
}
 80087fc:	e007      	b.n	800880e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	699a      	ldr	r2, [r3, #24]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f042 0208 	orr.w	r2, r2, #8
 800880c:	619a      	str	r2, [r3, #24]
}
 800880e:	bf00      	nop
 8008810:	3770      	adds	r7, #112	; 0x70
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	58000c00 	.word	0x58000c00

0800881c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b0ac      	sub	sp, #176	; 0xb0
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800882a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	69db      	ldr	r3, [r3, #28]
 8008834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008852:	2b22      	cmp	r3, #34	; 0x22
 8008854:	f040 8180 	bne.w	8008b58 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800885e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008862:	e123      	b.n	8008aac <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800886e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008872:	b2d9      	uxtb	r1, r3
 8008874:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008878:	b2da      	uxtb	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800887e:	400a      	ands	r2, r1
 8008880:	b2d2      	uxtb	r2, r2
 8008882:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008894:	b29b      	uxth	r3, r3
 8008896:	3b01      	subs	r3, #1
 8008898:	b29a      	uxth	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80088aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088ae:	f003 0307 	and.w	r3, r3, #7
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d053      	beq.n	800895e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80088b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d011      	beq.n	80088e6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80088c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80088c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00b      	beq.n	80088e6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2201      	movs	r2, #1
 80088d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088dc:	f043 0201 	orr.w	r2, r3, #1
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088ea:	f003 0302 	and.w	r3, r3, #2
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d011      	beq.n	8008916 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80088f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00b      	beq.n	8008916 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2202      	movs	r2, #2
 8008904:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800890c:	f043 0204 	orr.w	r2, r3, #4
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800891a:	f003 0304 	and.w	r3, r3, #4
 800891e:	2b00      	cmp	r3, #0
 8008920:	d011      	beq.n	8008946 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00b      	beq.n	8008946 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2204      	movs	r2, #4
 8008934:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800893c:	f043 0202 	orr.w	r2, r3, #2
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800894c:	2b00      	cmp	r3, #0
 800894e:	d006      	beq.n	800895e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7fe fbab 	bl	80070ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008964:	b29b      	uxth	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	f040 80a0 	bne.w	8008aac <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008974:	e853 3f00 	ldrex	r3, [r3]
 8008978:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800897a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800897c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	461a      	mov	r2, r3
 800898a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800898e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008990:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008992:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008994:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008996:	e841 2300 	strex	r3, r2, [r1]
 800899a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800899c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1e4      	bne.n	800896c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	3308      	adds	r3, #8
 80089a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089ac:	e853 3f00 	ldrex	r3, [r3]
 80089b0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80089b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089b4:	4b6e      	ldr	r3, [pc, #440]	; (8008b70 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80089b6:	4013      	ands	r3, r2
 80089b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3308      	adds	r3, #8
 80089c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80089c6:	66ba      	str	r2, [r7, #104]	; 0x68
 80089c8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80089cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80089d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1e3      	bne.n	80089a2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2220      	movs	r2, #32
 80089de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a60      	ldr	r2, [pc, #384]	; (8008b74 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d021      	beq.n	8008a3c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d01a      	beq.n	8008a3c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a0e:	e853 3f00 	ldrex	r3, [r3]
 8008a12:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a28:	657b      	str	r3, [r7, #84]	; 0x54
 8008a2a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a30:	e841 2300 	strex	r3, r2, [r1]
 8008a34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1e4      	bne.n	8008a06 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d130      	bne.n	8008aa6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a52:	e853 3f00 	ldrex	r3, [r3]
 8008a56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5a:	f023 0310 	bic.w	r3, r3, #16
 8008a5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	461a      	mov	r2, r3
 8008a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a6c:	643b      	str	r3, [r7, #64]	; 0x40
 8008a6e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a74:	e841 2300 	strex	r3, r2, [r1]
 8008a78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1e4      	bne.n	8008a4a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	69db      	ldr	r3, [r3, #28]
 8008a86:	f003 0310 	and.w	r3, r3, #16
 8008a8a:	2b10      	cmp	r3, #16
 8008a8c:	d103      	bne.n	8008a96 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2210      	movs	r2, #16
 8008a94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7fe fb0e 	bl	80070c0 <HAL_UARTEx_RxEventCallback>
 8008aa4:	e002      	b.n	8008aac <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7f8 fe30 	bl	800170c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008aac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d006      	beq.n	8008ac2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8008ab4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ab8:	f003 0320 	and.w	r3, r3, #32
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f47f aed1 	bne.w	8008864 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ac8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008acc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d049      	beq.n	8008b68 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ada:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d242      	bcs.n	8008b68 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aea:	6a3b      	ldr	r3, [r7, #32]
 8008aec:	e853 3f00 	ldrex	r3, [r3]
 8008af0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008af8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3308      	adds	r3, #8
 8008b02:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008b06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b0e:	e841 2300 	strex	r3, r2, [r1]
 8008b12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1e3      	bne.n	8008ae2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a16      	ldr	r2, [pc, #88]	; (8008b78 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008b1e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	f043 0320 	orr.w	r3, r3, #32
 8008b34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b42:	61bb      	str	r3, [r7, #24]
 8008b44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b46:	6979      	ldr	r1, [r7, #20]
 8008b48:	69ba      	ldr	r2, [r7, #24]
 8008b4a:	e841 2300 	strex	r3, r2, [r1]
 8008b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1e4      	bne.n	8008b20 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b56:	e007      	b.n	8008b68 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	699a      	ldr	r2, [r3, #24]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 0208 	orr.w	r2, r2, #8
 8008b66:	619a      	str	r2, [r3, #24]
}
 8008b68:	bf00      	nop
 8008b6a:	37b0      	adds	r7, #176	; 0xb0
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	effffffe 	.word	0xeffffffe
 8008b74:	58000c00 	.word	0x58000c00
 8008b78:	080084ad 	.word	0x080084ad

08008b7c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b0ae      	sub	sp, #184	; 0xb8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b8a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	69db      	ldr	r3, [r3, #28]
 8008b94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bb2:	2b22      	cmp	r3, #34	; 0x22
 8008bb4:	f040 8184 	bne.w	8008ec0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008bbe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008bc2:	e127      	b.n	8008e14 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bca:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008bd6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008bda:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008bde:	4013      	ands	r3, r2
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008be6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bec:	1c9a      	adds	r2, r3, #2
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	69db      	ldr	r3, [r3, #28]
 8008c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c12:	f003 0307 	and.w	r3, r3, #7
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d053      	beq.n	8008cc2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d011      	beq.n	8008c4a <UART_RxISR_16BIT_FIFOEN+0xce>
 8008c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00b      	beq.n	8008c4a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2201      	movs	r2, #1
 8008c38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c40:	f043 0201 	orr.w	r2, r3, #1
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c4e:	f003 0302 	and.w	r3, r3, #2
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d011      	beq.n	8008c7a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008c56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00b      	beq.n	8008c7a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2202      	movs	r2, #2
 8008c68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c70:	f043 0204 	orr.w	r2, r3, #4
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c7e:	f003 0304 	and.w	r3, r3, #4
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d011      	beq.n	8008caa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008c86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00b      	beq.n	8008caa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2204      	movs	r2, #4
 8008c98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ca0:	f043 0202 	orr.w	r2, r3, #2
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d006      	beq.n	8008cc2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7fe f9f9 	bl	80070ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f040 80a2 	bne.w	8008e14 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cd8:	e853 3f00 	ldrex	r3, [r3]
 8008cdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ce4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	461a      	mov	r2, r3
 8008cee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008cf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008cf6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008cfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008cfe:	e841 2300 	strex	r3, r2, [r1]
 8008d02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1e2      	bne.n	8008cd0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3308      	adds	r3, #8
 8008d10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d14:	e853 3f00 	ldrex	r3, [r3]
 8008d18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d1c:	4b6e      	ldr	r3, [pc, #440]	; (8008ed8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8008d1e:	4013      	ands	r3, r2
 8008d20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3308      	adds	r3, #8
 8008d2a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008d2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e3      	bne.n	8008d0a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2220      	movs	r2, #32
 8008d46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a60      	ldr	r2, [pc, #384]	; (8008edc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d021      	beq.n	8008da4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d01a      	beq.n	8008da4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d76:	e853 3f00 	ldrex	r3, [r3]
 8008d7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d90:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d92:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d98:	e841 2300 	strex	r3, r2, [r1]
 8008d9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1e4      	bne.n	8008d6e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d130      	bne.n	8008e0e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dba:	e853 3f00 	ldrex	r3, [r3]
 8008dbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc2:	f023 0310 	bic.w	r3, r3, #16
 8008dc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8008dd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008dda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ddc:	e841 2300 	strex	r3, r2, [r1]
 8008de0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e4      	bne.n	8008db2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	69db      	ldr	r3, [r3, #28]
 8008dee:	f003 0310 	and.w	r3, r3, #16
 8008df2:	2b10      	cmp	r3, #16
 8008df4:	d103      	bne.n	8008dfe <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2210      	movs	r2, #16
 8008dfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7fe f95a 	bl	80070c0 <HAL_UARTEx_RxEventCallback>
 8008e0c:	e002      	b.n	8008e14 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7f8 fc7c 	bl	800170c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e14:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d006      	beq.n	8008e2a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008e1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e20:	f003 0320 	and.w	r3, r3, #32
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f47f aecd 	bne.w	8008bc4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e30:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e34:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d049      	beq.n	8008ed0 <UART_RxISR_16BIT_FIFOEN+0x354>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e42:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d242      	bcs.n	8008ed0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	3308      	adds	r3, #8
 8008e50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	e853 3f00 	ldrex	r3, [r3]
 8008e58:	623b      	str	r3, [r7, #32]
   return(result);
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3308      	adds	r3, #8
 8008e6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008e6e:	633a      	str	r2, [r7, #48]	; 0x30
 8008e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e76:	e841 2300 	strex	r3, r2, [r1]
 8008e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1e3      	bne.n	8008e4a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a16      	ldr	r2, [pc, #88]	; (8008ee0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008e86:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	e853 3f00 	ldrex	r3, [r3]
 8008e94:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f043 0320 	orr.w	r3, r3, #32
 8008e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008eaa:	61fb      	str	r3, [r7, #28]
 8008eac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	69b9      	ldr	r1, [r7, #24]
 8008eb0:	69fa      	ldr	r2, [r7, #28]
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	617b      	str	r3, [r7, #20]
   return(result);
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e4      	bne.n	8008e88 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ebe:	e007      	b.n	8008ed0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	699a      	ldr	r2, [r3, #24]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f042 0208 	orr.w	r2, r2, #8
 8008ece:	619a      	str	r2, [r3, #24]
}
 8008ed0:	bf00      	nop
 8008ed2:	37b8      	adds	r7, #184	; 0xb8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	effffffe 	.word	0xeffffffe
 8008edc:	58000c00 	.word	0x58000c00
 8008ee0:	08008665 	.word	0x08008665

08008ee4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d101      	bne.n	8008f36 <HAL_UARTEx_DisableFifoMode+0x16>
 8008f32:	2302      	movs	r3, #2
 8008f34:	e027      	b.n	8008f86 <HAL_UARTEx_DisableFifoMode+0x66>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2224      	movs	r2, #36	; 0x24
 8008f42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f022 0201 	bic.w	r2, r2, #1
 8008f5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008f64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2220      	movs	r2, #32
 8008f78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b084      	sub	sp, #16
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d101      	bne.n	8008faa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	e02d      	b.n	8009006 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2201      	movs	r2, #1
 8008fae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2224      	movs	r2, #36	; 0x24
 8008fb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f022 0201 	bic.w	r2, r2, #1
 8008fd0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	683a      	ldr	r2, [r7, #0]
 8008fe2:	430a      	orrs	r2, r1
 8008fe4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f850 	bl	800908c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2220      	movs	r2, #32
 8008ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800901e:	2b01      	cmp	r3, #1
 8009020:	d101      	bne.n	8009026 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009022:	2302      	movs	r3, #2
 8009024:	e02d      	b.n	8009082 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2224      	movs	r2, #36	; 0x24
 8009032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f022 0201 	bic.w	r2, r2, #1
 800904c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	683a      	ldr	r2, [r7, #0]
 800905e:	430a      	orrs	r2, r1
 8009060:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f812 	bl	800908c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2220      	movs	r2, #32
 8009074:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
	...

0800908c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009098:	2b00      	cmp	r3, #0
 800909a:	d108      	bne.n	80090ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80090ac:	e031      	b.n	8009112 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80090ae:	2310      	movs	r3, #16
 80090b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80090b2:	2310      	movs	r3, #16
 80090b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	0e5b      	lsrs	r3, r3, #25
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	f003 0307 	and.w	r3, r3, #7
 80090c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	0f5b      	lsrs	r3, r3, #29
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	f003 0307 	and.w	r3, r3, #7
 80090d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090d6:	7bbb      	ldrb	r3, [r7, #14]
 80090d8:	7b3a      	ldrb	r2, [r7, #12]
 80090da:	4911      	ldr	r1, [pc, #68]	; (8009120 <UARTEx_SetNbDataToProcess+0x94>)
 80090dc:	5c8a      	ldrb	r2, [r1, r2]
 80090de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80090e2:	7b3a      	ldrb	r2, [r7, #12]
 80090e4:	490f      	ldr	r1, [pc, #60]	; (8009124 <UARTEx_SetNbDataToProcess+0x98>)
 80090e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090f4:	7bfb      	ldrb	r3, [r7, #15]
 80090f6:	7b7a      	ldrb	r2, [r7, #13]
 80090f8:	4909      	ldr	r1, [pc, #36]	; (8009120 <UARTEx_SetNbDataToProcess+0x94>)
 80090fa:	5c8a      	ldrb	r2, [r1, r2]
 80090fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009100:	7b7a      	ldrb	r2, [r7, #13]
 8009102:	4908      	ldr	r1, [pc, #32]	; (8009124 <UARTEx_SetNbDataToProcess+0x98>)
 8009104:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009106:	fb93 f3f2 	sdiv	r3, r3, r2
 800910a:	b29a      	uxth	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009112:	bf00      	nop
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	08009b20 	.word	0x08009b20
 8009124:	08009b28 	.word	0x08009b28

08009128 <__errno>:
 8009128:	4b01      	ldr	r3, [pc, #4]	; (8009130 <__errno+0x8>)
 800912a:	6818      	ldr	r0, [r3, #0]
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	24000020 	.word	0x24000020

08009134 <__libc_init_array>:
 8009134:	b570      	push	{r4, r5, r6, lr}
 8009136:	4d0d      	ldr	r5, [pc, #52]	; (800916c <__libc_init_array+0x38>)
 8009138:	4c0d      	ldr	r4, [pc, #52]	; (8009170 <__libc_init_array+0x3c>)
 800913a:	1b64      	subs	r4, r4, r5
 800913c:	10a4      	asrs	r4, r4, #2
 800913e:	2600      	movs	r6, #0
 8009140:	42a6      	cmp	r6, r4
 8009142:	d109      	bne.n	8009158 <__libc_init_array+0x24>
 8009144:	4d0b      	ldr	r5, [pc, #44]	; (8009174 <__libc_init_array+0x40>)
 8009146:	4c0c      	ldr	r4, [pc, #48]	; (8009178 <__libc_init_array+0x44>)
 8009148:	f000 fca2 	bl	8009a90 <_init>
 800914c:	1b64      	subs	r4, r4, r5
 800914e:	10a4      	asrs	r4, r4, #2
 8009150:	2600      	movs	r6, #0
 8009152:	42a6      	cmp	r6, r4
 8009154:	d105      	bne.n	8009162 <__libc_init_array+0x2e>
 8009156:	bd70      	pop	{r4, r5, r6, pc}
 8009158:	f855 3b04 	ldr.w	r3, [r5], #4
 800915c:	4798      	blx	r3
 800915e:	3601      	adds	r6, #1
 8009160:	e7ee      	b.n	8009140 <__libc_init_array+0xc>
 8009162:	f855 3b04 	ldr.w	r3, [r5], #4
 8009166:	4798      	blx	r3
 8009168:	3601      	adds	r6, #1
 800916a:	e7f2      	b.n	8009152 <__libc_init_array+0x1e>
 800916c:	08009b6c 	.word	0x08009b6c
 8009170:	08009b6c 	.word	0x08009b6c
 8009174:	08009b6c 	.word	0x08009b6c
 8009178:	08009b70 	.word	0x08009b70

0800917c <memset>:
 800917c:	4402      	add	r2, r0
 800917e:	4603      	mov	r3, r0
 8009180:	4293      	cmp	r3, r2
 8009182:	d100      	bne.n	8009186 <memset+0xa>
 8009184:	4770      	bx	lr
 8009186:	f803 1b01 	strb.w	r1, [r3], #1
 800918a:	e7f9      	b.n	8009180 <memset+0x4>

0800918c <sniprintf>:
 800918c:	b40c      	push	{r2, r3}
 800918e:	b530      	push	{r4, r5, lr}
 8009190:	4b17      	ldr	r3, [pc, #92]	; (80091f0 <sniprintf+0x64>)
 8009192:	1e0c      	subs	r4, r1, #0
 8009194:	681d      	ldr	r5, [r3, #0]
 8009196:	b09d      	sub	sp, #116	; 0x74
 8009198:	da08      	bge.n	80091ac <sniprintf+0x20>
 800919a:	238b      	movs	r3, #139	; 0x8b
 800919c:	602b      	str	r3, [r5, #0]
 800919e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091a2:	b01d      	add	sp, #116	; 0x74
 80091a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091a8:	b002      	add	sp, #8
 80091aa:	4770      	bx	lr
 80091ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80091b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80091b4:	bf14      	ite	ne
 80091b6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80091ba:	4623      	moveq	r3, r4
 80091bc:	9304      	str	r3, [sp, #16]
 80091be:	9307      	str	r3, [sp, #28]
 80091c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80091c4:	9002      	str	r0, [sp, #8]
 80091c6:	9006      	str	r0, [sp, #24]
 80091c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80091cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80091ce:	ab21      	add	r3, sp, #132	; 0x84
 80091d0:	a902      	add	r1, sp, #8
 80091d2:	4628      	mov	r0, r5
 80091d4:	9301      	str	r3, [sp, #4]
 80091d6:	f000 f869 	bl	80092ac <_svfiprintf_r>
 80091da:	1c43      	adds	r3, r0, #1
 80091dc:	bfbc      	itt	lt
 80091de:	238b      	movlt	r3, #139	; 0x8b
 80091e0:	602b      	strlt	r3, [r5, #0]
 80091e2:	2c00      	cmp	r4, #0
 80091e4:	d0dd      	beq.n	80091a2 <sniprintf+0x16>
 80091e6:	9b02      	ldr	r3, [sp, #8]
 80091e8:	2200      	movs	r2, #0
 80091ea:	701a      	strb	r2, [r3, #0]
 80091ec:	e7d9      	b.n	80091a2 <sniprintf+0x16>
 80091ee:	bf00      	nop
 80091f0:	24000020 	.word	0x24000020

080091f4 <__ssputs_r>:
 80091f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091f8:	688e      	ldr	r6, [r1, #8]
 80091fa:	429e      	cmp	r6, r3
 80091fc:	4682      	mov	sl, r0
 80091fe:	460c      	mov	r4, r1
 8009200:	4690      	mov	r8, r2
 8009202:	461f      	mov	r7, r3
 8009204:	d838      	bhi.n	8009278 <__ssputs_r+0x84>
 8009206:	898a      	ldrh	r2, [r1, #12]
 8009208:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800920c:	d032      	beq.n	8009274 <__ssputs_r+0x80>
 800920e:	6825      	ldr	r5, [r4, #0]
 8009210:	6909      	ldr	r1, [r1, #16]
 8009212:	eba5 0901 	sub.w	r9, r5, r1
 8009216:	6965      	ldr	r5, [r4, #20]
 8009218:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800921c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009220:	3301      	adds	r3, #1
 8009222:	444b      	add	r3, r9
 8009224:	106d      	asrs	r5, r5, #1
 8009226:	429d      	cmp	r5, r3
 8009228:	bf38      	it	cc
 800922a:	461d      	movcc	r5, r3
 800922c:	0553      	lsls	r3, r2, #21
 800922e:	d531      	bpl.n	8009294 <__ssputs_r+0xa0>
 8009230:	4629      	mov	r1, r5
 8009232:	f000 fb63 	bl	80098fc <_malloc_r>
 8009236:	4606      	mov	r6, r0
 8009238:	b950      	cbnz	r0, 8009250 <__ssputs_r+0x5c>
 800923a:	230c      	movs	r3, #12
 800923c:	f8ca 3000 	str.w	r3, [sl]
 8009240:	89a3      	ldrh	r3, [r4, #12]
 8009242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009246:	81a3      	strh	r3, [r4, #12]
 8009248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800924c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009250:	6921      	ldr	r1, [r4, #16]
 8009252:	464a      	mov	r2, r9
 8009254:	f000 fabe 	bl	80097d4 <memcpy>
 8009258:	89a3      	ldrh	r3, [r4, #12]
 800925a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800925e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009262:	81a3      	strh	r3, [r4, #12]
 8009264:	6126      	str	r6, [r4, #16]
 8009266:	6165      	str	r5, [r4, #20]
 8009268:	444e      	add	r6, r9
 800926a:	eba5 0509 	sub.w	r5, r5, r9
 800926e:	6026      	str	r6, [r4, #0]
 8009270:	60a5      	str	r5, [r4, #8]
 8009272:	463e      	mov	r6, r7
 8009274:	42be      	cmp	r6, r7
 8009276:	d900      	bls.n	800927a <__ssputs_r+0x86>
 8009278:	463e      	mov	r6, r7
 800927a:	6820      	ldr	r0, [r4, #0]
 800927c:	4632      	mov	r2, r6
 800927e:	4641      	mov	r1, r8
 8009280:	f000 fab6 	bl	80097f0 <memmove>
 8009284:	68a3      	ldr	r3, [r4, #8]
 8009286:	1b9b      	subs	r3, r3, r6
 8009288:	60a3      	str	r3, [r4, #8]
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	4433      	add	r3, r6
 800928e:	6023      	str	r3, [r4, #0]
 8009290:	2000      	movs	r0, #0
 8009292:	e7db      	b.n	800924c <__ssputs_r+0x58>
 8009294:	462a      	mov	r2, r5
 8009296:	f000 fba5 	bl	80099e4 <_realloc_r>
 800929a:	4606      	mov	r6, r0
 800929c:	2800      	cmp	r0, #0
 800929e:	d1e1      	bne.n	8009264 <__ssputs_r+0x70>
 80092a0:	6921      	ldr	r1, [r4, #16]
 80092a2:	4650      	mov	r0, sl
 80092a4:	f000 fabe 	bl	8009824 <_free_r>
 80092a8:	e7c7      	b.n	800923a <__ssputs_r+0x46>
	...

080092ac <_svfiprintf_r>:
 80092ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b0:	4698      	mov	r8, r3
 80092b2:	898b      	ldrh	r3, [r1, #12]
 80092b4:	061b      	lsls	r3, r3, #24
 80092b6:	b09d      	sub	sp, #116	; 0x74
 80092b8:	4607      	mov	r7, r0
 80092ba:	460d      	mov	r5, r1
 80092bc:	4614      	mov	r4, r2
 80092be:	d50e      	bpl.n	80092de <_svfiprintf_r+0x32>
 80092c0:	690b      	ldr	r3, [r1, #16]
 80092c2:	b963      	cbnz	r3, 80092de <_svfiprintf_r+0x32>
 80092c4:	2140      	movs	r1, #64	; 0x40
 80092c6:	f000 fb19 	bl	80098fc <_malloc_r>
 80092ca:	6028      	str	r0, [r5, #0]
 80092cc:	6128      	str	r0, [r5, #16]
 80092ce:	b920      	cbnz	r0, 80092da <_svfiprintf_r+0x2e>
 80092d0:	230c      	movs	r3, #12
 80092d2:	603b      	str	r3, [r7, #0]
 80092d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092d8:	e0d1      	b.n	800947e <_svfiprintf_r+0x1d2>
 80092da:	2340      	movs	r3, #64	; 0x40
 80092dc:	616b      	str	r3, [r5, #20]
 80092de:	2300      	movs	r3, #0
 80092e0:	9309      	str	r3, [sp, #36]	; 0x24
 80092e2:	2320      	movs	r3, #32
 80092e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80092ec:	2330      	movs	r3, #48	; 0x30
 80092ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009498 <_svfiprintf_r+0x1ec>
 80092f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092f6:	f04f 0901 	mov.w	r9, #1
 80092fa:	4623      	mov	r3, r4
 80092fc:	469a      	mov	sl, r3
 80092fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009302:	b10a      	cbz	r2, 8009308 <_svfiprintf_r+0x5c>
 8009304:	2a25      	cmp	r2, #37	; 0x25
 8009306:	d1f9      	bne.n	80092fc <_svfiprintf_r+0x50>
 8009308:	ebba 0b04 	subs.w	fp, sl, r4
 800930c:	d00b      	beq.n	8009326 <_svfiprintf_r+0x7a>
 800930e:	465b      	mov	r3, fp
 8009310:	4622      	mov	r2, r4
 8009312:	4629      	mov	r1, r5
 8009314:	4638      	mov	r0, r7
 8009316:	f7ff ff6d 	bl	80091f4 <__ssputs_r>
 800931a:	3001      	adds	r0, #1
 800931c:	f000 80aa 	beq.w	8009474 <_svfiprintf_r+0x1c8>
 8009320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009322:	445a      	add	r2, fp
 8009324:	9209      	str	r2, [sp, #36]	; 0x24
 8009326:	f89a 3000 	ldrb.w	r3, [sl]
 800932a:	2b00      	cmp	r3, #0
 800932c:	f000 80a2 	beq.w	8009474 <_svfiprintf_r+0x1c8>
 8009330:	2300      	movs	r3, #0
 8009332:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800933a:	f10a 0a01 	add.w	sl, sl, #1
 800933e:	9304      	str	r3, [sp, #16]
 8009340:	9307      	str	r3, [sp, #28]
 8009342:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009346:	931a      	str	r3, [sp, #104]	; 0x68
 8009348:	4654      	mov	r4, sl
 800934a:	2205      	movs	r2, #5
 800934c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009350:	4851      	ldr	r0, [pc, #324]	; (8009498 <_svfiprintf_r+0x1ec>)
 8009352:	f7f6 ffcd 	bl	80002f0 <memchr>
 8009356:	9a04      	ldr	r2, [sp, #16]
 8009358:	b9d8      	cbnz	r0, 8009392 <_svfiprintf_r+0xe6>
 800935a:	06d0      	lsls	r0, r2, #27
 800935c:	bf44      	itt	mi
 800935e:	2320      	movmi	r3, #32
 8009360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009364:	0711      	lsls	r1, r2, #28
 8009366:	bf44      	itt	mi
 8009368:	232b      	movmi	r3, #43	; 0x2b
 800936a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800936e:	f89a 3000 	ldrb.w	r3, [sl]
 8009372:	2b2a      	cmp	r3, #42	; 0x2a
 8009374:	d015      	beq.n	80093a2 <_svfiprintf_r+0xf6>
 8009376:	9a07      	ldr	r2, [sp, #28]
 8009378:	4654      	mov	r4, sl
 800937a:	2000      	movs	r0, #0
 800937c:	f04f 0c0a 	mov.w	ip, #10
 8009380:	4621      	mov	r1, r4
 8009382:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009386:	3b30      	subs	r3, #48	; 0x30
 8009388:	2b09      	cmp	r3, #9
 800938a:	d94e      	bls.n	800942a <_svfiprintf_r+0x17e>
 800938c:	b1b0      	cbz	r0, 80093bc <_svfiprintf_r+0x110>
 800938e:	9207      	str	r2, [sp, #28]
 8009390:	e014      	b.n	80093bc <_svfiprintf_r+0x110>
 8009392:	eba0 0308 	sub.w	r3, r0, r8
 8009396:	fa09 f303 	lsl.w	r3, r9, r3
 800939a:	4313      	orrs	r3, r2
 800939c:	9304      	str	r3, [sp, #16]
 800939e:	46a2      	mov	sl, r4
 80093a0:	e7d2      	b.n	8009348 <_svfiprintf_r+0x9c>
 80093a2:	9b03      	ldr	r3, [sp, #12]
 80093a4:	1d19      	adds	r1, r3, #4
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	9103      	str	r1, [sp, #12]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	bfbb      	ittet	lt
 80093ae:	425b      	neglt	r3, r3
 80093b0:	f042 0202 	orrlt.w	r2, r2, #2
 80093b4:	9307      	strge	r3, [sp, #28]
 80093b6:	9307      	strlt	r3, [sp, #28]
 80093b8:	bfb8      	it	lt
 80093ba:	9204      	strlt	r2, [sp, #16]
 80093bc:	7823      	ldrb	r3, [r4, #0]
 80093be:	2b2e      	cmp	r3, #46	; 0x2e
 80093c0:	d10c      	bne.n	80093dc <_svfiprintf_r+0x130>
 80093c2:	7863      	ldrb	r3, [r4, #1]
 80093c4:	2b2a      	cmp	r3, #42	; 0x2a
 80093c6:	d135      	bne.n	8009434 <_svfiprintf_r+0x188>
 80093c8:	9b03      	ldr	r3, [sp, #12]
 80093ca:	1d1a      	adds	r2, r3, #4
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	9203      	str	r2, [sp, #12]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	bfb8      	it	lt
 80093d4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80093d8:	3402      	adds	r4, #2
 80093da:	9305      	str	r3, [sp, #20]
 80093dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094a8 <_svfiprintf_r+0x1fc>
 80093e0:	7821      	ldrb	r1, [r4, #0]
 80093e2:	2203      	movs	r2, #3
 80093e4:	4650      	mov	r0, sl
 80093e6:	f7f6 ff83 	bl	80002f0 <memchr>
 80093ea:	b140      	cbz	r0, 80093fe <_svfiprintf_r+0x152>
 80093ec:	2340      	movs	r3, #64	; 0x40
 80093ee:	eba0 000a 	sub.w	r0, r0, sl
 80093f2:	fa03 f000 	lsl.w	r0, r3, r0
 80093f6:	9b04      	ldr	r3, [sp, #16]
 80093f8:	4303      	orrs	r3, r0
 80093fa:	3401      	adds	r4, #1
 80093fc:	9304      	str	r3, [sp, #16]
 80093fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009402:	4826      	ldr	r0, [pc, #152]	; (800949c <_svfiprintf_r+0x1f0>)
 8009404:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009408:	2206      	movs	r2, #6
 800940a:	f7f6 ff71 	bl	80002f0 <memchr>
 800940e:	2800      	cmp	r0, #0
 8009410:	d038      	beq.n	8009484 <_svfiprintf_r+0x1d8>
 8009412:	4b23      	ldr	r3, [pc, #140]	; (80094a0 <_svfiprintf_r+0x1f4>)
 8009414:	bb1b      	cbnz	r3, 800945e <_svfiprintf_r+0x1b2>
 8009416:	9b03      	ldr	r3, [sp, #12]
 8009418:	3307      	adds	r3, #7
 800941a:	f023 0307 	bic.w	r3, r3, #7
 800941e:	3308      	adds	r3, #8
 8009420:	9303      	str	r3, [sp, #12]
 8009422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009424:	4433      	add	r3, r6
 8009426:	9309      	str	r3, [sp, #36]	; 0x24
 8009428:	e767      	b.n	80092fa <_svfiprintf_r+0x4e>
 800942a:	fb0c 3202 	mla	r2, ip, r2, r3
 800942e:	460c      	mov	r4, r1
 8009430:	2001      	movs	r0, #1
 8009432:	e7a5      	b.n	8009380 <_svfiprintf_r+0xd4>
 8009434:	2300      	movs	r3, #0
 8009436:	3401      	adds	r4, #1
 8009438:	9305      	str	r3, [sp, #20]
 800943a:	4619      	mov	r1, r3
 800943c:	f04f 0c0a 	mov.w	ip, #10
 8009440:	4620      	mov	r0, r4
 8009442:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009446:	3a30      	subs	r2, #48	; 0x30
 8009448:	2a09      	cmp	r2, #9
 800944a:	d903      	bls.n	8009454 <_svfiprintf_r+0x1a8>
 800944c:	2b00      	cmp	r3, #0
 800944e:	d0c5      	beq.n	80093dc <_svfiprintf_r+0x130>
 8009450:	9105      	str	r1, [sp, #20]
 8009452:	e7c3      	b.n	80093dc <_svfiprintf_r+0x130>
 8009454:	fb0c 2101 	mla	r1, ip, r1, r2
 8009458:	4604      	mov	r4, r0
 800945a:	2301      	movs	r3, #1
 800945c:	e7f0      	b.n	8009440 <_svfiprintf_r+0x194>
 800945e:	ab03      	add	r3, sp, #12
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	462a      	mov	r2, r5
 8009464:	4b0f      	ldr	r3, [pc, #60]	; (80094a4 <_svfiprintf_r+0x1f8>)
 8009466:	a904      	add	r1, sp, #16
 8009468:	4638      	mov	r0, r7
 800946a:	f3af 8000 	nop.w
 800946e:	1c42      	adds	r2, r0, #1
 8009470:	4606      	mov	r6, r0
 8009472:	d1d6      	bne.n	8009422 <_svfiprintf_r+0x176>
 8009474:	89ab      	ldrh	r3, [r5, #12]
 8009476:	065b      	lsls	r3, r3, #25
 8009478:	f53f af2c 	bmi.w	80092d4 <_svfiprintf_r+0x28>
 800947c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800947e:	b01d      	add	sp, #116	; 0x74
 8009480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009484:	ab03      	add	r3, sp, #12
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	462a      	mov	r2, r5
 800948a:	4b06      	ldr	r3, [pc, #24]	; (80094a4 <_svfiprintf_r+0x1f8>)
 800948c:	a904      	add	r1, sp, #16
 800948e:	4638      	mov	r0, r7
 8009490:	f000 f87a 	bl	8009588 <_printf_i>
 8009494:	e7eb      	b.n	800946e <_svfiprintf_r+0x1c2>
 8009496:	bf00      	nop
 8009498:	08009b30 	.word	0x08009b30
 800949c:	08009b3a 	.word	0x08009b3a
 80094a0:	00000000 	.word	0x00000000
 80094a4:	080091f5 	.word	0x080091f5
 80094a8:	08009b36 	.word	0x08009b36

080094ac <_printf_common>:
 80094ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094b0:	4616      	mov	r6, r2
 80094b2:	4699      	mov	r9, r3
 80094b4:	688a      	ldr	r2, [r1, #8]
 80094b6:	690b      	ldr	r3, [r1, #16]
 80094b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094bc:	4293      	cmp	r3, r2
 80094be:	bfb8      	it	lt
 80094c0:	4613      	movlt	r3, r2
 80094c2:	6033      	str	r3, [r6, #0]
 80094c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094c8:	4607      	mov	r7, r0
 80094ca:	460c      	mov	r4, r1
 80094cc:	b10a      	cbz	r2, 80094d2 <_printf_common+0x26>
 80094ce:	3301      	adds	r3, #1
 80094d0:	6033      	str	r3, [r6, #0]
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	0699      	lsls	r1, r3, #26
 80094d6:	bf42      	ittt	mi
 80094d8:	6833      	ldrmi	r3, [r6, #0]
 80094da:	3302      	addmi	r3, #2
 80094dc:	6033      	strmi	r3, [r6, #0]
 80094de:	6825      	ldr	r5, [r4, #0]
 80094e0:	f015 0506 	ands.w	r5, r5, #6
 80094e4:	d106      	bne.n	80094f4 <_printf_common+0x48>
 80094e6:	f104 0a19 	add.w	sl, r4, #25
 80094ea:	68e3      	ldr	r3, [r4, #12]
 80094ec:	6832      	ldr	r2, [r6, #0]
 80094ee:	1a9b      	subs	r3, r3, r2
 80094f0:	42ab      	cmp	r3, r5
 80094f2:	dc26      	bgt.n	8009542 <_printf_common+0x96>
 80094f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094f8:	1e13      	subs	r3, r2, #0
 80094fa:	6822      	ldr	r2, [r4, #0]
 80094fc:	bf18      	it	ne
 80094fe:	2301      	movne	r3, #1
 8009500:	0692      	lsls	r2, r2, #26
 8009502:	d42b      	bmi.n	800955c <_printf_common+0xb0>
 8009504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009508:	4649      	mov	r1, r9
 800950a:	4638      	mov	r0, r7
 800950c:	47c0      	blx	r8
 800950e:	3001      	adds	r0, #1
 8009510:	d01e      	beq.n	8009550 <_printf_common+0xa4>
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	68e5      	ldr	r5, [r4, #12]
 8009516:	6832      	ldr	r2, [r6, #0]
 8009518:	f003 0306 	and.w	r3, r3, #6
 800951c:	2b04      	cmp	r3, #4
 800951e:	bf08      	it	eq
 8009520:	1aad      	subeq	r5, r5, r2
 8009522:	68a3      	ldr	r3, [r4, #8]
 8009524:	6922      	ldr	r2, [r4, #16]
 8009526:	bf0c      	ite	eq
 8009528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800952c:	2500      	movne	r5, #0
 800952e:	4293      	cmp	r3, r2
 8009530:	bfc4      	itt	gt
 8009532:	1a9b      	subgt	r3, r3, r2
 8009534:	18ed      	addgt	r5, r5, r3
 8009536:	2600      	movs	r6, #0
 8009538:	341a      	adds	r4, #26
 800953a:	42b5      	cmp	r5, r6
 800953c:	d11a      	bne.n	8009574 <_printf_common+0xc8>
 800953e:	2000      	movs	r0, #0
 8009540:	e008      	b.n	8009554 <_printf_common+0xa8>
 8009542:	2301      	movs	r3, #1
 8009544:	4652      	mov	r2, sl
 8009546:	4649      	mov	r1, r9
 8009548:	4638      	mov	r0, r7
 800954a:	47c0      	blx	r8
 800954c:	3001      	adds	r0, #1
 800954e:	d103      	bne.n	8009558 <_printf_common+0xac>
 8009550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009558:	3501      	adds	r5, #1
 800955a:	e7c6      	b.n	80094ea <_printf_common+0x3e>
 800955c:	18e1      	adds	r1, r4, r3
 800955e:	1c5a      	adds	r2, r3, #1
 8009560:	2030      	movs	r0, #48	; 0x30
 8009562:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009566:	4422      	add	r2, r4
 8009568:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800956c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009570:	3302      	adds	r3, #2
 8009572:	e7c7      	b.n	8009504 <_printf_common+0x58>
 8009574:	2301      	movs	r3, #1
 8009576:	4622      	mov	r2, r4
 8009578:	4649      	mov	r1, r9
 800957a:	4638      	mov	r0, r7
 800957c:	47c0      	blx	r8
 800957e:	3001      	adds	r0, #1
 8009580:	d0e6      	beq.n	8009550 <_printf_common+0xa4>
 8009582:	3601      	adds	r6, #1
 8009584:	e7d9      	b.n	800953a <_printf_common+0x8e>
	...

08009588 <_printf_i>:
 8009588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800958c:	7e0f      	ldrb	r7, [r1, #24]
 800958e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009590:	2f78      	cmp	r7, #120	; 0x78
 8009592:	4691      	mov	r9, r2
 8009594:	4680      	mov	r8, r0
 8009596:	460c      	mov	r4, r1
 8009598:	469a      	mov	sl, r3
 800959a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800959e:	d807      	bhi.n	80095b0 <_printf_i+0x28>
 80095a0:	2f62      	cmp	r7, #98	; 0x62
 80095a2:	d80a      	bhi.n	80095ba <_printf_i+0x32>
 80095a4:	2f00      	cmp	r7, #0
 80095a6:	f000 80d8 	beq.w	800975a <_printf_i+0x1d2>
 80095aa:	2f58      	cmp	r7, #88	; 0x58
 80095ac:	f000 80a3 	beq.w	80096f6 <_printf_i+0x16e>
 80095b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095b8:	e03a      	b.n	8009630 <_printf_i+0xa8>
 80095ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095be:	2b15      	cmp	r3, #21
 80095c0:	d8f6      	bhi.n	80095b0 <_printf_i+0x28>
 80095c2:	a101      	add	r1, pc, #4	; (adr r1, 80095c8 <_printf_i+0x40>)
 80095c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095c8:	08009621 	.word	0x08009621
 80095cc:	08009635 	.word	0x08009635
 80095d0:	080095b1 	.word	0x080095b1
 80095d4:	080095b1 	.word	0x080095b1
 80095d8:	080095b1 	.word	0x080095b1
 80095dc:	080095b1 	.word	0x080095b1
 80095e0:	08009635 	.word	0x08009635
 80095e4:	080095b1 	.word	0x080095b1
 80095e8:	080095b1 	.word	0x080095b1
 80095ec:	080095b1 	.word	0x080095b1
 80095f0:	080095b1 	.word	0x080095b1
 80095f4:	08009741 	.word	0x08009741
 80095f8:	08009665 	.word	0x08009665
 80095fc:	08009723 	.word	0x08009723
 8009600:	080095b1 	.word	0x080095b1
 8009604:	080095b1 	.word	0x080095b1
 8009608:	08009763 	.word	0x08009763
 800960c:	080095b1 	.word	0x080095b1
 8009610:	08009665 	.word	0x08009665
 8009614:	080095b1 	.word	0x080095b1
 8009618:	080095b1 	.word	0x080095b1
 800961c:	0800972b 	.word	0x0800972b
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	1d1a      	adds	r2, r3, #4
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	602a      	str	r2, [r5, #0]
 8009628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800962c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009630:	2301      	movs	r3, #1
 8009632:	e0a3      	b.n	800977c <_printf_i+0x1f4>
 8009634:	6820      	ldr	r0, [r4, #0]
 8009636:	6829      	ldr	r1, [r5, #0]
 8009638:	0606      	lsls	r6, r0, #24
 800963a:	f101 0304 	add.w	r3, r1, #4
 800963e:	d50a      	bpl.n	8009656 <_printf_i+0xce>
 8009640:	680e      	ldr	r6, [r1, #0]
 8009642:	602b      	str	r3, [r5, #0]
 8009644:	2e00      	cmp	r6, #0
 8009646:	da03      	bge.n	8009650 <_printf_i+0xc8>
 8009648:	232d      	movs	r3, #45	; 0x2d
 800964a:	4276      	negs	r6, r6
 800964c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009650:	485e      	ldr	r0, [pc, #376]	; (80097cc <_printf_i+0x244>)
 8009652:	230a      	movs	r3, #10
 8009654:	e019      	b.n	800968a <_printf_i+0x102>
 8009656:	680e      	ldr	r6, [r1, #0]
 8009658:	602b      	str	r3, [r5, #0]
 800965a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800965e:	bf18      	it	ne
 8009660:	b236      	sxthne	r6, r6
 8009662:	e7ef      	b.n	8009644 <_printf_i+0xbc>
 8009664:	682b      	ldr	r3, [r5, #0]
 8009666:	6820      	ldr	r0, [r4, #0]
 8009668:	1d19      	adds	r1, r3, #4
 800966a:	6029      	str	r1, [r5, #0]
 800966c:	0601      	lsls	r1, r0, #24
 800966e:	d501      	bpl.n	8009674 <_printf_i+0xec>
 8009670:	681e      	ldr	r6, [r3, #0]
 8009672:	e002      	b.n	800967a <_printf_i+0xf2>
 8009674:	0646      	lsls	r6, r0, #25
 8009676:	d5fb      	bpl.n	8009670 <_printf_i+0xe8>
 8009678:	881e      	ldrh	r6, [r3, #0]
 800967a:	4854      	ldr	r0, [pc, #336]	; (80097cc <_printf_i+0x244>)
 800967c:	2f6f      	cmp	r7, #111	; 0x6f
 800967e:	bf0c      	ite	eq
 8009680:	2308      	moveq	r3, #8
 8009682:	230a      	movne	r3, #10
 8009684:	2100      	movs	r1, #0
 8009686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800968a:	6865      	ldr	r5, [r4, #4]
 800968c:	60a5      	str	r5, [r4, #8]
 800968e:	2d00      	cmp	r5, #0
 8009690:	bfa2      	ittt	ge
 8009692:	6821      	ldrge	r1, [r4, #0]
 8009694:	f021 0104 	bicge.w	r1, r1, #4
 8009698:	6021      	strge	r1, [r4, #0]
 800969a:	b90e      	cbnz	r6, 80096a0 <_printf_i+0x118>
 800969c:	2d00      	cmp	r5, #0
 800969e:	d04d      	beq.n	800973c <_printf_i+0x1b4>
 80096a0:	4615      	mov	r5, r2
 80096a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80096a6:	fb03 6711 	mls	r7, r3, r1, r6
 80096aa:	5dc7      	ldrb	r7, [r0, r7]
 80096ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096b0:	4637      	mov	r7, r6
 80096b2:	42bb      	cmp	r3, r7
 80096b4:	460e      	mov	r6, r1
 80096b6:	d9f4      	bls.n	80096a2 <_printf_i+0x11a>
 80096b8:	2b08      	cmp	r3, #8
 80096ba:	d10b      	bne.n	80096d4 <_printf_i+0x14c>
 80096bc:	6823      	ldr	r3, [r4, #0]
 80096be:	07de      	lsls	r6, r3, #31
 80096c0:	d508      	bpl.n	80096d4 <_printf_i+0x14c>
 80096c2:	6923      	ldr	r3, [r4, #16]
 80096c4:	6861      	ldr	r1, [r4, #4]
 80096c6:	4299      	cmp	r1, r3
 80096c8:	bfde      	ittt	le
 80096ca:	2330      	movle	r3, #48	; 0x30
 80096cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80096d4:	1b52      	subs	r2, r2, r5
 80096d6:	6122      	str	r2, [r4, #16]
 80096d8:	f8cd a000 	str.w	sl, [sp]
 80096dc:	464b      	mov	r3, r9
 80096de:	aa03      	add	r2, sp, #12
 80096e0:	4621      	mov	r1, r4
 80096e2:	4640      	mov	r0, r8
 80096e4:	f7ff fee2 	bl	80094ac <_printf_common>
 80096e8:	3001      	adds	r0, #1
 80096ea:	d14c      	bne.n	8009786 <_printf_i+0x1fe>
 80096ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096f0:	b004      	add	sp, #16
 80096f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096f6:	4835      	ldr	r0, [pc, #212]	; (80097cc <_printf_i+0x244>)
 80096f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80096fc:	6829      	ldr	r1, [r5, #0]
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	f851 6b04 	ldr.w	r6, [r1], #4
 8009704:	6029      	str	r1, [r5, #0]
 8009706:	061d      	lsls	r5, r3, #24
 8009708:	d514      	bpl.n	8009734 <_printf_i+0x1ac>
 800970a:	07df      	lsls	r7, r3, #31
 800970c:	bf44      	itt	mi
 800970e:	f043 0320 	orrmi.w	r3, r3, #32
 8009712:	6023      	strmi	r3, [r4, #0]
 8009714:	b91e      	cbnz	r6, 800971e <_printf_i+0x196>
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	f023 0320 	bic.w	r3, r3, #32
 800971c:	6023      	str	r3, [r4, #0]
 800971e:	2310      	movs	r3, #16
 8009720:	e7b0      	b.n	8009684 <_printf_i+0xfc>
 8009722:	6823      	ldr	r3, [r4, #0]
 8009724:	f043 0320 	orr.w	r3, r3, #32
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	2378      	movs	r3, #120	; 0x78
 800972c:	4828      	ldr	r0, [pc, #160]	; (80097d0 <_printf_i+0x248>)
 800972e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009732:	e7e3      	b.n	80096fc <_printf_i+0x174>
 8009734:	0659      	lsls	r1, r3, #25
 8009736:	bf48      	it	mi
 8009738:	b2b6      	uxthmi	r6, r6
 800973a:	e7e6      	b.n	800970a <_printf_i+0x182>
 800973c:	4615      	mov	r5, r2
 800973e:	e7bb      	b.n	80096b8 <_printf_i+0x130>
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	6826      	ldr	r6, [r4, #0]
 8009744:	6961      	ldr	r1, [r4, #20]
 8009746:	1d18      	adds	r0, r3, #4
 8009748:	6028      	str	r0, [r5, #0]
 800974a:	0635      	lsls	r5, r6, #24
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	d501      	bpl.n	8009754 <_printf_i+0x1cc>
 8009750:	6019      	str	r1, [r3, #0]
 8009752:	e002      	b.n	800975a <_printf_i+0x1d2>
 8009754:	0670      	lsls	r0, r6, #25
 8009756:	d5fb      	bpl.n	8009750 <_printf_i+0x1c8>
 8009758:	8019      	strh	r1, [r3, #0]
 800975a:	2300      	movs	r3, #0
 800975c:	6123      	str	r3, [r4, #16]
 800975e:	4615      	mov	r5, r2
 8009760:	e7ba      	b.n	80096d8 <_printf_i+0x150>
 8009762:	682b      	ldr	r3, [r5, #0]
 8009764:	1d1a      	adds	r2, r3, #4
 8009766:	602a      	str	r2, [r5, #0]
 8009768:	681d      	ldr	r5, [r3, #0]
 800976a:	6862      	ldr	r2, [r4, #4]
 800976c:	2100      	movs	r1, #0
 800976e:	4628      	mov	r0, r5
 8009770:	f7f6 fdbe 	bl	80002f0 <memchr>
 8009774:	b108      	cbz	r0, 800977a <_printf_i+0x1f2>
 8009776:	1b40      	subs	r0, r0, r5
 8009778:	6060      	str	r0, [r4, #4]
 800977a:	6863      	ldr	r3, [r4, #4]
 800977c:	6123      	str	r3, [r4, #16]
 800977e:	2300      	movs	r3, #0
 8009780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009784:	e7a8      	b.n	80096d8 <_printf_i+0x150>
 8009786:	6923      	ldr	r3, [r4, #16]
 8009788:	462a      	mov	r2, r5
 800978a:	4649      	mov	r1, r9
 800978c:	4640      	mov	r0, r8
 800978e:	47d0      	blx	sl
 8009790:	3001      	adds	r0, #1
 8009792:	d0ab      	beq.n	80096ec <_printf_i+0x164>
 8009794:	6823      	ldr	r3, [r4, #0]
 8009796:	079b      	lsls	r3, r3, #30
 8009798:	d413      	bmi.n	80097c2 <_printf_i+0x23a>
 800979a:	68e0      	ldr	r0, [r4, #12]
 800979c:	9b03      	ldr	r3, [sp, #12]
 800979e:	4298      	cmp	r0, r3
 80097a0:	bfb8      	it	lt
 80097a2:	4618      	movlt	r0, r3
 80097a4:	e7a4      	b.n	80096f0 <_printf_i+0x168>
 80097a6:	2301      	movs	r3, #1
 80097a8:	4632      	mov	r2, r6
 80097aa:	4649      	mov	r1, r9
 80097ac:	4640      	mov	r0, r8
 80097ae:	47d0      	blx	sl
 80097b0:	3001      	adds	r0, #1
 80097b2:	d09b      	beq.n	80096ec <_printf_i+0x164>
 80097b4:	3501      	adds	r5, #1
 80097b6:	68e3      	ldr	r3, [r4, #12]
 80097b8:	9903      	ldr	r1, [sp, #12]
 80097ba:	1a5b      	subs	r3, r3, r1
 80097bc:	42ab      	cmp	r3, r5
 80097be:	dcf2      	bgt.n	80097a6 <_printf_i+0x21e>
 80097c0:	e7eb      	b.n	800979a <_printf_i+0x212>
 80097c2:	2500      	movs	r5, #0
 80097c4:	f104 0619 	add.w	r6, r4, #25
 80097c8:	e7f5      	b.n	80097b6 <_printf_i+0x22e>
 80097ca:	bf00      	nop
 80097cc:	08009b41 	.word	0x08009b41
 80097d0:	08009b52 	.word	0x08009b52

080097d4 <memcpy>:
 80097d4:	440a      	add	r2, r1
 80097d6:	4291      	cmp	r1, r2
 80097d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80097dc:	d100      	bne.n	80097e0 <memcpy+0xc>
 80097de:	4770      	bx	lr
 80097e0:	b510      	push	{r4, lr}
 80097e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097ea:	4291      	cmp	r1, r2
 80097ec:	d1f9      	bne.n	80097e2 <memcpy+0xe>
 80097ee:	bd10      	pop	{r4, pc}

080097f0 <memmove>:
 80097f0:	4288      	cmp	r0, r1
 80097f2:	b510      	push	{r4, lr}
 80097f4:	eb01 0402 	add.w	r4, r1, r2
 80097f8:	d902      	bls.n	8009800 <memmove+0x10>
 80097fa:	4284      	cmp	r4, r0
 80097fc:	4623      	mov	r3, r4
 80097fe:	d807      	bhi.n	8009810 <memmove+0x20>
 8009800:	1e43      	subs	r3, r0, #1
 8009802:	42a1      	cmp	r1, r4
 8009804:	d008      	beq.n	8009818 <memmove+0x28>
 8009806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800980a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800980e:	e7f8      	b.n	8009802 <memmove+0x12>
 8009810:	4402      	add	r2, r0
 8009812:	4601      	mov	r1, r0
 8009814:	428a      	cmp	r2, r1
 8009816:	d100      	bne.n	800981a <memmove+0x2a>
 8009818:	bd10      	pop	{r4, pc}
 800981a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800981e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009822:	e7f7      	b.n	8009814 <memmove+0x24>

08009824 <_free_r>:
 8009824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009826:	2900      	cmp	r1, #0
 8009828:	d044      	beq.n	80098b4 <_free_r+0x90>
 800982a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800982e:	9001      	str	r0, [sp, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	f1a1 0404 	sub.w	r4, r1, #4
 8009836:	bfb8      	it	lt
 8009838:	18e4      	addlt	r4, r4, r3
 800983a:	f000 f913 	bl	8009a64 <__malloc_lock>
 800983e:	4a1e      	ldr	r2, [pc, #120]	; (80098b8 <_free_r+0x94>)
 8009840:	9801      	ldr	r0, [sp, #4]
 8009842:	6813      	ldr	r3, [r2, #0]
 8009844:	b933      	cbnz	r3, 8009854 <_free_r+0x30>
 8009846:	6063      	str	r3, [r4, #4]
 8009848:	6014      	str	r4, [r2, #0]
 800984a:	b003      	add	sp, #12
 800984c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009850:	f000 b90e 	b.w	8009a70 <__malloc_unlock>
 8009854:	42a3      	cmp	r3, r4
 8009856:	d908      	bls.n	800986a <_free_r+0x46>
 8009858:	6825      	ldr	r5, [r4, #0]
 800985a:	1961      	adds	r1, r4, r5
 800985c:	428b      	cmp	r3, r1
 800985e:	bf01      	itttt	eq
 8009860:	6819      	ldreq	r1, [r3, #0]
 8009862:	685b      	ldreq	r3, [r3, #4]
 8009864:	1949      	addeq	r1, r1, r5
 8009866:	6021      	streq	r1, [r4, #0]
 8009868:	e7ed      	b.n	8009846 <_free_r+0x22>
 800986a:	461a      	mov	r2, r3
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	b10b      	cbz	r3, 8009874 <_free_r+0x50>
 8009870:	42a3      	cmp	r3, r4
 8009872:	d9fa      	bls.n	800986a <_free_r+0x46>
 8009874:	6811      	ldr	r1, [r2, #0]
 8009876:	1855      	adds	r5, r2, r1
 8009878:	42a5      	cmp	r5, r4
 800987a:	d10b      	bne.n	8009894 <_free_r+0x70>
 800987c:	6824      	ldr	r4, [r4, #0]
 800987e:	4421      	add	r1, r4
 8009880:	1854      	adds	r4, r2, r1
 8009882:	42a3      	cmp	r3, r4
 8009884:	6011      	str	r1, [r2, #0]
 8009886:	d1e0      	bne.n	800984a <_free_r+0x26>
 8009888:	681c      	ldr	r4, [r3, #0]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	6053      	str	r3, [r2, #4]
 800988e:	4421      	add	r1, r4
 8009890:	6011      	str	r1, [r2, #0]
 8009892:	e7da      	b.n	800984a <_free_r+0x26>
 8009894:	d902      	bls.n	800989c <_free_r+0x78>
 8009896:	230c      	movs	r3, #12
 8009898:	6003      	str	r3, [r0, #0]
 800989a:	e7d6      	b.n	800984a <_free_r+0x26>
 800989c:	6825      	ldr	r5, [r4, #0]
 800989e:	1961      	adds	r1, r4, r5
 80098a0:	428b      	cmp	r3, r1
 80098a2:	bf04      	itt	eq
 80098a4:	6819      	ldreq	r1, [r3, #0]
 80098a6:	685b      	ldreq	r3, [r3, #4]
 80098a8:	6063      	str	r3, [r4, #4]
 80098aa:	bf04      	itt	eq
 80098ac:	1949      	addeq	r1, r1, r5
 80098ae:	6021      	streq	r1, [r4, #0]
 80098b0:	6054      	str	r4, [r2, #4]
 80098b2:	e7ca      	b.n	800984a <_free_r+0x26>
 80098b4:	b003      	add	sp, #12
 80098b6:	bd30      	pop	{r4, r5, pc}
 80098b8:	24000274 	.word	0x24000274

080098bc <sbrk_aligned>:
 80098bc:	b570      	push	{r4, r5, r6, lr}
 80098be:	4e0e      	ldr	r6, [pc, #56]	; (80098f8 <sbrk_aligned+0x3c>)
 80098c0:	460c      	mov	r4, r1
 80098c2:	6831      	ldr	r1, [r6, #0]
 80098c4:	4605      	mov	r5, r0
 80098c6:	b911      	cbnz	r1, 80098ce <sbrk_aligned+0x12>
 80098c8:	f000 f8bc 	bl	8009a44 <_sbrk_r>
 80098cc:	6030      	str	r0, [r6, #0]
 80098ce:	4621      	mov	r1, r4
 80098d0:	4628      	mov	r0, r5
 80098d2:	f000 f8b7 	bl	8009a44 <_sbrk_r>
 80098d6:	1c43      	adds	r3, r0, #1
 80098d8:	d00a      	beq.n	80098f0 <sbrk_aligned+0x34>
 80098da:	1cc4      	adds	r4, r0, #3
 80098dc:	f024 0403 	bic.w	r4, r4, #3
 80098e0:	42a0      	cmp	r0, r4
 80098e2:	d007      	beq.n	80098f4 <sbrk_aligned+0x38>
 80098e4:	1a21      	subs	r1, r4, r0
 80098e6:	4628      	mov	r0, r5
 80098e8:	f000 f8ac 	bl	8009a44 <_sbrk_r>
 80098ec:	3001      	adds	r0, #1
 80098ee:	d101      	bne.n	80098f4 <sbrk_aligned+0x38>
 80098f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80098f4:	4620      	mov	r0, r4
 80098f6:	bd70      	pop	{r4, r5, r6, pc}
 80098f8:	24000278 	.word	0x24000278

080098fc <_malloc_r>:
 80098fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009900:	1ccd      	adds	r5, r1, #3
 8009902:	f025 0503 	bic.w	r5, r5, #3
 8009906:	3508      	adds	r5, #8
 8009908:	2d0c      	cmp	r5, #12
 800990a:	bf38      	it	cc
 800990c:	250c      	movcc	r5, #12
 800990e:	2d00      	cmp	r5, #0
 8009910:	4607      	mov	r7, r0
 8009912:	db01      	blt.n	8009918 <_malloc_r+0x1c>
 8009914:	42a9      	cmp	r1, r5
 8009916:	d905      	bls.n	8009924 <_malloc_r+0x28>
 8009918:	230c      	movs	r3, #12
 800991a:	603b      	str	r3, [r7, #0]
 800991c:	2600      	movs	r6, #0
 800991e:	4630      	mov	r0, r6
 8009920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009924:	4e2e      	ldr	r6, [pc, #184]	; (80099e0 <_malloc_r+0xe4>)
 8009926:	f000 f89d 	bl	8009a64 <__malloc_lock>
 800992a:	6833      	ldr	r3, [r6, #0]
 800992c:	461c      	mov	r4, r3
 800992e:	bb34      	cbnz	r4, 800997e <_malloc_r+0x82>
 8009930:	4629      	mov	r1, r5
 8009932:	4638      	mov	r0, r7
 8009934:	f7ff ffc2 	bl	80098bc <sbrk_aligned>
 8009938:	1c43      	adds	r3, r0, #1
 800993a:	4604      	mov	r4, r0
 800993c:	d14d      	bne.n	80099da <_malloc_r+0xde>
 800993e:	6834      	ldr	r4, [r6, #0]
 8009940:	4626      	mov	r6, r4
 8009942:	2e00      	cmp	r6, #0
 8009944:	d140      	bne.n	80099c8 <_malloc_r+0xcc>
 8009946:	6823      	ldr	r3, [r4, #0]
 8009948:	4631      	mov	r1, r6
 800994a:	4638      	mov	r0, r7
 800994c:	eb04 0803 	add.w	r8, r4, r3
 8009950:	f000 f878 	bl	8009a44 <_sbrk_r>
 8009954:	4580      	cmp	r8, r0
 8009956:	d13a      	bne.n	80099ce <_malloc_r+0xd2>
 8009958:	6821      	ldr	r1, [r4, #0]
 800995a:	3503      	adds	r5, #3
 800995c:	1a6d      	subs	r5, r5, r1
 800995e:	f025 0503 	bic.w	r5, r5, #3
 8009962:	3508      	adds	r5, #8
 8009964:	2d0c      	cmp	r5, #12
 8009966:	bf38      	it	cc
 8009968:	250c      	movcc	r5, #12
 800996a:	4629      	mov	r1, r5
 800996c:	4638      	mov	r0, r7
 800996e:	f7ff ffa5 	bl	80098bc <sbrk_aligned>
 8009972:	3001      	adds	r0, #1
 8009974:	d02b      	beq.n	80099ce <_malloc_r+0xd2>
 8009976:	6823      	ldr	r3, [r4, #0]
 8009978:	442b      	add	r3, r5
 800997a:	6023      	str	r3, [r4, #0]
 800997c:	e00e      	b.n	800999c <_malloc_r+0xa0>
 800997e:	6822      	ldr	r2, [r4, #0]
 8009980:	1b52      	subs	r2, r2, r5
 8009982:	d41e      	bmi.n	80099c2 <_malloc_r+0xc6>
 8009984:	2a0b      	cmp	r2, #11
 8009986:	d916      	bls.n	80099b6 <_malloc_r+0xba>
 8009988:	1961      	adds	r1, r4, r5
 800998a:	42a3      	cmp	r3, r4
 800998c:	6025      	str	r5, [r4, #0]
 800998e:	bf18      	it	ne
 8009990:	6059      	strne	r1, [r3, #4]
 8009992:	6863      	ldr	r3, [r4, #4]
 8009994:	bf08      	it	eq
 8009996:	6031      	streq	r1, [r6, #0]
 8009998:	5162      	str	r2, [r4, r5]
 800999a:	604b      	str	r3, [r1, #4]
 800999c:	4638      	mov	r0, r7
 800999e:	f104 060b 	add.w	r6, r4, #11
 80099a2:	f000 f865 	bl	8009a70 <__malloc_unlock>
 80099a6:	f026 0607 	bic.w	r6, r6, #7
 80099aa:	1d23      	adds	r3, r4, #4
 80099ac:	1af2      	subs	r2, r6, r3
 80099ae:	d0b6      	beq.n	800991e <_malloc_r+0x22>
 80099b0:	1b9b      	subs	r3, r3, r6
 80099b2:	50a3      	str	r3, [r4, r2]
 80099b4:	e7b3      	b.n	800991e <_malloc_r+0x22>
 80099b6:	6862      	ldr	r2, [r4, #4]
 80099b8:	42a3      	cmp	r3, r4
 80099ba:	bf0c      	ite	eq
 80099bc:	6032      	streq	r2, [r6, #0]
 80099be:	605a      	strne	r2, [r3, #4]
 80099c0:	e7ec      	b.n	800999c <_malloc_r+0xa0>
 80099c2:	4623      	mov	r3, r4
 80099c4:	6864      	ldr	r4, [r4, #4]
 80099c6:	e7b2      	b.n	800992e <_malloc_r+0x32>
 80099c8:	4634      	mov	r4, r6
 80099ca:	6876      	ldr	r6, [r6, #4]
 80099cc:	e7b9      	b.n	8009942 <_malloc_r+0x46>
 80099ce:	230c      	movs	r3, #12
 80099d0:	603b      	str	r3, [r7, #0]
 80099d2:	4638      	mov	r0, r7
 80099d4:	f000 f84c 	bl	8009a70 <__malloc_unlock>
 80099d8:	e7a1      	b.n	800991e <_malloc_r+0x22>
 80099da:	6025      	str	r5, [r4, #0]
 80099dc:	e7de      	b.n	800999c <_malloc_r+0xa0>
 80099de:	bf00      	nop
 80099e0:	24000274 	.word	0x24000274

080099e4 <_realloc_r>:
 80099e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e8:	4680      	mov	r8, r0
 80099ea:	4614      	mov	r4, r2
 80099ec:	460e      	mov	r6, r1
 80099ee:	b921      	cbnz	r1, 80099fa <_realloc_r+0x16>
 80099f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099f4:	4611      	mov	r1, r2
 80099f6:	f7ff bf81 	b.w	80098fc <_malloc_r>
 80099fa:	b92a      	cbnz	r2, 8009a08 <_realloc_r+0x24>
 80099fc:	f7ff ff12 	bl	8009824 <_free_r>
 8009a00:	4625      	mov	r5, r4
 8009a02:	4628      	mov	r0, r5
 8009a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a08:	f000 f838 	bl	8009a7c <_malloc_usable_size_r>
 8009a0c:	4284      	cmp	r4, r0
 8009a0e:	4607      	mov	r7, r0
 8009a10:	d802      	bhi.n	8009a18 <_realloc_r+0x34>
 8009a12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a16:	d812      	bhi.n	8009a3e <_realloc_r+0x5a>
 8009a18:	4621      	mov	r1, r4
 8009a1a:	4640      	mov	r0, r8
 8009a1c:	f7ff ff6e 	bl	80098fc <_malloc_r>
 8009a20:	4605      	mov	r5, r0
 8009a22:	2800      	cmp	r0, #0
 8009a24:	d0ed      	beq.n	8009a02 <_realloc_r+0x1e>
 8009a26:	42bc      	cmp	r4, r7
 8009a28:	4622      	mov	r2, r4
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	bf28      	it	cs
 8009a2e:	463a      	movcs	r2, r7
 8009a30:	f7ff fed0 	bl	80097d4 <memcpy>
 8009a34:	4631      	mov	r1, r6
 8009a36:	4640      	mov	r0, r8
 8009a38:	f7ff fef4 	bl	8009824 <_free_r>
 8009a3c:	e7e1      	b.n	8009a02 <_realloc_r+0x1e>
 8009a3e:	4635      	mov	r5, r6
 8009a40:	e7df      	b.n	8009a02 <_realloc_r+0x1e>
	...

08009a44 <_sbrk_r>:
 8009a44:	b538      	push	{r3, r4, r5, lr}
 8009a46:	4d06      	ldr	r5, [pc, #24]	; (8009a60 <_sbrk_r+0x1c>)
 8009a48:	2300      	movs	r3, #0
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	4608      	mov	r0, r1
 8009a4e:	602b      	str	r3, [r5, #0]
 8009a50:	f7f7 fb56 	bl	8001100 <_sbrk>
 8009a54:	1c43      	adds	r3, r0, #1
 8009a56:	d102      	bne.n	8009a5e <_sbrk_r+0x1a>
 8009a58:	682b      	ldr	r3, [r5, #0]
 8009a5a:	b103      	cbz	r3, 8009a5e <_sbrk_r+0x1a>
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	bd38      	pop	{r3, r4, r5, pc}
 8009a60:	2400027c 	.word	0x2400027c

08009a64 <__malloc_lock>:
 8009a64:	4801      	ldr	r0, [pc, #4]	; (8009a6c <__malloc_lock+0x8>)
 8009a66:	f000 b811 	b.w	8009a8c <__retarget_lock_acquire_recursive>
 8009a6a:	bf00      	nop
 8009a6c:	24000280 	.word	0x24000280

08009a70 <__malloc_unlock>:
 8009a70:	4801      	ldr	r0, [pc, #4]	; (8009a78 <__malloc_unlock+0x8>)
 8009a72:	f000 b80c 	b.w	8009a8e <__retarget_lock_release_recursive>
 8009a76:	bf00      	nop
 8009a78:	24000280 	.word	0x24000280

08009a7c <_malloc_usable_size_r>:
 8009a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a80:	1f18      	subs	r0, r3, #4
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	bfbc      	itt	lt
 8009a86:	580b      	ldrlt	r3, [r1, r0]
 8009a88:	18c0      	addlt	r0, r0, r3
 8009a8a:	4770      	bx	lr

08009a8c <__retarget_lock_acquire_recursive>:
 8009a8c:	4770      	bx	lr

08009a8e <__retarget_lock_release_recursive>:
 8009a8e:	4770      	bx	lr

08009a90 <_init>:
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	bf00      	nop
 8009a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a96:	bc08      	pop	{r3}
 8009a98:	469e      	mov	lr, r3
 8009a9a:	4770      	bx	lr

08009a9c <_fini>:
 8009a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a9e:	bf00      	nop
 8009aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aa2:	bc08      	pop	{r3}
 8009aa4:	469e      	mov	lr, r3
 8009aa6:	4770      	bx	lr
