
RECEPTION_UART_H7A3ZIQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf48  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800d1f8  0800d1f8  0001d1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d624  0800d624  0001d624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d62c  0800d62c  0001d62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d630  0800d630  0001d630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  0800d634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000728  2400009c  0800d6d0  0002009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240007c4  0800d6d0  000207c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b4b6  00000000  00000000  000200ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003457  00000000  00000000  0003b580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001308  00000000  00000000  0003e9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001190  00000000  00000000  0003fce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033735  00000000  00000000  00040e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cf87  00000000  00000000  000745a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00141ee9  00000000  00000000  0009152c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d3415  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000059cc  00000000  00000000  001d3468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         00000024  00000000  00000000  001d8e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000004e  00000000  00000000  001d8e58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400009c 	.word	0x2400009c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800d1e0 	.word	0x0800d1e0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000a0 	.word	0x240000a0
 80002ec:	0800d1e0 	.word	0x0800d1e0

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <Thrust_Init>:
 *      Author: romingo
 */

#include "Process.h"

void Thrust_Init(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL);
 8000698:	4b8b      	ldr	r3, [pc, #556]	; (80008c8 <Thrust_Init+0x234>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a8a      	ldr	r2, [pc, #552]	; (80008c8 <Thrust_Init+0x234>)
 800069e:	6852      	ldr	r2, [r2, #4]
 80006a0:	4611      	mov	r1, r2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f007 fa32 	bl	8007b0c <HAL_TIM_PWM_Start>
	HAL_Delay(500);
 80006a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ac:	f001 fd74 	bl	8002198 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MIN_Thrust);
 80006b0:	4b85      	ldr	r3, [pc, #532]	; (80008c8 <Thrust_Init+0x234>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d105      	bne.n	80006c4 <Thrust_Init+0x30>
 80006b8:	4b83      	ldr	r3, [pc, #524]	; (80008c8 <Thrust_Init+0x234>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2264      	movs	r2, #100	; 0x64
 80006c0:	635a      	str	r2, [r3, #52]	; 0x34
 80006c2:	e02c      	b.n	800071e <Thrust_Init+0x8a>
 80006c4:	4b80      	ldr	r3, [pc, #512]	; (80008c8 <Thrust_Init+0x234>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	2b04      	cmp	r3, #4
 80006ca:	d105      	bne.n	80006d8 <Thrust_Init+0x44>
 80006cc:	4b7e      	ldr	r3, [pc, #504]	; (80008c8 <Thrust_Init+0x234>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	2364      	movs	r3, #100	; 0x64
 80006d4:	6393      	str	r3, [r2, #56]	; 0x38
 80006d6:	e022      	b.n	800071e <Thrust_Init+0x8a>
 80006d8:	4b7b      	ldr	r3, [pc, #492]	; (80008c8 <Thrust_Init+0x234>)
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	2b08      	cmp	r3, #8
 80006de:	d105      	bne.n	80006ec <Thrust_Init+0x58>
 80006e0:	4b79      	ldr	r3, [pc, #484]	; (80008c8 <Thrust_Init+0x234>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	2364      	movs	r3, #100	; 0x64
 80006e8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006ea:	e018      	b.n	800071e <Thrust_Init+0x8a>
 80006ec:	4b76      	ldr	r3, [pc, #472]	; (80008c8 <Thrust_Init+0x234>)
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	2b0c      	cmp	r3, #12
 80006f2:	d105      	bne.n	8000700 <Thrust_Init+0x6c>
 80006f4:	4b74      	ldr	r3, [pc, #464]	; (80008c8 <Thrust_Init+0x234>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	6413      	str	r3, [r2, #64]	; 0x40
 80006fe:	e00e      	b.n	800071e <Thrust_Init+0x8a>
 8000700:	4b71      	ldr	r3, [pc, #452]	; (80008c8 <Thrust_Init+0x234>)
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	2b10      	cmp	r3, #16
 8000706:	d105      	bne.n	8000714 <Thrust_Init+0x80>
 8000708:	4b6f      	ldr	r3, [pc, #444]	; (80008c8 <Thrust_Init+0x234>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	2364      	movs	r3, #100	; 0x64
 8000710:	6593      	str	r3, [r2, #88]	; 0x58
 8000712:	e004      	b.n	800071e <Thrust_Init+0x8a>
 8000714:	4b6c      	ldr	r3, [pc, #432]	; (80008c8 <Thrust_Init+0x234>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	2364      	movs	r3, #100	; 0x64
 800071c:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(500);
 800071e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000722:	f001 fd39 	bl	8002198 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MAX_Thrust);
 8000726:	4b68      	ldr	r3, [pc, #416]	; (80008c8 <Thrust_Init+0x234>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d105      	bne.n	800073a <Thrust_Init+0xa6>
 800072e:	4b66      	ldr	r3, [pc, #408]	; (80008c8 <Thrust_Init+0x234>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2232      	movs	r2, #50	; 0x32
 8000736:	635a      	str	r2, [r3, #52]	; 0x34
 8000738:	e02c      	b.n	8000794 <Thrust_Init+0x100>
 800073a:	4b63      	ldr	r3, [pc, #396]	; (80008c8 <Thrust_Init+0x234>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	2b04      	cmp	r3, #4
 8000740:	d105      	bne.n	800074e <Thrust_Init+0xba>
 8000742:	4b61      	ldr	r3, [pc, #388]	; (80008c8 <Thrust_Init+0x234>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	2332      	movs	r3, #50	; 0x32
 800074a:	6393      	str	r3, [r2, #56]	; 0x38
 800074c:	e022      	b.n	8000794 <Thrust_Init+0x100>
 800074e:	4b5e      	ldr	r3, [pc, #376]	; (80008c8 <Thrust_Init+0x234>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	2b08      	cmp	r3, #8
 8000754:	d105      	bne.n	8000762 <Thrust_Init+0xce>
 8000756:	4b5c      	ldr	r3, [pc, #368]	; (80008c8 <Thrust_Init+0x234>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	2332      	movs	r3, #50	; 0x32
 800075e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000760:	e018      	b.n	8000794 <Thrust_Init+0x100>
 8000762:	4b59      	ldr	r3, [pc, #356]	; (80008c8 <Thrust_Init+0x234>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	2b0c      	cmp	r3, #12
 8000768:	d105      	bne.n	8000776 <Thrust_Init+0xe2>
 800076a:	4b57      	ldr	r3, [pc, #348]	; (80008c8 <Thrust_Init+0x234>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	2332      	movs	r3, #50	; 0x32
 8000772:	6413      	str	r3, [r2, #64]	; 0x40
 8000774:	e00e      	b.n	8000794 <Thrust_Init+0x100>
 8000776:	4b54      	ldr	r3, [pc, #336]	; (80008c8 <Thrust_Init+0x234>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	2b10      	cmp	r3, #16
 800077c:	d105      	bne.n	800078a <Thrust_Init+0xf6>
 800077e:	4b52      	ldr	r3, [pc, #328]	; (80008c8 <Thrust_Init+0x234>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	2332      	movs	r3, #50	; 0x32
 8000786:	6593      	str	r3, [r2, #88]	; 0x58
 8000788:	e004      	b.n	8000794 <Thrust_Init+0x100>
 800078a:	4b4f      	ldr	r3, [pc, #316]	; (80008c8 <Thrust_Init+0x234>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	2332      	movs	r3, #50	; 0x32
 8000792:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(500);
 8000794:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000798:	f001 fcfe 	bl	8002198 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MIN_Thrust);
 800079c:	4b4a      	ldr	r3, [pc, #296]	; (80008c8 <Thrust_Init+0x234>)
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d105      	bne.n	80007b0 <Thrust_Init+0x11c>
 80007a4:	4b48      	ldr	r3, [pc, #288]	; (80008c8 <Thrust_Init+0x234>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2264      	movs	r2, #100	; 0x64
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34
 80007ae:	e02c      	b.n	800080a <Thrust_Init+0x176>
 80007b0:	4b45      	ldr	r3, [pc, #276]	; (80008c8 <Thrust_Init+0x234>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	2b04      	cmp	r3, #4
 80007b6:	d105      	bne.n	80007c4 <Thrust_Init+0x130>
 80007b8:	4b43      	ldr	r3, [pc, #268]	; (80008c8 <Thrust_Init+0x234>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	2364      	movs	r3, #100	; 0x64
 80007c0:	6393      	str	r3, [r2, #56]	; 0x38
 80007c2:	e022      	b.n	800080a <Thrust_Init+0x176>
 80007c4:	4b40      	ldr	r3, [pc, #256]	; (80008c8 <Thrust_Init+0x234>)
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	2b08      	cmp	r3, #8
 80007ca:	d105      	bne.n	80007d8 <Thrust_Init+0x144>
 80007cc:	4b3e      	ldr	r3, [pc, #248]	; (80008c8 <Thrust_Init+0x234>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	2364      	movs	r3, #100	; 0x64
 80007d4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80007d6:	e018      	b.n	800080a <Thrust_Init+0x176>
 80007d8:	4b3b      	ldr	r3, [pc, #236]	; (80008c8 <Thrust_Init+0x234>)
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	2b0c      	cmp	r3, #12
 80007de:	d105      	bne.n	80007ec <Thrust_Init+0x158>
 80007e0:	4b39      	ldr	r3, [pc, #228]	; (80008c8 <Thrust_Init+0x234>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	2364      	movs	r3, #100	; 0x64
 80007e8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ea:	e00e      	b.n	800080a <Thrust_Init+0x176>
 80007ec:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <Thrust_Init+0x234>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	2b10      	cmp	r3, #16
 80007f2:	d105      	bne.n	8000800 <Thrust_Init+0x16c>
 80007f4:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <Thrust_Init+0x234>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	2364      	movs	r3, #100	; 0x64
 80007fc:	6593      	str	r3, [r2, #88]	; 0x58
 80007fe:	e004      	b.n	800080a <Thrust_Init+0x176>
 8000800:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <Thrust_Init+0x234>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	2364      	movs	r3, #100	; 0x64
 8000808:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(500);
 800080a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800080e:	f001 fcc3 	bl	8002198 <HAL_Delay>
	HAL_TIM_PWM_Start(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL);
 8000812:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <Thrust_Init+0x238>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a2d      	ldr	r2, [pc, #180]	; (80008cc <Thrust_Init+0x238>)
 8000818:	6852      	ldr	r2, [r2, #4]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f007 f975 	bl	8007b0c <HAL_TIM_PWM_Start>
	HAL_Delay(500);
 8000822:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000826:	f001 fcb7 	bl	8002198 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MIN_Thrust);
 800082a:	4b28      	ldr	r3, [pc, #160]	; (80008cc <Thrust_Init+0x238>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d105      	bne.n	800083e <Thrust_Init+0x1aa>
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <Thrust_Init+0x238>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2264      	movs	r2, #100	; 0x64
 800083a:	635a      	str	r2, [r3, #52]	; 0x34
 800083c:	e02c      	b.n	8000898 <Thrust_Init+0x204>
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <Thrust_Init+0x238>)
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	2b04      	cmp	r3, #4
 8000844:	d105      	bne.n	8000852 <Thrust_Init+0x1be>
 8000846:	4b21      	ldr	r3, [pc, #132]	; (80008cc <Thrust_Init+0x238>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	2364      	movs	r3, #100	; 0x64
 800084e:	6393      	str	r3, [r2, #56]	; 0x38
 8000850:	e022      	b.n	8000898 <Thrust_Init+0x204>
 8000852:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <Thrust_Init+0x238>)
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b08      	cmp	r3, #8
 8000858:	d105      	bne.n	8000866 <Thrust_Init+0x1d2>
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <Thrust_Init+0x238>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	2364      	movs	r3, #100	; 0x64
 8000862:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000864:	e018      	b.n	8000898 <Thrust_Init+0x204>
 8000866:	4b19      	ldr	r3, [pc, #100]	; (80008cc <Thrust_Init+0x238>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b0c      	cmp	r3, #12
 800086c:	d105      	bne.n	800087a <Thrust_Init+0x1e6>
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <Thrust_Init+0x238>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	2364      	movs	r3, #100	; 0x64
 8000876:	6413      	str	r3, [r2, #64]	; 0x40
 8000878:	e00e      	b.n	8000898 <Thrust_Init+0x204>
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <Thrust_Init+0x238>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	2b10      	cmp	r3, #16
 8000880:	d105      	bne.n	800088e <Thrust_Init+0x1fa>
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <Thrust_Init+0x238>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	2364      	movs	r3, #100	; 0x64
 800088a:	6593      	str	r3, [r2, #88]	; 0x58
 800088c:	e004      	b.n	8000898 <Thrust_Init+0x204>
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <Thrust_Init+0x238>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	2364      	movs	r3, #100	; 0x64
 8000896:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_Delay(500);
 8000898:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800089c:	f001 fc7c 	bl	8002198 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MAX_Thrust);
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <Thrust_Init+0x238>)
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d105      	bne.n	80008b4 <Thrust_Init+0x220>
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <Thrust_Init+0x238>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2232      	movs	r2, #50	; 0x32
 80008b0:	635a      	str	r2, [r3, #52]	; 0x34
 80008b2:	e030      	b.n	8000916 <Thrust_Init+0x282>
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <Thrust_Init+0x238>)
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d109      	bne.n	80008d0 <Thrust_Init+0x23c>
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <Thrust_Init+0x238>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	2332      	movs	r3, #50	; 0x32
 80008c4:	6393      	str	r3, [r2, #56]	; 0x38
 80008c6:	e026      	b.n	8000916 <Thrust_Init+0x282>
 80008c8:	24000000 	.word	0x24000000
 80008cc:	24000008 	.word	0x24000008
 80008d0:	4b31      	ldr	r3, [pc, #196]	; (8000998 <Thrust_Init+0x304>)
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	2b08      	cmp	r3, #8
 80008d6:	d105      	bne.n	80008e4 <Thrust_Init+0x250>
 80008d8:	4b2f      	ldr	r3, [pc, #188]	; (8000998 <Thrust_Init+0x304>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	2332      	movs	r3, #50	; 0x32
 80008e0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008e2:	e018      	b.n	8000916 <Thrust_Init+0x282>
 80008e4:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <Thrust_Init+0x304>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	2b0c      	cmp	r3, #12
 80008ea:	d105      	bne.n	80008f8 <Thrust_Init+0x264>
 80008ec:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <Thrust_Init+0x304>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	2332      	movs	r3, #50	; 0x32
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	e00e      	b.n	8000916 <Thrust_Init+0x282>
 80008f8:	4b27      	ldr	r3, [pc, #156]	; (8000998 <Thrust_Init+0x304>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b10      	cmp	r3, #16
 80008fe:	d105      	bne.n	800090c <Thrust_Init+0x278>
 8000900:	4b25      	ldr	r3, [pc, #148]	; (8000998 <Thrust_Init+0x304>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	2332      	movs	r3, #50	; 0x32
 8000908:	6593      	str	r3, [r2, #88]	; 0x58
 800090a:	e004      	b.n	8000916 <Thrust_Init+0x282>
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <Thrust_Init+0x304>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	2332      	movs	r3, #50	; 0x32
 8000914:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(500);
 8000916:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800091a:	f001 fc3d 	bl	8002198 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MIN_Thrust);
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <Thrust_Init+0x304>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d105      	bne.n	8000932 <Thrust_Init+0x29e>
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <Thrust_Init+0x304>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2264      	movs	r2, #100	; 0x64
 800092e:	635a      	str	r2, [r3, #52]	; 0x34
 8000930:	e02c      	b.n	800098c <Thrust_Init+0x2f8>
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <Thrust_Init+0x304>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	2b04      	cmp	r3, #4
 8000938:	d105      	bne.n	8000946 <Thrust_Init+0x2b2>
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <Thrust_Init+0x304>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	2364      	movs	r3, #100	; 0x64
 8000942:	6393      	str	r3, [r2, #56]	; 0x38
 8000944:	e022      	b.n	800098c <Thrust_Init+0x2f8>
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <Thrust_Init+0x304>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	2b08      	cmp	r3, #8
 800094c:	d105      	bne.n	800095a <Thrust_Init+0x2c6>
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <Thrust_Init+0x304>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	2364      	movs	r3, #100	; 0x64
 8000956:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000958:	e018      	b.n	800098c <Thrust_Init+0x2f8>
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <Thrust_Init+0x304>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	2b0c      	cmp	r3, #12
 8000960:	d105      	bne.n	800096e <Thrust_Init+0x2da>
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <Thrust_Init+0x304>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	2364      	movs	r3, #100	; 0x64
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
 800096c:	e00e      	b.n	800098c <Thrust_Init+0x2f8>
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <Thrust_Init+0x304>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	2b10      	cmp	r3, #16
 8000974:	d105      	bne.n	8000982 <Thrust_Init+0x2ee>
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <Thrust_Init+0x304>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	2364      	movs	r3, #100	; 0x64
 800097e:	6593      	str	r3, [r2, #88]	; 0x58
 8000980:	e004      	b.n	800098c <Thrust_Init+0x2f8>
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <Thrust_Init+0x304>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	2364      	movs	r3, #100	; 0x64
 800098a:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(500);
 800098c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000990:	f001 fc02 	bl	8002198 <HAL_Delay>

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	24000008 	.word	0x24000008

0800099c <Depth_Init>:
void Depth_Init(void){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
	uint8_t t=0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	71fb      	strb	r3, [r7, #7]
	while(t<100){
 80009a6:	e019      	b.n	80009dc <Depth_Init+0x40>
		//XL320_set_led_ON(XL_Front.huartXL,2); //Green Led
		XL320_set_led_ON(XL_Back.huartXL,2);
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <Depth_Init+0x50>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2102      	movs	r1, #2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 fb16 	bl	8000fe0 <XL320_set_led_ON>
		XL320_set_torque_enable(XL_Back.huartXL);
 80009b4:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <Depth_Init+0x50>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 fb4f 	bl	800105c <XL320_set_torque_enable>
		XL320_set_pos(XL_Front.huartXL, ( uint16_t )0);
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <Depth_Init+0x54>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 fb73 	bl	80010b0 <XL320_set_pos>
		XL320_set_pos(XL_Back.huartXL, ( uint16_t )0);
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <Depth_Init+0x50>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 fb6d 	bl	80010b0 <XL320_set_pos>
		t++;
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	3301      	adds	r3, #1
 80009da:	71fb      	strb	r3, [r7, #7]
	while(t<100){
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b63      	cmp	r3, #99	; 0x63
 80009e0:	d9e2      	bls.n	80009a8 <Depth_Init+0xc>
	}

}
 80009e2:	bf00      	nop
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	24000018 	.word	0x24000018
 80009f0:	24000010 	.word	0x24000010

080009f4 <Process_Init>:
void Process_Init(void){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	Thrust_Init();
 80009f8:	f7ff fe4c 	bl	8000694 <Thrust_Init>
	Depth_Init();
 80009fc:	f7ff ffce 	bl	800099c <Depth_Init>
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <Process>:

void Process(receiveMsg* message) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
    AdjustAngle(message->thrust,message->angle);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	781a      	ldrb	r2, [r3, #0]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000a16:	4619      	mov	r1, r3
 8000a18:	4610      	mov	r0, r2
 8000a1a:	f000 f889 	bl	8000b30 <AdjustAngle>
    AdjustDepth(&XL_Net,message->depth);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	789b      	ldrb	r3, [r3, #2]
 8000a22:	4619      	mov	r1, r3
 8000a24:	4803      	ldr	r0, [pc, #12]	; (8000a34 <Process+0x30>)
 8000a26:	f000 f8b1 	bl	8000b8c <AdjustDepth>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	24000020 	.word	0x24000020

08000a38 <AdjustThrust>:

void AdjustThrust( TIM_PROP* tim_prop, uint8_t thrust) {
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	70fb      	strb	r3, [r7, #3]
	float thrust_ms = 1-(thrust * ((float)(MIN_Thrust - MAX_Thrust) / 100.0)) + MIN_Thrust;
 8000a44:	78fb      	ldrb	r3, [r7, #3]
 8000a46:	ee07 3a90 	vmov	s15, r3
 8000a4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a4e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000a52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a56:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000a5a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a5e:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8000b28 <AdjustThrust+0xf0>
 8000a62:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a6a:	edc7 7a03 	vstr	s15, [r7, #12]
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d10a      	bne.n	8000a8c <AdjustThrust+0x54>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a84:	ee17 2a90 	vmov	r2, s15
 8000a88:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a8a:	e045      	b.n	8000b18 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	2b04      	cmp	r3, #4
 8000a92:	d10a      	bne.n	8000aaa <AdjustThrust+0x72>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aa2:	ee17 3a90 	vmov	r3, s15
 8000aa6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000aa8:	e036      	b.n	8000b18 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	2b08      	cmp	r3, #8
 8000ab0:	d10a      	bne.n	8000ac8 <AdjustThrust+0x90>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ac0:	ee17 3a90 	vmov	r3, s15
 8000ac4:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000ac6:	e027      	b.n	8000b18 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b0c      	cmp	r3, #12
 8000ace:	d10a      	bne.n	8000ae6 <AdjustThrust+0xae>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ade:	ee17 3a90 	vmov	r3, s15
 8000ae2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ae4:	e018      	b.n	8000b18 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	2b10      	cmp	r3, #16
 8000aec:	d10a      	bne.n	8000b04 <AdjustThrust+0xcc>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000afc:	ee17 3a90 	vmov	r3, s15
 8000b00:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000b02:	e009      	b.n	8000b18 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b12:	ee17 3a90 	vmov	r3, s15
 8000b16:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	f3af 8000 	nop.w
 8000b28:	00000000 	.word	0x00000000
 8000b2c:	40590000 	.word	0x40590000

08000b30 <AdjustAngle>:

void AdjustAngle(uint8_t thrust,int8_t angle){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	460a      	mov	r2, r1
 8000b3a:	71fb      	strb	r3, [r7, #7]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	71bb      	strb	r3, [r7, #6]
	uint8_t thrust_G = thrust;
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	73fb      	strb	r3, [r7, #15]
	uint8_t thrust_D = thrust;
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	73bb      	strb	r3, [r7, #14]

	if (angle<50){//On tourne a gauche
 8000b48:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b4c:	2b31      	cmp	r3, #49	; 0x31
 8000b4e:	dc03      	bgt.n	8000b58 <AdjustAngle+0x28>
		thrust_G = thrust;
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	73fb      	strb	r3, [r7, #15]
		thrust_D = 0; // Ajouter une diminution progressive des pousses moteurs
 8000b54:	2300      	movs	r3, #0
 8000b56:	73bb      	strb	r3, [r7, #14]
	}
	if (angle>50){//On tourne a droite
 8000b58:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b5c:	2b32      	cmp	r3, #50	; 0x32
 8000b5e:	dd03      	ble.n	8000b68 <AdjustAngle+0x38>
		thrust_G = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	73fb      	strb	r3, [r7, #15]
		thrust_D = thrust;
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	73bb      	strb	r3, [r7, #14]
	}
	AdjustThrust(&TIM_PROP_G, thrust_G);
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <AdjustAngle+0x54>)
 8000b6e:	f7ff ff63 	bl	8000a38 <AdjustThrust>
	AdjustThrust(&TIM_PROP_D, thrust_D);
 8000b72:	7bbb      	ldrb	r3, [r7, #14]
 8000b74:	4619      	mov	r1, r3
 8000b76:	4804      	ldr	r0, [pc, #16]	; (8000b88 <AdjustAngle+0x58>)
 8000b78:	f7ff ff5e 	bl	8000a38 <AdjustThrust>
}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	24000000 	.word	0x24000000
 8000b88:	24000008 	.word	0x24000008

08000b8c <AdjustDepth>:

void AdjustDepth(XL_Network* XL_Net,uint8_t depth){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	70fb      	strb	r3, [r7, #3]
	//Logique:
	//on repartit équitablement la descente des ballasts

	//XL320_set_pos(XL_Net->XL_Front->huartXL , depth*3); // Dans XL320_set_pos on map de 0,300 --> 0,1023 ici on veut map de 0,100 --> 0,1023
	XL320_set_pos(XL_Net->XL_Back->huartXL , (uint16_t)depth*3);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	78fa      	ldrb	r2, [r7, #3]
 8000ba0:	b292      	uxth	r2, r2
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	0049      	lsls	r1, r1, #1
 8000ba6:	440a      	add	r2, r1
 8000ba8:	b292      	uxth	r2, r2
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 fa7f 	bl	80010b0 <XL320_set_pos>
	XL320_set_led_ON(XL_Net->XL_Back->huartXL , 5);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2105      	movs	r1, #5
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 fa10 	bl	8000fe0 <XL320_set_led_ON>

	XL_Net->XL_Front->pos = (uint16_t)depth*3;
 8000bc0:	78fb      	ldrb	r3, [r7, #3]
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4611      	mov	r1, r2
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	440a      	add	r2, r1
 8000bce:	b292      	uxth	r2, r2
 8000bd0:	80da      	strh	r2, [r3, #6]
	XL_Net->XL_Back->pos = (uint16_t)depth*3;
 8000bd2:	78fb      	ldrb	r3, [r7, #3]
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	0049      	lsls	r1, r1, #1
 8000bde:	440a      	add	r2, r1
 8000be0:	b292      	uxth	r2, r2
 8000be2:	80da      	strh	r2, [r3, #6]


}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <RPICom_Init>:
#include "RPICom.h"

RPICom_HandleTypeDef hRPICom;
void RPICom_Init(UART_HandleTypeDef* huart, UART_HandleTypeDef* huartDebug){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
	hRPICom.huart = huart;
 8000bf6:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <RPICom_Init+0x70>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6013      	str	r3, [r2, #0]
	hRPICom.huartDebug = huartDebug;
 8000bfc:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <RPICom_Init+0x70>)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	6053      	str	r3, [r2, #4]
 8000c02:	2300      	movs	r3, #0
 8000c04:	681b      	ldr	r3, [r3, #0]
	memcpy(&(hRPICom.receiveMessage), NULL, sizeof(receiveMsg));
 8000c06:	4a15      	ldr	r2, [pc, #84]	; (8000c5c <RPICom_Init+0x70>)
 8000c08:	6093      	str	r3, [r2, #8]
	memcpy(hRPICom.RxBuffer, NULL , UART_RPI_RX_BUFFER_SIZE);
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <RPICom_Init+0x70>)
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	f103 0213 	add.w	r2, r3, #19
 8000c12:	460b      	mov	r3, r1
 8000c14:	cb03      	ldmia	r3!, {r0, r1}
 8000c16:	6010      	str	r0, [r2, #0]
 8000c18:	6051      	str	r1, [r2, #4]
	memcpy(hRPICom.TxBuffer, NULL, UART_RPI_TX_BUFFER_SIZE);
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <RPICom_Init+0x70>)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	f103 021b 	add.w	r2, r3, #27
 8000c22:	460b      	mov	r3, r1
 8000c24:	cb03      	ldmia	r3!, {r0, r1}
 8000c26:	6010      	str	r0, [r2, #0]
 8000c28:	6051      	str	r1, [r2, #4]
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	8113      	strh	r3, [r2, #8]
	memcpy(hRPICom.DebugBuffer, NULL, UART_RPI_DEBUG_BUFFER_SIZE);
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <RPICom_Init+0x70>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	3325      	adds	r3, #37	; 0x25
 8000c34:	4611      	mov	r1, r2
 8000c36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f00b f83e 	bl	800bcbc <memcpy>
	hRPICom.sendMessage.paquetNumber = 0;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <RPICom_Init+0x70>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	745a      	strb	r2, [r3, #17]
	hRPICom.errorNumberRx = 0;
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <RPICom_Init+0x70>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	749a      	strb	r2, [r3, #18]

	RPICom_UartActivate(&hRPICom);
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <RPICom_Init+0x70>)
 8000c4e:	f000 f807 	bl	8000c60 <RPICom_UartActivate>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	240000b8 	.word	0x240000b8

08000c60 <RPICom_UartActivate>:

void RPICom_UartActivate(RPICom_HandleTypeDef* hRPI){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(hRPI->huart, hRPI->RxBuffer, UART_RPI_RX_BUFFER_SIZE);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6818      	ldr	r0, [r3, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3313      	adds	r3, #19
 8000c70:	2208      	movs	r2, #8
 8000c72:	4619      	mov	r1, r3
 8000c74:	f008 fa08 	bl	8009088 <HAL_UART_Receive_IT>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <checkSum>:

uint8_t checkSum(uint8_t buffer[],uint8_t buffer_size){
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	70fb      	strb	r3, [r7, #3]
	uint8_t checkSum = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < buffer_size-1; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	e009      	b.n	8000caa <checkSum+0x2a>
		checkSum ^= buffer[i];
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	781a      	ldrb	r2, [r3, #0]
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	4053      	eors	r3, r2
 8000ca2:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < buffer_size-1; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	78fb      	ldrb	r3, [r7, #3]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbf0      	blt.n	8000c96 <checkSum+0x16>
	}
	return checkSum;
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <RPICom_DecodeBinaryMessage>:

void RPICom_DecodeBinaryMessage(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af04      	add	r7, sp, #16
	hRPICom.errorNumberRx = '0';
 8000cca:	4b30      	ldr	r3, [pc, #192]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000ccc:	2230      	movs	r2, #48	; 0x30
 8000cce:	749a      	strb	r2, [r3, #18]
	// Check Header
	if (HEADER_CheckValue1 != hRPICom.RxBuffer[0] || HEADER_CheckValue2 != hRPICom.RxBuffer[1]){//On envoie une erreur à la raspberry
 8000cd0:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000cd2:	7cdb      	ldrb	r3, [r3, #19]
 8000cd4:	2bff      	cmp	r3, #255	; 0xff
 8000cd6:	d103      	bne.n	8000ce0 <RPICom_DecodeBinaryMessage+0x1c>
 8000cd8:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000cda:	7d1b      	ldrb	r3, [r3, #20]
 8000cdc:	2bfe      	cmp	r3, #254	; 0xfe
 8000cde:	d002      	beq.n	8000ce6 <RPICom_DecodeBinaryMessage+0x22>
		hRPICom.errorNumberRx ='1';
 8000ce0:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000ce2:	2231      	movs	r2, #49	; 0x31
 8000ce4:	749a      	strb	r2, [r3, #18]
	}
	// Check Length
	if (UART_RPI_RX_BUFFER_SIZE != hRPICom.RxBuffer[2]){// Il nous manque des informations
 8000ce6:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000ce8:	7d5b      	ldrb	r3, [r3, #21]
 8000cea:	2b08      	cmp	r3, #8
 8000cec:	d002      	beq.n	8000cf4 <RPICom_DecodeBinaryMessage+0x30>
		hRPICom.errorNumberRx='2';
 8000cee:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000cf0:	2232      	movs	r2, #50	; 0x32
 8000cf2:	749a      	strb	r2, [r3, #18]
	}
	hRPICom.receiveMessage.thrust = hRPICom.RxBuffer[3];
 8000cf4:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000cf6:	7d9a      	ldrb	r2, [r3, #22]
 8000cf8:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000cfa:	721a      	strb	r2, [r3, #8]
	hRPICom.receiveMessage.angle = hRPICom.RxBuffer[4];
 8000cfc:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000cfe:	7ddb      	ldrb	r3, [r3, #23]
 8000d00:	b25a      	sxtb	r2, r3
 8000d02:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000d04:	725a      	strb	r2, [r3, #9]
	hRPICom.receiveMessage.depth = hRPICom.RxBuffer[5];
 8000d06:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000d08:	7e1a      	ldrb	r2, [r3, #24]
 8000d0a:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000d0c:	729a      	strb	r2, [r3, #10]
	hRPICom.receiveMessage.paquetNumber = hRPICom.RxBuffer[6];
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000d10:	7e5a      	ldrb	r2, [r3, #25]
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000d14:	72da      	strb	r2, [r3, #11]

	//Checksum
	if(checkSum(hRPICom.RxBuffer,UART_RPI_RX_BUFFER_SIZE) !=  hRPICom.RxBuffer[7]){
 8000d16:	2108      	movs	r1, #8
 8000d18:	481d      	ldr	r0, [pc, #116]	; (8000d90 <RPICom_DecodeBinaryMessage+0xcc>)
 8000d1a:	f7ff ffb1 	bl	8000c80 <checkSum>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000d24:	7e9b      	ldrb	r3, [r3, #26]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d002      	beq.n	8000d30 <RPICom_DecodeBinaryMessage+0x6c>
		hRPICom.errorNumberRx='3';
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000d2c:	2233      	movs	r2, #51	; 0x33
 8000d2e:	749a      	strb	r2, [r3, #18]
	}

	//Response RPI
	uint8_t stringLength = snprintf((char *)hRPICom.DebugBuffer, UART_RPI_DEBUG_BUFFER_SIZE, "[RECEPTION]\nPaquet: %u\r\nThrust: %u\nAngle: %u\r\nStatut: %c\r\n", hRPICom.receiveMessage.paquetNumber,hRPICom.receiveMessage.thrust,hRPICom.receiveMessage.angle,hRPICom.errorNumberRx);
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000d32:	7adb      	ldrb	r3, [r3, #11]
 8000d34:	4618      	mov	r0, r3
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000d38:	7a1b      	ldrb	r3, [r3, #8]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000d3e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000d42:	4619      	mov	r1, r3
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000d46:	7c9b      	ldrb	r3, [r3, #18]
 8000d48:	9302      	str	r3, [sp, #8]
 8000d4a:	9101      	str	r1, [sp, #4]
 8000d4c:	9200      	str	r2, [sp, #0]
 8000d4e:	4603      	mov	r3, r0
 8000d50:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <RPICom_DecodeBinaryMessage+0xd0>)
 8000d52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d56:	4810      	ldr	r0, [pc, #64]	; (8000d98 <RPICom_DecodeBinaryMessage+0xd4>)
 8000d58:	f00b f832 	bl	800bdc0 <sniprintf>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(hRPICom.huartDebug, hRPICom.DebugBuffer, stringLength, 10);
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000d62:	6858      	ldr	r0, [r3, #4]
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	230a      	movs	r3, #10
 8000d6a:	490b      	ldr	r1, [pc, #44]	; (8000d98 <RPICom_DecodeBinaryMessage+0xd4>)
 8000d6c:	f008 f86a 	bl	8008e44 <HAL_UART_Transmit>


	// Vous avez maintenant un message complet dans la structure receiveMessage
	// Vous pouvez faire quelque chose avec ces données, par exemple, appeler une fonction de traitement

	if (hRPICom.errorNumberRx =='0'){
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000d72:	7c9b      	ldrb	r3, [r3, #18]
 8000d74:	2b30      	cmp	r3, #48	; 0x30
 8000d76:	d102      	bne.n	8000d7e <RPICom_DecodeBinaryMessage+0xba>
		Process(&hRPICom.receiveMessage);
 8000d78:	4808      	ldr	r0, [pc, #32]	; (8000d9c <RPICom_DecodeBinaryMessage+0xd8>)
 8000d7a:	f7ff fe43 	bl	8000a04 <Process>
	}
	RPICom_UartActivate(&hRPICom);
 8000d7e:	4803      	ldr	r0, [pc, #12]	; (8000d8c <RPICom_DecodeBinaryMessage+0xc8>)
 8000d80:	f7ff ff6e 	bl	8000c60 <RPICom_UartActivate>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	240000b8 	.word	0x240000b8
 8000d90:	240000cb 	.word	0x240000cb
 8000d94:	0800d1f8 	.word	0x0800d1f8
 8000d98:	240000dd 	.word	0x240000dd
 8000d9c:	240000c0 	.word	0x240000c0

08000da0 <acquireData>:
void acquireData(void){ //Factoriser surement dans un fichier AcquireData
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	//interroge inertielle
	 hRPICom.sendMessage.posX = randomize(0,100);
 8000da4:	2164      	movs	r1, #100	; 0x64
 8000da6:	2000      	movs	r0, #0
 8000da8:	f000 f850 	bl	8000e4c <randomize>
 8000dac:	4603      	mov	r3, r0
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <acquireData+0x50>)
 8000db2:	731a      	strb	r2, [r3, #12]
	 hRPICom.sendMessage.posY = randomize(0,100);
 8000db4:	2164      	movs	r1, #100	; 0x64
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 f848 	bl	8000e4c <randomize>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <acquireData+0x50>)
 8000dc2:	735a      	strb	r2, [r3, #13]
	 hRPICom.sendMessage.angleDelta = 1;
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <acquireData+0x50>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	739a      	strb	r2, [r3, #14]
	//interroge capteur temp
	 hRPICom.sendMessage.temp = randomize(15,30);
 8000dca:	211e      	movs	r1, #30
 8000dcc:	200f      	movs	r0, #15
 8000dce:	f000 f83d 	bl	8000e4c <randomize>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <acquireData+0x50>)
 8000dd8:	73da      	strb	r2, [r3, #15]
	//interroge batterie
	 hRPICom.sendMessage.batteryPower = 90;
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <acquireData+0x50>)
 8000ddc:	225a      	movs	r2, #90	; 0x5a
 8000dde:	741a      	strb	r2, [r3, #16]
	 hRPICom.sendMessage.paquetNumber+=1;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <acquireData+0x50>)
 8000de2:	7c5b      	ldrb	r3, [r3, #17]
 8000de4:	3301      	adds	r3, #1
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	4b01      	ldr	r3, [pc, #4]	; (8000df0 <acquireData+0x50>)
 8000dea:	745a      	strb	r2, [r3, #17]

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	240000b8 	.word	0x240000b8

08000df4 <RPICom_SendBinaryMessage>:
void RPICom_SendBinaryMessage(void){ //Declencher par TIM3_IT ttes les 1s
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	acquireData();
 8000df8:	f7ff ffd2 	bl	8000da0 <acquireData>
	hRPICom.TxBuffer[0]=HEADER_CheckValue1;
 8000dfc:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <RPICom_SendBinaryMessage+0x4c>)
 8000dfe:	22ff      	movs	r2, #255	; 0xff
 8000e00:	76da      	strb	r2, [r3, #27]
	hRPICom.TxBuffer[1]=HEADER_CheckValue2;
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <RPICom_SendBinaryMessage+0x4c>)
 8000e04:	22fe      	movs	r2, #254	; 0xfe
 8000e06:	771a      	strb	r2, [r3, #28]
	hRPICom.TxBuffer[2]=UART_RPI_TX_BUFFER_SIZE;
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <RPICom_SendBinaryMessage+0x4c>)
 8000e0a:	220a      	movs	r2, #10
 8000e0c:	775a      	strb	r2, [r3, #29]

	memcpy(hRPICom.TxBuffer + 3, &hRPICom.sendMessage, sizeof(hRPICom.sendMessage));
 8000e0e:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <RPICom_SendBinaryMessage+0x50>)
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <RPICom_SendBinaryMessage+0x4c>)
 8000e12:	330c      	adds	r3, #12
 8000e14:	6818      	ldr	r0, [r3, #0]
 8000e16:	6010      	str	r0, [r2, #0]
 8000e18:	889b      	ldrh	r3, [r3, #4]
 8000e1a:	8093      	strh	r3, [r2, #4]

	hRPICom.TxBuffer[9]=checkSum(hRPICom.TxBuffer,sizeof(hRPICom.sendMessage)+3);
 8000e1c:	2109      	movs	r1, #9
 8000e1e:	480a      	ldr	r0, [pc, #40]	; (8000e48 <RPICom_SendBinaryMessage+0x54>)
 8000e20:	f7ff ff2e 	bl	8000c80 <checkSum>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <RPICom_SendBinaryMessage+0x4c>)
 8000e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	HAL_UART_Transmit_IT(hRPICom.huart, hRPICom.TxBuffer, UART_RPI_TX_BUFFER_SIZE);
 8000e2e:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <RPICom_SendBinaryMessage+0x4c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	220a      	movs	r2, #10
 8000e34:	4904      	ldr	r1, [pc, #16]	; (8000e48 <RPICom_SendBinaryMessage+0x54>)
 8000e36:	4618      	mov	r0, r3
 8000e38:	f008 f892 	bl	8008f60 <HAL_UART_Transmit_IT>
	//Response RPI
	/**
	uint8_t stringLength = snprintf((char *)hRPICom.DebugBuffer, UART_RPI_DEBUG_BUFFER_SIZE, "[SEND]\n\rPaquet:\t%u\n\rBatteryPower:\t%u\n\rPosition:\t%u-%u-%u°\n\r",hRPICom.sendMessage.paquetNumber,hRPICom.sendMessage.batteryPower,hRPICom.sendMessage.posX,hRPICom.sendMessage.posY,hRPICom.sendMessage.angleDelta);
	HAL_UART_Transmit(hRPICom.huartDebug, hRPICom.DebugBuffer, stringLength, 10);
	 **/
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	240000b8 	.word	0x240000b8
 8000e44:	240000d6 	.word	0x240000d6
 8000e48:	240000d3 	.word	0x240000d3

08000e4c <randomize>:

int randomize(int min, int max) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
	srand(time(NULL));
 8000e56:	2000      	movs	r0, #0
 8000e58:	f00a ffe6 	bl	800be28 <time>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4613      	mov	r3, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f00a ff40 	bl	800bce8 <srand>
    return min + rand() % (max - min + 1);
 8000e68:	f00a ff6c 	bl	800bd44 <rand>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	6839      	ldr	r1, [r7, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	1acb      	subs	r3, r1, r3
 8000e74:	3301      	adds	r3, #1
 8000e76:	fb92 f1f3 	sdiv	r1, r2, r3
 8000e7a:	fb01 f303 	mul.w	r3, r1, r3
 8000e7e:	1ad2      	subs	r2, r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4413      	add	r3, r2
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <MX_DMA_Init+0x3c>)
 8000e94:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e98:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <MX_DMA_Init+0x3c>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_DMA_Init+0x3c>)
 8000ea4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	200b      	movs	r0, #11
 8000eb6:	f001 fa6e 	bl	8002396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000eba:	200b      	movs	r0, #11
 8000ebc:	f001 fa85 	bl	80023ca <HAL_NVIC_EnableIRQ>

}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	58024400 	.word	0x58024400

08000ecc <update_crc>:

#include "dynamixel_protocol2.h"

uint16_t update_crc(uint16_t crc_accum, unsigned char *data_blk_ptr, uint16_t data_blk_size)

{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000ed8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000edc:	6019      	str	r1, [r3, #0]
 8000ede:	4611      	mov	r1, r2
 8000ee0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000ee4:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000ee8:	4602      	mov	r2, r0
 8000eea:	801a      	strh	r2, [r3, #0]
 8000eec:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000ef0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000ef4:	460a      	mov	r2, r1
 8000ef6:	801a      	strh	r2, [r3, #0]

	uint16_t i, j;

	uint16_t crc_table[256] = {
 8000ef8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000efc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f00:	4a28      	ldr	r2, [pc, #160]	; (8000fa4 <update_crc+0xd8>)
 8000f02:	4618      	mov	r0, r3
 8000f04:	4611      	mov	r1, r2
 8000f06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	f00a fed6 	bl	800bcbc <memcpy>

	};



	for(j = 0; j < data_blk_size; j++)
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000f16:	e031      	b.n	8000f7c <update_crc+0xb0>

	{

		i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000f18:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000f1c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	0a1b      	lsrs	r3, r3, #8
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000f2a:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8000f2e:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8000f32:	6809      	ldr	r1, [r1, #0]
 8000f34:	440b      	add	r3, r1
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	4053      	eors	r3, r2
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c

		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000f44:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000f48:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	021b      	lsls	r3, r3, #8
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8000f56:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000f5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f5e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000f62:	b21b      	sxth	r3, r3
 8000f64:	4053      	eors	r3, r2
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000f6c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000f70:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 8000f72:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000f76:	3301      	adds	r3, #1
 8000f78:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000f7c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000f80:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000f84:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d3c4      	bcc.n	8000f18 <update_crc+0x4c>

	}



	return crc_accum;
 8000f8e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000f92:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000f96:	881b      	ldrh	r3, [r3, #0]

 8000f98:	4618      	mov	r0, r3
 8000f9a:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	0800d234 	.word	0x0800d234

08000fa8 <map>:
// All rights reserved.
//***********************************************

#include "../Inc/dynamixel_xl320.h"

uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max){
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
	return ((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min);
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	69b9      	ldr	r1, [r7, #24]
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	1a8a      	subs	r2, r1, r2
 8000fc2:	fb03 f202 	mul.w	r2, r3, r2
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	1ac9      	subs	r1, r1, r3
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	440b      	add	r3, r1
 8000fd0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <XL320_set_led_ON>:
	blue	4
	yellow	3
	cyan	6
	purple	5
	white	7*/
void XL320_set_led_ON(UART_HandleTypeDef *m_huart, uint8_t color){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
	uint8_t TxPacket[13] = {DXL2_0_PACKET_IDX_HEADER_1,
 8000fec:	23ff      	movs	r3, #255	; 0xff
 8000fee:	723b      	strb	r3, [r7, #8]
 8000ff0:	23ff      	movs	r3, #255	; 0xff
 8000ff2:	727b      	strb	r3, [r7, #9]
 8000ff4:	23fd      	movs	r3, #253	; 0xfd
 8000ff6:	72bb      	strb	r3, [r7, #10]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	72fb      	strb	r3, [r7, #11]
 8000ffc:	23fe      	movs	r3, #254	; 0xfe
 8000ffe:	733b      	strb	r3, [r7, #12]
 8001000:	2306      	movs	r3, #6
 8001002:	737b      	strb	r3, [r7, #13]
 8001004:	2300      	movs	r3, #0
 8001006:	73bb      	strb	r3, [r7, #14]
 8001008:	2303      	movs	r3, #3
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	2319      	movs	r3, #25
 800100e:	743b      	strb	r3, [r7, #16]
 8001010:	2300      	movs	r3, #0
 8001012:	747b      	strb	r3, [r7, #17]
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	74bb      	strb	r3, [r7, #18]
 8001018:	2300      	movs	r3, #0
 800101a:	74fb      	strb	r3, [r7, #19]
 800101c:	2300      	movs	r3, #0
 800101e:	753b      	strb	r3, [r7, #20]
							DXL_LOBYTE(XL_LED),
							DXL_HIBYTE(XL_LED),
							color,
							0,
							0};
	uint16_t CRC_2 = update_crc(0, TxPacket, 11);
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	220b      	movs	r2, #11
 8001026:	4619      	mov	r1, r3
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff ff4f 	bl	8000ecc <update_crc>
 800102e:	4603      	mov	r3, r0
 8001030:	82fb      	strh	r3, [r7, #22]
	TxPacket[11] = DXL_LOBYTE(CRC_2);
 8001032:	8afb      	ldrh	r3, [r7, #22]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	74fb      	strb	r3, [r7, #19]
	TxPacket[12] = DXL_HIBYTE(CRC_2);
 8001038:	8afb      	ldrh	r3, [r7, #22]
 800103a:	0a1b      	lsrs	r3, r3, #8
 800103c:	b29b      	uxth	r3, r3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(m_huart, (uint8_t *) &TxPacket, 13, HAL_MAX_DELAY);
 8001042:	f107 0108 	add.w	r1, r7, #8
 8001046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800104a:	220d      	movs	r2, #13
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f007 fef9 	bl	8008e44 <HAL_UART_Transmit>
}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <XL320_set_torque_enable>:

void XL320_set_torque_enable(UART_HandleTypeDef *m_huart){
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	uint8_t TxPacket[13] = {DXL2_0_PACKET_IDX_HEADER_1,
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <XL320_set_torque_enable+0x50>)
 8001066:	f107 0408 	add.w	r4, r7, #8
 800106a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800106c:	c407      	stmia	r4!, {r0, r1, r2}
 800106e:	7023      	strb	r3, [r4, #0]
							DXL_LOBYTE(XL_TORQUE_ENABLE),
							DXL_HIBYTE(XL_TORQUE_ENABLE),
							(uint8_t)1,
							0,
							0};
	uint16_t CRC_2 = update_crc(0, TxPacket, 11);
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	220b      	movs	r2, #11
 8001076:	4619      	mov	r1, r3
 8001078:	2000      	movs	r0, #0
 800107a:	f7ff ff27 	bl	8000ecc <update_crc>
 800107e:	4603      	mov	r3, r0
 8001080:	82fb      	strh	r3, [r7, #22]
	TxPacket[11] = DXL_LOBYTE(CRC_2);
 8001082:	8afb      	ldrh	r3, [r7, #22]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	74fb      	strb	r3, [r7, #19]
	TxPacket[12] = DXL_HIBYTE(CRC_2);
 8001088:	8afb      	ldrh	r3, [r7, #22]
 800108a:	0a1b      	lsrs	r3, r3, #8
 800108c:	b29b      	uxth	r3, r3
 800108e:	b2db      	uxtb	r3, r3
 8001090:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(m_huart, (uint8_t *) &TxPacket, 13, HAL_MAX_DELAY);
 8001092:	f107 0108 	add.w	r1, r7, #8
 8001096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800109a:	220d      	movs	r2, #13
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f007 fed1 	bl	8008e44 <HAL_UART_Transmit>
}
 80010a2:	bf00      	nop
 80010a4:	371c      	adds	r7, #28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd90      	pop	{r4, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	0800d434 	.word	0x0800d434

080010b0 <XL320_set_pos>:
	TxPacket[12] = DXL_HIBYTE(CRC_2);

	HAL_UART_Transmit(m_huart, (uint8_t *) &TxPacket, 13, HAL_MAX_DELAY);
}

void XL320_set_pos(UART_HandleTypeDef *m_huart, uint16_t pos){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af02      	add	r7, sp, #8
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
	const uint16_t POS_MAX = 300; //CHANGE THIS CONSTANT TO AVOID OVERCURRENT IN THE SERVO
 80010bc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80010c0:	83fb      	strh	r3, [r7, #30]
	if(pos>POS_MAX) pos = POS_MAX;
 80010c2:	887a      	ldrh	r2, [r7, #2]
 80010c4:	8bfb      	ldrh	r3, [r7, #30]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d901      	bls.n	80010ce <XL320_set_pos+0x1e>
 80010ca:	8bfb      	ldrh	r3, [r7, #30]
 80010cc:	807b      	strh	r3, [r7, #2]
	uint16_t pos_mapped = map(pos, 0, 300, 0, 1023);
 80010ce:	8878      	ldrh	r0, [r7, #2]
 80010d0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2300      	movs	r3, #0
 80010d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010dc:	2100      	movs	r1, #0
 80010de:	f7ff ff63 	bl	8000fa8 <map>
 80010e2:	4603      	mov	r3, r0
 80010e4:	83bb      	strh	r3, [r7, #28]
	uint8_t TxPacket[14] = {DXL2_0_PACKET_IDX_HEADER_1,
 80010e6:	23ff      	movs	r3, #255	; 0xff
 80010e8:	733b      	strb	r3, [r7, #12]
 80010ea:	23ff      	movs	r3, #255	; 0xff
 80010ec:	737b      	strb	r3, [r7, #13]
 80010ee:	23fd      	movs	r3, #253	; 0xfd
 80010f0:	73bb      	strb	r3, [r7, #14]
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]
 80010f6:	23fe      	movs	r3, #254	; 0xfe
 80010f8:	743b      	strb	r3, [r7, #16]
 80010fa:	2307      	movs	r3, #7
 80010fc:	747b      	strb	r3, [r7, #17]
 80010fe:	2300      	movs	r3, #0
 8001100:	74bb      	strb	r3, [r7, #18]
 8001102:	2303      	movs	r3, #3
 8001104:	74fb      	strb	r3, [r7, #19]
 8001106:	231e      	movs	r3, #30
 8001108:	753b      	strb	r3, [r7, #20]
 800110a:	2300      	movs	r3, #0
 800110c:	757b      	strb	r3, [r7, #21]
							 0x07,
							 0x00,
							 DXL_INST_WRITE,
							 DXL_LOBYTE(XL_GOAL_POSITION_L),
							 DXL_HIBYTE(XL_GOAL_POSITION_L),
							 DXL_LOBYTE(pos_mapped),
 800110e:	8bbb      	ldrh	r3, [r7, #28]
 8001110:	b2db      	uxtb	r3, r3
	uint8_t TxPacket[14] = {DXL2_0_PACKET_IDX_HEADER_1,
 8001112:	75bb      	strb	r3, [r7, #22]
							 DXL_HIBYTE(pos_mapped),
 8001114:	8bbb      	ldrh	r3, [r7, #28]
 8001116:	0a1b      	lsrs	r3, r3, #8
 8001118:	b29b      	uxth	r3, r3
 800111a:	b2db      	uxtb	r3, r3
	uint8_t TxPacket[14] = {DXL2_0_PACKET_IDX_HEADER_1,
 800111c:	75fb      	strb	r3, [r7, #23]
 800111e:	2300      	movs	r3, #0
 8001120:	763b      	strb	r3, [r7, #24]
 8001122:	2300      	movs	r3, #0
 8001124:	767b      	strb	r3, [r7, #25]
							 0,
							 0};
	uint16_t CRC_2 = update_crc(0, TxPacket, 12);
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	220c      	movs	r2, #12
 800112c:	4619      	mov	r1, r3
 800112e:	2000      	movs	r0, #0
 8001130:	f7ff fecc 	bl	8000ecc <update_crc>
 8001134:	4603      	mov	r3, r0
 8001136:	837b      	strh	r3, [r7, #26]
	TxPacket[12] = DXL_LOBYTE(CRC_2);
 8001138:	8b7b      	ldrh	r3, [r7, #26]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	763b      	strb	r3, [r7, #24]
	TxPacket[13] = DXL_HIBYTE(CRC_2);
 800113e:	8b7b      	ldrh	r3, [r7, #26]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	b29b      	uxth	r3, r3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(m_huart, (uint8_t *) &TxPacket, 14, HAL_MAX_DELAY);
 8001148:	f107 010c 	add.w	r1, r7, #12
 800114c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001150:	220e      	movs	r2, #14
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f007 fe76 	bl	8008e44 <HAL_UART_Transmit>
}
 8001158:	bf00      	nop
 800115a:	3720      	adds	r7, #32
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08e      	sub	sp, #56	; 0x38
 8001164:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	4b80      	ldr	r3, [pc, #512]	; (8001378 <MX_GPIO_Init+0x218>)
 8001178:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800117c:	4a7e      	ldr	r2, [pc, #504]	; (8001378 <MX_GPIO_Init+0x218>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001186:	4b7c      	ldr	r3, [pc, #496]	; (8001378 <MX_GPIO_Init+0x218>)
 8001188:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	623b      	str	r3, [r7, #32]
 8001192:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001194:	4b78      	ldr	r3, [pc, #480]	; (8001378 <MX_GPIO_Init+0x218>)
 8001196:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800119a:	4a77      	ldr	r2, [pc, #476]	; (8001378 <MX_GPIO_Init+0x218>)
 800119c:	f043 0320 	orr.w	r3, r3, #32
 80011a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011a4:	4b74      	ldr	r3, [pc, #464]	; (8001378 <MX_GPIO_Init+0x218>)
 80011a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011aa:	f003 0320 	and.w	r3, r3, #32
 80011ae:	61fb      	str	r3, [r7, #28]
 80011b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	4b71      	ldr	r3, [pc, #452]	; (8001378 <MX_GPIO_Init+0x218>)
 80011b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011b8:	4a6f      	ldr	r2, [pc, #444]	; (8001378 <MX_GPIO_Init+0x218>)
 80011ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011be:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011c2:	4b6d      	ldr	r3, [pc, #436]	; (8001378 <MX_GPIO_Init+0x218>)
 80011c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011cc:	61bb      	str	r3, [r7, #24]
 80011ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b69      	ldr	r3, [pc, #420]	; (8001378 <MX_GPIO_Init+0x218>)
 80011d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011d6:	4a68      	ldr	r2, [pc, #416]	; (8001378 <MX_GPIO_Init+0x218>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011e0:	4b65      	ldr	r3, [pc, #404]	; (8001378 <MX_GPIO_Init+0x218>)
 80011e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	4b62      	ldr	r3, [pc, #392]	; (8001378 <MX_GPIO_Init+0x218>)
 80011f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011f4:	4a60      	ldr	r2, [pc, #384]	; (8001378 <MX_GPIO_Init+0x218>)
 80011f6:	f043 0302 	orr.w	r3, r3, #2
 80011fa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011fe:	4b5e      	ldr	r3, [pc, #376]	; (8001378 <MX_GPIO_Init+0x218>)
 8001200:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120c:	4b5a      	ldr	r3, [pc, #360]	; (8001378 <MX_GPIO_Init+0x218>)
 800120e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001212:	4a59      	ldr	r2, [pc, #356]	; (8001378 <MX_GPIO_Init+0x218>)
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800121c:	4b56      	ldr	r3, [pc, #344]	; (8001378 <MX_GPIO_Init+0x218>)
 800121e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800122a:	4b53      	ldr	r3, [pc, #332]	; (8001378 <MX_GPIO_Init+0x218>)
 800122c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001230:	4a51      	ldr	r2, [pc, #324]	; (8001378 <MX_GPIO_Init+0x218>)
 8001232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001236:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800123a:	4b4f      	ldr	r3, [pc, #316]	; (8001378 <MX_GPIO_Init+0x218>)
 800123c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001248:	4b4b      	ldr	r3, [pc, #300]	; (8001378 <MX_GPIO_Init+0x218>)
 800124a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800124e:	4a4a      	ldr	r2, [pc, #296]	; (8001378 <MX_GPIO_Init+0x218>)
 8001250:	f043 0310 	orr.w	r3, r3, #16
 8001254:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001258:	4b47      	ldr	r3, [pc, #284]	; (8001378 <MX_GPIO_Init+0x218>)
 800125a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800125e:	f003 0310 	and.w	r3, r3, #16
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800126c:	4843      	ldr	r0, [pc, #268]	; (800137c <MX_GPIO_Init+0x21c>)
 800126e:	f003 fd09 	bl	8004c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	f244 0101 	movw	r1, #16385	; 0x4001
 8001278:	4841      	ldr	r0, [pc, #260]	; (8001380 <MX_GPIO_Init+0x220>)
 800127a:	f003 fd03 	bl	8004c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2102      	movs	r1, #2
 8001282:	4840      	ldr	r0, [pc, #256]	; (8001384 <MX_GPIO_Init+0x224>)
 8001284:	f003 fcfe 	bl	8004c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129a:	4619      	mov	r1, r3
 800129c:	483a      	ldr	r0, [pc, #232]	; (8001388 <MX_GPIO_Init+0x228>)
 800129e:	f003 fb41 	bl	8004924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80012a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b8:	4619      	mov	r1, r3
 80012ba:	4830      	ldr	r0, [pc, #192]	; (800137c <MX_GPIO_Init+0x21c>)
 80012bc:	f003 fb32 	bl	8004924 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80012c0:	f244 0301 	movw	r3, #16385	; 0x4001
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d6:	4619      	mov	r1, r3
 80012d8:	4829      	ldr	r0, [pc, #164]	; (8001380 <MX_GPIO_Init+0x220>)
 80012da:	f003 fb23 	bl	8004924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f0:	4619      	mov	r1, r3
 80012f2:	4826      	ldr	r0, [pc, #152]	; (800138c <MX_GPIO_Init+0x22c>)
 80012f4:	f003 fb16 	bl	8004924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80012f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130a:	4619      	mov	r1, r3
 800130c:	4820      	ldr	r0, [pc, #128]	; (8001390 <MX_GPIO_Init+0x230>)
 800130e:	f003 fb09 	bl	8004924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001324:	230a      	movs	r3, #10
 8001326:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132c:	4619      	mov	r1, r3
 800132e:	4818      	ldr	r0, [pc, #96]	; (8001390 <MX_GPIO_Init+0x230>)
 8001330:	f003 faf8 	bl	8004924 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001334:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	4619      	mov	r1, r3
 800134c:	4810      	ldr	r0, [pc, #64]	; (8001390 <MX_GPIO_Init+0x230>)
 800134e:	f003 fae9 	bl	8004924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001352:	2302      	movs	r3, #2
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001366:	4619      	mov	r1, r3
 8001368:	4806      	ldr	r0, [pc, #24]	; (8001384 <MX_GPIO_Init+0x224>)
 800136a:	f003 fadb 	bl	8004924 <HAL_GPIO_Init>

}
 800136e:	bf00      	nop
 8001370:	3738      	adds	r7, #56	; 0x38
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	58024400 	.word	0x58024400
 800137c:	58021400 	.word	0x58021400
 8001380:	58020400 	.word	0x58020400
 8001384:	58021000 	.word	0x58021000
 8001388:	58020800 	.word	0x58020800
 800138c:	58021800 	.word	0x58021800
 8001390:	58020000 	.word	0x58020000

08001394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001398:	f000 fe6c 	bl	8002074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139c:	f000 f830 	bl	8001400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a0:	f7ff fede 	bl	8001160 <MX_GPIO_Init>
  MX_DMA_Init();
 80013a4:	f7ff fd72 	bl	8000e8c <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 80013a8:	f000 fe32 	bl	8002010 <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 80013ac:	f000 fbb0 	bl	8001b10 <MX_UART4_Init>
  MX_TIM2_Init();
 80013b0:	f000 fa44 	bl	800183c <MX_TIM2_Init>
  MX_TIM3_Init();
 80013b4:	f000 fac4 	bl	8001940 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80013b8:	f000 fc4c 	bl	8001c54 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80013bc:	f000 fbfc 	bl	8001bb8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim3);
 80013c0:	480a      	ldr	r0, [pc, #40]	; (80013ec <main+0x58>)
 80013c2:	f006 fac9 	bl	8007958 <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit(&huart3, (uint8_t *)"\nStarting...\r\n", 14, 10);
 80013c6:	230a      	movs	r3, #10
 80013c8:	220e      	movs	r2, #14
 80013ca:	4909      	ldr	r1, [pc, #36]	; (80013f0 <main+0x5c>)
 80013cc:	4809      	ldr	r0, [pc, #36]	; (80013f4 <main+0x60>)
 80013ce:	f007 fd39 	bl	8008e44 <HAL_UART_Transmit>
	Process_Init();
 80013d2:	f7ff fb0f 	bl	80009f4 <Process_Init>
	RPICom_Init(&huart4, &huart3);
 80013d6:	4907      	ldr	r1, [pc, #28]	; (80013f4 <main+0x60>)
 80013d8:	4807      	ldr	r0, [pc, #28]	; (80013f8 <main+0x64>)
 80013da:	f7ff fc07 	bl	8000bec <RPICom_Init>
	HAL_UART_Transmit(&huart3, (uint8_t *)"Init Done\r\n", 11, 10);
 80013de:	230a      	movs	r3, #10
 80013e0:	220b      	movs	r2, #11
 80013e2:	4906      	ldr	r1, [pc, #24]	; (80013fc <main+0x68>)
 80013e4:	4803      	ldr	r0, [pc, #12]	; (80013f4 <main+0x60>)
 80013e6:	f007 fd2d 	bl	8008e44 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
 80013ea:	e7fe      	b.n	80013ea <main+0x56>
 80013ec:	24000530 	.word	0x24000530
 80013f0:	0800d480 	.word	0x0800d480
 80013f4:	240006a4 	.word	0x240006a4
 80013f8:	2400057c 	.word	0x2400057c
 80013fc:	0800d490 	.word	0x0800d490

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b09c      	sub	sp, #112	; 0x70
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140a:	224c      	movs	r2, #76	; 0x4c
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f00a fc62 	bl	800bcd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2220      	movs	r2, #32
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f00a fc5c 	bl	800bcd8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001420:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <SystemClock_Config+0xe4>)
 8001422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001426:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800142a:	2004      	movs	r0, #4
 800142c:	f003 fc44 	bl	8004cb8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001430:	2300      	movs	r3, #0
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <SystemClock_Config+0xe8>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a2b      	ldr	r2, [pc, #172]	; (80014e8 <SystemClock_Config+0xe8>)
 800143a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <SystemClock_Config+0xe8>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800144c:	bf00      	nop
 800144e:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <SystemClock_Config+0xe8>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800145a:	d1f8      	bne.n	800144e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800145c:	2321      	movs	r3, #33	; 0x21
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001460:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001466:	2301      	movs	r3, #1
 8001468:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146a:	2302      	movs	r3, #2
 800146c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800146e:	2302      	movs	r3, #2
 8001470:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001472:	2301      	movs	r3, #1
 8001474:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001476:	2318      	movs	r3, #24
 8001478:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800147a:	2302      	movs	r3, #2
 800147c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800147e:	2304      	movs	r3, #4
 8001480:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001482:	2302      	movs	r3, #2
 8001484:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001486:	230c      	movs	r3, #12
 8001488:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800148a:	2300      	movs	r3, #0
 800148c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001496:	4618      	mov	r0, r3
 8001498:	f003 fc68 	bl	8004d6c <HAL_RCC_OscConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80014a2:	f000 f823 	bl	80014ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a6:	233f      	movs	r3, #63	; 0x3f
 80014a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014aa:	2303      	movs	r3, #3
 80014ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2102      	movs	r1, #2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f004 f880 	bl	80055d0 <HAL_RCC_ClockConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <SystemClock_Config+0xda>
  {
    Error_Handler();
 80014d6:	f000 f809 	bl	80014ec <Error_Handler>
  }
}
 80014da:	bf00      	nop
 80014dc:	3770      	adds	r7, #112	; 0x70
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	58024400 	.word	0x58024400
 80014e8:	58024800 	.word	0x58024800

080014ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f0:	b672      	cpsid	i
}
 80014f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014f4:	e7fe      	b.n	80014f4 <Error_Handler+0x8>
	...

080014f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_MspInit+0x30>)
 8001500:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001504:	4a08      	ldr	r2, [pc, #32]	; (8001528 <HAL_MspInit+0x30>)
 8001506:	f043 0302 	orr.w	r3, r3, #2
 800150a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_MspInit+0x30>)
 8001510:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	58024400 	.word	0x58024400

0800152c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <NMI_Handler+0x4>

08001532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <HardFault_Handler+0x4>

08001538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <MemManage_Handler+0x4>

0800153e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <UsageFault_Handler+0x4>

0800154a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001578:	f000 fdee 	bl	8002158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}

08001580 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <DMA1_Stream0_IRQHandler+0x10>)
 8001586:	f002 f82f 	bl	80035e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	24000738 	.word	0x24000738

08001594 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	RPICom_SendBinaryMessage();
 8001598:	f7ff fc2c 	bl	8000df4 <RPICom_SendBinaryMessage>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <TIM3_IRQHandler+0x14>)
 800159e:	f006 fbc3 	bl	8007d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	24000530 	.word	0x24000530

080015ac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <UART4_IRQHandler+0x10>)
 80015b2:	f007 fdb5 	bl	8009120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  /* USER CODE END UART4_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2400057c 	.word	0x2400057c

080015c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return 1;
 80015c4:	2301      	movs	r3, #1
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_kill>:

int _kill(int pid, int sig)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015da:	f00a fb45 	bl	800bc68 <__errno>
 80015de:	4603      	mov	r3, r0
 80015e0:	2216      	movs	r2, #22
 80015e2:	601a      	str	r2, [r3, #0]
  return -1;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_exit>:

void _exit (int status)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ffe7 	bl	80015d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001602:	e7fe      	b.n	8001602 <_exit+0x12>

08001604 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	e00a      	b.n	800162c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001616:	f3af 8000 	nop.w
 800161a:	4601      	mov	r1, r0
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	60ba      	str	r2, [r7, #8]
 8001622:	b2ca      	uxtb	r2, r1
 8001624:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	3301      	adds	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	dbf0      	blt.n	8001616 <_read+0x12>
  }

  return len;
 8001634:	687b      	ldr	r3, [r7, #4]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e009      	b.n	8001664 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	60ba      	str	r2, [r7, #8]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	dbf1      	blt.n	8001650 <_write+0x12>
  }
  return len;
 800166c:	687b      	ldr	r3, [r7, #4]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_close>:

int _close(int file)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800169e:	605a      	str	r2, [r3, #4]
  return 0;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <_isatty>:

int _isatty(int file)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016b6:	2301      	movs	r3, #1
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <_sbrk+0x5c>)
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <_sbrk+0x60>)
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <_sbrk+0x64>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <_sbrk+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	429a      	cmp	r2, r3
 800170e:	d207      	bcs.n	8001720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001710:	f00a faaa 	bl	800bc68 <__errno>
 8001714:	4603      	mov	r3, r0
 8001716:	220c      	movs	r2, #12
 8001718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800171e:	e009      	b.n	8001734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <_sbrk+0x64>)
 8001730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	24100000 	.word	0x24100000
 8001740:	00000400 	.word	0x00000400
 8001744:	240004e0 	.word	0x240004e0
 8001748:	240007c8 	.word	0x240007c8

0800174c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001750:	4b32      	ldr	r3, [pc, #200]	; (800181c <SystemInit+0xd0>)
 8001752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001756:	4a31      	ldr	r2, [pc, #196]	; (800181c <SystemInit+0xd0>)
 8001758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800175c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001760:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <SystemInit+0xd4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	2b02      	cmp	r3, #2
 800176a:	d807      	bhi.n	800177c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800176c:	4b2c      	ldr	r3, [pc, #176]	; (8001820 <SystemInit+0xd4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f023 030f 	bic.w	r3, r3, #15
 8001774:	4a2a      	ldr	r2, [pc, #168]	; (8001820 <SystemInit+0xd4>)
 8001776:	f043 0303 	orr.w	r3, r3, #3
 800177a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800177c:	4b29      	ldr	r3, [pc, #164]	; (8001824 <SystemInit+0xd8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a28      	ldr	r2, [pc, #160]	; (8001824 <SystemInit+0xd8>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001788:	4b26      	ldr	r3, [pc, #152]	; (8001824 <SystemInit+0xd8>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800178e:	4b25      	ldr	r3, [pc, #148]	; (8001824 <SystemInit+0xd8>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4924      	ldr	r1, [pc, #144]	; (8001824 <SystemInit+0xd8>)
 8001794:	4b24      	ldr	r3, [pc, #144]	; (8001828 <SystemInit+0xdc>)
 8001796:	4013      	ands	r3, r2
 8001798:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800179a:	4b21      	ldr	r3, [pc, #132]	; (8001820 <SystemInit+0xd4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d007      	beq.n	80017b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <SystemInit+0xd4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 030f 	bic.w	r3, r3, #15
 80017ae:	4a1c      	ldr	r2, [pc, #112]	; (8001820 <SystemInit+0xd4>)
 80017b0:	f043 0303 	orr.w	r3, r3, #3
 80017b4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <SystemInit+0xd8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <SystemInit+0xd8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <SystemInit+0xd8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <SystemInit+0xd8>)
 80017ca:	4a18      	ldr	r2, [pc, #96]	; (800182c <SystemInit+0xe0>)
 80017cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <SystemInit+0xd8>)
 80017d0:	4a17      	ldr	r2, [pc, #92]	; (8001830 <SystemInit+0xe4>)
 80017d2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <SystemInit+0xd8>)
 80017d6:	4a17      	ldr	r2, [pc, #92]	; (8001834 <SystemInit+0xe8>)
 80017d8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <SystemInit+0xd8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <SystemInit+0xd8>)
 80017e2:	4a14      	ldr	r2, [pc, #80]	; (8001834 <SystemInit+0xe8>)
 80017e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <SystemInit+0xd8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <SystemInit+0xd8>)
 80017ee:	4a11      	ldr	r2, [pc, #68]	; (8001834 <SystemInit+0xe8>)
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <SystemInit+0xd8>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017f8:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <SystemInit+0xd8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a09      	ldr	r2, [pc, #36]	; (8001824 <SystemInit+0xd8>)
 80017fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001802:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001804:	4b07      	ldr	r3, [pc, #28]	; (8001824 <SystemInit+0xd8>)
 8001806:	2200      	movs	r2, #0
 8001808:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <SystemInit+0xec>)
 800180c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001810:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00
 8001820:	52002000 	.word	0x52002000
 8001824:	58024400 	.word	0x58024400
 8001828:	eaf6ed7f 	.word	0xeaf6ed7f
 800182c:	02020200 	.word	0x02020200
 8001830:	01ff0000 	.word	0x01ff0000
 8001834:	01010280 	.word	0x01010280
 8001838:	52004000 	.word	0x52004000

0800183c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08e      	sub	sp, #56	; 0x38
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800185c:	463b      	mov	r3, r7
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	611a      	str	r2, [r3, #16]
 800186a:	615a      	str	r2, [r3, #20]
 800186c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800186e:	4b33      	ldr	r3, [pc, #204]	; (800193c <MX_TIM2_Init+0x100>)
 8001870:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001874:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1919;
 8001876:	4b31      	ldr	r3, [pc, #196]	; (800193c <MX_TIM2_Init+0x100>)
 8001878:	f240 727f 	movw	r2, #1919	; 0x77f
 800187c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187e:	4b2f      	ldr	r3, [pc, #188]	; (800193c <MX_TIM2_Init+0x100>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001884:	4b2d      	ldr	r3, [pc, #180]	; (800193c <MX_TIM2_Init+0x100>)
 8001886:	f240 32e7 	movw	r2, #999	; 0x3e7
 800188a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188c:	4b2b      	ldr	r3, [pc, #172]	; (800193c <MX_TIM2_Init+0x100>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001892:	4b2a      	ldr	r3, [pc, #168]	; (800193c <MX_TIM2_Init+0x100>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001898:	4828      	ldr	r0, [pc, #160]	; (800193c <MX_TIM2_Init+0x100>)
 800189a:	f006 f805 	bl	80078a8 <HAL_TIM_Base_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80018a4:	f7ff fe22 	bl	80014ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b2:	4619      	mov	r1, r3
 80018b4:	4821      	ldr	r0, [pc, #132]	; (800193c <MX_TIM2_Init+0x100>)
 80018b6:	f006 fc6b 	bl	8008190 <HAL_TIM_ConfigClockSource>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80018c0:	f7ff fe14 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018c4:	481d      	ldr	r0, [pc, #116]	; (800193c <MX_TIM2_Init+0x100>)
 80018c6:	f006 f8bf 	bl	8007a48 <HAL_TIM_PWM_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80018d0:	f7ff fe0c 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	4619      	mov	r1, r3
 80018e2:	4816      	ldr	r0, [pc, #88]	; (800193c <MX_TIM2_Init+0x100>)
 80018e4:	f007 f9b2 	bl	8008c4c <HAL_TIMEx_MasterConfigSynchronization>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80018ee:	f7ff fdfd 	bl	80014ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018f2:	2360      	movs	r3, #96	; 0x60
 80018f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001902:	463b      	mov	r3, r7
 8001904:	2200      	movs	r2, #0
 8001906:	4619      	mov	r1, r3
 8001908:	480c      	ldr	r0, [pc, #48]	; (800193c <MX_TIM2_Init+0x100>)
 800190a:	f006 fb2d 	bl	8007f68 <HAL_TIM_PWM_ConfigChannel>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001914:	f7ff fdea 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001918:	463b      	mov	r3, r7
 800191a:	2208      	movs	r2, #8
 800191c:	4619      	mov	r1, r3
 800191e:	4807      	ldr	r0, [pc, #28]	; (800193c <MX_TIM2_Init+0x100>)
 8001920:	f006 fb22 	bl	8007f68 <HAL_TIM_PWM_ConfigChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800192a:	f7ff fddf 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800192e:	4803      	ldr	r0, [pc, #12]	; (800193c <MX_TIM2_Init+0x100>)
 8001930:	f000 f894 	bl	8001a5c <HAL_TIM_MspPostInit>

}
 8001934:	bf00      	nop
 8001936:	3738      	adds	r7, #56	; 0x38
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	240004e4 	.word	0x240004e4

08001940 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001946:	f107 0310 	add.w	r3, r7, #16
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800195e:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <MX_TIM3_Init+0x98>)
 8001960:	4a1e      	ldr	r2, [pc, #120]	; (80019dc <MX_TIM3_Init+0x9c>)
 8001962:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9599;
 8001964:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <MX_TIM3_Init+0x98>)
 8001966:	f242 527f 	movw	r2, #9599	; 0x257f
 800196a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <MX_TIM3_Init+0x98>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 8001972:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <MX_TIM3_Init+0x98>)
 8001974:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001978:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <MX_TIM3_Init+0x98>)
 800197c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001980:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <MX_TIM3_Init+0x98>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001988:	4813      	ldr	r0, [pc, #76]	; (80019d8 <MX_TIM3_Init+0x98>)
 800198a:	f005 ff8d 	bl	80078a8 <HAL_TIM_Base_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001994:	f7ff fdaa 	bl	80014ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800199e:	f107 0310 	add.w	r3, r7, #16
 80019a2:	4619      	mov	r1, r3
 80019a4:	480c      	ldr	r0, [pc, #48]	; (80019d8 <MX_TIM3_Init+0x98>)
 80019a6:	f006 fbf3 	bl	8008190 <HAL_TIM_ConfigClockSource>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80019b0:	f7ff fd9c 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b4:	2300      	movs	r3, #0
 80019b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	4619      	mov	r1, r3
 80019c0:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_TIM3_Init+0x98>)
 80019c2:	f007 f943 	bl	8008c4c <HAL_TIMEx_MasterConfigSynchronization>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80019cc:	f7ff fd8e 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	24000530 	.word	0x24000530
 80019dc:	40000400 	.word	0x40000400

080019e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f0:	d10f      	bne.n	8001a12 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_TIM_Base_MspInit+0x74>)
 80019f4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80019f8:	4a16      	ldr	r2, [pc, #88]	; (8001a54 <HAL_TIM_Base_MspInit+0x74>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001a02:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_TIM_Base_MspInit+0x74>)
 8001a04:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a10:	e01b      	b.n	8001a4a <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM3)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a10      	ldr	r2, [pc, #64]	; (8001a58 <HAL_TIM_Base_MspInit+0x78>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d116      	bne.n	8001a4a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_TIM_Base_MspInit+0x74>)
 8001a1e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001a22:	4a0c      	ldr	r2, [pc, #48]	; (8001a54 <HAL_TIM_Base_MspInit+0x74>)
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_TIM_Base_MspInit+0x74>)
 8001a2e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	201d      	movs	r0, #29
 8001a40:	f000 fca9 	bl	8002396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a44:	201d      	movs	r0, #29
 8001a46:	f000 fcc0 	bl	80023ca <HAL_NVIC_EnableIRQ>
}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	58024400 	.word	0x58024400
 8001a58:	40000400 	.word	0x40000400

08001a5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7c:	d13e      	bne.n	8001afc <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <HAL_TIM_MspPostInit+0xa8>)
 8001a80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a84:	4a1f      	ldr	r2, [pc, #124]	; (8001b04 <HAL_TIM_MspPostInit+0xa8>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <HAL_TIM_MspPostInit+0xa8>)
 8001a90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_TIM_MspPostInit+0xa8>)
 8001a9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001aa2:	4a18      	ldr	r2, [pc, #96]	; (8001b04 <HAL_TIM_MspPostInit+0xa8>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <HAL_TIM_MspPostInit+0xa8>)
 8001aae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001aba:	2320      	movs	r3, #32
 8001abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aca:	2301      	movs	r3, #1
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480c      	ldr	r0, [pc, #48]	; (8001b08 <HAL_TIM_MspPostInit+0xac>)
 8001ad6:	f002 ff25 	bl	8004924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aec:	2301      	movs	r3, #1
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4619      	mov	r1, r3
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <HAL_TIM_MspPostInit+0xb0>)
 8001af8:	f002 ff14 	bl	8004924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001afc:	bf00      	nop
 8001afe:	3728      	adds	r7, #40	; 0x28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	58024400 	.word	0x58024400
 8001b08:	58020000 	.word	0x58020000
 8001b0c:	58020400 	.word	0x58020400

08001b10 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001b14:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <MX_UART4_Init+0xa0>)
 8001b16:	4a27      	ldr	r2, [pc, #156]	; (8001bb4 <MX_UART4_Init+0xa4>)
 8001b18:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001b1a:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <MX_UART4_Init+0xa0>)
 8001b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b20:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b22:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <MX_UART4_Init+0xa0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <MX_UART4_Init+0xa0>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <MX_UART4_Init+0xa0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b34:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <MX_UART4_Init+0xa0>)
 8001b36:	220c      	movs	r2, #12
 8001b38:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <MX_UART4_Init+0xa0>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <MX_UART4_Init+0xa0>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <MX_UART4_Init+0xa0>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <MX_UART4_Init+0xa0>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b52:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <MX_UART4_Init+0xa0>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b58:	4815      	ldr	r0, [pc, #84]	; (8001bb0 <MX_UART4_Init+0xa0>)
 8001b5a:	f007 f923 	bl	8008da4 <HAL_UART_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001b64:	f7ff fcc2 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4811      	ldr	r0, [pc, #68]	; (8001bb0 <MX_UART4_Init+0xa0>)
 8001b6c:	f009 ffb1 	bl	800bad2 <HAL_UARTEx_SetTxFifoThreshold>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001b76:	f7ff fcb9 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <MX_UART4_Init+0xa0>)
 8001b7e:	f009 ffe6 	bl	800bb4e <HAL_UARTEx_SetRxFifoThreshold>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001b88:	f7ff fcb0 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001b8c:	4808      	ldr	r0, [pc, #32]	; (8001bb0 <MX_UART4_Init+0xa0>)
 8001b8e:	f009 ff67 	bl	800ba60 <HAL_UARTEx_DisableFifoMode>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001b98:	f7ff fca8 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  // Activation de l'interruption de transmission de l'UART4
  HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	2034      	movs	r0, #52	; 0x34
 8001ba2:	f000 fbf8 	bl	8002396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001ba6:	2034      	movs	r0, #52	; 0x34
 8001ba8:	f000 fc0f 	bl	80023ca <HAL_NVIC_EnableIRQ>
  /* USER CODE END UART4_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	2400057c 	.word	0x2400057c
 8001bb4:	40004c00 	.word	0x40004c00

08001bb8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bbc:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <MX_USART2_UART_Init+0x90>)
 8001bbe:	4a23      	ldr	r2, [pc, #140]	; (8001c4c <MX_USART2_UART_Init+0x94>)
 8001bc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001bc2:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <MX_USART2_UART_Init+0x90>)
 8001bc4:	4a22      	ldr	r2, [pc, #136]	; (8001c50 <MX_USART2_UART_Init+0x98>)
 8001bc6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <MX_USART2_UART_Init+0x90>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bce:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <MX_USART2_UART_Init+0x90>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <MX_USART2_UART_Init+0x90>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <MX_USART2_UART_Init+0x90>)
 8001bdc:	220c      	movs	r2, #12
 8001bde:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <MX_USART2_UART_Init+0x90>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <MX_USART2_UART_Init+0x90>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bec:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <MX_USART2_UART_Init+0x90>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <MX_USART2_UART_Init+0x90>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <MX_USART2_UART_Init+0x90>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bfe:	4812      	ldr	r0, [pc, #72]	; (8001c48 <MX_USART2_UART_Init+0x90>)
 8001c00:	f007 f8d0 	bl	8008da4 <HAL_UART_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001c0a:	f7ff fc6f 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c0e:	2100      	movs	r1, #0
 8001c10:	480d      	ldr	r0, [pc, #52]	; (8001c48 <MX_USART2_UART_Init+0x90>)
 8001c12:	f009 ff5e 	bl	800bad2 <HAL_UARTEx_SetTxFifoThreshold>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8001c1c:	f7ff fc66 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c20:	2100      	movs	r1, #0
 8001c22:	4809      	ldr	r0, [pc, #36]	; (8001c48 <MX_USART2_UART_Init+0x90>)
 8001c24:	f009 ff93 	bl	800bb4e <HAL_UARTEx_SetRxFifoThreshold>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8001c2e:	f7ff fc5d 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c32:	4805      	ldr	r0, [pc, #20]	; (8001c48 <MX_USART2_UART_Init+0x90>)
 8001c34:	f009 ff14 	bl	800ba60 <HAL_UARTEx_DisableFifoMode>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8001c3e:	f7ff fc55 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	24000610 	.word	0x24000610
 8001c4c:	40004400 	.word	0x40004400
 8001c50:	000f4240 	.word	0x000f4240

08001c54 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c58:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <MX_USART3_UART_Init+0x90>)
 8001c5a:	4a23      	ldr	r2, [pc, #140]	; (8001ce8 <MX_USART3_UART_Init+0x94>)
 8001c5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c5e:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <MX_USART3_UART_Init+0x90>)
 8001c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c66:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <MX_USART3_UART_Init+0x90>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <MX_USART3_UART_Init+0x90>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c72:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <MX_USART3_UART_Init+0x90>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c78:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <MX_USART3_UART_Init+0x90>)
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7e:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <MX_USART3_UART_Init+0x90>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c84:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <MX_USART3_UART_Init+0x90>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <MX_USART3_UART_Init+0x90>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <MX_USART3_UART_Init+0x90>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <MX_USART3_UART_Init+0x90>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c9c:	4811      	ldr	r0, [pc, #68]	; (8001ce4 <MX_USART3_UART_Init+0x90>)
 8001c9e:	f007 f881 	bl	8008da4 <HAL_UART_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ca8:	f7ff fc20 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cac:	2100      	movs	r1, #0
 8001cae:	480d      	ldr	r0, [pc, #52]	; (8001ce4 <MX_USART3_UART_Init+0x90>)
 8001cb0:	f009 ff0f 	bl	800bad2 <HAL_UARTEx_SetTxFifoThreshold>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001cba:	f7ff fc17 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4808      	ldr	r0, [pc, #32]	; (8001ce4 <MX_USART3_UART_Init+0x90>)
 8001cc2:	f009 ff44 	bl	800bb4e <HAL_UARTEx_SetRxFifoThreshold>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ccc:	f7ff fc0e 	bl	80014ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001cd0:	4804      	ldr	r0, [pc, #16]	; (8001ce4 <MX_USART3_UART_Init+0x90>)
 8001cd2:	f009 fec5 	bl	800ba60 <HAL_UARTEx_DisableFifoMode>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001cdc:	f7ff fc06 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	240006a4 	.word	0x240006a4
 8001ce8:	40004800 	.word	0x40004800

08001cec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b0c0      	sub	sp, #256	; 0x100
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d08:	22c0      	movs	r2, #192	; 0xc0
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f009 ffe3 	bl	800bcd8 <memset>
  if(uartHandle->Instance==UART4)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4aab      	ldr	r2, [pc, #684]	; (8001fc4 <HAL_UART_MspInit+0x2d8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d172      	bne.n	8001e02 <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001d1c:	f04f 0202 	mov.w	r2, #2
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 ffd8 	bl	8005ce8 <HAL_RCCEx_PeriphCLKConfig>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001d3e:	f7ff fbd5 	bl	80014ec <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d42:	4ba1      	ldr	r3, [pc, #644]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001d44:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001d48:	4a9f      	ldr	r2, [pc, #636]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001d4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d4e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001d52:	4b9d      	ldr	r3, [pc, #628]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001d54:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001d58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d60:	4b99      	ldr	r3, [pc, #612]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001d62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d66:	4a98      	ldr	r2, [pc, #608]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001d70:	4b95      	ldr	r3, [pc, #596]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001d72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	623b      	str	r3, [r7, #32]
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7e:	4b92      	ldr	r3, [pc, #584]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001d80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d84:	4a90      	ldr	r2, [pc, #576]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001d86:	f043 0308 	orr.w	r3, r3, #8
 8001d8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001d8e:	4b8e      	ldr	r3, [pc, #568]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001d90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	61fb      	str	r3, [r7, #28]
 8001d9a:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001db4:	2308      	movs	r3, #8
 8001db6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4882      	ldr	r0, [pc, #520]	; (8001fcc <HAL_UART_MspInit+0x2e0>)
 8001dc2:	f002 fdaf 	bl	8004924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001dde:	2308      	movs	r3, #8
 8001de0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001de4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001de8:	4619      	mov	r1, r3
 8001dea:	4879      	ldr	r0, [pc, #484]	; (8001fd0 <HAL_UART_MspInit+0x2e4>)
 8001dec:	f002 fd9a 	bl	8004924 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2100      	movs	r1, #0
 8001df4:	2034      	movs	r0, #52	; 0x34
 8001df6:	f000 face 	bl	8002396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001dfa:	2034      	movs	r0, #52	; 0x34
 8001dfc:	f000 fae5 	bl	80023ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e00:	e0db      	b.n	8001fba <HAL_UART_MspInit+0x2ce>
  else if(uartHandle->Instance==USART2)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a73      	ldr	r2, [pc, #460]	; (8001fd4 <HAL_UART_MspInit+0x2e8>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	f040 808a 	bne.w	8001f22 <HAL_UART_MspInit+0x236>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e0e:	f04f 0202 	mov.w	r2, #2
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e24:	4618      	mov	r0, r3
 8001e26:	f003 ff5f 	bl	8005ce8 <HAL_RCCEx_PeriphCLKConfig>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_UART_MspInit+0x148>
      Error_Handler();
 8001e30:	f7ff fb5c 	bl	80014ec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e34:	4b64      	ldr	r3, [pc, #400]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001e36:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001e3a:	4a63      	ldr	r2, [pc, #396]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e40:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001e44:	4b60      	ldr	r3, [pc, #384]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001e46:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	4b5d      	ldr	r3, [pc, #372]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001e54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e58:	4a5b      	ldr	r2, [pc, #364]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001e62:	4b59      	ldr	r3, [pc, #356]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001e64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e70:	2304      	movs	r3, #4
 8001e72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e88:	2307      	movs	r3, #7
 8001e8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e92:	4619      	mov	r1, r3
 8001e94:	484d      	ldr	r0, [pc, #308]	; (8001fcc <HAL_UART_MspInit+0x2e0>)
 8001e96:	f002 fd45 	bl	8004924 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eb2:	2307      	movs	r3, #7
 8001eb4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4843      	ldr	r0, [pc, #268]	; (8001fcc <HAL_UART_MspInit+0x2e0>)
 8001ec0:	f002 fd30 	bl	8004924 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream0;
 8001ec4:	4b44      	ldr	r3, [pc, #272]	; (8001fd8 <HAL_UART_MspInit+0x2ec>)
 8001ec6:	4a45      	ldr	r2, [pc, #276]	; (8001fdc <HAL_UART_MspInit+0x2f0>)
 8001ec8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001eca:	4b43      	ldr	r3, [pc, #268]	; (8001fd8 <HAL_UART_MspInit+0x2ec>)
 8001ecc:	222b      	movs	r2, #43	; 0x2b
 8001ece:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ed0:	4b41      	ldr	r3, [pc, #260]	; (8001fd8 <HAL_UART_MspInit+0x2ec>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed6:	4b40      	ldr	r3, [pc, #256]	; (8001fd8 <HAL_UART_MspInit+0x2ec>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001edc:	4b3e      	ldr	r3, [pc, #248]	; (8001fd8 <HAL_UART_MspInit+0x2ec>)
 8001ede:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ee2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ee4:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <HAL_UART_MspInit+0x2ec>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eea:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <HAL_UART_MspInit+0x2ec>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001ef0:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <HAL_UART_MspInit+0x2ec>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ef6:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <HAL_UART_MspInit+0x2ec>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001efc:	4b36      	ldr	r3, [pc, #216]	; (8001fd8 <HAL_UART_MspInit+0x2ec>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f02:	4835      	ldr	r0, [pc, #212]	; (8001fd8 <HAL_UART_MspInit+0x2ec>)
 8001f04:	f000 fa7c 	bl	8002400 <HAL_DMA_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8001f0e:	f7ff faed 	bl	80014ec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a30      	ldr	r2, [pc, #192]	; (8001fd8 <HAL_UART_MspInit+0x2ec>)
 8001f16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001f1a:	4a2f      	ldr	r2, [pc, #188]	; (8001fd8 <HAL_UART_MspInit+0x2ec>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f20:	e04b      	b.n	8001fba <HAL_UART_MspInit+0x2ce>
  else if(uartHandle->Instance==USART3)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a2e      	ldr	r2, [pc, #184]	; (8001fe0 <HAL_UART_MspInit+0x2f4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d146      	bne.n	8001fba <HAL_UART_MspInit+0x2ce>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f2c:	f04f 0202 	mov.w	r2, #2
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f42:	4618      	mov	r0, r3
 8001f44:	f003 fed0 	bl	8005ce8 <HAL_RCCEx_PeriphCLKConfig>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_UART_MspInit+0x266>
      Error_Handler();
 8001f4e:	f7ff facd 	bl	80014ec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f52:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001f54:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001f58:	4a1b      	ldr	r2, [pc, #108]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001f5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f5e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001f62:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001f64:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f70:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001f76:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001f78:	f043 0308 	orr.w	r3, r3, #8
 8001f7c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_UART_MspInit+0x2dc>)
 8001f82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001f8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fa8:	2307      	movs	r3, #7
 8001faa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fae:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4806      	ldr	r0, [pc, #24]	; (8001fd0 <HAL_UART_MspInit+0x2e4>)
 8001fb6:	f002 fcb5 	bl	8004924 <HAL_GPIO_Init>
}
 8001fba:	bf00      	nop
 8001fbc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40004c00 	.word	0x40004c00
 8001fc8:	58024400 	.word	0x58024400
 8001fcc:	58020000 	.word	0x58020000
 8001fd0:	58020c00 	.word	0x58020c00
 8001fd4:	40004400 	.word	0x40004400
 8001fd8:	24000738 	.word	0x24000738
 8001fdc:	40020010 	.word	0x40020010
 8001fe0:	40004800 	.word	0x40004800

08001fe4 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a05      	ldr	r2, [pc, #20]	; (8002008 <HAL_UART_RxCpltCallback+0x24>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d104      	bne.n	8002000 <HAL_UART_RxCpltCallback+0x1c>
	{
		RPICom_DecodeBinaryMessage();
 8001ff6:	f7fe fe65 	bl	8000cc4 <RPICom_DecodeBinaryMessage>
		RPICom_UartActivate(&hRPICom);
 8001ffa:	4804      	ldr	r0, [pc, #16]	; (800200c <HAL_UART_RxCpltCallback+0x28>)
 8001ffc:	f7fe fe30 	bl	8000c60 <RPICom_UartActivate>
	}
}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40004c00 	.word	0x40004c00
 800200c:	240000b8 	.word	0x240000b8

08002010 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002058 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002024:	f7ff fb92 	bl	800174c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002028:	480c      	ldr	r0, [pc, #48]	; (800205c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800202a:	490d      	ldr	r1, [pc, #52]	; (8002060 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800202c:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002030:	e002      	b.n	8002038 <LoopCopyDataInit>

08002032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002036:	3304      	adds	r3, #4

08002038 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800203c:	d3f9      	bcc.n	8002032 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203e:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002040:	4c0a      	ldr	r4, [pc, #40]	; (800206c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002044:	e001      	b.n	800204a <LoopFillZerobss>

08002046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002048:	3204      	adds	r2, #4

0800204a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800204c:	d3fb      	bcc.n	8002046 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800204e:	f009 fe11 	bl	800bc74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002052:	f7ff f99f 	bl	8001394 <main>
  bx  lr
 8002056:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002058:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800205c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002060:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 8002064:	0800d634 	.word	0x0800d634
  ldr r2, =_sbss
 8002068:	2400009c 	.word	0x2400009c
  ldr r4, =_ebss
 800206c:	240007c4 	.word	0x240007c4

08002070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002070:	e7fe      	b.n	8002070 <ADC_IRQHandler>
	...

08002074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207a:	2003      	movs	r0, #3
 800207c:	f000 f980 	bl	8002380 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002080:	f003 fc5c 	bl	800593c <HAL_RCC_GetSysClockFreq>
 8002084:	4602      	mov	r2, r0
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_Init+0x68>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	4913      	ldr	r1, [pc, #76]	; (80020e0 <HAL_Init+0x6c>)
 8002092:	5ccb      	ldrb	r3, [r1, r3]
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
 800209c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800209e:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <HAL_Init+0x68>)
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	4a0e      	ldr	r2, [pc, #56]	; (80020e0 <HAL_Init+0x6c>)
 80020a8:	5cd3      	ldrb	r3, [r2, r3]
 80020aa:	f003 031f 	and.w	r3, r3, #31
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	4a0b      	ldr	r2, [pc, #44]	; (80020e4 <HAL_Init+0x70>)
 80020b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020b8:	4a0b      	ldr	r2, [pc, #44]	; (80020e8 <HAL_Init+0x74>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020be:	2000      	movs	r0, #0
 80020c0:	f000 f814 	bl	80020ec <HAL_InitTick>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e002      	b.n	80020d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020ce:	f7ff fa13 	bl	80014f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	58024400 	.word	0x58024400
 80020e0:	0800d49c 	.word	0x0800d49c
 80020e4:	2400002c 	.word	0x2400002c
 80020e8:	24000028 	.word	0x24000028

080020ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80020f4:	4b15      	ldr	r3, [pc, #84]	; (800214c <HAL_InitTick+0x60>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e021      	b.n	8002144 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <HAL_InitTick+0x64>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_InitTick+0x60>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002112:	fbb2 f3f3 	udiv	r3, r2, r3
 8002116:	4618      	mov	r0, r3
 8002118:	f000 f965 	bl	80023e6 <HAL_SYSTICK_Config>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e00e      	b.n	8002144 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b0f      	cmp	r3, #15
 800212a:	d80a      	bhi.n	8002142 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800212c:	2200      	movs	r2, #0
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002134:	f000 f92f 	bl	8002396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002138:	4a06      	ldr	r2, [pc, #24]	; (8002154 <HAL_InitTick+0x68>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e000      	b.n	8002144 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	24000034 	.word	0x24000034
 8002150:	24000028 	.word	0x24000028
 8002154:	24000030 	.word	0x24000030

08002158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_IncTick+0x20>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_IncTick+0x24>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4413      	add	r3, r2
 8002168:	4a04      	ldr	r2, [pc, #16]	; (800217c <HAL_IncTick+0x24>)
 800216a:	6013      	str	r3, [r2, #0]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	24000034 	.word	0x24000034
 800217c:	240007b0 	.word	0x240007b0

08002180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return uwTick;
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <HAL_GetTick+0x14>)
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	240007b0 	.word	0x240007b0

08002198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a0:	f7ff ffee 	bl	8002180 <HAL_GetTick>
 80021a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021b0:	d005      	beq.n	80021be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_Delay+0x44>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4413      	add	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021be:	bf00      	nop
 80021c0:	f7ff ffde 	bl	8002180 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d8f7      	bhi.n	80021c0 <HAL_Delay+0x28>
  {
  }
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	24000034 	.word	0x24000034

080021e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <__NVIC_SetPriorityGrouping+0x40>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021fc:	4013      	ands	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 800220a:	4313      	orrs	r3, r2
 800220c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220e:	4a04      	ldr	r2, [pc, #16]	; (8002220 <__NVIC_SetPriorityGrouping+0x40>)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	60d3      	str	r3, [r2, #12]
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000ed00 	.word	0xe000ed00
 8002224:	05fa0000 	.word	0x05fa0000

08002228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <__NVIC_GetPriorityGrouping+0x18>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	0a1b      	lsrs	r3, r3, #8
 8002232:	f003 0307 	and.w	r3, r3, #7
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800224e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002252:	2b00      	cmp	r3, #0
 8002254:	db0b      	blt.n	800226e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002256:	88fb      	ldrh	r3, [r7, #6]
 8002258:	f003 021f 	and.w	r2, r3, #31
 800225c:	4907      	ldr	r1, [pc, #28]	; (800227c <__NVIC_EnableIRQ+0x38>)
 800225e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	2001      	movs	r0, #1
 8002266:	fa00 f202 	lsl.w	r2, r0, r2
 800226a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000e100 	.word	0xe000e100

08002280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	6039      	str	r1, [r7, #0]
 800228a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800228c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002290:	2b00      	cmp	r3, #0
 8002292:	db0a      	blt.n	80022aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	490c      	ldr	r1, [pc, #48]	; (80022cc <__NVIC_SetPriority+0x4c>)
 800229a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	440b      	add	r3, r1
 80022a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a8:	e00a      	b.n	80022c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4908      	ldr	r1, [pc, #32]	; (80022d0 <__NVIC_SetPriority+0x50>)
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	3b04      	subs	r3, #4
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	440b      	add	r3, r1
 80022be:	761a      	strb	r2, [r3, #24]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000e100 	.word	0xe000e100
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	; 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f1c3 0307 	rsb	r3, r3, #7
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	bf28      	it	cs
 80022f2:	2304      	movcs	r3, #4
 80022f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3304      	adds	r3, #4
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d902      	bls.n	8002304 <NVIC_EncodePriority+0x30>
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3b03      	subs	r3, #3
 8002302:	e000      	b.n	8002306 <NVIC_EncodePriority+0x32>
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	401a      	ands	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800231c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43d9      	mvns	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	4313      	orrs	r3, r2
         );
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800234c:	d301      	bcc.n	8002352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234e:	2301      	movs	r3, #1
 8002350:	e00f      	b.n	8002372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <SysTick_Config+0x40>)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235a:	210f      	movs	r1, #15
 800235c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002360:	f7ff ff8e 	bl	8002280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <SysTick_Config+0x40>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236a:	4b04      	ldr	r3, [pc, #16]	; (800237c <SysTick_Config+0x40>)
 800236c:	2207      	movs	r2, #7
 800236e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	e000e010 	.word	0xe000e010

08002380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff29 	bl	80021e0 <__NVIC_SetPriorityGrouping>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023a4:	f7ff ff40 	bl	8002228 <__NVIC_GetPriorityGrouping>
 80023a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	6978      	ldr	r0, [r7, #20]
 80023b0:	f7ff ff90 	bl	80022d4 <NVIC_EncodePriority>
 80023b4:	4602      	mov	r2, r0
 80023b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff5f 	bl	8002280 <__NVIC_SetPriority>
}
 80023c2:	bf00      	nop
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff33 	bl	8002244 <__NVIC_EnableIRQ>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ffa4 	bl	800233c <SysTick_Config>
 80023f4:	4603      	mov	r3, r0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002408:	f7ff feba 	bl	8002180 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e37f      	b.n	8002b18 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a66      	ldr	r2, [pc, #408]	; (80025b8 <HAL_DMA_Init+0x1b8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d04a      	beq.n	80024b8 <HAL_DMA_Init+0xb8>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a65      	ldr	r2, [pc, #404]	; (80025bc <HAL_DMA_Init+0x1bc>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d045      	beq.n	80024b8 <HAL_DMA_Init+0xb8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a63      	ldr	r2, [pc, #396]	; (80025c0 <HAL_DMA_Init+0x1c0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d040      	beq.n	80024b8 <HAL_DMA_Init+0xb8>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a62      	ldr	r2, [pc, #392]	; (80025c4 <HAL_DMA_Init+0x1c4>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d03b      	beq.n	80024b8 <HAL_DMA_Init+0xb8>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a60      	ldr	r2, [pc, #384]	; (80025c8 <HAL_DMA_Init+0x1c8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d036      	beq.n	80024b8 <HAL_DMA_Init+0xb8>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a5f      	ldr	r2, [pc, #380]	; (80025cc <HAL_DMA_Init+0x1cc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d031      	beq.n	80024b8 <HAL_DMA_Init+0xb8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a5d      	ldr	r2, [pc, #372]	; (80025d0 <HAL_DMA_Init+0x1d0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d02c      	beq.n	80024b8 <HAL_DMA_Init+0xb8>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a5c      	ldr	r2, [pc, #368]	; (80025d4 <HAL_DMA_Init+0x1d4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d027      	beq.n	80024b8 <HAL_DMA_Init+0xb8>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a5a      	ldr	r2, [pc, #360]	; (80025d8 <HAL_DMA_Init+0x1d8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d022      	beq.n	80024b8 <HAL_DMA_Init+0xb8>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a59      	ldr	r2, [pc, #356]	; (80025dc <HAL_DMA_Init+0x1dc>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d01d      	beq.n	80024b8 <HAL_DMA_Init+0xb8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a57      	ldr	r2, [pc, #348]	; (80025e0 <HAL_DMA_Init+0x1e0>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d018      	beq.n	80024b8 <HAL_DMA_Init+0xb8>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a56      	ldr	r2, [pc, #344]	; (80025e4 <HAL_DMA_Init+0x1e4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d013      	beq.n	80024b8 <HAL_DMA_Init+0xb8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a54      	ldr	r2, [pc, #336]	; (80025e8 <HAL_DMA_Init+0x1e8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00e      	beq.n	80024b8 <HAL_DMA_Init+0xb8>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a53      	ldr	r2, [pc, #332]	; (80025ec <HAL_DMA_Init+0x1ec>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d009      	beq.n	80024b8 <HAL_DMA_Init+0xb8>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a51      	ldr	r2, [pc, #324]	; (80025f0 <HAL_DMA_Init+0x1f0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d004      	beq.n	80024b8 <HAL_DMA_Init+0xb8>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a50      	ldr	r2, [pc, #320]	; (80025f4 <HAL_DMA_Init+0x1f4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d101      	bne.n	80024bc <HAL_DMA_Init+0xbc>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <HAL_DMA_Init+0xbe>
 80024bc:	2300      	movs	r3, #0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 813c 	beq.w	800273c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a37      	ldr	r2, [pc, #220]	; (80025b8 <HAL_DMA_Init+0x1b8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d04a      	beq.n	8002574 <HAL_DMA_Init+0x174>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a36      	ldr	r2, [pc, #216]	; (80025bc <HAL_DMA_Init+0x1bc>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d045      	beq.n	8002574 <HAL_DMA_Init+0x174>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a34      	ldr	r2, [pc, #208]	; (80025c0 <HAL_DMA_Init+0x1c0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d040      	beq.n	8002574 <HAL_DMA_Init+0x174>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a33      	ldr	r2, [pc, #204]	; (80025c4 <HAL_DMA_Init+0x1c4>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d03b      	beq.n	8002574 <HAL_DMA_Init+0x174>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a31      	ldr	r2, [pc, #196]	; (80025c8 <HAL_DMA_Init+0x1c8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d036      	beq.n	8002574 <HAL_DMA_Init+0x174>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a30      	ldr	r2, [pc, #192]	; (80025cc <HAL_DMA_Init+0x1cc>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d031      	beq.n	8002574 <HAL_DMA_Init+0x174>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a2e      	ldr	r2, [pc, #184]	; (80025d0 <HAL_DMA_Init+0x1d0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d02c      	beq.n	8002574 <HAL_DMA_Init+0x174>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a2d      	ldr	r2, [pc, #180]	; (80025d4 <HAL_DMA_Init+0x1d4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d027      	beq.n	8002574 <HAL_DMA_Init+0x174>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a2b      	ldr	r2, [pc, #172]	; (80025d8 <HAL_DMA_Init+0x1d8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d022      	beq.n	8002574 <HAL_DMA_Init+0x174>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a2a      	ldr	r2, [pc, #168]	; (80025dc <HAL_DMA_Init+0x1dc>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d01d      	beq.n	8002574 <HAL_DMA_Init+0x174>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a28      	ldr	r2, [pc, #160]	; (80025e0 <HAL_DMA_Init+0x1e0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d018      	beq.n	8002574 <HAL_DMA_Init+0x174>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a27      	ldr	r2, [pc, #156]	; (80025e4 <HAL_DMA_Init+0x1e4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d013      	beq.n	8002574 <HAL_DMA_Init+0x174>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a25      	ldr	r2, [pc, #148]	; (80025e8 <HAL_DMA_Init+0x1e8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00e      	beq.n	8002574 <HAL_DMA_Init+0x174>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a24      	ldr	r2, [pc, #144]	; (80025ec <HAL_DMA_Init+0x1ec>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d009      	beq.n	8002574 <HAL_DMA_Init+0x174>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a22      	ldr	r2, [pc, #136]	; (80025f0 <HAL_DMA_Init+0x1f0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d004      	beq.n	8002574 <HAL_DMA_Init+0x174>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a21      	ldr	r2, [pc, #132]	; (80025f4 <HAL_DMA_Init+0x1f4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d108      	bne.n	8002586 <HAL_DMA_Init+0x186>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0201 	bic.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e007      	b.n	8002596 <HAL_DMA_Init+0x196>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0201 	bic.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002596:	e02f      	b.n	80025f8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002598:	f7ff fdf2 	bl	8002180 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b05      	cmp	r3, #5
 80025a4:	d928      	bls.n	80025f8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2220      	movs	r2, #32
 80025aa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2203      	movs	r2, #3
 80025b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e2af      	b.n	8002b18 <HAL_DMA_Init+0x718>
 80025b8:	40020010 	.word	0x40020010
 80025bc:	40020028 	.word	0x40020028
 80025c0:	40020040 	.word	0x40020040
 80025c4:	40020058 	.word	0x40020058
 80025c8:	40020070 	.word	0x40020070
 80025cc:	40020088 	.word	0x40020088
 80025d0:	400200a0 	.word	0x400200a0
 80025d4:	400200b8 	.word	0x400200b8
 80025d8:	40020410 	.word	0x40020410
 80025dc:	40020428 	.word	0x40020428
 80025e0:	40020440 	.word	0x40020440
 80025e4:	40020458 	.word	0x40020458
 80025e8:	40020470 	.word	0x40020470
 80025ec:	40020488 	.word	0x40020488
 80025f0:	400204a0 	.word	0x400204a0
 80025f4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1c8      	bne.n	8002598 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4b73      	ldr	r3, [pc, #460]	; (80027e0 <HAL_DMA_Init+0x3e0>)
 8002612:	4013      	ands	r3, r2
 8002614:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800261e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002636:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	2b04      	cmp	r3, #4
 800264a:	d107      	bne.n	800265c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	4313      	orrs	r3, r2
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4313      	orrs	r3, r2
 800265a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b28      	cmp	r3, #40	; 0x28
 8002662:	d903      	bls.n	800266c <HAL_DMA_Init+0x26c>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b2e      	cmp	r3, #46	; 0x2e
 800266a:	d91f      	bls.n	80026ac <HAL_DMA_Init+0x2ac>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b3e      	cmp	r3, #62	; 0x3e
 8002672:	d903      	bls.n	800267c <HAL_DMA_Init+0x27c>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b42      	cmp	r3, #66	; 0x42
 800267a:	d917      	bls.n	80026ac <HAL_DMA_Init+0x2ac>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b46      	cmp	r3, #70	; 0x46
 8002682:	d903      	bls.n	800268c <HAL_DMA_Init+0x28c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b48      	cmp	r3, #72	; 0x48
 800268a:	d90f      	bls.n	80026ac <HAL_DMA_Init+0x2ac>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b4e      	cmp	r3, #78	; 0x4e
 8002692:	d903      	bls.n	800269c <HAL_DMA_Init+0x29c>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b52      	cmp	r3, #82	; 0x52
 800269a:	d907      	bls.n	80026ac <HAL_DMA_Init+0x2ac>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b73      	cmp	r3, #115	; 0x73
 80026a2:	d905      	bls.n	80026b0 <HAL_DMA_Init+0x2b0>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b77      	cmp	r3, #119	; 0x77
 80026aa:	d801      	bhi.n	80026b0 <HAL_DMA_Init+0x2b0>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <HAL_DMA_Init+0x2b2>
 80026b0:	2300      	movs	r3, #0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026bc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f023 0307 	bic.w	r3, r3, #7
 80026d4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d117      	bne.n	8002718 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00e      	beq.n	8002718 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f001 ff88 	bl	8004610 <DMA_CheckFifoParam>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2240      	movs	r2, #64	; 0x40
 800270a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e1ff      	b.n	8002b18 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f001 fec3 	bl	80044ac <DMA_CalcBaseAndBitshift>
 8002726:	4603      	mov	r3, r0
 8002728:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272e:	f003 031f 	and.w	r3, r3, #31
 8002732:	223f      	movs	r2, #63	; 0x3f
 8002734:	409a      	lsls	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	e0fe      	b.n	800293a <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a28      	ldr	r2, [pc, #160]	; (80027e4 <HAL_DMA_Init+0x3e4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d04a      	beq.n	80027dc <HAL_DMA_Init+0x3dc>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a27      	ldr	r2, [pc, #156]	; (80027e8 <HAL_DMA_Init+0x3e8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d045      	beq.n	80027dc <HAL_DMA_Init+0x3dc>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a25      	ldr	r2, [pc, #148]	; (80027ec <HAL_DMA_Init+0x3ec>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d040      	beq.n	80027dc <HAL_DMA_Init+0x3dc>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a24      	ldr	r2, [pc, #144]	; (80027f0 <HAL_DMA_Init+0x3f0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d03b      	beq.n	80027dc <HAL_DMA_Init+0x3dc>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a22      	ldr	r2, [pc, #136]	; (80027f4 <HAL_DMA_Init+0x3f4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d036      	beq.n	80027dc <HAL_DMA_Init+0x3dc>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a21      	ldr	r2, [pc, #132]	; (80027f8 <HAL_DMA_Init+0x3f8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d031      	beq.n	80027dc <HAL_DMA_Init+0x3dc>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1f      	ldr	r2, [pc, #124]	; (80027fc <HAL_DMA_Init+0x3fc>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d02c      	beq.n	80027dc <HAL_DMA_Init+0x3dc>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1e      	ldr	r2, [pc, #120]	; (8002800 <HAL_DMA_Init+0x400>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d027      	beq.n	80027dc <HAL_DMA_Init+0x3dc>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1c      	ldr	r2, [pc, #112]	; (8002804 <HAL_DMA_Init+0x404>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d022      	beq.n	80027dc <HAL_DMA_Init+0x3dc>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a1b      	ldr	r2, [pc, #108]	; (8002808 <HAL_DMA_Init+0x408>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d01d      	beq.n	80027dc <HAL_DMA_Init+0x3dc>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a19      	ldr	r2, [pc, #100]	; (800280c <HAL_DMA_Init+0x40c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d018      	beq.n	80027dc <HAL_DMA_Init+0x3dc>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a18      	ldr	r2, [pc, #96]	; (8002810 <HAL_DMA_Init+0x410>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d013      	beq.n	80027dc <HAL_DMA_Init+0x3dc>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a16      	ldr	r2, [pc, #88]	; (8002814 <HAL_DMA_Init+0x414>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00e      	beq.n	80027dc <HAL_DMA_Init+0x3dc>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a15      	ldr	r2, [pc, #84]	; (8002818 <HAL_DMA_Init+0x418>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d009      	beq.n	80027dc <HAL_DMA_Init+0x3dc>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a13      	ldr	r2, [pc, #76]	; (800281c <HAL_DMA_Init+0x41c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d004      	beq.n	80027dc <HAL_DMA_Init+0x3dc>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a12      	ldr	r2, [pc, #72]	; (8002820 <HAL_DMA_Init+0x420>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d123      	bne.n	8002824 <HAL_DMA_Init+0x424>
 80027dc:	2301      	movs	r3, #1
 80027de:	e022      	b.n	8002826 <HAL_DMA_Init+0x426>
 80027e0:	fe10803f 	.word	0xfe10803f
 80027e4:	48022c08 	.word	0x48022c08
 80027e8:	48022c1c 	.word	0x48022c1c
 80027ec:	48022c30 	.word	0x48022c30
 80027f0:	48022c44 	.word	0x48022c44
 80027f4:	48022c58 	.word	0x48022c58
 80027f8:	48022c6c 	.word	0x48022c6c
 80027fc:	48022c80 	.word	0x48022c80
 8002800:	48022c94 	.word	0x48022c94
 8002804:	58025408 	.word	0x58025408
 8002808:	5802541c 	.word	0x5802541c
 800280c:	58025430 	.word	0x58025430
 8002810:	58025444 	.word	0x58025444
 8002814:	58025458 	.word	0x58025458
 8002818:	5802546c 	.word	0x5802546c
 800281c:	58025480 	.word	0x58025480
 8002820:	58025494 	.word	0x58025494
 8002824:	2300      	movs	r3, #0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d07e      	beq.n	8002928 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a80      	ldr	r2, [pc, #512]	; (8002a30 <HAL_DMA_Init+0x630>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d021      	beq.n	8002878 <HAL_DMA_Init+0x478>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a7e      	ldr	r2, [pc, #504]	; (8002a34 <HAL_DMA_Init+0x634>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d01c      	beq.n	8002878 <HAL_DMA_Init+0x478>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a7d      	ldr	r2, [pc, #500]	; (8002a38 <HAL_DMA_Init+0x638>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d017      	beq.n	8002878 <HAL_DMA_Init+0x478>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a7b      	ldr	r2, [pc, #492]	; (8002a3c <HAL_DMA_Init+0x63c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d012      	beq.n	8002878 <HAL_DMA_Init+0x478>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a7a      	ldr	r2, [pc, #488]	; (8002a40 <HAL_DMA_Init+0x640>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d00d      	beq.n	8002878 <HAL_DMA_Init+0x478>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a78      	ldr	r2, [pc, #480]	; (8002a44 <HAL_DMA_Init+0x644>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d008      	beq.n	8002878 <HAL_DMA_Init+0x478>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a77      	ldr	r2, [pc, #476]	; (8002a48 <HAL_DMA_Init+0x648>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d003      	beq.n	8002878 <HAL_DMA_Init+0x478>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a75      	ldr	r2, [pc, #468]	; (8002a4c <HAL_DMA_Init+0x64c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2202      	movs	r2, #2
 800287e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4b6e      	ldr	r3, [pc, #440]	; (8002a50 <HAL_DMA_Init+0x650>)
 8002896:	4013      	ands	r3, r2
 8002898:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	d008      	beq.n	80028b4 <HAL_DMA_Init+0x4b4>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b80      	cmp	r3, #128	; 0x80
 80028a8:	d102      	bne.n	80028b0 <HAL_DMA_Init+0x4b0>
 80028aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028ae:	e002      	b.n	80028b6 <HAL_DMA_Init+0x4b6>
 80028b0:	2300      	movs	r3, #0
 80028b2:	e000      	b.n	80028b6 <HAL_DMA_Init+0x4b6>
 80028b4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	68d2      	ldr	r2, [r2, #12]
 80028ba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80028d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80028dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80028e4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	4b56      	ldr	r3, [pc, #344]	; (8002a54 <HAL_DMA_Init+0x654>)
 80028fc:	4413      	add	r3, r2
 80028fe:	4a56      	ldr	r2, [pc, #344]	; (8002a58 <HAL_DMA_Init+0x658>)
 8002900:	fba2 2303 	umull	r2, r3, r2, r3
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	009a      	lsls	r2, r3, #2
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f001 fdcd 	bl	80044ac <DMA_CalcBaseAndBitshift>
 8002912:	4603      	mov	r3, r0
 8002914:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	2201      	movs	r2, #1
 8002920:	409a      	lsls	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	e008      	b.n	800293a <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2240      	movs	r2, #64	; 0x40
 800292c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2203      	movs	r2, #3
 8002932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e0ee      	b.n	8002b18 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a47      	ldr	r2, [pc, #284]	; (8002a5c <HAL_DMA_Init+0x65c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d072      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a45      	ldr	r2, [pc, #276]	; (8002a60 <HAL_DMA_Init+0x660>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d06d      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a44      	ldr	r2, [pc, #272]	; (8002a64 <HAL_DMA_Init+0x664>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d068      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a42      	ldr	r2, [pc, #264]	; (8002a68 <HAL_DMA_Init+0x668>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d063      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a41      	ldr	r2, [pc, #260]	; (8002a6c <HAL_DMA_Init+0x66c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d05e      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a3f      	ldr	r2, [pc, #252]	; (8002a70 <HAL_DMA_Init+0x670>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d059      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a3e      	ldr	r2, [pc, #248]	; (8002a74 <HAL_DMA_Init+0x674>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d054      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a3c      	ldr	r2, [pc, #240]	; (8002a78 <HAL_DMA_Init+0x678>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d04f      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a3b      	ldr	r2, [pc, #236]	; (8002a7c <HAL_DMA_Init+0x67c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d04a      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a39      	ldr	r2, [pc, #228]	; (8002a80 <HAL_DMA_Init+0x680>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d045      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a38      	ldr	r2, [pc, #224]	; (8002a84 <HAL_DMA_Init+0x684>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d040      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a36      	ldr	r2, [pc, #216]	; (8002a88 <HAL_DMA_Init+0x688>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d03b      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a35      	ldr	r2, [pc, #212]	; (8002a8c <HAL_DMA_Init+0x68c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d036      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a33      	ldr	r2, [pc, #204]	; (8002a90 <HAL_DMA_Init+0x690>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d031      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a32      	ldr	r2, [pc, #200]	; (8002a94 <HAL_DMA_Init+0x694>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d02c      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a30      	ldr	r2, [pc, #192]	; (8002a98 <HAL_DMA_Init+0x698>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d027      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a14      	ldr	r2, [pc, #80]	; (8002a30 <HAL_DMA_Init+0x630>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d022      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <HAL_DMA_Init+0x634>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d01d      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a11      	ldr	r2, [pc, #68]	; (8002a38 <HAL_DMA_Init+0x638>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d018      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0f      	ldr	r2, [pc, #60]	; (8002a3c <HAL_DMA_Init+0x63c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <HAL_DMA_Init+0x640>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00e      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0c      	ldr	r2, [pc, #48]	; (8002a44 <HAL_DMA_Init+0x644>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d009      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a0b      	ldr	r2, [pc, #44]	; (8002a48 <HAL_DMA_Init+0x648>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d004      	beq.n	8002a2a <HAL_DMA_Init+0x62a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a09      	ldr	r2, [pc, #36]	; (8002a4c <HAL_DMA_Init+0x64c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d138      	bne.n	8002a9c <HAL_DMA_Init+0x69c>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e037      	b.n	8002a9e <HAL_DMA_Init+0x69e>
 8002a2e:	bf00      	nop
 8002a30:	58025408 	.word	0x58025408
 8002a34:	5802541c 	.word	0x5802541c
 8002a38:	58025430 	.word	0x58025430
 8002a3c:	58025444 	.word	0x58025444
 8002a40:	58025458 	.word	0x58025458
 8002a44:	5802546c 	.word	0x5802546c
 8002a48:	58025480 	.word	0x58025480
 8002a4c:	58025494 	.word	0x58025494
 8002a50:	fffe000f 	.word	0xfffe000f
 8002a54:	a7fdabf8 	.word	0xa7fdabf8
 8002a58:	cccccccd 	.word	0xcccccccd
 8002a5c:	40020010 	.word	0x40020010
 8002a60:	40020028 	.word	0x40020028
 8002a64:	40020040 	.word	0x40020040
 8002a68:	40020058 	.word	0x40020058
 8002a6c:	40020070 	.word	0x40020070
 8002a70:	40020088 	.word	0x40020088
 8002a74:	400200a0 	.word	0x400200a0
 8002a78:	400200b8 	.word	0x400200b8
 8002a7c:	40020410 	.word	0x40020410
 8002a80:	40020428 	.word	0x40020428
 8002a84:	40020440 	.word	0x40020440
 8002a88:	40020458 	.word	0x40020458
 8002a8c:	40020470 	.word	0x40020470
 8002a90:	40020488 	.word	0x40020488
 8002a94:	400204a0 	.word	0x400204a0
 8002a98:	400204b8 	.word	0x400204b8
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d032      	beq.n	8002b08 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f001 fe30 	bl	8004708 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b80      	cmp	r3, #128	; 0x80
 8002aae:	d102      	bne.n	8002ab6 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002aca:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d010      	beq.n	8002af6 <HAL_DMA_Init+0x6f6>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d80c      	bhi.n	8002af6 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f001 fead 	bl	800483c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	e008      	b.n	8002b08 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002b28:	f7ff fb2a 	bl	8002180 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e2dc      	b.n	80030f2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d008      	beq.n	8002b56 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2280      	movs	r2, #128	; 0x80
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e2cd      	b.n	80030f2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a76      	ldr	r2, [pc, #472]	; (8002d34 <HAL_DMA_Abort+0x214>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d04a      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a74      	ldr	r2, [pc, #464]	; (8002d38 <HAL_DMA_Abort+0x218>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d045      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a73      	ldr	r2, [pc, #460]	; (8002d3c <HAL_DMA_Abort+0x21c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d040      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a71      	ldr	r2, [pc, #452]	; (8002d40 <HAL_DMA_Abort+0x220>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d03b      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a70      	ldr	r2, [pc, #448]	; (8002d44 <HAL_DMA_Abort+0x224>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d036      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a6e      	ldr	r2, [pc, #440]	; (8002d48 <HAL_DMA_Abort+0x228>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d031      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a6d      	ldr	r2, [pc, #436]	; (8002d4c <HAL_DMA_Abort+0x22c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d02c      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a6b      	ldr	r2, [pc, #428]	; (8002d50 <HAL_DMA_Abort+0x230>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d027      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a6a      	ldr	r2, [pc, #424]	; (8002d54 <HAL_DMA_Abort+0x234>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d022      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a68      	ldr	r2, [pc, #416]	; (8002d58 <HAL_DMA_Abort+0x238>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01d      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a67      	ldr	r2, [pc, #412]	; (8002d5c <HAL_DMA_Abort+0x23c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d018      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a65      	ldr	r2, [pc, #404]	; (8002d60 <HAL_DMA_Abort+0x240>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d013      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a64      	ldr	r2, [pc, #400]	; (8002d64 <HAL_DMA_Abort+0x244>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00e      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a62      	ldr	r2, [pc, #392]	; (8002d68 <HAL_DMA_Abort+0x248>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d009      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a61      	ldr	r2, [pc, #388]	; (8002d6c <HAL_DMA_Abort+0x24c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d004      	beq.n	8002bf6 <HAL_DMA_Abort+0xd6>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a5f      	ldr	r2, [pc, #380]	; (8002d70 <HAL_DMA_Abort+0x250>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d101      	bne.n	8002bfa <HAL_DMA_Abort+0xda>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <HAL_DMA_Abort+0xdc>
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d013      	beq.n	8002c28 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 021e 	bic.w	r2, r2, #30
 8002c0e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c1e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	e00a      	b.n	8002c3e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 020e 	bic.w	r2, r2, #14
 8002c36:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a3c      	ldr	r2, [pc, #240]	; (8002d34 <HAL_DMA_Abort+0x214>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d072      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a3a      	ldr	r2, [pc, #232]	; (8002d38 <HAL_DMA_Abort+0x218>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d06d      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a39      	ldr	r2, [pc, #228]	; (8002d3c <HAL_DMA_Abort+0x21c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d068      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a37      	ldr	r2, [pc, #220]	; (8002d40 <HAL_DMA_Abort+0x220>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d063      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a36      	ldr	r2, [pc, #216]	; (8002d44 <HAL_DMA_Abort+0x224>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d05e      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a34      	ldr	r2, [pc, #208]	; (8002d48 <HAL_DMA_Abort+0x228>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d059      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a33      	ldr	r2, [pc, #204]	; (8002d4c <HAL_DMA_Abort+0x22c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d054      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a31      	ldr	r2, [pc, #196]	; (8002d50 <HAL_DMA_Abort+0x230>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d04f      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a30      	ldr	r2, [pc, #192]	; (8002d54 <HAL_DMA_Abort+0x234>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d04a      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a2e      	ldr	r2, [pc, #184]	; (8002d58 <HAL_DMA_Abort+0x238>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d045      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a2d      	ldr	r2, [pc, #180]	; (8002d5c <HAL_DMA_Abort+0x23c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d040      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a2b      	ldr	r2, [pc, #172]	; (8002d60 <HAL_DMA_Abort+0x240>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d03b      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a2a      	ldr	r2, [pc, #168]	; (8002d64 <HAL_DMA_Abort+0x244>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d036      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a28      	ldr	r2, [pc, #160]	; (8002d68 <HAL_DMA_Abort+0x248>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d031      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a27      	ldr	r2, [pc, #156]	; (8002d6c <HAL_DMA_Abort+0x24c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d02c      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a25      	ldr	r2, [pc, #148]	; (8002d70 <HAL_DMA_Abort+0x250>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d027      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a24      	ldr	r2, [pc, #144]	; (8002d74 <HAL_DMA_Abort+0x254>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d022      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a22      	ldr	r2, [pc, #136]	; (8002d78 <HAL_DMA_Abort+0x258>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01d      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a21      	ldr	r2, [pc, #132]	; (8002d7c <HAL_DMA_Abort+0x25c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d018      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1f      	ldr	r2, [pc, #124]	; (8002d80 <HAL_DMA_Abort+0x260>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d013      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a1e      	ldr	r2, [pc, #120]	; (8002d84 <HAL_DMA_Abort+0x264>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00e      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1c      	ldr	r2, [pc, #112]	; (8002d88 <HAL_DMA_Abort+0x268>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d009      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1b      	ldr	r2, [pc, #108]	; (8002d8c <HAL_DMA_Abort+0x26c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d004      	beq.n	8002d2e <HAL_DMA_Abort+0x20e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a19      	ldr	r2, [pc, #100]	; (8002d90 <HAL_DMA_Abort+0x270>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d132      	bne.n	8002d94 <HAL_DMA_Abort+0x274>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e031      	b.n	8002d96 <HAL_DMA_Abort+0x276>
 8002d32:	bf00      	nop
 8002d34:	40020010 	.word	0x40020010
 8002d38:	40020028 	.word	0x40020028
 8002d3c:	40020040 	.word	0x40020040
 8002d40:	40020058 	.word	0x40020058
 8002d44:	40020070 	.word	0x40020070
 8002d48:	40020088 	.word	0x40020088
 8002d4c:	400200a0 	.word	0x400200a0
 8002d50:	400200b8 	.word	0x400200b8
 8002d54:	40020410 	.word	0x40020410
 8002d58:	40020428 	.word	0x40020428
 8002d5c:	40020440 	.word	0x40020440
 8002d60:	40020458 	.word	0x40020458
 8002d64:	40020470 	.word	0x40020470
 8002d68:	40020488 	.word	0x40020488
 8002d6c:	400204a0 	.word	0x400204a0
 8002d70:	400204b8 	.word	0x400204b8
 8002d74:	58025408 	.word	0x58025408
 8002d78:	5802541c 	.word	0x5802541c
 8002d7c:	58025430 	.word	0x58025430
 8002d80:	58025444 	.word	0x58025444
 8002d84:	58025458 	.word	0x58025458
 8002d88:	5802546c 	.word	0x5802546c
 8002d8c:	58025480 	.word	0x58025480
 8002d90:	58025494 	.word	0x58025494
 8002d94:	2300      	movs	r3, #0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002da8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6d      	ldr	r2, [pc, #436]	; (8002f64 <HAL_DMA_Abort+0x444>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d04a      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a6b      	ldr	r2, [pc, #428]	; (8002f68 <HAL_DMA_Abort+0x448>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d045      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a6a      	ldr	r2, [pc, #424]	; (8002f6c <HAL_DMA_Abort+0x44c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d040      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a68      	ldr	r2, [pc, #416]	; (8002f70 <HAL_DMA_Abort+0x450>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d03b      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a67      	ldr	r2, [pc, #412]	; (8002f74 <HAL_DMA_Abort+0x454>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d036      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a65      	ldr	r2, [pc, #404]	; (8002f78 <HAL_DMA_Abort+0x458>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d031      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a64      	ldr	r2, [pc, #400]	; (8002f7c <HAL_DMA_Abort+0x45c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d02c      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a62      	ldr	r2, [pc, #392]	; (8002f80 <HAL_DMA_Abort+0x460>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d027      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a61      	ldr	r2, [pc, #388]	; (8002f84 <HAL_DMA_Abort+0x464>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d022      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a5f      	ldr	r2, [pc, #380]	; (8002f88 <HAL_DMA_Abort+0x468>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d01d      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a5e      	ldr	r2, [pc, #376]	; (8002f8c <HAL_DMA_Abort+0x46c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d018      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a5c      	ldr	r2, [pc, #368]	; (8002f90 <HAL_DMA_Abort+0x470>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a5b      	ldr	r2, [pc, #364]	; (8002f94 <HAL_DMA_Abort+0x474>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d00e      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a59      	ldr	r2, [pc, #356]	; (8002f98 <HAL_DMA_Abort+0x478>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d009      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a58      	ldr	r2, [pc, #352]	; (8002f9c <HAL_DMA_Abort+0x47c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d004      	beq.n	8002e4a <HAL_DMA_Abort+0x32a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a56      	ldr	r2, [pc, #344]	; (8002fa0 <HAL_DMA_Abort+0x480>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d108      	bne.n	8002e5c <HAL_DMA_Abort+0x33c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0201 	bic.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	e007      	b.n	8002e6c <HAL_DMA_Abort+0x34c>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e6c:	e013      	b.n	8002e96 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e6e:	f7ff f987 	bl	8002180 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b05      	cmp	r3, #5
 8002e7a:	d90c      	bls.n	8002e96 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2203      	movs	r2, #3
 8002e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e12d      	b.n	80030f2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1e5      	bne.n	8002e6e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a2f      	ldr	r2, [pc, #188]	; (8002f64 <HAL_DMA_Abort+0x444>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d04a      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a2d      	ldr	r2, [pc, #180]	; (8002f68 <HAL_DMA_Abort+0x448>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d045      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a2c      	ldr	r2, [pc, #176]	; (8002f6c <HAL_DMA_Abort+0x44c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d040      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a2a      	ldr	r2, [pc, #168]	; (8002f70 <HAL_DMA_Abort+0x450>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d03b      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a29      	ldr	r2, [pc, #164]	; (8002f74 <HAL_DMA_Abort+0x454>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d036      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a27      	ldr	r2, [pc, #156]	; (8002f78 <HAL_DMA_Abort+0x458>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d031      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a26      	ldr	r2, [pc, #152]	; (8002f7c <HAL_DMA_Abort+0x45c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d02c      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a24      	ldr	r2, [pc, #144]	; (8002f80 <HAL_DMA_Abort+0x460>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d027      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a23      	ldr	r2, [pc, #140]	; (8002f84 <HAL_DMA_Abort+0x464>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d022      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a21      	ldr	r2, [pc, #132]	; (8002f88 <HAL_DMA_Abort+0x468>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01d      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a20      	ldr	r2, [pc, #128]	; (8002f8c <HAL_DMA_Abort+0x46c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d018      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1e      	ldr	r2, [pc, #120]	; (8002f90 <HAL_DMA_Abort+0x470>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d013      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <HAL_DMA_Abort+0x474>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d00e      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1b      	ldr	r2, [pc, #108]	; (8002f98 <HAL_DMA_Abort+0x478>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d009      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1a      	ldr	r2, [pc, #104]	; (8002f9c <HAL_DMA_Abort+0x47c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d004      	beq.n	8002f42 <HAL_DMA_Abort+0x422>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a18      	ldr	r2, [pc, #96]	; (8002fa0 <HAL_DMA_Abort+0x480>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d101      	bne.n	8002f46 <HAL_DMA_Abort+0x426>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_DMA_Abort+0x428>
 8002f46:	2300      	movs	r3, #0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d02b      	beq.n	8002fa4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	223f      	movs	r2, #63	; 0x3f
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	e02a      	b.n	8002fba <HAL_DMA_Abort+0x49a>
 8002f64:	40020010 	.word	0x40020010
 8002f68:	40020028 	.word	0x40020028
 8002f6c:	40020040 	.word	0x40020040
 8002f70:	40020058 	.word	0x40020058
 8002f74:	40020070 	.word	0x40020070
 8002f78:	40020088 	.word	0x40020088
 8002f7c:	400200a0 	.word	0x400200a0
 8002f80:	400200b8 	.word	0x400200b8
 8002f84:	40020410 	.word	0x40020410
 8002f88:	40020428 	.word	0x40020428
 8002f8c:	40020440 	.word	0x40020440
 8002f90:	40020458 	.word	0x40020458
 8002f94:	40020470 	.word	0x40020470
 8002f98:	40020488 	.word	0x40020488
 8002f9c:	400204a0 	.word	0x400204a0
 8002fa0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a4f      	ldr	r2, [pc, #316]	; (80030fc <HAL_DMA_Abort+0x5dc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d072      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a4d      	ldr	r2, [pc, #308]	; (8003100 <HAL_DMA_Abort+0x5e0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d06d      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a4c      	ldr	r2, [pc, #304]	; (8003104 <HAL_DMA_Abort+0x5e4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d068      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a4a      	ldr	r2, [pc, #296]	; (8003108 <HAL_DMA_Abort+0x5e8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d063      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a49      	ldr	r2, [pc, #292]	; (800310c <HAL_DMA_Abort+0x5ec>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d05e      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a47      	ldr	r2, [pc, #284]	; (8003110 <HAL_DMA_Abort+0x5f0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d059      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a46      	ldr	r2, [pc, #280]	; (8003114 <HAL_DMA_Abort+0x5f4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d054      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a44      	ldr	r2, [pc, #272]	; (8003118 <HAL_DMA_Abort+0x5f8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d04f      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a43      	ldr	r2, [pc, #268]	; (800311c <HAL_DMA_Abort+0x5fc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d04a      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a41      	ldr	r2, [pc, #260]	; (8003120 <HAL_DMA_Abort+0x600>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d045      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a40      	ldr	r2, [pc, #256]	; (8003124 <HAL_DMA_Abort+0x604>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d040      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a3e      	ldr	r2, [pc, #248]	; (8003128 <HAL_DMA_Abort+0x608>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d03b      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a3d      	ldr	r2, [pc, #244]	; (800312c <HAL_DMA_Abort+0x60c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d036      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a3b      	ldr	r2, [pc, #236]	; (8003130 <HAL_DMA_Abort+0x610>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d031      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a3a      	ldr	r2, [pc, #232]	; (8003134 <HAL_DMA_Abort+0x614>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d02c      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a38      	ldr	r2, [pc, #224]	; (8003138 <HAL_DMA_Abort+0x618>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d027      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a37      	ldr	r2, [pc, #220]	; (800313c <HAL_DMA_Abort+0x61c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d022      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a35      	ldr	r2, [pc, #212]	; (8003140 <HAL_DMA_Abort+0x620>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d01d      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a34      	ldr	r2, [pc, #208]	; (8003144 <HAL_DMA_Abort+0x624>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d018      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a32      	ldr	r2, [pc, #200]	; (8003148 <HAL_DMA_Abort+0x628>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a31      	ldr	r2, [pc, #196]	; (800314c <HAL_DMA_Abort+0x62c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00e      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a2f      	ldr	r2, [pc, #188]	; (8003150 <HAL_DMA_Abort+0x630>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d009      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a2e      	ldr	r2, [pc, #184]	; (8003154 <HAL_DMA_Abort+0x634>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d004      	beq.n	80030aa <HAL_DMA_Abort+0x58a>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a2c      	ldr	r2, [pc, #176]	; (8003158 <HAL_DMA_Abort+0x638>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d101      	bne.n	80030ae <HAL_DMA_Abort+0x58e>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <HAL_DMA_Abort+0x590>
 80030ae:	2300      	movs	r3, #0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d015      	beq.n	80030e0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80030bc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00c      	beq.n	80030e0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030d4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030de:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40020010 	.word	0x40020010
 8003100:	40020028 	.word	0x40020028
 8003104:	40020040 	.word	0x40020040
 8003108:	40020058 	.word	0x40020058
 800310c:	40020070 	.word	0x40020070
 8003110:	40020088 	.word	0x40020088
 8003114:	400200a0 	.word	0x400200a0
 8003118:	400200b8 	.word	0x400200b8
 800311c:	40020410 	.word	0x40020410
 8003120:	40020428 	.word	0x40020428
 8003124:	40020440 	.word	0x40020440
 8003128:	40020458 	.word	0x40020458
 800312c:	40020470 	.word	0x40020470
 8003130:	40020488 	.word	0x40020488
 8003134:	400204a0 	.word	0x400204a0
 8003138:	400204b8 	.word	0x400204b8
 800313c:	58025408 	.word	0x58025408
 8003140:	5802541c 	.word	0x5802541c
 8003144:	58025430 	.word	0x58025430
 8003148:	58025444 	.word	0x58025444
 800314c:	58025458 	.word	0x58025458
 8003150:	5802546c 	.word	0x5802546c
 8003154:	58025480 	.word	0x58025480
 8003158:	58025494 	.word	0x58025494

0800315c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e237      	b.n	80035de <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d004      	beq.n	8003184 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2280      	movs	r2, #128	; 0x80
 800317e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e22c      	b.n	80035de <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a5c      	ldr	r2, [pc, #368]	; (80032fc <HAL_DMA_Abort_IT+0x1a0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d04a      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a5b      	ldr	r2, [pc, #364]	; (8003300 <HAL_DMA_Abort_IT+0x1a4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d045      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a59      	ldr	r2, [pc, #356]	; (8003304 <HAL_DMA_Abort_IT+0x1a8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d040      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a58      	ldr	r2, [pc, #352]	; (8003308 <HAL_DMA_Abort_IT+0x1ac>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d03b      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a56      	ldr	r2, [pc, #344]	; (800330c <HAL_DMA_Abort_IT+0x1b0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d036      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a55      	ldr	r2, [pc, #340]	; (8003310 <HAL_DMA_Abort_IT+0x1b4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d031      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a53      	ldr	r2, [pc, #332]	; (8003314 <HAL_DMA_Abort_IT+0x1b8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d02c      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a52      	ldr	r2, [pc, #328]	; (8003318 <HAL_DMA_Abort_IT+0x1bc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d027      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a50      	ldr	r2, [pc, #320]	; (800331c <HAL_DMA_Abort_IT+0x1c0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d022      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a4f      	ldr	r2, [pc, #316]	; (8003320 <HAL_DMA_Abort_IT+0x1c4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d01d      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a4d      	ldr	r2, [pc, #308]	; (8003324 <HAL_DMA_Abort_IT+0x1c8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d018      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a4c      	ldr	r2, [pc, #304]	; (8003328 <HAL_DMA_Abort_IT+0x1cc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d013      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a4a      	ldr	r2, [pc, #296]	; (800332c <HAL_DMA_Abort_IT+0x1d0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00e      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a49      	ldr	r2, [pc, #292]	; (8003330 <HAL_DMA_Abort_IT+0x1d4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d009      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a47      	ldr	r2, [pc, #284]	; (8003334 <HAL_DMA_Abort_IT+0x1d8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d004      	beq.n	8003224 <HAL_DMA_Abort_IT+0xc8>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a46      	ldr	r2, [pc, #280]	; (8003338 <HAL_DMA_Abort_IT+0x1dc>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d101      	bne.n	8003228 <HAL_DMA_Abort_IT+0xcc>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <HAL_DMA_Abort_IT+0xce>
 8003228:	2300      	movs	r3, #0
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 8086 	beq.w	800333c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2204      	movs	r2, #4
 8003234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a2f      	ldr	r2, [pc, #188]	; (80032fc <HAL_DMA_Abort_IT+0x1a0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d04a      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a2e      	ldr	r2, [pc, #184]	; (8003300 <HAL_DMA_Abort_IT+0x1a4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d045      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a2c      	ldr	r2, [pc, #176]	; (8003304 <HAL_DMA_Abort_IT+0x1a8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d040      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a2b      	ldr	r2, [pc, #172]	; (8003308 <HAL_DMA_Abort_IT+0x1ac>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d03b      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a29      	ldr	r2, [pc, #164]	; (800330c <HAL_DMA_Abort_IT+0x1b0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d036      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a28      	ldr	r2, [pc, #160]	; (8003310 <HAL_DMA_Abort_IT+0x1b4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d031      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a26      	ldr	r2, [pc, #152]	; (8003314 <HAL_DMA_Abort_IT+0x1b8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d02c      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a25      	ldr	r2, [pc, #148]	; (8003318 <HAL_DMA_Abort_IT+0x1bc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d027      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a23      	ldr	r2, [pc, #140]	; (800331c <HAL_DMA_Abort_IT+0x1c0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d022      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a22      	ldr	r2, [pc, #136]	; (8003320 <HAL_DMA_Abort_IT+0x1c4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d01d      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a20      	ldr	r2, [pc, #128]	; (8003324 <HAL_DMA_Abort_IT+0x1c8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d018      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1f      	ldr	r2, [pc, #124]	; (8003328 <HAL_DMA_Abort_IT+0x1cc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d013      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a1d      	ldr	r2, [pc, #116]	; (800332c <HAL_DMA_Abort_IT+0x1d0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00e      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1c      	ldr	r2, [pc, #112]	; (8003330 <HAL_DMA_Abort_IT+0x1d4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d009      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a1a      	ldr	r2, [pc, #104]	; (8003334 <HAL_DMA_Abort_IT+0x1d8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d004      	beq.n	80032d8 <HAL_DMA_Abort_IT+0x17c>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a19      	ldr	r2, [pc, #100]	; (8003338 <HAL_DMA_Abort_IT+0x1dc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d108      	bne.n	80032ea <HAL_DMA_Abort_IT+0x18e>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0201 	bic.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	e178      	b.n	80035dc <HAL_DMA_Abort_IT+0x480>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	e16f      	b.n	80035dc <HAL_DMA_Abort_IT+0x480>
 80032fc:	40020010 	.word	0x40020010
 8003300:	40020028 	.word	0x40020028
 8003304:	40020040 	.word	0x40020040
 8003308:	40020058 	.word	0x40020058
 800330c:	40020070 	.word	0x40020070
 8003310:	40020088 	.word	0x40020088
 8003314:	400200a0 	.word	0x400200a0
 8003318:	400200b8 	.word	0x400200b8
 800331c:	40020410 	.word	0x40020410
 8003320:	40020428 	.word	0x40020428
 8003324:	40020440 	.word	0x40020440
 8003328:	40020458 	.word	0x40020458
 800332c:	40020470 	.word	0x40020470
 8003330:	40020488 	.word	0x40020488
 8003334:	400204a0 	.word	0x400204a0
 8003338:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 020e 	bic.w	r2, r2, #14
 800334a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a6c      	ldr	r2, [pc, #432]	; (8003504 <HAL_DMA_Abort_IT+0x3a8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d04a      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a6b      	ldr	r2, [pc, #428]	; (8003508 <HAL_DMA_Abort_IT+0x3ac>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d045      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a69      	ldr	r2, [pc, #420]	; (800350c <HAL_DMA_Abort_IT+0x3b0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d040      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a68      	ldr	r2, [pc, #416]	; (8003510 <HAL_DMA_Abort_IT+0x3b4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d03b      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a66      	ldr	r2, [pc, #408]	; (8003514 <HAL_DMA_Abort_IT+0x3b8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d036      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a65      	ldr	r2, [pc, #404]	; (8003518 <HAL_DMA_Abort_IT+0x3bc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d031      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a63      	ldr	r2, [pc, #396]	; (800351c <HAL_DMA_Abort_IT+0x3c0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d02c      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a62      	ldr	r2, [pc, #392]	; (8003520 <HAL_DMA_Abort_IT+0x3c4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d027      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a60      	ldr	r2, [pc, #384]	; (8003524 <HAL_DMA_Abort_IT+0x3c8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d022      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a5f      	ldr	r2, [pc, #380]	; (8003528 <HAL_DMA_Abort_IT+0x3cc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d01d      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a5d      	ldr	r2, [pc, #372]	; (800352c <HAL_DMA_Abort_IT+0x3d0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d018      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a5c      	ldr	r2, [pc, #368]	; (8003530 <HAL_DMA_Abort_IT+0x3d4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d013      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a5a      	ldr	r2, [pc, #360]	; (8003534 <HAL_DMA_Abort_IT+0x3d8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00e      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a59      	ldr	r2, [pc, #356]	; (8003538 <HAL_DMA_Abort_IT+0x3dc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d009      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a57      	ldr	r2, [pc, #348]	; (800353c <HAL_DMA_Abort_IT+0x3e0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <HAL_DMA_Abort_IT+0x290>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a56      	ldr	r2, [pc, #344]	; (8003540 <HAL_DMA_Abort_IT+0x3e4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d108      	bne.n	80033fe <HAL_DMA_Abort_IT+0x2a2>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e007      	b.n	800340e <HAL_DMA_Abort_IT+0x2b2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a3c      	ldr	r2, [pc, #240]	; (8003504 <HAL_DMA_Abort_IT+0x3a8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d072      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a3a      	ldr	r2, [pc, #232]	; (8003508 <HAL_DMA_Abort_IT+0x3ac>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d06d      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a39      	ldr	r2, [pc, #228]	; (800350c <HAL_DMA_Abort_IT+0x3b0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d068      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a37      	ldr	r2, [pc, #220]	; (8003510 <HAL_DMA_Abort_IT+0x3b4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d063      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a36      	ldr	r2, [pc, #216]	; (8003514 <HAL_DMA_Abort_IT+0x3b8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d05e      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a34      	ldr	r2, [pc, #208]	; (8003518 <HAL_DMA_Abort_IT+0x3bc>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d059      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a33      	ldr	r2, [pc, #204]	; (800351c <HAL_DMA_Abort_IT+0x3c0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d054      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a31      	ldr	r2, [pc, #196]	; (8003520 <HAL_DMA_Abort_IT+0x3c4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d04f      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a30      	ldr	r2, [pc, #192]	; (8003524 <HAL_DMA_Abort_IT+0x3c8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d04a      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a2e      	ldr	r2, [pc, #184]	; (8003528 <HAL_DMA_Abort_IT+0x3cc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d045      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a2d      	ldr	r2, [pc, #180]	; (800352c <HAL_DMA_Abort_IT+0x3d0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d040      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a2b      	ldr	r2, [pc, #172]	; (8003530 <HAL_DMA_Abort_IT+0x3d4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d03b      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a2a      	ldr	r2, [pc, #168]	; (8003534 <HAL_DMA_Abort_IT+0x3d8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d036      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a28      	ldr	r2, [pc, #160]	; (8003538 <HAL_DMA_Abort_IT+0x3dc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d031      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a27      	ldr	r2, [pc, #156]	; (800353c <HAL_DMA_Abort_IT+0x3e0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d02c      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a25      	ldr	r2, [pc, #148]	; (8003540 <HAL_DMA_Abort_IT+0x3e4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d027      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a24      	ldr	r2, [pc, #144]	; (8003544 <HAL_DMA_Abort_IT+0x3e8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d022      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a22      	ldr	r2, [pc, #136]	; (8003548 <HAL_DMA_Abort_IT+0x3ec>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d01d      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a21      	ldr	r2, [pc, #132]	; (800354c <HAL_DMA_Abort_IT+0x3f0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d018      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1f      	ldr	r2, [pc, #124]	; (8003550 <HAL_DMA_Abort_IT+0x3f4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d013      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1e      	ldr	r2, [pc, #120]	; (8003554 <HAL_DMA_Abort_IT+0x3f8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00e      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a1c      	ldr	r2, [pc, #112]	; (8003558 <HAL_DMA_Abort_IT+0x3fc>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d009      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1b      	ldr	r2, [pc, #108]	; (800355c <HAL_DMA_Abort_IT+0x400>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d004      	beq.n	80034fe <HAL_DMA_Abort_IT+0x3a2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a19      	ldr	r2, [pc, #100]	; (8003560 <HAL_DMA_Abort_IT+0x404>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d132      	bne.n	8003564 <HAL_DMA_Abort_IT+0x408>
 80034fe:	2301      	movs	r3, #1
 8003500:	e031      	b.n	8003566 <HAL_DMA_Abort_IT+0x40a>
 8003502:	bf00      	nop
 8003504:	40020010 	.word	0x40020010
 8003508:	40020028 	.word	0x40020028
 800350c:	40020040 	.word	0x40020040
 8003510:	40020058 	.word	0x40020058
 8003514:	40020070 	.word	0x40020070
 8003518:	40020088 	.word	0x40020088
 800351c:	400200a0 	.word	0x400200a0
 8003520:	400200b8 	.word	0x400200b8
 8003524:	40020410 	.word	0x40020410
 8003528:	40020428 	.word	0x40020428
 800352c:	40020440 	.word	0x40020440
 8003530:	40020458 	.word	0x40020458
 8003534:	40020470 	.word	0x40020470
 8003538:	40020488 	.word	0x40020488
 800353c:	400204a0 	.word	0x400204a0
 8003540:	400204b8 	.word	0x400204b8
 8003544:	58025408 	.word	0x58025408
 8003548:	5802541c 	.word	0x5802541c
 800354c:	58025430 	.word	0x58025430
 8003550:	58025444 	.word	0x58025444
 8003554:	58025458 	.word	0x58025458
 8003558:	5802546c 	.word	0x5802546c
 800355c:	58025480 	.word	0x58025480
 8003560:	58025494 	.word	0x58025494
 8003564:	2300      	movs	r3, #0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d028      	beq.n	80035bc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003574:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003578:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	2201      	movs	r2, #1
 800358a:	409a      	lsls	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003598:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00c      	beq.n	80035bc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80035ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop

080035e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	; 0x28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035f4:	4b67      	ldr	r3, [pc, #412]	; (8003794 <HAL_DMA_IRQHandler+0x1ac>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a67      	ldr	r2, [pc, #412]	; (8003798 <HAL_DMA_IRQHandler+0x1b0>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	0a9b      	lsrs	r3, r3, #10
 8003600:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003606:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a5f      	ldr	r2, [pc, #380]	; (800379c <HAL_DMA_IRQHandler+0x1b4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d04a      	beq.n	80036ba <HAL_DMA_IRQHandler+0xd2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a5d      	ldr	r2, [pc, #372]	; (80037a0 <HAL_DMA_IRQHandler+0x1b8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d045      	beq.n	80036ba <HAL_DMA_IRQHandler+0xd2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a5c      	ldr	r2, [pc, #368]	; (80037a4 <HAL_DMA_IRQHandler+0x1bc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d040      	beq.n	80036ba <HAL_DMA_IRQHandler+0xd2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a5a      	ldr	r2, [pc, #360]	; (80037a8 <HAL_DMA_IRQHandler+0x1c0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d03b      	beq.n	80036ba <HAL_DMA_IRQHandler+0xd2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a59      	ldr	r2, [pc, #356]	; (80037ac <HAL_DMA_IRQHandler+0x1c4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d036      	beq.n	80036ba <HAL_DMA_IRQHandler+0xd2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a57      	ldr	r2, [pc, #348]	; (80037b0 <HAL_DMA_IRQHandler+0x1c8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d031      	beq.n	80036ba <HAL_DMA_IRQHandler+0xd2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a56      	ldr	r2, [pc, #344]	; (80037b4 <HAL_DMA_IRQHandler+0x1cc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d02c      	beq.n	80036ba <HAL_DMA_IRQHandler+0xd2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a54      	ldr	r2, [pc, #336]	; (80037b8 <HAL_DMA_IRQHandler+0x1d0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d027      	beq.n	80036ba <HAL_DMA_IRQHandler+0xd2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a53      	ldr	r2, [pc, #332]	; (80037bc <HAL_DMA_IRQHandler+0x1d4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d022      	beq.n	80036ba <HAL_DMA_IRQHandler+0xd2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a51      	ldr	r2, [pc, #324]	; (80037c0 <HAL_DMA_IRQHandler+0x1d8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d01d      	beq.n	80036ba <HAL_DMA_IRQHandler+0xd2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a50      	ldr	r2, [pc, #320]	; (80037c4 <HAL_DMA_IRQHandler+0x1dc>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d018      	beq.n	80036ba <HAL_DMA_IRQHandler+0xd2>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a4e      	ldr	r2, [pc, #312]	; (80037c8 <HAL_DMA_IRQHandler+0x1e0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d013      	beq.n	80036ba <HAL_DMA_IRQHandler+0xd2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a4d      	ldr	r2, [pc, #308]	; (80037cc <HAL_DMA_IRQHandler+0x1e4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00e      	beq.n	80036ba <HAL_DMA_IRQHandler+0xd2>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a4b      	ldr	r2, [pc, #300]	; (80037d0 <HAL_DMA_IRQHandler+0x1e8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d009      	beq.n	80036ba <HAL_DMA_IRQHandler+0xd2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a4a      	ldr	r2, [pc, #296]	; (80037d4 <HAL_DMA_IRQHandler+0x1ec>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d004      	beq.n	80036ba <HAL_DMA_IRQHandler+0xd2>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a48      	ldr	r2, [pc, #288]	; (80037d8 <HAL_DMA_IRQHandler+0x1f0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d101      	bne.n	80036be <HAL_DMA_IRQHandler+0xd6>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <HAL_DMA_IRQHandler+0xd8>
 80036be:	2300      	movs	r3, #0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 842b 	beq.w	8003f1c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ca:	f003 031f 	and.w	r3, r3, #31
 80036ce:	2208      	movs	r2, #8
 80036d0:	409a      	lsls	r2, r3
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 80a2 	beq.w	8003820 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a2e      	ldr	r2, [pc, #184]	; (800379c <HAL_DMA_IRQHandler+0x1b4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d04a      	beq.n	800377c <HAL_DMA_IRQHandler+0x194>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a2d      	ldr	r2, [pc, #180]	; (80037a0 <HAL_DMA_IRQHandler+0x1b8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d045      	beq.n	800377c <HAL_DMA_IRQHandler+0x194>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a2b      	ldr	r2, [pc, #172]	; (80037a4 <HAL_DMA_IRQHandler+0x1bc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d040      	beq.n	800377c <HAL_DMA_IRQHandler+0x194>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a2a      	ldr	r2, [pc, #168]	; (80037a8 <HAL_DMA_IRQHandler+0x1c0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d03b      	beq.n	800377c <HAL_DMA_IRQHandler+0x194>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a28      	ldr	r2, [pc, #160]	; (80037ac <HAL_DMA_IRQHandler+0x1c4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d036      	beq.n	800377c <HAL_DMA_IRQHandler+0x194>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a27      	ldr	r2, [pc, #156]	; (80037b0 <HAL_DMA_IRQHandler+0x1c8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d031      	beq.n	800377c <HAL_DMA_IRQHandler+0x194>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a25      	ldr	r2, [pc, #148]	; (80037b4 <HAL_DMA_IRQHandler+0x1cc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d02c      	beq.n	800377c <HAL_DMA_IRQHandler+0x194>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a24      	ldr	r2, [pc, #144]	; (80037b8 <HAL_DMA_IRQHandler+0x1d0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d027      	beq.n	800377c <HAL_DMA_IRQHandler+0x194>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a22      	ldr	r2, [pc, #136]	; (80037bc <HAL_DMA_IRQHandler+0x1d4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d022      	beq.n	800377c <HAL_DMA_IRQHandler+0x194>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a21      	ldr	r2, [pc, #132]	; (80037c0 <HAL_DMA_IRQHandler+0x1d8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d01d      	beq.n	800377c <HAL_DMA_IRQHandler+0x194>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <HAL_DMA_IRQHandler+0x1dc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d018      	beq.n	800377c <HAL_DMA_IRQHandler+0x194>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1e      	ldr	r2, [pc, #120]	; (80037c8 <HAL_DMA_IRQHandler+0x1e0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d013      	beq.n	800377c <HAL_DMA_IRQHandler+0x194>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1c      	ldr	r2, [pc, #112]	; (80037cc <HAL_DMA_IRQHandler+0x1e4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00e      	beq.n	800377c <HAL_DMA_IRQHandler+0x194>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a1b      	ldr	r2, [pc, #108]	; (80037d0 <HAL_DMA_IRQHandler+0x1e8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d009      	beq.n	800377c <HAL_DMA_IRQHandler+0x194>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a19      	ldr	r2, [pc, #100]	; (80037d4 <HAL_DMA_IRQHandler+0x1ec>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d004      	beq.n	800377c <HAL_DMA_IRQHandler+0x194>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <HAL_DMA_IRQHandler+0x1f0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d12f      	bne.n	80037dc <HAL_DMA_IRQHandler+0x1f4>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	bf14      	ite	ne
 800378a:	2301      	movne	r3, #1
 800378c:	2300      	moveq	r3, #0
 800378e:	b2db      	uxtb	r3, r3
 8003790:	e02e      	b.n	80037f0 <HAL_DMA_IRQHandler+0x208>
 8003792:	bf00      	nop
 8003794:	24000028 	.word	0x24000028
 8003798:	1b4e81b5 	.word	0x1b4e81b5
 800379c:	40020010 	.word	0x40020010
 80037a0:	40020028 	.word	0x40020028
 80037a4:	40020040 	.word	0x40020040
 80037a8:	40020058 	.word	0x40020058
 80037ac:	40020070 	.word	0x40020070
 80037b0:	40020088 	.word	0x40020088
 80037b4:	400200a0 	.word	0x400200a0
 80037b8:	400200b8 	.word	0x400200b8
 80037bc:	40020410 	.word	0x40020410
 80037c0:	40020428 	.word	0x40020428
 80037c4:	40020440 	.word	0x40020440
 80037c8:	40020458 	.word	0x40020458
 80037cc:	40020470 	.word	0x40020470
 80037d0:	40020488 	.word	0x40020488
 80037d4:	400204a0 	.word	0x400204a0
 80037d8:	400204b8 	.word	0x400204b8
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	bf14      	ite	ne
 80037ea:	2301      	movne	r3, #1
 80037ec:	2300      	moveq	r3, #0
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d015      	beq.n	8003820 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0204 	bic.w	r2, r2, #4
 8003802:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003808:	f003 031f 	and.w	r3, r3, #31
 800380c:	2208      	movs	r2, #8
 800380e:	409a      	lsls	r2, r3
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003818:	f043 0201 	orr.w	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	fa22 f303 	lsr.w	r3, r2, r3
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d06e      	beq.n	8003914 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a69      	ldr	r2, [pc, #420]	; (80039e0 <HAL_DMA_IRQHandler+0x3f8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d04a      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x2ee>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a67      	ldr	r2, [pc, #412]	; (80039e4 <HAL_DMA_IRQHandler+0x3fc>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d045      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x2ee>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a66      	ldr	r2, [pc, #408]	; (80039e8 <HAL_DMA_IRQHandler+0x400>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d040      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x2ee>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a64      	ldr	r2, [pc, #400]	; (80039ec <HAL_DMA_IRQHandler+0x404>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d03b      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x2ee>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a63      	ldr	r2, [pc, #396]	; (80039f0 <HAL_DMA_IRQHandler+0x408>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d036      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x2ee>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a61      	ldr	r2, [pc, #388]	; (80039f4 <HAL_DMA_IRQHandler+0x40c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d031      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x2ee>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a60      	ldr	r2, [pc, #384]	; (80039f8 <HAL_DMA_IRQHandler+0x410>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d02c      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x2ee>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a5e      	ldr	r2, [pc, #376]	; (80039fc <HAL_DMA_IRQHandler+0x414>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d027      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x2ee>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a5d      	ldr	r2, [pc, #372]	; (8003a00 <HAL_DMA_IRQHandler+0x418>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d022      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x2ee>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a5b      	ldr	r2, [pc, #364]	; (8003a04 <HAL_DMA_IRQHandler+0x41c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d01d      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x2ee>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a5a      	ldr	r2, [pc, #360]	; (8003a08 <HAL_DMA_IRQHandler+0x420>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d018      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x2ee>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a58      	ldr	r2, [pc, #352]	; (8003a0c <HAL_DMA_IRQHandler+0x424>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d013      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x2ee>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a57      	ldr	r2, [pc, #348]	; (8003a10 <HAL_DMA_IRQHandler+0x428>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00e      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x2ee>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a55      	ldr	r2, [pc, #340]	; (8003a14 <HAL_DMA_IRQHandler+0x42c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d009      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x2ee>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a54      	ldr	r2, [pc, #336]	; (8003a18 <HAL_DMA_IRQHandler+0x430>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d004      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x2ee>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a52      	ldr	r2, [pc, #328]	; (8003a1c <HAL_DMA_IRQHandler+0x434>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d10a      	bne.n	80038ec <HAL_DMA_IRQHandler+0x304>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	bf14      	ite	ne
 80038e4:	2301      	movne	r3, #1
 80038e6:	2300      	moveq	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	e003      	b.n	80038f4 <HAL_DMA_IRQHandler+0x30c>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2300      	movs	r3, #0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00d      	beq.n	8003914 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	2201      	movs	r2, #1
 8003902:	409a      	lsls	r2, r3
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	f043 0202 	orr.w	r2, r3, #2
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	2204      	movs	r2, #4
 800391e:	409a      	lsls	r2, r3
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 808f 	beq.w	8003a48 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a2c      	ldr	r2, [pc, #176]	; (80039e0 <HAL_DMA_IRQHandler+0x3f8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d04a      	beq.n	80039ca <HAL_DMA_IRQHandler+0x3e2>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a2a      	ldr	r2, [pc, #168]	; (80039e4 <HAL_DMA_IRQHandler+0x3fc>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d045      	beq.n	80039ca <HAL_DMA_IRQHandler+0x3e2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a29      	ldr	r2, [pc, #164]	; (80039e8 <HAL_DMA_IRQHandler+0x400>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d040      	beq.n	80039ca <HAL_DMA_IRQHandler+0x3e2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a27      	ldr	r2, [pc, #156]	; (80039ec <HAL_DMA_IRQHandler+0x404>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d03b      	beq.n	80039ca <HAL_DMA_IRQHandler+0x3e2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a26      	ldr	r2, [pc, #152]	; (80039f0 <HAL_DMA_IRQHandler+0x408>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d036      	beq.n	80039ca <HAL_DMA_IRQHandler+0x3e2>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a24      	ldr	r2, [pc, #144]	; (80039f4 <HAL_DMA_IRQHandler+0x40c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d031      	beq.n	80039ca <HAL_DMA_IRQHandler+0x3e2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a23      	ldr	r2, [pc, #140]	; (80039f8 <HAL_DMA_IRQHandler+0x410>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d02c      	beq.n	80039ca <HAL_DMA_IRQHandler+0x3e2>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a21      	ldr	r2, [pc, #132]	; (80039fc <HAL_DMA_IRQHandler+0x414>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d027      	beq.n	80039ca <HAL_DMA_IRQHandler+0x3e2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a20      	ldr	r2, [pc, #128]	; (8003a00 <HAL_DMA_IRQHandler+0x418>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d022      	beq.n	80039ca <HAL_DMA_IRQHandler+0x3e2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1e      	ldr	r2, [pc, #120]	; (8003a04 <HAL_DMA_IRQHandler+0x41c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d01d      	beq.n	80039ca <HAL_DMA_IRQHandler+0x3e2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1d      	ldr	r2, [pc, #116]	; (8003a08 <HAL_DMA_IRQHandler+0x420>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d018      	beq.n	80039ca <HAL_DMA_IRQHandler+0x3e2>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1b      	ldr	r2, [pc, #108]	; (8003a0c <HAL_DMA_IRQHandler+0x424>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d013      	beq.n	80039ca <HAL_DMA_IRQHandler+0x3e2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1a      	ldr	r2, [pc, #104]	; (8003a10 <HAL_DMA_IRQHandler+0x428>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d00e      	beq.n	80039ca <HAL_DMA_IRQHandler+0x3e2>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a18      	ldr	r2, [pc, #96]	; (8003a14 <HAL_DMA_IRQHandler+0x42c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d009      	beq.n	80039ca <HAL_DMA_IRQHandler+0x3e2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a17      	ldr	r2, [pc, #92]	; (8003a18 <HAL_DMA_IRQHandler+0x430>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d004      	beq.n	80039ca <HAL_DMA_IRQHandler+0x3e2>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a15      	ldr	r2, [pc, #84]	; (8003a1c <HAL_DMA_IRQHandler+0x434>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d12a      	bne.n	8003a20 <HAL_DMA_IRQHandler+0x438>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	e023      	b.n	8003a28 <HAL_DMA_IRQHandler+0x440>
 80039e0:	40020010 	.word	0x40020010
 80039e4:	40020028 	.word	0x40020028
 80039e8:	40020040 	.word	0x40020040
 80039ec:	40020058 	.word	0x40020058
 80039f0:	40020070 	.word	0x40020070
 80039f4:	40020088 	.word	0x40020088
 80039f8:	400200a0 	.word	0x400200a0
 80039fc:	400200b8 	.word	0x400200b8
 8003a00:	40020410 	.word	0x40020410
 8003a04:	40020428 	.word	0x40020428
 8003a08:	40020440 	.word	0x40020440
 8003a0c:	40020458 	.word	0x40020458
 8003a10:	40020470 	.word	0x40020470
 8003a14:	40020488 	.word	0x40020488
 8003a18:	400204a0 	.word	0x400204a0
 8003a1c:	400204b8 	.word	0x400204b8
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2300      	movs	r3, #0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00d      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	2204      	movs	r2, #4
 8003a36:	409a      	lsls	r2, r3
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a40:	f043 0204 	orr.w	r2, r3, #4
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	2210      	movs	r2, #16
 8003a52:	409a      	lsls	r2, r3
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 80a6 	beq.w	8003baa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a85      	ldr	r2, [pc, #532]	; (8003c78 <HAL_DMA_IRQHandler+0x690>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d04a      	beq.n	8003afe <HAL_DMA_IRQHandler+0x516>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a83      	ldr	r2, [pc, #524]	; (8003c7c <HAL_DMA_IRQHandler+0x694>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d045      	beq.n	8003afe <HAL_DMA_IRQHandler+0x516>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a82      	ldr	r2, [pc, #520]	; (8003c80 <HAL_DMA_IRQHandler+0x698>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d040      	beq.n	8003afe <HAL_DMA_IRQHandler+0x516>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a80      	ldr	r2, [pc, #512]	; (8003c84 <HAL_DMA_IRQHandler+0x69c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d03b      	beq.n	8003afe <HAL_DMA_IRQHandler+0x516>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a7f      	ldr	r2, [pc, #508]	; (8003c88 <HAL_DMA_IRQHandler+0x6a0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d036      	beq.n	8003afe <HAL_DMA_IRQHandler+0x516>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a7d      	ldr	r2, [pc, #500]	; (8003c8c <HAL_DMA_IRQHandler+0x6a4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d031      	beq.n	8003afe <HAL_DMA_IRQHandler+0x516>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a7c      	ldr	r2, [pc, #496]	; (8003c90 <HAL_DMA_IRQHandler+0x6a8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d02c      	beq.n	8003afe <HAL_DMA_IRQHandler+0x516>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a7a      	ldr	r2, [pc, #488]	; (8003c94 <HAL_DMA_IRQHandler+0x6ac>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d027      	beq.n	8003afe <HAL_DMA_IRQHandler+0x516>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a79      	ldr	r2, [pc, #484]	; (8003c98 <HAL_DMA_IRQHandler+0x6b0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d022      	beq.n	8003afe <HAL_DMA_IRQHandler+0x516>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a77      	ldr	r2, [pc, #476]	; (8003c9c <HAL_DMA_IRQHandler+0x6b4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01d      	beq.n	8003afe <HAL_DMA_IRQHandler+0x516>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a76      	ldr	r2, [pc, #472]	; (8003ca0 <HAL_DMA_IRQHandler+0x6b8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d018      	beq.n	8003afe <HAL_DMA_IRQHandler+0x516>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a74      	ldr	r2, [pc, #464]	; (8003ca4 <HAL_DMA_IRQHandler+0x6bc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_DMA_IRQHandler+0x516>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a73      	ldr	r2, [pc, #460]	; (8003ca8 <HAL_DMA_IRQHandler+0x6c0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_DMA_IRQHandler+0x516>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a71      	ldr	r2, [pc, #452]	; (8003cac <HAL_DMA_IRQHandler+0x6c4>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_DMA_IRQHandler+0x516>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a70      	ldr	r2, [pc, #448]	; (8003cb0 <HAL_DMA_IRQHandler+0x6c8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_DMA_IRQHandler+0x516>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a6e      	ldr	r2, [pc, #440]	; (8003cb4 <HAL_DMA_IRQHandler+0x6cc>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d10a      	bne.n	8003b14 <HAL_DMA_IRQHandler+0x52c>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf14      	ite	ne
 8003b0c:	2301      	movne	r3, #1
 8003b0e:	2300      	moveq	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	e009      	b.n	8003b28 <HAL_DMA_IRQHandler+0x540>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	bf14      	ite	ne
 8003b22:	2301      	movne	r3, #1
 8003b24:	2300      	moveq	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d03e      	beq.n	8003baa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	2210      	movs	r2, #16
 8003b36:	409a      	lsls	r2, r3
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d018      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d108      	bne.n	8003b6a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d024      	beq.n	8003baa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	4798      	blx	r3
 8003b68:	e01f      	b.n	8003baa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d01b      	beq.n	8003baa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	4798      	blx	r3
 8003b7a:	e016      	b.n	8003baa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d107      	bne.n	8003b9a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0208 	bic.w	r2, r2, #8
 8003b98:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bae:	f003 031f 	and.w	r3, r3, #31
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	409a      	lsls	r2, r3
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 8110 	beq.w	8003de0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a2c      	ldr	r2, [pc, #176]	; (8003c78 <HAL_DMA_IRQHandler+0x690>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d04a      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x678>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a2b      	ldr	r2, [pc, #172]	; (8003c7c <HAL_DMA_IRQHandler+0x694>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d045      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x678>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a29      	ldr	r2, [pc, #164]	; (8003c80 <HAL_DMA_IRQHandler+0x698>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d040      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x678>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a28      	ldr	r2, [pc, #160]	; (8003c84 <HAL_DMA_IRQHandler+0x69c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d03b      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x678>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a26      	ldr	r2, [pc, #152]	; (8003c88 <HAL_DMA_IRQHandler+0x6a0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d036      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x678>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a25      	ldr	r2, [pc, #148]	; (8003c8c <HAL_DMA_IRQHandler+0x6a4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d031      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x678>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a23      	ldr	r2, [pc, #140]	; (8003c90 <HAL_DMA_IRQHandler+0x6a8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d02c      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x678>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a22      	ldr	r2, [pc, #136]	; (8003c94 <HAL_DMA_IRQHandler+0x6ac>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d027      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x678>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a20      	ldr	r2, [pc, #128]	; (8003c98 <HAL_DMA_IRQHandler+0x6b0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d022      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x678>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a1f      	ldr	r2, [pc, #124]	; (8003c9c <HAL_DMA_IRQHandler+0x6b4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d01d      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x678>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a1d      	ldr	r2, [pc, #116]	; (8003ca0 <HAL_DMA_IRQHandler+0x6b8>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d018      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x678>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1c      	ldr	r2, [pc, #112]	; (8003ca4 <HAL_DMA_IRQHandler+0x6bc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d013      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x678>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a1a      	ldr	r2, [pc, #104]	; (8003ca8 <HAL_DMA_IRQHandler+0x6c0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00e      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x678>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a19      	ldr	r2, [pc, #100]	; (8003cac <HAL_DMA_IRQHandler+0x6c4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d009      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x678>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a17      	ldr	r2, [pc, #92]	; (8003cb0 <HAL_DMA_IRQHandler+0x6c8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d004      	beq.n	8003c60 <HAL_DMA_IRQHandler+0x678>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a16      	ldr	r2, [pc, #88]	; (8003cb4 <HAL_DMA_IRQHandler+0x6cc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d12b      	bne.n	8003cb8 <HAL_DMA_IRQHandler+0x6d0>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bf14      	ite	ne
 8003c6e:	2301      	movne	r3, #1
 8003c70:	2300      	moveq	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	e02a      	b.n	8003ccc <HAL_DMA_IRQHandler+0x6e4>
 8003c76:	bf00      	nop
 8003c78:	40020010 	.word	0x40020010
 8003c7c:	40020028 	.word	0x40020028
 8003c80:	40020040 	.word	0x40020040
 8003c84:	40020058 	.word	0x40020058
 8003c88:	40020070 	.word	0x40020070
 8003c8c:	40020088 	.word	0x40020088
 8003c90:	400200a0 	.word	0x400200a0
 8003c94:	400200b8 	.word	0x400200b8
 8003c98:	40020410 	.word	0x40020410
 8003c9c:	40020428 	.word	0x40020428
 8003ca0:	40020440 	.word	0x40020440
 8003ca4:	40020458 	.word	0x40020458
 8003ca8:	40020470 	.word	0x40020470
 8003cac:	40020488 	.word	0x40020488
 8003cb0:	400204a0 	.word	0x400204a0
 8003cb4:	400204b8 	.word	0x400204b8
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bf14      	ite	ne
 8003cc6:	2301      	movne	r3, #1
 8003cc8:	2300      	moveq	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 8087 	beq.w	8003de0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd6:	f003 031f 	and.w	r3, r3, #31
 8003cda:	2220      	movs	r2, #32
 8003cdc:	409a      	lsls	r2, r3
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d139      	bne.n	8003d62 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0216 	bic.w	r2, r2, #22
 8003cfc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d0c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d103      	bne.n	8003d1e <HAL_DMA_IRQHandler+0x736>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d007      	beq.n	8003d2e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0208 	bic.w	r2, r2, #8
 8003d2c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d32:	f003 031f 	and.w	r3, r3, #31
 8003d36:	223f      	movs	r2, #63	; 0x3f
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 8382 	beq.w	800445c <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	4798      	blx	r3
          }
          return;
 8003d60:	e37c      	b.n	800445c <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d018      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d108      	bne.n	8003d90 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d02c      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	4798      	blx	r3
 8003d8e:	e027      	b.n	8003de0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d023      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	4798      	blx	r3
 8003da0:	e01e      	b.n	8003de0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10f      	bne.n	8003dd0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0210 	bic.w	r2, r2, #16
 8003dbe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 833e 	beq.w	8004466 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 8088 	beq.w	8003f08 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2204      	movs	r2, #4
 8003dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a89      	ldr	r2, [pc, #548]	; (800402c <HAL_DMA_IRQHandler+0xa44>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d04a      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x8b8>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a88      	ldr	r2, [pc, #544]	; (8004030 <HAL_DMA_IRQHandler+0xa48>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d045      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x8b8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a86      	ldr	r2, [pc, #536]	; (8004034 <HAL_DMA_IRQHandler+0xa4c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d040      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x8b8>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a85      	ldr	r2, [pc, #532]	; (8004038 <HAL_DMA_IRQHandler+0xa50>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d03b      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x8b8>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a83      	ldr	r2, [pc, #524]	; (800403c <HAL_DMA_IRQHandler+0xa54>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d036      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x8b8>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a82      	ldr	r2, [pc, #520]	; (8004040 <HAL_DMA_IRQHandler+0xa58>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d031      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x8b8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a80      	ldr	r2, [pc, #512]	; (8004044 <HAL_DMA_IRQHandler+0xa5c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d02c      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x8b8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a7f      	ldr	r2, [pc, #508]	; (8004048 <HAL_DMA_IRQHandler+0xa60>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d027      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x8b8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a7d      	ldr	r2, [pc, #500]	; (800404c <HAL_DMA_IRQHandler+0xa64>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d022      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x8b8>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a7c      	ldr	r2, [pc, #496]	; (8004050 <HAL_DMA_IRQHandler+0xa68>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d01d      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x8b8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a7a      	ldr	r2, [pc, #488]	; (8004054 <HAL_DMA_IRQHandler+0xa6c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d018      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x8b8>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a79      	ldr	r2, [pc, #484]	; (8004058 <HAL_DMA_IRQHandler+0xa70>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d013      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x8b8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a77      	ldr	r2, [pc, #476]	; (800405c <HAL_DMA_IRQHandler+0xa74>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d00e      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x8b8>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a76      	ldr	r2, [pc, #472]	; (8004060 <HAL_DMA_IRQHandler+0xa78>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d009      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x8b8>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a74      	ldr	r2, [pc, #464]	; (8004064 <HAL_DMA_IRQHandler+0xa7c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d004      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x8b8>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a73      	ldr	r2, [pc, #460]	; (8004068 <HAL_DMA_IRQHandler+0xa80>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d108      	bne.n	8003eb2 <HAL_DMA_IRQHandler+0x8ca>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0201 	bic.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	e007      	b.n	8003ec2 <HAL_DMA_IRQHandler+0x8da>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0201 	bic.w	r2, r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d307      	bcc.n	8003ede <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1f2      	bne.n	8003ec2 <HAL_DMA_IRQHandler+0x8da>
 8003edc:	e000      	b.n	8003ee0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003ede:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d004      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003ef6:	e003      	b.n	8003f00 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 82aa 	beq.w	8004466 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	4798      	blx	r3
 8003f1a:	e2a4      	b.n	8004466 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a52      	ldr	r2, [pc, #328]	; (800406c <HAL_DMA_IRQHandler+0xa84>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d04a      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x9d4>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a51      	ldr	r2, [pc, #324]	; (8004070 <HAL_DMA_IRQHandler+0xa88>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d045      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x9d4>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a4f      	ldr	r2, [pc, #316]	; (8004074 <HAL_DMA_IRQHandler+0xa8c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d040      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x9d4>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a4e      	ldr	r2, [pc, #312]	; (8004078 <HAL_DMA_IRQHandler+0xa90>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d03b      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x9d4>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a4c      	ldr	r2, [pc, #304]	; (800407c <HAL_DMA_IRQHandler+0xa94>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d036      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x9d4>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a4b      	ldr	r2, [pc, #300]	; (8004080 <HAL_DMA_IRQHandler+0xa98>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d031      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x9d4>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a49      	ldr	r2, [pc, #292]	; (8004084 <HAL_DMA_IRQHandler+0xa9c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d02c      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x9d4>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a48      	ldr	r2, [pc, #288]	; (8004088 <HAL_DMA_IRQHandler+0xaa0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d027      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x9d4>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a46      	ldr	r2, [pc, #280]	; (800408c <HAL_DMA_IRQHandler+0xaa4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d022      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x9d4>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a45      	ldr	r2, [pc, #276]	; (8004090 <HAL_DMA_IRQHandler+0xaa8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d01d      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x9d4>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a43      	ldr	r2, [pc, #268]	; (8004094 <HAL_DMA_IRQHandler+0xaac>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d018      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x9d4>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a42      	ldr	r2, [pc, #264]	; (8004098 <HAL_DMA_IRQHandler+0xab0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d013      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x9d4>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a40      	ldr	r2, [pc, #256]	; (800409c <HAL_DMA_IRQHandler+0xab4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00e      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x9d4>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a3f      	ldr	r2, [pc, #252]	; (80040a0 <HAL_DMA_IRQHandler+0xab8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d009      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x9d4>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a3d      	ldr	r2, [pc, #244]	; (80040a4 <HAL_DMA_IRQHandler+0xabc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d004      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x9d4>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a3c      	ldr	r2, [pc, #240]	; (80040a8 <HAL_DMA_IRQHandler+0xac0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d101      	bne.n	8003fc0 <HAL_DMA_IRQHandler+0x9d8>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <HAL_DMA_IRQHandler+0x9da>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 824f 	beq.w	8004466 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd4:	f003 031f 	and.w	r3, r3, #31
 8003fd8:	2204      	movs	r2, #4
 8003fda:	409a      	lsls	r2, r3
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 80dd 	beq.w	80041a0 <HAL_DMA_IRQHandler+0xbb8>
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 80d7 	beq.w	80041a0 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff6:	f003 031f 	and.w	r3, r3, #31
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	409a      	lsls	r2, r3
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d059      	beq.n	80040c0 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d14a      	bne.n	80040ac <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 8220 	beq.w	8004460 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004028:	e21a      	b.n	8004460 <HAL_DMA_IRQHandler+0xe78>
 800402a:	bf00      	nop
 800402c:	40020010 	.word	0x40020010
 8004030:	40020028 	.word	0x40020028
 8004034:	40020040 	.word	0x40020040
 8004038:	40020058 	.word	0x40020058
 800403c:	40020070 	.word	0x40020070
 8004040:	40020088 	.word	0x40020088
 8004044:	400200a0 	.word	0x400200a0
 8004048:	400200b8 	.word	0x400200b8
 800404c:	40020410 	.word	0x40020410
 8004050:	40020428 	.word	0x40020428
 8004054:	40020440 	.word	0x40020440
 8004058:	40020458 	.word	0x40020458
 800405c:	40020470 	.word	0x40020470
 8004060:	40020488 	.word	0x40020488
 8004064:	400204a0 	.word	0x400204a0
 8004068:	400204b8 	.word	0x400204b8
 800406c:	48022c08 	.word	0x48022c08
 8004070:	48022c1c 	.word	0x48022c1c
 8004074:	48022c30 	.word	0x48022c30
 8004078:	48022c44 	.word	0x48022c44
 800407c:	48022c58 	.word	0x48022c58
 8004080:	48022c6c 	.word	0x48022c6c
 8004084:	48022c80 	.word	0x48022c80
 8004088:	48022c94 	.word	0x48022c94
 800408c:	58025408 	.word	0x58025408
 8004090:	5802541c 	.word	0x5802541c
 8004094:	58025430 	.word	0x58025430
 8004098:	58025444 	.word	0x58025444
 800409c:	58025458 	.word	0x58025458
 80040a0:	5802546c 	.word	0x5802546c
 80040a4:	58025480 	.word	0x58025480
 80040a8:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 81d5 	beq.w	8004460 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040be:	e1cf      	b.n	8004460 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d160      	bne.n	800418c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a7f      	ldr	r2, [pc, #508]	; (80042cc <HAL_DMA_IRQHandler+0xce4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d04a      	beq.n	800416a <HAL_DMA_IRQHandler+0xb82>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a7d      	ldr	r2, [pc, #500]	; (80042d0 <HAL_DMA_IRQHandler+0xce8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d045      	beq.n	800416a <HAL_DMA_IRQHandler+0xb82>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a7c      	ldr	r2, [pc, #496]	; (80042d4 <HAL_DMA_IRQHandler+0xcec>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d040      	beq.n	800416a <HAL_DMA_IRQHandler+0xb82>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a7a      	ldr	r2, [pc, #488]	; (80042d8 <HAL_DMA_IRQHandler+0xcf0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d03b      	beq.n	800416a <HAL_DMA_IRQHandler+0xb82>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a79      	ldr	r2, [pc, #484]	; (80042dc <HAL_DMA_IRQHandler+0xcf4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d036      	beq.n	800416a <HAL_DMA_IRQHandler+0xb82>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a77      	ldr	r2, [pc, #476]	; (80042e0 <HAL_DMA_IRQHandler+0xcf8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d031      	beq.n	800416a <HAL_DMA_IRQHandler+0xb82>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a76      	ldr	r2, [pc, #472]	; (80042e4 <HAL_DMA_IRQHandler+0xcfc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d02c      	beq.n	800416a <HAL_DMA_IRQHandler+0xb82>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a74      	ldr	r2, [pc, #464]	; (80042e8 <HAL_DMA_IRQHandler+0xd00>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d027      	beq.n	800416a <HAL_DMA_IRQHandler+0xb82>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a73      	ldr	r2, [pc, #460]	; (80042ec <HAL_DMA_IRQHandler+0xd04>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d022      	beq.n	800416a <HAL_DMA_IRQHandler+0xb82>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a71      	ldr	r2, [pc, #452]	; (80042f0 <HAL_DMA_IRQHandler+0xd08>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d01d      	beq.n	800416a <HAL_DMA_IRQHandler+0xb82>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a70      	ldr	r2, [pc, #448]	; (80042f4 <HAL_DMA_IRQHandler+0xd0c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d018      	beq.n	800416a <HAL_DMA_IRQHandler+0xb82>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a6e      	ldr	r2, [pc, #440]	; (80042f8 <HAL_DMA_IRQHandler+0xd10>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <HAL_DMA_IRQHandler+0xb82>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a6d      	ldr	r2, [pc, #436]	; (80042fc <HAL_DMA_IRQHandler+0xd14>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00e      	beq.n	800416a <HAL_DMA_IRQHandler+0xb82>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a6b      	ldr	r2, [pc, #428]	; (8004300 <HAL_DMA_IRQHandler+0xd18>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d009      	beq.n	800416a <HAL_DMA_IRQHandler+0xb82>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a6a      	ldr	r2, [pc, #424]	; (8004304 <HAL_DMA_IRQHandler+0xd1c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d004      	beq.n	800416a <HAL_DMA_IRQHandler+0xb82>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a68      	ldr	r2, [pc, #416]	; (8004308 <HAL_DMA_IRQHandler+0xd20>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d108      	bne.n	800417c <HAL_DMA_IRQHandler+0xb94>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0208 	bic.w	r2, r2, #8
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e007      	b.n	800418c <HAL_DMA_IRQHandler+0xba4>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0204 	bic.w	r2, r2, #4
 800418a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 8165 	beq.w	8004460 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800419e:	e15f      	b.n	8004460 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	2202      	movs	r2, #2
 80041aa:	409a      	lsls	r2, r3
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80c5 	beq.w	8004340 <HAL_DMA_IRQHandler+0xd58>
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 80bf 	beq.w	8004340 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c6:	f003 031f 	and.w	r3, r3, #31
 80041ca:	2202      	movs	r2, #2
 80041cc:	409a      	lsls	r2, r3
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d018      	beq.n	800420e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d109      	bne.n	80041fa <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 813a 	beq.w	8004464 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041f8:	e134      	b.n	8004464 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 8130 	beq.w	8004464 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800420c:	e12a      	b.n	8004464 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	f040 8089 	bne.w	800432c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a2b      	ldr	r2, [pc, #172]	; (80042cc <HAL_DMA_IRQHandler+0xce4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d04a      	beq.n	80042ba <HAL_DMA_IRQHandler+0xcd2>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a29      	ldr	r2, [pc, #164]	; (80042d0 <HAL_DMA_IRQHandler+0xce8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d045      	beq.n	80042ba <HAL_DMA_IRQHandler+0xcd2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a28      	ldr	r2, [pc, #160]	; (80042d4 <HAL_DMA_IRQHandler+0xcec>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d040      	beq.n	80042ba <HAL_DMA_IRQHandler+0xcd2>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a26      	ldr	r2, [pc, #152]	; (80042d8 <HAL_DMA_IRQHandler+0xcf0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d03b      	beq.n	80042ba <HAL_DMA_IRQHandler+0xcd2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a25      	ldr	r2, [pc, #148]	; (80042dc <HAL_DMA_IRQHandler+0xcf4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d036      	beq.n	80042ba <HAL_DMA_IRQHandler+0xcd2>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a23      	ldr	r2, [pc, #140]	; (80042e0 <HAL_DMA_IRQHandler+0xcf8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d031      	beq.n	80042ba <HAL_DMA_IRQHandler+0xcd2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a22      	ldr	r2, [pc, #136]	; (80042e4 <HAL_DMA_IRQHandler+0xcfc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d02c      	beq.n	80042ba <HAL_DMA_IRQHandler+0xcd2>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a20      	ldr	r2, [pc, #128]	; (80042e8 <HAL_DMA_IRQHandler+0xd00>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d027      	beq.n	80042ba <HAL_DMA_IRQHandler+0xcd2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a1f      	ldr	r2, [pc, #124]	; (80042ec <HAL_DMA_IRQHandler+0xd04>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d022      	beq.n	80042ba <HAL_DMA_IRQHandler+0xcd2>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1d      	ldr	r2, [pc, #116]	; (80042f0 <HAL_DMA_IRQHandler+0xd08>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d01d      	beq.n	80042ba <HAL_DMA_IRQHandler+0xcd2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1c      	ldr	r2, [pc, #112]	; (80042f4 <HAL_DMA_IRQHandler+0xd0c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d018      	beq.n	80042ba <HAL_DMA_IRQHandler+0xcd2>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1a      	ldr	r2, [pc, #104]	; (80042f8 <HAL_DMA_IRQHandler+0xd10>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d013      	beq.n	80042ba <HAL_DMA_IRQHandler+0xcd2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a19      	ldr	r2, [pc, #100]	; (80042fc <HAL_DMA_IRQHandler+0xd14>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00e      	beq.n	80042ba <HAL_DMA_IRQHandler+0xcd2>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a17      	ldr	r2, [pc, #92]	; (8004300 <HAL_DMA_IRQHandler+0xd18>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d009      	beq.n	80042ba <HAL_DMA_IRQHandler+0xcd2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a16      	ldr	r2, [pc, #88]	; (8004304 <HAL_DMA_IRQHandler+0xd1c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d004      	beq.n	80042ba <HAL_DMA_IRQHandler+0xcd2>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a14      	ldr	r2, [pc, #80]	; (8004308 <HAL_DMA_IRQHandler+0xd20>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d128      	bne.n	800430c <HAL_DMA_IRQHandler+0xd24>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0214 	bic.w	r2, r2, #20
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	e027      	b.n	800431c <HAL_DMA_IRQHandler+0xd34>
 80042cc:	40020010 	.word	0x40020010
 80042d0:	40020028 	.word	0x40020028
 80042d4:	40020040 	.word	0x40020040
 80042d8:	40020058 	.word	0x40020058
 80042dc:	40020070 	.word	0x40020070
 80042e0:	40020088 	.word	0x40020088
 80042e4:	400200a0 	.word	0x400200a0
 80042e8:	400200b8 	.word	0x400200b8
 80042ec:	40020410 	.word	0x40020410
 80042f0:	40020428 	.word	0x40020428
 80042f4:	40020440 	.word	0x40020440
 80042f8:	40020458 	.word	0x40020458
 80042fc:	40020470 	.word	0x40020470
 8004300:	40020488 	.word	0x40020488
 8004304:	400204a0 	.word	0x400204a0
 8004308:	400204b8 	.word	0x400204b8
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 020a 	bic.w	r2, r2, #10
 800431a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8097 	beq.w	8004464 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800433e:	e091      	b.n	8004464 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004344:	f003 031f 	and.w	r3, r3, #31
 8004348:	2208      	movs	r2, #8
 800434a:	409a      	lsls	r2, r3
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8088 	beq.w	8004466 <HAL_DMA_IRQHandler+0xe7e>
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 8082 	beq.w	8004466 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a41      	ldr	r2, [pc, #260]	; (800446c <HAL_DMA_IRQHandler+0xe84>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d04a      	beq.n	8004402 <HAL_DMA_IRQHandler+0xe1a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a3f      	ldr	r2, [pc, #252]	; (8004470 <HAL_DMA_IRQHandler+0xe88>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d045      	beq.n	8004402 <HAL_DMA_IRQHandler+0xe1a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a3e      	ldr	r2, [pc, #248]	; (8004474 <HAL_DMA_IRQHandler+0xe8c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d040      	beq.n	8004402 <HAL_DMA_IRQHandler+0xe1a>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a3c      	ldr	r2, [pc, #240]	; (8004478 <HAL_DMA_IRQHandler+0xe90>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d03b      	beq.n	8004402 <HAL_DMA_IRQHandler+0xe1a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a3b      	ldr	r2, [pc, #236]	; (800447c <HAL_DMA_IRQHandler+0xe94>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d036      	beq.n	8004402 <HAL_DMA_IRQHandler+0xe1a>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a39      	ldr	r2, [pc, #228]	; (8004480 <HAL_DMA_IRQHandler+0xe98>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d031      	beq.n	8004402 <HAL_DMA_IRQHandler+0xe1a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a38      	ldr	r2, [pc, #224]	; (8004484 <HAL_DMA_IRQHandler+0xe9c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d02c      	beq.n	8004402 <HAL_DMA_IRQHandler+0xe1a>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a36      	ldr	r2, [pc, #216]	; (8004488 <HAL_DMA_IRQHandler+0xea0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d027      	beq.n	8004402 <HAL_DMA_IRQHandler+0xe1a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a35      	ldr	r2, [pc, #212]	; (800448c <HAL_DMA_IRQHandler+0xea4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d022      	beq.n	8004402 <HAL_DMA_IRQHandler+0xe1a>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a33      	ldr	r2, [pc, #204]	; (8004490 <HAL_DMA_IRQHandler+0xea8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d01d      	beq.n	8004402 <HAL_DMA_IRQHandler+0xe1a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a32      	ldr	r2, [pc, #200]	; (8004494 <HAL_DMA_IRQHandler+0xeac>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d018      	beq.n	8004402 <HAL_DMA_IRQHandler+0xe1a>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a30      	ldr	r2, [pc, #192]	; (8004498 <HAL_DMA_IRQHandler+0xeb0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d013      	beq.n	8004402 <HAL_DMA_IRQHandler+0xe1a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a2f      	ldr	r2, [pc, #188]	; (800449c <HAL_DMA_IRQHandler+0xeb4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00e      	beq.n	8004402 <HAL_DMA_IRQHandler+0xe1a>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a2d      	ldr	r2, [pc, #180]	; (80044a0 <HAL_DMA_IRQHandler+0xeb8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d009      	beq.n	8004402 <HAL_DMA_IRQHandler+0xe1a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a2c      	ldr	r2, [pc, #176]	; (80044a4 <HAL_DMA_IRQHandler+0xebc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d004      	beq.n	8004402 <HAL_DMA_IRQHandler+0xe1a>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a2a      	ldr	r2, [pc, #168]	; (80044a8 <HAL_DMA_IRQHandler+0xec0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d108      	bne.n	8004414 <HAL_DMA_IRQHandler+0xe2c>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 021c 	bic.w	r2, r2, #28
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	e007      	b.n	8004424 <HAL_DMA_IRQHandler+0xe3c>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 020e 	bic.w	r2, r2, #14
 8004422:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	2201      	movs	r2, #1
 800442e:	409a      	lsls	r2, r3
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444e:	2b00      	cmp	r3, #0
 8004450:	d009      	beq.n	8004466 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	4798      	blx	r3
 800445a:	e004      	b.n	8004466 <HAL_DMA_IRQHandler+0xe7e>
          return;
 800445c:	bf00      	nop
 800445e:	e002      	b.n	8004466 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004460:	bf00      	nop
 8004462:	e000      	b.n	8004466 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004464:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004466:	3728      	adds	r7, #40	; 0x28
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40020010 	.word	0x40020010
 8004470:	40020028 	.word	0x40020028
 8004474:	40020040 	.word	0x40020040
 8004478:	40020058 	.word	0x40020058
 800447c:	40020070 	.word	0x40020070
 8004480:	40020088 	.word	0x40020088
 8004484:	400200a0 	.word	0x400200a0
 8004488:	400200b8 	.word	0x400200b8
 800448c:	40020410 	.word	0x40020410
 8004490:	40020428 	.word	0x40020428
 8004494:	40020440 	.word	0x40020440
 8004498:	40020458 	.word	0x40020458
 800449c:	40020470 	.word	0x40020470
 80044a0:	40020488 	.word	0x40020488
 80044a4:	400204a0 	.word	0x400204a0
 80044a8:	400204b8 	.word	0x400204b8

080044ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a42      	ldr	r2, [pc, #264]	; (80045c4 <DMA_CalcBaseAndBitshift+0x118>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d04a      	beq.n	8004554 <DMA_CalcBaseAndBitshift+0xa8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a41      	ldr	r2, [pc, #260]	; (80045c8 <DMA_CalcBaseAndBitshift+0x11c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d045      	beq.n	8004554 <DMA_CalcBaseAndBitshift+0xa8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a3f      	ldr	r2, [pc, #252]	; (80045cc <DMA_CalcBaseAndBitshift+0x120>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d040      	beq.n	8004554 <DMA_CalcBaseAndBitshift+0xa8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a3e      	ldr	r2, [pc, #248]	; (80045d0 <DMA_CalcBaseAndBitshift+0x124>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d03b      	beq.n	8004554 <DMA_CalcBaseAndBitshift+0xa8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a3c      	ldr	r2, [pc, #240]	; (80045d4 <DMA_CalcBaseAndBitshift+0x128>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d036      	beq.n	8004554 <DMA_CalcBaseAndBitshift+0xa8>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a3b      	ldr	r2, [pc, #236]	; (80045d8 <DMA_CalcBaseAndBitshift+0x12c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d031      	beq.n	8004554 <DMA_CalcBaseAndBitshift+0xa8>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a39      	ldr	r2, [pc, #228]	; (80045dc <DMA_CalcBaseAndBitshift+0x130>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d02c      	beq.n	8004554 <DMA_CalcBaseAndBitshift+0xa8>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a38      	ldr	r2, [pc, #224]	; (80045e0 <DMA_CalcBaseAndBitshift+0x134>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d027      	beq.n	8004554 <DMA_CalcBaseAndBitshift+0xa8>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a36      	ldr	r2, [pc, #216]	; (80045e4 <DMA_CalcBaseAndBitshift+0x138>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d022      	beq.n	8004554 <DMA_CalcBaseAndBitshift+0xa8>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a35      	ldr	r2, [pc, #212]	; (80045e8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d01d      	beq.n	8004554 <DMA_CalcBaseAndBitshift+0xa8>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a33      	ldr	r2, [pc, #204]	; (80045ec <DMA_CalcBaseAndBitshift+0x140>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d018      	beq.n	8004554 <DMA_CalcBaseAndBitshift+0xa8>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a32      	ldr	r2, [pc, #200]	; (80045f0 <DMA_CalcBaseAndBitshift+0x144>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d013      	beq.n	8004554 <DMA_CalcBaseAndBitshift+0xa8>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a30      	ldr	r2, [pc, #192]	; (80045f4 <DMA_CalcBaseAndBitshift+0x148>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00e      	beq.n	8004554 <DMA_CalcBaseAndBitshift+0xa8>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a2f      	ldr	r2, [pc, #188]	; (80045f8 <DMA_CalcBaseAndBitshift+0x14c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d009      	beq.n	8004554 <DMA_CalcBaseAndBitshift+0xa8>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a2d      	ldr	r2, [pc, #180]	; (80045fc <DMA_CalcBaseAndBitshift+0x150>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d004      	beq.n	8004554 <DMA_CalcBaseAndBitshift+0xa8>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a2c      	ldr	r2, [pc, #176]	; (8004600 <DMA_CalcBaseAndBitshift+0x154>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d101      	bne.n	8004558 <DMA_CalcBaseAndBitshift+0xac>
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <DMA_CalcBaseAndBitshift+0xae>
 8004558:	2300      	movs	r3, #0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d024      	beq.n	80045a8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	b2db      	uxtb	r3, r3
 8004564:	3b10      	subs	r3, #16
 8004566:	4a27      	ldr	r2, [pc, #156]	; (8004604 <DMA_CalcBaseAndBitshift+0x158>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	4a24      	ldr	r2, [pc, #144]	; (8004608 <DMA_CalcBaseAndBitshift+0x15c>)
 8004578:	5cd3      	ldrb	r3, [r2, r3]
 800457a:	461a      	mov	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b03      	cmp	r3, #3
 8004584:	d908      	bls.n	8004598 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	4b1f      	ldr	r3, [pc, #124]	; (800460c <DMA_CalcBaseAndBitshift+0x160>)
 800458e:	4013      	ands	r3, r2
 8004590:	1d1a      	adds	r2, r3, #4
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	659a      	str	r2, [r3, #88]	; 0x58
 8004596:	e00d      	b.n	80045b4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	461a      	mov	r2, r3
 800459e:	4b1b      	ldr	r3, [pc, #108]	; (800460c <DMA_CalcBaseAndBitshift+0x160>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6593      	str	r3, [r2, #88]	; 0x58
 80045a6:	e005      	b.n	80045b4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	40020010 	.word	0x40020010
 80045c8:	40020028 	.word	0x40020028
 80045cc:	40020040 	.word	0x40020040
 80045d0:	40020058 	.word	0x40020058
 80045d4:	40020070 	.word	0x40020070
 80045d8:	40020088 	.word	0x40020088
 80045dc:	400200a0 	.word	0x400200a0
 80045e0:	400200b8 	.word	0x400200b8
 80045e4:	40020410 	.word	0x40020410
 80045e8:	40020428 	.word	0x40020428
 80045ec:	40020440 	.word	0x40020440
 80045f0:	40020458 	.word	0x40020458
 80045f4:	40020470 	.word	0x40020470
 80045f8:	40020488 	.word	0x40020488
 80045fc:	400204a0 	.word	0x400204a0
 8004600:	400204b8 	.word	0x400204b8
 8004604:	aaaaaaab 	.word	0xaaaaaaab
 8004608:	0800d4ac 	.word	0x0800d4ac
 800460c:	fffffc00 	.word	0xfffffc00

08004610 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004618:	2300      	movs	r3, #0
 800461a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d120      	bne.n	8004666 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	2b03      	cmp	r3, #3
 800462a:	d858      	bhi.n	80046de <DMA_CheckFifoParam+0xce>
 800462c:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <DMA_CheckFifoParam+0x24>)
 800462e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004632:	bf00      	nop
 8004634:	08004645 	.word	0x08004645
 8004638:	08004657 	.word	0x08004657
 800463c:	08004645 	.word	0x08004645
 8004640:	080046df 	.word	0x080046df
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d048      	beq.n	80046e2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004654:	e045      	b.n	80046e2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800465e:	d142      	bne.n	80046e6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004664:	e03f      	b.n	80046e6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800466e:	d123      	bne.n	80046b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	2b03      	cmp	r3, #3
 8004676:	d838      	bhi.n	80046ea <DMA_CheckFifoParam+0xda>
 8004678:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <DMA_CheckFifoParam+0x70>)
 800467a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467e:	bf00      	nop
 8004680:	08004691 	.word	0x08004691
 8004684:	08004697 	.word	0x08004697
 8004688:	08004691 	.word	0x08004691
 800468c:	080046a9 	.word	0x080046a9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	73fb      	strb	r3, [r7, #15]
        break;
 8004694:	e030      	b.n	80046f8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d025      	beq.n	80046ee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046a6:	e022      	b.n	80046ee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046b0:	d11f      	bne.n	80046f2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046b6:	e01c      	b.n	80046f2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d902      	bls.n	80046c6 <DMA_CheckFifoParam+0xb6>
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d003      	beq.n	80046cc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80046c4:	e018      	b.n	80046f8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	73fb      	strb	r3, [r7, #15]
        break;
 80046ca:	e015      	b.n	80046f8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00e      	beq.n	80046f6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]
    break;
 80046dc:	e00b      	b.n	80046f6 <DMA_CheckFifoParam+0xe6>
        break;
 80046de:	bf00      	nop
 80046e0:	e00a      	b.n	80046f8 <DMA_CheckFifoParam+0xe8>
        break;
 80046e2:	bf00      	nop
 80046e4:	e008      	b.n	80046f8 <DMA_CheckFifoParam+0xe8>
        break;
 80046e6:	bf00      	nop
 80046e8:	e006      	b.n	80046f8 <DMA_CheckFifoParam+0xe8>
        break;
 80046ea:	bf00      	nop
 80046ec:	e004      	b.n	80046f8 <DMA_CheckFifoParam+0xe8>
        break;
 80046ee:	bf00      	nop
 80046f0:	e002      	b.n	80046f8 <DMA_CheckFifoParam+0xe8>
        break;
 80046f2:	bf00      	nop
 80046f4:	e000      	b.n	80046f8 <DMA_CheckFifoParam+0xe8>
    break;
 80046f6:	bf00      	nop
    }
  }

  return status;
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop

08004708 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a38      	ldr	r2, [pc, #224]	; (80047fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d022      	beq.n	8004766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a36      	ldr	r2, [pc, #216]	; (8004800 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d01d      	beq.n	8004766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a35      	ldr	r2, [pc, #212]	; (8004804 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d018      	beq.n	8004766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a33      	ldr	r2, [pc, #204]	; (8004808 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d013      	beq.n	8004766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a32      	ldr	r2, [pc, #200]	; (800480c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d00e      	beq.n	8004766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a30      	ldr	r2, [pc, #192]	; (8004810 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d009      	beq.n	8004766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a2f      	ldr	r2, [pc, #188]	; (8004814 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d004      	beq.n	8004766 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a2d      	ldr	r2, [pc, #180]	; (8004818 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d101      	bne.n	800476a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800476a:	2300      	movs	r3, #0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01a      	beq.n	80047a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	3b08      	subs	r3, #8
 8004778:	4a28      	ldr	r2, [pc, #160]	; (800481c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800477a:	fba2 2303 	umull	r2, r3, r2, r3
 800477e:	091b      	lsrs	r3, r3, #4
 8004780:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4b26      	ldr	r3, [pc, #152]	; (8004820 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004786:	4413      	add	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	461a      	mov	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a24      	ldr	r2, [pc, #144]	; (8004824 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004794:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	2201      	movs	r2, #1
 800479e:	409a      	lsls	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80047a4:	e024      	b.n	80047f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	3b10      	subs	r3, #16
 80047ae:	4a1e      	ldr	r2, [pc, #120]	; (8004828 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80047b0:	fba2 2303 	umull	r2, r3, r2, r3
 80047b4:	091b      	lsrs	r3, r3, #4
 80047b6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	4a1c      	ldr	r2, [pc, #112]	; (800482c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d806      	bhi.n	80047ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4a1b      	ldr	r2, [pc, #108]	; (8004830 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d902      	bls.n	80047ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	3308      	adds	r3, #8
 80047cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	4b18      	ldr	r3, [pc, #96]	; (8004834 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	461a      	mov	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a16      	ldr	r2, [pc, #88]	; (8004838 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80047e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	2201      	movs	r2, #1
 80047ea:	409a      	lsls	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	669a      	str	r2, [r3, #104]	; 0x68
}
 80047f0:	bf00      	nop
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	58025408 	.word	0x58025408
 8004800:	5802541c 	.word	0x5802541c
 8004804:	58025430 	.word	0x58025430
 8004808:	58025444 	.word	0x58025444
 800480c:	58025458 	.word	0x58025458
 8004810:	5802546c 	.word	0x5802546c
 8004814:	58025480 	.word	0x58025480
 8004818:	58025494 	.word	0x58025494
 800481c:	cccccccd 	.word	0xcccccccd
 8004820:	16009600 	.word	0x16009600
 8004824:	58025880 	.word	0x58025880
 8004828:	aaaaaaab 	.word	0xaaaaaaab
 800482c:	400204b8 	.word	0x400204b8
 8004830:	4002040f 	.word	0x4002040f
 8004834:	10008200 	.word	0x10008200
 8004838:	40020880 	.word	0x40020880

0800483c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d04a      	beq.n	80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b08      	cmp	r3, #8
 8004856:	d847      	bhi.n	80048e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a25      	ldr	r2, [pc, #148]	; (80048f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d022      	beq.n	80048a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a24      	ldr	r2, [pc, #144]	; (80048f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d01d      	beq.n	80048a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a22      	ldr	r2, [pc, #136]	; (80048fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d018      	beq.n	80048a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a21      	ldr	r2, [pc, #132]	; (8004900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d013      	beq.n	80048a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a1f      	ldr	r2, [pc, #124]	; (8004904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00e      	beq.n	80048a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a1e      	ldr	r2, [pc, #120]	; (8004908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d009      	beq.n	80048a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a1c      	ldr	r2, [pc, #112]	; (800490c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d004      	beq.n	80048a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a1b      	ldr	r2, [pc, #108]	; (8004910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d101      	bne.n	80048ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80048ac:	2300      	movs	r3, #0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4b17      	ldr	r3, [pc, #92]	; (8004914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	461a      	mov	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a15      	ldr	r2, [pc, #84]	; (8004918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80048c4:	671a      	str	r2, [r3, #112]	; 0x70
 80048c6:	e009      	b.n	80048dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4b14      	ldr	r3, [pc, #80]	; (800491c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80048cc:	4413      	add	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	461a      	mov	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a11      	ldr	r2, [pc, #68]	; (8004920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80048da:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3b01      	subs	r3, #1
 80048e0:	2201      	movs	r2, #1
 80048e2:	409a      	lsls	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	58025408 	.word	0x58025408
 80048f8:	5802541c 	.word	0x5802541c
 80048fc:	58025430 	.word	0x58025430
 8004900:	58025444 	.word	0x58025444
 8004904:	58025458 	.word	0x58025458
 8004908:	5802546c 	.word	0x5802546c
 800490c:	58025480 	.word	0x58025480
 8004910:	58025494 	.word	0x58025494
 8004914:	1600963f 	.word	0x1600963f
 8004918:	58025940 	.word	0x58025940
 800491c:	1000823f 	.word	0x1000823f
 8004920:	40020940 	.word	0x40020940

08004924 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004924:	b480      	push	{r7}
 8004926:	b089      	sub	sp, #36	; 0x24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800492e:	2300      	movs	r3, #0
 8004930:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004932:	4b89      	ldr	r3, [pc, #548]	; (8004b58 <HAL_GPIO_Init+0x234>)
 8004934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004936:	e194      	b.n	8004c62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	2101      	movs	r1, #1
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	fa01 f303 	lsl.w	r3, r1, r3
 8004944:	4013      	ands	r3, r2
 8004946:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 8186 	beq.w	8004c5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f003 0303 	and.w	r3, r3, #3
 8004958:	2b01      	cmp	r3, #1
 800495a:	d005      	beq.n	8004968 <HAL_GPIO_Init+0x44>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f003 0303 	and.w	r3, r3, #3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d130      	bne.n	80049ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	2203      	movs	r2, #3
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	43db      	mvns	r3, r3
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	4013      	ands	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	4313      	orrs	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800499e:	2201      	movs	r2, #1
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	43db      	mvns	r3, r3
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	4013      	ands	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	091b      	lsrs	r3, r3, #4
 80049b4:	f003 0201 	and.w	r2, r3, #1
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d017      	beq.n	8004a06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	2203      	movs	r2, #3
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	43db      	mvns	r3, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4013      	ands	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d123      	bne.n	8004a5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	08da      	lsrs	r2, r3, #3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3208      	adds	r2, #8
 8004a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	220f      	movs	r2, #15
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4013      	ands	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	08da      	lsrs	r2, r3, #3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3208      	adds	r2, #8
 8004a54:	69b9      	ldr	r1, [r7, #24]
 8004a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	2203      	movs	r2, #3
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f003 0203 	and.w	r2, r3, #3
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 80e0 	beq.w	8004c5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a9c:	4b2f      	ldr	r3, [pc, #188]	; (8004b5c <HAL_GPIO_Init+0x238>)
 8004a9e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004aa2:	4a2e      	ldr	r2, [pc, #184]	; (8004b5c <HAL_GPIO_Init+0x238>)
 8004aa4:	f043 0302 	orr.w	r3, r3, #2
 8004aa8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8004aac:	4b2b      	ldr	r3, [pc, #172]	; (8004b5c <HAL_GPIO_Init+0x238>)
 8004aae:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004aba:	4a29      	ldr	r2, [pc, #164]	; (8004b60 <HAL_GPIO_Init+0x23c>)
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	089b      	lsrs	r3, r3, #2
 8004ac0:	3302      	adds	r3, #2
 8004ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	220f      	movs	r2, #15
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	43db      	mvns	r3, r3
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	4013      	ands	r3, r2
 8004adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a20      	ldr	r2, [pc, #128]	; (8004b64 <HAL_GPIO_Init+0x240>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d052      	beq.n	8004b8c <HAL_GPIO_Init+0x268>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a1f      	ldr	r2, [pc, #124]	; (8004b68 <HAL_GPIO_Init+0x244>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d031      	beq.n	8004b52 <HAL_GPIO_Init+0x22e>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a1e      	ldr	r2, [pc, #120]	; (8004b6c <HAL_GPIO_Init+0x248>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d02b      	beq.n	8004b4e <HAL_GPIO_Init+0x22a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a1d      	ldr	r2, [pc, #116]	; (8004b70 <HAL_GPIO_Init+0x24c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d025      	beq.n	8004b4a <HAL_GPIO_Init+0x226>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a1c      	ldr	r2, [pc, #112]	; (8004b74 <HAL_GPIO_Init+0x250>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d01f      	beq.n	8004b46 <HAL_GPIO_Init+0x222>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a1b      	ldr	r2, [pc, #108]	; (8004b78 <HAL_GPIO_Init+0x254>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d019      	beq.n	8004b42 <HAL_GPIO_Init+0x21e>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a1a      	ldr	r2, [pc, #104]	; (8004b7c <HAL_GPIO_Init+0x258>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d013      	beq.n	8004b3e <HAL_GPIO_Init+0x21a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a19      	ldr	r2, [pc, #100]	; (8004b80 <HAL_GPIO_Init+0x25c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00d      	beq.n	8004b3a <HAL_GPIO_Init+0x216>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a18      	ldr	r2, [pc, #96]	; (8004b84 <HAL_GPIO_Init+0x260>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d007      	beq.n	8004b36 <HAL_GPIO_Init+0x212>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a17      	ldr	r2, [pc, #92]	; (8004b88 <HAL_GPIO_Init+0x264>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d101      	bne.n	8004b32 <HAL_GPIO_Init+0x20e>
 8004b2e:	2309      	movs	r3, #9
 8004b30:	e02d      	b.n	8004b8e <HAL_GPIO_Init+0x26a>
 8004b32:	230a      	movs	r3, #10
 8004b34:	e02b      	b.n	8004b8e <HAL_GPIO_Init+0x26a>
 8004b36:	2308      	movs	r3, #8
 8004b38:	e029      	b.n	8004b8e <HAL_GPIO_Init+0x26a>
 8004b3a:	2307      	movs	r3, #7
 8004b3c:	e027      	b.n	8004b8e <HAL_GPIO_Init+0x26a>
 8004b3e:	2306      	movs	r3, #6
 8004b40:	e025      	b.n	8004b8e <HAL_GPIO_Init+0x26a>
 8004b42:	2305      	movs	r3, #5
 8004b44:	e023      	b.n	8004b8e <HAL_GPIO_Init+0x26a>
 8004b46:	2304      	movs	r3, #4
 8004b48:	e021      	b.n	8004b8e <HAL_GPIO_Init+0x26a>
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e01f      	b.n	8004b8e <HAL_GPIO_Init+0x26a>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e01d      	b.n	8004b8e <HAL_GPIO_Init+0x26a>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e01b      	b.n	8004b8e <HAL_GPIO_Init+0x26a>
 8004b56:	bf00      	nop
 8004b58:	58000080 	.word	0x58000080
 8004b5c:	58024400 	.word	0x58024400
 8004b60:	58000400 	.word	0x58000400
 8004b64:	58020000 	.word	0x58020000
 8004b68:	58020400 	.word	0x58020400
 8004b6c:	58020800 	.word	0x58020800
 8004b70:	58020c00 	.word	0x58020c00
 8004b74:	58021000 	.word	0x58021000
 8004b78:	58021400 	.word	0x58021400
 8004b7c:	58021800 	.word	0x58021800
 8004b80:	58021c00 	.word	0x58021c00
 8004b84:	58022000 	.word	0x58022000
 8004b88:	58022400 	.word	0x58022400
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	69fa      	ldr	r2, [r7, #28]
 8004b90:	f002 0203 	and.w	r2, r2, #3
 8004b94:	0092      	lsls	r2, r2, #2
 8004b96:	4093      	lsls	r3, r2
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b9e:	4938      	ldr	r1, [pc, #224]	; (8004c80 <HAL_GPIO_Init+0x35c>)
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	089b      	lsrs	r3, r3, #2
 8004ba4:	3302      	adds	r3, #2
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	43db      	mvns	r3, r3
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	4013      	ands	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	43db      	mvns	r3, r3
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4013      	ands	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	fa22 f303 	lsr.w	r3, r2, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f47f ae63 	bne.w	8004938 <HAL_GPIO_Init+0x14>
  }
}
 8004c72:	bf00      	nop
 8004c74:	bf00      	nop
 8004c76:	3724      	adds	r7, #36	; 0x24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	58000400 	.word	0x58000400

08004c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	807b      	strh	r3, [r7, #2]
 8004c90:	4613      	mov	r3, r2
 8004c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c94:	787b      	ldrb	r3, [r7, #1]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c9a:	887a      	ldrh	r2, [r7, #2]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004ca0:	e003      	b.n	8004caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004ca2:	887b      	ldrh	r3, [r7, #2]
 8004ca4:	041a      	lsls	r2, r3, #16
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	619a      	str	r2, [r3, #24]
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
	...

08004cb8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004cc0:	4b29      	ldr	r3, [pc, #164]	; (8004d68 <HAL_PWREx_ConfigSupply+0xb0>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	2b06      	cmp	r3, #6
 8004cca:	d00a      	beq.n	8004ce2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004ccc:	4b26      	ldr	r3, [pc, #152]	; (8004d68 <HAL_PWREx_ConfigSupply+0xb0>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d001      	beq.n	8004cde <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e040      	b.n	8004d60 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	e03e      	b.n	8004d60 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004ce2:	4b21      	ldr	r3, [pc, #132]	; (8004d68 <HAL_PWREx_ConfigSupply+0xb0>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004cea:	491f      	ldr	r1, [pc, #124]	; (8004d68 <HAL_PWREx_ConfigSupply+0xb0>)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004cf2:	f7fd fa45 	bl	8002180 <HAL_GetTick>
 8004cf6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004cf8:	e009      	b.n	8004d0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004cfa:	f7fd fa41 	bl	8002180 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d08:	d901      	bls.n	8004d0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e028      	b.n	8004d60 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d0e:	4b16      	ldr	r3, [pc, #88]	; (8004d68 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d1a:	d1ee      	bne.n	8004cfa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b1e      	cmp	r3, #30
 8004d20:	d008      	beq.n	8004d34 <HAL_PWREx_ConfigSupply+0x7c>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b2e      	cmp	r3, #46	; 0x2e
 8004d26:	d005      	beq.n	8004d34 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b1d      	cmp	r3, #29
 8004d2c:	d002      	beq.n	8004d34 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b2d      	cmp	r3, #45	; 0x2d
 8004d32:	d114      	bne.n	8004d5e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004d34:	f7fd fa24 	bl	8002180 <HAL_GetTick>
 8004d38:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004d3a:	e009      	b.n	8004d50 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004d3c:	f7fd fa20 	bl	8002180 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d4a:	d901      	bls.n	8004d50 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e007      	b.n	8004d60 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004d50:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d5c:	d1ee      	bne.n	8004d3c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	58024800 	.word	0x58024800

08004d6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08c      	sub	sp, #48	; 0x30
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d102      	bne.n	8004d80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f000 bc1f 	b.w	80055be <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 80b3 	beq.w	8004ef4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d8e:	4b95      	ldr	r3, [pc, #596]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d98:	4b92      	ldr	r3, [pc, #584]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da0:	2b10      	cmp	r3, #16
 8004da2:	d007      	beq.n	8004db4 <HAL_RCC_OscConfig+0x48>
 8004da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da6:	2b18      	cmp	r3, #24
 8004da8:	d112      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x64>
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d10d      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db4:	4b8b      	ldr	r3, [pc, #556]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8098 	beq.w	8004ef2 <HAL_RCC_OscConfig+0x186>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f040 8093 	bne.w	8004ef2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e3f6      	b.n	80055be <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd8:	d106      	bne.n	8004de8 <HAL_RCC_OscConfig+0x7c>
 8004dda:	4b82      	ldr	r3, [pc, #520]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a81      	ldr	r2, [pc, #516]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	e058      	b.n	8004e9a <HAL_RCC_OscConfig+0x12e>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d112      	bne.n	8004e16 <HAL_RCC_OscConfig+0xaa>
 8004df0:	4b7c      	ldr	r3, [pc, #496]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a7b      	ldr	r2, [pc, #492]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dfa:	6013      	str	r3, [r2, #0]
 8004dfc:	4b79      	ldr	r3, [pc, #484]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a78      	ldr	r2, [pc, #480]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	4b76      	ldr	r3, [pc, #472]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a75      	ldr	r2, [pc, #468]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	e041      	b.n	8004e9a <HAL_RCC_OscConfig+0x12e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e1e:	d112      	bne.n	8004e46 <HAL_RCC_OscConfig+0xda>
 8004e20:	4b70      	ldr	r3, [pc, #448]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a6f      	ldr	r2, [pc, #444]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	4b6d      	ldr	r3, [pc, #436]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a6c      	ldr	r2, [pc, #432]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004e36:	6013      	str	r3, [r2, #0]
 8004e38:	4b6a      	ldr	r3, [pc, #424]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a69      	ldr	r2, [pc, #420]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	e029      	b.n	8004e9a <HAL_RCC_OscConfig+0x12e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004e4e:	d112      	bne.n	8004e76 <HAL_RCC_OscConfig+0x10a>
 8004e50:	4b64      	ldr	r3, [pc, #400]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a63      	ldr	r2, [pc, #396]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	4b61      	ldr	r3, [pc, #388]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a60      	ldr	r2, [pc, #384]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e66:	6013      	str	r3, [r2, #0]
 8004e68:	4b5e      	ldr	r3, [pc, #376]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a5d      	ldr	r2, [pc, #372]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e72:	6013      	str	r3, [r2, #0]
 8004e74:	e011      	b.n	8004e9a <HAL_RCC_OscConfig+0x12e>
 8004e76:	4b5b      	ldr	r3, [pc, #364]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a5a      	ldr	r2, [pc, #360]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	4b58      	ldr	r3, [pc, #352]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a57      	ldr	r2, [pc, #348]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	4b55      	ldr	r3, [pc, #340]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a54      	ldr	r2, [pc, #336]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004e94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004e98:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d013      	beq.n	8004eca <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea2:	f7fd f96d 	bl	8002180 <HAL_GetTick>
 8004ea6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eaa:	f7fd f969 	bl	8002180 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b64      	cmp	r3, #100	; 0x64
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e380      	b.n	80055be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ebc:	4b49      	ldr	r3, [pc, #292]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0f0      	beq.n	8004eaa <HAL_RCC_OscConfig+0x13e>
 8004ec8:	e014      	b.n	8004ef4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eca:	f7fd f959 	bl	8002180 <HAL_GetTick>
 8004ece:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ed2:	f7fd f955 	bl	8002180 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b64      	cmp	r3, #100	; 0x64
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e36c      	b.n	80055be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ee4:	4b3f      	ldr	r3, [pc, #252]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1f0      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x166>
 8004ef0:	e000      	b.n	8004ef4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 808c 	beq.w	800501a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f02:	4b38      	ldr	r3, [pc, #224]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f0a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f0c:	4b35      	ldr	r3, [pc, #212]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d007      	beq.n	8004f28 <HAL_RCC_OscConfig+0x1bc>
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	2b18      	cmp	r3, #24
 8004f1c:	d137      	bne.n	8004f8e <HAL_RCC_OscConfig+0x222>
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d132      	bne.n	8004f8e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f28:	4b2e      	ldr	r3, [pc, #184]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <HAL_RCC_OscConfig+0x1d4>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e33e      	b.n	80055be <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f40:	4b28      	ldr	r3, [pc, #160]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f023 0219 	bic.w	r2, r3, #25
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4925      	ldr	r1, [pc, #148]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f52:	f7fd f915 	bl	8002180 <HAL_GetTick>
 8004f56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f5a:	f7fd f911 	bl	8002180 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e328      	b.n	80055be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f6c:	4b1d      	ldr	r3, [pc, #116]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f0      	beq.n	8004f5a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f78:	4b1a      	ldr	r3, [pc, #104]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	061b      	lsls	r3, r3, #24
 8004f86:	4917      	ldr	r1, [pc, #92]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f8c:	e045      	b.n	800501a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d028      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f96:	4b13      	ldr	r3, [pc, #76]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f023 0219 	bic.w	r2, r3, #25
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	4910      	ldr	r1, [pc, #64]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7fd f8ea 	bl	8002180 <HAL_GetTick>
 8004fac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fb0:	f7fd f8e6 	bl	8002180 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e2fd      	b.n	80055be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fc2:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0f0      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fce:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	061b      	lsls	r3, r3, #24
 8004fdc:	4901      	ldr	r1, [pc, #4]	; (8004fe4 <HAL_RCC_OscConfig+0x278>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	604b      	str	r3, [r1, #4]
 8004fe2:	e01a      	b.n	800501a <HAL_RCC_OscConfig+0x2ae>
 8004fe4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fe8:	4b97      	ldr	r3, [pc, #604]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a96      	ldr	r2, [pc, #600]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 8004fee:	f023 0301 	bic.w	r3, r3, #1
 8004ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff4:	f7fd f8c4 	bl	8002180 <HAL_GetTick>
 8004ff8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ffc:	f7fd f8c0 	bl	8002180 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e2d7      	b.n	80055be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800500e:	4b8e      	ldr	r3, [pc, #568]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0304 	and.w	r3, r3, #4
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f0      	bne.n	8004ffc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0310 	and.w	r3, r3, #16
 8005022:	2b00      	cmp	r3, #0
 8005024:	d06a      	beq.n	80050fc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005026:	4b88      	ldr	r3, [pc, #544]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800502e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005030:	4b85      	ldr	r3, [pc, #532]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 8005032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005034:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	2b08      	cmp	r3, #8
 800503a:	d007      	beq.n	800504c <HAL_RCC_OscConfig+0x2e0>
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	2b18      	cmp	r3, #24
 8005040:	d11b      	bne.n	800507a <HAL_RCC_OscConfig+0x30e>
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f003 0303 	and.w	r3, r3, #3
 8005048:	2b01      	cmp	r3, #1
 800504a:	d116      	bne.n	800507a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800504c:	4b7e      	ldr	r3, [pc, #504]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <HAL_RCC_OscConfig+0x2f8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	2b80      	cmp	r3, #128	; 0x80
 800505e:	d001      	beq.n	8005064 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e2ac      	b.n	80055be <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005064:	4b78      	ldr	r3, [pc, #480]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	061b      	lsls	r3, r3, #24
 8005072:	4975      	ldr	r1, [pc, #468]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 8005074:	4313      	orrs	r3, r2
 8005076:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005078:	e040      	b.n	80050fc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d023      	beq.n	80050ca <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005082:	4b71      	ldr	r3, [pc, #452]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a70      	ldr	r2, [pc, #448]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 8005088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800508c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508e:	f7fd f877 	bl	8002180 <HAL_GetTick>
 8005092:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005096:	f7fd f873 	bl	8002180 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e28a      	b.n	80055be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050a8:	4b67      	ldr	r3, [pc, #412]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0f0      	beq.n	8005096 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050b4:	4b64      	ldr	r3, [pc, #400]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	061b      	lsls	r3, r3, #24
 80050c2:	4961      	ldr	r1, [pc, #388]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60cb      	str	r3, [r1, #12]
 80050c8:	e018      	b.n	80050fc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80050ca:	4b5f      	ldr	r3, [pc, #380]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a5e      	ldr	r2, [pc, #376]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 80050d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d6:	f7fd f853 	bl	8002180 <HAL_GetTick>
 80050da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80050de:	f7fd f84f 	bl	8002180 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e266      	b.n	80055be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050f0:	4b55      	ldr	r3, [pc, #340]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1f0      	bne.n	80050de <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b00      	cmp	r3, #0
 8005106:	d036      	beq.n	8005176 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d019      	beq.n	8005144 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005110:	4b4d      	ldr	r3, [pc, #308]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 8005112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005114:	4a4c      	ldr	r2, [pc, #304]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 8005116:	f043 0301 	orr.w	r3, r3, #1
 800511a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511c:	f7fd f830 	bl	8002180 <HAL_GetTick>
 8005120:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005124:	f7fd f82c 	bl	8002180 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e243      	b.n	80055be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005136:	4b44      	ldr	r3, [pc, #272]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 8005138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0f0      	beq.n	8005124 <HAL_RCC_OscConfig+0x3b8>
 8005142:	e018      	b.n	8005176 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005144:	4b40      	ldr	r3, [pc, #256]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 8005146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005148:	4a3f      	ldr	r2, [pc, #252]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 800514a:	f023 0301 	bic.w	r3, r3, #1
 800514e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005150:	f7fd f816 	bl	8002180 <HAL_GetTick>
 8005154:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005158:	f7fd f812 	bl	8002180 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e229      	b.n	80055be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800516a:	4b37      	ldr	r3, [pc, #220]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 800516c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0320 	and.w	r3, r3, #32
 800517e:	2b00      	cmp	r3, #0
 8005180:	d036      	beq.n	80051f0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d019      	beq.n	80051be <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800518a:	4b2f      	ldr	r3, [pc, #188]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a2e      	ldr	r2, [pc, #184]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 8005190:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005194:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005196:	f7fc fff3 	bl	8002180 <HAL_GetTick>
 800519a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800519e:	f7fc ffef 	bl	8002180 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e206      	b.n	80055be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80051b0:	4b25      	ldr	r3, [pc, #148]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0f0      	beq.n	800519e <HAL_RCC_OscConfig+0x432>
 80051bc:	e018      	b.n	80051f0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051be:	4b22      	ldr	r3, [pc, #136]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a21      	ldr	r2, [pc, #132]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 80051c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80051ca:	f7fc ffd9 	bl	8002180 <HAL_GetTick>
 80051ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051d0:	e008      	b.n	80051e4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051d2:	f7fc ffd5 	bl	8002180 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e1ec      	b.n	80055be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051e4:	4b18      	ldr	r3, [pc, #96]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1f0      	bne.n	80051d2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 80af 	beq.w	800535c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051fe:	4b13      	ldr	r3, [pc, #76]	; (800524c <HAL_RCC_OscConfig+0x4e0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a12      	ldr	r2, [pc, #72]	; (800524c <HAL_RCC_OscConfig+0x4e0>)
 8005204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005208:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800520a:	f7fc ffb9 	bl	8002180 <HAL_GetTick>
 800520e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005210:	e008      	b.n	8005224 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005212:	f7fc ffb5 	bl	8002180 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b64      	cmp	r3, #100	; 0x64
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e1cc      	b.n	80055be <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005224:	4b09      	ldr	r3, [pc, #36]	; (800524c <HAL_RCC_OscConfig+0x4e0>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0f0      	beq.n	8005212 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d10b      	bne.n	8005250 <HAL_RCC_OscConfig+0x4e4>
 8005238:	4b03      	ldr	r3, [pc, #12]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523c:	4a02      	ldr	r2, [pc, #8]	; (8005248 <HAL_RCC_OscConfig+0x4dc>)
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	6713      	str	r3, [r2, #112]	; 0x70
 8005244:	e05b      	b.n	80052fe <HAL_RCC_OscConfig+0x592>
 8005246:	bf00      	nop
 8005248:	58024400 	.word	0x58024400
 800524c:	58024800 	.word	0x58024800
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d112      	bne.n	800527e <HAL_RCC_OscConfig+0x512>
 8005258:	4b9d      	ldr	r3, [pc, #628]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 800525a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525c:	4a9c      	ldr	r2, [pc, #624]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 800525e:	f023 0301 	bic.w	r3, r3, #1
 8005262:	6713      	str	r3, [r2, #112]	; 0x70
 8005264:	4b9a      	ldr	r3, [pc, #616]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005268:	4a99      	ldr	r2, [pc, #612]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 800526a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800526e:	6713      	str	r3, [r2, #112]	; 0x70
 8005270:	4b97      	ldr	r3, [pc, #604]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005274:	4a96      	ldr	r2, [pc, #600]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005276:	f023 0304 	bic.w	r3, r3, #4
 800527a:	6713      	str	r3, [r2, #112]	; 0x70
 800527c:	e03f      	b.n	80052fe <HAL_RCC_OscConfig+0x592>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	2b05      	cmp	r3, #5
 8005284:	d112      	bne.n	80052ac <HAL_RCC_OscConfig+0x540>
 8005286:	4b92      	ldr	r3, [pc, #584]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	4a91      	ldr	r2, [pc, #580]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 800528c:	f043 0304 	orr.w	r3, r3, #4
 8005290:	6713      	str	r3, [r2, #112]	; 0x70
 8005292:	4b8f      	ldr	r3, [pc, #572]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005296:	4a8e      	ldr	r2, [pc, #568]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800529c:	6713      	str	r3, [r2, #112]	; 0x70
 800529e:	4b8c      	ldr	r3, [pc, #560]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 80052a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a2:	4a8b      	ldr	r2, [pc, #556]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 80052a4:	f043 0301 	orr.w	r3, r3, #1
 80052a8:	6713      	str	r3, [r2, #112]	; 0x70
 80052aa:	e028      	b.n	80052fe <HAL_RCC_OscConfig+0x592>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b85      	cmp	r3, #133	; 0x85
 80052b2:	d112      	bne.n	80052da <HAL_RCC_OscConfig+0x56e>
 80052b4:	4b86      	ldr	r3, [pc, #536]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 80052b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b8:	4a85      	ldr	r2, [pc, #532]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 80052ba:	f043 0304 	orr.w	r3, r3, #4
 80052be:	6713      	str	r3, [r2, #112]	; 0x70
 80052c0:	4b83      	ldr	r3, [pc, #524]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 80052c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c4:	4a82      	ldr	r2, [pc, #520]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 80052c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ca:	6713      	str	r3, [r2, #112]	; 0x70
 80052cc:	4b80      	ldr	r3, [pc, #512]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 80052ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d0:	4a7f      	ldr	r2, [pc, #508]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 80052d2:	f043 0301 	orr.w	r3, r3, #1
 80052d6:	6713      	str	r3, [r2, #112]	; 0x70
 80052d8:	e011      	b.n	80052fe <HAL_RCC_OscConfig+0x592>
 80052da:	4b7d      	ldr	r3, [pc, #500]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 80052dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052de:	4a7c      	ldr	r2, [pc, #496]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 80052e0:	f023 0301 	bic.w	r3, r3, #1
 80052e4:	6713      	str	r3, [r2, #112]	; 0x70
 80052e6:	4b7a      	ldr	r3, [pc, #488]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 80052e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ea:	4a79      	ldr	r2, [pc, #484]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 80052ec:	f023 0304 	bic.w	r3, r3, #4
 80052f0:	6713      	str	r3, [r2, #112]	; 0x70
 80052f2:	4b77      	ldr	r3, [pc, #476]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 80052f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f6:	4a76      	ldr	r2, [pc, #472]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 80052f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d015      	beq.n	8005332 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005306:	f7fc ff3b 	bl	8002180 <HAL_GetTick>
 800530a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800530c:	e00a      	b.n	8005324 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800530e:	f7fc ff37 	bl	8002180 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	f241 3288 	movw	r2, #5000	; 0x1388
 800531c:	4293      	cmp	r3, r2
 800531e:	d901      	bls.n	8005324 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e14c      	b.n	80055be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005324:	4b6a      	ldr	r3, [pc, #424]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0ee      	beq.n	800530e <HAL_RCC_OscConfig+0x5a2>
 8005330:	e014      	b.n	800535c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005332:	f7fc ff25 	bl	8002180 <HAL_GetTick>
 8005336:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005338:	e00a      	b.n	8005350 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533a:	f7fc ff21 	bl	8002180 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	f241 3288 	movw	r2, #5000	; 0x1388
 8005348:	4293      	cmp	r3, r2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e136      	b.n	80055be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005350:	4b5f      	ldr	r3, [pc, #380]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1ee      	bne.n	800533a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 812b 	beq.w	80055bc <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005366:	4b5a      	ldr	r3, [pc, #360]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800536e:	2b18      	cmp	r3, #24
 8005370:	f000 80bb 	beq.w	80054ea <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	2b02      	cmp	r3, #2
 800537a:	f040 8095 	bne.w	80054a8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800537e:	4b54      	ldr	r3, [pc, #336]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a53      	ldr	r2, [pc, #332]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005384:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538a:	f7fc fef9 	bl	8002180 <HAL_GetTick>
 800538e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005392:	f7fc fef5 	bl	8002180 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e10c      	b.n	80055be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053a4:	4b4a      	ldr	r3, [pc, #296]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1f0      	bne.n	8005392 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053b0:	4b47      	ldr	r3, [pc, #284]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 80053b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053b4:	4b47      	ldr	r3, [pc, #284]	; (80054d4 <HAL_RCC_OscConfig+0x768>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80053c0:	0112      	lsls	r2, r2, #4
 80053c2:	430a      	orrs	r2, r1
 80053c4:	4942      	ldr	r1, [pc, #264]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	628b      	str	r3, [r1, #40]	; 0x28
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ce:	3b01      	subs	r3, #1
 80053d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d8:	3b01      	subs	r3, #1
 80053da:	025b      	lsls	r3, r3, #9
 80053dc:	b29b      	uxth	r3, r3
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	3b01      	subs	r3, #1
 80053e6:	041b      	lsls	r3, r3, #16
 80053e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80053ec:	431a      	orrs	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f2:	3b01      	subs	r3, #1
 80053f4:	061b      	lsls	r3, r3, #24
 80053f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80053fa:	4935      	ldr	r1, [pc, #212]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005400:	4b33      	ldr	r3, [pc, #204]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	4a32      	ldr	r2, [pc, #200]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005406:	f023 0301 	bic.w	r3, r3, #1
 800540a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800540c:	4b30      	ldr	r3, [pc, #192]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 800540e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005410:	4b31      	ldr	r3, [pc, #196]	; (80054d8 <HAL_RCC_OscConfig+0x76c>)
 8005412:	4013      	ands	r3, r2
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005418:	00d2      	lsls	r2, r2, #3
 800541a:	492d      	ldr	r1, [pc, #180]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 800541c:	4313      	orrs	r3, r2
 800541e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005420:	4b2b      	ldr	r3, [pc, #172]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	f023 020c 	bic.w	r2, r3, #12
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	4928      	ldr	r1, [pc, #160]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 800542e:	4313      	orrs	r3, r2
 8005430:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005432:	4b27      	ldr	r3, [pc, #156]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005436:	f023 0202 	bic.w	r2, r3, #2
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543e:	4924      	ldr	r1, [pc, #144]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005440:	4313      	orrs	r3, r2
 8005442:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005444:	4b22      	ldr	r3, [pc, #136]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	4a21      	ldr	r2, [pc, #132]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 800544a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800544e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005450:	4b1f      	ldr	r3, [pc, #124]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	4a1e      	ldr	r2, [pc, #120]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800545a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800545c:	4b1c      	ldr	r3, [pc, #112]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005460:	4a1b      	ldr	r2, [pc, #108]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005462:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005466:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005468:	4b19      	ldr	r3, [pc, #100]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	4a18      	ldr	r2, [pc, #96]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 800546e:	f043 0301 	orr.w	r3, r3, #1
 8005472:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005474:	4b16      	ldr	r3, [pc, #88]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a15      	ldr	r2, [pc, #84]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 800547a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800547e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fc fe7e 	bl	8002180 <HAL_GetTick>
 8005484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005488:	f7fc fe7a 	bl	8002180 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e091      	b.n	80055be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800549a:	4b0d      	ldr	r3, [pc, #52]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f0      	beq.n	8005488 <HAL_RCC_OscConfig+0x71c>
 80054a6:	e089      	b.n	80055bc <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054a8:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a08      	ldr	r2, [pc, #32]	; (80054d0 <HAL_RCC_OscConfig+0x764>)
 80054ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b4:	f7fc fe64 	bl	8002180 <HAL_GetTick>
 80054b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054ba:	e00f      	b.n	80054dc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054bc:	f7fc fe60 	bl	8002180 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d908      	bls.n	80054dc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e077      	b.n	80055be <HAL_RCC_OscConfig+0x852>
 80054ce:	bf00      	nop
 80054d0:	58024400 	.word	0x58024400
 80054d4:	fffffc0c 	.word	0xfffffc0c
 80054d8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054dc:	4b3a      	ldr	r3, [pc, #232]	; (80055c8 <HAL_RCC_OscConfig+0x85c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1e9      	bne.n	80054bc <HAL_RCC_OscConfig+0x750>
 80054e8:	e068      	b.n	80055bc <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80054ea:	4b37      	ldr	r3, [pc, #220]	; (80055c8 <HAL_RCC_OscConfig+0x85c>)
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ee:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80054f0:	4b35      	ldr	r3, [pc, #212]	; (80055c8 <HAL_RCC_OscConfig+0x85c>)
 80054f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d031      	beq.n	8005562 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f003 0203 	and.w	r2, r3, #3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005508:	429a      	cmp	r2, r3
 800550a:	d12a      	bne.n	8005562 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	091b      	lsrs	r3, r3, #4
 8005510:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005518:	429a      	cmp	r2, r3
 800551a:	d122      	bne.n	8005562 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005528:	429a      	cmp	r2, r3
 800552a:	d11a      	bne.n	8005562 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	0a5b      	lsrs	r3, r3, #9
 8005530:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005538:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800553a:	429a      	cmp	r2, r3
 800553c:	d111      	bne.n	8005562 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	0c1b      	lsrs	r3, r3, #16
 8005542:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800554c:	429a      	cmp	r2, r3
 800554e:	d108      	bne.n	8005562 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	0e1b      	lsrs	r3, r3, #24
 8005554:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800555e:	429a      	cmp	r2, r3
 8005560:	d001      	beq.n	8005566 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e02b      	b.n	80055be <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005566:	4b18      	ldr	r3, [pc, #96]	; (80055c8 <HAL_RCC_OscConfig+0x85c>)
 8005568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556a:	08db      	lsrs	r3, r3, #3
 800556c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005570:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	429a      	cmp	r2, r3
 800557a:	d01f      	beq.n	80055bc <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800557c:	4b12      	ldr	r3, [pc, #72]	; (80055c8 <HAL_RCC_OscConfig+0x85c>)
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	4a11      	ldr	r2, [pc, #68]	; (80055c8 <HAL_RCC_OscConfig+0x85c>)
 8005582:	f023 0301 	bic.w	r3, r3, #1
 8005586:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005588:	f7fc fdfa 	bl	8002180 <HAL_GetTick>
 800558c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800558e:	bf00      	nop
 8005590:	f7fc fdf6 	bl	8002180 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	4293      	cmp	r3, r2
 800559a:	d0f9      	beq.n	8005590 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800559c:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <HAL_RCC_OscConfig+0x85c>)
 800559e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055a0:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <HAL_RCC_OscConfig+0x860>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80055a8:	00d2      	lsls	r2, r2, #3
 80055aa:	4907      	ldr	r1, [pc, #28]	; (80055c8 <HAL_RCC_OscConfig+0x85c>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80055b0:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <HAL_RCC_OscConfig+0x85c>)
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	4a04      	ldr	r2, [pc, #16]	; (80055c8 <HAL_RCC_OscConfig+0x85c>)
 80055b6:	f043 0301 	orr.w	r3, r3, #1
 80055ba:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3730      	adds	r7, #48	; 0x30
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	58024400 	.word	0x58024400
 80055cc:	ffff0007 	.word	0xffff0007

080055d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e19c      	b.n	800591e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055e4:	4b8a      	ldr	r3, [pc, #552]	; (8005810 <HAL_RCC_ClockConfig+0x240>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d910      	bls.n	8005614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f2:	4b87      	ldr	r3, [pc, #540]	; (8005810 <HAL_RCC_ClockConfig+0x240>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f023 020f 	bic.w	r2, r3, #15
 80055fa:	4985      	ldr	r1, [pc, #532]	; (8005810 <HAL_RCC_ClockConfig+0x240>)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	4313      	orrs	r3, r2
 8005600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005602:	4b83      	ldr	r3, [pc, #524]	; (8005810 <HAL_RCC_ClockConfig+0x240>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d001      	beq.n	8005614 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e184      	b.n	800591e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b00      	cmp	r3, #0
 800561e:	d010      	beq.n	8005642 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	4b7b      	ldr	r3, [pc, #492]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800562c:	429a      	cmp	r2, r3
 800562e:	d908      	bls.n	8005642 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005630:	4b78      	ldr	r3, [pc, #480]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	4975      	ldr	r1, [pc, #468]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 800563e:	4313      	orrs	r3, r2
 8005640:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d010      	beq.n	8005670 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	695a      	ldr	r2, [r3, #20]
 8005652:	4b70      	ldr	r3, [pc, #448]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800565a:	429a      	cmp	r2, r3
 800565c:	d908      	bls.n	8005670 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800565e:	4b6d      	ldr	r3, [pc, #436]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	496a      	ldr	r1, [pc, #424]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 800566c:	4313      	orrs	r3, r2
 800566e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0310 	and.w	r3, r3, #16
 8005678:	2b00      	cmp	r3, #0
 800567a:	d010      	beq.n	800569e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	699a      	ldr	r2, [r3, #24]
 8005680:	4b64      	ldr	r3, [pc, #400]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005688:	429a      	cmp	r2, r3
 800568a:	d908      	bls.n	800569e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800568c:	4b61      	ldr	r3, [pc, #388]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	495e      	ldr	r1, [pc, #376]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 800569a:	4313      	orrs	r3, r2
 800569c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d010      	beq.n	80056cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69da      	ldr	r2, [r3, #28]
 80056ae:	4b59      	ldr	r3, [pc, #356]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d908      	bls.n	80056cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80056ba:	4b56      	ldr	r3, [pc, #344]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	4953      	ldr	r1, [pc, #332]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d010      	beq.n	80056fa <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	4b4d      	ldr	r3, [pc, #308]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	f003 030f 	and.w	r3, r3, #15
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d908      	bls.n	80056fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056e8:	4b4a      	ldr	r3, [pc, #296]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	f023 020f 	bic.w	r2, r3, #15
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	4947      	ldr	r1, [pc, #284]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d055      	beq.n	80057b2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005706:	4b43      	ldr	r3, [pc, #268]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	4940      	ldr	r1, [pc, #256]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 8005714:	4313      	orrs	r3, r2
 8005716:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	2b02      	cmp	r3, #2
 800571e:	d107      	bne.n	8005730 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005720:	4b3c      	ldr	r3, [pc, #240]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d121      	bne.n	8005770 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e0f6      	b.n	800591e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2b03      	cmp	r3, #3
 8005736:	d107      	bne.n	8005748 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005738:	4b36      	ldr	r3, [pc, #216]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d115      	bne.n	8005770 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e0ea      	b.n	800591e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d107      	bne.n	8005760 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005750:	4b30      	ldr	r3, [pc, #192]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d109      	bne.n	8005770 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e0de      	b.n	800591e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005760:	4b2c      	ldr	r3, [pc, #176]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e0d6      	b.n	800591e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005770:	4b28      	ldr	r3, [pc, #160]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	f023 0207 	bic.w	r2, r3, #7
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	4925      	ldr	r1, [pc, #148]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 800577e:	4313      	orrs	r3, r2
 8005780:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005782:	f7fc fcfd 	bl	8002180 <HAL_GetTick>
 8005786:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005788:	e00a      	b.n	80057a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800578a:	f7fc fcf9 	bl	8002180 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	f241 3288 	movw	r2, #5000	; 0x1388
 8005798:	4293      	cmp	r3, r2
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e0be      	b.n	800591e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a0:	4b1c      	ldr	r3, [pc, #112]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d1eb      	bne.n	800578a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d010      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	4b14      	ldr	r3, [pc, #80]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	f003 030f 	and.w	r3, r3, #15
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d208      	bcs.n	80057e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057ce:	4b11      	ldr	r3, [pc, #68]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	f023 020f 	bic.w	r2, r3, #15
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	490e      	ldr	r1, [pc, #56]	; (8005814 <HAL_RCC_ClockConfig+0x244>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057e0:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <HAL_RCC_ClockConfig+0x240>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d214      	bcs.n	8005818 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ee:	4b08      	ldr	r3, [pc, #32]	; (8005810 <HAL_RCC_ClockConfig+0x240>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f023 020f 	bic.w	r2, r3, #15
 80057f6:	4906      	ldr	r1, [pc, #24]	; (8005810 <HAL_RCC_ClockConfig+0x240>)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057fe:	4b04      	ldr	r3, [pc, #16]	; (8005810 <HAL_RCC_ClockConfig+0x240>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d005      	beq.n	8005818 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e086      	b.n	800591e <HAL_RCC_ClockConfig+0x34e>
 8005810:	52002000 	.word	0x52002000
 8005814:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	d010      	beq.n	8005846 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	4b3f      	ldr	r3, [pc, #252]	; (8005928 <HAL_RCC_ClockConfig+0x358>)
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005830:	429a      	cmp	r2, r3
 8005832:	d208      	bcs.n	8005846 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005834:	4b3c      	ldr	r3, [pc, #240]	; (8005928 <HAL_RCC_ClockConfig+0x358>)
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	4939      	ldr	r1, [pc, #228]	; (8005928 <HAL_RCC_ClockConfig+0x358>)
 8005842:	4313      	orrs	r3, r2
 8005844:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0308 	and.w	r3, r3, #8
 800584e:	2b00      	cmp	r3, #0
 8005850:	d010      	beq.n	8005874 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	695a      	ldr	r2, [r3, #20]
 8005856:	4b34      	ldr	r3, [pc, #208]	; (8005928 <HAL_RCC_ClockConfig+0x358>)
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800585e:	429a      	cmp	r2, r3
 8005860:	d208      	bcs.n	8005874 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005862:	4b31      	ldr	r3, [pc, #196]	; (8005928 <HAL_RCC_ClockConfig+0x358>)
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	492e      	ldr	r1, [pc, #184]	; (8005928 <HAL_RCC_ClockConfig+0x358>)
 8005870:	4313      	orrs	r3, r2
 8005872:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b00      	cmp	r3, #0
 800587e:	d010      	beq.n	80058a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	699a      	ldr	r2, [r3, #24]
 8005884:	4b28      	ldr	r3, [pc, #160]	; (8005928 <HAL_RCC_ClockConfig+0x358>)
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800588c:	429a      	cmp	r2, r3
 800588e:	d208      	bcs.n	80058a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005890:	4b25      	ldr	r3, [pc, #148]	; (8005928 <HAL_RCC_ClockConfig+0x358>)
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	4922      	ldr	r1, [pc, #136]	; (8005928 <HAL_RCC_ClockConfig+0x358>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0320 	and.w	r3, r3, #32
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d010      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69da      	ldr	r2, [r3, #28]
 80058b2:	4b1d      	ldr	r3, [pc, #116]	; (8005928 <HAL_RCC_ClockConfig+0x358>)
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d208      	bcs.n	80058d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80058be:	4b1a      	ldr	r3, [pc, #104]	; (8005928 <HAL_RCC_ClockConfig+0x358>)
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	4917      	ldr	r1, [pc, #92]	; (8005928 <HAL_RCC_ClockConfig+0x358>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80058d0:	f000 f834 	bl	800593c <HAL_RCC_GetSysClockFreq>
 80058d4:	4602      	mov	r2, r0
 80058d6:	4b14      	ldr	r3, [pc, #80]	; (8005928 <HAL_RCC_ClockConfig+0x358>)
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	0a1b      	lsrs	r3, r3, #8
 80058dc:	f003 030f 	and.w	r3, r3, #15
 80058e0:	4912      	ldr	r1, [pc, #72]	; (800592c <HAL_RCC_ClockConfig+0x35c>)
 80058e2:	5ccb      	ldrb	r3, [r1, r3]
 80058e4:	f003 031f 	and.w	r3, r3, #31
 80058e8:	fa22 f303 	lsr.w	r3, r2, r3
 80058ec:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80058ee:	4b0e      	ldr	r3, [pc, #56]	; (8005928 <HAL_RCC_ClockConfig+0x358>)
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	4a0d      	ldr	r2, [pc, #52]	; (800592c <HAL_RCC_ClockConfig+0x35c>)
 80058f8:	5cd3      	ldrb	r3, [r2, r3]
 80058fa:	f003 031f 	and.w	r3, r3, #31
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	fa22 f303 	lsr.w	r3, r2, r3
 8005904:	4a0a      	ldr	r2, [pc, #40]	; (8005930 <HAL_RCC_ClockConfig+0x360>)
 8005906:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005908:	4a0a      	ldr	r2, [pc, #40]	; (8005934 <HAL_RCC_ClockConfig+0x364>)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800590e:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <HAL_RCC_ClockConfig+0x368>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4618      	mov	r0, r3
 8005914:	f7fc fbea 	bl	80020ec <HAL_InitTick>
 8005918:	4603      	mov	r3, r0
 800591a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800591c:	7bfb      	ldrb	r3, [r7, #15]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3718      	adds	r7, #24
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	58024400 	.word	0x58024400
 800592c:	0800d49c 	.word	0x0800d49c
 8005930:	2400002c 	.word	0x2400002c
 8005934:	24000028 	.word	0x24000028
 8005938:	24000030 	.word	0x24000030

0800593c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800593c:	b480      	push	{r7}
 800593e:	b089      	sub	sp, #36	; 0x24
 8005940:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005942:	4bb3      	ldr	r3, [pc, #716]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800594a:	2b18      	cmp	r3, #24
 800594c:	f200 8155 	bhi.w	8005bfa <HAL_RCC_GetSysClockFreq+0x2be>
 8005950:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005956:	bf00      	nop
 8005958:	080059bd 	.word	0x080059bd
 800595c:	08005bfb 	.word	0x08005bfb
 8005960:	08005bfb 	.word	0x08005bfb
 8005964:	08005bfb 	.word	0x08005bfb
 8005968:	08005bfb 	.word	0x08005bfb
 800596c:	08005bfb 	.word	0x08005bfb
 8005970:	08005bfb 	.word	0x08005bfb
 8005974:	08005bfb 	.word	0x08005bfb
 8005978:	080059e3 	.word	0x080059e3
 800597c:	08005bfb 	.word	0x08005bfb
 8005980:	08005bfb 	.word	0x08005bfb
 8005984:	08005bfb 	.word	0x08005bfb
 8005988:	08005bfb 	.word	0x08005bfb
 800598c:	08005bfb 	.word	0x08005bfb
 8005990:	08005bfb 	.word	0x08005bfb
 8005994:	08005bfb 	.word	0x08005bfb
 8005998:	080059e9 	.word	0x080059e9
 800599c:	08005bfb 	.word	0x08005bfb
 80059a0:	08005bfb 	.word	0x08005bfb
 80059a4:	08005bfb 	.word	0x08005bfb
 80059a8:	08005bfb 	.word	0x08005bfb
 80059ac:	08005bfb 	.word	0x08005bfb
 80059b0:	08005bfb 	.word	0x08005bfb
 80059b4:	08005bfb 	.word	0x08005bfb
 80059b8:	080059ef 	.word	0x080059ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059bc:	4b94      	ldr	r3, [pc, #592]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0320 	and.w	r3, r3, #32
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d009      	beq.n	80059dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059c8:	4b91      	ldr	r3, [pc, #580]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	08db      	lsrs	r3, r3, #3
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	4a90      	ldr	r2, [pc, #576]	; (8005c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059d4:	fa22 f303 	lsr.w	r3, r2, r3
 80059d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80059da:	e111      	b.n	8005c00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80059dc:	4b8d      	ldr	r3, [pc, #564]	; (8005c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059de:	61bb      	str	r3, [r7, #24]
      break;
 80059e0:	e10e      	b.n	8005c00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80059e2:	4b8d      	ldr	r3, [pc, #564]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059e4:	61bb      	str	r3, [r7, #24]
      break;
 80059e6:	e10b      	b.n	8005c00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80059e8:	4b8c      	ldr	r3, [pc, #560]	; (8005c1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80059ea:	61bb      	str	r3, [r7, #24]
      break;
 80059ec:	e108      	b.n	8005c00 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059ee:	4b88      	ldr	r3, [pc, #544]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80059f8:	4b85      	ldr	r3, [pc, #532]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fc:	091b      	lsrs	r3, r3, #4
 80059fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a02:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005a04:	4b82      	ldr	r3, [pc, #520]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005a0e:	4b80      	ldr	r3, [pc, #512]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a12:	08db      	lsrs	r3, r3, #3
 8005a14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	fb02 f303 	mul.w	r3, r2, r3
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a26:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 80e1 	beq.w	8005bf4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	f000 8083 	beq.w	8005b40 <HAL_RCC_GetSysClockFreq+0x204>
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	f200 80a1 	bhi.w	8005b84 <HAL_RCC_GetSysClockFreq+0x248>
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <HAL_RCC_GetSysClockFreq+0x114>
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d056      	beq.n	8005afc <HAL_RCC_GetSysClockFreq+0x1c0>
 8005a4e:	e099      	b.n	8005b84 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a50:	4b6f      	ldr	r3, [pc, #444]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0320 	and.w	r3, r3, #32
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d02d      	beq.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a5c:	4b6c      	ldr	r3, [pc, #432]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	08db      	lsrs	r3, r3, #3
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	4a6b      	ldr	r2, [pc, #428]	; (8005c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a68:	fa22 f303 	lsr.w	r3, r2, r3
 8005a6c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	ee07 3a90 	vmov	s15, r3
 8005a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a86:	4b62      	ldr	r3, [pc, #392]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a8e:	ee07 3a90 	vmov	s15, r3
 8005a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a9a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005ab6:	e087      	b.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005c24 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aca:	4b51      	ldr	r3, [pc, #324]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ade:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005afa:	e065      	b.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b06:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005c28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b0e:	4b40      	ldr	r3, [pc, #256]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b16:	ee07 3a90 	vmov	s15, r3
 8005b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b22:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b3e:	e043      	b.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	ee07 3a90 	vmov	s15, r3
 8005b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005c2c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b52:	4b2f      	ldr	r3, [pc, #188]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b5a:	ee07 3a90 	vmov	s15, r3
 8005b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b62:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b66:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b82:	e021      	b.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	ee07 3a90 	vmov	s15, r3
 8005b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b8e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005c28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b96:	4b1e      	ldr	r3, [pc, #120]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b9e:	ee07 3a90 	vmov	s15, r3
 8005ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005baa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bc6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005bc8:	4b11      	ldr	r3, [pc, #68]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bcc:	0a5b      	lsrs	r3, r3, #9
 8005bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	ee07 3a90 	vmov	s15, r3
 8005bdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bec:	ee17 3a90 	vmov	r3, s15
 8005bf0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005bf2:	e005      	b.n	8005c00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	61bb      	str	r3, [r7, #24]
      break;
 8005bf8:	e002      	b.n	8005c00 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005bfa:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005bfc:	61bb      	str	r3, [r7, #24]
      break;
 8005bfe:	bf00      	nop
  }

  return sysclockfreq;
 8005c00:	69bb      	ldr	r3, [r7, #24]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3724      	adds	r7, #36	; 0x24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	58024400 	.word	0x58024400
 8005c14:	03d09000 	.word	0x03d09000
 8005c18:	003d0900 	.word	0x003d0900
 8005c1c:	007a1200 	.word	0x007a1200
 8005c20:	46000000 	.word	0x46000000
 8005c24:	4c742400 	.word	0x4c742400
 8005c28:	4a742400 	.word	0x4a742400
 8005c2c:	4af42400 	.word	0x4af42400

08005c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005c36:	f7ff fe81 	bl	800593c <HAL_RCC_GetSysClockFreq>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <HAL_RCC_GetHCLKFreq+0x50>)
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	0a1b      	lsrs	r3, r3, #8
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	490f      	ldr	r1, [pc, #60]	; (8005c84 <HAL_RCC_GetHCLKFreq+0x54>)
 8005c48:	5ccb      	ldrb	r3, [r1, r3]
 8005c4a:	f003 031f 	and.w	r3, r3, #31
 8005c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c52:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005c54:	4b0a      	ldr	r3, [pc, #40]	; (8005c80 <HAL_RCC_GetHCLKFreq+0x50>)
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	f003 030f 	and.w	r3, r3, #15
 8005c5c:	4a09      	ldr	r2, [pc, #36]	; (8005c84 <HAL_RCC_GetHCLKFreq+0x54>)
 8005c5e:	5cd3      	ldrb	r3, [r2, r3]
 8005c60:	f003 031f 	and.w	r3, r3, #31
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6a:	4a07      	ldr	r2, [pc, #28]	; (8005c88 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c6e:	4a07      	ldr	r2, [pc, #28]	; (8005c8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005c74:	4b04      	ldr	r3, [pc, #16]	; (8005c88 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c76:	681b      	ldr	r3, [r3, #0]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	58024400 	.word	0x58024400
 8005c84:	0800d49c 	.word	0x0800d49c
 8005c88:	2400002c 	.word	0x2400002c
 8005c8c:	24000028 	.word	0x24000028

08005c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005c94:	f7ff ffcc 	bl	8005c30 <HAL_RCC_GetHCLKFreq>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	4b06      	ldr	r3, [pc, #24]	; (8005cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	091b      	lsrs	r3, r3, #4
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	4904      	ldr	r1, [pc, #16]	; (8005cb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ca6:	5ccb      	ldrb	r3, [r1, r3]
 8005ca8:	f003 031f 	and.w	r3, r3, #31
 8005cac:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	58024400 	.word	0x58024400
 8005cb8:	0800d49c 	.word	0x0800d49c

08005cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005cc0:	f7ff ffb6 	bl	8005c30 <HAL_RCC_GetHCLKFreq>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	0a1b      	lsrs	r3, r3, #8
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	4904      	ldr	r1, [pc, #16]	; (8005ce4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005cd2:	5ccb      	ldrb	r3, [r1, r3]
 8005cd4:	f003 031f 	and.w	r3, r3, #31
 8005cd8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	58024400 	.word	0x58024400
 8005ce4:	0800d49c 	.word	0x0800d49c

08005ce8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cec:	b0c8      	sub	sp, #288	; 0x120
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d08:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005d0c:	2500      	movs	r5, #0
 8005d0e:	ea54 0305 	orrs.w	r3, r4, r5
 8005d12:	d049      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d1e:	d02f      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005d20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d24:	d828      	bhi.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d2a:	d01a      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d30:	d822      	bhi.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d3a:	d007      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d3c:	e01c      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d3e:	4ba7      	ldr	r3, [pc, #668]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d42:	4aa6      	ldr	r2, [pc, #664]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d4a:	e01a      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d50:	3308      	adds	r3, #8
 8005d52:	2102      	movs	r1, #2
 8005d54:	4618      	mov	r0, r3
 8005d56:	f001 fc43 	bl	80075e0 <RCCEx_PLL2_Config>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d60:	e00f      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d66:	3328      	adds	r3, #40	; 0x28
 8005d68:	2102      	movs	r1, #2
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f001 fcea 	bl	8007744 <RCCEx_PLL3_Config>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d76:	e004      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005d7e:	e000      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10a      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005d8a:	4b94      	ldr	r3, [pc, #592]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d8e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d98:	4a90      	ldr	r2, [pc, #576]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d9a:	430b      	orrs	r3, r1
 8005d9c:	6513      	str	r3, [r2, #80]	; 0x50
 8005d9e:	e003      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005da4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005db4:	f04f 0900 	mov.w	r9, #0
 8005db8:	ea58 0309 	orrs.w	r3, r8, r9
 8005dbc:	d047      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	d82a      	bhi.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005dc8:	a201      	add	r2, pc, #4	; (adr r2, 8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dce:	bf00      	nop
 8005dd0:	08005de5 	.word	0x08005de5
 8005dd4:	08005df3 	.word	0x08005df3
 8005dd8:	08005e09 	.word	0x08005e09
 8005ddc:	08005e27 	.word	0x08005e27
 8005de0:	08005e27 	.word	0x08005e27
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005de4:	4b7d      	ldr	r3, [pc, #500]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	4a7c      	ldr	r2, [pc, #496]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005df0:	e01a      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df6:	3308      	adds	r3, #8
 8005df8:	2100      	movs	r1, #0
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f001 fbf0 	bl	80075e0 <RCCEx_PLL2_Config>
 8005e00:	4603      	mov	r3, r0
 8005e02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e06:	e00f      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e0c:	3328      	adds	r3, #40	; 0x28
 8005e0e:	2100      	movs	r1, #0
 8005e10:	4618      	mov	r0, r3
 8005e12:	f001 fc97 	bl	8007744 <RCCEx_PLL3_Config>
 8005e16:	4603      	mov	r3, r0
 8005e18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e1c:	e004      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005e24:	e000      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10a      	bne.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e30:	4b6a      	ldr	r3, [pc, #424]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e34:	f023 0107 	bic.w	r1, r3, #7
 8005e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e3e:	4a67      	ldr	r2, [pc, #412]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e40:	430b      	orrs	r3, r1
 8005e42:	6513      	str	r3, [r2, #80]	; 0x50
 8005e44:	e003      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e56:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005e5a:	f04f 0b00 	mov.w	fp, #0
 8005e5e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005e62:	d054      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e6a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005e6e:	d036      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005e70:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005e74:	d82f      	bhi.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e7a:	d032      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e80:	d829      	bhi.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005e82:	2bc0      	cmp	r3, #192	; 0xc0
 8005e84:	d02f      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8005e86:	2bc0      	cmp	r3, #192	; 0xc0
 8005e88:	d825      	bhi.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005e8a:	2b80      	cmp	r3, #128	; 0x80
 8005e8c:	d018      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005e8e:	2b80      	cmp	r3, #128	; 0x80
 8005e90:	d821      	bhi.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005e96:	2b40      	cmp	r3, #64	; 0x40
 8005e98:	d007      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005e9a:	e01c      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e9c:	4b4f      	ldr	r3, [pc, #316]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	4a4e      	ldr	r2, [pc, #312]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005ea8:	e01e      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eae:	3308      	adds	r3, #8
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f001 fb94 	bl	80075e0 <RCCEx_PLL2_Config>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005ebe:	e013      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ec4:	3328      	adds	r3, #40	; 0x28
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f001 fc3b 	bl	8007744 <RCCEx_PLL3_Config>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005ed4:	e008      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005edc:	e004      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005ede:	bf00      	nop
 8005ee0:	e002      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005ee2:	bf00      	nop
 8005ee4:	e000      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005ef0:	4b3a      	ldr	r3, [pc, #232]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efe:	4a37      	ldr	r2, [pc, #220]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f00:	430b      	orrs	r3, r1
 8005f02:	6513      	str	r3, [r2, #80]	; 0x50
 8005f04:	e003      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f0a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005f1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f1e:	2300      	movs	r3, #0
 8005f20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f24:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005f28:	460b      	mov	r3, r1
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	d05c      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f34:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005f38:	d03b      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005f3a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005f3e:	d834      	bhi.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f44:	d037      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f4a:	d82e      	bhi.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005f4c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f50:	d033      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005f52:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f56:	d828      	bhi.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f5c:	d01a      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f62:	d822      	bhi.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f6c:	d007      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005f6e:	e01c      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f70:	4b1a      	ldr	r3, [pc, #104]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	4a19      	ldr	r2, [pc, #100]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005f7c:	e01e      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f82:	3308      	adds	r3, #8
 8005f84:	2100      	movs	r1, #0
 8005f86:	4618      	mov	r0, r3
 8005f88:	f001 fb2a 	bl	80075e0 <RCCEx_PLL2_Config>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005f92:	e013      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f98:	3328      	adds	r3, #40	; 0x28
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f001 fbd1 	bl	8007744 <RCCEx_PLL3_Config>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005fa8:	e008      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005fb0:	e004      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005fb2:	bf00      	nop
 8005fb4:	e002      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005fb6:	bf00      	nop
 8005fb8:	e000      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10d      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005fc4:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd2:	4a02      	ldr	r2, [pc, #8]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	6513      	str	r3, [r2, #80]	; 0x50
 8005fd8:	e006      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005fda:	bf00      	nop
 8005fdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fe4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005ff4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ffe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006002:	460b      	mov	r3, r1
 8006004:	4313      	orrs	r3, r2
 8006006:	d03a      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800600c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800600e:	2b30      	cmp	r3, #48	; 0x30
 8006010:	d01f      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006012:	2b30      	cmp	r3, #48	; 0x30
 8006014:	d819      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006016:	2b20      	cmp	r3, #32
 8006018:	d00c      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800601a:	2b20      	cmp	r3, #32
 800601c:	d815      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d019      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006022:	2b10      	cmp	r3, #16
 8006024:	d111      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006026:	4bae      	ldr	r3, [pc, #696]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602a:	4aad      	ldr	r2, [pc, #692]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800602c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006030:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006032:	e011      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006038:	3308      	adds	r3, #8
 800603a:	2102      	movs	r1, #2
 800603c:	4618      	mov	r0, r3
 800603e:	f001 facf 	bl	80075e0 <RCCEx_PLL2_Config>
 8006042:	4603      	mov	r3, r0
 8006044:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006048:	e006      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006050:	e002      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006052:	bf00      	nop
 8006054:	e000      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8006056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006058:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10a      	bne.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006060:	4b9f      	ldr	r3, [pc, #636]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006064:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006068:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800606c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800606e:	4a9c      	ldr	r2, [pc, #624]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006070:	430b      	orrs	r3, r1
 8006072:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006074:	e003      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006076:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800607a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800607e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800608a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800608e:	2300      	movs	r3, #0
 8006090:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006094:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006098:	460b      	mov	r3, r1
 800609a:	4313      	orrs	r3, r2
 800609c:	d051      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800609e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060a8:	d035      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80060aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060ae:	d82e      	bhi.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80060b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060b4:	d031      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80060b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060ba:	d828      	bhi.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80060bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c0:	d01a      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80060c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c6:	d822      	bhi.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80060cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d0:	d007      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80060d2:	e01c      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d4:	4b82      	ldr	r3, [pc, #520]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	4a81      	ldr	r2, [pc, #516]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060e0:	e01c      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060e6:	3308      	adds	r3, #8
 80060e8:	2100      	movs	r1, #0
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 fa78 	bl	80075e0 <RCCEx_PLL2_Config>
 80060f0:	4603      	mov	r3, r0
 80060f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060f6:	e011      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060fc:	3328      	adds	r3, #40	; 0x28
 80060fe:	2100      	movs	r1, #0
 8006100:	4618      	mov	r0, r3
 8006102:	f001 fb1f 	bl	8007744 <RCCEx_PLL3_Config>
 8006106:	4603      	mov	r3, r0
 8006108:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800610c:	e006      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006114:	e002      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8006116:	bf00      	nop
 8006118:	e000      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800611a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800611c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006124:	4b6e      	ldr	r3, [pc, #440]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006128:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800612c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006132:	4a6b      	ldr	r2, [pc, #428]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006134:	430b      	orrs	r3, r1
 8006136:	6513      	str	r3, [r2, #80]	; 0x50
 8006138:	e003      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800613e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800614e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006152:	2300      	movs	r3, #0
 8006154:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006158:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800615c:	460b      	mov	r3, r1
 800615e:	4313      	orrs	r3, r2
 8006160:	d053      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006162:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800616c:	d033      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800616e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006172:	d82c      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006174:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006178:	d02f      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800617a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800617e:	d826      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006180:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006184:	d02b      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006186:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800618a:	d820      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800618c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006190:	d012      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006192:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006196:	d81a      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d022      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800619c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061a0:	d115      	bne.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061a6:	3308      	adds	r3, #8
 80061a8:	2101      	movs	r1, #1
 80061aa:	4618      	mov	r0, r3
 80061ac:	f001 fa18 	bl	80075e0 <RCCEx_PLL2_Config>
 80061b0:	4603      	mov	r3, r0
 80061b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80061b6:	e015      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061bc:	3328      	adds	r3, #40	; 0x28
 80061be:	2101      	movs	r1, #1
 80061c0:	4618      	mov	r0, r3
 80061c2:	f001 fabf 	bl	8007744 <RCCEx_PLL3_Config>
 80061c6:	4603      	mov	r3, r0
 80061c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80061cc:	e00a      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80061d4:	e006      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80061d6:	bf00      	nop
 80061d8:	e004      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80061da:	bf00      	nop
 80061dc:	e002      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80061de:	bf00      	nop
 80061e0:	e000      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80061e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80061ec:	4b3c      	ldr	r3, [pc, #240]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80061f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061fa:	4a39      	ldr	r2, [pc, #228]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061fc:	430b      	orrs	r3, r1
 80061fe:	6513      	str	r3, [r2, #80]	; 0x50
 8006200:	e003      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006202:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006206:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800620a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800620e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006212:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006216:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800621a:	2300      	movs	r3, #0
 800621c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006220:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006224:	460b      	mov	r3, r1
 8006226:	4313      	orrs	r3, r2
 8006228:	d060      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800622a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800622e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006232:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006236:	d039      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8006238:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800623c:	d832      	bhi.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800623e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006242:	d035      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006244:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006248:	d82c      	bhi.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800624a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800624e:	d031      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006254:	d826      	bhi.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006256:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800625a:	d02d      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800625c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006260:	d820      	bhi.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006262:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006266:	d012      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800626c:	d81a      	bhi.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800626e:	2b00      	cmp	r3, #0
 8006270:	d024      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006272:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006276:	d115      	bne.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800627c:	3308      	adds	r3, #8
 800627e:	2101      	movs	r1, #1
 8006280:	4618      	mov	r0, r3
 8006282:	f001 f9ad 	bl	80075e0 <RCCEx_PLL2_Config>
 8006286:	4603      	mov	r3, r0
 8006288:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800628c:	e017      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800628e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006292:	3328      	adds	r3, #40	; 0x28
 8006294:	2101      	movs	r1, #1
 8006296:	4618      	mov	r0, r3
 8006298:	f001 fa54 	bl	8007744 <RCCEx_PLL3_Config>
 800629c:	4603      	mov	r3, r0
 800629e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80062a2:	e00c      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80062aa:	e008      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80062ac:	bf00      	nop
 80062ae:	e006      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80062b0:	bf00      	nop
 80062b2:	e004      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80062b4:	bf00      	nop
 80062b6:	e002      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80062b8:	bf00      	nop
 80062ba:	e000      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80062bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10e      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80062c6:	4b06      	ldr	r3, [pc, #24]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ca:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80062ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062d6:	4a02      	ldr	r2, [pc, #8]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80062d8:	430b      	orrs	r3, r1
 80062da:	6593      	str	r3, [r2, #88]	; 0x58
 80062dc:	e006      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x604>
 80062de:	bf00      	nop
 80062e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80062ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80062f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062fc:	2300      	movs	r3, #0
 80062fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006302:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006306:	460b      	mov	r3, r1
 8006308:	4313      	orrs	r3, r2
 800630a:	d037      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800630c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006312:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006316:	d00e      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800631c:	d816      	bhi.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d018      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006322:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006326:	d111      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006328:	4bc4      	ldr	r3, [pc, #784]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632c:	4ac3      	ldr	r2, [pc, #780]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800632e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006332:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006334:	e00f      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800633a:	3308      	adds	r3, #8
 800633c:	2101      	movs	r1, #1
 800633e:	4618      	mov	r0, r3
 8006340:	f001 f94e 	bl	80075e0 <RCCEx_PLL2_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800634a:	e004      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006352:	e000      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006356:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10a      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800635e:	4bb7      	ldr	r3, [pc, #732]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006362:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800636a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800636c:	4ab3      	ldr	r2, [pc, #716]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800636e:	430b      	orrs	r3, r1
 8006370:	6513      	str	r3, [r2, #80]	; 0x50
 8006372:	e003      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006374:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006378:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800637c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006384:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800638c:	2300      	movs	r3, #0
 800638e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006392:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006396:	460b      	mov	r3, r1
 8006398:	4313      	orrs	r3, r2
 800639a:	d039      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800639c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d81c      	bhi.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80063a6:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80063a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ac:	080063e9 	.word	0x080063e9
 80063b0:	080063bd 	.word	0x080063bd
 80063b4:	080063cb 	.word	0x080063cb
 80063b8:	080063e9 	.word	0x080063e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063bc:	4b9f      	ldr	r3, [pc, #636]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c0:	4a9e      	ldr	r2, [pc, #632]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80063c8:	e00f      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ce:	3308      	adds	r3, #8
 80063d0:	2102      	movs	r1, #2
 80063d2:	4618      	mov	r0, r3
 80063d4:	f001 f904 	bl	80075e0 <RCCEx_PLL2_Config>
 80063d8:	4603      	mov	r3, r0
 80063da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80063de:	e004      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80063e6:	e000      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80063e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10a      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80063f2:	4b92      	ldr	r3, [pc, #584]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f6:	f023 0103 	bic.w	r1, r3, #3
 80063fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006400:	4a8e      	ldr	r2, [pc, #568]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006402:	430b      	orrs	r3, r1
 8006404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006406:	e003      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006408:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800640c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006418:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800641c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006420:	2300      	movs	r3, #0
 8006422:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006426:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800642a:	460b      	mov	r3, r1
 800642c:	4313      	orrs	r3, r2
 800642e:	f000 8099 	beq.w	8006564 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006432:	4b83      	ldr	r3, [pc, #524]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a82      	ldr	r2, [pc, #520]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800643c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800643e:	f7fb fe9f 	bl	8002180 <HAL_GetTick>
 8006442:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006446:	e00b      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006448:	f7fb fe9a 	bl	8002180 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b64      	cmp	r3, #100	; 0x64
 8006456:	d903      	bls.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800645e:	e005      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006460:	4b77      	ldr	r3, [pc, #476]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0ed      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800646c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006470:	2b00      	cmp	r3, #0
 8006472:	d173      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006474:	4b71      	ldr	r3, [pc, #452]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006476:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800647c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006480:	4053      	eors	r3, r2
 8006482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006486:	2b00      	cmp	r3, #0
 8006488:	d015      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800648a:	4b6c      	ldr	r3, [pc, #432]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800648c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006492:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006496:	4b69      	ldr	r3, [pc, #420]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649a:	4a68      	ldr	r2, [pc, #416]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800649c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064a2:	4b66      	ldr	r3, [pc, #408]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a6:	4a65      	ldr	r2, [pc, #404]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80064ae:	4a63      	ldr	r2, [pc, #396]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80064b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80064be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c2:	d118      	bne.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c4:	f7fb fe5c 	bl	8002180 <HAL_GetTick>
 80064c8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064cc:	e00d      	b.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ce:	f7fb fe57 	bl	8002180 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80064d8:	1ad2      	subs	r2, r2, r3
 80064da:	f241 3388 	movw	r3, #5000	; 0x1388
 80064de:	429a      	cmp	r2, r3
 80064e0:	d903      	bls.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80064e8:	e005      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064ea:	4b54      	ldr	r3, [pc, #336]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0eb      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80064f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d129      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006502:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800650a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800650e:	d10e      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006510:	4b4a      	ldr	r3, [pc, #296]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006518:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800651c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006520:	091a      	lsrs	r2, r3, #4
 8006522:	4b48      	ldr	r3, [pc, #288]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006524:	4013      	ands	r3, r2
 8006526:	4a45      	ldr	r2, [pc, #276]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006528:	430b      	orrs	r3, r1
 800652a:	6113      	str	r3, [r2, #16]
 800652c:	e005      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800652e:	4b43      	ldr	r3, [pc, #268]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	4a42      	ldr	r2, [pc, #264]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006534:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006538:	6113      	str	r3, [r2, #16]
 800653a:	4b40      	ldr	r3, [pc, #256]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800653c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800653e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006542:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800654a:	4a3c      	ldr	r2, [pc, #240]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800654c:	430b      	orrs	r3, r1
 800654e:	6713      	str	r3, [r2, #112]	; 0x70
 8006550:	e008      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006552:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006556:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800655a:	e003      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800655c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006560:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656c:	f002 0301 	and.w	r3, r2, #1
 8006570:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006574:	2300      	movs	r3, #0
 8006576:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800657a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800657e:	460b      	mov	r3, r1
 8006580:	4313      	orrs	r3, r2
 8006582:	f000 8090 	beq.w	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800658a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800658e:	2b28      	cmp	r3, #40	; 0x28
 8006590:	d870      	bhi.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006592:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006598:	0800667d 	.word	0x0800667d
 800659c:	08006675 	.word	0x08006675
 80065a0:	08006675 	.word	0x08006675
 80065a4:	08006675 	.word	0x08006675
 80065a8:	08006675 	.word	0x08006675
 80065ac:	08006675 	.word	0x08006675
 80065b0:	08006675 	.word	0x08006675
 80065b4:	08006675 	.word	0x08006675
 80065b8:	08006649 	.word	0x08006649
 80065bc:	08006675 	.word	0x08006675
 80065c0:	08006675 	.word	0x08006675
 80065c4:	08006675 	.word	0x08006675
 80065c8:	08006675 	.word	0x08006675
 80065cc:	08006675 	.word	0x08006675
 80065d0:	08006675 	.word	0x08006675
 80065d4:	08006675 	.word	0x08006675
 80065d8:	0800665f 	.word	0x0800665f
 80065dc:	08006675 	.word	0x08006675
 80065e0:	08006675 	.word	0x08006675
 80065e4:	08006675 	.word	0x08006675
 80065e8:	08006675 	.word	0x08006675
 80065ec:	08006675 	.word	0x08006675
 80065f0:	08006675 	.word	0x08006675
 80065f4:	08006675 	.word	0x08006675
 80065f8:	0800667d 	.word	0x0800667d
 80065fc:	08006675 	.word	0x08006675
 8006600:	08006675 	.word	0x08006675
 8006604:	08006675 	.word	0x08006675
 8006608:	08006675 	.word	0x08006675
 800660c:	08006675 	.word	0x08006675
 8006610:	08006675 	.word	0x08006675
 8006614:	08006675 	.word	0x08006675
 8006618:	0800667d 	.word	0x0800667d
 800661c:	08006675 	.word	0x08006675
 8006620:	08006675 	.word	0x08006675
 8006624:	08006675 	.word	0x08006675
 8006628:	08006675 	.word	0x08006675
 800662c:	08006675 	.word	0x08006675
 8006630:	08006675 	.word	0x08006675
 8006634:	08006675 	.word	0x08006675
 8006638:	0800667d 	.word	0x0800667d
 800663c:	58024400 	.word	0x58024400
 8006640:	58024800 	.word	0x58024800
 8006644:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800664c:	3308      	adds	r3, #8
 800664e:	2101      	movs	r1, #1
 8006650:	4618      	mov	r0, r3
 8006652:	f000 ffc5 	bl	80075e0 <RCCEx_PLL2_Config>
 8006656:	4603      	mov	r3, r0
 8006658:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800665c:	e00f      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800665e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006662:	3328      	adds	r3, #40	; 0x28
 8006664:	2101      	movs	r1, #1
 8006666:	4618      	mov	r0, r3
 8006668:	f001 f86c 	bl	8007744 <RCCEx_PLL3_Config>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006672:	e004      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800667a:	e000      	b.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800667c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800667e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10b      	bne.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006686:	4bc0      	ldr	r3, [pc, #768]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800668e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006696:	4abc      	ldr	r2, [pc, #752]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006698:	430b      	orrs	r3, r1
 800669a:	6553      	str	r3, [r2, #84]	; 0x54
 800669c:	e003      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800669e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80066a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ae:	f002 0302 	and.w	r3, r2, #2
 80066b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066b6:	2300      	movs	r3, #0
 80066b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066bc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80066c0:	460b      	mov	r3, r1
 80066c2:	4313      	orrs	r3, r2
 80066c4:	d043      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80066c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066ce:	2b05      	cmp	r3, #5
 80066d0:	d824      	bhi.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80066d2:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80066d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d8:	08006725 	.word	0x08006725
 80066dc:	080066f1 	.word	0x080066f1
 80066e0:	08006707 	.word	0x08006707
 80066e4:	08006725 	.word	0x08006725
 80066e8:	08006725 	.word	0x08006725
 80066ec:	08006725 	.word	0x08006725
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066f4:	3308      	adds	r3, #8
 80066f6:	2101      	movs	r1, #1
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 ff71 	bl	80075e0 <RCCEx_PLL2_Config>
 80066fe:	4603      	mov	r3, r0
 8006700:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006704:	e00f      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800670a:	3328      	adds	r3, #40	; 0x28
 800670c:	2101      	movs	r1, #1
 800670e:	4618      	mov	r0, r3
 8006710:	f001 f818 	bl	8007744 <RCCEx_PLL3_Config>
 8006714:	4603      	mov	r3, r0
 8006716:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800671a:	e004      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006722:	e000      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8006724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006726:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10b      	bne.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800672e:	4b96      	ldr	r3, [pc, #600]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006732:	f023 0107 	bic.w	r1, r3, #7
 8006736:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800673a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800673e:	4a92      	ldr	r2, [pc, #584]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006740:	430b      	orrs	r3, r1
 8006742:	6553      	str	r3, [r2, #84]	; 0x54
 8006744:	e003      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006746:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800674a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800674e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006756:	f002 0304 	and.w	r3, r2, #4
 800675a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800675e:	2300      	movs	r3, #0
 8006760:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006764:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006768:	460b      	mov	r3, r1
 800676a:	4313      	orrs	r3, r2
 800676c:	d043      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800676e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006772:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006776:	2b05      	cmp	r3, #5
 8006778:	d824      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800677a:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800677c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006780:	080067cd 	.word	0x080067cd
 8006784:	08006799 	.word	0x08006799
 8006788:	080067af 	.word	0x080067af
 800678c:	080067cd 	.word	0x080067cd
 8006790:	080067cd 	.word	0x080067cd
 8006794:	080067cd 	.word	0x080067cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800679c:	3308      	adds	r3, #8
 800679e:	2101      	movs	r1, #1
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 ff1d 	bl	80075e0 <RCCEx_PLL2_Config>
 80067a6:	4603      	mov	r3, r0
 80067a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80067ac:	e00f      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067b2:	3328      	adds	r3, #40	; 0x28
 80067b4:	2101      	movs	r1, #1
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 ffc4 	bl	8007744 <RCCEx_PLL3_Config>
 80067bc:	4603      	mov	r3, r0
 80067be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80067c2:	e004      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80067ca:	e000      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80067cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10b      	bne.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067d6:	4b6c      	ldr	r3, [pc, #432]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80067d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067da:	f023 0107 	bic.w	r1, r3, #7
 80067de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067e6:	4a68      	ldr	r2, [pc, #416]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80067e8:	430b      	orrs	r3, r1
 80067ea:	6593      	str	r3, [r2, #88]	; 0x58
 80067ec:	e003      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80067f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fe:	f002 0320 	and.w	r3, r2, #32
 8006802:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006806:	2300      	movs	r3, #0
 8006808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800680c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006810:	460b      	mov	r3, r1
 8006812:	4313      	orrs	r3, r2
 8006814:	d055      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800681a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800681e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006822:	d033      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006828:	d82c      	bhi.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800682a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800682e:	d02f      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006834:	d826      	bhi.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006836:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800683a:	d02b      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800683c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006840:	d820      	bhi.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006846:	d012      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800684c:	d81a      	bhi.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d022      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006856:	d115      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800685c:	3308      	adds	r3, #8
 800685e:	2100      	movs	r1, #0
 8006860:	4618      	mov	r0, r3
 8006862:	f000 febd 	bl	80075e0 <RCCEx_PLL2_Config>
 8006866:	4603      	mov	r3, r0
 8006868:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800686c:	e015      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800686e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006872:	3328      	adds	r3, #40	; 0x28
 8006874:	2102      	movs	r1, #2
 8006876:	4618      	mov	r0, r3
 8006878:	f000 ff64 	bl	8007744 <RCCEx_PLL3_Config>
 800687c:	4603      	mov	r3, r0
 800687e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006882:	e00a      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800688a:	e006      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800688c:	bf00      	nop
 800688e:	e004      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006890:	bf00      	nop
 8006892:	e002      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006894:	bf00      	nop
 8006896:	e000      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800689a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10b      	bne.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068a2:	4b39      	ldr	r3, [pc, #228]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80068a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80068aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068b2:	4a35      	ldr	r2, [pc, #212]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80068b4:	430b      	orrs	r3, r1
 80068b6:	6553      	str	r3, [r2, #84]	; 0x54
 80068b8:	e003      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80068c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80068ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068d2:	2300      	movs	r3, #0
 80068d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80068d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80068dc:	460b      	mov	r3, r1
 80068de:	4313      	orrs	r3, r2
 80068e0:	d058      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80068e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80068ee:	d033      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80068f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80068f4:	d82c      	bhi.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80068f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068fa:	d02f      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80068fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006900:	d826      	bhi.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006902:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006906:	d02b      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006908:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800690c:	d820      	bhi.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800690e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006912:	d012      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006918:	d81a      	bhi.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800691a:	2b00      	cmp	r3, #0
 800691c:	d022      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800691e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006922:	d115      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006924:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006928:	3308      	adds	r3, #8
 800692a:	2100      	movs	r1, #0
 800692c:	4618      	mov	r0, r3
 800692e:	f000 fe57 	bl	80075e0 <RCCEx_PLL2_Config>
 8006932:	4603      	mov	r3, r0
 8006934:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006938:	e015      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800693a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800693e:	3328      	adds	r3, #40	; 0x28
 8006940:	2102      	movs	r1, #2
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fefe 	bl	8007744 <RCCEx_PLL3_Config>
 8006948:	4603      	mov	r3, r0
 800694a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800694e:	e00a      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006956:	e006      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006958:	bf00      	nop
 800695a:	e004      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800695c:	bf00      	nop
 800695e:	e002      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006960:	bf00      	nop
 8006962:	e000      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006966:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10e      	bne.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800696e:	4b06      	ldr	r3, [pc, #24]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006972:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800697a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800697e:	4a02      	ldr	r2, [pc, #8]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006980:	430b      	orrs	r3, r1
 8006982:	6593      	str	r3, [r2, #88]	; 0x58
 8006984:	e006      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8006986:	bf00      	nop
 8006988:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006990:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006994:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80069a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069a4:	2300      	movs	r3, #0
 80069a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80069ae:	460b      	mov	r3, r1
 80069b0:	4313      	orrs	r3, r2
 80069b2:	d055      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80069b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80069bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80069c0:	d033      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80069c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80069c6:	d82c      	bhi.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80069c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069cc:	d02f      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80069ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069d2:	d826      	bhi.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80069d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80069d8:	d02b      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80069da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80069de:	d820      	bhi.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80069e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069e4:	d012      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80069e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ea:	d81a      	bhi.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d022      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80069f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f4:	d115      	bne.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069fa:	3308      	adds	r3, #8
 80069fc:	2100      	movs	r1, #0
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 fdee 	bl	80075e0 <RCCEx_PLL2_Config>
 8006a04:	4603      	mov	r3, r0
 8006a06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a0a:	e015      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a10:	3328      	adds	r3, #40	; 0x28
 8006a12:	2102      	movs	r1, #2
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 fe95 	bl	8007744 <RCCEx_PLL3_Config>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006a20:	e00a      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006a28:	e006      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006a2a:	bf00      	nop
 8006a2c:	e004      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006a2e:	bf00      	nop
 8006a30:	e002      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006a32:	bf00      	nop
 8006a34:	e000      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10b      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006a40:	4ba1      	ldr	r3, [pc, #644]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a44:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a50:	4a9d      	ldr	r2, [pc, #628]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a52:	430b      	orrs	r3, r1
 8006a54:	6593      	str	r3, [r2, #88]	; 0x58
 8006a56:	e003      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	f002 0308 	and.w	r3, r2, #8
 8006a6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a70:	2300      	movs	r3, #0
 8006a72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	d01e      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a8c:	d10c      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a92:	3328      	adds	r3, #40	; 0x28
 8006a94:	2102      	movs	r1, #2
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fe54 	bl	8007744 <RCCEx_PLL3_Config>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006aa8:	4b87      	ldr	r3, [pc, #540]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ab8:	4a83      	ldr	r2, [pc, #524]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006aba:	430b      	orrs	r3, r1
 8006abc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac6:	f002 0310 	and.w	r3, r2, #16
 8006aca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ace:	2300      	movs	r3, #0
 8006ad0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006ad4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006ad8:	460b      	mov	r3, r1
 8006ada:	4313      	orrs	r3, r2
 8006adc:	d01e      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ae2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aea:	d10c      	bne.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006af0:	3328      	adds	r3, #40	; 0x28
 8006af2:	2102      	movs	r1, #2
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 fe25 	bl	8007744 <RCCEx_PLL3_Config>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b06:	4b70      	ldr	r3, [pc, #448]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b16:	4a6c      	ldr	r2, [pc, #432]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006b28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b32:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006b36:	460b      	mov	r3, r1
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	d03e      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b48:	d022      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006b4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b4e:	d81b      	bhi.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b58:	d00b      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006b5a:	e015      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b60:	3308      	adds	r3, #8
 8006b62:	2100      	movs	r1, #0
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fd3b 	bl	80075e0 <RCCEx_PLL2_Config>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b70:	e00f      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b76:	3328      	adds	r3, #40	; 0x28
 8006b78:	2102      	movs	r1, #2
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 fde2 	bl	8007744 <RCCEx_PLL3_Config>
 8006b80:	4603      	mov	r3, r0
 8006b82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b86:	e004      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006b8e:	e000      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10b      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b9a:	4b4b      	ldr	r3, [pc, #300]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b9e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ba6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006baa:	4a47      	ldr	r2, [pc, #284]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6593      	str	r3, [r2, #88]	; 0x58
 8006bb0:	e003      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006bb6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006bc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bc8:	2300      	movs	r3, #0
 8006bca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006bcc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	d03b      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006be2:	d01f      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006be4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006be8:	d818      	bhi.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006bea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bee:	d003      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006bf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bf4:	d007      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8006bf6:	e011      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bf8:	4b33      	ldr	r3, [pc, #204]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfc:	4a32      	ldr	r2, [pc, #200]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c04:	e00f      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c0a:	3328      	adds	r3, #40	; 0x28
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 fd98 	bl	8007744 <RCCEx_PLL3_Config>
 8006c14:	4603      	mov	r3, r0
 8006c16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006c1a:	e004      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006c22:	e000      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10b      	bne.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c2e:	4b26      	ldr	r3, [pc, #152]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c32:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3e:	4a22      	ldr	r2, [pc, #136]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c40:	430b      	orrs	r3, r1
 8006c42:	6553      	str	r3, [r2, #84]	; 0x54
 8006c44:	e003      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006c5a:	673b      	str	r3, [r7, #112]	; 0x70
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	677b      	str	r3, [r7, #116]	; 0x74
 8006c60:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006c64:	460b      	mov	r3, r1
 8006c66:	4313      	orrs	r3, r2
 8006c68:	d034      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d003      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c78:	d007      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006c7a:	e011      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c7c:	4b12      	ldr	r3, [pc, #72]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c80:	4a11      	ldr	r2, [pc, #68]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c88:	e00e      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c8e:	3308      	adds	r3, #8
 8006c90:	2102      	movs	r1, #2
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 fca4 	bl	80075e0 <RCCEx_PLL2_Config>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c9e:	e003      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006ca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ca8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10d      	bne.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006cb0:	4b05      	ldr	r3, [pc, #20]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cbe:	4a02      	ldr	r2, [pc, #8]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cc4:	e006      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006cc6:	bf00      	nop
 8006cc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ccc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006cd0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cdc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006ce0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ce6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006cea:	460b      	mov	r3, r1
 8006cec:	4313      	orrs	r3, r2
 8006cee:	d00c      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cf4:	3328      	adds	r3, #40	; 0x28
 8006cf6:	2102      	movs	r1, #2
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 fd23 	bl	8007744 <RCCEx_PLL3_Config>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006d16:	663b      	str	r3, [r7, #96]	; 0x60
 8006d18:	2300      	movs	r3, #0
 8006d1a:	667b      	str	r3, [r7, #100]	; 0x64
 8006d1c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006d20:	460b      	mov	r3, r1
 8006d22:	4313      	orrs	r3, r2
 8006d24:	d038      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d32:	d018      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006d34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d38:	d811      	bhi.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d3e:	d014      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d44:	d80b      	bhi.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d011      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d4e:	d106      	bne.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d50:	4bc3      	ldr	r3, [pc, #780]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d54:	4ac2      	ldr	r2, [pc, #776]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006d5c:	e008      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006d64:	e004      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006d66:	bf00      	nop
 8006d68:	e002      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006d6a:	bf00      	nop
 8006d6c:	e000      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006d6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10b      	bne.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d78:	4bb9      	ldr	r3, [pc, #740]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d88:	4ab5      	ldr	r2, [pc, #724]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d8a:	430b      	orrs	r3, r1
 8006d8c:	6553      	str	r3, [r2, #84]	; 0x54
 8006d8e:	e003      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d94:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006da4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006da6:	2300      	movs	r3, #0
 8006da8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006daa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006dae:	460b      	mov	r3, r1
 8006db0:	4313      	orrs	r3, r2
 8006db2:	d009      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006db4:	4baa      	ldr	r3, [pc, #680]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dc2:	4aa7      	ldr	r2, [pc, #668]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006dc4:	430b      	orrs	r3, r1
 8006dc6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006dd4:	653b      	str	r3, [r7, #80]	; 0x50
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	657b      	str	r3, [r7, #84]	; 0x54
 8006dda:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006dde:	460b      	mov	r3, r1
 8006de0:	4313      	orrs	r3, r2
 8006de2:	d009      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006de4:	4b9e      	ldr	r3, [pc, #632]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df2:	4a9b      	ldr	r2, [pc, #620]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006df4:	430b      	orrs	r3, r1
 8006df6:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006e04:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e06:	2300      	movs	r3, #0
 8006e08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e0a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4313      	orrs	r3, r2
 8006e12:	d009      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006e14:	4b92      	ldr	r3, [pc, #584]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e18:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8006e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e22:	4a8f      	ldr	r2, [pc, #572]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e24:	430b      	orrs	r3, r1
 8006e26:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e30:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006e34:	643b      	str	r3, [r7, #64]	; 0x40
 8006e36:	2300      	movs	r3, #0
 8006e38:	647b      	str	r3, [r7, #68]	; 0x44
 8006e3a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4313      	orrs	r3, r2
 8006e42:	d00e      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e44:	4b86      	ldr	r3, [pc, #536]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	4a85      	ldr	r2, [pc, #532]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e4e:	6113      	str	r3, [r2, #16]
 8006e50:	4b83      	ldr	r3, [pc, #524]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e52:	6919      	ldr	r1, [r3, #16]
 8006e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006e5c:	4a80      	ldr	r2, [pc, #512]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e5e:	430b      	orrs	r3, r1
 8006e60:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006e6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e70:	2300      	movs	r3, #0
 8006e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e74:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006e78:	460b      	mov	r3, r1
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	d009      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006e7e:	4b78      	ldr	r3, [pc, #480]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e82:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e8c:	4a74      	ldr	r2, [pc, #464]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e8e:	430b      	orrs	r3, r1
 8006e90:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006e9e:	633b      	str	r3, [r7, #48]	; 0x30
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	d00a      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006eae:	4b6c      	ldr	r3, [pc, #432]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ebe:	4a68      	ldr	r2, [pc, #416]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ec0:	430b      	orrs	r3, r1
 8006ec2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	2100      	movs	r1, #0
 8006ece:	62b9      	str	r1, [r7, #40]	; 0x28
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ed6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006eda:	460b      	mov	r3, r1
 8006edc:	4313      	orrs	r3, r2
 8006ede:	d011      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 fb79 	bl	80075e0 <RCCEx_PLL2_Config>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006ef4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d003      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f00:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	6239      	str	r1, [r7, #32]
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	627b      	str	r3, [r7, #36]	; 0x24
 8006f16:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	d011      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f24:	3308      	adds	r3, #8
 8006f26:	2101      	movs	r1, #1
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 fb59 	bl	80075e0 <RCCEx_PLL2_Config>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006f34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d003      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	61b9      	str	r1, [r7, #24]
 8006f50:	f003 0304 	and.w	r3, r3, #4
 8006f54:	61fb      	str	r3, [r7, #28]
 8006f56:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	d011      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f64:	3308      	adds	r3, #8
 8006f66:	2102      	movs	r1, #2
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 fb39 	bl	80075e0 <RCCEx_PLL2_Config>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006f74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f80:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	6139      	str	r1, [r7, #16]
 8006f90:	f003 0308 	and.w	r3, r3, #8
 8006f94:	617b      	str	r3, [r7, #20]
 8006f96:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	d011      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fa4:	3328      	adds	r3, #40	; 0x28
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 fbcb 	bl	8007744 <RCCEx_PLL3_Config>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8006fb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fc0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fcc:	2100      	movs	r1, #0
 8006fce:	60b9      	str	r1, [r7, #8]
 8006fd0:	f003 0310 	and.w	r3, r3, #16
 8006fd4:	60fb      	str	r3, [r7, #12]
 8006fd6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	d011      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fe4:	3328      	adds	r3, #40	; 0x28
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fbab 	bl	8007744 <RCCEx_PLL3_Config>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006ff4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ffc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007000:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007004:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700c:	2100      	movs	r1, #0
 800700e:	6039      	str	r1, [r7, #0]
 8007010:	f003 0320 	and.w	r3, r3, #32
 8007014:	607b      	str	r3, [r7, #4]
 8007016:	e9d7 1200 	ldrd	r1, r2, [r7]
 800701a:	460b      	mov	r3, r1
 800701c:	4313      	orrs	r3, r2
 800701e:	d011      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007020:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007024:	3328      	adds	r3, #40	; 0x28
 8007026:	2102      	movs	r1, #2
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fb8b 	bl	8007744 <RCCEx_PLL3_Config>
 800702e:	4603      	mov	r3, r0
 8007030:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007034:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800703c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007040:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8007044:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	e000      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
}
 8007052:	4618      	mov	r0, r3
 8007054:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8007058:	46bd      	mov	sp, r7
 800705a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800705e:	bf00      	nop
 8007060:	58024400 	.word	0x58024400

08007064 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007068:	f7fe fde2 	bl	8005c30 <HAL_RCC_GetHCLKFreq>
 800706c:	4602      	mov	r2, r0
 800706e:	4b06      	ldr	r3, [pc, #24]	; (8007088 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	091b      	lsrs	r3, r3, #4
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	4904      	ldr	r1, [pc, #16]	; (800708c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800707a:	5ccb      	ldrb	r3, [r1, r3]
 800707c:	f003 031f 	and.w	r3, r3, #31
 8007080:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007084:	4618      	mov	r0, r3
 8007086:	bd80      	pop	{r7, pc}
 8007088:	58024400 	.word	0x58024400
 800708c:	0800d49c 	.word	0x0800d49c

08007090 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007090:	b480      	push	{r7}
 8007092:	b089      	sub	sp, #36	; 0x24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007098:	4ba1      	ldr	r3, [pc, #644]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800709a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709c:	f003 0303 	and.w	r3, r3, #3
 80070a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80070a2:	4b9f      	ldr	r3, [pc, #636]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a6:	0b1b      	lsrs	r3, r3, #12
 80070a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80070ae:	4b9c      	ldr	r3, [pc, #624]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b2:	091b      	lsrs	r3, r3, #4
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80070ba:	4b99      	ldr	r3, [pc, #612]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070be:	08db      	lsrs	r3, r3, #3
 80070c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	fb02 f303 	mul.w	r3, r2, r3
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 8111 	beq.w	8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	f000 8083 	beq.w	80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	f200 80a1 	bhi.w	8007230 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d056      	beq.n	80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80070fa:	e099      	b.n	8007230 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070fc:	4b88      	ldr	r3, [pc, #544]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0320 	and.w	r3, r3, #32
 8007104:	2b00      	cmp	r3, #0
 8007106:	d02d      	beq.n	8007164 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007108:	4b85      	ldr	r3, [pc, #532]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	08db      	lsrs	r3, r3, #3
 800710e:	f003 0303 	and.w	r3, r3, #3
 8007112:	4a84      	ldr	r2, [pc, #528]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007114:	fa22 f303 	lsr.w	r3, r2, r3
 8007118:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	ee07 3a90 	vmov	s15, r3
 8007120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007132:	4b7b      	ldr	r3, [pc, #492]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800713a:	ee07 3a90 	vmov	s15, r3
 800713e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007142:	ed97 6a03 	vldr	s12, [r7, #12]
 8007146:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800714a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800714e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800715a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800715e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007162:	e087      	b.n	8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800732c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007176:	4b6a      	ldr	r3, [pc, #424]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007186:	ed97 6a03 	vldr	s12, [r7, #12]
 800718a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800718e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800719a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071a6:	e065      	b.n	8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ba:	4b59      	ldr	r3, [pc, #356]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ea:	e043      	b.n	8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80071fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071fe:	4b48      	ldr	r3, [pc, #288]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007212:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800721e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800722e:	e021      	b.n	8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800723e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007242:	4b37      	ldr	r3, [pc, #220]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007252:	ed97 6a03 	vldr	s12, [r7, #12]
 8007256:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800725a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007272:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007274:	4b2a      	ldr	r3, [pc, #168]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007278:	0a5b      	lsrs	r3, r3, #9
 800727a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800728a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800728e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800729a:	ee17 2a90 	vmov	r2, s15
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80072a2:	4b1f      	ldr	r3, [pc, #124]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a6:	0c1b      	lsrs	r3, r3, #16
 80072a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ac:	ee07 3a90 	vmov	s15, r3
 80072b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80072c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c8:	ee17 2a90 	vmov	r2, s15
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80072d0:	4b13      	ldr	r3, [pc, #76]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d4:	0e1b      	lsrs	r3, r3, #24
 80072d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072f6:	ee17 2a90 	vmov	r2, s15
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80072fe:	e008      	b.n	8007312 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	609a      	str	r2, [r3, #8]
}
 8007312:	bf00      	nop
 8007314:	3724      	adds	r7, #36	; 0x24
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	58024400 	.word	0x58024400
 8007324:	03d09000 	.word	0x03d09000
 8007328:	46000000 	.word	0x46000000
 800732c:	4c742400 	.word	0x4c742400
 8007330:	4a742400 	.word	0x4a742400
 8007334:	4af42400 	.word	0x4af42400

08007338 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007338:	b480      	push	{r7}
 800733a:	b089      	sub	sp, #36	; 0x24
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007340:	4ba1      	ldr	r3, [pc, #644]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007344:	f003 0303 	and.w	r3, r3, #3
 8007348:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800734a:	4b9f      	ldr	r3, [pc, #636]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800734c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734e:	0d1b      	lsrs	r3, r3, #20
 8007350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007354:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007356:	4b9c      	ldr	r3, [pc, #624]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735a:	0a1b      	lsrs	r3, r3, #8
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007362:	4b99      	ldr	r3, [pc, #612]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007366:	08db      	lsrs	r3, r3, #3
 8007368:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	fb02 f303 	mul.w	r3, r2, r3
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 8111 	beq.w	80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	2b02      	cmp	r3, #2
 800738a:	f000 8083 	beq.w	8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	2b02      	cmp	r3, #2
 8007392:	f200 80a1 	bhi.w	80074d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d056      	beq.n	8007450 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80073a2:	e099      	b.n	80074d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073a4:	4b88      	ldr	r3, [pc, #544]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0320 	and.w	r3, r3, #32
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d02d      	beq.n	800740c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073b0:	4b85      	ldr	r3, [pc, #532]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	08db      	lsrs	r3, r3, #3
 80073b6:	f003 0303 	and.w	r3, r3, #3
 80073ba:	4a84      	ldr	r2, [pc, #528]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80073bc:	fa22 f303 	lsr.w	r3, r2, r3
 80073c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	ee07 3a90 	vmov	s15, r3
 80073c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073da:	4b7b      	ldr	r3, [pc, #492]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007406:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800740a:	e087      	b.n	800751c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007416:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800741a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800741e:	4b6a      	ldr	r3, [pc, #424]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800742e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007432:	eddf 5a67 	vldr	s11, [pc, #412]	; 80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800743a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800743e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800744a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800744e:	e065      	b.n	800751c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800745e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007462:	4b59      	ldr	r3, [pc, #356]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800746a:	ee07 3a90 	vmov	s15, r3
 800746e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007472:	ed97 6a03 	vldr	s12, [r7, #12]
 8007476:	eddf 5a56 	vldr	s11, [pc, #344]	; 80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800747a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800747e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800748a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800748e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007492:	e043      	b.n	800751c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	ee07 3a90 	vmov	s15, r3
 800749a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800749e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80074a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074a6:	4b48      	ldr	r3, [pc, #288]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ae:	ee07 3a90 	vmov	s15, r3
 80074b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074d6:	e021      	b.n	800751c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	ee07 3a90 	vmov	s15, r3
 80074de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ea:	4b37      	ldr	r3, [pc, #220]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f2:	ee07 3a90 	vmov	s15, r3
 80074f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80074fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800750a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800750e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007516:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800751a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800751c:	4b2a      	ldr	r3, [pc, #168]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800751e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007520:	0a5b      	lsrs	r3, r3, #9
 8007522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007532:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007536:	edd7 6a07 	vldr	s13, [r7, #28]
 800753a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800753e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007542:	ee17 2a90 	vmov	r2, s15
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800754a:	4b1f      	ldr	r3, [pc, #124]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	0c1b      	lsrs	r3, r3, #16
 8007550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007554:	ee07 3a90 	vmov	s15, r3
 8007558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007560:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007564:	edd7 6a07 	vldr	s13, [r7, #28]
 8007568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800756c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007570:	ee17 2a90 	vmov	r2, s15
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007578:	4b13      	ldr	r3, [pc, #76]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800757a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757c:	0e1b      	lsrs	r3, r3, #24
 800757e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800758e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007592:	edd7 6a07 	vldr	s13, [r7, #28]
 8007596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800759a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800759e:	ee17 2a90 	vmov	r2, s15
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80075a6:	e008      	b.n	80075ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	609a      	str	r2, [r3, #8]
}
 80075ba:	bf00      	nop
 80075bc:	3724      	adds	r7, #36	; 0x24
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	58024400 	.word	0x58024400
 80075cc:	03d09000 	.word	0x03d09000
 80075d0:	46000000 	.word	0x46000000
 80075d4:	4c742400 	.word	0x4c742400
 80075d8:	4a742400 	.word	0x4a742400
 80075dc:	4af42400 	.word	0x4af42400

080075e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075ee:	4b53      	ldr	r3, [pc, #332]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80075f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f2:	f003 0303 	and.w	r3, r3, #3
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	d101      	bne.n	80075fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e099      	b.n	8007732 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80075fe:	4b4f      	ldr	r3, [pc, #316]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a4e      	ldr	r2, [pc, #312]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 8007604:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800760a:	f7fa fdb9 	bl	8002180 <HAL_GetTick>
 800760e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007610:	e008      	b.n	8007624 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007612:	f7fa fdb5 	bl	8002180 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b02      	cmp	r3, #2
 800761e:	d901      	bls.n	8007624 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e086      	b.n	8007732 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007624:	4b45      	ldr	r3, [pc, #276]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1f0      	bne.n	8007612 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007630:	4b42      	ldr	r3, [pc, #264]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 8007632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007634:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	031b      	lsls	r3, r3, #12
 800763e:	493f      	ldr	r1, [pc, #252]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 8007640:	4313      	orrs	r3, r2
 8007642:	628b      	str	r3, [r1, #40]	; 0x28
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	3b01      	subs	r3, #1
 800764a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	3b01      	subs	r3, #1
 8007654:	025b      	lsls	r3, r3, #9
 8007656:	b29b      	uxth	r3, r3
 8007658:	431a      	orrs	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	3b01      	subs	r3, #1
 8007660:	041b      	lsls	r3, r3, #16
 8007662:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007666:	431a      	orrs	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	3b01      	subs	r3, #1
 800766e:	061b      	lsls	r3, r3, #24
 8007670:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007674:	4931      	ldr	r1, [pc, #196]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 8007676:	4313      	orrs	r3, r2
 8007678:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800767a:	4b30      	ldr	r3, [pc, #192]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 800767c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	492d      	ldr	r1, [pc, #180]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 8007688:	4313      	orrs	r3, r2
 800768a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800768c:	4b2b      	ldr	r3, [pc, #172]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	f023 0220 	bic.w	r2, r3, #32
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	4928      	ldr	r1, [pc, #160]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 800769a:	4313      	orrs	r3, r2
 800769c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800769e:	4b27      	ldr	r3, [pc, #156]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a2:	4a26      	ldr	r2, [pc, #152]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076a4:	f023 0310 	bic.w	r3, r3, #16
 80076a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80076aa:	4b24      	ldr	r3, [pc, #144]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076ae:	4b24      	ldr	r3, [pc, #144]	; (8007740 <RCCEx_PLL2_Config+0x160>)
 80076b0:	4013      	ands	r3, r2
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	69d2      	ldr	r2, [r2, #28]
 80076b6:	00d2      	lsls	r2, r2, #3
 80076b8:	4920      	ldr	r1, [pc, #128]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80076be:	4b1f      	ldr	r3, [pc, #124]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c2:	4a1e      	ldr	r2, [pc, #120]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076c4:	f043 0310 	orr.w	r3, r3, #16
 80076c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d106      	bne.n	80076de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80076d0:	4b1a      	ldr	r3, [pc, #104]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	4a19      	ldr	r2, [pc, #100]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076dc:	e00f      	b.n	80076fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d106      	bne.n	80076f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80076e4:	4b15      	ldr	r3, [pc, #84]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e8:	4a14      	ldr	r2, [pc, #80]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076f0:	e005      	b.n	80076fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076f2:	4b12      	ldr	r3, [pc, #72]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f6:	4a11      	ldr	r2, [pc, #68]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80076fe:	4b0f      	ldr	r3, [pc, #60]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a0e      	ldr	r2, [pc, #56]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 8007704:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800770a:	f7fa fd39 	bl	8002180 <HAL_GetTick>
 800770e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007710:	e008      	b.n	8007724 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007712:	f7fa fd35 	bl	8002180 <HAL_GetTick>
 8007716:	4602      	mov	r2, r0
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	2b02      	cmp	r3, #2
 800771e:	d901      	bls.n	8007724 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e006      	b.n	8007732 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007724:	4b05      	ldr	r3, [pc, #20]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0f0      	beq.n	8007712 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007730:	7bfb      	ldrb	r3, [r7, #15]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	58024400 	.word	0x58024400
 8007740:	ffff0007 	.word	0xffff0007

08007744 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007752:	4b53      	ldr	r3, [pc, #332]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007756:	f003 0303 	and.w	r3, r3, #3
 800775a:	2b03      	cmp	r3, #3
 800775c:	d101      	bne.n	8007762 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e099      	b.n	8007896 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007762:	4b4f      	ldr	r3, [pc, #316]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a4e      	ldr	r2, [pc, #312]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800776c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800776e:	f7fa fd07 	bl	8002180 <HAL_GetTick>
 8007772:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007774:	e008      	b.n	8007788 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007776:	f7fa fd03 	bl	8002180 <HAL_GetTick>
 800777a:	4602      	mov	r2, r0
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	2b02      	cmp	r3, #2
 8007782:	d901      	bls.n	8007788 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e086      	b.n	8007896 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007788:	4b45      	ldr	r3, [pc, #276]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1f0      	bne.n	8007776 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007794:	4b42      	ldr	r3, [pc, #264]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007798:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	051b      	lsls	r3, r3, #20
 80077a2:	493f      	ldr	r1, [pc, #252]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	628b      	str	r3, [r1, #40]	; 0x28
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	3b01      	subs	r3, #1
 80077ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	3b01      	subs	r3, #1
 80077b8:	025b      	lsls	r3, r3, #9
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	431a      	orrs	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	041b      	lsls	r3, r3, #16
 80077c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80077ca:	431a      	orrs	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	061b      	lsls	r3, r3, #24
 80077d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80077d8:	4931      	ldr	r1, [pc, #196]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80077de:	4b30      	ldr	r3, [pc, #192]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 80077e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	492d      	ldr	r1, [pc, #180]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80077f0:	4b2b      	ldr	r3, [pc, #172]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	4928      	ldr	r1, [pc, #160]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007802:	4b27      	ldr	r3, [pc, #156]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007806:	4a26      	ldr	r2, [pc, #152]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800780c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800780e:	4b24      	ldr	r3, [pc, #144]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007812:	4b24      	ldr	r3, [pc, #144]	; (80078a4 <RCCEx_PLL3_Config+0x160>)
 8007814:	4013      	ands	r3, r2
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	69d2      	ldr	r2, [r2, #28]
 800781a:	00d2      	lsls	r2, r2, #3
 800781c:	4920      	ldr	r1, [pc, #128]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 800781e:	4313      	orrs	r3, r2
 8007820:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007822:	4b1f      	ldr	r3, [pc, #124]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007826:	4a1e      	ldr	r2, [pc, #120]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800782c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d106      	bne.n	8007842 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007834:	4b1a      	ldr	r3, [pc, #104]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007838:	4a19      	ldr	r2, [pc, #100]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 800783a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800783e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007840:	e00f      	b.n	8007862 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d106      	bne.n	8007856 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007848:	4b15      	ldr	r3, [pc, #84]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 800784a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784c:	4a14      	ldr	r2, [pc, #80]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 800784e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007852:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007854:	e005      	b.n	8007862 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007856:	4b12      	ldr	r3, [pc, #72]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785a:	4a11      	ldr	r2, [pc, #68]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 800785c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007860:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007862:	4b0f      	ldr	r3, [pc, #60]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a0e      	ldr	r2, [pc, #56]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800786c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800786e:	f7fa fc87 	bl	8002180 <HAL_GetTick>
 8007872:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007874:	e008      	b.n	8007888 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007876:	f7fa fc83 	bl	8002180 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	2b02      	cmp	r3, #2
 8007882:	d901      	bls.n	8007888 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007884:	2303      	movs	r3, #3
 8007886:	e006      	b.n	8007896 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007888:	4b05      	ldr	r3, [pc, #20]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d0f0      	beq.n	8007876 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007894:	7bfb      	ldrb	r3, [r7, #15]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	58024400 	.word	0x58024400
 80078a4:	ffff0007 	.word	0xffff0007

080078a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e049      	b.n	800794e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d106      	bne.n	80078d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7fa f886 	bl	80019e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	3304      	adds	r3, #4
 80078e4:	4619      	mov	r1, r3
 80078e6:	4610      	mov	r0, r2
 80078e8:	f000 fd7c 	bl	80083e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
	...

08007958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b01      	cmp	r3, #1
 800796a:	d001      	beq.n	8007970 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e054      	b.n	8007a1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2202      	movs	r2, #2
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68da      	ldr	r2, [r3, #12]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f042 0201 	orr.w	r2, r2, #1
 8007986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a26      	ldr	r2, [pc, #152]	; (8007a28 <HAL_TIM_Base_Start_IT+0xd0>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d022      	beq.n	80079d8 <HAL_TIM_Base_Start_IT+0x80>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800799a:	d01d      	beq.n	80079d8 <HAL_TIM_Base_Start_IT+0x80>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a22      	ldr	r2, [pc, #136]	; (8007a2c <HAL_TIM_Base_Start_IT+0xd4>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d018      	beq.n	80079d8 <HAL_TIM_Base_Start_IT+0x80>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a21      	ldr	r2, [pc, #132]	; (8007a30 <HAL_TIM_Base_Start_IT+0xd8>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d013      	beq.n	80079d8 <HAL_TIM_Base_Start_IT+0x80>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a1f      	ldr	r2, [pc, #124]	; (8007a34 <HAL_TIM_Base_Start_IT+0xdc>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d00e      	beq.n	80079d8 <HAL_TIM_Base_Start_IT+0x80>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a1e      	ldr	r2, [pc, #120]	; (8007a38 <HAL_TIM_Base_Start_IT+0xe0>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d009      	beq.n	80079d8 <HAL_TIM_Base_Start_IT+0x80>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a1c      	ldr	r2, [pc, #112]	; (8007a3c <HAL_TIM_Base_Start_IT+0xe4>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d004      	beq.n	80079d8 <HAL_TIM_Base_Start_IT+0x80>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a1b      	ldr	r2, [pc, #108]	; (8007a40 <HAL_TIM_Base_Start_IT+0xe8>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d115      	bne.n	8007a04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	689a      	ldr	r2, [r3, #8]
 80079de:	4b19      	ldr	r3, [pc, #100]	; (8007a44 <HAL_TIM_Base_Start_IT+0xec>)
 80079e0:	4013      	ands	r3, r2
 80079e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b06      	cmp	r3, #6
 80079e8:	d015      	beq.n	8007a16 <HAL_TIM_Base_Start_IT+0xbe>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f0:	d011      	beq.n	8007a16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f042 0201 	orr.w	r2, r2, #1
 8007a00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a02:	e008      	b.n	8007a16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f042 0201 	orr.w	r2, r2, #1
 8007a12:	601a      	str	r2, [r3, #0]
 8007a14:	e000      	b.n	8007a18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	40010000 	.word	0x40010000
 8007a2c:	40000400 	.word	0x40000400
 8007a30:	40000800 	.word	0x40000800
 8007a34:	40000c00 	.word	0x40000c00
 8007a38:	40010400 	.word	0x40010400
 8007a3c:	40001800 	.word	0x40001800
 8007a40:	40014000 	.word	0x40014000
 8007a44:	00010007 	.word	0x00010007

08007a48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e049      	b.n	8007aee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d106      	bne.n	8007a74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f841 	bl	8007af6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	3304      	adds	r3, #4
 8007a84:	4619      	mov	r1, r3
 8007a86:	4610      	mov	r0, r2
 8007a88:	f000 fcac 	bl	80083e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b083      	sub	sp, #12
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007afe:	bf00      	nop
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
	...

08007b0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d109      	bne.n	8007b30 <HAL_TIM_PWM_Start+0x24>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	bf14      	ite	ne
 8007b28:	2301      	movne	r3, #1
 8007b2a:	2300      	moveq	r3, #0
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	e03c      	b.n	8007baa <HAL_TIM_PWM_Start+0x9e>
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d109      	bne.n	8007b4a <HAL_TIM_PWM_Start+0x3e>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	bf14      	ite	ne
 8007b42:	2301      	movne	r3, #1
 8007b44:	2300      	moveq	r3, #0
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	e02f      	b.n	8007baa <HAL_TIM_PWM_Start+0x9e>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b08      	cmp	r3, #8
 8007b4e:	d109      	bne.n	8007b64 <HAL_TIM_PWM_Start+0x58>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	bf14      	ite	ne
 8007b5c:	2301      	movne	r3, #1
 8007b5e:	2300      	moveq	r3, #0
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	e022      	b.n	8007baa <HAL_TIM_PWM_Start+0x9e>
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	2b0c      	cmp	r3, #12
 8007b68:	d109      	bne.n	8007b7e <HAL_TIM_PWM_Start+0x72>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	bf14      	ite	ne
 8007b76:	2301      	movne	r3, #1
 8007b78:	2300      	moveq	r3, #0
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	e015      	b.n	8007baa <HAL_TIM_PWM_Start+0x9e>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b10      	cmp	r3, #16
 8007b82:	d109      	bne.n	8007b98 <HAL_TIM_PWM_Start+0x8c>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	bf14      	ite	ne
 8007b90:	2301      	movne	r3, #1
 8007b92:	2300      	moveq	r3, #0
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	e008      	b.n	8007baa <HAL_TIM_PWM_Start+0x9e>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	bf14      	ite	ne
 8007ba4:	2301      	movne	r3, #1
 8007ba6:	2300      	moveq	r3, #0
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e0a1      	b.n	8007cf6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d104      	bne.n	8007bc2 <HAL_TIM_PWM_Start+0xb6>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bc0:	e023      	b.n	8007c0a <HAL_TIM_PWM_Start+0xfe>
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2b04      	cmp	r3, #4
 8007bc6:	d104      	bne.n	8007bd2 <HAL_TIM_PWM_Start+0xc6>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bd0:	e01b      	b.n	8007c0a <HAL_TIM_PWM_Start+0xfe>
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	2b08      	cmp	r3, #8
 8007bd6:	d104      	bne.n	8007be2 <HAL_TIM_PWM_Start+0xd6>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007be0:	e013      	b.n	8007c0a <HAL_TIM_PWM_Start+0xfe>
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b0c      	cmp	r3, #12
 8007be6:	d104      	bne.n	8007bf2 <HAL_TIM_PWM_Start+0xe6>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2202      	movs	r2, #2
 8007bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007bf0:	e00b      	b.n	8007c0a <HAL_TIM_PWM_Start+0xfe>
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b10      	cmp	r3, #16
 8007bf6:	d104      	bne.n	8007c02 <HAL_TIM_PWM_Start+0xf6>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c00:	e003      	b.n	8007c0a <HAL_TIM_PWM_Start+0xfe>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2202      	movs	r2, #2
 8007c06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 fff4 	bl	8008c00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a38      	ldr	r2, [pc, #224]	; (8007d00 <HAL_TIM_PWM_Start+0x1f4>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d013      	beq.n	8007c4a <HAL_TIM_PWM_Start+0x13e>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a37      	ldr	r2, [pc, #220]	; (8007d04 <HAL_TIM_PWM_Start+0x1f8>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d00e      	beq.n	8007c4a <HAL_TIM_PWM_Start+0x13e>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a35      	ldr	r2, [pc, #212]	; (8007d08 <HAL_TIM_PWM_Start+0x1fc>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d009      	beq.n	8007c4a <HAL_TIM_PWM_Start+0x13e>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a34      	ldr	r2, [pc, #208]	; (8007d0c <HAL_TIM_PWM_Start+0x200>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d004      	beq.n	8007c4a <HAL_TIM_PWM_Start+0x13e>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a32      	ldr	r2, [pc, #200]	; (8007d10 <HAL_TIM_PWM_Start+0x204>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d101      	bne.n	8007c4e <HAL_TIM_PWM_Start+0x142>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e000      	b.n	8007c50 <HAL_TIM_PWM_Start+0x144>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d007      	beq.n	8007c64 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a25      	ldr	r2, [pc, #148]	; (8007d00 <HAL_TIM_PWM_Start+0x1f4>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d022      	beq.n	8007cb4 <HAL_TIM_PWM_Start+0x1a8>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c76:	d01d      	beq.n	8007cb4 <HAL_TIM_PWM_Start+0x1a8>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a25      	ldr	r2, [pc, #148]	; (8007d14 <HAL_TIM_PWM_Start+0x208>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d018      	beq.n	8007cb4 <HAL_TIM_PWM_Start+0x1a8>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a24      	ldr	r2, [pc, #144]	; (8007d18 <HAL_TIM_PWM_Start+0x20c>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d013      	beq.n	8007cb4 <HAL_TIM_PWM_Start+0x1a8>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a22      	ldr	r2, [pc, #136]	; (8007d1c <HAL_TIM_PWM_Start+0x210>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d00e      	beq.n	8007cb4 <HAL_TIM_PWM_Start+0x1a8>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a1a      	ldr	r2, [pc, #104]	; (8007d04 <HAL_TIM_PWM_Start+0x1f8>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d009      	beq.n	8007cb4 <HAL_TIM_PWM_Start+0x1a8>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a1e      	ldr	r2, [pc, #120]	; (8007d20 <HAL_TIM_PWM_Start+0x214>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d004      	beq.n	8007cb4 <HAL_TIM_PWM_Start+0x1a8>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a16      	ldr	r2, [pc, #88]	; (8007d08 <HAL_TIM_PWM_Start+0x1fc>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d115      	bne.n	8007ce0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	689a      	ldr	r2, [r3, #8]
 8007cba:	4b1a      	ldr	r3, [pc, #104]	; (8007d24 <HAL_TIM_PWM_Start+0x218>)
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2b06      	cmp	r3, #6
 8007cc4:	d015      	beq.n	8007cf2 <HAL_TIM_PWM_Start+0x1e6>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ccc:	d011      	beq.n	8007cf2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f042 0201 	orr.w	r2, r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cde:	e008      	b.n	8007cf2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f042 0201 	orr.w	r2, r2, #1
 8007cee:	601a      	str	r2, [r3, #0]
 8007cf0:	e000      	b.n	8007cf4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cf2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	40010000 	.word	0x40010000
 8007d04:	40010400 	.word	0x40010400
 8007d08:	40014000 	.word	0x40014000
 8007d0c:	40014400 	.word	0x40014400
 8007d10:	40014800 	.word	0x40014800
 8007d14:	40000400 	.word	0x40000400
 8007d18:	40000800 	.word	0x40000800
 8007d1c:	40000c00 	.word	0x40000c00
 8007d20:	40001800 	.word	0x40001800
 8007d24:	00010007 	.word	0x00010007

08007d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	f003 0302 	and.w	r3, r3, #2
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d122      	bne.n	8007d84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d11b      	bne.n	8007d84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f06f 0202 	mvn.w	r2, #2
 8007d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	f003 0303 	and.w	r3, r3, #3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fb1c 	bl	80083a8 <HAL_TIM_IC_CaptureCallback>
 8007d70:	e005      	b.n	8007d7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fb0e 	bl	8008394 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fb1f 	bl	80083bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	f003 0304 	and.w	r3, r3, #4
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	d122      	bne.n	8007dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f003 0304 	and.w	r3, r3, #4
 8007d9c:	2b04      	cmp	r3, #4
 8007d9e:	d11b      	bne.n	8007dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f06f 0204 	mvn.w	r2, #4
 8007da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2202      	movs	r2, #2
 8007dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d003      	beq.n	8007dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 faf2 	bl	80083a8 <HAL_TIM_IC_CaptureCallback>
 8007dc4:	e005      	b.n	8007dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fae4 	bl	8008394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 faf5 	bl	80083bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	f003 0308 	and.w	r3, r3, #8
 8007de2:	2b08      	cmp	r3, #8
 8007de4:	d122      	bne.n	8007e2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f003 0308 	and.w	r3, r3, #8
 8007df0:	2b08      	cmp	r3, #8
 8007df2:	d11b      	bne.n	8007e2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f06f 0208 	mvn.w	r2, #8
 8007dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2204      	movs	r2, #4
 8007e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	69db      	ldr	r3, [r3, #28]
 8007e0a:	f003 0303 	and.w	r3, r3, #3
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d003      	beq.n	8007e1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fac8 	bl	80083a8 <HAL_TIM_IC_CaptureCallback>
 8007e18:	e005      	b.n	8007e26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 faba 	bl	8008394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 facb 	bl	80083bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	f003 0310 	and.w	r3, r3, #16
 8007e36:	2b10      	cmp	r3, #16
 8007e38:	d122      	bne.n	8007e80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f003 0310 	and.w	r3, r3, #16
 8007e44:	2b10      	cmp	r3, #16
 8007e46:	d11b      	bne.n	8007e80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f06f 0210 	mvn.w	r2, #16
 8007e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2208      	movs	r2, #8
 8007e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d003      	beq.n	8007e6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fa9e 	bl	80083a8 <HAL_TIM_IC_CaptureCallback>
 8007e6c:	e005      	b.n	8007e7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fa90 	bl	8008394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 faa1 	bl	80083bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d10e      	bne.n	8007eac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d107      	bne.n	8007eac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f06f 0201 	mvn.w	r2, #1
 8007ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fa6a 	bl	8008380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb6:	2b80      	cmp	r3, #128	; 0x80
 8007eb8:	d10e      	bne.n	8007ed8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec4:	2b80      	cmp	r3, #128	; 0x80
 8007ec6:	d107      	bne.n	8007ed8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 ff52 	bl	8008d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ee6:	d10e      	bne.n	8007f06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef2:	2b80      	cmp	r3, #128	; 0x80
 8007ef4:	d107      	bne.n	8007f06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 ff45 	bl	8008d90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f10:	2b40      	cmp	r3, #64	; 0x40
 8007f12:	d10e      	bne.n	8007f32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1e:	2b40      	cmp	r3, #64	; 0x40
 8007f20:	d107      	bne.n	8007f32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fa4f 	bl	80083d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	f003 0320 	and.w	r3, r3, #32
 8007f3c:	2b20      	cmp	r3, #32
 8007f3e:	d10e      	bne.n	8007f5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	f003 0320 	and.w	r3, r3, #32
 8007f4a:	2b20      	cmp	r3, #32
 8007f4c:	d107      	bne.n	8007f5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f06f 0220 	mvn.w	r2, #32
 8007f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 ff05 	bl	8008d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f5e:	bf00      	nop
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
	...

08007f68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d101      	bne.n	8007f86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f82:	2302      	movs	r3, #2
 8007f84:	e0ff      	b.n	8008186 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2b14      	cmp	r3, #20
 8007f92:	f200 80f0 	bhi.w	8008176 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007f96:	a201      	add	r2, pc, #4	; (adr r2, 8007f9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9c:	08007ff1 	.word	0x08007ff1
 8007fa0:	08008177 	.word	0x08008177
 8007fa4:	08008177 	.word	0x08008177
 8007fa8:	08008177 	.word	0x08008177
 8007fac:	08008031 	.word	0x08008031
 8007fb0:	08008177 	.word	0x08008177
 8007fb4:	08008177 	.word	0x08008177
 8007fb8:	08008177 	.word	0x08008177
 8007fbc:	08008073 	.word	0x08008073
 8007fc0:	08008177 	.word	0x08008177
 8007fc4:	08008177 	.word	0x08008177
 8007fc8:	08008177 	.word	0x08008177
 8007fcc:	080080b3 	.word	0x080080b3
 8007fd0:	08008177 	.word	0x08008177
 8007fd4:	08008177 	.word	0x08008177
 8007fd8:	08008177 	.word	0x08008177
 8007fdc:	080080f5 	.word	0x080080f5
 8007fe0:	08008177 	.word	0x08008177
 8007fe4:	08008177 	.word	0x08008177
 8007fe8:	08008177 	.word	0x08008177
 8007fec:	08008135 	.word	0x08008135
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68b9      	ldr	r1, [r7, #8]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 fa8e 	bl	8008518 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	699a      	ldr	r2, [r3, #24]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f042 0208 	orr.w	r2, r2, #8
 800800a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	699a      	ldr	r2, [r3, #24]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 0204 	bic.w	r2, r2, #4
 800801a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6999      	ldr	r1, [r3, #24]
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	691a      	ldr	r2, [r3, #16]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	430a      	orrs	r2, r1
 800802c:	619a      	str	r2, [r3, #24]
      break;
 800802e:	e0a5      	b.n	800817c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68b9      	ldr	r1, [r7, #8]
 8008036:	4618      	mov	r0, r3
 8008038:	f000 fafe 	bl	8008638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	699a      	ldr	r2, [r3, #24]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800804a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	699a      	ldr	r2, [r3, #24]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800805a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6999      	ldr	r1, [r3, #24]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	021a      	lsls	r2, r3, #8
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	430a      	orrs	r2, r1
 800806e:	619a      	str	r2, [r3, #24]
      break;
 8008070:	e084      	b.n	800817c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68b9      	ldr	r1, [r7, #8]
 8008078:	4618      	mov	r0, r3
 800807a:	f000 fb67 	bl	800874c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	69da      	ldr	r2, [r3, #28]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f042 0208 	orr.w	r2, r2, #8
 800808c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	69da      	ldr	r2, [r3, #28]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f022 0204 	bic.w	r2, r2, #4
 800809c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	69d9      	ldr	r1, [r3, #28]
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	691a      	ldr	r2, [r3, #16]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	430a      	orrs	r2, r1
 80080ae:	61da      	str	r2, [r3, #28]
      break;
 80080b0:	e064      	b.n	800817c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68b9      	ldr	r1, [r7, #8]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 fbcf 	bl	800885c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	69da      	ldr	r2, [r3, #28]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	69da      	ldr	r2, [r3, #28]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	69d9      	ldr	r1, [r3, #28]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	021a      	lsls	r2, r3, #8
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	61da      	str	r2, [r3, #28]
      break;
 80080f2:	e043      	b.n	800817c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68b9      	ldr	r1, [r7, #8]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 fc18 	bl	8008930 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f042 0208 	orr.w	r2, r2, #8
 800810e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f022 0204 	bic.w	r2, r2, #4
 800811e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	691a      	ldr	r2, [r3, #16]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	430a      	orrs	r2, r1
 8008130:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008132:	e023      	b.n	800817c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68b9      	ldr	r1, [r7, #8]
 800813a:	4618      	mov	r0, r3
 800813c:	f000 fc5c 	bl	80089f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800814e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800815e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	021a      	lsls	r2, r3, #8
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	430a      	orrs	r2, r1
 8008172:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008174:	e002      	b.n	800817c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	75fb      	strb	r3, [r7, #23]
      break;
 800817a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008184:	7dfb      	ldrb	r3, [r7, #23]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop

08008190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d101      	bne.n	80081ac <HAL_TIM_ConfigClockSource+0x1c>
 80081a8:	2302      	movs	r3, #2
 80081aa:	e0dc      	b.n	8008366 <HAL_TIM_ConfigClockSource+0x1d6>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2202      	movs	r2, #2
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	4b6a      	ldr	r3, [pc, #424]	; (8008370 <HAL_TIM_ConfigClockSource+0x1e0>)
 80081c8:	4013      	ands	r3, r2
 80081ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a64      	ldr	r2, [pc, #400]	; (8008374 <HAL_TIM_ConfigClockSource+0x1e4>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	f000 80a9 	beq.w	800833a <HAL_TIM_ConfigClockSource+0x1aa>
 80081e8:	4a62      	ldr	r2, [pc, #392]	; (8008374 <HAL_TIM_ConfigClockSource+0x1e4>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	f200 80ae 	bhi.w	800834c <HAL_TIM_ConfigClockSource+0x1bc>
 80081f0:	4a61      	ldr	r2, [pc, #388]	; (8008378 <HAL_TIM_ConfigClockSource+0x1e8>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	f000 80a1 	beq.w	800833a <HAL_TIM_ConfigClockSource+0x1aa>
 80081f8:	4a5f      	ldr	r2, [pc, #380]	; (8008378 <HAL_TIM_ConfigClockSource+0x1e8>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	f200 80a6 	bhi.w	800834c <HAL_TIM_ConfigClockSource+0x1bc>
 8008200:	4a5e      	ldr	r2, [pc, #376]	; (800837c <HAL_TIM_ConfigClockSource+0x1ec>)
 8008202:	4293      	cmp	r3, r2
 8008204:	f000 8099 	beq.w	800833a <HAL_TIM_ConfigClockSource+0x1aa>
 8008208:	4a5c      	ldr	r2, [pc, #368]	; (800837c <HAL_TIM_ConfigClockSource+0x1ec>)
 800820a:	4293      	cmp	r3, r2
 800820c:	f200 809e 	bhi.w	800834c <HAL_TIM_ConfigClockSource+0x1bc>
 8008210:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008214:	f000 8091 	beq.w	800833a <HAL_TIM_ConfigClockSource+0x1aa>
 8008218:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800821c:	f200 8096 	bhi.w	800834c <HAL_TIM_ConfigClockSource+0x1bc>
 8008220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008224:	f000 8089 	beq.w	800833a <HAL_TIM_ConfigClockSource+0x1aa>
 8008228:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800822c:	f200 808e 	bhi.w	800834c <HAL_TIM_ConfigClockSource+0x1bc>
 8008230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008234:	d03e      	beq.n	80082b4 <HAL_TIM_ConfigClockSource+0x124>
 8008236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800823a:	f200 8087 	bhi.w	800834c <HAL_TIM_ConfigClockSource+0x1bc>
 800823e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008242:	f000 8086 	beq.w	8008352 <HAL_TIM_ConfigClockSource+0x1c2>
 8008246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800824a:	d87f      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x1bc>
 800824c:	2b70      	cmp	r3, #112	; 0x70
 800824e:	d01a      	beq.n	8008286 <HAL_TIM_ConfigClockSource+0xf6>
 8008250:	2b70      	cmp	r3, #112	; 0x70
 8008252:	d87b      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x1bc>
 8008254:	2b60      	cmp	r3, #96	; 0x60
 8008256:	d050      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x16a>
 8008258:	2b60      	cmp	r3, #96	; 0x60
 800825a:	d877      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x1bc>
 800825c:	2b50      	cmp	r3, #80	; 0x50
 800825e:	d03c      	beq.n	80082da <HAL_TIM_ConfigClockSource+0x14a>
 8008260:	2b50      	cmp	r3, #80	; 0x50
 8008262:	d873      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x1bc>
 8008264:	2b40      	cmp	r3, #64	; 0x40
 8008266:	d058      	beq.n	800831a <HAL_TIM_ConfigClockSource+0x18a>
 8008268:	2b40      	cmp	r3, #64	; 0x40
 800826a:	d86f      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x1bc>
 800826c:	2b30      	cmp	r3, #48	; 0x30
 800826e:	d064      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x1aa>
 8008270:	2b30      	cmp	r3, #48	; 0x30
 8008272:	d86b      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x1bc>
 8008274:	2b20      	cmp	r3, #32
 8008276:	d060      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x1aa>
 8008278:	2b20      	cmp	r3, #32
 800827a:	d867      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x1bc>
 800827c:	2b00      	cmp	r3, #0
 800827e:	d05c      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x1aa>
 8008280:	2b10      	cmp	r3, #16
 8008282:	d05a      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x1aa>
 8008284:	e062      	b.n	800834c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6818      	ldr	r0, [r3, #0]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	6899      	ldr	r1, [r3, #8]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	f000 fc93 	bl	8008bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80082a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	609a      	str	r2, [r3, #8]
      break;
 80082b2:	e04f      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6818      	ldr	r0, [r3, #0]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	6899      	ldr	r1, [r3, #8]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	f000 fc7c 	bl	8008bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	689a      	ldr	r2, [r3, #8]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082d6:	609a      	str	r2, [r3, #8]
      break;
 80082d8:	e03c      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6818      	ldr	r0, [r3, #0]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	6859      	ldr	r1, [r3, #4]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	461a      	mov	r2, r3
 80082e8:	f000 fbec 	bl	8008ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2150      	movs	r1, #80	; 0x50
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 fc46 	bl	8008b84 <TIM_ITRx_SetConfig>
      break;
 80082f8:	e02c      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6818      	ldr	r0, [r3, #0]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	6859      	ldr	r1, [r3, #4]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	461a      	mov	r2, r3
 8008308:	f000 fc0b 	bl	8008b22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2160      	movs	r1, #96	; 0x60
 8008312:	4618      	mov	r0, r3
 8008314:	f000 fc36 	bl	8008b84 <TIM_ITRx_SetConfig>
      break;
 8008318:	e01c      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6818      	ldr	r0, [r3, #0]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	6859      	ldr	r1, [r3, #4]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	461a      	mov	r2, r3
 8008328:	f000 fbcc 	bl	8008ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2140      	movs	r1, #64	; 0x40
 8008332:	4618      	mov	r0, r3
 8008334:	f000 fc26 	bl	8008b84 <TIM_ITRx_SetConfig>
      break;
 8008338:	e00c      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4619      	mov	r1, r3
 8008344:	4610      	mov	r0, r2
 8008346:	f000 fc1d 	bl	8008b84 <TIM_ITRx_SetConfig>
      break;
 800834a:	e003      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	73fb      	strb	r3, [r7, #15]
      break;
 8008350:	e000      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008352:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008364:	7bfb      	ldrb	r3, [r7, #15]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	ffceff88 	.word	0xffceff88
 8008374:	00100040 	.word	0x00100040
 8008378:	00100030 	.word	0x00100030
 800837c:	00100020 	.word	0x00100020

08008380 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a40      	ldr	r2, [pc, #256]	; (80084f8 <TIM_Base_SetConfig+0x114>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d013      	beq.n	8008424 <TIM_Base_SetConfig+0x40>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008402:	d00f      	beq.n	8008424 <TIM_Base_SetConfig+0x40>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a3d      	ldr	r2, [pc, #244]	; (80084fc <TIM_Base_SetConfig+0x118>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d00b      	beq.n	8008424 <TIM_Base_SetConfig+0x40>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a3c      	ldr	r2, [pc, #240]	; (8008500 <TIM_Base_SetConfig+0x11c>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d007      	beq.n	8008424 <TIM_Base_SetConfig+0x40>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a3b      	ldr	r2, [pc, #236]	; (8008504 <TIM_Base_SetConfig+0x120>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d003      	beq.n	8008424 <TIM_Base_SetConfig+0x40>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a3a      	ldr	r2, [pc, #232]	; (8008508 <TIM_Base_SetConfig+0x124>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d108      	bne.n	8008436 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800842a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	4313      	orrs	r3, r2
 8008434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a2f      	ldr	r2, [pc, #188]	; (80084f8 <TIM_Base_SetConfig+0x114>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d01f      	beq.n	800847e <TIM_Base_SetConfig+0x9a>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008444:	d01b      	beq.n	800847e <TIM_Base_SetConfig+0x9a>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a2c      	ldr	r2, [pc, #176]	; (80084fc <TIM_Base_SetConfig+0x118>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d017      	beq.n	800847e <TIM_Base_SetConfig+0x9a>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a2b      	ldr	r2, [pc, #172]	; (8008500 <TIM_Base_SetConfig+0x11c>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d013      	beq.n	800847e <TIM_Base_SetConfig+0x9a>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a2a      	ldr	r2, [pc, #168]	; (8008504 <TIM_Base_SetConfig+0x120>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d00f      	beq.n	800847e <TIM_Base_SetConfig+0x9a>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a29      	ldr	r2, [pc, #164]	; (8008508 <TIM_Base_SetConfig+0x124>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d00b      	beq.n	800847e <TIM_Base_SetConfig+0x9a>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a28      	ldr	r2, [pc, #160]	; (800850c <TIM_Base_SetConfig+0x128>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d007      	beq.n	800847e <TIM_Base_SetConfig+0x9a>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a27      	ldr	r2, [pc, #156]	; (8008510 <TIM_Base_SetConfig+0x12c>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d003      	beq.n	800847e <TIM_Base_SetConfig+0x9a>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a26      	ldr	r2, [pc, #152]	; (8008514 <TIM_Base_SetConfig+0x130>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d108      	bne.n	8008490 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	4313      	orrs	r3, r2
 800848e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	4313      	orrs	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a10      	ldr	r2, [pc, #64]	; (80084f8 <TIM_Base_SetConfig+0x114>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d00f      	beq.n	80084dc <TIM_Base_SetConfig+0xf8>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a12      	ldr	r2, [pc, #72]	; (8008508 <TIM_Base_SetConfig+0x124>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d00b      	beq.n	80084dc <TIM_Base_SetConfig+0xf8>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a11      	ldr	r2, [pc, #68]	; (800850c <TIM_Base_SetConfig+0x128>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d007      	beq.n	80084dc <TIM_Base_SetConfig+0xf8>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a10      	ldr	r2, [pc, #64]	; (8008510 <TIM_Base_SetConfig+0x12c>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d003      	beq.n	80084dc <TIM_Base_SetConfig+0xf8>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a0f      	ldr	r2, [pc, #60]	; (8008514 <TIM_Base_SetConfig+0x130>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d103      	bne.n	80084e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	691a      	ldr	r2, [r3, #16]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	615a      	str	r2, [r3, #20]
}
 80084ea:	bf00      	nop
 80084ec:	3714      	adds	r7, #20
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	40010000 	.word	0x40010000
 80084fc:	40000400 	.word	0x40000400
 8008500:	40000800 	.word	0x40000800
 8008504:	40000c00 	.word	0x40000c00
 8008508:	40010400 	.word	0x40010400
 800850c:	40014000 	.word	0x40014000
 8008510:	40014400 	.word	0x40014400
 8008514:	40014800 	.word	0x40014800

08008518 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008518:	b480      	push	{r7}
 800851a:	b087      	sub	sp, #28
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	f023 0201 	bic.w	r2, r3, #1
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	4b37      	ldr	r3, [pc, #220]	; (8008620 <TIM_OC1_SetConfig+0x108>)
 8008544:	4013      	ands	r3, r2
 8008546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f023 0303 	bic.w	r3, r3, #3
 800854e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	4313      	orrs	r3, r2
 8008558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f023 0302 	bic.w	r3, r3, #2
 8008560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	4313      	orrs	r3, r2
 800856a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a2d      	ldr	r2, [pc, #180]	; (8008624 <TIM_OC1_SetConfig+0x10c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d00f      	beq.n	8008594 <TIM_OC1_SetConfig+0x7c>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a2c      	ldr	r2, [pc, #176]	; (8008628 <TIM_OC1_SetConfig+0x110>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d00b      	beq.n	8008594 <TIM_OC1_SetConfig+0x7c>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a2b      	ldr	r2, [pc, #172]	; (800862c <TIM_OC1_SetConfig+0x114>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d007      	beq.n	8008594 <TIM_OC1_SetConfig+0x7c>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a2a      	ldr	r2, [pc, #168]	; (8008630 <TIM_OC1_SetConfig+0x118>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d003      	beq.n	8008594 <TIM_OC1_SetConfig+0x7c>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a29      	ldr	r2, [pc, #164]	; (8008634 <TIM_OC1_SetConfig+0x11c>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d10c      	bne.n	80085ae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f023 0308 	bic.w	r3, r3, #8
 800859a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f023 0304 	bic.w	r3, r3, #4
 80085ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a1c      	ldr	r2, [pc, #112]	; (8008624 <TIM_OC1_SetConfig+0x10c>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d00f      	beq.n	80085d6 <TIM_OC1_SetConfig+0xbe>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a1b      	ldr	r2, [pc, #108]	; (8008628 <TIM_OC1_SetConfig+0x110>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d00b      	beq.n	80085d6 <TIM_OC1_SetConfig+0xbe>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a1a      	ldr	r2, [pc, #104]	; (800862c <TIM_OC1_SetConfig+0x114>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d007      	beq.n	80085d6 <TIM_OC1_SetConfig+0xbe>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a19      	ldr	r2, [pc, #100]	; (8008630 <TIM_OC1_SetConfig+0x118>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d003      	beq.n	80085d6 <TIM_OC1_SetConfig+0xbe>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a18      	ldr	r2, [pc, #96]	; (8008634 <TIM_OC1_SetConfig+0x11c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d111      	bne.n	80085fa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	685a      	ldr	r2, [r3, #4]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	697a      	ldr	r2, [r7, #20]
 8008612:	621a      	str	r2, [r3, #32]
}
 8008614:	bf00      	nop
 8008616:	371c      	adds	r7, #28
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr
 8008620:	fffeff8f 	.word	0xfffeff8f
 8008624:	40010000 	.word	0x40010000
 8008628:	40010400 	.word	0x40010400
 800862c:	40014000 	.word	0x40014000
 8008630:	40014400 	.word	0x40014400
 8008634:	40014800 	.word	0x40014800

08008638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008638:	b480      	push	{r7}
 800863a:	b087      	sub	sp, #28
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a1b      	ldr	r3, [r3, #32]
 8008646:	f023 0210 	bic.w	r2, r3, #16
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	4b34      	ldr	r3, [pc, #208]	; (8008734 <TIM_OC2_SetConfig+0xfc>)
 8008664:	4013      	ands	r3, r2
 8008666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800866e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	021b      	lsls	r3, r3, #8
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	4313      	orrs	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	f023 0320 	bic.w	r3, r3, #32
 8008682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	011b      	lsls	r3, r3, #4
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	4313      	orrs	r3, r2
 800868e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a29      	ldr	r2, [pc, #164]	; (8008738 <TIM_OC2_SetConfig+0x100>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d003      	beq.n	80086a0 <TIM_OC2_SetConfig+0x68>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a28      	ldr	r2, [pc, #160]	; (800873c <TIM_OC2_SetConfig+0x104>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d10d      	bne.n	80086bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	011b      	lsls	r3, r3, #4
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a1e      	ldr	r2, [pc, #120]	; (8008738 <TIM_OC2_SetConfig+0x100>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d00f      	beq.n	80086e4 <TIM_OC2_SetConfig+0xac>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a1d      	ldr	r2, [pc, #116]	; (800873c <TIM_OC2_SetConfig+0x104>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d00b      	beq.n	80086e4 <TIM_OC2_SetConfig+0xac>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a1c      	ldr	r2, [pc, #112]	; (8008740 <TIM_OC2_SetConfig+0x108>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d007      	beq.n	80086e4 <TIM_OC2_SetConfig+0xac>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a1b      	ldr	r2, [pc, #108]	; (8008744 <TIM_OC2_SetConfig+0x10c>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d003      	beq.n	80086e4 <TIM_OC2_SetConfig+0xac>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a1a      	ldr	r2, [pc, #104]	; (8008748 <TIM_OC2_SetConfig+0x110>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d113      	bne.n	800870c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4313      	orrs	r3, r2
 800870a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	621a      	str	r2, [r3, #32]
}
 8008726:	bf00      	nop
 8008728:	371c      	adds	r7, #28
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	feff8fff 	.word	0xfeff8fff
 8008738:	40010000 	.word	0x40010000
 800873c:	40010400 	.word	0x40010400
 8008740:	40014000 	.word	0x40014000
 8008744:	40014400 	.word	0x40014400
 8008748:	40014800 	.word	0x40014800

0800874c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800874c:	b480      	push	{r7}
 800874e:	b087      	sub	sp, #28
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a1b      	ldr	r3, [r3, #32]
 800875a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	4b33      	ldr	r3, [pc, #204]	; (8008844 <TIM_OC3_SetConfig+0xf8>)
 8008778:	4013      	ands	r3, r2
 800877a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f023 0303 	bic.w	r3, r3, #3
 8008782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	4313      	orrs	r3, r2
 800878c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	021b      	lsls	r3, r3, #8
 800879c:	697a      	ldr	r2, [r7, #20]
 800879e:	4313      	orrs	r3, r2
 80087a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a28      	ldr	r2, [pc, #160]	; (8008848 <TIM_OC3_SetConfig+0xfc>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d003      	beq.n	80087b2 <TIM_OC3_SetConfig+0x66>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a27      	ldr	r2, [pc, #156]	; (800884c <TIM_OC3_SetConfig+0x100>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d10d      	bne.n	80087ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	021b      	lsls	r3, r3, #8
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a1d      	ldr	r2, [pc, #116]	; (8008848 <TIM_OC3_SetConfig+0xfc>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d00f      	beq.n	80087f6 <TIM_OC3_SetConfig+0xaa>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a1c      	ldr	r2, [pc, #112]	; (800884c <TIM_OC3_SetConfig+0x100>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d00b      	beq.n	80087f6 <TIM_OC3_SetConfig+0xaa>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a1b      	ldr	r2, [pc, #108]	; (8008850 <TIM_OC3_SetConfig+0x104>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d007      	beq.n	80087f6 <TIM_OC3_SetConfig+0xaa>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a1a      	ldr	r2, [pc, #104]	; (8008854 <TIM_OC3_SetConfig+0x108>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d003      	beq.n	80087f6 <TIM_OC3_SetConfig+0xaa>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a19      	ldr	r2, [pc, #100]	; (8008858 <TIM_OC3_SetConfig+0x10c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d113      	bne.n	800881e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	011b      	lsls	r3, r3, #4
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	4313      	orrs	r3, r2
 8008810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	011b      	lsls	r3, r3, #4
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	4313      	orrs	r3, r2
 800881c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	621a      	str	r2, [r3, #32]
}
 8008838:	bf00      	nop
 800883a:	371c      	adds	r7, #28
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	fffeff8f 	.word	0xfffeff8f
 8008848:	40010000 	.word	0x40010000
 800884c:	40010400 	.word	0x40010400
 8008850:	40014000 	.word	0x40014000
 8008854:	40014400 	.word	0x40014400
 8008858:	40014800 	.word	0x40014800

0800885c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800885c:	b480      	push	{r7}
 800885e:	b087      	sub	sp, #28
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a1b      	ldr	r3, [r3, #32]
 800886a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	69db      	ldr	r3, [r3, #28]
 8008882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	4b24      	ldr	r3, [pc, #144]	; (8008918 <TIM_OC4_SetConfig+0xbc>)
 8008888:	4013      	ands	r3, r2
 800888a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	021b      	lsls	r3, r3, #8
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	4313      	orrs	r3, r2
 800889e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	031b      	lsls	r3, r3, #12
 80088ae:	693a      	ldr	r2, [r7, #16]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a19      	ldr	r2, [pc, #100]	; (800891c <TIM_OC4_SetConfig+0xc0>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d00f      	beq.n	80088dc <TIM_OC4_SetConfig+0x80>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a18      	ldr	r2, [pc, #96]	; (8008920 <TIM_OC4_SetConfig+0xc4>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d00b      	beq.n	80088dc <TIM_OC4_SetConfig+0x80>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a17      	ldr	r2, [pc, #92]	; (8008924 <TIM_OC4_SetConfig+0xc8>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d007      	beq.n	80088dc <TIM_OC4_SetConfig+0x80>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a16      	ldr	r2, [pc, #88]	; (8008928 <TIM_OC4_SetConfig+0xcc>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d003      	beq.n	80088dc <TIM_OC4_SetConfig+0x80>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a15      	ldr	r2, [pc, #84]	; (800892c <TIM_OC4_SetConfig+0xd0>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d109      	bne.n	80088f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	019b      	lsls	r3, r3, #6
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	697a      	ldr	r2, [r7, #20]
 80088f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	621a      	str	r2, [r3, #32]
}
 800890a:	bf00      	nop
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	feff8fff 	.word	0xfeff8fff
 800891c:	40010000 	.word	0x40010000
 8008920:	40010400 	.word	0x40010400
 8008924:	40014000 	.word	0x40014000
 8008928:	40014400 	.word	0x40014400
 800892c:	40014800 	.word	0x40014800

08008930 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008930:	b480      	push	{r7}
 8008932:	b087      	sub	sp, #28
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	4b21      	ldr	r3, [pc, #132]	; (80089e0 <TIM_OC5_SetConfig+0xb0>)
 800895c:	4013      	ands	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	4313      	orrs	r3, r2
 8008968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008970:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	041b      	lsls	r3, r3, #16
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	4313      	orrs	r3, r2
 800897c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a18      	ldr	r2, [pc, #96]	; (80089e4 <TIM_OC5_SetConfig+0xb4>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d00f      	beq.n	80089a6 <TIM_OC5_SetConfig+0x76>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a17      	ldr	r2, [pc, #92]	; (80089e8 <TIM_OC5_SetConfig+0xb8>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d00b      	beq.n	80089a6 <TIM_OC5_SetConfig+0x76>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a16      	ldr	r2, [pc, #88]	; (80089ec <TIM_OC5_SetConfig+0xbc>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d007      	beq.n	80089a6 <TIM_OC5_SetConfig+0x76>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a15      	ldr	r2, [pc, #84]	; (80089f0 <TIM_OC5_SetConfig+0xc0>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d003      	beq.n	80089a6 <TIM_OC5_SetConfig+0x76>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a14      	ldr	r2, [pc, #80]	; (80089f4 <TIM_OC5_SetConfig+0xc4>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d109      	bne.n	80089ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	021b      	lsls	r3, r3, #8
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	697a      	ldr	r2, [r7, #20]
 80089be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	685a      	ldr	r2, [r3, #4]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	621a      	str	r2, [r3, #32]
}
 80089d4:	bf00      	nop
 80089d6:	371c      	adds	r7, #28
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	fffeff8f 	.word	0xfffeff8f
 80089e4:	40010000 	.word	0x40010000
 80089e8:	40010400 	.word	0x40010400
 80089ec:	40014000 	.word	0x40014000
 80089f0:	40014400 	.word	0x40014400
 80089f4:	40014800 	.word	0x40014800

080089f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	4b22      	ldr	r3, [pc, #136]	; (8008aac <TIM_OC6_SetConfig+0xb4>)
 8008a24:	4013      	ands	r3, r2
 8008a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	021b      	lsls	r3, r3, #8
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	051b      	lsls	r3, r3, #20
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a19      	ldr	r2, [pc, #100]	; (8008ab0 <TIM_OC6_SetConfig+0xb8>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d00f      	beq.n	8008a70 <TIM_OC6_SetConfig+0x78>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a18      	ldr	r2, [pc, #96]	; (8008ab4 <TIM_OC6_SetConfig+0xbc>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d00b      	beq.n	8008a70 <TIM_OC6_SetConfig+0x78>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a17      	ldr	r2, [pc, #92]	; (8008ab8 <TIM_OC6_SetConfig+0xc0>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d007      	beq.n	8008a70 <TIM_OC6_SetConfig+0x78>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a16      	ldr	r2, [pc, #88]	; (8008abc <TIM_OC6_SetConfig+0xc4>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d003      	beq.n	8008a70 <TIM_OC6_SetConfig+0x78>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a15      	ldr	r2, [pc, #84]	; (8008ac0 <TIM_OC6_SetConfig+0xc8>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d109      	bne.n	8008a84 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	029b      	lsls	r3, r3, #10
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	685a      	ldr	r2, [r3, #4]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	621a      	str	r2, [r3, #32]
}
 8008a9e:	bf00      	nop
 8008aa0:	371c      	adds	r7, #28
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	feff8fff 	.word	0xfeff8fff
 8008ab0:	40010000 	.word	0x40010000
 8008ab4:	40010400 	.word	0x40010400
 8008ab8:	40014000 	.word	0x40014000
 8008abc:	40014400 	.word	0x40014400
 8008ac0:	40014800 	.word	0x40014800

08008ac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b087      	sub	sp, #28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6a1b      	ldr	r3, [r3, #32]
 8008ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	f023 0201 	bic.w	r2, r3, #1
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	011b      	lsls	r3, r3, #4
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f023 030a 	bic.w	r3, r3, #10
 8008b00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	693a      	ldr	r2, [r7, #16]
 8008b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	621a      	str	r2, [r3, #32]
}
 8008b16:	bf00      	nop
 8008b18:	371c      	adds	r7, #28
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr

08008b22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b22:	b480      	push	{r7}
 8008b24:	b087      	sub	sp, #28
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	60f8      	str	r0, [r7, #12]
 8008b2a:	60b9      	str	r1, [r7, #8]
 8008b2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	f023 0210 	bic.w	r2, r3, #16
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6a1b      	ldr	r3, [r3, #32]
 8008b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	031b      	lsls	r3, r3, #12
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	011b      	lsls	r3, r3, #4
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	621a      	str	r2, [r3, #32]
}
 8008b76:	bf00      	nop
 8008b78:	371c      	adds	r7, #28
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
	...

08008b84 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	4b09      	ldr	r3, [pc, #36]	; (8008bbc <TIM_ITRx_SetConfig+0x38>)
 8008b98:	4013      	ands	r3, r2
 8008b9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b9c:	683a      	ldr	r2, [r7, #0]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	f043 0307 	orr.w	r3, r3, #7
 8008ba6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	609a      	str	r2, [r3, #8]
}
 8008bae:	bf00      	nop
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	ffcfff8f 	.word	0xffcfff8f

08008bc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b087      	sub	sp, #28
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
 8008bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	021a      	lsls	r2, r3, #8
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	431a      	orrs	r2, r3
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	697a      	ldr	r2, [r7, #20]
 8008bf2:	609a      	str	r2, [r3, #8]
}
 8008bf4:	bf00      	nop
 8008bf6:	371c      	adds	r7, #28
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b087      	sub	sp, #28
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	f003 031f 	and.w	r3, r3, #31
 8008c12:	2201      	movs	r2, #1
 8008c14:	fa02 f303 	lsl.w	r3, r2, r3
 8008c18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6a1a      	ldr	r2, [r3, #32]
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	43db      	mvns	r3, r3
 8008c22:	401a      	ands	r2, r3
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6a1a      	ldr	r2, [r3, #32]
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	f003 031f 	and.w	r3, r3, #31
 8008c32:	6879      	ldr	r1, [r7, #4]
 8008c34:	fa01 f303 	lsl.w	r3, r1, r3
 8008c38:	431a      	orrs	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	621a      	str	r2, [r3, #32]
}
 8008c3e:	bf00      	nop
 8008c40:	371c      	adds	r7, #28
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
	...

08008c4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d101      	bne.n	8008c64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c60:	2302      	movs	r3, #2
 8008c62:	e06d      	b.n	8008d40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2202      	movs	r2, #2
 8008c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a30      	ldr	r2, [pc, #192]	; (8008d4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d004      	beq.n	8008c98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a2f      	ldr	r2, [pc, #188]	; (8008d50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d108      	bne.n	8008caa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a20      	ldr	r2, [pc, #128]	; (8008d4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d022      	beq.n	8008d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cd6:	d01d      	beq.n	8008d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a1d      	ldr	r2, [pc, #116]	; (8008d54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d018      	beq.n	8008d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a1c      	ldr	r2, [pc, #112]	; (8008d58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d013      	beq.n	8008d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a1a      	ldr	r2, [pc, #104]	; (8008d5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d00e      	beq.n	8008d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a15      	ldr	r2, [pc, #84]	; (8008d50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d009      	beq.n	8008d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a16      	ldr	r2, [pc, #88]	; (8008d60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d004      	beq.n	8008d14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a15      	ldr	r2, [pc, #84]	; (8008d64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d10c      	bne.n	8008d2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68ba      	ldr	r2, [r7, #8]
 8008d2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	40010000 	.word	0x40010000
 8008d50:	40010400 	.word	0x40010400
 8008d54:	40000400 	.word	0x40000400
 8008d58:	40000800 	.word	0x40000800
 8008d5c:	40000c00 	.word	0x40000c00
 8008d60:	40001800 	.word	0x40001800
 8008d64:	40014000 	.word	0x40014000

08008d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d101      	bne.n	8008db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e042      	b.n	8008e3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d106      	bne.n	8008dce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7f8 ff8f 	bl	8001cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2224      	movs	r2, #36	; 0x24
 8008dd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f022 0201 	bic.w	r2, r2, #1
 8008de4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fd74 	bl	80098d4 <UART_SetConfig>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d101      	bne.n	8008df6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e022      	b.n	8008e3c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d002      	beq.n	8008e04 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f001 fbd4 	bl	800a5ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685a      	ldr	r2, [r3, #4]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	689a      	ldr	r2, [r3, #8]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f042 0201 	orr.w	r2, r2, #1
 8008e32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f001 fc5b 	bl	800a6f0 <UART_CheckIdleState>
 8008e3a:	4603      	mov	r3, r0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b08a      	sub	sp, #40	; 0x28
 8008e48:	af02      	add	r7, sp, #8
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	603b      	str	r3, [r7, #0]
 8008e50:	4613      	mov	r3, r2
 8008e52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e5a:	2b20      	cmp	r3, #32
 8008e5c:	d17b      	bne.n	8008f56 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d002      	beq.n	8008e6a <HAL_UART_Transmit+0x26>
 8008e64:	88fb      	ldrh	r3, [r7, #6]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e074      	b.n	8008f58 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2221      	movs	r2, #33	; 0x21
 8008e7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e7e:	f7f9 f97f 	bl	8002180 <HAL_GetTick>
 8008e82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	88fa      	ldrh	r2, [r7, #6]
 8008e88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	88fa      	ldrh	r2, [r7, #6]
 8008e90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e9c:	d108      	bne.n	8008eb0 <HAL_UART_Transmit+0x6c>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d104      	bne.n	8008eb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	61bb      	str	r3, [r7, #24]
 8008eae:	e003      	b.n	8008eb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008eb8:	e030      	b.n	8008f1c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	2180      	movs	r1, #128	; 0x80
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f001 fcbd 	bl	800a844 <UART_WaitOnFlagUntilTimeout>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d005      	beq.n	8008edc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	e03d      	b.n	8008f58 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10b      	bne.n	8008efa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	881b      	ldrh	r3, [r3, #0]
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ef0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	3302      	adds	r3, #2
 8008ef6:	61bb      	str	r3, [r7, #24]
 8008ef8:	e007      	b.n	8008f0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	781a      	ldrb	r2, [r3, #0]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	3301      	adds	r3, #1
 8008f08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	3b01      	subs	r3, #1
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1c8      	bne.n	8008eba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	2140      	movs	r1, #64	; 0x40
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f001 fc86 	bl	800a844 <UART_WaitOnFlagUntilTimeout>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d005      	beq.n	8008f4a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2220      	movs	r2, #32
 8008f42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e006      	b.n	8008f58 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	e000      	b.n	8008f58 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008f56:	2302      	movs	r3, #2
  }
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3720      	adds	r7, #32
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b091      	sub	sp, #68	; 0x44
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f74:	2b20      	cmp	r3, #32
 8008f76:	d178      	bne.n	800906a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d002      	beq.n	8008f84 <HAL_UART_Transmit_IT+0x24>
 8008f7e:	88fb      	ldrh	r3, [r7, #6]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d101      	bne.n	8008f88 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e071      	b.n	800906c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	88fa      	ldrh	r2, [r7, #6]
 8008f92:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	88fa      	ldrh	r2, [r7, #6]
 8008f9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2221      	movs	r2, #33	; 0x21
 8008fb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fbc:	d12a      	bne.n	8009014 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fc6:	d107      	bne.n	8008fd8 <HAL_UART_Transmit_IT+0x78>
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d103      	bne.n	8008fd8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	4a29      	ldr	r2, [pc, #164]	; (8009078 <HAL_UART_Transmit_IT+0x118>)
 8008fd4:	679a      	str	r2, [r3, #120]	; 0x78
 8008fd6:	e002      	b.n	8008fde <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	4a28      	ldr	r2, [pc, #160]	; (800907c <HAL_UART_Transmit_IT+0x11c>)
 8008fdc:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	3308      	adds	r3, #8
 8008fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe8:	e853 3f00 	ldrex	r3, [r3]
 8008fec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ff4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ffe:	637a      	str	r2, [r7, #52]	; 0x34
 8009000:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009002:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009004:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009006:	e841 2300 	strex	r3, r2, [r1]
 800900a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800900c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1e5      	bne.n	8008fde <HAL_UART_Transmit_IT+0x7e>
 8009012:	e028      	b.n	8009066 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800901c:	d107      	bne.n	800902e <HAL_UART_Transmit_IT+0xce>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d103      	bne.n	800902e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	4a15      	ldr	r2, [pc, #84]	; (8009080 <HAL_UART_Transmit_IT+0x120>)
 800902a:	679a      	str	r2, [r3, #120]	; 0x78
 800902c:	e002      	b.n	8009034 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	4a14      	ldr	r2, [pc, #80]	; (8009084 <HAL_UART_Transmit_IT+0x124>)
 8009032:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	e853 3f00 	ldrex	r3, [r3]
 8009040:	613b      	str	r3, [r7, #16]
   return(result);
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	461a      	mov	r2, r3
 8009050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009052:	623b      	str	r3, [r7, #32]
 8009054:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009056:	69f9      	ldr	r1, [r7, #28]
 8009058:	6a3a      	ldr	r2, [r7, #32]
 800905a:	e841 2300 	strex	r3, r2, [r1]
 800905e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1e6      	bne.n	8009034 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	e000      	b.n	800906c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800906a:	2302      	movs	r3, #2
  }
}
 800906c:	4618      	mov	r0, r3
 800906e:	3744      	adds	r7, #68	; 0x44
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	0800aeab 	.word	0x0800aeab
 800907c:	0800adcb 	.word	0x0800adcb
 8009080:	0800ad09 	.word	0x0800ad09
 8009084:	0800ac51 	.word	0x0800ac51

08009088 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b08a      	sub	sp, #40	; 0x28
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	4613      	mov	r3, r2
 8009094:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800909c:	2b20      	cmp	r3, #32
 800909e:	d137      	bne.n	8009110 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d002      	beq.n	80090ac <HAL_UART_Receive_IT+0x24>
 80090a6:	88fb      	ldrh	r3, [r7, #6]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d101      	bne.n	80090b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	e030      	b.n	8009112 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a18      	ldr	r2, [pc, #96]	; (800911c <HAL_UART_Receive_IT+0x94>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d01f      	beq.n	8009100 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d018      	beq.n	8009100 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	e853 3f00 	ldrex	r3, [r3]
 80090da:	613b      	str	r3, [r7, #16]
   return(result);
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80090e2:	627b      	str	r3, [r7, #36]	; 0x24
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	461a      	mov	r2, r3
 80090ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ec:	623b      	str	r3, [r7, #32]
 80090ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f0:	69f9      	ldr	r1, [r7, #28]
 80090f2:	6a3a      	ldr	r2, [r7, #32]
 80090f4:	e841 2300 	strex	r3, r2, [r1]
 80090f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1e6      	bne.n	80090ce <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009100:	88fb      	ldrh	r3, [r7, #6]
 8009102:	461a      	mov	r2, r3
 8009104:	68b9      	ldr	r1, [r7, #8]
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f001 fc04 	bl	800a914 <UART_Start_Receive_IT>
 800910c:	4603      	mov	r3, r0
 800910e:	e000      	b.n	8009112 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009110:	2302      	movs	r3, #2
  }
}
 8009112:	4618      	mov	r0, r3
 8009114:	3728      	adds	r7, #40	; 0x28
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	58000c00 	.word	0x58000c00

08009120 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b0ba      	sub	sp, #232	; 0xe8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	69db      	ldr	r3, [r3, #28]
 800912e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009146:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800914a:	f640 030f 	movw	r3, #2063	; 0x80f
 800914e:	4013      	ands	r3, r2
 8009150:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009158:	2b00      	cmp	r3, #0
 800915a:	d11b      	bne.n	8009194 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800915c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009160:	f003 0320 	and.w	r3, r3, #32
 8009164:	2b00      	cmp	r3, #0
 8009166:	d015      	beq.n	8009194 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800916c:	f003 0320 	and.w	r3, r3, #32
 8009170:	2b00      	cmp	r3, #0
 8009172:	d105      	bne.n	8009180 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800917c:	2b00      	cmp	r3, #0
 800917e:	d009      	beq.n	8009194 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009184:	2b00      	cmp	r3, #0
 8009186:	f000 8377 	beq.w	8009878 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	4798      	blx	r3
      }
      return;
 8009192:	e371      	b.n	8009878 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009194:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009198:	2b00      	cmp	r3, #0
 800919a:	f000 8123 	beq.w	80093e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800919e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80091a2:	4b8d      	ldr	r3, [pc, #564]	; (80093d8 <HAL_UART_IRQHandler+0x2b8>)
 80091a4:	4013      	ands	r3, r2
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d106      	bne.n	80091b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80091aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80091ae:	4b8b      	ldr	r3, [pc, #556]	; (80093dc <HAL_UART_IRQHandler+0x2bc>)
 80091b0:	4013      	ands	r3, r2
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 8116 	beq.w	80093e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d011      	beq.n	80091e8 <HAL_UART_IRQHandler+0xc8>
 80091c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00b      	beq.n	80091e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2201      	movs	r2, #1
 80091d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091de:	f043 0201 	orr.w	r2, r3, #1
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ec:	f003 0302 	and.w	r3, r3, #2
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d011      	beq.n	8009218 <HAL_UART_IRQHandler+0xf8>
 80091f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091f8:	f003 0301 	and.w	r3, r3, #1
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00b      	beq.n	8009218 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2202      	movs	r2, #2
 8009206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800920e:	f043 0204 	orr.w	r2, r3, #4
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800921c:	f003 0304 	and.w	r3, r3, #4
 8009220:	2b00      	cmp	r3, #0
 8009222:	d011      	beq.n	8009248 <HAL_UART_IRQHandler+0x128>
 8009224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00b      	beq.n	8009248 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2204      	movs	r2, #4
 8009236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800923e:	f043 0202 	orr.w	r2, r3, #2
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800924c:	f003 0308 	and.w	r3, r3, #8
 8009250:	2b00      	cmp	r3, #0
 8009252:	d017      	beq.n	8009284 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009258:	f003 0320 	and.w	r3, r3, #32
 800925c:	2b00      	cmp	r3, #0
 800925e:	d105      	bne.n	800926c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009260:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009264:	4b5c      	ldr	r3, [pc, #368]	; (80093d8 <HAL_UART_IRQHandler+0x2b8>)
 8009266:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00b      	beq.n	8009284 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2208      	movs	r2, #8
 8009272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800927a:	f043 0208 	orr.w	r2, r3, #8
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800928c:	2b00      	cmp	r3, #0
 800928e:	d012      	beq.n	80092b6 <HAL_UART_IRQHandler+0x196>
 8009290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009294:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00c      	beq.n	80092b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ac:	f043 0220 	orr.w	r2, r3, #32
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 82dd 	beq.w	800987c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80092c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092c6:	f003 0320 	and.w	r3, r3, #32
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d013      	beq.n	80092f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80092ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092d2:	f003 0320 	and.w	r3, r3, #32
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d105      	bne.n	80092e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80092da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d007      	beq.n	80092f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800930a:	2b40      	cmp	r3, #64	; 0x40
 800930c:	d005      	beq.n	800931a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800930e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009312:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009316:	2b00      	cmp	r3, #0
 8009318:	d054      	beq.n	80093c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f001 fc1c 	bl	800ab58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800932a:	2b40      	cmp	r3, #64	; 0x40
 800932c:	d146      	bne.n	80093bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3308      	adds	r3, #8
 8009334:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800933c:	e853 3f00 	ldrex	r3, [r3]
 8009340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009344:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800934c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	3308      	adds	r3, #8
 8009356:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800935a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800935e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009362:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009366:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800936a:	e841 2300 	strex	r3, r2, [r1]
 800936e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1d9      	bne.n	800932e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009380:	2b00      	cmp	r3, #0
 8009382:	d017      	beq.n	80093b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800938a:	4a15      	ldr	r2, [pc, #84]	; (80093e0 <HAL_UART_IRQHandler+0x2c0>)
 800938c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009394:	4618      	mov	r0, r3
 8009396:	f7f9 fee1 	bl	800315c <HAL_DMA_Abort_IT>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d019      	beq.n	80093d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80093ae:	4610      	mov	r0, r2
 80093b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093b2:	e00f      	b.n	80093d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fa77 	bl	80098a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093ba:	e00b      	b.n	80093d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 fa73 	bl	80098a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093c2:	e007      	b.n	80093d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fa6f 	bl	80098a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80093d2:	e253      	b.n	800987c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093d4:	bf00      	nop
    return;
 80093d6:	e251      	b.n	800987c <HAL_UART_IRQHandler+0x75c>
 80093d8:	10000001 	.word	0x10000001
 80093dc:	04000120 	.word	0x04000120
 80093e0:	0800ac25 	.word	0x0800ac25

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	f040 81e7 	bne.w	80097bc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80093ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093f2:	f003 0310 	and.w	r3, r3, #16
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 81e0 	beq.w	80097bc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80093fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009400:	f003 0310 	and.w	r3, r3, #16
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 81d9 	beq.w	80097bc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2210      	movs	r2, #16
 8009410:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941c:	2b40      	cmp	r3, #64	; 0x40
 800941e:	f040 8151 	bne.w	80096c4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a96      	ldr	r2, [pc, #600]	; (8009684 <HAL_UART_IRQHandler+0x564>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d068      	beq.n	8009502 <HAL_UART_IRQHandler+0x3e2>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a93      	ldr	r2, [pc, #588]	; (8009688 <HAL_UART_IRQHandler+0x568>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d061      	beq.n	8009502 <HAL_UART_IRQHandler+0x3e2>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a91      	ldr	r2, [pc, #580]	; (800968c <HAL_UART_IRQHandler+0x56c>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d05a      	beq.n	8009502 <HAL_UART_IRQHandler+0x3e2>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a8e      	ldr	r2, [pc, #568]	; (8009690 <HAL_UART_IRQHandler+0x570>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d053      	beq.n	8009502 <HAL_UART_IRQHandler+0x3e2>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a8c      	ldr	r2, [pc, #560]	; (8009694 <HAL_UART_IRQHandler+0x574>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d04c      	beq.n	8009502 <HAL_UART_IRQHandler+0x3e2>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a89      	ldr	r2, [pc, #548]	; (8009698 <HAL_UART_IRQHandler+0x578>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d045      	beq.n	8009502 <HAL_UART_IRQHandler+0x3e2>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a87      	ldr	r2, [pc, #540]	; (800969c <HAL_UART_IRQHandler+0x57c>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d03e      	beq.n	8009502 <HAL_UART_IRQHandler+0x3e2>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a84      	ldr	r2, [pc, #528]	; (80096a0 <HAL_UART_IRQHandler+0x580>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d037      	beq.n	8009502 <HAL_UART_IRQHandler+0x3e2>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a82      	ldr	r2, [pc, #520]	; (80096a4 <HAL_UART_IRQHandler+0x584>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d030      	beq.n	8009502 <HAL_UART_IRQHandler+0x3e2>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a7f      	ldr	r2, [pc, #508]	; (80096a8 <HAL_UART_IRQHandler+0x588>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d029      	beq.n	8009502 <HAL_UART_IRQHandler+0x3e2>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a7d      	ldr	r2, [pc, #500]	; (80096ac <HAL_UART_IRQHandler+0x58c>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d022      	beq.n	8009502 <HAL_UART_IRQHandler+0x3e2>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a7a      	ldr	r2, [pc, #488]	; (80096b0 <HAL_UART_IRQHandler+0x590>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d01b      	beq.n	8009502 <HAL_UART_IRQHandler+0x3e2>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a78      	ldr	r2, [pc, #480]	; (80096b4 <HAL_UART_IRQHandler+0x594>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d014      	beq.n	8009502 <HAL_UART_IRQHandler+0x3e2>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a75      	ldr	r2, [pc, #468]	; (80096b8 <HAL_UART_IRQHandler+0x598>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d00d      	beq.n	8009502 <HAL_UART_IRQHandler+0x3e2>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a73      	ldr	r2, [pc, #460]	; (80096bc <HAL_UART_IRQHandler+0x59c>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d006      	beq.n	8009502 <HAL_UART_IRQHandler+0x3e2>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a70      	ldr	r2, [pc, #448]	; (80096c0 <HAL_UART_IRQHandler+0x5a0>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d106      	bne.n	8009510 <HAL_UART_IRQHandler+0x3f0>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	b29b      	uxth	r3, r3
 800950e:	e005      	b.n	800951c <HAL_UART_IRQHandler+0x3fc>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	b29b      	uxth	r3, r3
 800951c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009520:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 81ab 	beq.w	8009880 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009530:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009534:	429a      	cmp	r2, r3
 8009536:	f080 81a3 	bcs.w	8009880 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009540:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800954a:	69db      	ldr	r3, [r3, #28]
 800954c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009550:	f000 8087 	beq.w	8009662 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009560:	e853 3f00 	ldrex	r3, [r3]
 8009564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009568:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800956c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009570:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	461a      	mov	r2, r3
 800957a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800957e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009582:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009586:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800958a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800958e:	e841 2300 	strex	r3, r2, [r1]
 8009592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800959a:	2b00      	cmp	r3, #0
 800959c:	d1da      	bne.n	8009554 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	3308      	adds	r3, #8
 80095a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095a8:	e853 3f00 	ldrex	r3, [r3]
 80095ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80095ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095b0:	f023 0301 	bic.w	r3, r3, #1
 80095b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	3308      	adds	r3, #8
 80095be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80095c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80095c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80095ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80095ce:	e841 2300 	strex	r3, r2, [r1]
 80095d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80095d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d1e1      	bne.n	800959e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	3308      	adds	r3, #8
 80095e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095e4:	e853 3f00 	ldrex	r3, [r3]
 80095e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80095ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	3308      	adds	r3, #8
 80095fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80095fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009600:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009602:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009604:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009606:	e841 2300 	strex	r3, r2, [r1]
 800960a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800960c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1e3      	bne.n	80095da <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2220      	movs	r2, #32
 8009616:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009628:	e853 3f00 	ldrex	r3, [r3]
 800962c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800962e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009630:	f023 0310 	bic.w	r3, r3, #16
 8009634:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	461a      	mov	r2, r3
 800963e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009642:	65bb      	str	r3, [r7, #88]	; 0x58
 8009644:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009646:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009648:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800964a:	e841 2300 	strex	r3, r2, [r1]
 800964e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1e4      	bne.n	8009620 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800965c:	4618      	mov	r0, r3
 800965e:	f7f9 fa5f 	bl	8002b20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2202      	movs	r2, #2
 8009666:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009674:	b29b      	uxth	r3, r3
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	b29b      	uxth	r3, r3
 800967a:	4619      	mov	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 f91d 	bl	80098bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009682:	e0fd      	b.n	8009880 <HAL_UART_IRQHandler+0x760>
 8009684:	40020010 	.word	0x40020010
 8009688:	40020028 	.word	0x40020028
 800968c:	40020040 	.word	0x40020040
 8009690:	40020058 	.word	0x40020058
 8009694:	40020070 	.word	0x40020070
 8009698:	40020088 	.word	0x40020088
 800969c:	400200a0 	.word	0x400200a0
 80096a0:	400200b8 	.word	0x400200b8
 80096a4:	40020410 	.word	0x40020410
 80096a8:	40020428 	.word	0x40020428
 80096ac:	40020440 	.word	0x40020440
 80096b0:	40020458 	.word	0x40020458
 80096b4:	40020470 	.word	0x40020470
 80096b8:	40020488 	.word	0x40020488
 80096bc:	400204a0 	.word	0x400204a0
 80096c0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096de:	b29b      	uxth	r3, r3
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 80cf 	beq.w	8009884 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80096e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f000 80ca 	beq.w	8009884 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f8:	e853 3f00 	ldrex	r3, [r3]
 80096fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009700:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009704:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	461a      	mov	r2, r3
 800970e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009712:	647b      	str	r3, [r7, #68]	; 0x44
 8009714:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009716:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009718:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800971a:	e841 2300 	strex	r3, r2, [r1]
 800971e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1e4      	bne.n	80096f0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	3308      	adds	r3, #8
 800972c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009730:	e853 3f00 	ldrex	r3, [r3]
 8009734:	623b      	str	r3, [r7, #32]
   return(result);
 8009736:	6a3a      	ldr	r2, [r7, #32]
 8009738:	4b55      	ldr	r3, [pc, #340]	; (8009890 <HAL_UART_IRQHandler+0x770>)
 800973a:	4013      	ands	r3, r2
 800973c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3308      	adds	r3, #8
 8009746:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800974a:	633a      	str	r2, [r7, #48]	; 0x30
 800974c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009752:	e841 2300 	strex	r3, r2, [r1]
 8009756:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1e3      	bne.n	8009726 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2220      	movs	r2, #32
 8009762:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	e853 3f00 	ldrex	r3, [r3]
 800977e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f023 0310 	bic.w	r3, r3, #16
 8009786:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	461a      	mov	r2, r3
 8009790:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009794:	61fb      	str	r3, [r7, #28]
 8009796:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009798:	69b9      	ldr	r1, [r7, #24]
 800979a:	69fa      	ldr	r2, [r7, #28]
 800979c:	e841 2300 	strex	r3, r2, [r1]
 80097a0:	617b      	str	r3, [r7, #20]
   return(result);
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1e4      	bne.n	8009772 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2202      	movs	r2, #2
 80097ac:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80097ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f881 	bl	80098bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097ba:	e063      	b.n	8009884 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80097bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00e      	beq.n	80097e6 <HAL_UART_IRQHandler+0x6c6>
 80097c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d008      	beq.n	80097e6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80097dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f002 f920 	bl	800ba24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097e4:	e051      	b.n	800988a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80097e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d014      	beq.n	800981c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80097f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d105      	bne.n	800980a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80097fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009802:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009806:	2b00      	cmp	r3, #0
 8009808:	d008      	beq.n	800981c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800980e:	2b00      	cmp	r3, #0
 8009810:	d03a      	beq.n	8009888 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	4798      	blx	r3
    }
    return;
 800981a:	e035      	b.n	8009888 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800981c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009824:	2b00      	cmp	r3, #0
 8009826:	d009      	beq.n	800983c <HAL_UART_IRQHandler+0x71c>
 8009828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800982c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009830:	2b00      	cmp	r3, #0
 8009832:	d003      	beq.n	800983c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f001 fbad 	bl	800af94 <UART_EndTransmit_IT>
    return;
 800983a:	e026      	b.n	800988a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800983c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009840:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d009      	beq.n	800985c <HAL_UART_IRQHandler+0x73c>
 8009848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800984c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009850:	2b00      	cmp	r3, #0
 8009852:	d003      	beq.n	800985c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f002 f8f9 	bl	800ba4c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800985a:	e016      	b.n	800988a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800985c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009860:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d010      	beq.n	800988a <HAL_UART_IRQHandler+0x76a>
 8009868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800986c:	2b00      	cmp	r3, #0
 800986e:	da0c      	bge.n	800988a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f002 f8e1 	bl	800ba38 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009876:	e008      	b.n	800988a <HAL_UART_IRQHandler+0x76a>
      return;
 8009878:	bf00      	nop
 800987a:	e006      	b.n	800988a <HAL_UART_IRQHandler+0x76a>
    return;
 800987c:	bf00      	nop
 800987e:	e004      	b.n	800988a <HAL_UART_IRQHandler+0x76a>
      return;
 8009880:	bf00      	nop
 8009882:	e002      	b.n	800988a <HAL_UART_IRQHandler+0x76a>
      return;
 8009884:	bf00      	nop
 8009886:	e000      	b.n	800988a <HAL_UART_IRQHandler+0x76a>
    return;
 8009888:	bf00      	nop
  }
}
 800988a:	37e8      	adds	r7, #232	; 0xe8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	effffffe 	.word	0xeffffffe

08009894 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098d8:	b092      	sub	sp, #72	; 0x48
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	689a      	ldr	r2, [r3, #8]
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	431a      	orrs	r2, r3
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	431a      	orrs	r2, r3
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	69db      	ldr	r3, [r3, #28]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	4bbe      	ldr	r3, [pc, #760]	; (8009bfc <UART_SetConfig+0x328>)
 8009904:	4013      	ands	r3, r2
 8009906:	697a      	ldr	r2, [r7, #20]
 8009908:	6812      	ldr	r2, [r2, #0]
 800990a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800990c:	430b      	orrs	r3, r1
 800990e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	68da      	ldr	r2, [r3, #12]
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	430a      	orrs	r2, r1
 8009924:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4ab3      	ldr	r2, [pc, #716]	; (8009c00 <UART_SetConfig+0x32c>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d004      	beq.n	8009940 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800993c:	4313      	orrs	r3, r2
 800993e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	689a      	ldr	r2, [r3, #8]
 8009946:	4baf      	ldr	r3, [pc, #700]	; (8009c04 <UART_SetConfig+0x330>)
 8009948:	4013      	ands	r3, r2
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	6812      	ldr	r2, [r2, #0]
 800994e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009950:	430b      	orrs	r3, r1
 8009952:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995a:	f023 010f 	bic.w	r1, r3, #15
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	430a      	orrs	r2, r1
 8009968:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4aa6      	ldr	r2, [pc, #664]	; (8009c08 <UART_SetConfig+0x334>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d177      	bne.n	8009a64 <UART_SetConfig+0x190>
 8009974:	4ba5      	ldr	r3, [pc, #660]	; (8009c0c <UART_SetConfig+0x338>)
 8009976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009978:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800997c:	2b28      	cmp	r3, #40	; 0x28
 800997e:	d86d      	bhi.n	8009a5c <UART_SetConfig+0x188>
 8009980:	a201      	add	r2, pc, #4	; (adr r2, 8009988 <UART_SetConfig+0xb4>)
 8009982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009986:	bf00      	nop
 8009988:	08009a2d 	.word	0x08009a2d
 800998c:	08009a5d 	.word	0x08009a5d
 8009990:	08009a5d 	.word	0x08009a5d
 8009994:	08009a5d 	.word	0x08009a5d
 8009998:	08009a5d 	.word	0x08009a5d
 800999c:	08009a5d 	.word	0x08009a5d
 80099a0:	08009a5d 	.word	0x08009a5d
 80099a4:	08009a5d 	.word	0x08009a5d
 80099a8:	08009a35 	.word	0x08009a35
 80099ac:	08009a5d 	.word	0x08009a5d
 80099b0:	08009a5d 	.word	0x08009a5d
 80099b4:	08009a5d 	.word	0x08009a5d
 80099b8:	08009a5d 	.word	0x08009a5d
 80099bc:	08009a5d 	.word	0x08009a5d
 80099c0:	08009a5d 	.word	0x08009a5d
 80099c4:	08009a5d 	.word	0x08009a5d
 80099c8:	08009a3d 	.word	0x08009a3d
 80099cc:	08009a5d 	.word	0x08009a5d
 80099d0:	08009a5d 	.word	0x08009a5d
 80099d4:	08009a5d 	.word	0x08009a5d
 80099d8:	08009a5d 	.word	0x08009a5d
 80099dc:	08009a5d 	.word	0x08009a5d
 80099e0:	08009a5d 	.word	0x08009a5d
 80099e4:	08009a5d 	.word	0x08009a5d
 80099e8:	08009a45 	.word	0x08009a45
 80099ec:	08009a5d 	.word	0x08009a5d
 80099f0:	08009a5d 	.word	0x08009a5d
 80099f4:	08009a5d 	.word	0x08009a5d
 80099f8:	08009a5d 	.word	0x08009a5d
 80099fc:	08009a5d 	.word	0x08009a5d
 8009a00:	08009a5d 	.word	0x08009a5d
 8009a04:	08009a5d 	.word	0x08009a5d
 8009a08:	08009a4d 	.word	0x08009a4d
 8009a0c:	08009a5d 	.word	0x08009a5d
 8009a10:	08009a5d 	.word	0x08009a5d
 8009a14:	08009a5d 	.word	0x08009a5d
 8009a18:	08009a5d 	.word	0x08009a5d
 8009a1c:	08009a5d 	.word	0x08009a5d
 8009a20:	08009a5d 	.word	0x08009a5d
 8009a24:	08009a5d 	.word	0x08009a5d
 8009a28:	08009a55 	.word	0x08009a55
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a32:	e326      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009a34:	2304      	movs	r3, #4
 8009a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a3a:	e322      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009a3c:	2308      	movs	r3, #8
 8009a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a42:	e31e      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009a44:	2310      	movs	r3, #16
 8009a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a4a:	e31a      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009a4c:	2320      	movs	r3, #32
 8009a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a52:	e316      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009a54:	2340      	movs	r3, #64	; 0x40
 8009a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a5a:	e312      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009a5c:	2380      	movs	r3, #128	; 0x80
 8009a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a62:	e30e      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a69      	ldr	r2, [pc, #420]	; (8009c10 <UART_SetConfig+0x33c>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d130      	bne.n	8009ad0 <UART_SetConfig+0x1fc>
 8009a6e:	4b67      	ldr	r3, [pc, #412]	; (8009c0c <UART_SetConfig+0x338>)
 8009a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a72:	f003 0307 	and.w	r3, r3, #7
 8009a76:	2b05      	cmp	r3, #5
 8009a78:	d826      	bhi.n	8009ac8 <UART_SetConfig+0x1f4>
 8009a7a:	a201      	add	r2, pc, #4	; (adr r2, 8009a80 <UART_SetConfig+0x1ac>)
 8009a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a80:	08009a99 	.word	0x08009a99
 8009a84:	08009aa1 	.word	0x08009aa1
 8009a88:	08009aa9 	.word	0x08009aa9
 8009a8c:	08009ab1 	.word	0x08009ab1
 8009a90:	08009ab9 	.word	0x08009ab9
 8009a94:	08009ac1 	.word	0x08009ac1
 8009a98:	2300      	movs	r3, #0
 8009a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a9e:	e2f0      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009aa0:	2304      	movs	r3, #4
 8009aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aa6:	e2ec      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009aa8:	2308      	movs	r3, #8
 8009aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aae:	e2e8      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009ab0:	2310      	movs	r3, #16
 8009ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ab6:	e2e4      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009ab8:	2320      	movs	r3, #32
 8009aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009abe:	e2e0      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009ac0:	2340      	movs	r3, #64	; 0x40
 8009ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ac6:	e2dc      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009ac8:	2380      	movs	r3, #128	; 0x80
 8009aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ace:	e2d8      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a4f      	ldr	r2, [pc, #316]	; (8009c14 <UART_SetConfig+0x340>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d130      	bne.n	8009b3c <UART_SetConfig+0x268>
 8009ada:	4b4c      	ldr	r3, [pc, #304]	; (8009c0c <UART_SetConfig+0x338>)
 8009adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ade:	f003 0307 	and.w	r3, r3, #7
 8009ae2:	2b05      	cmp	r3, #5
 8009ae4:	d826      	bhi.n	8009b34 <UART_SetConfig+0x260>
 8009ae6:	a201      	add	r2, pc, #4	; (adr r2, 8009aec <UART_SetConfig+0x218>)
 8009ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aec:	08009b05 	.word	0x08009b05
 8009af0:	08009b0d 	.word	0x08009b0d
 8009af4:	08009b15 	.word	0x08009b15
 8009af8:	08009b1d 	.word	0x08009b1d
 8009afc:	08009b25 	.word	0x08009b25
 8009b00:	08009b2d 	.word	0x08009b2d
 8009b04:	2300      	movs	r3, #0
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b0a:	e2ba      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009b0c:	2304      	movs	r3, #4
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b12:	e2b6      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009b14:	2308      	movs	r3, #8
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b1a:	e2b2      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009b1c:	2310      	movs	r3, #16
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b22:	e2ae      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009b24:	2320      	movs	r3, #32
 8009b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b2a:	e2aa      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009b2c:	2340      	movs	r3, #64	; 0x40
 8009b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b32:	e2a6      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009b34:	2380      	movs	r3, #128	; 0x80
 8009b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b3a:	e2a2      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a35      	ldr	r2, [pc, #212]	; (8009c18 <UART_SetConfig+0x344>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d130      	bne.n	8009ba8 <UART_SetConfig+0x2d4>
 8009b46:	4b31      	ldr	r3, [pc, #196]	; (8009c0c <UART_SetConfig+0x338>)
 8009b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b4a:	f003 0307 	and.w	r3, r3, #7
 8009b4e:	2b05      	cmp	r3, #5
 8009b50:	d826      	bhi.n	8009ba0 <UART_SetConfig+0x2cc>
 8009b52:	a201      	add	r2, pc, #4	; (adr r2, 8009b58 <UART_SetConfig+0x284>)
 8009b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b58:	08009b71 	.word	0x08009b71
 8009b5c:	08009b79 	.word	0x08009b79
 8009b60:	08009b81 	.word	0x08009b81
 8009b64:	08009b89 	.word	0x08009b89
 8009b68:	08009b91 	.word	0x08009b91
 8009b6c:	08009b99 	.word	0x08009b99
 8009b70:	2300      	movs	r3, #0
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b76:	e284      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009b78:	2304      	movs	r3, #4
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b7e:	e280      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009b80:	2308      	movs	r3, #8
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b86:	e27c      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009b88:	2310      	movs	r3, #16
 8009b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b8e:	e278      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009b90:	2320      	movs	r3, #32
 8009b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b96:	e274      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009b98:	2340      	movs	r3, #64	; 0x40
 8009b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b9e:	e270      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009ba0:	2380      	movs	r3, #128	; 0x80
 8009ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ba6:	e26c      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a1b      	ldr	r2, [pc, #108]	; (8009c1c <UART_SetConfig+0x348>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d142      	bne.n	8009c38 <UART_SetConfig+0x364>
 8009bb2:	4b16      	ldr	r3, [pc, #88]	; (8009c0c <UART_SetConfig+0x338>)
 8009bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bb6:	f003 0307 	and.w	r3, r3, #7
 8009bba:	2b05      	cmp	r3, #5
 8009bbc:	d838      	bhi.n	8009c30 <UART_SetConfig+0x35c>
 8009bbe:	a201      	add	r2, pc, #4	; (adr r2, 8009bc4 <UART_SetConfig+0x2f0>)
 8009bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc4:	08009bdd 	.word	0x08009bdd
 8009bc8:	08009be5 	.word	0x08009be5
 8009bcc:	08009bed 	.word	0x08009bed
 8009bd0:	08009bf5 	.word	0x08009bf5
 8009bd4:	08009c21 	.word	0x08009c21
 8009bd8:	08009c29 	.word	0x08009c29
 8009bdc:	2300      	movs	r3, #0
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009be2:	e24e      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009be4:	2304      	movs	r3, #4
 8009be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bea:	e24a      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009bec:	2308      	movs	r3, #8
 8009bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bf2:	e246      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009bf4:	2310      	movs	r3, #16
 8009bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bfa:	e242      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009bfc:	cfff69f3 	.word	0xcfff69f3
 8009c00:	58000c00 	.word	0x58000c00
 8009c04:	11fff4ff 	.word	0x11fff4ff
 8009c08:	40011000 	.word	0x40011000
 8009c0c:	58024400 	.word	0x58024400
 8009c10:	40004400 	.word	0x40004400
 8009c14:	40004800 	.word	0x40004800
 8009c18:	40004c00 	.word	0x40004c00
 8009c1c:	40005000 	.word	0x40005000
 8009c20:	2320      	movs	r3, #32
 8009c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c26:	e22c      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009c28:	2340      	movs	r3, #64	; 0x40
 8009c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c2e:	e228      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009c30:	2380      	movs	r3, #128	; 0x80
 8009c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c36:	e224      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4ab1      	ldr	r2, [pc, #708]	; (8009f04 <UART_SetConfig+0x630>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d176      	bne.n	8009d30 <UART_SetConfig+0x45c>
 8009c42:	4bb1      	ldr	r3, [pc, #708]	; (8009f08 <UART_SetConfig+0x634>)
 8009c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c4a:	2b28      	cmp	r3, #40	; 0x28
 8009c4c:	d86c      	bhi.n	8009d28 <UART_SetConfig+0x454>
 8009c4e:	a201      	add	r2, pc, #4	; (adr r2, 8009c54 <UART_SetConfig+0x380>)
 8009c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c54:	08009cf9 	.word	0x08009cf9
 8009c58:	08009d29 	.word	0x08009d29
 8009c5c:	08009d29 	.word	0x08009d29
 8009c60:	08009d29 	.word	0x08009d29
 8009c64:	08009d29 	.word	0x08009d29
 8009c68:	08009d29 	.word	0x08009d29
 8009c6c:	08009d29 	.word	0x08009d29
 8009c70:	08009d29 	.word	0x08009d29
 8009c74:	08009d01 	.word	0x08009d01
 8009c78:	08009d29 	.word	0x08009d29
 8009c7c:	08009d29 	.word	0x08009d29
 8009c80:	08009d29 	.word	0x08009d29
 8009c84:	08009d29 	.word	0x08009d29
 8009c88:	08009d29 	.word	0x08009d29
 8009c8c:	08009d29 	.word	0x08009d29
 8009c90:	08009d29 	.word	0x08009d29
 8009c94:	08009d09 	.word	0x08009d09
 8009c98:	08009d29 	.word	0x08009d29
 8009c9c:	08009d29 	.word	0x08009d29
 8009ca0:	08009d29 	.word	0x08009d29
 8009ca4:	08009d29 	.word	0x08009d29
 8009ca8:	08009d29 	.word	0x08009d29
 8009cac:	08009d29 	.word	0x08009d29
 8009cb0:	08009d29 	.word	0x08009d29
 8009cb4:	08009d11 	.word	0x08009d11
 8009cb8:	08009d29 	.word	0x08009d29
 8009cbc:	08009d29 	.word	0x08009d29
 8009cc0:	08009d29 	.word	0x08009d29
 8009cc4:	08009d29 	.word	0x08009d29
 8009cc8:	08009d29 	.word	0x08009d29
 8009ccc:	08009d29 	.word	0x08009d29
 8009cd0:	08009d29 	.word	0x08009d29
 8009cd4:	08009d19 	.word	0x08009d19
 8009cd8:	08009d29 	.word	0x08009d29
 8009cdc:	08009d29 	.word	0x08009d29
 8009ce0:	08009d29 	.word	0x08009d29
 8009ce4:	08009d29 	.word	0x08009d29
 8009ce8:	08009d29 	.word	0x08009d29
 8009cec:	08009d29 	.word	0x08009d29
 8009cf0:	08009d29 	.word	0x08009d29
 8009cf4:	08009d21 	.word	0x08009d21
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cfe:	e1c0      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009d00:	2304      	movs	r3, #4
 8009d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d06:	e1bc      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009d08:	2308      	movs	r3, #8
 8009d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d0e:	e1b8      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009d10:	2310      	movs	r3, #16
 8009d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d16:	e1b4      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009d18:	2320      	movs	r3, #32
 8009d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d1e:	e1b0      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009d20:	2340      	movs	r3, #64	; 0x40
 8009d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d26:	e1ac      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009d28:	2380      	movs	r3, #128	; 0x80
 8009d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d2e:	e1a8      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a75      	ldr	r2, [pc, #468]	; (8009f0c <UART_SetConfig+0x638>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d130      	bne.n	8009d9c <UART_SetConfig+0x4c8>
 8009d3a:	4b73      	ldr	r3, [pc, #460]	; (8009f08 <UART_SetConfig+0x634>)
 8009d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d3e:	f003 0307 	and.w	r3, r3, #7
 8009d42:	2b05      	cmp	r3, #5
 8009d44:	d826      	bhi.n	8009d94 <UART_SetConfig+0x4c0>
 8009d46:	a201      	add	r2, pc, #4	; (adr r2, 8009d4c <UART_SetConfig+0x478>)
 8009d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4c:	08009d65 	.word	0x08009d65
 8009d50:	08009d6d 	.word	0x08009d6d
 8009d54:	08009d75 	.word	0x08009d75
 8009d58:	08009d7d 	.word	0x08009d7d
 8009d5c:	08009d85 	.word	0x08009d85
 8009d60:	08009d8d 	.word	0x08009d8d
 8009d64:	2300      	movs	r3, #0
 8009d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d6a:	e18a      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009d6c:	2304      	movs	r3, #4
 8009d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d72:	e186      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009d74:	2308      	movs	r3, #8
 8009d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d7a:	e182      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009d7c:	2310      	movs	r3, #16
 8009d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d82:	e17e      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009d84:	2320      	movs	r3, #32
 8009d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d8a:	e17a      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009d8c:	2340      	movs	r3, #64	; 0x40
 8009d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d92:	e176      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009d94:	2380      	movs	r3, #128	; 0x80
 8009d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d9a:	e172      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a5b      	ldr	r2, [pc, #364]	; (8009f10 <UART_SetConfig+0x63c>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d130      	bne.n	8009e08 <UART_SetConfig+0x534>
 8009da6:	4b58      	ldr	r3, [pc, #352]	; (8009f08 <UART_SetConfig+0x634>)
 8009da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009daa:	f003 0307 	and.w	r3, r3, #7
 8009dae:	2b05      	cmp	r3, #5
 8009db0:	d826      	bhi.n	8009e00 <UART_SetConfig+0x52c>
 8009db2:	a201      	add	r2, pc, #4	; (adr r2, 8009db8 <UART_SetConfig+0x4e4>)
 8009db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db8:	08009dd1 	.word	0x08009dd1
 8009dbc:	08009dd9 	.word	0x08009dd9
 8009dc0:	08009de1 	.word	0x08009de1
 8009dc4:	08009de9 	.word	0x08009de9
 8009dc8:	08009df1 	.word	0x08009df1
 8009dcc:	08009df9 	.word	0x08009df9
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dd6:	e154      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009dd8:	2304      	movs	r3, #4
 8009dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dde:	e150      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009de0:	2308      	movs	r3, #8
 8009de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009de6:	e14c      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009de8:	2310      	movs	r3, #16
 8009dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dee:	e148      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009df0:	2320      	movs	r3, #32
 8009df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009df6:	e144      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009df8:	2340      	movs	r3, #64	; 0x40
 8009dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dfe:	e140      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009e00:	2380      	movs	r3, #128	; 0x80
 8009e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e06:	e13c      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a41      	ldr	r2, [pc, #260]	; (8009f14 <UART_SetConfig+0x640>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	f040 8082 	bne.w	8009f18 <UART_SetConfig+0x644>
 8009e14:	4b3c      	ldr	r3, [pc, #240]	; (8009f08 <UART_SetConfig+0x634>)
 8009e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e1c:	2b28      	cmp	r3, #40	; 0x28
 8009e1e:	d86d      	bhi.n	8009efc <UART_SetConfig+0x628>
 8009e20:	a201      	add	r2, pc, #4	; (adr r2, 8009e28 <UART_SetConfig+0x554>)
 8009e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e26:	bf00      	nop
 8009e28:	08009ecd 	.word	0x08009ecd
 8009e2c:	08009efd 	.word	0x08009efd
 8009e30:	08009efd 	.word	0x08009efd
 8009e34:	08009efd 	.word	0x08009efd
 8009e38:	08009efd 	.word	0x08009efd
 8009e3c:	08009efd 	.word	0x08009efd
 8009e40:	08009efd 	.word	0x08009efd
 8009e44:	08009efd 	.word	0x08009efd
 8009e48:	08009ed5 	.word	0x08009ed5
 8009e4c:	08009efd 	.word	0x08009efd
 8009e50:	08009efd 	.word	0x08009efd
 8009e54:	08009efd 	.word	0x08009efd
 8009e58:	08009efd 	.word	0x08009efd
 8009e5c:	08009efd 	.word	0x08009efd
 8009e60:	08009efd 	.word	0x08009efd
 8009e64:	08009efd 	.word	0x08009efd
 8009e68:	08009edd 	.word	0x08009edd
 8009e6c:	08009efd 	.word	0x08009efd
 8009e70:	08009efd 	.word	0x08009efd
 8009e74:	08009efd 	.word	0x08009efd
 8009e78:	08009efd 	.word	0x08009efd
 8009e7c:	08009efd 	.word	0x08009efd
 8009e80:	08009efd 	.word	0x08009efd
 8009e84:	08009efd 	.word	0x08009efd
 8009e88:	08009ee5 	.word	0x08009ee5
 8009e8c:	08009efd 	.word	0x08009efd
 8009e90:	08009efd 	.word	0x08009efd
 8009e94:	08009efd 	.word	0x08009efd
 8009e98:	08009efd 	.word	0x08009efd
 8009e9c:	08009efd 	.word	0x08009efd
 8009ea0:	08009efd 	.word	0x08009efd
 8009ea4:	08009efd 	.word	0x08009efd
 8009ea8:	08009eed 	.word	0x08009eed
 8009eac:	08009efd 	.word	0x08009efd
 8009eb0:	08009efd 	.word	0x08009efd
 8009eb4:	08009efd 	.word	0x08009efd
 8009eb8:	08009efd 	.word	0x08009efd
 8009ebc:	08009efd 	.word	0x08009efd
 8009ec0:	08009efd 	.word	0x08009efd
 8009ec4:	08009efd 	.word	0x08009efd
 8009ec8:	08009ef5 	.word	0x08009ef5
 8009ecc:	2301      	movs	r3, #1
 8009ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ed2:	e0d6      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009ed4:	2304      	movs	r3, #4
 8009ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eda:	e0d2      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009edc:	2308      	movs	r3, #8
 8009ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ee2:	e0ce      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009ee4:	2310      	movs	r3, #16
 8009ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eea:	e0ca      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009eec:	2320      	movs	r3, #32
 8009eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ef2:	e0c6      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009ef4:	2340      	movs	r3, #64	; 0x40
 8009ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009efa:	e0c2      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009efc:	2380      	movs	r3, #128	; 0x80
 8009efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f02:	e0be      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009f04:	40011400 	.word	0x40011400
 8009f08:	58024400 	.word	0x58024400
 8009f0c:	40007800 	.word	0x40007800
 8009f10:	40007c00 	.word	0x40007c00
 8009f14:	40011800 	.word	0x40011800
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4aad      	ldr	r2, [pc, #692]	; (800a1d4 <UART_SetConfig+0x900>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d176      	bne.n	800a010 <UART_SetConfig+0x73c>
 8009f22:	4bad      	ldr	r3, [pc, #692]	; (800a1d8 <UART_SetConfig+0x904>)
 8009f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f2a:	2b28      	cmp	r3, #40	; 0x28
 8009f2c:	d86c      	bhi.n	800a008 <UART_SetConfig+0x734>
 8009f2e:	a201      	add	r2, pc, #4	; (adr r2, 8009f34 <UART_SetConfig+0x660>)
 8009f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f34:	08009fd9 	.word	0x08009fd9
 8009f38:	0800a009 	.word	0x0800a009
 8009f3c:	0800a009 	.word	0x0800a009
 8009f40:	0800a009 	.word	0x0800a009
 8009f44:	0800a009 	.word	0x0800a009
 8009f48:	0800a009 	.word	0x0800a009
 8009f4c:	0800a009 	.word	0x0800a009
 8009f50:	0800a009 	.word	0x0800a009
 8009f54:	08009fe1 	.word	0x08009fe1
 8009f58:	0800a009 	.word	0x0800a009
 8009f5c:	0800a009 	.word	0x0800a009
 8009f60:	0800a009 	.word	0x0800a009
 8009f64:	0800a009 	.word	0x0800a009
 8009f68:	0800a009 	.word	0x0800a009
 8009f6c:	0800a009 	.word	0x0800a009
 8009f70:	0800a009 	.word	0x0800a009
 8009f74:	08009fe9 	.word	0x08009fe9
 8009f78:	0800a009 	.word	0x0800a009
 8009f7c:	0800a009 	.word	0x0800a009
 8009f80:	0800a009 	.word	0x0800a009
 8009f84:	0800a009 	.word	0x0800a009
 8009f88:	0800a009 	.word	0x0800a009
 8009f8c:	0800a009 	.word	0x0800a009
 8009f90:	0800a009 	.word	0x0800a009
 8009f94:	08009ff1 	.word	0x08009ff1
 8009f98:	0800a009 	.word	0x0800a009
 8009f9c:	0800a009 	.word	0x0800a009
 8009fa0:	0800a009 	.word	0x0800a009
 8009fa4:	0800a009 	.word	0x0800a009
 8009fa8:	0800a009 	.word	0x0800a009
 8009fac:	0800a009 	.word	0x0800a009
 8009fb0:	0800a009 	.word	0x0800a009
 8009fb4:	08009ff9 	.word	0x08009ff9
 8009fb8:	0800a009 	.word	0x0800a009
 8009fbc:	0800a009 	.word	0x0800a009
 8009fc0:	0800a009 	.word	0x0800a009
 8009fc4:	0800a009 	.word	0x0800a009
 8009fc8:	0800a009 	.word	0x0800a009
 8009fcc:	0800a009 	.word	0x0800a009
 8009fd0:	0800a009 	.word	0x0800a009
 8009fd4:	0800a001 	.word	0x0800a001
 8009fd8:	2301      	movs	r3, #1
 8009fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fde:	e050      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009fe0:	2304      	movs	r3, #4
 8009fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fe6:	e04c      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009fe8:	2308      	movs	r3, #8
 8009fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fee:	e048      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ff6:	e044      	b.n	800a082 <UART_SetConfig+0x7ae>
 8009ff8:	2320      	movs	r3, #32
 8009ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ffe:	e040      	b.n	800a082 <UART_SetConfig+0x7ae>
 800a000:	2340      	movs	r3, #64	; 0x40
 800a002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a006:	e03c      	b.n	800a082 <UART_SetConfig+0x7ae>
 800a008:	2380      	movs	r3, #128	; 0x80
 800a00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a00e:	e038      	b.n	800a082 <UART_SetConfig+0x7ae>
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a71      	ldr	r2, [pc, #452]	; (800a1dc <UART_SetConfig+0x908>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d130      	bne.n	800a07c <UART_SetConfig+0x7a8>
 800a01a:	4b6f      	ldr	r3, [pc, #444]	; (800a1d8 <UART_SetConfig+0x904>)
 800a01c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a01e:	f003 0307 	and.w	r3, r3, #7
 800a022:	2b05      	cmp	r3, #5
 800a024:	d826      	bhi.n	800a074 <UART_SetConfig+0x7a0>
 800a026:	a201      	add	r2, pc, #4	; (adr r2, 800a02c <UART_SetConfig+0x758>)
 800a028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02c:	0800a045 	.word	0x0800a045
 800a030:	0800a04d 	.word	0x0800a04d
 800a034:	0800a055 	.word	0x0800a055
 800a038:	0800a05d 	.word	0x0800a05d
 800a03c:	0800a065 	.word	0x0800a065
 800a040:	0800a06d 	.word	0x0800a06d
 800a044:	2302      	movs	r3, #2
 800a046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a04a:	e01a      	b.n	800a082 <UART_SetConfig+0x7ae>
 800a04c:	2304      	movs	r3, #4
 800a04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a052:	e016      	b.n	800a082 <UART_SetConfig+0x7ae>
 800a054:	2308      	movs	r3, #8
 800a056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a05a:	e012      	b.n	800a082 <UART_SetConfig+0x7ae>
 800a05c:	2310      	movs	r3, #16
 800a05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a062:	e00e      	b.n	800a082 <UART_SetConfig+0x7ae>
 800a064:	2320      	movs	r3, #32
 800a066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a06a:	e00a      	b.n	800a082 <UART_SetConfig+0x7ae>
 800a06c:	2340      	movs	r3, #64	; 0x40
 800a06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a072:	e006      	b.n	800a082 <UART_SetConfig+0x7ae>
 800a074:	2380      	movs	r3, #128	; 0x80
 800a076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a07a:	e002      	b.n	800a082 <UART_SetConfig+0x7ae>
 800a07c:	2380      	movs	r3, #128	; 0x80
 800a07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a55      	ldr	r2, [pc, #340]	; (800a1dc <UART_SetConfig+0x908>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	f040 80f8 	bne.w	800a27e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a08e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a092:	2b20      	cmp	r3, #32
 800a094:	dc46      	bgt.n	800a124 <UART_SetConfig+0x850>
 800a096:	2b02      	cmp	r3, #2
 800a098:	db75      	blt.n	800a186 <UART_SetConfig+0x8b2>
 800a09a:	3b02      	subs	r3, #2
 800a09c:	2b1e      	cmp	r3, #30
 800a09e:	d872      	bhi.n	800a186 <UART_SetConfig+0x8b2>
 800a0a0:	a201      	add	r2, pc, #4	; (adr r2, 800a0a8 <UART_SetConfig+0x7d4>)
 800a0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a6:	bf00      	nop
 800a0a8:	0800a12b 	.word	0x0800a12b
 800a0ac:	0800a187 	.word	0x0800a187
 800a0b0:	0800a133 	.word	0x0800a133
 800a0b4:	0800a187 	.word	0x0800a187
 800a0b8:	0800a187 	.word	0x0800a187
 800a0bc:	0800a187 	.word	0x0800a187
 800a0c0:	0800a143 	.word	0x0800a143
 800a0c4:	0800a187 	.word	0x0800a187
 800a0c8:	0800a187 	.word	0x0800a187
 800a0cc:	0800a187 	.word	0x0800a187
 800a0d0:	0800a187 	.word	0x0800a187
 800a0d4:	0800a187 	.word	0x0800a187
 800a0d8:	0800a187 	.word	0x0800a187
 800a0dc:	0800a187 	.word	0x0800a187
 800a0e0:	0800a153 	.word	0x0800a153
 800a0e4:	0800a187 	.word	0x0800a187
 800a0e8:	0800a187 	.word	0x0800a187
 800a0ec:	0800a187 	.word	0x0800a187
 800a0f0:	0800a187 	.word	0x0800a187
 800a0f4:	0800a187 	.word	0x0800a187
 800a0f8:	0800a187 	.word	0x0800a187
 800a0fc:	0800a187 	.word	0x0800a187
 800a100:	0800a187 	.word	0x0800a187
 800a104:	0800a187 	.word	0x0800a187
 800a108:	0800a187 	.word	0x0800a187
 800a10c:	0800a187 	.word	0x0800a187
 800a110:	0800a187 	.word	0x0800a187
 800a114:	0800a187 	.word	0x0800a187
 800a118:	0800a187 	.word	0x0800a187
 800a11c:	0800a187 	.word	0x0800a187
 800a120:	0800a179 	.word	0x0800a179
 800a124:	2b40      	cmp	r3, #64	; 0x40
 800a126:	d02a      	beq.n	800a17e <UART_SetConfig+0x8aa>
 800a128:	e02d      	b.n	800a186 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a12a:	f7fc ff9b 	bl	8007064 <HAL_RCCEx_GetD3PCLK1Freq>
 800a12e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a130:	e02f      	b.n	800a192 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a136:	4618      	mov	r0, r3
 800a138:	f7fc ffaa 	bl	8007090 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a140:	e027      	b.n	800a192 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a142:	f107 0318 	add.w	r3, r7, #24
 800a146:	4618      	mov	r0, r3
 800a148:	f7fd f8f6 	bl	8007338 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a150:	e01f      	b.n	800a192 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a152:	4b21      	ldr	r3, [pc, #132]	; (800a1d8 <UART_SetConfig+0x904>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f003 0320 	and.w	r3, r3, #32
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d009      	beq.n	800a172 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a15e:	4b1e      	ldr	r3, [pc, #120]	; (800a1d8 <UART_SetConfig+0x904>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	08db      	lsrs	r3, r3, #3
 800a164:	f003 0303 	and.w	r3, r3, #3
 800a168:	4a1d      	ldr	r2, [pc, #116]	; (800a1e0 <UART_SetConfig+0x90c>)
 800a16a:	fa22 f303 	lsr.w	r3, r2, r3
 800a16e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a170:	e00f      	b.n	800a192 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a172:	4b1b      	ldr	r3, [pc, #108]	; (800a1e0 <UART_SetConfig+0x90c>)
 800a174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a176:	e00c      	b.n	800a192 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a178:	4b1a      	ldr	r3, [pc, #104]	; (800a1e4 <UART_SetConfig+0x910>)
 800a17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a17c:	e009      	b.n	800a192 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a17e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a184:	e005      	b.n	800a192 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a186:	2300      	movs	r3, #0
 800a188:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a190:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a194:	2b00      	cmp	r3, #0
 800a196:	f000 81ee 	beq.w	800a576 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19e:	4a12      	ldr	r2, [pc, #72]	; (800a1e8 <UART_SetConfig+0x914>)
 800a1a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1ac:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	685a      	ldr	r2, [r3, #4]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	4413      	add	r3, r2
 800a1b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d305      	bcc.n	800a1ca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d910      	bls.n	800a1ec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a1d0:	e1d1      	b.n	800a576 <UART_SetConfig+0xca2>
 800a1d2:	bf00      	nop
 800a1d4:	40011c00 	.word	0x40011c00
 800a1d8:	58024400 	.word	0x58024400
 800a1dc:	58000c00 	.word	0x58000c00
 800a1e0:	03d09000 	.word	0x03d09000
 800a1e4:	003d0900 	.word	0x003d0900
 800a1e8:	0800d4b4 	.word	0x0800d4b4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	60bb      	str	r3, [r7, #8]
 800a1f2:	60fa      	str	r2, [r7, #12]
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f8:	4ac0      	ldr	r2, [pc, #768]	; (800a4fc <UART_SetConfig+0xc28>)
 800a1fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	2200      	movs	r2, #0
 800a202:	603b      	str	r3, [r7, #0]
 800a204:	607a      	str	r2, [r7, #4]
 800a206:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a20a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a20e:	f7f6 f8bf 	bl	8000390 <__aeabi_uldivmod>
 800a212:	4602      	mov	r2, r0
 800a214:	460b      	mov	r3, r1
 800a216:	4610      	mov	r0, r2
 800a218:	4619      	mov	r1, r3
 800a21a:	f04f 0200 	mov.w	r2, #0
 800a21e:	f04f 0300 	mov.w	r3, #0
 800a222:	020b      	lsls	r3, r1, #8
 800a224:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a228:	0202      	lsls	r2, r0, #8
 800a22a:	6979      	ldr	r1, [r7, #20]
 800a22c:	6849      	ldr	r1, [r1, #4]
 800a22e:	0849      	lsrs	r1, r1, #1
 800a230:	2000      	movs	r0, #0
 800a232:	460c      	mov	r4, r1
 800a234:	4605      	mov	r5, r0
 800a236:	eb12 0804 	adds.w	r8, r2, r4
 800a23a:	eb43 0905 	adc.w	r9, r3, r5
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	469a      	mov	sl, r3
 800a246:	4693      	mov	fp, r2
 800a248:	4652      	mov	r2, sl
 800a24a:	465b      	mov	r3, fp
 800a24c:	4640      	mov	r0, r8
 800a24e:	4649      	mov	r1, r9
 800a250:	f7f6 f89e 	bl	8000390 <__aeabi_uldivmod>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	4613      	mov	r3, r2
 800a25a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a262:	d308      	bcc.n	800a276 <UART_SetConfig+0x9a2>
 800a264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a26a:	d204      	bcs.n	800a276 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a272:	60da      	str	r2, [r3, #12]
 800a274:	e17f      	b.n	800a576 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a27c:	e17b      	b.n	800a576 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	69db      	ldr	r3, [r3, #28]
 800a282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a286:	f040 80bd 	bne.w	800a404 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a28a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a28e:	2b20      	cmp	r3, #32
 800a290:	dc48      	bgt.n	800a324 <UART_SetConfig+0xa50>
 800a292:	2b00      	cmp	r3, #0
 800a294:	db7b      	blt.n	800a38e <UART_SetConfig+0xaba>
 800a296:	2b20      	cmp	r3, #32
 800a298:	d879      	bhi.n	800a38e <UART_SetConfig+0xaba>
 800a29a:	a201      	add	r2, pc, #4	; (adr r2, 800a2a0 <UART_SetConfig+0x9cc>)
 800a29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a0:	0800a32b 	.word	0x0800a32b
 800a2a4:	0800a333 	.word	0x0800a333
 800a2a8:	0800a38f 	.word	0x0800a38f
 800a2ac:	0800a38f 	.word	0x0800a38f
 800a2b0:	0800a33b 	.word	0x0800a33b
 800a2b4:	0800a38f 	.word	0x0800a38f
 800a2b8:	0800a38f 	.word	0x0800a38f
 800a2bc:	0800a38f 	.word	0x0800a38f
 800a2c0:	0800a34b 	.word	0x0800a34b
 800a2c4:	0800a38f 	.word	0x0800a38f
 800a2c8:	0800a38f 	.word	0x0800a38f
 800a2cc:	0800a38f 	.word	0x0800a38f
 800a2d0:	0800a38f 	.word	0x0800a38f
 800a2d4:	0800a38f 	.word	0x0800a38f
 800a2d8:	0800a38f 	.word	0x0800a38f
 800a2dc:	0800a38f 	.word	0x0800a38f
 800a2e0:	0800a35b 	.word	0x0800a35b
 800a2e4:	0800a38f 	.word	0x0800a38f
 800a2e8:	0800a38f 	.word	0x0800a38f
 800a2ec:	0800a38f 	.word	0x0800a38f
 800a2f0:	0800a38f 	.word	0x0800a38f
 800a2f4:	0800a38f 	.word	0x0800a38f
 800a2f8:	0800a38f 	.word	0x0800a38f
 800a2fc:	0800a38f 	.word	0x0800a38f
 800a300:	0800a38f 	.word	0x0800a38f
 800a304:	0800a38f 	.word	0x0800a38f
 800a308:	0800a38f 	.word	0x0800a38f
 800a30c:	0800a38f 	.word	0x0800a38f
 800a310:	0800a38f 	.word	0x0800a38f
 800a314:	0800a38f 	.word	0x0800a38f
 800a318:	0800a38f 	.word	0x0800a38f
 800a31c:	0800a38f 	.word	0x0800a38f
 800a320:	0800a381 	.word	0x0800a381
 800a324:	2b40      	cmp	r3, #64	; 0x40
 800a326:	d02e      	beq.n	800a386 <UART_SetConfig+0xab2>
 800a328:	e031      	b.n	800a38e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a32a:	f7fb fcb1 	bl	8005c90 <HAL_RCC_GetPCLK1Freq>
 800a32e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a330:	e033      	b.n	800a39a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a332:	f7fb fcc3 	bl	8005cbc <HAL_RCC_GetPCLK2Freq>
 800a336:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a338:	e02f      	b.n	800a39a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a33a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fc fea6 	bl	8007090 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a348:	e027      	b.n	800a39a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a34a:	f107 0318 	add.w	r3, r7, #24
 800a34e:	4618      	mov	r0, r3
 800a350:	f7fc fff2 	bl	8007338 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a358:	e01f      	b.n	800a39a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a35a:	4b69      	ldr	r3, [pc, #420]	; (800a500 <UART_SetConfig+0xc2c>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f003 0320 	and.w	r3, r3, #32
 800a362:	2b00      	cmp	r3, #0
 800a364:	d009      	beq.n	800a37a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a366:	4b66      	ldr	r3, [pc, #408]	; (800a500 <UART_SetConfig+0xc2c>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	08db      	lsrs	r3, r3, #3
 800a36c:	f003 0303 	and.w	r3, r3, #3
 800a370:	4a64      	ldr	r2, [pc, #400]	; (800a504 <UART_SetConfig+0xc30>)
 800a372:	fa22 f303 	lsr.w	r3, r2, r3
 800a376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a378:	e00f      	b.n	800a39a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a37a:	4b62      	ldr	r3, [pc, #392]	; (800a504 <UART_SetConfig+0xc30>)
 800a37c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a37e:	e00c      	b.n	800a39a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a380:	4b61      	ldr	r3, [pc, #388]	; (800a508 <UART_SetConfig+0xc34>)
 800a382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a384:	e009      	b.n	800a39a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a38a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a38c:	e005      	b.n	800a39a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a38e:	2300      	movs	r3, #0
 800a390:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a398:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a39a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f000 80ea 	beq.w	800a576 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a6:	4a55      	ldr	r2, [pc, #340]	; (800a4fc <UART_SetConfig+0xc28>)
 800a3a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3b4:	005a      	lsls	r2, r3, #1
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	085b      	lsrs	r3, r3, #1
 800a3bc:	441a      	add	r2, r3
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ca:	2b0f      	cmp	r3, #15
 800a3cc:	d916      	bls.n	800a3fc <UART_SetConfig+0xb28>
 800a3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3d4:	d212      	bcs.n	800a3fc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	f023 030f 	bic.w	r3, r3, #15
 800a3de:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e2:	085b      	lsrs	r3, r3, #1
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	f003 0307 	and.w	r3, r3, #7
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a3f8:	60da      	str	r2, [r3, #12]
 800a3fa:	e0bc      	b.n	800a576 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a402:	e0b8      	b.n	800a576 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a404:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a408:	2b20      	cmp	r3, #32
 800a40a:	dc4b      	bgt.n	800a4a4 <UART_SetConfig+0xbd0>
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f2c0 8087 	blt.w	800a520 <UART_SetConfig+0xc4c>
 800a412:	2b20      	cmp	r3, #32
 800a414:	f200 8084 	bhi.w	800a520 <UART_SetConfig+0xc4c>
 800a418:	a201      	add	r2, pc, #4	; (adr r2, 800a420 <UART_SetConfig+0xb4c>)
 800a41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41e:	bf00      	nop
 800a420:	0800a4ab 	.word	0x0800a4ab
 800a424:	0800a4b3 	.word	0x0800a4b3
 800a428:	0800a521 	.word	0x0800a521
 800a42c:	0800a521 	.word	0x0800a521
 800a430:	0800a4bb 	.word	0x0800a4bb
 800a434:	0800a521 	.word	0x0800a521
 800a438:	0800a521 	.word	0x0800a521
 800a43c:	0800a521 	.word	0x0800a521
 800a440:	0800a4cb 	.word	0x0800a4cb
 800a444:	0800a521 	.word	0x0800a521
 800a448:	0800a521 	.word	0x0800a521
 800a44c:	0800a521 	.word	0x0800a521
 800a450:	0800a521 	.word	0x0800a521
 800a454:	0800a521 	.word	0x0800a521
 800a458:	0800a521 	.word	0x0800a521
 800a45c:	0800a521 	.word	0x0800a521
 800a460:	0800a4db 	.word	0x0800a4db
 800a464:	0800a521 	.word	0x0800a521
 800a468:	0800a521 	.word	0x0800a521
 800a46c:	0800a521 	.word	0x0800a521
 800a470:	0800a521 	.word	0x0800a521
 800a474:	0800a521 	.word	0x0800a521
 800a478:	0800a521 	.word	0x0800a521
 800a47c:	0800a521 	.word	0x0800a521
 800a480:	0800a521 	.word	0x0800a521
 800a484:	0800a521 	.word	0x0800a521
 800a488:	0800a521 	.word	0x0800a521
 800a48c:	0800a521 	.word	0x0800a521
 800a490:	0800a521 	.word	0x0800a521
 800a494:	0800a521 	.word	0x0800a521
 800a498:	0800a521 	.word	0x0800a521
 800a49c:	0800a521 	.word	0x0800a521
 800a4a0:	0800a513 	.word	0x0800a513
 800a4a4:	2b40      	cmp	r3, #64	; 0x40
 800a4a6:	d037      	beq.n	800a518 <UART_SetConfig+0xc44>
 800a4a8:	e03a      	b.n	800a520 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4aa:	f7fb fbf1 	bl	8005c90 <HAL_RCC_GetPCLK1Freq>
 800a4ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a4b0:	e03c      	b.n	800a52c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4b2:	f7fb fc03 	bl	8005cbc <HAL_RCC_GetPCLK2Freq>
 800a4b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a4b8:	e038      	b.n	800a52c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fc fde6 	bl	8007090 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4c8:	e030      	b.n	800a52c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4ca:	f107 0318 	add.w	r3, r7, #24
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fc ff32 	bl	8007338 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4d8:	e028      	b.n	800a52c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4da:	4b09      	ldr	r3, [pc, #36]	; (800a500 <UART_SetConfig+0xc2c>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 0320 	and.w	r3, r3, #32
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d012      	beq.n	800a50c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4e6:	4b06      	ldr	r3, [pc, #24]	; (800a500 <UART_SetConfig+0xc2c>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	08db      	lsrs	r3, r3, #3
 800a4ec:	f003 0303 	and.w	r3, r3, #3
 800a4f0:	4a04      	ldr	r2, [pc, #16]	; (800a504 <UART_SetConfig+0xc30>)
 800a4f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4f8:	e018      	b.n	800a52c <UART_SetConfig+0xc58>
 800a4fa:	bf00      	nop
 800a4fc:	0800d4b4 	.word	0x0800d4b4
 800a500:	58024400 	.word	0x58024400
 800a504:	03d09000 	.word	0x03d09000
 800a508:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a50c:	4b24      	ldr	r3, [pc, #144]	; (800a5a0 <UART_SetConfig+0xccc>)
 800a50e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a510:	e00c      	b.n	800a52c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a512:	4b24      	ldr	r3, [pc, #144]	; (800a5a4 <UART_SetConfig+0xcd0>)
 800a514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a516:	e009      	b.n	800a52c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a51c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a51e:	e005      	b.n	800a52c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a520:	2300      	movs	r3, #0
 800a522:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a52a:	bf00      	nop
    }

    if (pclk != 0U)
 800a52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d021      	beq.n	800a576 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a536:	4a1c      	ldr	r2, [pc, #112]	; (800a5a8 <UART_SetConfig+0xcd4>)
 800a538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a53c:	461a      	mov	r2, r3
 800a53e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a540:	fbb3 f2f2 	udiv	r2, r3, r2
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	085b      	lsrs	r3, r3, #1
 800a54a:	441a      	add	r2, r3
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	fbb2 f3f3 	udiv	r3, r2, r3
 800a554:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a558:	2b0f      	cmp	r3, #15
 800a55a:	d909      	bls.n	800a570 <UART_SetConfig+0xc9c>
 800a55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a562:	d205      	bcs.n	800a570 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a566:	b29a      	uxth	r2, r3
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	60da      	str	r2, [r3, #12]
 800a56e:	e002      	b.n	800a576 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	2201      	movs	r2, #1
 800a57a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	2201      	movs	r2, #1
 800a582:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	2200      	movs	r2, #0
 800a58a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	2200      	movs	r2, #0
 800a590:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a592:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a596:	4618      	mov	r0, r3
 800a598:	3748      	adds	r7, #72	; 0x48
 800a59a:	46bd      	mov	sp, r7
 800a59c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5a0:	03d09000 	.word	0x03d09000
 800a5a4:	003d0900 	.word	0x003d0900
 800a5a8:	0800d4b4 	.word	0x0800d4b4

0800a5ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b8:	f003 0301 	and.w	r3, r3, #1
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00a      	beq.n	800a5d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5da:	f003 0302 	and.w	r3, r3, #2
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00a      	beq.n	800a5f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	430a      	orrs	r2, r1
 800a5f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5fc:	f003 0304 	and.w	r3, r3, #4
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00a      	beq.n	800a61a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	430a      	orrs	r2, r1
 800a618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a61e:	f003 0308 	and.w	r3, r3, #8
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00a      	beq.n	800a63c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	430a      	orrs	r2, r1
 800a63a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a640:	f003 0310 	and.w	r3, r3, #16
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00a      	beq.n	800a65e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	430a      	orrs	r2, r1
 800a65c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a662:	f003 0320 	and.w	r3, r3, #32
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00a      	beq.n	800a680 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	430a      	orrs	r2, r1
 800a67e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d01a      	beq.n	800a6c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	430a      	orrs	r2, r1
 800a6a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6aa:	d10a      	bne.n	800a6c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00a      	beq.n	800a6e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	430a      	orrs	r2, r1
 800a6e2:	605a      	str	r2, [r3, #4]
  }
}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b098      	sub	sp, #96	; 0x60
 800a6f4:	af02      	add	r7, sp, #8
 800a6f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a700:	f7f7 fd3e 	bl	8002180 <HAL_GetTick>
 800a704:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 0308 	and.w	r3, r3, #8
 800a710:	2b08      	cmp	r3, #8
 800a712:	d12f      	bne.n	800a774 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a71c:	2200      	movs	r2, #0
 800a71e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 f88e 	bl	800a844 <UART_WaitOnFlagUntilTimeout>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d022      	beq.n	800a774 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a736:	e853 3f00 	ldrex	r3, [r3]
 800a73a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a73e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a742:	653b      	str	r3, [r7, #80]	; 0x50
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	461a      	mov	r2, r3
 800a74a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a74c:	647b      	str	r3, [r7, #68]	; 0x44
 800a74e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a750:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a754:	e841 2300 	strex	r3, r2, [r1]
 800a758:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a75a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1e6      	bne.n	800a72e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2220      	movs	r2, #32
 800a764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a770:	2303      	movs	r3, #3
 800a772:	e063      	b.n	800a83c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 0304 	and.w	r3, r3, #4
 800a77e:	2b04      	cmp	r3, #4
 800a780:	d149      	bne.n	800a816 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a782:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a786:	9300      	str	r3, [sp, #0]
 800a788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a78a:	2200      	movs	r2, #0
 800a78c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 f857 	bl	800a844 <UART_WaitOnFlagUntilTimeout>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d03c      	beq.n	800a816 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a4:	e853 3f00 	ldrex	r3, [r3]
 800a7a8:	623b      	str	r3, [r7, #32]
   return(result);
 800a7aa:	6a3b      	ldr	r3, [r7, #32]
 800a7ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a7b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7ba:	633b      	str	r3, [r7, #48]	; 0x30
 800a7bc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7c2:	e841 2300 	strex	r3, r2, [r1]
 800a7c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1e6      	bne.n	800a79c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	3308      	adds	r3, #8
 800a7d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	e853 3f00 	ldrex	r3, [r3]
 800a7dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f023 0301 	bic.w	r3, r3, #1
 800a7e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	3308      	adds	r3, #8
 800a7ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7ee:	61fa      	str	r2, [r7, #28]
 800a7f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f2:	69b9      	ldr	r1, [r7, #24]
 800a7f4:	69fa      	ldr	r2, [r7, #28]
 800a7f6:	e841 2300 	strex	r3, r2, [r1]
 800a7fa:	617b      	str	r3, [r7, #20]
   return(result);
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d1e5      	bne.n	800a7ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2220      	movs	r2, #32
 800a806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a812:	2303      	movs	r3, #3
 800a814:	e012      	b.n	800a83c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2220      	movs	r2, #32
 800a81a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2220      	movs	r2, #32
 800a822:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3758      	adds	r7, #88	; 0x58
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	603b      	str	r3, [r7, #0]
 800a850:	4613      	mov	r3, r2
 800a852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a854:	e049      	b.n	800a8ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a85c:	d045      	beq.n	800a8ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a85e:	f7f7 fc8f 	bl	8002180 <HAL_GetTick>
 800a862:	4602      	mov	r2, r0
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	69ba      	ldr	r2, [r7, #24]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d302      	bcc.n	800a874 <UART_WaitOnFlagUntilTimeout+0x30>
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d101      	bne.n	800a878 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a874:	2303      	movs	r3, #3
 800a876:	e048      	b.n	800a90a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f003 0304 	and.w	r3, r3, #4
 800a882:	2b00      	cmp	r3, #0
 800a884:	d031      	beq.n	800a8ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	69db      	ldr	r3, [r3, #28]
 800a88c:	f003 0308 	and.w	r3, r3, #8
 800a890:	2b08      	cmp	r3, #8
 800a892:	d110      	bne.n	800a8b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2208      	movs	r2, #8
 800a89a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f000 f95b 	bl	800ab58 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2208      	movs	r2, #8
 800a8a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e029      	b.n	800a90a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	69db      	ldr	r3, [r3, #28]
 800a8bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8c4:	d111      	bne.n	800a8ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f000 f941 	bl	800ab58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2220      	movs	r2, #32
 800a8da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a8e6:	2303      	movs	r3, #3
 800a8e8:	e00f      	b.n	800a90a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	69da      	ldr	r2, [r3, #28]
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	68ba      	ldr	r2, [r7, #8]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	bf0c      	ite	eq
 800a8fa:	2301      	moveq	r3, #1
 800a8fc:	2300      	movne	r3, #0
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	461a      	mov	r2, r3
 800a902:	79fb      	ldrb	r3, [r7, #7]
 800a904:	429a      	cmp	r2, r3
 800a906:	d0a6      	beq.n	800a856 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
	...

0800a914 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a914:	b480      	push	{r7}
 800a916:	b0a3      	sub	sp, #140	; 0x8c
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	4613      	mov	r3, r2
 800a920:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	68ba      	ldr	r2, [r7, #8]
 800a926:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	88fa      	ldrh	r2, [r7, #6]
 800a92c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	88fa      	ldrh	r2, [r7, #6]
 800a934:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2200      	movs	r2, #0
 800a93c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a946:	d10e      	bne.n	800a966 <UART_Start_Receive_IT+0x52>
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d105      	bne.n	800a95c <UART_Start_Receive_IT+0x48>
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a956:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a95a:	e02d      	b.n	800a9b8 <UART_Start_Receive_IT+0xa4>
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	22ff      	movs	r2, #255	; 0xff
 800a960:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a964:	e028      	b.n	800a9b8 <UART_Start_Receive_IT+0xa4>
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10d      	bne.n	800a98a <UART_Start_Receive_IT+0x76>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d104      	bne.n	800a980 <UART_Start_Receive_IT+0x6c>
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	22ff      	movs	r2, #255	; 0xff
 800a97a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a97e:	e01b      	b.n	800a9b8 <UART_Start_Receive_IT+0xa4>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	227f      	movs	r2, #127	; 0x7f
 800a984:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a988:	e016      	b.n	800a9b8 <UART_Start_Receive_IT+0xa4>
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a992:	d10d      	bne.n	800a9b0 <UART_Start_Receive_IT+0x9c>
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d104      	bne.n	800a9a6 <UART_Start_Receive_IT+0x92>
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	227f      	movs	r2, #127	; 0x7f
 800a9a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a9a4:	e008      	b.n	800a9b8 <UART_Start_Receive_IT+0xa4>
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	223f      	movs	r2, #63	; 0x3f
 800a9aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a9ae:	e003      	b.n	800a9b8 <UART_Start_Receive_IT+0xa4>
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2222      	movs	r2, #34	; 0x22
 800a9c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	3308      	adds	r3, #8
 800a9ce:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9d2:	e853 3f00 	ldrex	r3, [r3]
 800a9d6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a9d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9da:	f043 0301 	orr.w	r3, r3, #1
 800a9de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	3308      	adds	r3, #8
 800a9e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a9ec:	673a      	str	r2, [r7, #112]	; 0x70
 800a9ee:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a9f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a9f4:	e841 2300 	strex	r3, r2, [r1]
 800a9f8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a9fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1e3      	bne.n	800a9c8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa08:	d14f      	bne.n	800aaaa <UART_Start_Receive_IT+0x196>
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aa10:	88fa      	ldrh	r2, [r7, #6]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d349      	bcc.n	800aaaa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa1e:	d107      	bne.n	800aa30 <UART_Start_Receive_IT+0x11c>
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d103      	bne.n	800aa30 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	4a47      	ldr	r2, [pc, #284]	; (800ab48 <UART_Start_Receive_IT+0x234>)
 800aa2c:	675a      	str	r2, [r3, #116]	; 0x74
 800aa2e:	e002      	b.n	800aa36 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	4a46      	ldr	r2, [pc, #280]	; (800ab4c <UART_Start_Receive_IT+0x238>)
 800aa34:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d01a      	beq.n	800aa74 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa46:	e853 3f00 	ldrex	r3, [r3]
 800aa4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aa4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aa60:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa62:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa64:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa68:	e841 2300 	strex	r3, r2, [r1]
 800aa6c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aa6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1e4      	bne.n	800aa3e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3308      	adds	r3, #8
 800aa7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa7e:	e853 3f00 	ldrex	r3, [r3]
 800aa82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	3308      	adds	r3, #8
 800aa92:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800aa94:	64ba      	str	r2, [r7, #72]	; 0x48
 800aa96:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa9c:	e841 2300 	strex	r3, r2, [r1]
 800aaa0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aaa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1e5      	bne.n	800aa74 <UART_Start_Receive_IT+0x160>
 800aaa8:	e046      	b.n	800ab38 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aab2:	d107      	bne.n	800aac4 <UART_Start_Receive_IT+0x1b0>
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d103      	bne.n	800aac4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4a24      	ldr	r2, [pc, #144]	; (800ab50 <UART_Start_Receive_IT+0x23c>)
 800aac0:	675a      	str	r2, [r3, #116]	; 0x74
 800aac2:	e002      	b.n	800aaca <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	4a23      	ldr	r2, [pc, #140]	; (800ab54 <UART_Start_Receive_IT+0x240>)
 800aac8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d019      	beq.n	800ab06 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aada:	e853 3f00 	ldrex	r3, [r3]
 800aade:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800aae6:	677b      	str	r3, [r7, #116]	; 0x74
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	461a      	mov	r2, r3
 800aaee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaf0:	637b      	str	r3, [r7, #52]	; 0x34
 800aaf2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aaf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aaf8:	e841 2300 	strex	r3, r2, [r1]
 800aafc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d1e6      	bne.n	800aad2 <UART_Start_Receive_IT+0x1be>
 800ab04:	e018      	b.n	800ab38 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	e853 3f00 	ldrex	r3, [r3]
 800ab12:	613b      	str	r3, [r7, #16]
   return(result);
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	f043 0320 	orr.w	r3, r3, #32
 800ab1a:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	461a      	mov	r2, r3
 800ab22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab24:	623b      	str	r3, [r7, #32]
 800ab26:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab28:	69f9      	ldr	r1, [r7, #28]
 800ab2a:	6a3a      	ldr	r2, [r7, #32]
 800ab2c:	e841 2300 	strex	r3, r2, [r1]
 800ab30:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1e6      	bne.n	800ab06 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	378c      	adds	r7, #140	; 0x8c
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	0800b6bd 	.word	0x0800b6bd
 800ab4c:	0800b35d 	.word	0x0800b35d
 800ab50:	0800b1a5 	.word	0x0800b1a5
 800ab54:	0800afed 	.word	0x0800afed

0800ab58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b095      	sub	sp, #84	; 0x54
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab68:	e853 3f00 	ldrex	r3, [r3]
 800ab6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab74:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab7e:	643b      	str	r3, [r7, #64]	; 0x40
 800ab80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab86:	e841 2300 	strex	r3, r2, [r1]
 800ab8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1e6      	bne.n	800ab60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	3308      	adds	r3, #8
 800ab98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9a:	6a3b      	ldr	r3, [r7, #32]
 800ab9c:	e853 3f00 	ldrex	r3, [r3]
 800aba0:	61fb      	str	r3, [r7, #28]
   return(result);
 800aba2:	69fa      	ldr	r2, [r7, #28]
 800aba4:	4b1e      	ldr	r3, [pc, #120]	; (800ac20 <UART_EndRxTransfer+0xc8>)
 800aba6:	4013      	ands	r3, r2
 800aba8:	64bb      	str	r3, [r7, #72]	; 0x48
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	3308      	adds	r3, #8
 800abb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800abb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abba:	e841 2300 	strex	r3, r2, [r1]
 800abbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d1e5      	bne.n	800ab92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d118      	bne.n	800ac00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	e853 3f00 	ldrex	r3, [r3]
 800abda:	60bb      	str	r3, [r7, #8]
   return(result);
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	f023 0310 	bic.w	r3, r3, #16
 800abe2:	647b      	str	r3, [r7, #68]	; 0x44
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	461a      	mov	r2, r3
 800abea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abec:	61bb      	str	r3, [r7, #24]
 800abee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf0:	6979      	ldr	r1, [r7, #20]
 800abf2:	69ba      	ldr	r2, [r7, #24]
 800abf4:	e841 2300 	strex	r3, r2, [r1]
 800abf8:	613b      	str	r3, [r7, #16]
   return(result);
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d1e6      	bne.n	800abce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2220      	movs	r2, #32
 800ac04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ac14:	bf00      	nop
 800ac16:	3754      	adds	r7, #84	; 0x54
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr
 800ac20:	effffffe 	.word	0xeffffffe

0800ac24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f7fe fe30 	bl	80098a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac48:	bf00      	nop
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b08f      	sub	sp, #60	; 0x3c
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac5e:	2b21      	cmp	r3, #33	; 0x21
 800ac60:	d14c      	bne.n	800acfc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d132      	bne.n	800acd4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac74:	6a3b      	ldr	r3, [r7, #32]
 800ac76:	e853 3f00 	ldrex	r3, [r3]
 800ac7a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac82:	637b      	str	r3, [r7, #52]	; 0x34
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	461a      	mov	r2, r3
 800ac8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac8e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac94:	e841 2300 	strex	r3, r2, [r1]
 800ac98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1e6      	bne.n	800ac6e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	e853 3f00 	ldrex	r3, [r3]
 800acac:	60bb      	str	r3, [r7, #8]
   return(result);
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acb4:	633b      	str	r3, [r7, #48]	; 0x30
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	461a      	mov	r2, r3
 800acbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbe:	61bb      	str	r3, [r7, #24]
 800acc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc2:	6979      	ldr	r1, [r7, #20]
 800acc4:	69ba      	ldr	r2, [r7, #24]
 800acc6:	e841 2300 	strex	r3, r2, [r1]
 800acca:	613b      	str	r3, [r7, #16]
   return(result);
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d1e6      	bne.n	800aca0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800acd2:	e013      	b.n	800acfc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acd8:	781a      	ldrb	r2, [r3, #0]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ace4:	1c5a      	adds	r2, r3, #1
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	3b01      	subs	r3, #1
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800acfc:	bf00      	nop
 800acfe:	373c      	adds	r7, #60	; 0x3c
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b091      	sub	sp, #68	; 0x44
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad16:	2b21      	cmp	r3, #33	; 0x21
 800ad18:	d151      	bne.n	800adbe <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d132      	bne.n	800ad8c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2e:	e853 3f00 	ldrex	r3, [r3]
 800ad32:	623b      	str	r3, [r7, #32]
   return(result);
 800ad34:	6a3b      	ldr	r3, [r7, #32]
 800ad36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad3a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	461a      	mov	r2, r3
 800ad42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad44:	633b      	str	r3, [r7, #48]	; 0x30
 800ad46:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad4c:	e841 2300 	strex	r3, r2, [r1]
 800ad50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1e6      	bne.n	800ad26 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	e853 3f00 	ldrex	r3, [r3]
 800ad64:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad6c:	637b      	str	r3, [r7, #52]	; 0x34
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	461a      	mov	r2, r3
 800ad74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad76:	61fb      	str	r3, [r7, #28]
 800ad78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7a:	69b9      	ldr	r1, [r7, #24]
 800ad7c:	69fa      	ldr	r2, [r7, #28]
 800ad7e:	e841 2300 	strex	r3, r2, [r1]
 800ad82:	617b      	str	r3, [r7, #20]
   return(result);
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1e6      	bne.n	800ad58 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800ad8a:	e018      	b.n	800adbe <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad90:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ad92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad94:	881b      	ldrh	r3, [r3, #0]
 800ad96:	461a      	mov	r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ada0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ada6:	1c9a      	adds	r2, r3, #2
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	3b01      	subs	r3, #1
 800adb6:	b29a      	uxth	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800adbe:	bf00      	nop
 800adc0:	3744      	adds	r7, #68	; 0x44
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800adca:	b480      	push	{r7}
 800adcc:	b091      	sub	sp, #68	; 0x44
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800add8:	2b21      	cmp	r3, #33	; 0x21
 800adda:	d160      	bne.n	800ae9e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ade2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ade4:	e057      	b.n	800ae96 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800adec:	b29b      	uxth	r3, r3
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d133      	bne.n	800ae5a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	3308      	adds	r3, #8
 800adf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfc:	e853 3f00 	ldrex	r3, [r3]
 800ae00:	623b      	str	r3, [r7, #32]
   return(result);
 800ae02:	6a3b      	ldr	r3, [r7, #32]
 800ae04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ae08:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	3308      	adds	r3, #8
 800ae10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae12:	633a      	str	r2, [r7, #48]	; 0x30
 800ae14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae1a:	e841 2300 	strex	r3, r2, [r1]
 800ae1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1e5      	bne.n	800adf2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	e853 3f00 	ldrex	r3, [r3]
 800ae32:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae3a:	637b      	str	r3, [r7, #52]	; 0x34
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	461a      	mov	r2, r3
 800ae42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae44:	61fb      	str	r3, [r7, #28]
 800ae46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae48:	69b9      	ldr	r1, [r7, #24]
 800ae4a:	69fa      	ldr	r2, [r7, #28]
 800ae4c:	e841 2300 	strex	r3, r2, [r1]
 800ae50:	617b      	str	r3, [r7, #20]
   return(result);
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d1e6      	bne.n	800ae26 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ae58:	e021      	b.n	800ae9e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	69db      	ldr	r3, [r3, #28]
 800ae60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d013      	beq.n	800ae90 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae6c:	781a      	ldrb	r2, [r3, #0]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae78:	1c5a      	adds	r2, r3, #1
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	3b01      	subs	r3, #1
 800ae88:	b29a      	uxth	r2, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ae90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae92:	3b01      	subs	r3, #1
 800ae94:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ae96:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1a4      	bne.n	800ade6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800ae9c:	e7ff      	b.n	800ae9e <UART_TxISR_8BIT_FIFOEN+0xd4>
 800ae9e:	bf00      	nop
 800aea0:	3744      	adds	r7, #68	; 0x44
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr

0800aeaa <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800aeaa:	b480      	push	{r7}
 800aeac:	b091      	sub	sp, #68	; 0x44
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeb8:	2b21      	cmp	r3, #33	; 0x21
 800aeba:	d165      	bne.n	800af88 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aec2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800aec4:	e05c      	b.n	800af80 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aecc:	b29b      	uxth	r3, r3
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d133      	bne.n	800af3a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	3308      	adds	r3, #8
 800aed8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeda:	6a3b      	ldr	r3, [r7, #32]
 800aedc:	e853 3f00 	ldrex	r3, [r3]
 800aee0:	61fb      	str	r3, [r7, #28]
   return(result);
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800aee8:	637b      	str	r3, [r7, #52]	; 0x34
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	3308      	adds	r3, #8
 800aef0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aef2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aef4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aefa:	e841 2300 	strex	r3, r2, [r1]
 800aefe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1e5      	bne.n	800aed2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	e853 3f00 	ldrex	r3, [r3]
 800af12:	60bb      	str	r3, [r7, #8]
   return(result);
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af1a:	633b      	str	r3, [r7, #48]	; 0x30
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	461a      	mov	r2, r3
 800af22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af24:	61bb      	str	r3, [r7, #24]
 800af26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af28:	6979      	ldr	r1, [r7, #20]
 800af2a:	69ba      	ldr	r2, [r7, #24]
 800af2c:	e841 2300 	strex	r3, r2, [r1]
 800af30:	613b      	str	r3, [r7, #16]
   return(result);
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d1e6      	bne.n	800af06 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800af38:	e026      	b.n	800af88 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	69db      	ldr	r3, [r3, #28]
 800af40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af44:	2b00      	cmp	r3, #0
 800af46:	d018      	beq.n	800af7a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af4c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800af4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af50:	881b      	ldrh	r3, [r3, #0]
 800af52:	461a      	mov	r2, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af5c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af62:	1c9a      	adds	r2, r3, #2
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800af6e:	b29b      	uxth	r3, r3
 800af70:	3b01      	subs	r3, #1
 800af72:	b29a      	uxth	r2, r3
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800af7a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800af7c:	3b01      	subs	r3, #1
 800af7e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800af80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800af82:	2b00      	cmp	r3, #0
 800af84:	d19f      	bne.n	800aec6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800af86:	e7ff      	b.n	800af88 <UART_TxISR_16BIT_FIFOEN+0xde>
 800af88:	bf00      	nop
 800af8a:	3744      	adds	r7, #68	; 0x44
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b088      	sub	sp, #32
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	e853 3f00 	ldrex	r3, [r3]
 800afa8:	60bb      	str	r3, [r7, #8]
   return(result);
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afb0:	61fb      	str	r3, [r7, #28]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	461a      	mov	r2, r3
 800afb8:	69fb      	ldr	r3, [r7, #28]
 800afba:	61bb      	str	r3, [r7, #24]
 800afbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afbe:	6979      	ldr	r1, [r7, #20]
 800afc0:	69ba      	ldr	r2, [r7, #24]
 800afc2:	e841 2300 	strex	r3, r2, [r1]
 800afc6:	613b      	str	r3, [r7, #16]
   return(result);
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d1e6      	bne.n	800af9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2220      	movs	r2, #32
 800afd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f7fe fc59 	bl	8009894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afe2:	bf00      	nop
 800afe4:	3720      	adds	r7, #32
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
	...

0800afec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b09c      	sub	sp, #112	; 0x70
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800affa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b004:	2b22      	cmp	r3, #34	; 0x22
 800b006:	f040 80be 	bne.w	800b186 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b010:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b014:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b018:	b2d9      	uxtb	r1, r3
 800b01a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b01e:	b2da      	uxtb	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b024:	400a      	ands	r2, r1
 800b026:	b2d2      	uxtb	r2, r2
 800b028:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b02e:	1c5a      	adds	r2, r3, #1
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	3b01      	subs	r3, #1
 800b03e:	b29a      	uxth	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	2b00      	cmp	r3, #0
 800b050:	f040 80a1 	bne.w	800b196 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b05a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b05c:	e853 3f00 	ldrex	r3, [r3]
 800b060:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b064:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b068:	66bb      	str	r3, [r7, #104]	; 0x68
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	461a      	mov	r2, r3
 800b070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b072:	65bb      	str	r3, [r7, #88]	; 0x58
 800b074:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b076:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b078:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b07a:	e841 2300 	strex	r3, r2, [r1]
 800b07e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b082:	2b00      	cmp	r3, #0
 800b084:	d1e6      	bne.n	800b054 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	3308      	adds	r3, #8
 800b08c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b090:	e853 3f00 	ldrex	r3, [r3]
 800b094:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b098:	f023 0301 	bic.w	r3, r3, #1
 800b09c:	667b      	str	r3, [r7, #100]	; 0x64
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	3308      	adds	r3, #8
 800b0a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b0a6:	647a      	str	r2, [r7, #68]	; 0x44
 800b0a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0ae:	e841 2300 	strex	r3, r2, [r1]
 800b0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d1e5      	bne.n	800b086 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2220      	movs	r2, #32
 800b0be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a33      	ldr	r2, [pc, #204]	; (800b1a0 <UART_RxISR_8BIT+0x1b4>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d01f      	beq.n	800b118 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d018      	beq.n	800b118 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ee:	e853 3f00 	ldrex	r3, [r3]
 800b0f2:	623b      	str	r3, [r7, #32]
   return(result);
 800b0f4:	6a3b      	ldr	r3, [r7, #32]
 800b0f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b0fa:	663b      	str	r3, [r7, #96]	; 0x60
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	461a      	mov	r2, r3
 800b102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b104:	633b      	str	r3, [r7, #48]	; 0x30
 800b106:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b108:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b10a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b10c:	e841 2300 	strex	r3, r2, [r1]
 800b110:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b114:	2b00      	cmp	r3, #0
 800b116:	d1e6      	bne.n	800b0e6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d12e      	bne.n	800b17e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	e853 3f00 	ldrex	r3, [r3]
 800b132:	60fb      	str	r3, [r7, #12]
   return(result);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f023 0310 	bic.w	r3, r3, #16
 800b13a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	461a      	mov	r2, r3
 800b142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b144:	61fb      	str	r3, [r7, #28]
 800b146:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b148:	69b9      	ldr	r1, [r7, #24]
 800b14a:	69fa      	ldr	r2, [r7, #28]
 800b14c:	e841 2300 	strex	r3, r2, [r1]
 800b150:	617b      	str	r3, [r7, #20]
   return(result);
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d1e6      	bne.n	800b126 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	69db      	ldr	r3, [r3, #28]
 800b15e:	f003 0310 	and.w	r3, r3, #16
 800b162:	2b10      	cmp	r3, #16
 800b164:	d103      	bne.n	800b16e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2210      	movs	r2, #16
 800b16c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b174:	4619      	mov	r1, r3
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f7fe fba0 	bl	80098bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b17c:	e00b      	b.n	800b196 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f7f6 ff30 	bl	8001fe4 <HAL_UART_RxCpltCallback>
}
 800b184:	e007      	b.n	800b196 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	699a      	ldr	r2, [r3, #24]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f042 0208 	orr.w	r2, r2, #8
 800b194:	619a      	str	r2, [r3, #24]
}
 800b196:	bf00      	nop
 800b198:	3770      	adds	r7, #112	; 0x70
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	58000c00 	.word	0x58000c00

0800b1a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b09c      	sub	sp, #112	; 0x70
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b1b2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1bc:	2b22      	cmp	r3, #34	; 0x22
 800b1be:	f040 80be 	bne.w	800b33e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1d0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b1d2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800b1d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b1da:	4013      	ands	r3, r2
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b1e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1e6:	1c9a      	adds	r2, r3, #2
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	b29a      	uxth	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b204:	b29b      	uxth	r3, r3
 800b206:	2b00      	cmp	r3, #0
 800b208:	f040 80a1 	bne.w	800b34e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b214:	e853 3f00 	ldrex	r3, [r3]
 800b218:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b21a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b21c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b220:	667b      	str	r3, [r7, #100]	; 0x64
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	461a      	mov	r2, r3
 800b228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b22a:	657b      	str	r3, [r7, #84]	; 0x54
 800b22c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b22e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b230:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b232:	e841 2300 	strex	r3, r2, [r1]
 800b236:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1e6      	bne.n	800b20c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	3308      	adds	r3, #8
 800b244:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b248:	e853 3f00 	ldrex	r3, [r3]
 800b24c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b250:	f023 0301 	bic.w	r3, r3, #1
 800b254:	663b      	str	r3, [r7, #96]	; 0x60
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	3308      	adds	r3, #8
 800b25c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b25e:	643a      	str	r2, [r7, #64]	; 0x40
 800b260:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b262:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b264:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b266:	e841 2300 	strex	r3, r2, [r1]
 800b26a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d1e5      	bne.n	800b23e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2220      	movs	r2, #32
 800b276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a33      	ldr	r2, [pc, #204]	; (800b358 <UART_RxISR_16BIT+0x1b4>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d01f      	beq.n	800b2d0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d018      	beq.n	800b2d0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a4:	6a3b      	ldr	r3, [r7, #32]
 800b2a6:	e853 3f00 	ldrex	r3, [r3]
 800b2aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2ac:	69fb      	ldr	r3, [r7, #28]
 800b2ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b2b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2be:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2c4:	e841 2300 	strex	r3, r2, [r1]
 800b2c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d1e6      	bne.n	800b29e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d12e      	bne.n	800b336 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	e853 3f00 	ldrex	r3, [r3]
 800b2ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	f023 0310 	bic.w	r3, r3, #16
 800b2f2:	65bb      	str	r3, [r7, #88]	; 0x58
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b2fc:	61bb      	str	r3, [r7, #24]
 800b2fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b300:	6979      	ldr	r1, [r7, #20]
 800b302:	69ba      	ldr	r2, [r7, #24]
 800b304:	e841 2300 	strex	r3, r2, [r1]
 800b308:	613b      	str	r3, [r7, #16]
   return(result);
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1e6      	bne.n	800b2de <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	69db      	ldr	r3, [r3, #28]
 800b316:	f003 0310 	and.w	r3, r3, #16
 800b31a:	2b10      	cmp	r3, #16
 800b31c:	d103      	bne.n	800b326 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2210      	movs	r2, #16
 800b324:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b32c:	4619      	mov	r1, r3
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f7fe fac4 	bl	80098bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b334:	e00b      	b.n	800b34e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f7f6 fe54 	bl	8001fe4 <HAL_UART_RxCpltCallback>
}
 800b33c:	e007      	b.n	800b34e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	699a      	ldr	r2, [r3, #24]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f042 0208 	orr.w	r2, r2, #8
 800b34c:	619a      	str	r2, [r3, #24]
}
 800b34e:	bf00      	nop
 800b350:	3770      	adds	r7, #112	; 0x70
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	58000c00 	.word	0x58000c00

0800b35c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b0ac      	sub	sp, #176	; 0xb0
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b36a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	69db      	ldr	r3, [r3, #28]
 800b374:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b392:	2b22      	cmp	r3, #34	; 0x22
 800b394:	f040 8180 	bne.w	800b698 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b39e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b3a2:	e123      	b.n	800b5ec <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3aa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b3ae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b3b2:	b2d9      	uxtb	r1, r3
 800b3b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b3b8:	b2da      	uxtb	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3be:	400a      	ands	r2, r1
 800b3c0:	b2d2      	uxtb	r2, r2
 800b3c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3c8:	1c5a      	adds	r2, r3, #1
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	69db      	ldr	r3, [r3, #28]
 800b3e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b3ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3ee:	f003 0307 	and.w	r3, r3, #7
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d053      	beq.n	800b49e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b3f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3fa:	f003 0301 	and.w	r3, r3, #1
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d011      	beq.n	800b426 <UART_RxISR_8BIT_FIFOEN+0xca>
 800b402:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d00b      	beq.n	800b426 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2201      	movs	r2, #1
 800b414:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b41c:	f043 0201 	orr.w	r2, r3, #1
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b42a:	f003 0302 	and.w	r3, r3, #2
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d011      	beq.n	800b456 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b432:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b436:	f003 0301 	and.w	r3, r3, #1
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00b      	beq.n	800b456 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	2202      	movs	r2, #2
 800b444:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b44c:	f043 0204 	orr.w	r2, r3, #4
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b45a:	f003 0304 	and.w	r3, r3, #4
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d011      	beq.n	800b486 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b466:	f003 0301 	and.w	r3, r3, #1
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00b      	beq.n	800b486 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	2204      	movs	r2, #4
 800b474:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b47c:	f043 0202 	orr.w	r2, r3, #2
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d006      	beq.n	800b49e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f7fe fa09 	bl	80098a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2200      	movs	r2, #0
 800b49a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f040 80a0 	bne.w	800b5ec <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b4b4:	e853 3f00 	ldrex	r3, [r3]
 800b4b8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800b4ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b4ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b4d0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b4d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b4d6:	e841 2300 	strex	r3, r2, [r1]
 800b4da:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800b4dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1e4      	bne.n	800b4ac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	3308      	adds	r3, #8
 800b4e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4ec:	e853 3f00 	ldrex	r3, [r3]
 800b4f0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b4f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b4f4:	4b6e      	ldr	r3, [pc, #440]	; (800b6b0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800b4f6:	4013      	ands	r3, r2
 800b4f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	3308      	adds	r3, #8
 800b502:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b506:	66ba      	str	r2, [r7, #104]	; 0x68
 800b508:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b50a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b50c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b50e:	e841 2300 	strex	r3, r2, [r1]
 800b512:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b514:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b516:	2b00      	cmp	r3, #0
 800b518:	d1e3      	bne.n	800b4e2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2220      	movs	r2, #32
 800b51e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4a60      	ldr	r2, [pc, #384]	; (800b6b4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d021      	beq.n	800b57c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b542:	2b00      	cmp	r3, #0
 800b544:	d01a      	beq.n	800b57c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b54e:	e853 3f00 	ldrex	r3, [r3]
 800b552:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b556:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b55a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	461a      	mov	r2, r3
 800b564:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b568:	657b      	str	r3, [r7, #84]	; 0x54
 800b56a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b56e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b570:	e841 2300 	strex	r3, r2, [r1]
 800b574:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1e4      	bne.n	800b546 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b580:	2b01      	cmp	r3, #1
 800b582:	d130      	bne.n	800b5e6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2200      	movs	r2, #0
 800b588:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b592:	e853 3f00 	ldrex	r3, [r3]
 800b596:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59a:	f023 0310 	bic.w	r3, r3, #16
 800b59e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5ac:	643b      	str	r3, [r7, #64]	; 0x40
 800b5ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b5b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b5b4:	e841 2300 	strex	r3, r2, [r1]
 800b5b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d1e4      	bne.n	800b58a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	69db      	ldr	r3, [r3, #28]
 800b5c6:	f003 0310 	and.w	r3, r3, #16
 800b5ca:	2b10      	cmp	r3, #16
 800b5cc:	d103      	bne.n	800b5d6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2210      	movs	r2, #16
 800b5d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b5dc:	4619      	mov	r1, r3
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f7fe f96c 	bl	80098bc <HAL_UARTEx_RxEventCallback>
 800b5e4:	e002      	b.n	800b5ec <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f7f6 fcfc 	bl	8001fe4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b5ec:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d006      	beq.n	800b602 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800b5f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b5f8:	f003 0320 	and.w	r3, r3, #32
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f47f aed1 	bne.w	800b3a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b608:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b60c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b610:	2b00      	cmp	r3, #0
 800b612:	d049      	beq.n	800b6a8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b61a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800b61e:	429a      	cmp	r2, r3
 800b620:	d242      	bcs.n	800b6a8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	3308      	adds	r3, #8
 800b628:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62a:	6a3b      	ldr	r3, [r7, #32]
 800b62c:	e853 3f00 	ldrex	r3, [r3]
 800b630:	61fb      	str	r3, [r7, #28]
   return(result);
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b638:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	3308      	adds	r3, #8
 800b642:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b646:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b648:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b64a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b64c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b64e:	e841 2300 	strex	r3, r2, [r1]
 800b652:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b656:	2b00      	cmp	r3, #0
 800b658:	d1e3      	bne.n	800b622 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4a16      	ldr	r2, [pc, #88]	; (800b6b8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b65e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	e853 3f00 	ldrex	r3, [r3]
 800b66c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	f043 0320 	orr.w	r3, r3, #32
 800b674:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	461a      	mov	r2, r3
 800b67e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b682:	61bb      	str	r3, [r7, #24]
 800b684:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b686:	6979      	ldr	r1, [r7, #20]
 800b688:	69ba      	ldr	r2, [r7, #24]
 800b68a:	e841 2300 	strex	r3, r2, [r1]
 800b68e:	613b      	str	r3, [r7, #16]
   return(result);
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d1e4      	bne.n	800b660 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b696:	e007      	b.n	800b6a8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	699a      	ldr	r2, [r3, #24]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f042 0208 	orr.w	r2, r2, #8
 800b6a6:	619a      	str	r2, [r3, #24]
}
 800b6a8:	bf00      	nop
 800b6aa:	37b0      	adds	r7, #176	; 0xb0
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	effffffe 	.word	0xeffffffe
 800b6b4:	58000c00 	.word	0x58000c00
 800b6b8:	0800afed 	.word	0x0800afed

0800b6bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b0ae      	sub	sp, #184	; 0xb8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b6ca:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	69db      	ldr	r3, [r3, #28]
 800b6d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6f2:	2b22      	cmp	r3, #34	; 0x22
 800b6f4:	f040 8184 	bne.w	800ba00 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b6fe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b702:	e127      	b.n	800b954 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b716:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800b71a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800b71e:	4013      	ands	r3, r2
 800b720:	b29a      	uxth	r2, r3
 800b722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b726:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b72c:	1c9a      	adds	r2, r3, #2
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b738:	b29b      	uxth	r3, r3
 800b73a:	3b01      	subs	r3, #1
 800b73c:	b29a      	uxth	r2, r3
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	69db      	ldr	r3, [r3, #28]
 800b74a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b74e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b752:	f003 0307 	and.w	r3, r3, #7
 800b756:	2b00      	cmp	r3, #0
 800b758:	d053      	beq.n	800b802 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b75a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b75e:	f003 0301 	and.w	r3, r3, #1
 800b762:	2b00      	cmp	r3, #0
 800b764:	d011      	beq.n	800b78a <UART_RxISR_16BIT_FIFOEN+0xce>
 800b766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b76a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00b      	beq.n	800b78a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2201      	movs	r2, #1
 800b778:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b780:	f043 0201 	orr.w	r2, r3, #1
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b78a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b78e:	f003 0302 	and.w	r3, r3, #2
 800b792:	2b00      	cmp	r3, #0
 800b794:	d011      	beq.n	800b7ba <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b796:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b79a:	f003 0301 	and.w	r3, r3, #1
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d00b      	beq.n	800b7ba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2202      	movs	r2, #2
 800b7a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7b0:	f043 0204 	orr.w	r2, r3, #4
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b7be:	f003 0304 	and.w	r3, r3, #4
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d011      	beq.n	800b7ea <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b7c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b7ca:	f003 0301 	and.w	r3, r3, #1
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00b      	beq.n	800b7ea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2204      	movs	r2, #4
 800b7d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7e0:	f043 0202 	orr.w	r2, r3, #2
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d006      	beq.n	800b802 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f7fe f857 	bl	80098a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b808:	b29b      	uxth	r3, r3
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	f040 80a2 	bne.w	800b954 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b818:	e853 3f00 	ldrex	r3, [r3]
 800b81c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b81e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b824:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	461a      	mov	r2, r3
 800b82e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b832:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b836:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b838:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b83a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b83e:	e841 2300 	strex	r3, r2, [r1]
 800b842:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b846:	2b00      	cmp	r3, #0
 800b848:	d1e2      	bne.n	800b810 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	3308      	adds	r3, #8
 800b850:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b854:	e853 3f00 	ldrex	r3, [r3]
 800b858:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b85a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b85c:	4b6e      	ldr	r3, [pc, #440]	; (800ba18 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800b85e:	4013      	ands	r3, r2
 800b860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	3308      	adds	r3, #8
 800b86a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b86e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b870:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b872:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b874:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b876:	e841 2300 	strex	r3, r2, [r1]
 800b87a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b87c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d1e3      	bne.n	800b84a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2220      	movs	r2, #32
 800b886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a60      	ldr	r2, [pc, #384]	; (800ba1c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d021      	beq.n	800b8e4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d01a      	beq.n	800b8e4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8b6:	e853 3f00 	ldrex	r3, [r3]
 800b8ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b8bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b8c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b8d0:	65bb      	str	r3, [r7, #88]	; 0x58
 800b8d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b8d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b8d8:	e841 2300 	strex	r3, r2, [r1]
 800b8dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b8de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1e4      	bne.n	800b8ae <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8e8:	2b01      	cmp	r3, #1
 800b8ea:	d130      	bne.n	800b94e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fa:	e853 3f00 	ldrex	r3, [r3]
 800b8fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b902:	f023 0310 	bic.w	r3, r3, #16
 800b906:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	461a      	mov	r2, r3
 800b910:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b914:	647b      	str	r3, [r7, #68]	; 0x44
 800b916:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b918:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b91a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b91c:	e841 2300 	strex	r3, r2, [r1]
 800b920:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b924:	2b00      	cmp	r3, #0
 800b926:	d1e4      	bne.n	800b8f2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	69db      	ldr	r3, [r3, #28]
 800b92e:	f003 0310 	and.w	r3, r3, #16
 800b932:	2b10      	cmp	r3, #16
 800b934:	d103      	bne.n	800b93e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2210      	movs	r2, #16
 800b93c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b944:	4619      	mov	r1, r3
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f7fd ffb8 	bl	80098bc <HAL_UARTEx_RxEventCallback>
 800b94c:	e002      	b.n	800b954 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f7f6 fb48 	bl	8001fe4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b954:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d006      	beq.n	800b96a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800b95c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b960:	f003 0320 	and.w	r3, r3, #32
 800b964:	2b00      	cmp	r3, #0
 800b966:	f47f aecd 	bne.w	800b704 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b970:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b974:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d049      	beq.n	800ba10 <UART_RxISR_16BIT_FIFOEN+0x354>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b982:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800b986:	429a      	cmp	r2, r3
 800b988:	d242      	bcs.n	800ba10 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	3308      	adds	r3, #8
 800b990:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b994:	e853 3f00 	ldrex	r3, [r3]
 800b998:	623b      	str	r3, [r7, #32]
   return(result);
 800b99a:	6a3b      	ldr	r3, [r7, #32]
 800b99c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	3308      	adds	r3, #8
 800b9aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b9ae:	633a      	str	r2, [r7, #48]	; 0x30
 800b9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9b6:	e841 2300 	strex	r3, r2, [r1]
 800b9ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1e3      	bne.n	800b98a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a16      	ldr	r2, [pc, #88]	; (800ba20 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b9c6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	e853 3f00 	ldrex	r3, [r3]
 800b9d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f043 0320 	orr.w	r3, r3, #32
 800b9dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b9ea:	61fb      	str	r3, [r7, #28]
 800b9ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ee:	69b9      	ldr	r1, [r7, #24]
 800b9f0:	69fa      	ldr	r2, [r7, #28]
 800b9f2:	e841 2300 	strex	r3, r2, [r1]
 800b9f6:	617b      	str	r3, [r7, #20]
   return(result);
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d1e4      	bne.n	800b9c8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b9fe:	e007      	b.n	800ba10 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	699a      	ldr	r2, [r3, #24]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f042 0208 	orr.w	r2, r2, #8
 800ba0e:	619a      	str	r2, [r3, #24]
}
 800ba10:	bf00      	nop
 800ba12:	37b8      	adds	r7, #184	; 0xb8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	effffffe 	.word	0xeffffffe
 800ba1c:	58000c00 	.word	0x58000c00
 800ba20:	0800b1a5 	.word	0x0800b1a5

0800ba24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ba2c:	bf00      	nop
 800ba2e:	370c      	adds	r7, #12
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b083      	sub	sp, #12
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ba40:	bf00      	nop
 800ba42:	370c      	adds	r7, #12
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr

0800ba4c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b083      	sub	sp, #12
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ba54:	bf00      	nop
 800ba56:	370c      	adds	r7, #12
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr

0800ba60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d101      	bne.n	800ba76 <HAL_UARTEx_DisableFifoMode+0x16>
 800ba72:	2302      	movs	r3, #2
 800ba74:	e027      	b.n	800bac6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2201      	movs	r2, #1
 800ba7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2224      	movs	r2, #36	; 0x24
 800ba82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f022 0201 	bic.w	r2, r2, #1
 800ba9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800baa4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2220      	movs	r2, #32
 800bab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3714      	adds	r7, #20
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr

0800bad2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b084      	sub	sp, #16
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
 800bada:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d101      	bne.n	800baea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bae6:	2302      	movs	r3, #2
 800bae8:	e02d      	b.n	800bb46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2201      	movs	r2, #1
 800baee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2224      	movs	r2, #36	; 0x24
 800baf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f022 0201 	bic.w	r2, r2, #1
 800bb10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	683a      	ldr	r2, [r7, #0]
 800bb22:	430a      	orrs	r2, r1
 800bb24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f000 f850 	bl	800bbcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68fa      	ldr	r2, [r7, #12]
 800bb32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2220      	movs	r2, #32
 800bb38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}

0800bb4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b084      	sub	sp, #16
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
 800bb56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d101      	bne.n	800bb66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb62:	2302      	movs	r3, #2
 800bb64:	e02d      	b.n	800bbc2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2224      	movs	r2, #36	; 0x24
 800bb72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f022 0201 	bic.w	r2, r2, #1
 800bb8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	683a      	ldr	r2, [r7, #0]
 800bb9e:	430a      	orrs	r2, r1
 800bba0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 f812 	bl	800bbcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2220      	movs	r2, #32
 800bbb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bbc0:	2300      	movs	r3, #0
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3710      	adds	r7, #16
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
	...

0800bbcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d108      	bne.n	800bbee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bbec:	e031      	b.n	800bc52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bbee:	2310      	movs	r3, #16
 800bbf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bbf2:	2310      	movs	r3, #16
 800bbf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	0e5b      	lsrs	r3, r3, #25
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	f003 0307 	and.w	r3, r3, #7
 800bc04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	0f5b      	lsrs	r3, r3, #29
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	f003 0307 	and.w	r3, r3, #7
 800bc14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc16:	7bbb      	ldrb	r3, [r7, #14]
 800bc18:	7b3a      	ldrb	r2, [r7, #12]
 800bc1a:	4911      	ldr	r1, [pc, #68]	; (800bc60 <UARTEx_SetNbDataToProcess+0x94>)
 800bc1c:	5c8a      	ldrb	r2, [r1, r2]
 800bc1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc22:	7b3a      	ldrb	r2, [r7, #12]
 800bc24:	490f      	ldr	r1, [pc, #60]	; (800bc64 <UARTEx_SetNbDataToProcess+0x98>)
 800bc26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc28:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc2c:	b29a      	uxth	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc34:	7bfb      	ldrb	r3, [r7, #15]
 800bc36:	7b7a      	ldrb	r2, [r7, #13]
 800bc38:	4909      	ldr	r1, [pc, #36]	; (800bc60 <UARTEx_SetNbDataToProcess+0x94>)
 800bc3a:	5c8a      	ldrb	r2, [r1, r2]
 800bc3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc40:	7b7a      	ldrb	r2, [r7, #13]
 800bc42:	4908      	ldr	r1, [pc, #32]	; (800bc64 <UARTEx_SetNbDataToProcess+0x98>)
 800bc44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc46:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc4a:	b29a      	uxth	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bc52:	bf00      	nop
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	0800d4cc 	.word	0x0800d4cc
 800bc64:	0800d4d4 	.word	0x0800d4d4

0800bc68 <__errno>:
 800bc68:	4b01      	ldr	r3, [pc, #4]	; (800bc70 <__errno+0x8>)
 800bc6a:	6818      	ldr	r0, [r3, #0]
 800bc6c:	4770      	bx	lr
 800bc6e:	bf00      	nop
 800bc70:	24000038 	.word	0x24000038

0800bc74 <__libc_init_array>:
 800bc74:	b570      	push	{r4, r5, r6, lr}
 800bc76:	4d0d      	ldr	r5, [pc, #52]	; (800bcac <__libc_init_array+0x38>)
 800bc78:	4c0d      	ldr	r4, [pc, #52]	; (800bcb0 <__libc_init_array+0x3c>)
 800bc7a:	1b64      	subs	r4, r4, r5
 800bc7c:	10a4      	asrs	r4, r4, #2
 800bc7e:	2600      	movs	r6, #0
 800bc80:	42a6      	cmp	r6, r4
 800bc82:	d109      	bne.n	800bc98 <__libc_init_array+0x24>
 800bc84:	4d0b      	ldr	r5, [pc, #44]	; (800bcb4 <__libc_init_array+0x40>)
 800bc86:	4c0c      	ldr	r4, [pc, #48]	; (800bcb8 <__libc_init_array+0x44>)
 800bc88:	f001 faaa 	bl	800d1e0 <_init>
 800bc8c:	1b64      	subs	r4, r4, r5
 800bc8e:	10a4      	asrs	r4, r4, #2
 800bc90:	2600      	movs	r6, #0
 800bc92:	42a6      	cmp	r6, r4
 800bc94:	d105      	bne.n	800bca2 <__libc_init_array+0x2e>
 800bc96:	bd70      	pop	{r4, r5, r6, pc}
 800bc98:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc9c:	4798      	blx	r3
 800bc9e:	3601      	adds	r6, #1
 800bca0:	e7ee      	b.n	800bc80 <__libc_init_array+0xc>
 800bca2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bca6:	4798      	blx	r3
 800bca8:	3601      	adds	r6, #1
 800bcaa:	e7f2      	b.n	800bc92 <__libc_init_array+0x1e>
 800bcac:	0800d62c 	.word	0x0800d62c
 800bcb0:	0800d62c 	.word	0x0800d62c
 800bcb4:	0800d62c 	.word	0x0800d62c
 800bcb8:	0800d630 	.word	0x0800d630

0800bcbc <memcpy>:
 800bcbc:	440a      	add	r2, r1
 800bcbe:	4291      	cmp	r1, r2
 800bcc0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bcc4:	d100      	bne.n	800bcc8 <memcpy+0xc>
 800bcc6:	4770      	bx	lr
 800bcc8:	b510      	push	{r4, lr}
 800bcca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcd2:	4291      	cmp	r1, r2
 800bcd4:	d1f9      	bne.n	800bcca <memcpy+0xe>
 800bcd6:	bd10      	pop	{r4, pc}

0800bcd8 <memset>:
 800bcd8:	4402      	add	r2, r0
 800bcda:	4603      	mov	r3, r0
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d100      	bne.n	800bce2 <memset+0xa>
 800bce0:	4770      	bx	lr
 800bce2:	f803 1b01 	strb.w	r1, [r3], #1
 800bce6:	e7f9      	b.n	800bcdc <memset+0x4>

0800bce8 <srand>:
 800bce8:	b538      	push	{r3, r4, r5, lr}
 800bcea:	4b10      	ldr	r3, [pc, #64]	; (800bd2c <srand+0x44>)
 800bcec:	681d      	ldr	r5, [r3, #0]
 800bcee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800bcf0:	4604      	mov	r4, r0
 800bcf2:	b9b3      	cbnz	r3, 800bd22 <srand+0x3a>
 800bcf4:	2018      	movs	r0, #24
 800bcf6:	f000 f8f3 	bl	800bee0 <malloc>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	63a8      	str	r0, [r5, #56]	; 0x38
 800bcfe:	b920      	cbnz	r0, 800bd0a <srand+0x22>
 800bd00:	4b0b      	ldr	r3, [pc, #44]	; (800bd30 <srand+0x48>)
 800bd02:	480c      	ldr	r0, [pc, #48]	; (800bd34 <srand+0x4c>)
 800bd04:	2142      	movs	r1, #66	; 0x42
 800bd06:	f000 f8a9 	bl	800be5c <__assert_func>
 800bd0a:	490b      	ldr	r1, [pc, #44]	; (800bd38 <srand+0x50>)
 800bd0c:	4b0b      	ldr	r3, [pc, #44]	; (800bd3c <srand+0x54>)
 800bd0e:	e9c0 1300 	strd	r1, r3, [r0]
 800bd12:	4b0b      	ldr	r3, [pc, #44]	; (800bd40 <srand+0x58>)
 800bd14:	6083      	str	r3, [r0, #8]
 800bd16:	230b      	movs	r3, #11
 800bd18:	8183      	strh	r3, [r0, #12]
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	2001      	movs	r0, #1
 800bd1e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800bd22:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800bd24:	2200      	movs	r2, #0
 800bd26:	611c      	str	r4, [r3, #16]
 800bd28:	615a      	str	r2, [r3, #20]
 800bd2a:	bd38      	pop	{r3, r4, r5, pc}
 800bd2c:	24000038 	.word	0x24000038
 800bd30:	0800d4e0 	.word	0x0800d4e0
 800bd34:	0800d4f7 	.word	0x0800d4f7
 800bd38:	abcd330e 	.word	0xabcd330e
 800bd3c:	e66d1234 	.word	0xe66d1234
 800bd40:	0005deec 	.word	0x0005deec

0800bd44 <rand>:
 800bd44:	4b16      	ldr	r3, [pc, #88]	; (800bda0 <rand+0x5c>)
 800bd46:	b510      	push	{r4, lr}
 800bd48:	681c      	ldr	r4, [r3, #0]
 800bd4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd4c:	b9b3      	cbnz	r3, 800bd7c <rand+0x38>
 800bd4e:	2018      	movs	r0, #24
 800bd50:	f000 f8c6 	bl	800bee0 <malloc>
 800bd54:	63a0      	str	r0, [r4, #56]	; 0x38
 800bd56:	b928      	cbnz	r0, 800bd64 <rand+0x20>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	4b12      	ldr	r3, [pc, #72]	; (800bda4 <rand+0x60>)
 800bd5c:	4812      	ldr	r0, [pc, #72]	; (800bda8 <rand+0x64>)
 800bd5e:	214e      	movs	r1, #78	; 0x4e
 800bd60:	f000 f87c 	bl	800be5c <__assert_func>
 800bd64:	4a11      	ldr	r2, [pc, #68]	; (800bdac <rand+0x68>)
 800bd66:	4b12      	ldr	r3, [pc, #72]	; (800bdb0 <rand+0x6c>)
 800bd68:	e9c0 2300 	strd	r2, r3, [r0]
 800bd6c:	4b11      	ldr	r3, [pc, #68]	; (800bdb4 <rand+0x70>)
 800bd6e:	6083      	str	r3, [r0, #8]
 800bd70:	230b      	movs	r3, #11
 800bd72:	8183      	strh	r3, [r0, #12]
 800bd74:	2201      	movs	r2, #1
 800bd76:	2300      	movs	r3, #0
 800bd78:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800bd7c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800bd7e:	4a0e      	ldr	r2, [pc, #56]	; (800bdb8 <rand+0x74>)
 800bd80:	6920      	ldr	r0, [r4, #16]
 800bd82:	6963      	ldr	r3, [r4, #20]
 800bd84:	490d      	ldr	r1, [pc, #52]	; (800bdbc <rand+0x78>)
 800bd86:	4342      	muls	r2, r0
 800bd88:	fb01 2203 	mla	r2, r1, r3, r2
 800bd8c:	fba0 0101 	umull	r0, r1, r0, r1
 800bd90:	1c43      	adds	r3, r0, #1
 800bd92:	eb42 0001 	adc.w	r0, r2, r1
 800bd96:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800bd9a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bd9e:	bd10      	pop	{r4, pc}
 800bda0:	24000038 	.word	0x24000038
 800bda4:	0800d4e0 	.word	0x0800d4e0
 800bda8:	0800d4f7 	.word	0x0800d4f7
 800bdac:	abcd330e 	.word	0xabcd330e
 800bdb0:	e66d1234 	.word	0xe66d1234
 800bdb4:	0005deec 	.word	0x0005deec
 800bdb8:	5851f42d 	.word	0x5851f42d
 800bdbc:	4c957f2d 	.word	0x4c957f2d

0800bdc0 <sniprintf>:
 800bdc0:	b40c      	push	{r2, r3}
 800bdc2:	b530      	push	{r4, r5, lr}
 800bdc4:	4b17      	ldr	r3, [pc, #92]	; (800be24 <sniprintf+0x64>)
 800bdc6:	1e0c      	subs	r4, r1, #0
 800bdc8:	681d      	ldr	r5, [r3, #0]
 800bdca:	b09d      	sub	sp, #116	; 0x74
 800bdcc:	da08      	bge.n	800bde0 <sniprintf+0x20>
 800bdce:	238b      	movs	r3, #139	; 0x8b
 800bdd0:	602b      	str	r3, [r5, #0]
 800bdd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdd6:	b01d      	add	sp, #116	; 0x74
 800bdd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bddc:	b002      	add	sp, #8
 800bdde:	4770      	bx	lr
 800bde0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bde4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bde8:	bf14      	ite	ne
 800bdea:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800bdee:	4623      	moveq	r3, r4
 800bdf0:	9304      	str	r3, [sp, #16]
 800bdf2:	9307      	str	r3, [sp, #28]
 800bdf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bdf8:	9002      	str	r0, [sp, #8]
 800bdfa:	9006      	str	r0, [sp, #24]
 800bdfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800be00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800be02:	ab21      	add	r3, sp, #132	; 0x84
 800be04:	a902      	add	r1, sp, #8
 800be06:	4628      	mov	r0, r5
 800be08:	9301      	str	r3, [sp, #4]
 800be0a:	f000 f9ad 	bl	800c168 <_svfiprintf_r>
 800be0e:	1c43      	adds	r3, r0, #1
 800be10:	bfbc      	itt	lt
 800be12:	238b      	movlt	r3, #139	; 0x8b
 800be14:	602b      	strlt	r3, [r5, #0]
 800be16:	2c00      	cmp	r4, #0
 800be18:	d0dd      	beq.n	800bdd6 <sniprintf+0x16>
 800be1a:	9b02      	ldr	r3, [sp, #8]
 800be1c:	2200      	movs	r2, #0
 800be1e:	701a      	strb	r2, [r3, #0]
 800be20:	e7d9      	b.n	800bdd6 <sniprintf+0x16>
 800be22:	bf00      	nop
 800be24:	24000038 	.word	0x24000038

0800be28 <time>:
 800be28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be2a:	4b0b      	ldr	r3, [pc, #44]	; (800be58 <time+0x30>)
 800be2c:	2200      	movs	r2, #0
 800be2e:	4669      	mov	r1, sp
 800be30:	4604      	mov	r4, r0
 800be32:	6818      	ldr	r0, [r3, #0]
 800be34:	f000 f842 	bl	800bebc <_gettimeofday_r>
 800be38:	2800      	cmp	r0, #0
 800be3a:	bfbe      	ittt	lt
 800be3c:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800be40:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800be44:	e9cd 2300 	strdlt	r2, r3, [sp]
 800be48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be4c:	b10c      	cbz	r4, 800be52 <time+0x2a>
 800be4e:	e9c4 0100 	strd	r0, r1, [r4]
 800be52:	b004      	add	sp, #16
 800be54:	bd10      	pop	{r4, pc}
 800be56:	bf00      	nop
 800be58:	24000038 	.word	0x24000038

0800be5c <__assert_func>:
 800be5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be5e:	4614      	mov	r4, r2
 800be60:	461a      	mov	r2, r3
 800be62:	4b09      	ldr	r3, [pc, #36]	; (800be88 <__assert_func+0x2c>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4605      	mov	r5, r0
 800be68:	68d8      	ldr	r0, [r3, #12]
 800be6a:	b14c      	cbz	r4, 800be80 <__assert_func+0x24>
 800be6c:	4b07      	ldr	r3, [pc, #28]	; (800be8c <__assert_func+0x30>)
 800be6e:	9100      	str	r1, [sp, #0]
 800be70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be74:	4906      	ldr	r1, [pc, #24]	; (800be90 <__assert_func+0x34>)
 800be76:	462b      	mov	r3, r5
 800be78:	f000 f80e 	bl	800be98 <fiprintf>
 800be7c:	f000 fe32 	bl	800cae4 <abort>
 800be80:	4b04      	ldr	r3, [pc, #16]	; (800be94 <__assert_func+0x38>)
 800be82:	461c      	mov	r4, r3
 800be84:	e7f3      	b.n	800be6e <__assert_func+0x12>
 800be86:	bf00      	nop
 800be88:	24000038 	.word	0x24000038
 800be8c:	0800d552 	.word	0x0800d552
 800be90:	0800d55f 	.word	0x0800d55f
 800be94:	0800d58d 	.word	0x0800d58d

0800be98 <fiprintf>:
 800be98:	b40e      	push	{r1, r2, r3}
 800be9a:	b503      	push	{r0, r1, lr}
 800be9c:	4601      	mov	r1, r0
 800be9e:	ab03      	add	r3, sp, #12
 800bea0:	4805      	ldr	r0, [pc, #20]	; (800beb8 <fiprintf+0x20>)
 800bea2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bea6:	6800      	ldr	r0, [r0, #0]
 800bea8:	9301      	str	r3, [sp, #4]
 800beaa:	f000 fa87 	bl	800c3bc <_vfiprintf_r>
 800beae:	b002      	add	sp, #8
 800beb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800beb4:	b003      	add	sp, #12
 800beb6:	4770      	bx	lr
 800beb8:	24000038 	.word	0x24000038

0800bebc <_gettimeofday_r>:
 800bebc:	b538      	push	{r3, r4, r5, lr}
 800bebe:	4d07      	ldr	r5, [pc, #28]	; (800bedc <_gettimeofday_r+0x20>)
 800bec0:	2300      	movs	r3, #0
 800bec2:	4604      	mov	r4, r0
 800bec4:	4608      	mov	r0, r1
 800bec6:	4611      	mov	r1, r2
 800bec8:	602b      	str	r3, [r5, #0]
 800beca:	f001 f981 	bl	800d1d0 <_gettimeofday>
 800bece:	1c43      	adds	r3, r0, #1
 800bed0:	d102      	bne.n	800bed8 <_gettimeofday_r+0x1c>
 800bed2:	682b      	ldr	r3, [r5, #0]
 800bed4:	b103      	cbz	r3, 800bed8 <_gettimeofday_r+0x1c>
 800bed6:	6023      	str	r3, [r4, #0]
 800bed8:	bd38      	pop	{r3, r4, r5, pc}
 800beda:	bf00      	nop
 800bedc:	240007bc 	.word	0x240007bc

0800bee0 <malloc>:
 800bee0:	4b02      	ldr	r3, [pc, #8]	; (800beec <malloc+0xc>)
 800bee2:	4601      	mov	r1, r0
 800bee4:	6818      	ldr	r0, [r3, #0]
 800bee6:	f000 b86f 	b.w	800bfc8 <_malloc_r>
 800beea:	bf00      	nop
 800beec:	24000038 	.word	0x24000038

0800bef0 <_free_r>:
 800bef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bef2:	2900      	cmp	r1, #0
 800bef4:	d044      	beq.n	800bf80 <_free_r+0x90>
 800bef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800befa:	9001      	str	r0, [sp, #4]
 800befc:	2b00      	cmp	r3, #0
 800befe:	f1a1 0404 	sub.w	r4, r1, #4
 800bf02:	bfb8      	it	lt
 800bf04:	18e4      	addlt	r4, r4, r3
 800bf06:	f001 f82f 	bl	800cf68 <__malloc_lock>
 800bf0a:	4a1e      	ldr	r2, [pc, #120]	; (800bf84 <_free_r+0x94>)
 800bf0c:	9801      	ldr	r0, [sp, #4]
 800bf0e:	6813      	ldr	r3, [r2, #0]
 800bf10:	b933      	cbnz	r3, 800bf20 <_free_r+0x30>
 800bf12:	6063      	str	r3, [r4, #4]
 800bf14:	6014      	str	r4, [r2, #0]
 800bf16:	b003      	add	sp, #12
 800bf18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf1c:	f001 b82a 	b.w	800cf74 <__malloc_unlock>
 800bf20:	42a3      	cmp	r3, r4
 800bf22:	d908      	bls.n	800bf36 <_free_r+0x46>
 800bf24:	6825      	ldr	r5, [r4, #0]
 800bf26:	1961      	adds	r1, r4, r5
 800bf28:	428b      	cmp	r3, r1
 800bf2a:	bf01      	itttt	eq
 800bf2c:	6819      	ldreq	r1, [r3, #0]
 800bf2e:	685b      	ldreq	r3, [r3, #4]
 800bf30:	1949      	addeq	r1, r1, r5
 800bf32:	6021      	streq	r1, [r4, #0]
 800bf34:	e7ed      	b.n	800bf12 <_free_r+0x22>
 800bf36:	461a      	mov	r2, r3
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	b10b      	cbz	r3, 800bf40 <_free_r+0x50>
 800bf3c:	42a3      	cmp	r3, r4
 800bf3e:	d9fa      	bls.n	800bf36 <_free_r+0x46>
 800bf40:	6811      	ldr	r1, [r2, #0]
 800bf42:	1855      	adds	r5, r2, r1
 800bf44:	42a5      	cmp	r5, r4
 800bf46:	d10b      	bne.n	800bf60 <_free_r+0x70>
 800bf48:	6824      	ldr	r4, [r4, #0]
 800bf4a:	4421      	add	r1, r4
 800bf4c:	1854      	adds	r4, r2, r1
 800bf4e:	42a3      	cmp	r3, r4
 800bf50:	6011      	str	r1, [r2, #0]
 800bf52:	d1e0      	bne.n	800bf16 <_free_r+0x26>
 800bf54:	681c      	ldr	r4, [r3, #0]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	6053      	str	r3, [r2, #4]
 800bf5a:	4421      	add	r1, r4
 800bf5c:	6011      	str	r1, [r2, #0]
 800bf5e:	e7da      	b.n	800bf16 <_free_r+0x26>
 800bf60:	d902      	bls.n	800bf68 <_free_r+0x78>
 800bf62:	230c      	movs	r3, #12
 800bf64:	6003      	str	r3, [r0, #0]
 800bf66:	e7d6      	b.n	800bf16 <_free_r+0x26>
 800bf68:	6825      	ldr	r5, [r4, #0]
 800bf6a:	1961      	adds	r1, r4, r5
 800bf6c:	428b      	cmp	r3, r1
 800bf6e:	bf04      	itt	eq
 800bf70:	6819      	ldreq	r1, [r3, #0]
 800bf72:	685b      	ldreq	r3, [r3, #4]
 800bf74:	6063      	str	r3, [r4, #4]
 800bf76:	bf04      	itt	eq
 800bf78:	1949      	addeq	r1, r1, r5
 800bf7a:	6021      	streq	r1, [r4, #0]
 800bf7c:	6054      	str	r4, [r2, #4]
 800bf7e:	e7ca      	b.n	800bf16 <_free_r+0x26>
 800bf80:	b003      	add	sp, #12
 800bf82:	bd30      	pop	{r4, r5, pc}
 800bf84:	240007b4 	.word	0x240007b4

0800bf88 <sbrk_aligned>:
 800bf88:	b570      	push	{r4, r5, r6, lr}
 800bf8a:	4e0e      	ldr	r6, [pc, #56]	; (800bfc4 <sbrk_aligned+0x3c>)
 800bf8c:	460c      	mov	r4, r1
 800bf8e:	6831      	ldr	r1, [r6, #0]
 800bf90:	4605      	mov	r5, r0
 800bf92:	b911      	cbnz	r1, 800bf9a <sbrk_aligned+0x12>
 800bf94:	f000 fcd6 	bl	800c944 <_sbrk_r>
 800bf98:	6030      	str	r0, [r6, #0]
 800bf9a:	4621      	mov	r1, r4
 800bf9c:	4628      	mov	r0, r5
 800bf9e:	f000 fcd1 	bl	800c944 <_sbrk_r>
 800bfa2:	1c43      	adds	r3, r0, #1
 800bfa4:	d00a      	beq.n	800bfbc <sbrk_aligned+0x34>
 800bfa6:	1cc4      	adds	r4, r0, #3
 800bfa8:	f024 0403 	bic.w	r4, r4, #3
 800bfac:	42a0      	cmp	r0, r4
 800bfae:	d007      	beq.n	800bfc0 <sbrk_aligned+0x38>
 800bfb0:	1a21      	subs	r1, r4, r0
 800bfb2:	4628      	mov	r0, r5
 800bfb4:	f000 fcc6 	bl	800c944 <_sbrk_r>
 800bfb8:	3001      	adds	r0, #1
 800bfba:	d101      	bne.n	800bfc0 <sbrk_aligned+0x38>
 800bfbc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	bd70      	pop	{r4, r5, r6, pc}
 800bfc4:	240007b8 	.word	0x240007b8

0800bfc8 <_malloc_r>:
 800bfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfcc:	1ccd      	adds	r5, r1, #3
 800bfce:	f025 0503 	bic.w	r5, r5, #3
 800bfd2:	3508      	adds	r5, #8
 800bfd4:	2d0c      	cmp	r5, #12
 800bfd6:	bf38      	it	cc
 800bfd8:	250c      	movcc	r5, #12
 800bfda:	2d00      	cmp	r5, #0
 800bfdc:	4607      	mov	r7, r0
 800bfde:	db01      	blt.n	800bfe4 <_malloc_r+0x1c>
 800bfe0:	42a9      	cmp	r1, r5
 800bfe2:	d905      	bls.n	800bff0 <_malloc_r+0x28>
 800bfe4:	230c      	movs	r3, #12
 800bfe6:	603b      	str	r3, [r7, #0]
 800bfe8:	2600      	movs	r6, #0
 800bfea:	4630      	mov	r0, r6
 800bfec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bff0:	4e2e      	ldr	r6, [pc, #184]	; (800c0ac <_malloc_r+0xe4>)
 800bff2:	f000 ffb9 	bl	800cf68 <__malloc_lock>
 800bff6:	6833      	ldr	r3, [r6, #0]
 800bff8:	461c      	mov	r4, r3
 800bffa:	bb34      	cbnz	r4, 800c04a <_malloc_r+0x82>
 800bffc:	4629      	mov	r1, r5
 800bffe:	4638      	mov	r0, r7
 800c000:	f7ff ffc2 	bl	800bf88 <sbrk_aligned>
 800c004:	1c43      	adds	r3, r0, #1
 800c006:	4604      	mov	r4, r0
 800c008:	d14d      	bne.n	800c0a6 <_malloc_r+0xde>
 800c00a:	6834      	ldr	r4, [r6, #0]
 800c00c:	4626      	mov	r6, r4
 800c00e:	2e00      	cmp	r6, #0
 800c010:	d140      	bne.n	800c094 <_malloc_r+0xcc>
 800c012:	6823      	ldr	r3, [r4, #0]
 800c014:	4631      	mov	r1, r6
 800c016:	4638      	mov	r0, r7
 800c018:	eb04 0803 	add.w	r8, r4, r3
 800c01c:	f000 fc92 	bl	800c944 <_sbrk_r>
 800c020:	4580      	cmp	r8, r0
 800c022:	d13a      	bne.n	800c09a <_malloc_r+0xd2>
 800c024:	6821      	ldr	r1, [r4, #0]
 800c026:	3503      	adds	r5, #3
 800c028:	1a6d      	subs	r5, r5, r1
 800c02a:	f025 0503 	bic.w	r5, r5, #3
 800c02e:	3508      	adds	r5, #8
 800c030:	2d0c      	cmp	r5, #12
 800c032:	bf38      	it	cc
 800c034:	250c      	movcc	r5, #12
 800c036:	4629      	mov	r1, r5
 800c038:	4638      	mov	r0, r7
 800c03a:	f7ff ffa5 	bl	800bf88 <sbrk_aligned>
 800c03e:	3001      	adds	r0, #1
 800c040:	d02b      	beq.n	800c09a <_malloc_r+0xd2>
 800c042:	6823      	ldr	r3, [r4, #0]
 800c044:	442b      	add	r3, r5
 800c046:	6023      	str	r3, [r4, #0]
 800c048:	e00e      	b.n	800c068 <_malloc_r+0xa0>
 800c04a:	6822      	ldr	r2, [r4, #0]
 800c04c:	1b52      	subs	r2, r2, r5
 800c04e:	d41e      	bmi.n	800c08e <_malloc_r+0xc6>
 800c050:	2a0b      	cmp	r2, #11
 800c052:	d916      	bls.n	800c082 <_malloc_r+0xba>
 800c054:	1961      	adds	r1, r4, r5
 800c056:	42a3      	cmp	r3, r4
 800c058:	6025      	str	r5, [r4, #0]
 800c05a:	bf18      	it	ne
 800c05c:	6059      	strne	r1, [r3, #4]
 800c05e:	6863      	ldr	r3, [r4, #4]
 800c060:	bf08      	it	eq
 800c062:	6031      	streq	r1, [r6, #0]
 800c064:	5162      	str	r2, [r4, r5]
 800c066:	604b      	str	r3, [r1, #4]
 800c068:	4638      	mov	r0, r7
 800c06a:	f104 060b 	add.w	r6, r4, #11
 800c06e:	f000 ff81 	bl	800cf74 <__malloc_unlock>
 800c072:	f026 0607 	bic.w	r6, r6, #7
 800c076:	1d23      	adds	r3, r4, #4
 800c078:	1af2      	subs	r2, r6, r3
 800c07a:	d0b6      	beq.n	800bfea <_malloc_r+0x22>
 800c07c:	1b9b      	subs	r3, r3, r6
 800c07e:	50a3      	str	r3, [r4, r2]
 800c080:	e7b3      	b.n	800bfea <_malloc_r+0x22>
 800c082:	6862      	ldr	r2, [r4, #4]
 800c084:	42a3      	cmp	r3, r4
 800c086:	bf0c      	ite	eq
 800c088:	6032      	streq	r2, [r6, #0]
 800c08a:	605a      	strne	r2, [r3, #4]
 800c08c:	e7ec      	b.n	800c068 <_malloc_r+0xa0>
 800c08e:	4623      	mov	r3, r4
 800c090:	6864      	ldr	r4, [r4, #4]
 800c092:	e7b2      	b.n	800bffa <_malloc_r+0x32>
 800c094:	4634      	mov	r4, r6
 800c096:	6876      	ldr	r6, [r6, #4]
 800c098:	e7b9      	b.n	800c00e <_malloc_r+0x46>
 800c09a:	230c      	movs	r3, #12
 800c09c:	603b      	str	r3, [r7, #0]
 800c09e:	4638      	mov	r0, r7
 800c0a0:	f000 ff68 	bl	800cf74 <__malloc_unlock>
 800c0a4:	e7a1      	b.n	800bfea <_malloc_r+0x22>
 800c0a6:	6025      	str	r5, [r4, #0]
 800c0a8:	e7de      	b.n	800c068 <_malloc_r+0xa0>
 800c0aa:	bf00      	nop
 800c0ac:	240007b4 	.word	0x240007b4

0800c0b0 <__ssputs_r>:
 800c0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0b4:	688e      	ldr	r6, [r1, #8]
 800c0b6:	429e      	cmp	r6, r3
 800c0b8:	4682      	mov	sl, r0
 800c0ba:	460c      	mov	r4, r1
 800c0bc:	4690      	mov	r8, r2
 800c0be:	461f      	mov	r7, r3
 800c0c0:	d838      	bhi.n	800c134 <__ssputs_r+0x84>
 800c0c2:	898a      	ldrh	r2, [r1, #12]
 800c0c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0c8:	d032      	beq.n	800c130 <__ssputs_r+0x80>
 800c0ca:	6825      	ldr	r5, [r4, #0]
 800c0cc:	6909      	ldr	r1, [r1, #16]
 800c0ce:	eba5 0901 	sub.w	r9, r5, r1
 800c0d2:	6965      	ldr	r5, [r4, #20]
 800c0d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0dc:	3301      	adds	r3, #1
 800c0de:	444b      	add	r3, r9
 800c0e0:	106d      	asrs	r5, r5, #1
 800c0e2:	429d      	cmp	r5, r3
 800c0e4:	bf38      	it	cc
 800c0e6:	461d      	movcc	r5, r3
 800c0e8:	0553      	lsls	r3, r2, #21
 800c0ea:	d531      	bpl.n	800c150 <__ssputs_r+0xa0>
 800c0ec:	4629      	mov	r1, r5
 800c0ee:	f7ff ff6b 	bl	800bfc8 <_malloc_r>
 800c0f2:	4606      	mov	r6, r0
 800c0f4:	b950      	cbnz	r0, 800c10c <__ssputs_r+0x5c>
 800c0f6:	230c      	movs	r3, #12
 800c0f8:	f8ca 3000 	str.w	r3, [sl]
 800c0fc:	89a3      	ldrh	r3, [r4, #12]
 800c0fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c102:	81a3      	strh	r3, [r4, #12]
 800c104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c10c:	6921      	ldr	r1, [r4, #16]
 800c10e:	464a      	mov	r2, r9
 800c110:	f7ff fdd4 	bl	800bcbc <memcpy>
 800c114:	89a3      	ldrh	r3, [r4, #12]
 800c116:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c11a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c11e:	81a3      	strh	r3, [r4, #12]
 800c120:	6126      	str	r6, [r4, #16]
 800c122:	6165      	str	r5, [r4, #20]
 800c124:	444e      	add	r6, r9
 800c126:	eba5 0509 	sub.w	r5, r5, r9
 800c12a:	6026      	str	r6, [r4, #0]
 800c12c:	60a5      	str	r5, [r4, #8]
 800c12e:	463e      	mov	r6, r7
 800c130:	42be      	cmp	r6, r7
 800c132:	d900      	bls.n	800c136 <__ssputs_r+0x86>
 800c134:	463e      	mov	r6, r7
 800c136:	6820      	ldr	r0, [r4, #0]
 800c138:	4632      	mov	r2, r6
 800c13a:	4641      	mov	r1, r8
 800c13c:	f000 fefa 	bl	800cf34 <memmove>
 800c140:	68a3      	ldr	r3, [r4, #8]
 800c142:	1b9b      	subs	r3, r3, r6
 800c144:	60a3      	str	r3, [r4, #8]
 800c146:	6823      	ldr	r3, [r4, #0]
 800c148:	4433      	add	r3, r6
 800c14a:	6023      	str	r3, [r4, #0]
 800c14c:	2000      	movs	r0, #0
 800c14e:	e7db      	b.n	800c108 <__ssputs_r+0x58>
 800c150:	462a      	mov	r2, r5
 800c152:	f000 ff15 	bl	800cf80 <_realloc_r>
 800c156:	4606      	mov	r6, r0
 800c158:	2800      	cmp	r0, #0
 800c15a:	d1e1      	bne.n	800c120 <__ssputs_r+0x70>
 800c15c:	6921      	ldr	r1, [r4, #16]
 800c15e:	4650      	mov	r0, sl
 800c160:	f7ff fec6 	bl	800bef0 <_free_r>
 800c164:	e7c7      	b.n	800c0f6 <__ssputs_r+0x46>
	...

0800c168 <_svfiprintf_r>:
 800c168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c16c:	4698      	mov	r8, r3
 800c16e:	898b      	ldrh	r3, [r1, #12]
 800c170:	061b      	lsls	r3, r3, #24
 800c172:	b09d      	sub	sp, #116	; 0x74
 800c174:	4607      	mov	r7, r0
 800c176:	460d      	mov	r5, r1
 800c178:	4614      	mov	r4, r2
 800c17a:	d50e      	bpl.n	800c19a <_svfiprintf_r+0x32>
 800c17c:	690b      	ldr	r3, [r1, #16]
 800c17e:	b963      	cbnz	r3, 800c19a <_svfiprintf_r+0x32>
 800c180:	2140      	movs	r1, #64	; 0x40
 800c182:	f7ff ff21 	bl	800bfc8 <_malloc_r>
 800c186:	6028      	str	r0, [r5, #0]
 800c188:	6128      	str	r0, [r5, #16]
 800c18a:	b920      	cbnz	r0, 800c196 <_svfiprintf_r+0x2e>
 800c18c:	230c      	movs	r3, #12
 800c18e:	603b      	str	r3, [r7, #0]
 800c190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c194:	e0d1      	b.n	800c33a <_svfiprintf_r+0x1d2>
 800c196:	2340      	movs	r3, #64	; 0x40
 800c198:	616b      	str	r3, [r5, #20]
 800c19a:	2300      	movs	r3, #0
 800c19c:	9309      	str	r3, [sp, #36]	; 0x24
 800c19e:	2320      	movs	r3, #32
 800c1a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1a8:	2330      	movs	r3, #48	; 0x30
 800c1aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c354 <_svfiprintf_r+0x1ec>
 800c1ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1b2:	f04f 0901 	mov.w	r9, #1
 800c1b6:	4623      	mov	r3, r4
 800c1b8:	469a      	mov	sl, r3
 800c1ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1be:	b10a      	cbz	r2, 800c1c4 <_svfiprintf_r+0x5c>
 800c1c0:	2a25      	cmp	r2, #37	; 0x25
 800c1c2:	d1f9      	bne.n	800c1b8 <_svfiprintf_r+0x50>
 800c1c4:	ebba 0b04 	subs.w	fp, sl, r4
 800c1c8:	d00b      	beq.n	800c1e2 <_svfiprintf_r+0x7a>
 800c1ca:	465b      	mov	r3, fp
 800c1cc:	4622      	mov	r2, r4
 800c1ce:	4629      	mov	r1, r5
 800c1d0:	4638      	mov	r0, r7
 800c1d2:	f7ff ff6d 	bl	800c0b0 <__ssputs_r>
 800c1d6:	3001      	adds	r0, #1
 800c1d8:	f000 80aa 	beq.w	800c330 <_svfiprintf_r+0x1c8>
 800c1dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1de:	445a      	add	r2, fp
 800c1e0:	9209      	str	r2, [sp, #36]	; 0x24
 800c1e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	f000 80a2 	beq.w	800c330 <_svfiprintf_r+0x1c8>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1f6:	f10a 0a01 	add.w	sl, sl, #1
 800c1fa:	9304      	str	r3, [sp, #16]
 800c1fc:	9307      	str	r3, [sp, #28]
 800c1fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c202:	931a      	str	r3, [sp, #104]	; 0x68
 800c204:	4654      	mov	r4, sl
 800c206:	2205      	movs	r2, #5
 800c208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c20c:	4851      	ldr	r0, [pc, #324]	; (800c354 <_svfiprintf_r+0x1ec>)
 800c20e:	f7f4 f86f 	bl	80002f0 <memchr>
 800c212:	9a04      	ldr	r2, [sp, #16]
 800c214:	b9d8      	cbnz	r0, 800c24e <_svfiprintf_r+0xe6>
 800c216:	06d0      	lsls	r0, r2, #27
 800c218:	bf44      	itt	mi
 800c21a:	2320      	movmi	r3, #32
 800c21c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c220:	0711      	lsls	r1, r2, #28
 800c222:	bf44      	itt	mi
 800c224:	232b      	movmi	r3, #43	; 0x2b
 800c226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c22a:	f89a 3000 	ldrb.w	r3, [sl]
 800c22e:	2b2a      	cmp	r3, #42	; 0x2a
 800c230:	d015      	beq.n	800c25e <_svfiprintf_r+0xf6>
 800c232:	9a07      	ldr	r2, [sp, #28]
 800c234:	4654      	mov	r4, sl
 800c236:	2000      	movs	r0, #0
 800c238:	f04f 0c0a 	mov.w	ip, #10
 800c23c:	4621      	mov	r1, r4
 800c23e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c242:	3b30      	subs	r3, #48	; 0x30
 800c244:	2b09      	cmp	r3, #9
 800c246:	d94e      	bls.n	800c2e6 <_svfiprintf_r+0x17e>
 800c248:	b1b0      	cbz	r0, 800c278 <_svfiprintf_r+0x110>
 800c24a:	9207      	str	r2, [sp, #28]
 800c24c:	e014      	b.n	800c278 <_svfiprintf_r+0x110>
 800c24e:	eba0 0308 	sub.w	r3, r0, r8
 800c252:	fa09 f303 	lsl.w	r3, r9, r3
 800c256:	4313      	orrs	r3, r2
 800c258:	9304      	str	r3, [sp, #16]
 800c25a:	46a2      	mov	sl, r4
 800c25c:	e7d2      	b.n	800c204 <_svfiprintf_r+0x9c>
 800c25e:	9b03      	ldr	r3, [sp, #12]
 800c260:	1d19      	adds	r1, r3, #4
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	9103      	str	r1, [sp, #12]
 800c266:	2b00      	cmp	r3, #0
 800c268:	bfbb      	ittet	lt
 800c26a:	425b      	neglt	r3, r3
 800c26c:	f042 0202 	orrlt.w	r2, r2, #2
 800c270:	9307      	strge	r3, [sp, #28]
 800c272:	9307      	strlt	r3, [sp, #28]
 800c274:	bfb8      	it	lt
 800c276:	9204      	strlt	r2, [sp, #16]
 800c278:	7823      	ldrb	r3, [r4, #0]
 800c27a:	2b2e      	cmp	r3, #46	; 0x2e
 800c27c:	d10c      	bne.n	800c298 <_svfiprintf_r+0x130>
 800c27e:	7863      	ldrb	r3, [r4, #1]
 800c280:	2b2a      	cmp	r3, #42	; 0x2a
 800c282:	d135      	bne.n	800c2f0 <_svfiprintf_r+0x188>
 800c284:	9b03      	ldr	r3, [sp, #12]
 800c286:	1d1a      	adds	r2, r3, #4
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	9203      	str	r2, [sp, #12]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	bfb8      	it	lt
 800c290:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c294:	3402      	adds	r4, #2
 800c296:	9305      	str	r3, [sp, #20]
 800c298:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c364 <_svfiprintf_r+0x1fc>
 800c29c:	7821      	ldrb	r1, [r4, #0]
 800c29e:	2203      	movs	r2, #3
 800c2a0:	4650      	mov	r0, sl
 800c2a2:	f7f4 f825 	bl	80002f0 <memchr>
 800c2a6:	b140      	cbz	r0, 800c2ba <_svfiprintf_r+0x152>
 800c2a8:	2340      	movs	r3, #64	; 0x40
 800c2aa:	eba0 000a 	sub.w	r0, r0, sl
 800c2ae:	fa03 f000 	lsl.w	r0, r3, r0
 800c2b2:	9b04      	ldr	r3, [sp, #16]
 800c2b4:	4303      	orrs	r3, r0
 800c2b6:	3401      	adds	r4, #1
 800c2b8:	9304      	str	r3, [sp, #16]
 800c2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2be:	4826      	ldr	r0, [pc, #152]	; (800c358 <_svfiprintf_r+0x1f0>)
 800c2c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2c4:	2206      	movs	r2, #6
 800c2c6:	f7f4 f813 	bl	80002f0 <memchr>
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	d038      	beq.n	800c340 <_svfiprintf_r+0x1d8>
 800c2ce:	4b23      	ldr	r3, [pc, #140]	; (800c35c <_svfiprintf_r+0x1f4>)
 800c2d0:	bb1b      	cbnz	r3, 800c31a <_svfiprintf_r+0x1b2>
 800c2d2:	9b03      	ldr	r3, [sp, #12]
 800c2d4:	3307      	adds	r3, #7
 800c2d6:	f023 0307 	bic.w	r3, r3, #7
 800c2da:	3308      	adds	r3, #8
 800c2dc:	9303      	str	r3, [sp, #12]
 800c2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2e0:	4433      	add	r3, r6
 800c2e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2e4:	e767      	b.n	800c1b6 <_svfiprintf_r+0x4e>
 800c2e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2ea:	460c      	mov	r4, r1
 800c2ec:	2001      	movs	r0, #1
 800c2ee:	e7a5      	b.n	800c23c <_svfiprintf_r+0xd4>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	3401      	adds	r4, #1
 800c2f4:	9305      	str	r3, [sp, #20]
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	f04f 0c0a 	mov.w	ip, #10
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c302:	3a30      	subs	r2, #48	; 0x30
 800c304:	2a09      	cmp	r2, #9
 800c306:	d903      	bls.n	800c310 <_svfiprintf_r+0x1a8>
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d0c5      	beq.n	800c298 <_svfiprintf_r+0x130>
 800c30c:	9105      	str	r1, [sp, #20]
 800c30e:	e7c3      	b.n	800c298 <_svfiprintf_r+0x130>
 800c310:	fb0c 2101 	mla	r1, ip, r1, r2
 800c314:	4604      	mov	r4, r0
 800c316:	2301      	movs	r3, #1
 800c318:	e7f0      	b.n	800c2fc <_svfiprintf_r+0x194>
 800c31a:	ab03      	add	r3, sp, #12
 800c31c:	9300      	str	r3, [sp, #0]
 800c31e:	462a      	mov	r2, r5
 800c320:	4b0f      	ldr	r3, [pc, #60]	; (800c360 <_svfiprintf_r+0x1f8>)
 800c322:	a904      	add	r1, sp, #16
 800c324:	4638      	mov	r0, r7
 800c326:	f3af 8000 	nop.w
 800c32a:	1c42      	adds	r2, r0, #1
 800c32c:	4606      	mov	r6, r0
 800c32e:	d1d6      	bne.n	800c2de <_svfiprintf_r+0x176>
 800c330:	89ab      	ldrh	r3, [r5, #12]
 800c332:	065b      	lsls	r3, r3, #25
 800c334:	f53f af2c 	bmi.w	800c190 <_svfiprintf_r+0x28>
 800c338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c33a:	b01d      	add	sp, #116	; 0x74
 800c33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c340:	ab03      	add	r3, sp, #12
 800c342:	9300      	str	r3, [sp, #0]
 800c344:	462a      	mov	r2, r5
 800c346:	4b06      	ldr	r3, [pc, #24]	; (800c360 <_svfiprintf_r+0x1f8>)
 800c348:	a904      	add	r1, sp, #16
 800c34a:	4638      	mov	r0, r7
 800c34c:	f000 f9d4 	bl	800c6f8 <_printf_i>
 800c350:	e7eb      	b.n	800c32a <_svfiprintf_r+0x1c2>
 800c352:	bf00      	nop
 800c354:	0800d58e 	.word	0x0800d58e
 800c358:	0800d598 	.word	0x0800d598
 800c35c:	00000000 	.word	0x00000000
 800c360:	0800c0b1 	.word	0x0800c0b1
 800c364:	0800d594 	.word	0x0800d594

0800c368 <__sfputc_r>:
 800c368:	6893      	ldr	r3, [r2, #8]
 800c36a:	3b01      	subs	r3, #1
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	b410      	push	{r4}
 800c370:	6093      	str	r3, [r2, #8]
 800c372:	da08      	bge.n	800c386 <__sfputc_r+0x1e>
 800c374:	6994      	ldr	r4, [r2, #24]
 800c376:	42a3      	cmp	r3, r4
 800c378:	db01      	blt.n	800c37e <__sfputc_r+0x16>
 800c37a:	290a      	cmp	r1, #10
 800c37c:	d103      	bne.n	800c386 <__sfputc_r+0x1e>
 800c37e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c382:	f000 baef 	b.w	800c964 <__swbuf_r>
 800c386:	6813      	ldr	r3, [r2, #0]
 800c388:	1c58      	adds	r0, r3, #1
 800c38a:	6010      	str	r0, [r2, #0]
 800c38c:	7019      	strb	r1, [r3, #0]
 800c38e:	4608      	mov	r0, r1
 800c390:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c394:	4770      	bx	lr

0800c396 <__sfputs_r>:
 800c396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c398:	4606      	mov	r6, r0
 800c39a:	460f      	mov	r7, r1
 800c39c:	4614      	mov	r4, r2
 800c39e:	18d5      	adds	r5, r2, r3
 800c3a0:	42ac      	cmp	r4, r5
 800c3a2:	d101      	bne.n	800c3a8 <__sfputs_r+0x12>
 800c3a4:	2000      	movs	r0, #0
 800c3a6:	e007      	b.n	800c3b8 <__sfputs_r+0x22>
 800c3a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3ac:	463a      	mov	r2, r7
 800c3ae:	4630      	mov	r0, r6
 800c3b0:	f7ff ffda 	bl	800c368 <__sfputc_r>
 800c3b4:	1c43      	adds	r3, r0, #1
 800c3b6:	d1f3      	bne.n	800c3a0 <__sfputs_r+0xa>
 800c3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c3bc <_vfiprintf_r>:
 800c3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c0:	460d      	mov	r5, r1
 800c3c2:	b09d      	sub	sp, #116	; 0x74
 800c3c4:	4614      	mov	r4, r2
 800c3c6:	4698      	mov	r8, r3
 800c3c8:	4606      	mov	r6, r0
 800c3ca:	b118      	cbz	r0, 800c3d4 <_vfiprintf_r+0x18>
 800c3cc:	6983      	ldr	r3, [r0, #24]
 800c3ce:	b90b      	cbnz	r3, 800c3d4 <_vfiprintf_r+0x18>
 800c3d0:	f000 fcaa 	bl	800cd28 <__sinit>
 800c3d4:	4b89      	ldr	r3, [pc, #548]	; (800c5fc <_vfiprintf_r+0x240>)
 800c3d6:	429d      	cmp	r5, r3
 800c3d8:	d11b      	bne.n	800c412 <_vfiprintf_r+0x56>
 800c3da:	6875      	ldr	r5, [r6, #4]
 800c3dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3de:	07d9      	lsls	r1, r3, #31
 800c3e0:	d405      	bmi.n	800c3ee <_vfiprintf_r+0x32>
 800c3e2:	89ab      	ldrh	r3, [r5, #12]
 800c3e4:	059a      	lsls	r2, r3, #22
 800c3e6:	d402      	bmi.n	800c3ee <_vfiprintf_r+0x32>
 800c3e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3ea:	f000 fd3b 	bl	800ce64 <__retarget_lock_acquire_recursive>
 800c3ee:	89ab      	ldrh	r3, [r5, #12]
 800c3f0:	071b      	lsls	r3, r3, #28
 800c3f2:	d501      	bpl.n	800c3f8 <_vfiprintf_r+0x3c>
 800c3f4:	692b      	ldr	r3, [r5, #16]
 800c3f6:	b9eb      	cbnz	r3, 800c434 <_vfiprintf_r+0x78>
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	f000 fb04 	bl	800ca08 <__swsetup_r>
 800c400:	b1c0      	cbz	r0, 800c434 <_vfiprintf_r+0x78>
 800c402:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c404:	07dc      	lsls	r4, r3, #31
 800c406:	d50e      	bpl.n	800c426 <_vfiprintf_r+0x6a>
 800c408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c40c:	b01d      	add	sp, #116	; 0x74
 800c40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c412:	4b7b      	ldr	r3, [pc, #492]	; (800c600 <_vfiprintf_r+0x244>)
 800c414:	429d      	cmp	r5, r3
 800c416:	d101      	bne.n	800c41c <_vfiprintf_r+0x60>
 800c418:	68b5      	ldr	r5, [r6, #8]
 800c41a:	e7df      	b.n	800c3dc <_vfiprintf_r+0x20>
 800c41c:	4b79      	ldr	r3, [pc, #484]	; (800c604 <_vfiprintf_r+0x248>)
 800c41e:	429d      	cmp	r5, r3
 800c420:	bf08      	it	eq
 800c422:	68f5      	ldreq	r5, [r6, #12]
 800c424:	e7da      	b.n	800c3dc <_vfiprintf_r+0x20>
 800c426:	89ab      	ldrh	r3, [r5, #12]
 800c428:	0598      	lsls	r0, r3, #22
 800c42a:	d4ed      	bmi.n	800c408 <_vfiprintf_r+0x4c>
 800c42c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c42e:	f000 fd1a 	bl	800ce66 <__retarget_lock_release_recursive>
 800c432:	e7e9      	b.n	800c408 <_vfiprintf_r+0x4c>
 800c434:	2300      	movs	r3, #0
 800c436:	9309      	str	r3, [sp, #36]	; 0x24
 800c438:	2320      	movs	r3, #32
 800c43a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c43e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c442:	2330      	movs	r3, #48	; 0x30
 800c444:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c608 <_vfiprintf_r+0x24c>
 800c448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c44c:	f04f 0901 	mov.w	r9, #1
 800c450:	4623      	mov	r3, r4
 800c452:	469a      	mov	sl, r3
 800c454:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c458:	b10a      	cbz	r2, 800c45e <_vfiprintf_r+0xa2>
 800c45a:	2a25      	cmp	r2, #37	; 0x25
 800c45c:	d1f9      	bne.n	800c452 <_vfiprintf_r+0x96>
 800c45e:	ebba 0b04 	subs.w	fp, sl, r4
 800c462:	d00b      	beq.n	800c47c <_vfiprintf_r+0xc0>
 800c464:	465b      	mov	r3, fp
 800c466:	4622      	mov	r2, r4
 800c468:	4629      	mov	r1, r5
 800c46a:	4630      	mov	r0, r6
 800c46c:	f7ff ff93 	bl	800c396 <__sfputs_r>
 800c470:	3001      	adds	r0, #1
 800c472:	f000 80aa 	beq.w	800c5ca <_vfiprintf_r+0x20e>
 800c476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c478:	445a      	add	r2, fp
 800c47a:	9209      	str	r2, [sp, #36]	; 0x24
 800c47c:	f89a 3000 	ldrb.w	r3, [sl]
 800c480:	2b00      	cmp	r3, #0
 800c482:	f000 80a2 	beq.w	800c5ca <_vfiprintf_r+0x20e>
 800c486:	2300      	movs	r3, #0
 800c488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c48c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c490:	f10a 0a01 	add.w	sl, sl, #1
 800c494:	9304      	str	r3, [sp, #16]
 800c496:	9307      	str	r3, [sp, #28]
 800c498:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c49c:	931a      	str	r3, [sp, #104]	; 0x68
 800c49e:	4654      	mov	r4, sl
 800c4a0:	2205      	movs	r2, #5
 800c4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4a6:	4858      	ldr	r0, [pc, #352]	; (800c608 <_vfiprintf_r+0x24c>)
 800c4a8:	f7f3 ff22 	bl	80002f0 <memchr>
 800c4ac:	9a04      	ldr	r2, [sp, #16]
 800c4ae:	b9d8      	cbnz	r0, 800c4e8 <_vfiprintf_r+0x12c>
 800c4b0:	06d1      	lsls	r1, r2, #27
 800c4b2:	bf44      	itt	mi
 800c4b4:	2320      	movmi	r3, #32
 800c4b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4ba:	0713      	lsls	r3, r2, #28
 800c4bc:	bf44      	itt	mi
 800c4be:	232b      	movmi	r3, #43	; 0x2b
 800c4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c4c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c4ca:	d015      	beq.n	800c4f8 <_vfiprintf_r+0x13c>
 800c4cc:	9a07      	ldr	r2, [sp, #28]
 800c4ce:	4654      	mov	r4, sl
 800c4d0:	2000      	movs	r0, #0
 800c4d2:	f04f 0c0a 	mov.w	ip, #10
 800c4d6:	4621      	mov	r1, r4
 800c4d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4dc:	3b30      	subs	r3, #48	; 0x30
 800c4de:	2b09      	cmp	r3, #9
 800c4e0:	d94e      	bls.n	800c580 <_vfiprintf_r+0x1c4>
 800c4e2:	b1b0      	cbz	r0, 800c512 <_vfiprintf_r+0x156>
 800c4e4:	9207      	str	r2, [sp, #28]
 800c4e6:	e014      	b.n	800c512 <_vfiprintf_r+0x156>
 800c4e8:	eba0 0308 	sub.w	r3, r0, r8
 800c4ec:	fa09 f303 	lsl.w	r3, r9, r3
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	9304      	str	r3, [sp, #16]
 800c4f4:	46a2      	mov	sl, r4
 800c4f6:	e7d2      	b.n	800c49e <_vfiprintf_r+0xe2>
 800c4f8:	9b03      	ldr	r3, [sp, #12]
 800c4fa:	1d19      	adds	r1, r3, #4
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	9103      	str	r1, [sp, #12]
 800c500:	2b00      	cmp	r3, #0
 800c502:	bfbb      	ittet	lt
 800c504:	425b      	neglt	r3, r3
 800c506:	f042 0202 	orrlt.w	r2, r2, #2
 800c50a:	9307      	strge	r3, [sp, #28]
 800c50c:	9307      	strlt	r3, [sp, #28]
 800c50e:	bfb8      	it	lt
 800c510:	9204      	strlt	r2, [sp, #16]
 800c512:	7823      	ldrb	r3, [r4, #0]
 800c514:	2b2e      	cmp	r3, #46	; 0x2e
 800c516:	d10c      	bne.n	800c532 <_vfiprintf_r+0x176>
 800c518:	7863      	ldrb	r3, [r4, #1]
 800c51a:	2b2a      	cmp	r3, #42	; 0x2a
 800c51c:	d135      	bne.n	800c58a <_vfiprintf_r+0x1ce>
 800c51e:	9b03      	ldr	r3, [sp, #12]
 800c520:	1d1a      	adds	r2, r3, #4
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	9203      	str	r2, [sp, #12]
 800c526:	2b00      	cmp	r3, #0
 800c528:	bfb8      	it	lt
 800c52a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c52e:	3402      	adds	r4, #2
 800c530:	9305      	str	r3, [sp, #20]
 800c532:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c618 <_vfiprintf_r+0x25c>
 800c536:	7821      	ldrb	r1, [r4, #0]
 800c538:	2203      	movs	r2, #3
 800c53a:	4650      	mov	r0, sl
 800c53c:	f7f3 fed8 	bl	80002f0 <memchr>
 800c540:	b140      	cbz	r0, 800c554 <_vfiprintf_r+0x198>
 800c542:	2340      	movs	r3, #64	; 0x40
 800c544:	eba0 000a 	sub.w	r0, r0, sl
 800c548:	fa03 f000 	lsl.w	r0, r3, r0
 800c54c:	9b04      	ldr	r3, [sp, #16]
 800c54e:	4303      	orrs	r3, r0
 800c550:	3401      	adds	r4, #1
 800c552:	9304      	str	r3, [sp, #16]
 800c554:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c558:	482c      	ldr	r0, [pc, #176]	; (800c60c <_vfiprintf_r+0x250>)
 800c55a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c55e:	2206      	movs	r2, #6
 800c560:	f7f3 fec6 	bl	80002f0 <memchr>
 800c564:	2800      	cmp	r0, #0
 800c566:	d03f      	beq.n	800c5e8 <_vfiprintf_r+0x22c>
 800c568:	4b29      	ldr	r3, [pc, #164]	; (800c610 <_vfiprintf_r+0x254>)
 800c56a:	bb1b      	cbnz	r3, 800c5b4 <_vfiprintf_r+0x1f8>
 800c56c:	9b03      	ldr	r3, [sp, #12]
 800c56e:	3307      	adds	r3, #7
 800c570:	f023 0307 	bic.w	r3, r3, #7
 800c574:	3308      	adds	r3, #8
 800c576:	9303      	str	r3, [sp, #12]
 800c578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c57a:	443b      	add	r3, r7
 800c57c:	9309      	str	r3, [sp, #36]	; 0x24
 800c57e:	e767      	b.n	800c450 <_vfiprintf_r+0x94>
 800c580:	fb0c 3202 	mla	r2, ip, r2, r3
 800c584:	460c      	mov	r4, r1
 800c586:	2001      	movs	r0, #1
 800c588:	e7a5      	b.n	800c4d6 <_vfiprintf_r+0x11a>
 800c58a:	2300      	movs	r3, #0
 800c58c:	3401      	adds	r4, #1
 800c58e:	9305      	str	r3, [sp, #20]
 800c590:	4619      	mov	r1, r3
 800c592:	f04f 0c0a 	mov.w	ip, #10
 800c596:	4620      	mov	r0, r4
 800c598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c59c:	3a30      	subs	r2, #48	; 0x30
 800c59e:	2a09      	cmp	r2, #9
 800c5a0:	d903      	bls.n	800c5aa <_vfiprintf_r+0x1ee>
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d0c5      	beq.n	800c532 <_vfiprintf_r+0x176>
 800c5a6:	9105      	str	r1, [sp, #20]
 800c5a8:	e7c3      	b.n	800c532 <_vfiprintf_r+0x176>
 800c5aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e7f0      	b.n	800c596 <_vfiprintf_r+0x1da>
 800c5b4:	ab03      	add	r3, sp, #12
 800c5b6:	9300      	str	r3, [sp, #0]
 800c5b8:	462a      	mov	r2, r5
 800c5ba:	4b16      	ldr	r3, [pc, #88]	; (800c614 <_vfiprintf_r+0x258>)
 800c5bc:	a904      	add	r1, sp, #16
 800c5be:	4630      	mov	r0, r6
 800c5c0:	f3af 8000 	nop.w
 800c5c4:	4607      	mov	r7, r0
 800c5c6:	1c78      	adds	r0, r7, #1
 800c5c8:	d1d6      	bne.n	800c578 <_vfiprintf_r+0x1bc>
 800c5ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5cc:	07d9      	lsls	r1, r3, #31
 800c5ce:	d405      	bmi.n	800c5dc <_vfiprintf_r+0x220>
 800c5d0:	89ab      	ldrh	r3, [r5, #12]
 800c5d2:	059a      	lsls	r2, r3, #22
 800c5d4:	d402      	bmi.n	800c5dc <_vfiprintf_r+0x220>
 800c5d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5d8:	f000 fc45 	bl	800ce66 <__retarget_lock_release_recursive>
 800c5dc:	89ab      	ldrh	r3, [r5, #12]
 800c5de:	065b      	lsls	r3, r3, #25
 800c5e0:	f53f af12 	bmi.w	800c408 <_vfiprintf_r+0x4c>
 800c5e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5e6:	e711      	b.n	800c40c <_vfiprintf_r+0x50>
 800c5e8:	ab03      	add	r3, sp, #12
 800c5ea:	9300      	str	r3, [sp, #0]
 800c5ec:	462a      	mov	r2, r5
 800c5ee:	4b09      	ldr	r3, [pc, #36]	; (800c614 <_vfiprintf_r+0x258>)
 800c5f0:	a904      	add	r1, sp, #16
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	f000 f880 	bl	800c6f8 <_printf_i>
 800c5f8:	e7e4      	b.n	800c5c4 <_vfiprintf_r+0x208>
 800c5fa:	bf00      	nop
 800c5fc:	0800d5e4 	.word	0x0800d5e4
 800c600:	0800d604 	.word	0x0800d604
 800c604:	0800d5c4 	.word	0x0800d5c4
 800c608:	0800d58e 	.word	0x0800d58e
 800c60c:	0800d598 	.word	0x0800d598
 800c610:	00000000 	.word	0x00000000
 800c614:	0800c397 	.word	0x0800c397
 800c618:	0800d594 	.word	0x0800d594

0800c61c <_printf_common>:
 800c61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c620:	4616      	mov	r6, r2
 800c622:	4699      	mov	r9, r3
 800c624:	688a      	ldr	r2, [r1, #8]
 800c626:	690b      	ldr	r3, [r1, #16]
 800c628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c62c:	4293      	cmp	r3, r2
 800c62e:	bfb8      	it	lt
 800c630:	4613      	movlt	r3, r2
 800c632:	6033      	str	r3, [r6, #0]
 800c634:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c638:	4607      	mov	r7, r0
 800c63a:	460c      	mov	r4, r1
 800c63c:	b10a      	cbz	r2, 800c642 <_printf_common+0x26>
 800c63e:	3301      	adds	r3, #1
 800c640:	6033      	str	r3, [r6, #0]
 800c642:	6823      	ldr	r3, [r4, #0]
 800c644:	0699      	lsls	r1, r3, #26
 800c646:	bf42      	ittt	mi
 800c648:	6833      	ldrmi	r3, [r6, #0]
 800c64a:	3302      	addmi	r3, #2
 800c64c:	6033      	strmi	r3, [r6, #0]
 800c64e:	6825      	ldr	r5, [r4, #0]
 800c650:	f015 0506 	ands.w	r5, r5, #6
 800c654:	d106      	bne.n	800c664 <_printf_common+0x48>
 800c656:	f104 0a19 	add.w	sl, r4, #25
 800c65a:	68e3      	ldr	r3, [r4, #12]
 800c65c:	6832      	ldr	r2, [r6, #0]
 800c65e:	1a9b      	subs	r3, r3, r2
 800c660:	42ab      	cmp	r3, r5
 800c662:	dc26      	bgt.n	800c6b2 <_printf_common+0x96>
 800c664:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c668:	1e13      	subs	r3, r2, #0
 800c66a:	6822      	ldr	r2, [r4, #0]
 800c66c:	bf18      	it	ne
 800c66e:	2301      	movne	r3, #1
 800c670:	0692      	lsls	r2, r2, #26
 800c672:	d42b      	bmi.n	800c6cc <_printf_common+0xb0>
 800c674:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c678:	4649      	mov	r1, r9
 800c67a:	4638      	mov	r0, r7
 800c67c:	47c0      	blx	r8
 800c67e:	3001      	adds	r0, #1
 800c680:	d01e      	beq.n	800c6c0 <_printf_common+0xa4>
 800c682:	6823      	ldr	r3, [r4, #0]
 800c684:	68e5      	ldr	r5, [r4, #12]
 800c686:	6832      	ldr	r2, [r6, #0]
 800c688:	f003 0306 	and.w	r3, r3, #6
 800c68c:	2b04      	cmp	r3, #4
 800c68e:	bf08      	it	eq
 800c690:	1aad      	subeq	r5, r5, r2
 800c692:	68a3      	ldr	r3, [r4, #8]
 800c694:	6922      	ldr	r2, [r4, #16]
 800c696:	bf0c      	ite	eq
 800c698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c69c:	2500      	movne	r5, #0
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	bfc4      	itt	gt
 800c6a2:	1a9b      	subgt	r3, r3, r2
 800c6a4:	18ed      	addgt	r5, r5, r3
 800c6a6:	2600      	movs	r6, #0
 800c6a8:	341a      	adds	r4, #26
 800c6aa:	42b5      	cmp	r5, r6
 800c6ac:	d11a      	bne.n	800c6e4 <_printf_common+0xc8>
 800c6ae:	2000      	movs	r0, #0
 800c6b0:	e008      	b.n	800c6c4 <_printf_common+0xa8>
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	4652      	mov	r2, sl
 800c6b6:	4649      	mov	r1, r9
 800c6b8:	4638      	mov	r0, r7
 800c6ba:	47c0      	blx	r8
 800c6bc:	3001      	adds	r0, #1
 800c6be:	d103      	bne.n	800c6c8 <_printf_common+0xac>
 800c6c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6c8:	3501      	adds	r5, #1
 800c6ca:	e7c6      	b.n	800c65a <_printf_common+0x3e>
 800c6cc:	18e1      	adds	r1, r4, r3
 800c6ce:	1c5a      	adds	r2, r3, #1
 800c6d0:	2030      	movs	r0, #48	; 0x30
 800c6d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6d6:	4422      	add	r2, r4
 800c6d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6e0:	3302      	adds	r3, #2
 800c6e2:	e7c7      	b.n	800c674 <_printf_common+0x58>
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	4622      	mov	r2, r4
 800c6e8:	4649      	mov	r1, r9
 800c6ea:	4638      	mov	r0, r7
 800c6ec:	47c0      	blx	r8
 800c6ee:	3001      	adds	r0, #1
 800c6f0:	d0e6      	beq.n	800c6c0 <_printf_common+0xa4>
 800c6f2:	3601      	adds	r6, #1
 800c6f4:	e7d9      	b.n	800c6aa <_printf_common+0x8e>
	...

0800c6f8 <_printf_i>:
 800c6f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6fc:	7e0f      	ldrb	r7, [r1, #24]
 800c6fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c700:	2f78      	cmp	r7, #120	; 0x78
 800c702:	4691      	mov	r9, r2
 800c704:	4680      	mov	r8, r0
 800c706:	460c      	mov	r4, r1
 800c708:	469a      	mov	sl, r3
 800c70a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c70e:	d807      	bhi.n	800c720 <_printf_i+0x28>
 800c710:	2f62      	cmp	r7, #98	; 0x62
 800c712:	d80a      	bhi.n	800c72a <_printf_i+0x32>
 800c714:	2f00      	cmp	r7, #0
 800c716:	f000 80d8 	beq.w	800c8ca <_printf_i+0x1d2>
 800c71a:	2f58      	cmp	r7, #88	; 0x58
 800c71c:	f000 80a3 	beq.w	800c866 <_printf_i+0x16e>
 800c720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c724:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c728:	e03a      	b.n	800c7a0 <_printf_i+0xa8>
 800c72a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c72e:	2b15      	cmp	r3, #21
 800c730:	d8f6      	bhi.n	800c720 <_printf_i+0x28>
 800c732:	a101      	add	r1, pc, #4	; (adr r1, 800c738 <_printf_i+0x40>)
 800c734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c738:	0800c791 	.word	0x0800c791
 800c73c:	0800c7a5 	.word	0x0800c7a5
 800c740:	0800c721 	.word	0x0800c721
 800c744:	0800c721 	.word	0x0800c721
 800c748:	0800c721 	.word	0x0800c721
 800c74c:	0800c721 	.word	0x0800c721
 800c750:	0800c7a5 	.word	0x0800c7a5
 800c754:	0800c721 	.word	0x0800c721
 800c758:	0800c721 	.word	0x0800c721
 800c75c:	0800c721 	.word	0x0800c721
 800c760:	0800c721 	.word	0x0800c721
 800c764:	0800c8b1 	.word	0x0800c8b1
 800c768:	0800c7d5 	.word	0x0800c7d5
 800c76c:	0800c893 	.word	0x0800c893
 800c770:	0800c721 	.word	0x0800c721
 800c774:	0800c721 	.word	0x0800c721
 800c778:	0800c8d3 	.word	0x0800c8d3
 800c77c:	0800c721 	.word	0x0800c721
 800c780:	0800c7d5 	.word	0x0800c7d5
 800c784:	0800c721 	.word	0x0800c721
 800c788:	0800c721 	.word	0x0800c721
 800c78c:	0800c89b 	.word	0x0800c89b
 800c790:	682b      	ldr	r3, [r5, #0]
 800c792:	1d1a      	adds	r2, r3, #4
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	602a      	str	r2, [r5, #0]
 800c798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c79c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	e0a3      	b.n	800c8ec <_printf_i+0x1f4>
 800c7a4:	6820      	ldr	r0, [r4, #0]
 800c7a6:	6829      	ldr	r1, [r5, #0]
 800c7a8:	0606      	lsls	r6, r0, #24
 800c7aa:	f101 0304 	add.w	r3, r1, #4
 800c7ae:	d50a      	bpl.n	800c7c6 <_printf_i+0xce>
 800c7b0:	680e      	ldr	r6, [r1, #0]
 800c7b2:	602b      	str	r3, [r5, #0]
 800c7b4:	2e00      	cmp	r6, #0
 800c7b6:	da03      	bge.n	800c7c0 <_printf_i+0xc8>
 800c7b8:	232d      	movs	r3, #45	; 0x2d
 800c7ba:	4276      	negs	r6, r6
 800c7bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7c0:	485e      	ldr	r0, [pc, #376]	; (800c93c <_printf_i+0x244>)
 800c7c2:	230a      	movs	r3, #10
 800c7c4:	e019      	b.n	800c7fa <_printf_i+0x102>
 800c7c6:	680e      	ldr	r6, [r1, #0]
 800c7c8:	602b      	str	r3, [r5, #0]
 800c7ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c7ce:	bf18      	it	ne
 800c7d0:	b236      	sxthne	r6, r6
 800c7d2:	e7ef      	b.n	800c7b4 <_printf_i+0xbc>
 800c7d4:	682b      	ldr	r3, [r5, #0]
 800c7d6:	6820      	ldr	r0, [r4, #0]
 800c7d8:	1d19      	adds	r1, r3, #4
 800c7da:	6029      	str	r1, [r5, #0]
 800c7dc:	0601      	lsls	r1, r0, #24
 800c7de:	d501      	bpl.n	800c7e4 <_printf_i+0xec>
 800c7e0:	681e      	ldr	r6, [r3, #0]
 800c7e2:	e002      	b.n	800c7ea <_printf_i+0xf2>
 800c7e4:	0646      	lsls	r6, r0, #25
 800c7e6:	d5fb      	bpl.n	800c7e0 <_printf_i+0xe8>
 800c7e8:	881e      	ldrh	r6, [r3, #0]
 800c7ea:	4854      	ldr	r0, [pc, #336]	; (800c93c <_printf_i+0x244>)
 800c7ec:	2f6f      	cmp	r7, #111	; 0x6f
 800c7ee:	bf0c      	ite	eq
 800c7f0:	2308      	moveq	r3, #8
 800c7f2:	230a      	movne	r3, #10
 800c7f4:	2100      	movs	r1, #0
 800c7f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c7fa:	6865      	ldr	r5, [r4, #4]
 800c7fc:	60a5      	str	r5, [r4, #8]
 800c7fe:	2d00      	cmp	r5, #0
 800c800:	bfa2      	ittt	ge
 800c802:	6821      	ldrge	r1, [r4, #0]
 800c804:	f021 0104 	bicge.w	r1, r1, #4
 800c808:	6021      	strge	r1, [r4, #0]
 800c80a:	b90e      	cbnz	r6, 800c810 <_printf_i+0x118>
 800c80c:	2d00      	cmp	r5, #0
 800c80e:	d04d      	beq.n	800c8ac <_printf_i+0x1b4>
 800c810:	4615      	mov	r5, r2
 800c812:	fbb6 f1f3 	udiv	r1, r6, r3
 800c816:	fb03 6711 	mls	r7, r3, r1, r6
 800c81a:	5dc7      	ldrb	r7, [r0, r7]
 800c81c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c820:	4637      	mov	r7, r6
 800c822:	42bb      	cmp	r3, r7
 800c824:	460e      	mov	r6, r1
 800c826:	d9f4      	bls.n	800c812 <_printf_i+0x11a>
 800c828:	2b08      	cmp	r3, #8
 800c82a:	d10b      	bne.n	800c844 <_printf_i+0x14c>
 800c82c:	6823      	ldr	r3, [r4, #0]
 800c82e:	07de      	lsls	r6, r3, #31
 800c830:	d508      	bpl.n	800c844 <_printf_i+0x14c>
 800c832:	6923      	ldr	r3, [r4, #16]
 800c834:	6861      	ldr	r1, [r4, #4]
 800c836:	4299      	cmp	r1, r3
 800c838:	bfde      	ittt	le
 800c83a:	2330      	movle	r3, #48	; 0x30
 800c83c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c840:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c844:	1b52      	subs	r2, r2, r5
 800c846:	6122      	str	r2, [r4, #16]
 800c848:	f8cd a000 	str.w	sl, [sp]
 800c84c:	464b      	mov	r3, r9
 800c84e:	aa03      	add	r2, sp, #12
 800c850:	4621      	mov	r1, r4
 800c852:	4640      	mov	r0, r8
 800c854:	f7ff fee2 	bl	800c61c <_printf_common>
 800c858:	3001      	adds	r0, #1
 800c85a:	d14c      	bne.n	800c8f6 <_printf_i+0x1fe>
 800c85c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c860:	b004      	add	sp, #16
 800c862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c866:	4835      	ldr	r0, [pc, #212]	; (800c93c <_printf_i+0x244>)
 800c868:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c86c:	6829      	ldr	r1, [r5, #0]
 800c86e:	6823      	ldr	r3, [r4, #0]
 800c870:	f851 6b04 	ldr.w	r6, [r1], #4
 800c874:	6029      	str	r1, [r5, #0]
 800c876:	061d      	lsls	r5, r3, #24
 800c878:	d514      	bpl.n	800c8a4 <_printf_i+0x1ac>
 800c87a:	07df      	lsls	r7, r3, #31
 800c87c:	bf44      	itt	mi
 800c87e:	f043 0320 	orrmi.w	r3, r3, #32
 800c882:	6023      	strmi	r3, [r4, #0]
 800c884:	b91e      	cbnz	r6, 800c88e <_printf_i+0x196>
 800c886:	6823      	ldr	r3, [r4, #0]
 800c888:	f023 0320 	bic.w	r3, r3, #32
 800c88c:	6023      	str	r3, [r4, #0]
 800c88e:	2310      	movs	r3, #16
 800c890:	e7b0      	b.n	800c7f4 <_printf_i+0xfc>
 800c892:	6823      	ldr	r3, [r4, #0]
 800c894:	f043 0320 	orr.w	r3, r3, #32
 800c898:	6023      	str	r3, [r4, #0]
 800c89a:	2378      	movs	r3, #120	; 0x78
 800c89c:	4828      	ldr	r0, [pc, #160]	; (800c940 <_printf_i+0x248>)
 800c89e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c8a2:	e7e3      	b.n	800c86c <_printf_i+0x174>
 800c8a4:	0659      	lsls	r1, r3, #25
 800c8a6:	bf48      	it	mi
 800c8a8:	b2b6      	uxthmi	r6, r6
 800c8aa:	e7e6      	b.n	800c87a <_printf_i+0x182>
 800c8ac:	4615      	mov	r5, r2
 800c8ae:	e7bb      	b.n	800c828 <_printf_i+0x130>
 800c8b0:	682b      	ldr	r3, [r5, #0]
 800c8b2:	6826      	ldr	r6, [r4, #0]
 800c8b4:	6961      	ldr	r1, [r4, #20]
 800c8b6:	1d18      	adds	r0, r3, #4
 800c8b8:	6028      	str	r0, [r5, #0]
 800c8ba:	0635      	lsls	r5, r6, #24
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	d501      	bpl.n	800c8c4 <_printf_i+0x1cc>
 800c8c0:	6019      	str	r1, [r3, #0]
 800c8c2:	e002      	b.n	800c8ca <_printf_i+0x1d2>
 800c8c4:	0670      	lsls	r0, r6, #25
 800c8c6:	d5fb      	bpl.n	800c8c0 <_printf_i+0x1c8>
 800c8c8:	8019      	strh	r1, [r3, #0]
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	6123      	str	r3, [r4, #16]
 800c8ce:	4615      	mov	r5, r2
 800c8d0:	e7ba      	b.n	800c848 <_printf_i+0x150>
 800c8d2:	682b      	ldr	r3, [r5, #0]
 800c8d4:	1d1a      	adds	r2, r3, #4
 800c8d6:	602a      	str	r2, [r5, #0]
 800c8d8:	681d      	ldr	r5, [r3, #0]
 800c8da:	6862      	ldr	r2, [r4, #4]
 800c8dc:	2100      	movs	r1, #0
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f7f3 fd06 	bl	80002f0 <memchr>
 800c8e4:	b108      	cbz	r0, 800c8ea <_printf_i+0x1f2>
 800c8e6:	1b40      	subs	r0, r0, r5
 800c8e8:	6060      	str	r0, [r4, #4]
 800c8ea:	6863      	ldr	r3, [r4, #4]
 800c8ec:	6123      	str	r3, [r4, #16]
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8f4:	e7a8      	b.n	800c848 <_printf_i+0x150>
 800c8f6:	6923      	ldr	r3, [r4, #16]
 800c8f8:	462a      	mov	r2, r5
 800c8fa:	4649      	mov	r1, r9
 800c8fc:	4640      	mov	r0, r8
 800c8fe:	47d0      	blx	sl
 800c900:	3001      	adds	r0, #1
 800c902:	d0ab      	beq.n	800c85c <_printf_i+0x164>
 800c904:	6823      	ldr	r3, [r4, #0]
 800c906:	079b      	lsls	r3, r3, #30
 800c908:	d413      	bmi.n	800c932 <_printf_i+0x23a>
 800c90a:	68e0      	ldr	r0, [r4, #12]
 800c90c:	9b03      	ldr	r3, [sp, #12]
 800c90e:	4298      	cmp	r0, r3
 800c910:	bfb8      	it	lt
 800c912:	4618      	movlt	r0, r3
 800c914:	e7a4      	b.n	800c860 <_printf_i+0x168>
 800c916:	2301      	movs	r3, #1
 800c918:	4632      	mov	r2, r6
 800c91a:	4649      	mov	r1, r9
 800c91c:	4640      	mov	r0, r8
 800c91e:	47d0      	blx	sl
 800c920:	3001      	adds	r0, #1
 800c922:	d09b      	beq.n	800c85c <_printf_i+0x164>
 800c924:	3501      	adds	r5, #1
 800c926:	68e3      	ldr	r3, [r4, #12]
 800c928:	9903      	ldr	r1, [sp, #12]
 800c92a:	1a5b      	subs	r3, r3, r1
 800c92c:	42ab      	cmp	r3, r5
 800c92e:	dcf2      	bgt.n	800c916 <_printf_i+0x21e>
 800c930:	e7eb      	b.n	800c90a <_printf_i+0x212>
 800c932:	2500      	movs	r5, #0
 800c934:	f104 0619 	add.w	r6, r4, #25
 800c938:	e7f5      	b.n	800c926 <_printf_i+0x22e>
 800c93a:	bf00      	nop
 800c93c:	0800d59f 	.word	0x0800d59f
 800c940:	0800d5b0 	.word	0x0800d5b0

0800c944 <_sbrk_r>:
 800c944:	b538      	push	{r3, r4, r5, lr}
 800c946:	4d06      	ldr	r5, [pc, #24]	; (800c960 <_sbrk_r+0x1c>)
 800c948:	2300      	movs	r3, #0
 800c94a:	4604      	mov	r4, r0
 800c94c:	4608      	mov	r0, r1
 800c94e:	602b      	str	r3, [r5, #0]
 800c950:	f7f4 fec6 	bl	80016e0 <_sbrk>
 800c954:	1c43      	adds	r3, r0, #1
 800c956:	d102      	bne.n	800c95e <_sbrk_r+0x1a>
 800c958:	682b      	ldr	r3, [r5, #0]
 800c95a:	b103      	cbz	r3, 800c95e <_sbrk_r+0x1a>
 800c95c:	6023      	str	r3, [r4, #0]
 800c95e:	bd38      	pop	{r3, r4, r5, pc}
 800c960:	240007bc 	.word	0x240007bc

0800c964 <__swbuf_r>:
 800c964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c966:	460e      	mov	r6, r1
 800c968:	4614      	mov	r4, r2
 800c96a:	4605      	mov	r5, r0
 800c96c:	b118      	cbz	r0, 800c976 <__swbuf_r+0x12>
 800c96e:	6983      	ldr	r3, [r0, #24]
 800c970:	b90b      	cbnz	r3, 800c976 <__swbuf_r+0x12>
 800c972:	f000 f9d9 	bl	800cd28 <__sinit>
 800c976:	4b21      	ldr	r3, [pc, #132]	; (800c9fc <__swbuf_r+0x98>)
 800c978:	429c      	cmp	r4, r3
 800c97a:	d12b      	bne.n	800c9d4 <__swbuf_r+0x70>
 800c97c:	686c      	ldr	r4, [r5, #4]
 800c97e:	69a3      	ldr	r3, [r4, #24]
 800c980:	60a3      	str	r3, [r4, #8]
 800c982:	89a3      	ldrh	r3, [r4, #12]
 800c984:	071a      	lsls	r2, r3, #28
 800c986:	d52f      	bpl.n	800c9e8 <__swbuf_r+0x84>
 800c988:	6923      	ldr	r3, [r4, #16]
 800c98a:	b36b      	cbz	r3, 800c9e8 <__swbuf_r+0x84>
 800c98c:	6923      	ldr	r3, [r4, #16]
 800c98e:	6820      	ldr	r0, [r4, #0]
 800c990:	1ac0      	subs	r0, r0, r3
 800c992:	6963      	ldr	r3, [r4, #20]
 800c994:	b2f6      	uxtb	r6, r6
 800c996:	4283      	cmp	r3, r0
 800c998:	4637      	mov	r7, r6
 800c99a:	dc04      	bgt.n	800c9a6 <__swbuf_r+0x42>
 800c99c:	4621      	mov	r1, r4
 800c99e:	4628      	mov	r0, r5
 800c9a0:	f000 f92e 	bl	800cc00 <_fflush_r>
 800c9a4:	bb30      	cbnz	r0, 800c9f4 <__swbuf_r+0x90>
 800c9a6:	68a3      	ldr	r3, [r4, #8]
 800c9a8:	3b01      	subs	r3, #1
 800c9aa:	60a3      	str	r3, [r4, #8]
 800c9ac:	6823      	ldr	r3, [r4, #0]
 800c9ae:	1c5a      	adds	r2, r3, #1
 800c9b0:	6022      	str	r2, [r4, #0]
 800c9b2:	701e      	strb	r6, [r3, #0]
 800c9b4:	6963      	ldr	r3, [r4, #20]
 800c9b6:	3001      	adds	r0, #1
 800c9b8:	4283      	cmp	r3, r0
 800c9ba:	d004      	beq.n	800c9c6 <__swbuf_r+0x62>
 800c9bc:	89a3      	ldrh	r3, [r4, #12]
 800c9be:	07db      	lsls	r3, r3, #31
 800c9c0:	d506      	bpl.n	800c9d0 <__swbuf_r+0x6c>
 800c9c2:	2e0a      	cmp	r6, #10
 800c9c4:	d104      	bne.n	800c9d0 <__swbuf_r+0x6c>
 800c9c6:	4621      	mov	r1, r4
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	f000 f919 	bl	800cc00 <_fflush_r>
 800c9ce:	b988      	cbnz	r0, 800c9f4 <__swbuf_r+0x90>
 800c9d0:	4638      	mov	r0, r7
 800c9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9d4:	4b0a      	ldr	r3, [pc, #40]	; (800ca00 <__swbuf_r+0x9c>)
 800c9d6:	429c      	cmp	r4, r3
 800c9d8:	d101      	bne.n	800c9de <__swbuf_r+0x7a>
 800c9da:	68ac      	ldr	r4, [r5, #8]
 800c9dc:	e7cf      	b.n	800c97e <__swbuf_r+0x1a>
 800c9de:	4b09      	ldr	r3, [pc, #36]	; (800ca04 <__swbuf_r+0xa0>)
 800c9e0:	429c      	cmp	r4, r3
 800c9e2:	bf08      	it	eq
 800c9e4:	68ec      	ldreq	r4, [r5, #12]
 800c9e6:	e7ca      	b.n	800c97e <__swbuf_r+0x1a>
 800c9e8:	4621      	mov	r1, r4
 800c9ea:	4628      	mov	r0, r5
 800c9ec:	f000 f80c 	bl	800ca08 <__swsetup_r>
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	d0cb      	beq.n	800c98c <__swbuf_r+0x28>
 800c9f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c9f8:	e7ea      	b.n	800c9d0 <__swbuf_r+0x6c>
 800c9fa:	bf00      	nop
 800c9fc:	0800d5e4 	.word	0x0800d5e4
 800ca00:	0800d604 	.word	0x0800d604
 800ca04:	0800d5c4 	.word	0x0800d5c4

0800ca08 <__swsetup_r>:
 800ca08:	4b32      	ldr	r3, [pc, #200]	; (800cad4 <__swsetup_r+0xcc>)
 800ca0a:	b570      	push	{r4, r5, r6, lr}
 800ca0c:	681d      	ldr	r5, [r3, #0]
 800ca0e:	4606      	mov	r6, r0
 800ca10:	460c      	mov	r4, r1
 800ca12:	b125      	cbz	r5, 800ca1e <__swsetup_r+0x16>
 800ca14:	69ab      	ldr	r3, [r5, #24]
 800ca16:	b913      	cbnz	r3, 800ca1e <__swsetup_r+0x16>
 800ca18:	4628      	mov	r0, r5
 800ca1a:	f000 f985 	bl	800cd28 <__sinit>
 800ca1e:	4b2e      	ldr	r3, [pc, #184]	; (800cad8 <__swsetup_r+0xd0>)
 800ca20:	429c      	cmp	r4, r3
 800ca22:	d10f      	bne.n	800ca44 <__swsetup_r+0x3c>
 800ca24:	686c      	ldr	r4, [r5, #4]
 800ca26:	89a3      	ldrh	r3, [r4, #12]
 800ca28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca2c:	0719      	lsls	r1, r3, #28
 800ca2e:	d42c      	bmi.n	800ca8a <__swsetup_r+0x82>
 800ca30:	06dd      	lsls	r5, r3, #27
 800ca32:	d411      	bmi.n	800ca58 <__swsetup_r+0x50>
 800ca34:	2309      	movs	r3, #9
 800ca36:	6033      	str	r3, [r6, #0]
 800ca38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca3c:	81a3      	strh	r3, [r4, #12]
 800ca3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca42:	e03e      	b.n	800cac2 <__swsetup_r+0xba>
 800ca44:	4b25      	ldr	r3, [pc, #148]	; (800cadc <__swsetup_r+0xd4>)
 800ca46:	429c      	cmp	r4, r3
 800ca48:	d101      	bne.n	800ca4e <__swsetup_r+0x46>
 800ca4a:	68ac      	ldr	r4, [r5, #8]
 800ca4c:	e7eb      	b.n	800ca26 <__swsetup_r+0x1e>
 800ca4e:	4b24      	ldr	r3, [pc, #144]	; (800cae0 <__swsetup_r+0xd8>)
 800ca50:	429c      	cmp	r4, r3
 800ca52:	bf08      	it	eq
 800ca54:	68ec      	ldreq	r4, [r5, #12]
 800ca56:	e7e6      	b.n	800ca26 <__swsetup_r+0x1e>
 800ca58:	0758      	lsls	r0, r3, #29
 800ca5a:	d512      	bpl.n	800ca82 <__swsetup_r+0x7a>
 800ca5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca5e:	b141      	cbz	r1, 800ca72 <__swsetup_r+0x6a>
 800ca60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca64:	4299      	cmp	r1, r3
 800ca66:	d002      	beq.n	800ca6e <__swsetup_r+0x66>
 800ca68:	4630      	mov	r0, r6
 800ca6a:	f7ff fa41 	bl	800bef0 <_free_r>
 800ca6e:	2300      	movs	r3, #0
 800ca70:	6363      	str	r3, [r4, #52]	; 0x34
 800ca72:	89a3      	ldrh	r3, [r4, #12]
 800ca74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca78:	81a3      	strh	r3, [r4, #12]
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	6063      	str	r3, [r4, #4]
 800ca7e:	6923      	ldr	r3, [r4, #16]
 800ca80:	6023      	str	r3, [r4, #0]
 800ca82:	89a3      	ldrh	r3, [r4, #12]
 800ca84:	f043 0308 	orr.w	r3, r3, #8
 800ca88:	81a3      	strh	r3, [r4, #12]
 800ca8a:	6923      	ldr	r3, [r4, #16]
 800ca8c:	b94b      	cbnz	r3, 800caa2 <__swsetup_r+0x9a>
 800ca8e:	89a3      	ldrh	r3, [r4, #12]
 800ca90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca98:	d003      	beq.n	800caa2 <__swsetup_r+0x9a>
 800ca9a:	4621      	mov	r1, r4
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	f000 fa09 	bl	800ceb4 <__smakebuf_r>
 800caa2:	89a0      	ldrh	r0, [r4, #12]
 800caa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800caa8:	f010 0301 	ands.w	r3, r0, #1
 800caac:	d00a      	beq.n	800cac4 <__swsetup_r+0xbc>
 800caae:	2300      	movs	r3, #0
 800cab0:	60a3      	str	r3, [r4, #8]
 800cab2:	6963      	ldr	r3, [r4, #20]
 800cab4:	425b      	negs	r3, r3
 800cab6:	61a3      	str	r3, [r4, #24]
 800cab8:	6923      	ldr	r3, [r4, #16]
 800caba:	b943      	cbnz	r3, 800cace <__swsetup_r+0xc6>
 800cabc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cac0:	d1ba      	bne.n	800ca38 <__swsetup_r+0x30>
 800cac2:	bd70      	pop	{r4, r5, r6, pc}
 800cac4:	0781      	lsls	r1, r0, #30
 800cac6:	bf58      	it	pl
 800cac8:	6963      	ldrpl	r3, [r4, #20]
 800caca:	60a3      	str	r3, [r4, #8]
 800cacc:	e7f4      	b.n	800cab8 <__swsetup_r+0xb0>
 800cace:	2000      	movs	r0, #0
 800cad0:	e7f7      	b.n	800cac2 <__swsetup_r+0xba>
 800cad2:	bf00      	nop
 800cad4:	24000038 	.word	0x24000038
 800cad8:	0800d5e4 	.word	0x0800d5e4
 800cadc:	0800d604 	.word	0x0800d604
 800cae0:	0800d5c4 	.word	0x0800d5c4

0800cae4 <abort>:
 800cae4:	b508      	push	{r3, lr}
 800cae6:	2006      	movs	r0, #6
 800cae8:	f000 faa2 	bl	800d030 <raise>
 800caec:	2001      	movs	r0, #1
 800caee:	f7f4 fd7f 	bl	80015f0 <_exit>
	...

0800caf4 <__sflush_r>:
 800caf4:	898a      	ldrh	r2, [r1, #12]
 800caf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cafa:	4605      	mov	r5, r0
 800cafc:	0710      	lsls	r0, r2, #28
 800cafe:	460c      	mov	r4, r1
 800cb00:	d458      	bmi.n	800cbb4 <__sflush_r+0xc0>
 800cb02:	684b      	ldr	r3, [r1, #4]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	dc05      	bgt.n	800cb14 <__sflush_r+0x20>
 800cb08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	dc02      	bgt.n	800cb14 <__sflush_r+0x20>
 800cb0e:	2000      	movs	r0, #0
 800cb10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb16:	2e00      	cmp	r6, #0
 800cb18:	d0f9      	beq.n	800cb0e <__sflush_r+0x1a>
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb20:	682f      	ldr	r7, [r5, #0]
 800cb22:	602b      	str	r3, [r5, #0]
 800cb24:	d032      	beq.n	800cb8c <__sflush_r+0x98>
 800cb26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb28:	89a3      	ldrh	r3, [r4, #12]
 800cb2a:	075a      	lsls	r2, r3, #29
 800cb2c:	d505      	bpl.n	800cb3a <__sflush_r+0x46>
 800cb2e:	6863      	ldr	r3, [r4, #4]
 800cb30:	1ac0      	subs	r0, r0, r3
 800cb32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb34:	b10b      	cbz	r3, 800cb3a <__sflush_r+0x46>
 800cb36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb38:	1ac0      	subs	r0, r0, r3
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb40:	6a21      	ldr	r1, [r4, #32]
 800cb42:	4628      	mov	r0, r5
 800cb44:	47b0      	blx	r6
 800cb46:	1c43      	adds	r3, r0, #1
 800cb48:	89a3      	ldrh	r3, [r4, #12]
 800cb4a:	d106      	bne.n	800cb5a <__sflush_r+0x66>
 800cb4c:	6829      	ldr	r1, [r5, #0]
 800cb4e:	291d      	cmp	r1, #29
 800cb50:	d82c      	bhi.n	800cbac <__sflush_r+0xb8>
 800cb52:	4a2a      	ldr	r2, [pc, #168]	; (800cbfc <__sflush_r+0x108>)
 800cb54:	40ca      	lsrs	r2, r1
 800cb56:	07d6      	lsls	r6, r2, #31
 800cb58:	d528      	bpl.n	800cbac <__sflush_r+0xb8>
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	6062      	str	r2, [r4, #4]
 800cb5e:	04d9      	lsls	r1, r3, #19
 800cb60:	6922      	ldr	r2, [r4, #16]
 800cb62:	6022      	str	r2, [r4, #0]
 800cb64:	d504      	bpl.n	800cb70 <__sflush_r+0x7c>
 800cb66:	1c42      	adds	r2, r0, #1
 800cb68:	d101      	bne.n	800cb6e <__sflush_r+0x7a>
 800cb6a:	682b      	ldr	r3, [r5, #0]
 800cb6c:	b903      	cbnz	r3, 800cb70 <__sflush_r+0x7c>
 800cb6e:	6560      	str	r0, [r4, #84]	; 0x54
 800cb70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb72:	602f      	str	r7, [r5, #0]
 800cb74:	2900      	cmp	r1, #0
 800cb76:	d0ca      	beq.n	800cb0e <__sflush_r+0x1a>
 800cb78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb7c:	4299      	cmp	r1, r3
 800cb7e:	d002      	beq.n	800cb86 <__sflush_r+0x92>
 800cb80:	4628      	mov	r0, r5
 800cb82:	f7ff f9b5 	bl	800bef0 <_free_r>
 800cb86:	2000      	movs	r0, #0
 800cb88:	6360      	str	r0, [r4, #52]	; 0x34
 800cb8a:	e7c1      	b.n	800cb10 <__sflush_r+0x1c>
 800cb8c:	6a21      	ldr	r1, [r4, #32]
 800cb8e:	2301      	movs	r3, #1
 800cb90:	4628      	mov	r0, r5
 800cb92:	47b0      	blx	r6
 800cb94:	1c41      	adds	r1, r0, #1
 800cb96:	d1c7      	bne.n	800cb28 <__sflush_r+0x34>
 800cb98:	682b      	ldr	r3, [r5, #0]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d0c4      	beq.n	800cb28 <__sflush_r+0x34>
 800cb9e:	2b1d      	cmp	r3, #29
 800cba0:	d001      	beq.n	800cba6 <__sflush_r+0xb2>
 800cba2:	2b16      	cmp	r3, #22
 800cba4:	d101      	bne.n	800cbaa <__sflush_r+0xb6>
 800cba6:	602f      	str	r7, [r5, #0]
 800cba8:	e7b1      	b.n	800cb0e <__sflush_r+0x1a>
 800cbaa:	89a3      	ldrh	r3, [r4, #12]
 800cbac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbb0:	81a3      	strh	r3, [r4, #12]
 800cbb2:	e7ad      	b.n	800cb10 <__sflush_r+0x1c>
 800cbb4:	690f      	ldr	r7, [r1, #16]
 800cbb6:	2f00      	cmp	r7, #0
 800cbb8:	d0a9      	beq.n	800cb0e <__sflush_r+0x1a>
 800cbba:	0793      	lsls	r3, r2, #30
 800cbbc:	680e      	ldr	r6, [r1, #0]
 800cbbe:	bf08      	it	eq
 800cbc0:	694b      	ldreq	r3, [r1, #20]
 800cbc2:	600f      	str	r7, [r1, #0]
 800cbc4:	bf18      	it	ne
 800cbc6:	2300      	movne	r3, #0
 800cbc8:	eba6 0807 	sub.w	r8, r6, r7
 800cbcc:	608b      	str	r3, [r1, #8]
 800cbce:	f1b8 0f00 	cmp.w	r8, #0
 800cbd2:	dd9c      	ble.n	800cb0e <__sflush_r+0x1a>
 800cbd4:	6a21      	ldr	r1, [r4, #32]
 800cbd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbd8:	4643      	mov	r3, r8
 800cbda:	463a      	mov	r2, r7
 800cbdc:	4628      	mov	r0, r5
 800cbde:	47b0      	blx	r6
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	dc06      	bgt.n	800cbf2 <__sflush_r+0xfe>
 800cbe4:	89a3      	ldrh	r3, [r4, #12]
 800cbe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbea:	81a3      	strh	r3, [r4, #12]
 800cbec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbf0:	e78e      	b.n	800cb10 <__sflush_r+0x1c>
 800cbf2:	4407      	add	r7, r0
 800cbf4:	eba8 0800 	sub.w	r8, r8, r0
 800cbf8:	e7e9      	b.n	800cbce <__sflush_r+0xda>
 800cbfa:	bf00      	nop
 800cbfc:	20400001 	.word	0x20400001

0800cc00 <_fflush_r>:
 800cc00:	b538      	push	{r3, r4, r5, lr}
 800cc02:	690b      	ldr	r3, [r1, #16]
 800cc04:	4605      	mov	r5, r0
 800cc06:	460c      	mov	r4, r1
 800cc08:	b913      	cbnz	r3, 800cc10 <_fflush_r+0x10>
 800cc0a:	2500      	movs	r5, #0
 800cc0c:	4628      	mov	r0, r5
 800cc0e:	bd38      	pop	{r3, r4, r5, pc}
 800cc10:	b118      	cbz	r0, 800cc1a <_fflush_r+0x1a>
 800cc12:	6983      	ldr	r3, [r0, #24]
 800cc14:	b90b      	cbnz	r3, 800cc1a <_fflush_r+0x1a>
 800cc16:	f000 f887 	bl	800cd28 <__sinit>
 800cc1a:	4b14      	ldr	r3, [pc, #80]	; (800cc6c <_fflush_r+0x6c>)
 800cc1c:	429c      	cmp	r4, r3
 800cc1e:	d11b      	bne.n	800cc58 <_fflush_r+0x58>
 800cc20:	686c      	ldr	r4, [r5, #4]
 800cc22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d0ef      	beq.n	800cc0a <_fflush_r+0xa>
 800cc2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc2c:	07d0      	lsls	r0, r2, #31
 800cc2e:	d404      	bmi.n	800cc3a <_fflush_r+0x3a>
 800cc30:	0599      	lsls	r1, r3, #22
 800cc32:	d402      	bmi.n	800cc3a <_fflush_r+0x3a>
 800cc34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc36:	f000 f915 	bl	800ce64 <__retarget_lock_acquire_recursive>
 800cc3a:	4628      	mov	r0, r5
 800cc3c:	4621      	mov	r1, r4
 800cc3e:	f7ff ff59 	bl	800caf4 <__sflush_r>
 800cc42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc44:	07da      	lsls	r2, r3, #31
 800cc46:	4605      	mov	r5, r0
 800cc48:	d4e0      	bmi.n	800cc0c <_fflush_r+0xc>
 800cc4a:	89a3      	ldrh	r3, [r4, #12]
 800cc4c:	059b      	lsls	r3, r3, #22
 800cc4e:	d4dd      	bmi.n	800cc0c <_fflush_r+0xc>
 800cc50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc52:	f000 f908 	bl	800ce66 <__retarget_lock_release_recursive>
 800cc56:	e7d9      	b.n	800cc0c <_fflush_r+0xc>
 800cc58:	4b05      	ldr	r3, [pc, #20]	; (800cc70 <_fflush_r+0x70>)
 800cc5a:	429c      	cmp	r4, r3
 800cc5c:	d101      	bne.n	800cc62 <_fflush_r+0x62>
 800cc5e:	68ac      	ldr	r4, [r5, #8]
 800cc60:	e7df      	b.n	800cc22 <_fflush_r+0x22>
 800cc62:	4b04      	ldr	r3, [pc, #16]	; (800cc74 <_fflush_r+0x74>)
 800cc64:	429c      	cmp	r4, r3
 800cc66:	bf08      	it	eq
 800cc68:	68ec      	ldreq	r4, [r5, #12]
 800cc6a:	e7da      	b.n	800cc22 <_fflush_r+0x22>
 800cc6c:	0800d5e4 	.word	0x0800d5e4
 800cc70:	0800d604 	.word	0x0800d604
 800cc74:	0800d5c4 	.word	0x0800d5c4

0800cc78 <std>:
 800cc78:	2300      	movs	r3, #0
 800cc7a:	b510      	push	{r4, lr}
 800cc7c:	4604      	mov	r4, r0
 800cc7e:	e9c0 3300 	strd	r3, r3, [r0]
 800cc82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc86:	6083      	str	r3, [r0, #8]
 800cc88:	8181      	strh	r1, [r0, #12]
 800cc8a:	6643      	str	r3, [r0, #100]	; 0x64
 800cc8c:	81c2      	strh	r2, [r0, #14]
 800cc8e:	6183      	str	r3, [r0, #24]
 800cc90:	4619      	mov	r1, r3
 800cc92:	2208      	movs	r2, #8
 800cc94:	305c      	adds	r0, #92	; 0x5c
 800cc96:	f7ff f81f 	bl	800bcd8 <memset>
 800cc9a:	4b05      	ldr	r3, [pc, #20]	; (800ccb0 <std+0x38>)
 800cc9c:	6263      	str	r3, [r4, #36]	; 0x24
 800cc9e:	4b05      	ldr	r3, [pc, #20]	; (800ccb4 <std+0x3c>)
 800cca0:	62a3      	str	r3, [r4, #40]	; 0x28
 800cca2:	4b05      	ldr	r3, [pc, #20]	; (800ccb8 <std+0x40>)
 800cca4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cca6:	4b05      	ldr	r3, [pc, #20]	; (800ccbc <std+0x44>)
 800cca8:	6224      	str	r4, [r4, #32]
 800ccaa:	6323      	str	r3, [r4, #48]	; 0x30
 800ccac:	bd10      	pop	{r4, pc}
 800ccae:	bf00      	nop
 800ccb0:	0800d069 	.word	0x0800d069
 800ccb4:	0800d08b 	.word	0x0800d08b
 800ccb8:	0800d0c3 	.word	0x0800d0c3
 800ccbc:	0800d0e7 	.word	0x0800d0e7

0800ccc0 <_cleanup_r>:
 800ccc0:	4901      	ldr	r1, [pc, #4]	; (800ccc8 <_cleanup_r+0x8>)
 800ccc2:	f000 b8af 	b.w	800ce24 <_fwalk_reent>
 800ccc6:	bf00      	nop
 800ccc8:	0800cc01 	.word	0x0800cc01

0800cccc <__sfmoreglue>:
 800cccc:	b570      	push	{r4, r5, r6, lr}
 800ccce:	2268      	movs	r2, #104	; 0x68
 800ccd0:	1e4d      	subs	r5, r1, #1
 800ccd2:	4355      	muls	r5, r2
 800ccd4:	460e      	mov	r6, r1
 800ccd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ccda:	f7ff f975 	bl	800bfc8 <_malloc_r>
 800ccde:	4604      	mov	r4, r0
 800cce0:	b140      	cbz	r0, 800ccf4 <__sfmoreglue+0x28>
 800cce2:	2100      	movs	r1, #0
 800cce4:	e9c0 1600 	strd	r1, r6, [r0]
 800cce8:	300c      	adds	r0, #12
 800ccea:	60a0      	str	r0, [r4, #8]
 800ccec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ccf0:	f7fe fff2 	bl	800bcd8 <memset>
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	bd70      	pop	{r4, r5, r6, pc}

0800ccf8 <__sfp_lock_acquire>:
 800ccf8:	4801      	ldr	r0, [pc, #4]	; (800cd00 <__sfp_lock_acquire+0x8>)
 800ccfa:	f000 b8b3 	b.w	800ce64 <__retarget_lock_acquire_recursive>
 800ccfe:	bf00      	nop
 800cd00:	240007c1 	.word	0x240007c1

0800cd04 <__sfp_lock_release>:
 800cd04:	4801      	ldr	r0, [pc, #4]	; (800cd0c <__sfp_lock_release+0x8>)
 800cd06:	f000 b8ae 	b.w	800ce66 <__retarget_lock_release_recursive>
 800cd0a:	bf00      	nop
 800cd0c:	240007c1 	.word	0x240007c1

0800cd10 <__sinit_lock_acquire>:
 800cd10:	4801      	ldr	r0, [pc, #4]	; (800cd18 <__sinit_lock_acquire+0x8>)
 800cd12:	f000 b8a7 	b.w	800ce64 <__retarget_lock_acquire_recursive>
 800cd16:	bf00      	nop
 800cd18:	240007c2 	.word	0x240007c2

0800cd1c <__sinit_lock_release>:
 800cd1c:	4801      	ldr	r0, [pc, #4]	; (800cd24 <__sinit_lock_release+0x8>)
 800cd1e:	f000 b8a2 	b.w	800ce66 <__retarget_lock_release_recursive>
 800cd22:	bf00      	nop
 800cd24:	240007c2 	.word	0x240007c2

0800cd28 <__sinit>:
 800cd28:	b510      	push	{r4, lr}
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	f7ff fff0 	bl	800cd10 <__sinit_lock_acquire>
 800cd30:	69a3      	ldr	r3, [r4, #24]
 800cd32:	b11b      	cbz	r3, 800cd3c <__sinit+0x14>
 800cd34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd38:	f7ff bff0 	b.w	800cd1c <__sinit_lock_release>
 800cd3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cd40:	6523      	str	r3, [r4, #80]	; 0x50
 800cd42:	4b13      	ldr	r3, [pc, #76]	; (800cd90 <__sinit+0x68>)
 800cd44:	4a13      	ldr	r2, [pc, #76]	; (800cd94 <__sinit+0x6c>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	62a2      	str	r2, [r4, #40]	; 0x28
 800cd4a:	42a3      	cmp	r3, r4
 800cd4c:	bf04      	itt	eq
 800cd4e:	2301      	moveq	r3, #1
 800cd50:	61a3      	streq	r3, [r4, #24]
 800cd52:	4620      	mov	r0, r4
 800cd54:	f000 f820 	bl	800cd98 <__sfp>
 800cd58:	6060      	str	r0, [r4, #4]
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f000 f81c 	bl	800cd98 <__sfp>
 800cd60:	60a0      	str	r0, [r4, #8]
 800cd62:	4620      	mov	r0, r4
 800cd64:	f000 f818 	bl	800cd98 <__sfp>
 800cd68:	2200      	movs	r2, #0
 800cd6a:	60e0      	str	r0, [r4, #12]
 800cd6c:	2104      	movs	r1, #4
 800cd6e:	6860      	ldr	r0, [r4, #4]
 800cd70:	f7ff ff82 	bl	800cc78 <std>
 800cd74:	68a0      	ldr	r0, [r4, #8]
 800cd76:	2201      	movs	r2, #1
 800cd78:	2109      	movs	r1, #9
 800cd7a:	f7ff ff7d 	bl	800cc78 <std>
 800cd7e:	68e0      	ldr	r0, [r4, #12]
 800cd80:	2202      	movs	r2, #2
 800cd82:	2112      	movs	r1, #18
 800cd84:	f7ff ff78 	bl	800cc78 <std>
 800cd88:	2301      	movs	r3, #1
 800cd8a:	61a3      	str	r3, [r4, #24]
 800cd8c:	e7d2      	b.n	800cd34 <__sinit+0xc>
 800cd8e:	bf00      	nop
 800cd90:	0800d4dc 	.word	0x0800d4dc
 800cd94:	0800ccc1 	.word	0x0800ccc1

0800cd98 <__sfp>:
 800cd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9a:	4607      	mov	r7, r0
 800cd9c:	f7ff ffac 	bl	800ccf8 <__sfp_lock_acquire>
 800cda0:	4b1e      	ldr	r3, [pc, #120]	; (800ce1c <__sfp+0x84>)
 800cda2:	681e      	ldr	r6, [r3, #0]
 800cda4:	69b3      	ldr	r3, [r6, #24]
 800cda6:	b913      	cbnz	r3, 800cdae <__sfp+0x16>
 800cda8:	4630      	mov	r0, r6
 800cdaa:	f7ff ffbd 	bl	800cd28 <__sinit>
 800cdae:	3648      	adds	r6, #72	; 0x48
 800cdb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	d503      	bpl.n	800cdc0 <__sfp+0x28>
 800cdb8:	6833      	ldr	r3, [r6, #0]
 800cdba:	b30b      	cbz	r3, 800ce00 <__sfp+0x68>
 800cdbc:	6836      	ldr	r6, [r6, #0]
 800cdbe:	e7f7      	b.n	800cdb0 <__sfp+0x18>
 800cdc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cdc4:	b9d5      	cbnz	r5, 800cdfc <__sfp+0x64>
 800cdc6:	4b16      	ldr	r3, [pc, #88]	; (800ce20 <__sfp+0x88>)
 800cdc8:	60e3      	str	r3, [r4, #12]
 800cdca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cdce:	6665      	str	r5, [r4, #100]	; 0x64
 800cdd0:	f000 f847 	bl	800ce62 <__retarget_lock_init_recursive>
 800cdd4:	f7ff ff96 	bl	800cd04 <__sfp_lock_release>
 800cdd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cddc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cde0:	6025      	str	r5, [r4, #0]
 800cde2:	61a5      	str	r5, [r4, #24]
 800cde4:	2208      	movs	r2, #8
 800cde6:	4629      	mov	r1, r5
 800cde8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cdec:	f7fe ff74 	bl	800bcd8 <memset>
 800cdf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cdf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdfc:	3468      	adds	r4, #104	; 0x68
 800cdfe:	e7d9      	b.n	800cdb4 <__sfp+0x1c>
 800ce00:	2104      	movs	r1, #4
 800ce02:	4638      	mov	r0, r7
 800ce04:	f7ff ff62 	bl	800cccc <__sfmoreglue>
 800ce08:	4604      	mov	r4, r0
 800ce0a:	6030      	str	r0, [r6, #0]
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	d1d5      	bne.n	800cdbc <__sfp+0x24>
 800ce10:	f7ff ff78 	bl	800cd04 <__sfp_lock_release>
 800ce14:	230c      	movs	r3, #12
 800ce16:	603b      	str	r3, [r7, #0]
 800ce18:	e7ee      	b.n	800cdf8 <__sfp+0x60>
 800ce1a:	bf00      	nop
 800ce1c:	0800d4dc 	.word	0x0800d4dc
 800ce20:	ffff0001 	.word	0xffff0001

0800ce24 <_fwalk_reent>:
 800ce24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce28:	4606      	mov	r6, r0
 800ce2a:	4688      	mov	r8, r1
 800ce2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce30:	2700      	movs	r7, #0
 800ce32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce36:	f1b9 0901 	subs.w	r9, r9, #1
 800ce3a:	d505      	bpl.n	800ce48 <_fwalk_reent+0x24>
 800ce3c:	6824      	ldr	r4, [r4, #0]
 800ce3e:	2c00      	cmp	r4, #0
 800ce40:	d1f7      	bne.n	800ce32 <_fwalk_reent+0xe>
 800ce42:	4638      	mov	r0, r7
 800ce44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce48:	89ab      	ldrh	r3, [r5, #12]
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	d907      	bls.n	800ce5e <_fwalk_reent+0x3a>
 800ce4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce52:	3301      	adds	r3, #1
 800ce54:	d003      	beq.n	800ce5e <_fwalk_reent+0x3a>
 800ce56:	4629      	mov	r1, r5
 800ce58:	4630      	mov	r0, r6
 800ce5a:	47c0      	blx	r8
 800ce5c:	4307      	orrs	r7, r0
 800ce5e:	3568      	adds	r5, #104	; 0x68
 800ce60:	e7e9      	b.n	800ce36 <_fwalk_reent+0x12>

0800ce62 <__retarget_lock_init_recursive>:
 800ce62:	4770      	bx	lr

0800ce64 <__retarget_lock_acquire_recursive>:
 800ce64:	4770      	bx	lr

0800ce66 <__retarget_lock_release_recursive>:
 800ce66:	4770      	bx	lr

0800ce68 <__swhatbuf_r>:
 800ce68:	b570      	push	{r4, r5, r6, lr}
 800ce6a:	460e      	mov	r6, r1
 800ce6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce70:	2900      	cmp	r1, #0
 800ce72:	b096      	sub	sp, #88	; 0x58
 800ce74:	4614      	mov	r4, r2
 800ce76:	461d      	mov	r5, r3
 800ce78:	da08      	bge.n	800ce8c <__swhatbuf_r+0x24>
 800ce7a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	602a      	str	r2, [r5, #0]
 800ce82:	061a      	lsls	r2, r3, #24
 800ce84:	d410      	bmi.n	800cea8 <__swhatbuf_r+0x40>
 800ce86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce8a:	e00e      	b.n	800ceaa <__swhatbuf_r+0x42>
 800ce8c:	466a      	mov	r2, sp
 800ce8e:	f000 f951 	bl	800d134 <_fstat_r>
 800ce92:	2800      	cmp	r0, #0
 800ce94:	dbf1      	blt.n	800ce7a <__swhatbuf_r+0x12>
 800ce96:	9a01      	ldr	r2, [sp, #4]
 800ce98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cea0:	425a      	negs	r2, r3
 800cea2:	415a      	adcs	r2, r3
 800cea4:	602a      	str	r2, [r5, #0]
 800cea6:	e7ee      	b.n	800ce86 <__swhatbuf_r+0x1e>
 800cea8:	2340      	movs	r3, #64	; 0x40
 800ceaa:	2000      	movs	r0, #0
 800ceac:	6023      	str	r3, [r4, #0]
 800ceae:	b016      	add	sp, #88	; 0x58
 800ceb0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ceb4 <__smakebuf_r>:
 800ceb4:	898b      	ldrh	r3, [r1, #12]
 800ceb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ceb8:	079d      	lsls	r5, r3, #30
 800ceba:	4606      	mov	r6, r0
 800cebc:	460c      	mov	r4, r1
 800cebe:	d507      	bpl.n	800ced0 <__smakebuf_r+0x1c>
 800cec0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cec4:	6023      	str	r3, [r4, #0]
 800cec6:	6123      	str	r3, [r4, #16]
 800cec8:	2301      	movs	r3, #1
 800ceca:	6163      	str	r3, [r4, #20]
 800cecc:	b002      	add	sp, #8
 800cece:	bd70      	pop	{r4, r5, r6, pc}
 800ced0:	ab01      	add	r3, sp, #4
 800ced2:	466a      	mov	r2, sp
 800ced4:	f7ff ffc8 	bl	800ce68 <__swhatbuf_r>
 800ced8:	9900      	ldr	r1, [sp, #0]
 800ceda:	4605      	mov	r5, r0
 800cedc:	4630      	mov	r0, r6
 800cede:	f7ff f873 	bl	800bfc8 <_malloc_r>
 800cee2:	b948      	cbnz	r0, 800cef8 <__smakebuf_r+0x44>
 800cee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cee8:	059a      	lsls	r2, r3, #22
 800ceea:	d4ef      	bmi.n	800cecc <__smakebuf_r+0x18>
 800ceec:	f023 0303 	bic.w	r3, r3, #3
 800cef0:	f043 0302 	orr.w	r3, r3, #2
 800cef4:	81a3      	strh	r3, [r4, #12]
 800cef6:	e7e3      	b.n	800cec0 <__smakebuf_r+0xc>
 800cef8:	4b0d      	ldr	r3, [pc, #52]	; (800cf30 <__smakebuf_r+0x7c>)
 800cefa:	62b3      	str	r3, [r6, #40]	; 0x28
 800cefc:	89a3      	ldrh	r3, [r4, #12]
 800cefe:	6020      	str	r0, [r4, #0]
 800cf00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf04:	81a3      	strh	r3, [r4, #12]
 800cf06:	9b00      	ldr	r3, [sp, #0]
 800cf08:	6163      	str	r3, [r4, #20]
 800cf0a:	9b01      	ldr	r3, [sp, #4]
 800cf0c:	6120      	str	r0, [r4, #16]
 800cf0e:	b15b      	cbz	r3, 800cf28 <__smakebuf_r+0x74>
 800cf10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf14:	4630      	mov	r0, r6
 800cf16:	f000 f91f 	bl	800d158 <_isatty_r>
 800cf1a:	b128      	cbz	r0, 800cf28 <__smakebuf_r+0x74>
 800cf1c:	89a3      	ldrh	r3, [r4, #12]
 800cf1e:	f023 0303 	bic.w	r3, r3, #3
 800cf22:	f043 0301 	orr.w	r3, r3, #1
 800cf26:	81a3      	strh	r3, [r4, #12]
 800cf28:	89a0      	ldrh	r0, [r4, #12]
 800cf2a:	4305      	orrs	r5, r0
 800cf2c:	81a5      	strh	r5, [r4, #12]
 800cf2e:	e7cd      	b.n	800cecc <__smakebuf_r+0x18>
 800cf30:	0800ccc1 	.word	0x0800ccc1

0800cf34 <memmove>:
 800cf34:	4288      	cmp	r0, r1
 800cf36:	b510      	push	{r4, lr}
 800cf38:	eb01 0402 	add.w	r4, r1, r2
 800cf3c:	d902      	bls.n	800cf44 <memmove+0x10>
 800cf3e:	4284      	cmp	r4, r0
 800cf40:	4623      	mov	r3, r4
 800cf42:	d807      	bhi.n	800cf54 <memmove+0x20>
 800cf44:	1e43      	subs	r3, r0, #1
 800cf46:	42a1      	cmp	r1, r4
 800cf48:	d008      	beq.n	800cf5c <memmove+0x28>
 800cf4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf52:	e7f8      	b.n	800cf46 <memmove+0x12>
 800cf54:	4402      	add	r2, r0
 800cf56:	4601      	mov	r1, r0
 800cf58:	428a      	cmp	r2, r1
 800cf5a:	d100      	bne.n	800cf5e <memmove+0x2a>
 800cf5c:	bd10      	pop	{r4, pc}
 800cf5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf66:	e7f7      	b.n	800cf58 <memmove+0x24>

0800cf68 <__malloc_lock>:
 800cf68:	4801      	ldr	r0, [pc, #4]	; (800cf70 <__malloc_lock+0x8>)
 800cf6a:	f7ff bf7b 	b.w	800ce64 <__retarget_lock_acquire_recursive>
 800cf6e:	bf00      	nop
 800cf70:	240007c0 	.word	0x240007c0

0800cf74 <__malloc_unlock>:
 800cf74:	4801      	ldr	r0, [pc, #4]	; (800cf7c <__malloc_unlock+0x8>)
 800cf76:	f7ff bf76 	b.w	800ce66 <__retarget_lock_release_recursive>
 800cf7a:	bf00      	nop
 800cf7c:	240007c0 	.word	0x240007c0

0800cf80 <_realloc_r>:
 800cf80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf84:	4680      	mov	r8, r0
 800cf86:	4614      	mov	r4, r2
 800cf88:	460e      	mov	r6, r1
 800cf8a:	b921      	cbnz	r1, 800cf96 <_realloc_r+0x16>
 800cf8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf90:	4611      	mov	r1, r2
 800cf92:	f7ff b819 	b.w	800bfc8 <_malloc_r>
 800cf96:	b92a      	cbnz	r2, 800cfa4 <_realloc_r+0x24>
 800cf98:	f7fe ffaa 	bl	800bef0 <_free_r>
 800cf9c:	4625      	mov	r5, r4
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfa4:	f000 f8fa 	bl	800d19c <_malloc_usable_size_r>
 800cfa8:	4284      	cmp	r4, r0
 800cfaa:	4607      	mov	r7, r0
 800cfac:	d802      	bhi.n	800cfb4 <_realloc_r+0x34>
 800cfae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cfb2:	d812      	bhi.n	800cfda <_realloc_r+0x5a>
 800cfb4:	4621      	mov	r1, r4
 800cfb6:	4640      	mov	r0, r8
 800cfb8:	f7ff f806 	bl	800bfc8 <_malloc_r>
 800cfbc:	4605      	mov	r5, r0
 800cfbe:	2800      	cmp	r0, #0
 800cfc0:	d0ed      	beq.n	800cf9e <_realloc_r+0x1e>
 800cfc2:	42bc      	cmp	r4, r7
 800cfc4:	4622      	mov	r2, r4
 800cfc6:	4631      	mov	r1, r6
 800cfc8:	bf28      	it	cs
 800cfca:	463a      	movcs	r2, r7
 800cfcc:	f7fe fe76 	bl	800bcbc <memcpy>
 800cfd0:	4631      	mov	r1, r6
 800cfd2:	4640      	mov	r0, r8
 800cfd4:	f7fe ff8c 	bl	800bef0 <_free_r>
 800cfd8:	e7e1      	b.n	800cf9e <_realloc_r+0x1e>
 800cfda:	4635      	mov	r5, r6
 800cfdc:	e7df      	b.n	800cf9e <_realloc_r+0x1e>

0800cfde <_raise_r>:
 800cfde:	291f      	cmp	r1, #31
 800cfe0:	b538      	push	{r3, r4, r5, lr}
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	460d      	mov	r5, r1
 800cfe6:	d904      	bls.n	800cff2 <_raise_r+0x14>
 800cfe8:	2316      	movs	r3, #22
 800cfea:	6003      	str	r3, [r0, #0]
 800cfec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cff0:	bd38      	pop	{r3, r4, r5, pc}
 800cff2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cff4:	b112      	cbz	r2, 800cffc <_raise_r+0x1e>
 800cff6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cffa:	b94b      	cbnz	r3, 800d010 <_raise_r+0x32>
 800cffc:	4620      	mov	r0, r4
 800cffe:	f000 f831 	bl	800d064 <_getpid_r>
 800d002:	462a      	mov	r2, r5
 800d004:	4601      	mov	r1, r0
 800d006:	4620      	mov	r0, r4
 800d008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d00c:	f000 b818 	b.w	800d040 <_kill_r>
 800d010:	2b01      	cmp	r3, #1
 800d012:	d00a      	beq.n	800d02a <_raise_r+0x4c>
 800d014:	1c59      	adds	r1, r3, #1
 800d016:	d103      	bne.n	800d020 <_raise_r+0x42>
 800d018:	2316      	movs	r3, #22
 800d01a:	6003      	str	r3, [r0, #0]
 800d01c:	2001      	movs	r0, #1
 800d01e:	e7e7      	b.n	800cff0 <_raise_r+0x12>
 800d020:	2400      	movs	r4, #0
 800d022:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d026:	4628      	mov	r0, r5
 800d028:	4798      	blx	r3
 800d02a:	2000      	movs	r0, #0
 800d02c:	e7e0      	b.n	800cff0 <_raise_r+0x12>
	...

0800d030 <raise>:
 800d030:	4b02      	ldr	r3, [pc, #8]	; (800d03c <raise+0xc>)
 800d032:	4601      	mov	r1, r0
 800d034:	6818      	ldr	r0, [r3, #0]
 800d036:	f7ff bfd2 	b.w	800cfde <_raise_r>
 800d03a:	bf00      	nop
 800d03c:	24000038 	.word	0x24000038

0800d040 <_kill_r>:
 800d040:	b538      	push	{r3, r4, r5, lr}
 800d042:	4d07      	ldr	r5, [pc, #28]	; (800d060 <_kill_r+0x20>)
 800d044:	2300      	movs	r3, #0
 800d046:	4604      	mov	r4, r0
 800d048:	4608      	mov	r0, r1
 800d04a:	4611      	mov	r1, r2
 800d04c:	602b      	str	r3, [r5, #0]
 800d04e:	f7f4 fabf 	bl	80015d0 <_kill>
 800d052:	1c43      	adds	r3, r0, #1
 800d054:	d102      	bne.n	800d05c <_kill_r+0x1c>
 800d056:	682b      	ldr	r3, [r5, #0]
 800d058:	b103      	cbz	r3, 800d05c <_kill_r+0x1c>
 800d05a:	6023      	str	r3, [r4, #0]
 800d05c:	bd38      	pop	{r3, r4, r5, pc}
 800d05e:	bf00      	nop
 800d060:	240007bc 	.word	0x240007bc

0800d064 <_getpid_r>:
 800d064:	f7f4 baac 	b.w	80015c0 <_getpid>

0800d068 <__sread>:
 800d068:	b510      	push	{r4, lr}
 800d06a:	460c      	mov	r4, r1
 800d06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d070:	f000 f89c 	bl	800d1ac <_read_r>
 800d074:	2800      	cmp	r0, #0
 800d076:	bfab      	itete	ge
 800d078:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d07a:	89a3      	ldrhlt	r3, [r4, #12]
 800d07c:	181b      	addge	r3, r3, r0
 800d07e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d082:	bfac      	ite	ge
 800d084:	6563      	strge	r3, [r4, #84]	; 0x54
 800d086:	81a3      	strhlt	r3, [r4, #12]
 800d088:	bd10      	pop	{r4, pc}

0800d08a <__swrite>:
 800d08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d08e:	461f      	mov	r7, r3
 800d090:	898b      	ldrh	r3, [r1, #12]
 800d092:	05db      	lsls	r3, r3, #23
 800d094:	4605      	mov	r5, r0
 800d096:	460c      	mov	r4, r1
 800d098:	4616      	mov	r6, r2
 800d09a:	d505      	bpl.n	800d0a8 <__swrite+0x1e>
 800d09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0a0:	2302      	movs	r3, #2
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	f000 f868 	bl	800d178 <_lseek_r>
 800d0a8:	89a3      	ldrh	r3, [r4, #12]
 800d0aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0b2:	81a3      	strh	r3, [r4, #12]
 800d0b4:	4632      	mov	r2, r6
 800d0b6:	463b      	mov	r3, r7
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0be:	f000 b817 	b.w	800d0f0 <_write_r>

0800d0c2 <__sseek>:
 800d0c2:	b510      	push	{r4, lr}
 800d0c4:	460c      	mov	r4, r1
 800d0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ca:	f000 f855 	bl	800d178 <_lseek_r>
 800d0ce:	1c43      	adds	r3, r0, #1
 800d0d0:	89a3      	ldrh	r3, [r4, #12]
 800d0d2:	bf15      	itete	ne
 800d0d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d0d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d0da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d0de:	81a3      	strheq	r3, [r4, #12]
 800d0e0:	bf18      	it	ne
 800d0e2:	81a3      	strhne	r3, [r4, #12]
 800d0e4:	bd10      	pop	{r4, pc}

0800d0e6 <__sclose>:
 800d0e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ea:	f000 b813 	b.w	800d114 <_close_r>
	...

0800d0f0 <_write_r>:
 800d0f0:	b538      	push	{r3, r4, r5, lr}
 800d0f2:	4d07      	ldr	r5, [pc, #28]	; (800d110 <_write_r+0x20>)
 800d0f4:	4604      	mov	r4, r0
 800d0f6:	4608      	mov	r0, r1
 800d0f8:	4611      	mov	r1, r2
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	602a      	str	r2, [r5, #0]
 800d0fe:	461a      	mov	r2, r3
 800d100:	f7f4 fa9d 	bl	800163e <_write>
 800d104:	1c43      	adds	r3, r0, #1
 800d106:	d102      	bne.n	800d10e <_write_r+0x1e>
 800d108:	682b      	ldr	r3, [r5, #0]
 800d10a:	b103      	cbz	r3, 800d10e <_write_r+0x1e>
 800d10c:	6023      	str	r3, [r4, #0]
 800d10e:	bd38      	pop	{r3, r4, r5, pc}
 800d110:	240007bc 	.word	0x240007bc

0800d114 <_close_r>:
 800d114:	b538      	push	{r3, r4, r5, lr}
 800d116:	4d06      	ldr	r5, [pc, #24]	; (800d130 <_close_r+0x1c>)
 800d118:	2300      	movs	r3, #0
 800d11a:	4604      	mov	r4, r0
 800d11c:	4608      	mov	r0, r1
 800d11e:	602b      	str	r3, [r5, #0]
 800d120:	f7f4 faa9 	bl	8001676 <_close>
 800d124:	1c43      	adds	r3, r0, #1
 800d126:	d102      	bne.n	800d12e <_close_r+0x1a>
 800d128:	682b      	ldr	r3, [r5, #0]
 800d12a:	b103      	cbz	r3, 800d12e <_close_r+0x1a>
 800d12c:	6023      	str	r3, [r4, #0]
 800d12e:	bd38      	pop	{r3, r4, r5, pc}
 800d130:	240007bc 	.word	0x240007bc

0800d134 <_fstat_r>:
 800d134:	b538      	push	{r3, r4, r5, lr}
 800d136:	4d07      	ldr	r5, [pc, #28]	; (800d154 <_fstat_r+0x20>)
 800d138:	2300      	movs	r3, #0
 800d13a:	4604      	mov	r4, r0
 800d13c:	4608      	mov	r0, r1
 800d13e:	4611      	mov	r1, r2
 800d140:	602b      	str	r3, [r5, #0]
 800d142:	f7f4 faa4 	bl	800168e <_fstat>
 800d146:	1c43      	adds	r3, r0, #1
 800d148:	d102      	bne.n	800d150 <_fstat_r+0x1c>
 800d14a:	682b      	ldr	r3, [r5, #0]
 800d14c:	b103      	cbz	r3, 800d150 <_fstat_r+0x1c>
 800d14e:	6023      	str	r3, [r4, #0]
 800d150:	bd38      	pop	{r3, r4, r5, pc}
 800d152:	bf00      	nop
 800d154:	240007bc 	.word	0x240007bc

0800d158 <_isatty_r>:
 800d158:	b538      	push	{r3, r4, r5, lr}
 800d15a:	4d06      	ldr	r5, [pc, #24]	; (800d174 <_isatty_r+0x1c>)
 800d15c:	2300      	movs	r3, #0
 800d15e:	4604      	mov	r4, r0
 800d160:	4608      	mov	r0, r1
 800d162:	602b      	str	r3, [r5, #0]
 800d164:	f7f4 faa3 	bl	80016ae <_isatty>
 800d168:	1c43      	adds	r3, r0, #1
 800d16a:	d102      	bne.n	800d172 <_isatty_r+0x1a>
 800d16c:	682b      	ldr	r3, [r5, #0]
 800d16e:	b103      	cbz	r3, 800d172 <_isatty_r+0x1a>
 800d170:	6023      	str	r3, [r4, #0]
 800d172:	bd38      	pop	{r3, r4, r5, pc}
 800d174:	240007bc 	.word	0x240007bc

0800d178 <_lseek_r>:
 800d178:	b538      	push	{r3, r4, r5, lr}
 800d17a:	4d07      	ldr	r5, [pc, #28]	; (800d198 <_lseek_r+0x20>)
 800d17c:	4604      	mov	r4, r0
 800d17e:	4608      	mov	r0, r1
 800d180:	4611      	mov	r1, r2
 800d182:	2200      	movs	r2, #0
 800d184:	602a      	str	r2, [r5, #0]
 800d186:	461a      	mov	r2, r3
 800d188:	f7f4 fa9c 	bl	80016c4 <_lseek>
 800d18c:	1c43      	adds	r3, r0, #1
 800d18e:	d102      	bne.n	800d196 <_lseek_r+0x1e>
 800d190:	682b      	ldr	r3, [r5, #0]
 800d192:	b103      	cbz	r3, 800d196 <_lseek_r+0x1e>
 800d194:	6023      	str	r3, [r4, #0]
 800d196:	bd38      	pop	{r3, r4, r5, pc}
 800d198:	240007bc 	.word	0x240007bc

0800d19c <_malloc_usable_size_r>:
 800d19c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1a0:	1f18      	subs	r0, r3, #4
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	bfbc      	itt	lt
 800d1a6:	580b      	ldrlt	r3, [r1, r0]
 800d1a8:	18c0      	addlt	r0, r0, r3
 800d1aa:	4770      	bx	lr

0800d1ac <_read_r>:
 800d1ac:	b538      	push	{r3, r4, r5, lr}
 800d1ae:	4d07      	ldr	r5, [pc, #28]	; (800d1cc <_read_r+0x20>)
 800d1b0:	4604      	mov	r4, r0
 800d1b2:	4608      	mov	r0, r1
 800d1b4:	4611      	mov	r1, r2
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	602a      	str	r2, [r5, #0]
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	f7f4 fa22 	bl	8001604 <_read>
 800d1c0:	1c43      	adds	r3, r0, #1
 800d1c2:	d102      	bne.n	800d1ca <_read_r+0x1e>
 800d1c4:	682b      	ldr	r3, [r5, #0]
 800d1c6:	b103      	cbz	r3, 800d1ca <_read_r+0x1e>
 800d1c8:	6023      	str	r3, [r4, #0]
 800d1ca:	bd38      	pop	{r3, r4, r5, pc}
 800d1cc:	240007bc 	.word	0x240007bc

0800d1d0 <_gettimeofday>:
 800d1d0:	4b02      	ldr	r3, [pc, #8]	; (800d1dc <_gettimeofday+0xc>)
 800d1d2:	2258      	movs	r2, #88	; 0x58
 800d1d4:	601a      	str	r2, [r3, #0]
 800d1d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1da:	4770      	bx	lr
 800d1dc:	240007bc 	.word	0x240007bc

0800d1e0 <_init>:
 800d1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1e2:	bf00      	nop
 800d1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1e6:	bc08      	pop	{r3}
 800d1e8:	469e      	mov	lr, r3
 800d1ea:	4770      	bx	lr

0800d1ec <_fini>:
 800d1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ee:	bf00      	nop
 800d1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1f2:	bc08      	pop	{r3}
 800d1f4:	469e      	mov	lr, r3
 800d1f6:	4770      	bx	lr
