
RECEPTION_UART_H7A3ZIQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ceac  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800d15c  0800d15c  0001d15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d578  0800d578  0001d578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d580  0800d580  0001d580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d584  0800d584  0001d584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  0800d588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000728  2400009c  0800d624  0002009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240007c4  0800d624  000207c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b47c  00000000  00000000  000200ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003459  00000000  00000000  0003b546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001300  00000000  00000000  0003e9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001188  00000000  00000000  0003fca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033735  00000000  00000000  00040e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cf58  00000000  00000000  0007455d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00141ed1  00000000  00000000  000914b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d3386  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000059ac  00000000  00000000  001d33d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         00000024  00000000  00000000  001d8d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000004e  00000000  00000000  001d8da8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400009c 	.word	0x2400009c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800d144 	.word	0x0800d144

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000a0 	.word	0x240000a0
 80002ec:	0800d144 	.word	0x0800d144

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <Thrust_Init>:
 *      Author: romingo
 */

#include "Process.h"

void Thrust_Init(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL);
 8000698:	4b85      	ldr	r3, [pc, #532]	; (80008b0 <Thrust_Init+0x21c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a84      	ldr	r2, [pc, #528]	; (80008b0 <Thrust_Init+0x21c>)
 800069e:	6852      	ldr	r2, [r2, #4]
 80006a0:	4611      	mov	r1, r2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f007 f9e4 	bl	8007a70 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL);
 80006a8:	4b82      	ldr	r3, [pc, #520]	; (80008b4 <Thrust_Init+0x220>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a81      	ldr	r2, [pc, #516]	; (80008b4 <Thrust_Init+0x220>)
 80006ae:	6852      	ldr	r2, [r2, #4]
 80006b0:	4611      	mov	r1, r2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f007 f9dc 	bl	8007a70 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 80006b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006bc:	f001 fd1e 	bl	80020fc <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MIN_Thrust);
 80006c0:	4b7b      	ldr	r3, [pc, #492]	; (80008b0 <Thrust_Init+0x21c>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d105      	bne.n	80006d4 <Thrust_Init+0x40>
 80006c8:	4b79      	ldr	r3, [pc, #484]	; (80008b0 <Thrust_Init+0x21c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2264      	movs	r2, #100	; 0x64
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
 80006d2:	e02c      	b.n	800072e <Thrust_Init+0x9a>
 80006d4:	4b76      	ldr	r3, [pc, #472]	; (80008b0 <Thrust_Init+0x21c>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	2b04      	cmp	r3, #4
 80006da:	d105      	bne.n	80006e8 <Thrust_Init+0x54>
 80006dc:	4b74      	ldr	r3, [pc, #464]	; (80008b0 <Thrust_Init+0x21c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	2364      	movs	r3, #100	; 0x64
 80006e4:	6393      	str	r3, [r2, #56]	; 0x38
 80006e6:	e022      	b.n	800072e <Thrust_Init+0x9a>
 80006e8:	4b71      	ldr	r3, [pc, #452]	; (80008b0 <Thrust_Init+0x21c>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	2b08      	cmp	r3, #8
 80006ee:	d105      	bne.n	80006fc <Thrust_Init+0x68>
 80006f0:	4b6f      	ldr	r3, [pc, #444]	; (80008b0 <Thrust_Init+0x21c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006fa:	e018      	b.n	800072e <Thrust_Init+0x9a>
 80006fc:	4b6c      	ldr	r3, [pc, #432]	; (80008b0 <Thrust_Init+0x21c>)
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	2b0c      	cmp	r3, #12
 8000702:	d105      	bne.n	8000710 <Thrust_Init+0x7c>
 8000704:	4b6a      	ldr	r3, [pc, #424]	; (80008b0 <Thrust_Init+0x21c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	2364      	movs	r3, #100	; 0x64
 800070c:	6413      	str	r3, [r2, #64]	; 0x40
 800070e:	e00e      	b.n	800072e <Thrust_Init+0x9a>
 8000710:	4b67      	ldr	r3, [pc, #412]	; (80008b0 <Thrust_Init+0x21c>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	2b10      	cmp	r3, #16
 8000716:	d105      	bne.n	8000724 <Thrust_Init+0x90>
 8000718:	4b65      	ldr	r3, [pc, #404]	; (80008b0 <Thrust_Init+0x21c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	2364      	movs	r3, #100	; 0x64
 8000720:	6593      	str	r3, [r2, #88]	; 0x58
 8000722:	e004      	b.n	800072e <Thrust_Init+0x9a>
 8000724:	4b62      	ldr	r3, [pc, #392]	; (80008b0 <Thrust_Init+0x21c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MIN_Thrust);
 800072e:	4b61      	ldr	r3, [pc, #388]	; (80008b4 <Thrust_Init+0x220>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d105      	bne.n	8000742 <Thrust_Init+0xae>
 8000736:	4b5f      	ldr	r3, [pc, #380]	; (80008b4 <Thrust_Init+0x220>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2264      	movs	r2, #100	; 0x64
 800073e:	635a      	str	r2, [r3, #52]	; 0x34
 8000740:	e02c      	b.n	800079c <Thrust_Init+0x108>
 8000742:	4b5c      	ldr	r3, [pc, #368]	; (80008b4 <Thrust_Init+0x220>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	2b04      	cmp	r3, #4
 8000748:	d105      	bne.n	8000756 <Thrust_Init+0xc2>
 800074a:	4b5a      	ldr	r3, [pc, #360]	; (80008b4 <Thrust_Init+0x220>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	6393      	str	r3, [r2, #56]	; 0x38
 8000754:	e022      	b.n	800079c <Thrust_Init+0x108>
 8000756:	4b57      	ldr	r3, [pc, #348]	; (80008b4 <Thrust_Init+0x220>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	2b08      	cmp	r3, #8
 800075c:	d105      	bne.n	800076a <Thrust_Init+0xd6>
 800075e:	4b55      	ldr	r3, [pc, #340]	; (80008b4 <Thrust_Init+0x220>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000768:	e018      	b.n	800079c <Thrust_Init+0x108>
 800076a:	4b52      	ldr	r3, [pc, #328]	; (80008b4 <Thrust_Init+0x220>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	2b0c      	cmp	r3, #12
 8000770:	d105      	bne.n	800077e <Thrust_Init+0xea>
 8000772:	4b50      	ldr	r3, [pc, #320]	; (80008b4 <Thrust_Init+0x220>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	2364      	movs	r3, #100	; 0x64
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
 800077c:	e00e      	b.n	800079c <Thrust_Init+0x108>
 800077e:	4b4d      	ldr	r3, [pc, #308]	; (80008b4 <Thrust_Init+0x220>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	2b10      	cmp	r3, #16
 8000784:	d105      	bne.n	8000792 <Thrust_Init+0xfe>
 8000786:	4b4b      	ldr	r3, [pc, #300]	; (80008b4 <Thrust_Init+0x220>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	6593      	str	r3, [r2, #88]	; 0x58
 8000790:	e004      	b.n	800079c <Thrust_Init+0x108>
 8000792:	4b48      	ldr	r3, [pc, #288]	; (80008b4 <Thrust_Init+0x220>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	2364      	movs	r3, #100	; 0x64
 800079a:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(1000);
 800079c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a0:	f001 fcac 	bl	80020fc <HAL_Delay>

	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MAX_Thrust);
 80007a4:	4b42      	ldr	r3, [pc, #264]	; (80008b0 <Thrust_Init+0x21c>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d105      	bne.n	80007b8 <Thrust_Init+0x124>
 80007ac:	4b40      	ldr	r3, [pc, #256]	; (80008b0 <Thrust_Init+0x21c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2232      	movs	r2, #50	; 0x32
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
 80007b6:	e02c      	b.n	8000812 <Thrust_Init+0x17e>
 80007b8:	4b3d      	ldr	r3, [pc, #244]	; (80008b0 <Thrust_Init+0x21c>)
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	2b04      	cmp	r3, #4
 80007be:	d105      	bne.n	80007cc <Thrust_Init+0x138>
 80007c0:	4b3b      	ldr	r3, [pc, #236]	; (80008b0 <Thrust_Init+0x21c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	2332      	movs	r3, #50	; 0x32
 80007c8:	6393      	str	r3, [r2, #56]	; 0x38
 80007ca:	e022      	b.n	8000812 <Thrust_Init+0x17e>
 80007cc:	4b38      	ldr	r3, [pc, #224]	; (80008b0 <Thrust_Init+0x21c>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	2b08      	cmp	r3, #8
 80007d2:	d105      	bne.n	80007e0 <Thrust_Init+0x14c>
 80007d4:	4b36      	ldr	r3, [pc, #216]	; (80008b0 <Thrust_Init+0x21c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	2332      	movs	r3, #50	; 0x32
 80007dc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80007de:	e018      	b.n	8000812 <Thrust_Init+0x17e>
 80007e0:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <Thrust_Init+0x21c>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	2b0c      	cmp	r3, #12
 80007e6:	d105      	bne.n	80007f4 <Thrust_Init+0x160>
 80007e8:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <Thrust_Init+0x21c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	2332      	movs	r3, #50	; 0x32
 80007f0:	6413      	str	r3, [r2, #64]	; 0x40
 80007f2:	e00e      	b.n	8000812 <Thrust_Init+0x17e>
 80007f4:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <Thrust_Init+0x21c>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	2b10      	cmp	r3, #16
 80007fa:	d105      	bne.n	8000808 <Thrust_Init+0x174>
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <Thrust_Init+0x21c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	2332      	movs	r3, #50	; 0x32
 8000804:	6593      	str	r3, [r2, #88]	; 0x58
 8000806:	e004      	b.n	8000812 <Thrust_Init+0x17e>
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <Thrust_Init+0x21c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	2332      	movs	r3, #50	; 0x32
 8000810:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MAX_Thrust);
 8000812:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <Thrust_Init+0x220>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d105      	bne.n	8000826 <Thrust_Init+0x192>
 800081a:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <Thrust_Init+0x220>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2232      	movs	r2, #50	; 0x32
 8000822:	635a      	str	r2, [r3, #52]	; 0x34
 8000824:	e02c      	b.n	8000880 <Thrust_Init+0x1ec>
 8000826:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <Thrust_Init+0x220>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b04      	cmp	r3, #4
 800082c:	d105      	bne.n	800083a <Thrust_Init+0x1a6>
 800082e:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <Thrust_Init+0x220>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	2332      	movs	r3, #50	; 0x32
 8000836:	6393      	str	r3, [r2, #56]	; 0x38
 8000838:	e022      	b.n	8000880 <Thrust_Init+0x1ec>
 800083a:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <Thrust_Init+0x220>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2b08      	cmp	r3, #8
 8000840:	d105      	bne.n	800084e <Thrust_Init+0x1ba>
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <Thrust_Init+0x220>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	2332      	movs	r3, #50	; 0x32
 800084a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800084c:	e018      	b.n	8000880 <Thrust_Init+0x1ec>
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <Thrust_Init+0x220>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b0c      	cmp	r3, #12
 8000854:	d105      	bne.n	8000862 <Thrust_Init+0x1ce>
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <Thrust_Init+0x220>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	2332      	movs	r3, #50	; 0x32
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
 8000860:	e00e      	b.n	8000880 <Thrust_Init+0x1ec>
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <Thrust_Init+0x220>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2b10      	cmp	r3, #16
 8000868:	d105      	bne.n	8000876 <Thrust_Init+0x1e2>
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <Thrust_Init+0x220>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	2332      	movs	r3, #50	; 0x32
 8000872:	6593      	str	r3, [r2, #88]	; 0x58
 8000874:	e004      	b.n	8000880 <Thrust_Init+0x1ec>
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <Thrust_Init+0x220>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	2332      	movs	r3, #50	; 0x32
 800087e:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_Delay(1000);
 8000880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000884:	f001 fc3a 	bl	80020fc <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MIN_Thrust);
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <Thrust_Init+0x21c>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d105      	bne.n	800089c <Thrust_Init+0x208>
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <Thrust_Init+0x21c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2264      	movs	r2, #100	; 0x64
 8000898:	635a      	str	r2, [r3, #52]	; 0x34
 800089a:	e030      	b.n	80008fe <Thrust_Init+0x26a>
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <Thrust_Init+0x21c>)
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d109      	bne.n	80008b8 <Thrust_Init+0x224>
 80008a4:	4b02      	ldr	r3, [pc, #8]	; (80008b0 <Thrust_Init+0x21c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	2364      	movs	r3, #100	; 0x64
 80008ac:	6393      	str	r3, [r2, #56]	; 0x38
 80008ae:	e026      	b.n	80008fe <Thrust_Init+0x26a>
 80008b0:	24000000 	.word	0x24000000
 80008b4:	24000008 	.word	0x24000008
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <Thrust_Init+0x2e4>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b08      	cmp	r3, #8
 80008be:	d105      	bne.n	80008cc <Thrust_Init+0x238>
 80008c0:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <Thrust_Init+0x2e4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	2364      	movs	r3, #100	; 0x64
 80008c8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008ca:	e018      	b.n	80008fe <Thrust_Init+0x26a>
 80008cc:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <Thrust_Init+0x2e4>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2b0c      	cmp	r3, #12
 80008d2:	d105      	bne.n	80008e0 <Thrust_Init+0x24c>
 80008d4:	4b28      	ldr	r3, [pc, #160]	; (8000978 <Thrust_Init+0x2e4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	2364      	movs	r3, #100	; 0x64
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	e00e      	b.n	80008fe <Thrust_Init+0x26a>
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <Thrust_Init+0x2e4>)
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2b10      	cmp	r3, #16
 80008e6:	d105      	bne.n	80008f4 <Thrust_Init+0x260>
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <Thrust_Init+0x2e4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	2364      	movs	r3, #100	; 0x64
 80008f0:	6593      	str	r3, [r2, #88]	; 0x58
 80008f2:	e004      	b.n	80008fe <Thrust_Init+0x26a>
 80008f4:	4b20      	ldr	r3, [pc, #128]	; (8000978 <Thrust_Init+0x2e4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	2364      	movs	r3, #100	; 0x64
 80008fc:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MIN_Thrust);
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <Thrust_Init+0x2e8>)
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d105      	bne.n	8000912 <Thrust_Init+0x27e>
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <Thrust_Init+0x2e8>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2264      	movs	r2, #100	; 0x64
 800090e:	635a      	str	r2, [r3, #52]	; 0x34
 8000910:	e02c      	b.n	800096c <Thrust_Init+0x2d8>
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <Thrust_Init+0x2e8>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	2b04      	cmp	r3, #4
 8000918:	d105      	bne.n	8000926 <Thrust_Init+0x292>
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <Thrust_Init+0x2e8>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	2364      	movs	r3, #100	; 0x64
 8000922:	6393      	str	r3, [r2, #56]	; 0x38
 8000924:	e022      	b.n	800096c <Thrust_Init+0x2d8>
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <Thrust_Init+0x2e8>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b08      	cmp	r3, #8
 800092c:	d105      	bne.n	800093a <Thrust_Init+0x2a6>
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <Thrust_Init+0x2e8>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	2364      	movs	r3, #100	; 0x64
 8000936:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000938:	e018      	b.n	800096c <Thrust_Init+0x2d8>
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <Thrust_Init+0x2e8>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b0c      	cmp	r3, #12
 8000940:	d105      	bne.n	800094e <Thrust_Init+0x2ba>
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <Thrust_Init+0x2e8>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	2364      	movs	r3, #100	; 0x64
 800094a:	6413      	str	r3, [r2, #64]	; 0x40
 800094c:	e00e      	b.n	800096c <Thrust_Init+0x2d8>
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <Thrust_Init+0x2e8>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	2b10      	cmp	r3, #16
 8000954:	d105      	bne.n	8000962 <Thrust_Init+0x2ce>
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <Thrust_Init+0x2e8>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	2364      	movs	r3, #100	; 0x64
 800095e:	6593      	str	r3, [r2, #88]	; 0x58
 8000960:	e004      	b.n	800096c <Thrust_Init+0x2d8>
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <Thrust_Init+0x2e8>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	2364      	movs	r3, #100	; 0x64
 800096a:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(1000);
 800096c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000970:	f001 fbc4 	bl	80020fc <HAL_Delay>
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	24000000 	.word	0x24000000
 800097c:	24000008 	.word	0x24000008

08000980 <Depth_Init>:
void Depth_Init(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	XL320_set_led_ON(XL_Front.huartXL,2);//Green Led
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <Depth_Init+0x20>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2102      	movs	r1, #2
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fb30 	bl	8000ff0 <XL320_set_led_ON>
	XL320_set_led_ON(XL_Back.huartXL,2);
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <Depth_Init+0x24>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2102      	movs	r1, #2
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fb2a 	bl	8000ff0 <XL320_set_led_ON>

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	24000010 	.word	0x24000010
 80009a4:	24000018 	.word	0x24000018

080009a8 <Process_Init>:
void Process_Init(void){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	Thrust_Init();
 80009ac:	f7ff fe72 	bl	8000694 <Thrust_Init>
	Depth_Init();
 80009b0:	f7ff ffe6 	bl	8000980 <Depth_Init>
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <Process>:

void Process(receiveMsg* message) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
    //AdjustThrust(&TIM_PROP_G, message->thrust);
    //AdjustThrust(&TIM_PROP_D, message->thrust);
    AdjustAngle(message->thrust,message->angle);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80009ca:	4619      	mov	r1, r3
 80009cc:	4610      	mov	r0, r2
 80009ce:	f000 f88b 	bl	8000ae8 <AdjustAngle>
    AdjustDepth(&XL_Net,message->depth);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	789b      	ldrb	r3, [r3, #2]
 80009d6:	4619      	mov	r1, r3
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <Process+0x30>)
 80009da:	f000 f8b3 	bl	8000b44 <AdjustDepth>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	24000020 	.word	0x24000020
 80009ec:	00000000 	.word	0x00000000

080009f0 <AdjustThrust>:

void AdjustThrust( TIM_PROP* tim_prop, uint8_t thrust) {
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	70fb      	strb	r3, [r7, #3]
	float thrust_ms = 1-(thrust * ((float)(MIN_Thrust - MAX_Thrust) / 100.0)) + MIN_Thrust;
 80009fc:	78fb      	ldrb	r3, [r7, #3]
 80009fe:	ee07 3a90 	vmov	s15, r3
 8000a02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a06:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000a0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a0e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000a12:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a16:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8000ae0 <AdjustThrust+0xf0>
 8000a1a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a22:	edc7 7a03 	vstr	s15, [r7, #12]
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d10a      	bne.n	8000a44 <AdjustThrust+0x54>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a3c:	ee17 2a90 	vmov	r2, s15
 8000a40:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a42:	e045      	b.n	8000ad0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d10a      	bne.n	8000a62 <AdjustThrust+0x72>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a5a:	ee17 3a90 	vmov	r3, s15
 8000a5e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000a60:	e036      	b.n	8000ad0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	2b08      	cmp	r3, #8
 8000a68:	d10a      	bne.n	8000a80 <AdjustThrust+0x90>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a78:	ee17 3a90 	vmov	r3, s15
 8000a7c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000a7e:	e027      	b.n	8000ad0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2b0c      	cmp	r3, #12
 8000a86:	d10a      	bne.n	8000a9e <AdjustThrust+0xae>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a96:	ee17 3a90 	vmov	r3, s15
 8000a9a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a9c:	e018      	b.n	8000ad0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	2b10      	cmp	r3, #16
 8000aa4:	d10a      	bne.n	8000abc <AdjustThrust+0xcc>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ab4:	ee17 3a90 	vmov	r3, s15
 8000ab8:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000aba:	e009      	b.n	8000ad0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aca:	ee17 3a90 	vmov	r3, s15
 8000ace:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	f3af 8000 	nop.w
 8000ae0:	00000000 	.word	0x00000000
 8000ae4:	40590000 	.word	0x40590000

08000ae8 <AdjustAngle>:

void AdjustAngle(uint8_t thrust,int8_t angle){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	460a      	mov	r2, r1
 8000af2:	71fb      	strb	r3, [r7, #7]
 8000af4:	4613      	mov	r3, r2
 8000af6:	71bb      	strb	r3, [r7, #6]
	uint8_t thrust_G = thrust;
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	73fb      	strb	r3, [r7, #15]
	uint8_t thrust_D = thrust;
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	73bb      	strb	r3, [r7, #14]

	if (angle<50){//On tourne a gauche
 8000b00:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b04:	2b31      	cmp	r3, #49	; 0x31
 8000b06:	dc03      	bgt.n	8000b10 <AdjustAngle+0x28>
		thrust_G = thrust;
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	73fb      	strb	r3, [r7, #15]
		thrust_D = 0; // Ajouter une diminution progressive des pousses moteurs
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73bb      	strb	r3, [r7, #14]
	}
	if (angle>50){//On tourne a droite
 8000b10:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b14:	2b32      	cmp	r3, #50	; 0x32
 8000b16:	dd03      	ble.n	8000b20 <AdjustAngle+0x38>
		thrust_G = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	73fb      	strb	r3, [r7, #15]
		thrust_D = thrust;
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	73bb      	strb	r3, [r7, #14]
	}
	AdjustThrust(&TIM_PROP_G, thrust_G);
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <AdjustAngle+0x54>)
 8000b26:	f7ff ff63 	bl	80009f0 <AdjustThrust>
	AdjustThrust(&TIM_PROP_D, thrust_D);
 8000b2a:	7bbb      	ldrb	r3, [r7, #14]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4804      	ldr	r0, [pc, #16]	; (8000b40 <AdjustAngle+0x58>)
 8000b30:	f7ff ff5e 	bl	80009f0 <AdjustThrust>
}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	24000000 	.word	0x24000000
 8000b40:	24000008 	.word	0x24000008

08000b44 <AdjustDepth>:

void AdjustDepth(XL_Network* XL_Net,uint8_t depth){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	70fb      	strb	r3, [r7, #3]
	//Logique:
	//on repartit équitablement la descente des ballasts

	XL320_set_pos(XL_Net->XL_Front->huartXL , depth*3); // Dans XL320_set_pos on map de 0,300 --> 0,1023 ici on veut map de 0,100 --> 0,1023
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	78fa      	ldrb	r2, [r7, #3]
 8000b58:	b292      	uxth	r2, r2
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	0049      	lsls	r1, r1, #1
 8000b5e:	440a      	add	r2, r1
 8000b60:	b292      	uxth	r2, r2
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 fa80 	bl	800106a <XL320_set_pos>
	XL320_set_pos(XL_Net->XL_Back->huartXL , depth*3);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	78fa      	ldrb	r2, [r7, #3]
 8000b72:	b292      	uxth	r2, r2
 8000b74:	4611      	mov	r1, r2
 8000b76:	0049      	lsls	r1, r1, #1
 8000b78:	440a      	add	r2, r1
 8000b7a:	b292      	uxth	r2, r2
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fa73 	bl	800106a <XL320_set_pos>
	XL_Net->XL_Front->pos = depth*3;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	78fb      	ldrb	r3, [r7, #3]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	0049      	lsls	r1, r1, #1
 8000b8e:	440b      	add	r3, r1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	7153      	strb	r3, [r2, #5]
	XL_Net->XL_Back->pos = depth*3;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685a      	ldr	r2, [r3, #4]
 8000b98:	78fb      	ldrb	r3, [r7, #3]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	0049      	lsls	r1, r1, #1
 8000b9e:	440b      	add	r3, r1
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	7153      	strb	r3, [r2, #5]


}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <RPICom_Init>:
#include "RPICom.h"

RPICom_HandleTypeDef hRPICom;
void RPICom_Init(UART_HandleTypeDef* huart, UART_HandleTypeDef* huartDebug){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
	hRPICom.huart = huart;
 8000bb6:	4a19      	ldr	r2, [pc, #100]	; (8000c1c <RPICom_Init+0x70>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6013      	str	r3, [r2, #0]
	hRPICom.huartDebug = huartDebug;
 8000bbc:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <RPICom_Init+0x70>)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	6053      	str	r3, [r2, #4]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	681b      	ldr	r3, [r3, #0]
	memcpy(&(hRPICom.receiveMessage), NULL, sizeof(receiveMsg));
 8000bc6:	4a15      	ldr	r2, [pc, #84]	; (8000c1c <RPICom_Init+0x70>)
 8000bc8:	6093      	str	r3, [r2, #8]
	memcpy(hRPICom.RxBuffer, NULL , UART_RPI_RX_BUFFER_SIZE);
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <RPICom_Init+0x70>)
 8000bcc:	2100      	movs	r1, #0
 8000bce:	f103 0213 	add.w	r2, r3, #19
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	cb03      	ldmia	r3!, {r0, r1}
 8000bd6:	6010      	str	r0, [r2, #0]
 8000bd8:	6051      	str	r1, [r2, #4]
	memcpy(hRPICom.TxBuffer, NULL, UART_RPI_TX_BUFFER_SIZE);
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <RPICom_Init+0x70>)
 8000bdc:	2100      	movs	r1, #0
 8000bde:	f103 021b 	add.w	r2, r3, #27
 8000be2:	460b      	mov	r3, r1
 8000be4:	cb03      	ldmia	r3!, {r0, r1}
 8000be6:	6010      	str	r0, [r2, #0]
 8000be8:	6051      	str	r1, [r2, #4]
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	8113      	strh	r3, [r2, #8]
	memcpy(hRPICom.DebugBuffer, NULL, UART_RPI_DEBUG_BUFFER_SIZE);
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <RPICom_Init+0x70>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	3325      	adds	r3, #37	; 0x25
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f00b f810 	bl	800bc20 <memcpy>
	hRPICom.sendMessage.paquetNumber = 0;
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <RPICom_Init+0x70>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	745a      	strb	r2, [r3, #17]
	hRPICom.errorNumberRx = 0;
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <RPICom_Init+0x70>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	749a      	strb	r2, [r3, #18]

	RPICom_UartActivate(&hRPICom);
 8000c0c:	4803      	ldr	r0, [pc, #12]	; (8000c1c <RPICom_Init+0x70>)
 8000c0e:	f000 f807 	bl	8000c20 <RPICom_UartActivate>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	240000b8 	.word	0x240000b8

08000c20 <RPICom_UartActivate>:

void RPICom_UartActivate(RPICom_HandleTypeDef* hRPI){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(hRPI->huart, hRPI->RxBuffer, UART_RPI_RX_BUFFER_SIZE);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3313      	adds	r3, #19
 8000c30:	2208      	movs	r2, #8
 8000c32:	4619      	mov	r1, r3
 8000c34:	f008 f9da 	bl	8008fec <HAL_UART_Receive_IT>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <checkSum>:

uint8_t checkSum(uint8_t buffer[],uint8_t buffer_size){
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
	uint8_t checkSum = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < buffer_size; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	e009      	b.n	8000c6a <checkSum+0x2a>
		checkSum ^= buffer[i];
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	781a      	ldrb	r2, [r3, #0]
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	4053      	eors	r3, r2
 8000c62:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < buffer_size; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	3301      	adds	r3, #1
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	68ba      	ldr	r2, [r7, #8]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	dbf1      	blt.n	8000c56 <checkSum+0x16>
	}
	return checkSum;
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <RPICom_DecodeBinaryMessage>:

void RPICom_DecodeBinaryMessage(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af04      	add	r7, sp, #16
	hRPICom.errorNumberRx = '0';
 8000c86:	4b30      	ldr	r3, [pc, #192]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000c88:	2230      	movs	r2, #48	; 0x30
 8000c8a:	749a      	strb	r2, [r3, #18]
	// Check Header
	if (HEADER_CheckValue1 != hRPICom.RxBuffer[0] || HEADER_CheckValue2 != hRPICom.RxBuffer[1]){//On envoie une erreur à la raspberry
 8000c8c:	4b2e      	ldr	r3, [pc, #184]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000c8e:	7cdb      	ldrb	r3, [r3, #19]
 8000c90:	2bff      	cmp	r3, #255	; 0xff
 8000c92:	d103      	bne.n	8000c9c <RPICom_DecodeBinaryMessage+0x1c>
 8000c94:	4b2c      	ldr	r3, [pc, #176]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000c96:	7d1b      	ldrb	r3, [r3, #20]
 8000c98:	2bfe      	cmp	r3, #254	; 0xfe
 8000c9a:	d002      	beq.n	8000ca2 <RPICom_DecodeBinaryMessage+0x22>
		hRPICom.errorNumberRx ='1';
 8000c9c:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000c9e:	2231      	movs	r2, #49	; 0x31
 8000ca0:	749a      	strb	r2, [r3, #18]
	}
	// Check Length
	if (UART_RPI_RX_BUFFER_SIZE != hRPICom.RxBuffer[2]){// Il nous manque des informations
 8000ca2:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000ca4:	7d5b      	ldrb	r3, [r3, #21]
 8000ca6:	2b08      	cmp	r3, #8
 8000ca8:	d002      	beq.n	8000cb0 <RPICom_DecodeBinaryMessage+0x30>
		hRPICom.errorNumberRx='2';
 8000caa:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000cac:	2232      	movs	r2, #50	; 0x32
 8000cae:	749a      	strb	r2, [r3, #18]
	}
	hRPICom.receiveMessage.thrust = hRPICom.RxBuffer[3];
 8000cb0:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000cb2:	7d9a      	ldrb	r2, [r3, #22]
 8000cb4:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000cb6:	721a      	strb	r2, [r3, #8]
	hRPICom.receiveMessage.angle = hRPICom.RxBuffer[4];
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000cba:	7ddb      	ldrb	r3, [r3, #23]
 8000cbc:	b25a      	sxtb	r2, r3
 8000cbe:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000cc0:	725a      	strb	r2, [r3, #9]
	hRPICom.receiveMessage.depth = hRPICom.RxBuffer[5];
 8000cc2:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000cc4:	7e1a      	ldrb	r2, [r3, #24]
 8000cc6:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000cc8:	729a      	strb	r2, [r3, #10]
	hRPICom.receiveMessage.paquetNumber = hRPICom.RxBuffer[6];
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000ccc:	7e5a      	ldrb	r2, [r3, #25]
 8000cce:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000cd0:	72da      	strb	r2, [r3, #11]

	//Checksum
	if(checkSum(hRPICom.RxBuffer,UART_RPI_RX_BUFFER_SIZE) !=  hRPICom.RxBuffer[7]){
 8000cd2:	2108      	movs	r1, #8
 8000cd4:	481d      	ldr	r0, [pc, #116]	; (8000d4c <RPICom_DecodeBinaryMessage+0xcc>)
 8000cd6:	f7ff ffb3 	bl	8000c40 <checkSum>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000ce0:	7e9b      	ldrb	r3, [r3, #26]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d002      	beq.n	8000cec <RPICom_DecodeBinaryMessage+0x6c>
		hRPICom.errorNumberRx='3';
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000ce8:	2233      	movs	r2, #51	; 0x33
 8000cea:	749a      	strb	r2, [r3, #18]
	}

	//Response RPI
	uint8_t stringLength = snprintf((char *)hRPICom.DebugBuffer, UART_RPI_DEBUG_BUFFER_SIZE, "[RECEPTION]\nPaquet: %u\r\nThrust: %u\nAngle: %u\r\nStatut: %c\r\n", hRPICom.receiveMessage.paquetNumber,hRPICom.receiveMessage.thrust,hRPICom.receiveMessage.angle,hRPICom.errorNumberRx);
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000cee:	7adb      	ldrb	r3, [r3, #11]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000cf4:	7a1b      	ldrb	r3, [r3, #8]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000cfa:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000d02:	7c9b      	ldrb	r3, [r3, #18]
 8000d04:	9302      	str	r3, [sp, #8]
 8000d06:	9101      	str	r1, [sp, #4]
 8000d08:	9200      	str	r2, [sp, #0]
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <RPICom_DecodeBinaryMessage+0xd0>)
 8000d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d12:	4810      	ldr	r0, [pc, #64]	; (8000d54 <RPICom_DecodeBinaryMessage+0xd4>)
 8000d14:	f00b f806 	bl	800bd24 <sniprintf>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(hRPICom.huartDebug, hRPICom.DebugBuffer, stringLength, 10);
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000d1e:	6858      	ldr	r0, [r3, #4]
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	230a      	movs	r3, #10
 8000d26:	490b      	ldr	r1, [pc, #44]	; (8000d54 <RPICom_DecodeBinaryMessage+0xd4>)
 8000d28:	f008 f83e 	bl	8008da8 <HAL_UART_Transmit>


	// Vous avez maintenant un message complet dans la structure receiveMessage
	// Vous pouvez faire quelque chose avec ces données, par exemple, appeler une fonction de traitement

	if (hRPICom.errorNumberRx =='0'){
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000d2e:	7c9b      	ldrb	r3, [r3, #18]
 8000d30:	2b30      	cmp	r3, #48	; 0x30
 8000d32:	d102      	bne.n	8000d3a <RPICom_DecodeBinaryMessage+0xba>
		Process(&hRPICom.receiveMessage);
 8000d34:	4808      	ldr	r0, [pc, #32]	; (8000d58 <RPICom_DecodeBinaryMessage+0xd8>)
 8000d36:	f7ff fe3f 	bl	80009b8 <Process>
	}
	RPICom_UartActivate(&hRPICom);
 8000d3a:	4803      	ldr	r0, [pc, #12]	; (8000d48 <RPICom_DecodeBinaryMessage+0xc8>)
 8000d3c:	f7ff ff70 	bl	8000c20 <RPICom_UartActivate>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	240000b8 	.word	0x240000b8
 8000d4c:	240000cb 	.word	0x240000cb
 8000d50:	0800d15c 	.word	0x0800d15c
 8000d54:	240000dd 	.word	0x240000dd
 8000d58:	240000c0 	.word	0x240000c0

08000d5c <acquireData>:
void acquireData(void){ //Factoriser surement dans un fichier AcquireData
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	//interroge inertielle
	 hRPICom.sendMessage.posX = randomize(0,100);
 8000d60:	2164      	movs	r1, #100	; 0x64
 8000d62:	2000      	movs	r0, #0
 8000d64:	f000 f87a 	bl	8000e5c <randomize>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <acquireData+0x50>)
 8000d6e:	731a      	strb	r2, [r3, #12]
	 hRPICom.sendMessage.posY = randomize(0,100);
 8000d70:	2164      	movs	r1, #100	; 0x64
 8000d72:	2000      	movs	r0, #0
 8000d74:	f000 f872 	bl	8000e5c <randomize>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <acquireData+0x50>)
 8000d7e:	735a      	strb	r2, [r3, #13]
	 hRPICom.sendMessage.angleDelta = 1;
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <acquireData+0x50>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	739a      	strb	r2, [r3, #14]
	//interroge capteur temp
	 hRPICom.sendMessage.temp = randomize(15,30);
 8000d86:	211e      	movs	r1, #30
 8000d88:	200f      	movs	r0, #15
 8000d8a:	f000 f867 	bl	8000e5c <randomize>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <acquireData+0x50>)
 8000d94:	73da      	strb	r2, [r3, #15]
	//interroge batterie
	 hRPICom.sendMessage.batteryPower = 90;
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <acquireData+0x50>)
 8000d98:	225a      	movs	r2, #90	; 0x5a
 8000d9a:	741a      	strb	r2, [r3, #16]
	 hRPICom.sendMessage.paquetNumber+=1;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <acquireData+0x50>)
 8000d9e:	7c5b      	ldrb	r3, [r3, #17]
 8000da0:	3301      	adds	r3, #1
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	4b01      	ldr	r3, [pc, #4]	; (8000dac <acquireData+0x50>)
 8000da6:	745a      	strb	r2, [r3, #17]

}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	240000b8 	.word	0x240000b8

08000db0 <RPICom_SendBinaryMessage>:
void RPICom_SendBinaryMessage(void){ //Declencher par TIM3_IT ttes les 1s
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b087      	sub	sp, #28
 8000db4:	af04      	add	r7, sp, #16
	acquireData();
 8000db6:	f7ff ffd1 	bl	8000d5c <acquireData>
	hRPICom.TxBuffer[0]=HEADER_CheckValue1;
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <RPICom_SendBinaryMessage+0x98>)
 8000dbc:	22ff      	movs	r2, #255	; 0xff
 8000dbe:	76da      	strb	r2, [r3, #27]
	hRPICom.TxBuffer[1]=HEADER_CheckValue2;
 8000dc0:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <RPICom_SendBinaryMessage+0x98>)
 8000dc2:	22fe      	movs	r2, #254	; 0xfe
 8000dc4:	771a      	strb	r2, [r3, #28]
	hRPICom.TxBuffer[2]=UART_RPI_TX_BUFFER_SIZE;
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <RPICom_SendBinaryMessage+0x98>)
 8000dc8:	220a      	movs	r2, #10
 8000dca:	775a      	strb	r2, [r3, #29]

	memcpy(hRPICom.TxBuffer + 3, &hRPICom.sendMessage, sizeof(hRPICom.sendMessage));
 8000dcc:	4a1f      	ldr	r2, [pc, #124]	; (8000e4c <RPICom_SendBinaryMessage+0x9c>)
 8000dce:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <RPICom_SendBinaryMessage+0x98>)
 8000dd0:	330c      	adds	r3, #12
 8000dd2:	6818      	ldr	r0, [r3, #0]
 8000dd4:	6010      	str	r0, [r2, #0]
 8000dd6:	889b      	ldrh	r3, [r3, #4]
 8000dd8:	8093      	strh	r3, [r2, #4]

	hRPICom.TxBuffer[9]=checkSum(hRPICom.TxBuffer,sizeof(hRPICom.sendMessage)+3);
 8000dda:	2109      	movs	r1, #9
 8000ddc:	481c      	ldr	r0, [pc, #112]	; (8000e50 <RPICom_SendBinaryMessage+0xa0>)
 8000dde:	f7ff ff2f 	bl	8000c40 <checkSum>
 8000de2:	4603      	mov	r3, r0
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <RPICom_SendBinaryMessage+0x98>)
 8000de8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	HAL_UART_Transmit_IT(hRPICom.huart, hRPICom.TxBuffer, UART_RPI_TX_BUFFER_SIZE);
 8000dec:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <RPICom_SendBinaryMessage+0x98>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	220a      	movs	r2, #10
 8000df2:	4917      	ldr	r1, [pc, #92]	; (8000e50 <RPICom_SendBinaryMessage+0xa0>)
 8000df4:	4618      	mov	r0, r3
 8000df6:	f008 f865 	bl	8008ec4 <HAL_UART_Transmit_IT>
	//Response RPI
	uint8_t stringLength = snprintf((char *)hRPICom.DebugBuffer, UART_RPI_DEBUG_BUFFER_SIZE, "[SEND]\nPaquet:\r%u\nBatteryPower:\r%u\nPosition:\r%u-%u-%u°\n",hRPICom.sendMessage.paquetNumber,hRPICom.sendMessage.batteryPower,hRPICom.sendMessage.posX,hRPICom.sendMessage.posY,hRPICom.sendMessage.angleDelta);
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <RPICom_SendBinaryMessage+0x98>)
 8000dfc:	7c5b      	ldrb	r3, [r3, #17]
 8000dfe:	461c      	mov	r4, r3
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <RPICom_SendBinaryMessage+0x98>)
 8000e02:	7c1b      	ldrb	r3, [r3, #16]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <RPICom_SendBinaryMessage+0x98>)
 8000e08:	7b1b      	ldrb	r3, [r3, #12]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <RPICom_SendBinaryMessage+0x98>)
 8000e0e:	7b5b      	ldrb	r3, [r3, #13]
 8000e10:	4618      	mov	r0, r3
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <RPICom_SendBinaryMessage+0x98>)
 8000e14:	7b9b      	ldrb	r3, [r3, #14]
 8000e16:	9303      	str	r3, [sp, #12]
 8000e18:	9002      	str	r0, [sp, #8]
 8000e1a:	9101      	str	r1, [sp, #4]
 8000e1c:	9200      	str	r2, [sp, #0]
 8000e1e:	4623      	mov	r3, r4
 8000e20:	4a0c      	ldr	r2, [pc, #48]	; (8000e54 <RPICom_SendBinaryMessage+0xa4>)
 8000e22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e26:	480c      	ldr	r0, [pc, #48]	; (8000e58 <RPICom_SendBinaryMessage+0xa8>)
 8000e28:	f00a ff7c 	bl	800bd24 <sniprintf>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(hRPICom.huartDebug, hRPICom.DebugBuffer, stringLength, 10);
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <RPICom_SendBinaryMessage+0x98>)
 8000e32:	6858      	ldr	r0, [r3, #4]
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	230a      	movs	r3, #10
 8000e3a:	4907      	ldr	r1, [pc, #28]	; (8000e58 <RPICom_SendBinaryMessage+0xa8>)
 8000e3c:	f007 ffb4 	bl	8008da8 <HAL_UART_Transmit>
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd90      	pop	{r4, r7, pc}
 8000e48:	240000b8 	.word	0x240000b8
 8000e4c:	240000d6 	.word	0x240000d6
 8000e50:	240000d3 	.word	0x240000d3
 8000e54:	0800d198 	.word	0x0800d198
 8000e58:	240000dd 	.word	0x240000dd

08000e5c <randomize>:

int randomize(int min, int max) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
	srand(time(NULL));
 8000e66:	2000      	movs	r0, #0
 8000e68:	f00a ff90 	bl	800bd8c <time>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	4613      	mov	r3, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f00a feea 	bl	800bc4c <srand>
    return min + rand() % (max - min + 1);
 8000e78:	f00a ff16 	bl	800bca8 <rand>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	6839      	ldr	r1, [r7, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	1acb      	subs	r3, r1, r3
 8000e84:	3301      	adds	r3, #1
 8000e86:	fb92 f1f3 	sdiv	r1, r2, r3
 8000e8a:	fb01 f303 	mul.w	r3, r1, r3
 8000e8e:	1ad2      	subs	r2, r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4413      	add	r3, r2
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <MX_DMA_Init+0x3c>)
 8000ea4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ea8:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <MX_DMA_Init+0x3c>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_DMA_Init+0x3c>)
 8000eb4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	200c      	movs	r0, #12
 8000ec6:	f001 fa18 	bl	80022fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000eca:	200c      	movs	r0, #12
 8000ecc:	f001 fa2f 	bl	800232e <HAL_NVIC_EnableIRQ>

}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	58024400 	.word	0x58024400

08000edc <update_crc>:

#include "dynamixel_protocol2.h"

uint16_t update_crc(uint16_t crc_accum, unsigned char *data_blk_ptr, uint16_t data_blk_size)

{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000ee8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000eec:	6019      	str	r1, [r3, #0]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000ef4:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000ef8:	4602      	mov	r2, r0
 8000efa:	801a      	strh	r2, [r3, #0]
 8000efc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000f00:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000f04:	460a      	mov	r2, r1
 8000f06:	801a      	strh	r2, [r3, #0]

	uint16_t i, j;

	uint16_t crc_table[256] = {
 8000f08:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000f0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f10:	4a28      	ldr	r2, [pc, #160]	; (8000fb4 <update_crc+0xd8>)
 8000f12:	4618      	mov	r0, r3
 8000f14:	4611      	mov	r1, r2
 8000f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	f00a fe80 	bl	800bc20 <memcpy>

	};



	for(j = 0; j < data_blk_size; j++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000f26:	e031      	b.n	8000f8c <update_crc+0xb0>

	{

		i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000f28:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000f2c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	0a1b      	lsrs	r3, r3, #8
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000f3a:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8000f3e:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8000f42:	6809      	ldr	r1, [r1, #0]
 8000f44:	440b      	add	r3, r1
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	4053      	eors	r3, r2
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c

		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000f54:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000f58:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8000f66:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000f6a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f6e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	4053      	eors	r3, r2
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000f7c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000f80:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 8000f82:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000f86:	3301      	adds	r3, #1
 8000f88:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000f8c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000f90:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000f94:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d3c4      	bcc.n	8000f28 <update_crc+0x4c>

	}



	return crc_accum;
 8000f9e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000fa2:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000fa6:	881b      	ldrh	r3, [r3, #0]

 8000fa8:	4618      	mov	r0, r3
 8000faa:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	0800d1d4 	.word	0x0800d1d4

08000fb8 <map>:
// All rights reserved.
//***********************************************

#include "../Inc/dynamixel_xl320.h"

uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max){
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	603b      	str	r3, [r7, #0]
	return ((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min);
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	69b9      	ldr	r1, [r7, #24]
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	1a8a      	subs	r2, r1, r2
 8000fd2:	fb03 f202 	mul.w	r2, r3, r2
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	1ac9      	subs	r1, r1, r3
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	440b      	add	r3, r1
 8000fe0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <XL320_set_led_ON>:
	blue	4
	yellow	3
	cyan	6
	purple	5
	white	7*/
void XL320_set_led_ON(UART_HandleTypeDef *m_huart, uint8_t color){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
	uint8_t TxPacket[13] = {DXL2_0_PACKET_IDX_HEADER_1,
 8000ffc:	23ff      	movs	r3, #255	; 0xff
 8000ffe:	723b      	strb	r3, [r7, #8]
 8001000:	23ff      	movs	r3, #255	; 0xff
 8001002:	727b      	strb	r3, [r7, #9]
 8001004:	23fd      	movs	r3, #253	; 0xfd
 8001006:	72bb      	strb	r3, [r7, #10]
 8001008:	2300      	movs	r3, #0
 800100a:	72fb      	strb	r3, [r7, #11]
 800100c:	23fe      	movs	r3, #254	; 0xfe
 800100e:	733b      	strb	r3, [r7, #12]
 8001010:	2306      	movs	r3, #6
 8001012:	737b      	strb	r3, [r7, #13]
 8001014:	2300      	movs	r3, #0
 8001016:	73bb      	strb	r3, [r7, #14]
 8001018:	2303      	movs	r3, #3
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	2319      	movs	r3, #25
 800101e:	743b      	strb	r3, [r7, #16]
 8001020:	2300      	movs	r3, #0
 8001022:	747b      	strb	r3, [r7, #17]
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	74bb      	strb	r3, [r7, #18]
 8001028:	2300      	movs	r3, #0
 800102a:	74fb      	strb	r3, [r7, #19]
 800102c:	2300      	movs	r3, #0
 800102e:	753b      	strb	r3, [r7, #20]
							DXL_LOBYTE(XL_LED),
							DXL_HIBYTE(XL_LED),
							color,
							0,
							0};
	uint16_t CRC_2 = update_crc(0, TxPacket, 11);
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	220b      	movs	r2, #11
 8001036:	4619      	mov	r1, r3
 8001038:	2000      	movs	r0, #0
 800103a:	f7ff ff4f 	bl	8000edc <update_crc>
 800103e:	4603      	mov	r3, r0
 8001040:	82fb      	strh	r3, [r7, #22]
	TxPacket[11] = DXL_LOBYTE(CRC_2);
 8001042:	8afb      	ldrh	r3, [r7, #22]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	74fb      	strb	r3, [r7, #19]
	TxPacket[12] = DXL_HIBYTE(CRC_2);
 8001048:	8afb      	ldrh	r3, [r7, #22]
 800104a:	0a1b      	lsrs	r3, r3, #8
 800104c:	b29b      	uxth	r3, r3
 800104e:	b2db      	uxtb	r3, r3
 8001050:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(m_huart, (uint8_t *) &TxPacket, 13, HAL_MAX_DELAY);
 8001052:	f107 0108 	add.w	r1, r7, #8
 8001056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800105a:	220d      	movs	r2, #13
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f007 fea3 	bl	8008da8 <HAL_UART_Transmit>
}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <XL320_set_pos>:
	TxPacket[12] = DXL_HIBYTE(CRC_2);

	HAL_UART_Transmit(m_huart, (uint8_t *) &TxPacket, 13, HAL_MAX_DELAY);
}

void XL320_set_pos(UART_HandleTypeDef *m_huart, uint16_t pos){
 800106a:	b580      	push	{r7, lr}
 800106c:	b08a      	sub	sp, #40	; 0x28
 800106e:	af02      	add	r7, sp, #8
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	460b      	mov	r3, r1
 8001074:	807b      	strh	r3, [r7, #2]
	const uint16_t POS_MAX = 120; //CHANGE THIS CONSTANT TO AVOID OVERCURRENT IN THE SERVO
 8001076:	2378      	movs	r3, #120	; 0x78
 8001078:	83fb      	strh	r3, [r7, #30]
	if(pos>POS_MAX) pos = POS_MAX;
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	8bfb      	ldrh	r3, [r7, #30]
 800107e:	429a      	cmp	r2, r3
 8001080:	d901      	bls.n	8001086 <XL320_set_pos+0x1c>
 8001082:	8bfb      	ldrh	r3, [r7, #30]
 8001084:	807b      	strh	r3, [r7, #2]
	uint16_t pos_mapped = map(pos, 0, 300, 0, 1023);
 8001086:	8878      	ldrh	r0, [r7, #2]
 8001088:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2300      	movs	r3, #0
 8001090:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001094:	2100      	movs	r1, #0
 8001096:	f7ff ff8f 	bl	8000fb8 <map>
 800109a:	4603      	mov	r3, r0
 800109c:	83bb      	strh	r3, [r7, #28]
	uint8_t TxPacket[14] = {DXL2_0_PACKET_IDX_HEADER_1,
 800109e:	23ff      	movs	r3, #255	; 0xff
 80010a0:	733b      	strb	r3, [r7, #12]
 80010a2:	23ff      	movs	r3, #255	; 0xff
 80010a4:	737b      	strb	r3, [r7, #13]
 80010a6:	23fd      	movs	r3, #253	; 0xfd
 80010a8:	73bb      	strb	r3, [r7, #14]
 80010aa:	2300      	movs	r3, #0
 80010ac:	73fb      	strb	r3, [r7, #15]
 80010ae:	23fe      	movs	r3, #254	; 0xfe
 80010b0:	743b      	strb	r3, [r7, #16]
 80010b2:	2307      	movs	r3, #7
 80010b4:	747b      	strb	r3, [r7, #17]
 80010b6:	2300      	movs	r3, #0
 80010b8:	74bb      	strb	r3, [r7, #18]
 80010ba:	2303      	movs	r3, #3
 80010bc:	74fb      	strb	r3, [r7, #19]
 80010be:	231e      	movs	r3, #30
 80010c0:	753b      	strb	r3, [r7, #20]
 80010c2:	2300      	movs	r3, #0
 80010c4:	757b      	strb	r3, [r7, #21]
							 0x07,
							 0x00,
							 DXL_INST_WRITE,
							 DXL_LOBYTE(XL_GOAL_POSITION_L),
							 DXL_HIBYTE(XL_GOAL_POSITION_L),
							 DXL_LOBYTE(pos_mapped),
 80010c6:	8bbb      	ldrh	r3, [r7, #28]
 80010c8:	b2db      	uxtb	r3, r3
	uint8_t TxPacket[14] = {DXL2_0_PACKET_IDX_HEADER_1,
 80010ca:	75bb      	strb	r3, [r7, #22]
							 DXL_HIBYTE(pos_mapped),
 80010cc:	8bbb      	ldrh	r3, [r7, #28]
 80010ce:	0a1b      	lsrs	r3, r3, #8
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	b2db      	uxtb	r3, r3
	uint8_t TxPacket[14] = {DXL2_0_PACKET_IDX_HEADER_1,
 80010d4:	75fb      	strb	r3, [r7, #23]
 80010d6:	2300      	movs	r3, #0
 80010d8:	763b      	strb	r3, [r7, #24]
 80010da:	2300      	movs	r3, #0
 80010dc:	767b      	strb	r3, [r7, #25]
							 0,
							 0};
	uint16_t CRC_2 = update_crc(0, TxPacket, 12);
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	220c      	movs	r2, #12
 80010e4:	4619      	mov	r1, r3
 80010e6:	2000      	movs	r0, #0
 80010e8:	f7ff fef8 	bl	8000edc <update_crc>
 80010ec:	4603      	mov	r3, r0
 80010ee:	837b      	strh	r3, [r7, #26]
	TxPacket[12] = DXL_LOBYTE(CRC_2);
 80010f0:	8b7b      	ldrh	r3, [r7, #26]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	763b      	strb	r3, [r7, #24]
	TxPacket[13] = DXL_HIBYTE(CRC_2);
 80010f6:	8b7b      	ldrh	r3, [r7, #26]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(m_huart, (uint8_t *) &TxPacket, 14, HAL_MAX_DELAY);
 8001100:	f107 010c 	add.w	r1, r7, #12
 8001104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001108:	220e      	movs	r2, #14
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f007 fe4c 	bl	8008da8 <HAL_UART_Transmit>
}
 8001110:	bf00      	nop
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08e      	sub	sp, #56	; 0x38
 800111c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	4b80      	ldr	r3, [pc, #512]	; (8001330 <MX_GPIO_Init+0x218>)
 8001130:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001134:	4a7e      	ldr	r2, [pc, #504]	; (8001330 <MX_GPIO_Init+0x218>)
 8001136:	f043 0304 	orr.w	r3, r3, #4
 800113a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800113e:	4b7c      	ldr	r3, [pc, #496]	; (8001330 <MX_GPIO_Init+0x218>)
 8001140:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	623b      	str	r3, [r7, #32]
 800114a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800114c:	4b78      	ldr	r3, [pc, #480]	; (8001330 <MX_GPIO_Init+0x218>)
 800114e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001152:	4a77      	ldr	r2, [pc, #476]	; (8001330 <MX_GPIO_Init+0x218>)
 8001154:	f043 0320 	orr.w	r3, r3, #32
 8001158:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800115c:	4b74      	ldr	r3, [pc, #464]	; (8001330 <MX_GPIO_Init+0x218>)
 800115e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001162:	f003 0320 	and.w	r3, r3, #32
 8001166:	61fb      	str	r3, [r7, #28]
 8001168:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116a:	4b71      	ldr	r3, [pc, #452]	; (8001330 <MX_GPIO_Init+0x218>)
 800116c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001170:	4a6f      	ldr	r2, [pc, #444]	; (8001330 <MX_GPIO_Init+0x218>)
 8001172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001176:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800117a:	4b6d      	ldr	r3, [pc, #436]	; (8001330 <MX_GPIO_Init+0x218>)
 800117c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4b69      	ldr	r3, [pc, #420]	; (8001330 <MX_GPIO_Init+0x218>)
 800118a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800118e:	4a68      	ldr	r2, [pc, #416]	; (8001330 <MX_GPIO_Init+0x218>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001198:	4b65      	ldr	r3, [pc, #404]	; (8001330 <MX_GPIO_Init+0x218>)
 800119a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	4b62      	ldr	r3, [pc, #392]	; (8001330 <MX_GPIO_Init+0x218>)
 80011a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011ac:	4a60      	ldr	r2, [pc, #384]	; (8001330 <MX_GPIO_Init+0x218>)
 80011ae:	f043 0302 	orr.w	r3, r3, #2
 80011b2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011b6:	4b5e      	ldr	r3, [pc, #376]	; (8001330 <MX_GPIO_Init+0x218>)
 80011b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c4:	4b5a      	ldr	r3, [pc, #360]	; (8001330 <MX_GPIO_Init+0x218>)
 80011c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011ca:	4a59      	ldr	r2, [pc, #356]	; (8001330 <MX_GPIO_Init+0x218>)
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011d4:	4b56      	ldr	r3, [pc, #344]	; (8001330 <MX_GPIO_Init+0x218>)
 80011d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011e2:	4b53      	ldr	r3, [pc, #332]	; (8001330 <MX_GPIO_Init+0x218>)
 80011e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011e8:	4a51      	ldr	r2, [pc, #324]	; (8001330 <MX_GPIO_Init+0x218>)
 80011ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011f2:	4b4f      	ldr	r3, [pc, #316]	; (8001330 <MX_GPIO_Init+0x218>)
 80011f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001200:	4b4b      	ldr	r3, [pc, #300]	; (8001330 <MX_GPIO_Init+0x218>)
 8001202:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001206:	4a4a      	ldr	r2, [pc, #296]	; (8001330 <MX_GPIO_Init+0x218>)
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001210:	4b47      	ldr	r3, [pc, #284]	; (8001330 <MX_GPIO_Init+0x218>)
 8001212:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001224:	4843      	ldr	r0, [pc, #268]	; (8001334 <MX_GPIO_Init+0x21c>)
 8001226:	f003 fcdf 	bl	8004be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	f244 0101 	movw	r1, #16385	; 0x4001
 8001230:	4841      	ldr	r0, [pc, #260]	; (8001338 <MX_GPIO_Init+0x220>)
 8001232:	f003 fcd9 	bl	8004be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2102      	movs	r1, #2
 800123a:	4840      	ldr	r0, [pc, #256]	; (800133c <MX_GPIO_Init+0x224>)
 800123c:	f003 fcd4 	bl	8004be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001246:	2300      	movs	r3, #0
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001252:	4619      	mov	r1, r3
 8001254:	483a      	ldr	r0, [pc, #232]	; (8001340 <MX_GPIO_Init+0x228>)
 8001256:	f003 fb17 	bl	8004888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800125a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	2301      	movs	r3, #1
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001270:	4619      	mov	r1, r3
 8001272:	4830      	ldr	r0, [pc, #192]	; (8001334 <MX_GPIO_Init+0x21c>)
 8001274:	f003 fb08 	bl	8004888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001278:	f244 0301 	movw	r3, #16385	; 0x4001
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128e:	4619      	mov	r1, r3
 8001290:	4829      	ldr	r0, [pc, #164]	; (8001338 <MX_GPIO_Init+0x220>)
 8001292:	f003 faf9 	bl	8004888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800129a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	4619      	mov	r1, r3
 80012aa:	4826      	ldr	r0, [pc, #152]	; (8001344 <MX_GPIO_Init+0x22c>)
 80012ac:	f003 faec 	bl	8004888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80012b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c2:	4619      	mov	r1, r3
 80012c4:	4820      	ldr	r0, [pc, #128]	; (8001348 <MX_GPIO_Init+0x230>)
 80012c6:	f003 fadf 	bl	8004888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80012ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80012dc:	230a      	movs	r3, #10
 80012de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e4:	4619      	mov	r1, r3
 80012e6:	4818      	ldr	r0, [pc, #96]	; (8001348 <MX_GPIO_Init+0x230>)
 80012e8:	f003 face 	bl	8004888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80012ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001302:	4619      	mov	r1, r3
 8001304:	4810      	ldr	r0, [pc, #64]	; (8001348 <MX_GPIO_Init+0x230>)
 8001306:	f003 fabf 	bl	8004888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800130a:	2302      	movs	r3, #2
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131e:	4619      	mov	r1, r3
 8001320:	4806      	ldr	r0, [pc, #24]	; (800133c <MX_GPIO_Init+0x224>)
 8001322:	f003 fab1 	bl	8004888 <HAL_GPIO_Init>

}
 8001326:	bf00      	nop
 8001328:	3738      	adds	r7, #56	; 0x38
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	58024400 	.word	0x58024400
 8001334:	58021400 	.word	0x58021400
 8001338:	58020400 	.word	0x58020400
 800133c:	58021000 	.word	0x58021000
 8001340:	58020800 	.word	0x58020800
 8001344:	58021800 	.word	0x58021800
 8001348:	58020000 	.word	0x58020000

0800134c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001352:	f000 fe41 	bl	8001fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001356:	f000 f83d 	bl	80013d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135a:	f7ff fedd 	bl	8001118 <MX_GPIO_Init>
  MX_DMA_Init();
 800135e:	f7ff fd9d 	bl	8000e9c <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 8001362:	f000 fe07 	bl	8001f74 <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 8001366:	f000 fb9b 	bl	8001aa0 <MX_UART4_Init>
  MX_TIM2_Init();
 800136a:	f000 fa51 	bl	8001810 <MX_TIM2_Init>
  MX_TIM3_Init();
 800136e:	f000 fad1 	bl	8001914 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001372:	f000 fc37 	bl	8001be4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001376:	f000 fbe7 	bl	8001b48 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim3);
 800137a:	4810      	ldr	r0, [pc, #64]	; (80013bc <main+0x70>)
 800137c:	f006 fa9e 	bl	80078bc <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit(&huart3, (uint8_t *)"\nStarting...\r\n", 14, 10);
 8001380:	230a      	movs	r3, #10
 8001382:	220e      	movs	r2, #14
 8001384:	490e      	ldr	r1, [pc, #56]	; (80013c0 <main+0x74>)
 8001386:	480f      	ldr	r0, [pc, #60]	; (80013c4 <main+0x78>)
 8001388:	f007 fd0e 	bl	8008da8 <HAL_UART_Transmit>
	Process_Init();
 800138c:	f7ff fb0c 	bl	80009a8 <Process_Init>
	RPICom_Init(&huart4, &huart3);
 8001390:	490c      	ldr	r1, [pc, #48]	; (80013c4 <main+0x78>)
 8001392:	480d      	ldr	r0, [pc, #52]	; (80013c8 <main+0x7c>)
 8001394:	f7ff fc0a 	bl	8000bac <RPICom_Init>
	HAL_UART_Transmit(&huart3, (uint8_t *)"Init Done\r\n", 11, 10);
 8001398:	230a      	movs	r3, #10
 800139a:	220b      	movs	r2, #11
 800139c:	490b      	ldr	r1, [pc, #44]	; (80013cc <main+0x80>)
 800139e:	4809      	ldr	r0, [pc, #36]	; (80013c4 <main+0x78>)
 80013a0:	f007 fd02 	bl	8008da8 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t pos = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	71fb      	strb	r3, [r7, #7]
	while (1)
	{
		XL320_set_pos(&huart2, pos);
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	4619      	mov	r1, r3
 80013ae:	4808      	ldr	r0, [pc, #32]	; (80013d0 <main+0x84>)
 80013b0:	f7ff fe5b 	bl	800106a <XL320_set_pos>
		pos=pos+100;
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	3364      	adds	r3, #100	; 0x64
 80013b8:	71fb      	strb	r3, [r7, #7]
		XL320_set_pos(&huart2, pos);
 80013ba:	e7f5      	b.n	80013a8 <main+0x5c>
 80013bc:	24000530 	.word	0x24000530
 80013c0:	0800d3d4 	.word	0x0800d3d4
 80013c4:	240006a4 	.word	0x240006a4
 80013c8:	2400057c 	.word	0x2400057c
 80013cc:	0800d3e4 	.word	0x0800d3e4
 80013d0:	24000610 	.word	0x24000610

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b09c      	sub	sp, #112	; 0x70
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	224c      	movs	r2, #76	; 0x4c
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f00a fc2a 	bl	800bc3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2220      	movs	r2, #32
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f00a fc24 	bl	800bc3c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80013f4:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <SystemClock_Config+0xe4>)
 80013f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80013fe:	2004      	movs	r0, #4
 8001400:	f003 fc0c 	bl	8004c1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001404:	2300      	movs	r3, #0
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	4b2c      	ldr	r3, [pc, #176]	; (80014bc <SystemClock_Config+0xe8>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a2b      	ldr	r2, [pc, #172]	; (80014bc <SystemClock_Config+0xe8>)
 800140e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b29      	ldr	r3, [pc, #164]	; (80014bc <SystemClock_Config+0xe8>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001420:	bf00      	nop
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <SystemClock_Config+0xe8>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800142a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800142e:	d1f8      	bne.n	8001422 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001430:	2321      	movs	r3, #33	; 0x21
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001434:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001438:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800143a:	2301      	movs	r3, #1
 800143c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143e:	2302      	movs	r3, #2
 8001440:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001442:	2302      	movs	r3, #2
 8001444:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001446:	2301      	movs	r3, #1
 8001448:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800144a:	2318      	movs	r3, #24
 800144c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800144e:	2302      	movs	r3, #2
 8001450:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001452:	2304      	movs	r3, #4
 8001454:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001456:	2302      	movs	r3, #2
 8001458:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800145a:	230c      	movs	r3, #12
 800145c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800145e:	2300      	movs	r3, #0
 8001460:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146a:	4618      	mov	r0, r3
 800146c:	f003 fc30 	bl	8004cd0 <HAL_RCC_OscConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001476:	f000 f823 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147a:	233f      	movs	r3, #63	; 0x3f
 800147c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147e:	2303      	movs	r3, #3
 8001480:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	2102      	movs	r1, #2
 800149e:	4618      	mov	r0, r3
 80014a0:	f004 f848 	bl	8005534 <HAL_RCC_ClockConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <SystemClock_Config+0xda>
  {
    Error_Handler();
 80014aa:	f000 f809 	bl	80014c0 <Error_Handler>
  }
}
 80014ae:	bf00      	nop
 80014b0:	3770      	adds	r7, #112	; 0x70
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	58024400 	.word	0x58024400
 80014bc:	58024800 	.word	0x58024800

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014c8:	e7fe      	b.n	80014c8 <Error_Handler+0x8>
	...

080014cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_MspInit+0x30>)
 80014d4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80014d8:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_MspInit+0x30>)
 80014da:	f043 0302 	orr.w	r3, r3, #2
 80014de:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_MspInit+0x30>)
 80014e4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	58024400 	.word	0x58024400

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <NMI_Handler+0x4>

08001506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <HardFault_Handler+0x4>

0800150c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <MemManage_Handler+0x4>

08001512 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <BusFault_Handler+0x4>

08001518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <UsageFault_Handler+0x4>

0800151e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154c:	f000 fdb6 	bl	80020bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}

08001554 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <DMA1_Stream1_IRQHandler+0x10>)
 800155a:	f001 fff7 	bl	800354c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	24000738 	.word	0x24000738

08001568 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	RPICom_SendBinaryMessage();
 800156c:	f7ff fc20 	bl	8000db0 <RPICom_SendBinaryMessage>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <TIM3_IRQHandler+0x14>)
 8001572:	f006 fb8b 	bl	8007c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	24000530 	.word	0x24000530

08001580 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <UART4_IRQHandler+0x10>)
 8001586:	f007 fd7d 	bl	8009084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  /* USER CODE END UART4_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2400057c 	.word	0x2400057c

08001594 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return 1;
 8001598:	2301      	movs	r3, #1
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <_kill>:

int _kill(int pid, int sig)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ae:	f00a fb0d 	bl	800bbcc <__errno>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2216      	movs	r2, #22
 80015b6:	601a      	str	r2, [r3, #0]
  return -1;
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <_exit>:

void _exit (int status)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ffe7 	bl	80015a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015d6:	e7fe      	b.n	80015d6 <_exit+0x12>

080015d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	e00a      	b.n	8001600 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ea:	f3af 8000 	nop.w
 80015ee:	4601      	mov	r1, r0
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	60ba      	str	r2, [r7, #8]
 80015f6:	b2ca      	uxtb	r2, r1
 80015f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	3301      	adds	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	429a      	cmp	r2, r3
 8001606:	dbf0      	blt.n	80015ea <_read+0x12>
  }

  return len;
 8001608:	687b      	ldr	r3, [r7, #4]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	e009      	b.n	8001638 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	60ba      	str	r2, [r7, #8]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	dbf1      	blt.n	8001624 <_write+0x12>
  }
  return len;
 8001640:	687b      	ldr	r3, [r7, #4]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_close>:

int _close(int file)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001672:	605a      	str	r2, [r3, #4]
  return 0;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <_isatty>:

int _isatty(int file)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016bc:	4a14      	ldr	r2, [pc, #80]	; (8001710 <_sbrk+0x5c>)
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <_sbrk+0x60>)
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <_sbrk+0x64>)
 80016d2:	4a12      	ldr	r2, [pc, #72]	; (800171c <_sbrk+0x68>)
 80016d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <_sbrk+0x64>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d207      	bcs.n	80016f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e4:	f00a fa72 	bl	800bbcc <__errno>
 80016e8:	4603      	mov	r3, r0
 80016ea:	220c      	movs	r2, #12
 80016ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016f2:	e009      	b.n	8001708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	4a05      	ldr	r2, [pc, #20]	; (8001718 <_sbrk+0x64>)
 8001704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	24100000 	.word	0x24100000
 8001714:	00000400 	.word	0x00000400
 8001718:	240004e0 	.word	0x240004e0
 800171c:	240007c8 	.word	0x240007c8

08001720 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001724:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <SystemInit+0xd0>)
 8001726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800172a:	4a31      	ldr	r2, [pc, #196]	; (80017f0 <SystemInit+0xd0>)
 800172c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001730:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001734:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <SystemInit+0xd4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 030f 	and.w	r3, r3, #15
 800173c:	2b02      	cmp	r3, #2
 800173e:	d807      	bhi.n	8001750 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001740:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <SystemInit+0xd4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f023 030f 	bic.w	r3, r3, #15
 8001748:	4a2a      	ldr	r2, [pc, #168]	; (80017f4 <SystemInit+0xd4>)
 800174a:	f043 0303 	orr.w	r3, r3, #3
 800174e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001750:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <SystemInit+0xd8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <SystemInit+0xd8>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800175c:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <SystemInit+0xd8>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001762:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <SystemInit+0xd8>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4924      	ldr	r1, [pc, #144]	; (80017f8 <SystemInit+0xd8>)
 8001768:	4b24      	ldr	r3, [pc, #144]	; (80017fc <SystemInit+0xdc>)
 800176a:	4013      	ands	r3, r2
 800176c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <SystemInit+0xd4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b00      	cmp	r3, #0
 8001778:	d007      	beq.n	800178a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <SystemInit+0xd4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 030f 	bic.w	r3, r3, #15
 8001782:	4a1c      	ldr	r2, [pc, #112]	; (80017f4 <SystemInit+0xd4>)
 8001784:	f043 0303 	orr.w	r3, r3, #3
 8001788:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <SystemInit+0xd8>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <SystemInit+0xd8>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <SystemInit+0xd8>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <SystemInit+0xd8>)
 800179e:	4a18      	ldr	r2, [pc, #96]	; (8001800 <SystemInit+0xe0>)
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <SystemInit+0xd8>)
 80017a4:	4a17      	ldr	r2, [pc, #92]	; (8001804 <SystemInit+0xe4>)
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <SystemInit+0xd8>)
 80017aa:	4a17      	ldr	r2, [pc, #92]	; (8001808 <SystemInit+0xe8>)
 80017ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <SystemInit+0xd8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <SystemInit+0xd8>)
 80017b6:	4a14      	ldr	r2, [pc, #80]	; (8001808 <SystemInit+0xe8>)
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <SystemInit+0xd8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <SystemInit+0xd8>)
 80017c2:	4a11      	ldr	r2, [pc, #68]	; (8001808 <SystemInit+0xe8>)
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <SystemInit+0xd8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <SystemInit+0xd8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <SystemInit+0xd8>)
 80017d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <SystemInit+0xd8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <SystemInit+0xec>)
 80017e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80017e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00
 80017f4:	52002000 	.word	0x52002000
 80017f8:	58024400 	.word	0x58024400
 80017fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001800:	02020200 	.word	0x02020200
 8001804:	01ff0000 	.word	0x01ff0000
 8001808:	01010280 	.word	0x01010280
 800180c:	52004000 	.word	0x52004000

08001810 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08e      	sub	sp, #56	; 0x38
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001830:	463b      	mov	r3, r7
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]
 800183e:	615a      	str	r2, [r3, #20]
 8001840:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001842:	4b33      	ldr	r3, [pc, #204]	; (8001910 <MX_TIM2_Init+0x100>)
 8001844:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001848:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1919;
 800184a:	4b31      	ldr	r3, [pc, #196]	; (8001910 <MX_TIM2_Init+0x100>)
 800184c:	f240 727f 	movw	r2, #1919	; 0x77f
 8001850:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001852:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <MX_TIM2_Init+0x100>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001858:	4b2d      	ldr	r3, [pc, #180]	; (8001910 <MX_TIM2_Init+0x100>)
 800185a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800185e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001860:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <MX_TIM2_Init+0x100>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001866:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <MX_TIM2_Init+0x100>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800186c:	4828      	ldr	r0, [pc, #160]	; (8001910 <MX_TIM2_Init+0x100>)
 800186e:	f005 ffcd 	bl	800780c <HAL_TIM_Base_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001878:	f7ff fe22 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001882:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001886:	4619      	mov	r1, r3
 8001888:	4821      	ldr	r0, [pc, #132]	; (8001910 <MX_TIM2_Init+0x100>)
 800188a:	f006 fc33 	bl	80080f4 <HAL_TIM_ConfigClockSource>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001894:	f7ff fe14 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001898:	481d      	ldr	r0, [pc, #116]	; (8001910 <MX_TIM2_Init+0x100>)
 800189a:	f006 f887 	bl	80079ac <HAL_TIM_PWM_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80018a4:	f7ff fe0c 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	4619      	mov	r1, r3
 80018b6:	4816      	ldr	r0, [pc, #88]	; (8001910 <MX_TIM2_Init+0x100>)
 80018b8:	f007 f97a 	bl	8008bb0 <HAL_TIMEx_MasterConfigSynchronization>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80018c2:	f7ff fdfd 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c6:	2360      	movs	r3, #96	; 0x60
 80018c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d6:	463b      	mov	r3, r7
 80018d8:	2200      	movs	r2, #0
 80018da:	4619      	mov	r1, r3
 80018dc:	480c      	ldr	r0, [pc, #48]	; (8001910 <MX_TIM2_Init+0x100>)
 80018de:	f006 faf5 	bl	8007ecc <HAL_TIM_PWM_ConfigChannel>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80018e8:	f7ff fdea 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ec:	463b      	mov	r3, r7
 80018ee:	2204      	movs	r2, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4807      	ldr	r0, [pc, #28]	; (8001910 <MX_TIM2_Init+0x100>)
 80018f4:	f006 faea 	bl	8007ecc <HAL_TIM_PWM_ConfigChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80018fe:	f7ff fddf 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001902:	4803      	ldr	r0, [pc, #12]	; (8001910 <MX_TIM2_Init+0x100>)
 8001904:	f000 f894 	bl	8001a30 <HAL_TIM_MspPostInit>

}
 8001908:	bf00      	nop
 800190a:	3738      	adds	r7, #56	; 0x38
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	240004e4 	.word	0x240004e4

08001914 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <MX_TIM3_Init+0x98>)
 8001934:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <MX_TIM3_Init+0x9c>)
 8001936:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9599;
 8001938:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <MX_TIM3_Init+0x98>)
 800193a:	f242 527f 	movw	r2, #9599	; 0x257f
 800193e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <MX_TIM3_Init+0x98>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <MX_TIM3_Init+0x98>)
 8001948:	f242 720f 	movw	r2, #9999	; 0x270f
 800194c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <MX_TIM3_Init+0x98>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001954:	4b15      	ldr	r3, [pc, #84]	; (80019ac <MX_TIM3_Init+0x98>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800195a:	4814      	ldr	r0, [pc, #80]	; (80019ac <MX_TIM3_Init+0x98>)
 800195c:	f005 ff56 	bl	800780c <HAL_TIM_Base_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001966:	f7ff fdab 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800196a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4619      	mov	r1, r3
 8001976:	480d      	ldr	r0, [pc, #52]	; (80019ac <MX_TIM3_Init+0x98>)
 8001978:	f006 fbbc 	bl	80080f4 <HAL_TIM_ConfigClockSource>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001982:	f7ff fd9d 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	4619      	mov	r1, r3
 8001992:	4806      	ldr	r0, [pc, #24]	; (80019ac <MX_TIM3_Init+0x98>)
 8001994:	f007 f90c 	bl	8008bb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800199e:	f7ff fd8f 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	24000530 	.word	0x24000530
 80019b0:	40000400 	.word	0x40000400

080019b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c4:	d10f      	bne.n	80019e6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <HAL_TIM_Base_MspInit+0x74>)
 80019c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80019cc:	4a16      	ldr	r2, [pc, #88]	; (8001a28 <HAL_TIM_Base_MspInit+0x74>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <HAL_TIM_Base_MspInit+0x74>)
 80019d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019e4:	e01b      	b.n	8001a1e <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM3)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a10      	ldr	r2, [pc, #64]	; (8001a2c <HAL_TIM_Base_MspInit+0x78>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d116      	bne.n	8001a1e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_TIM_Base_MspInit+0x74>)
 80019f2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80019f6:	4a0c      	ldr	r2, [pc, #48]	; (8001a28 <HAL_TIM_Base_MspInit+0x74>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_TIM_Base_MspInit+0x74>)
 8001a02:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	201d      	movs	r0, #29
 8001a14:	f000 fc71 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a18:	201d      	movs	r0, #29
 8001a1a:	f000 fc88 	bl	800232e <HAL_NVIC_EnableIRQ>
}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	58024400 	.word	0x58024400
 8001a2c:	40000400 	.word	0x40000400

08001a30 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a50:	d11e      	bne.n	8001a90 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <HAL_TIM_MspPostInit+0x68>)
 8001a54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a58:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <HAL_TIM_MspPostInit+0x68>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <HAL_TIM_MspPostInit+0x68>)
 8001a64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8001a70:	2322      	movs	r3, #34	; 0x22
 8001a72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a80:	2301      	movs	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4804      	ldr	r0, [pc, #16]	; (8001a9c <HAL_TIM_MspPostInit+0x6c>)
 8001a8c:	f002 fefc 	bl	8004888 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	58024400 	.word	0x58024400
 8001a9c:	58020000 	.word	0x58020000

08001aa0 <MX_UART4_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001aa4:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <MX_UART4_Init+0xa0>)
 8001aa6:	4a27      	ldr	r2, [pc, #156]	; (8001b44 <MX_UART4_Init+0xa4>)
 8001aa8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001aaa:	4b25      	ldr	r3, [pc, #148]	; (8001b40 <MX_UART4_Init+0xa0>)
 8001aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab2:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <MX_UART4_Init+0xa0>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ab8:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <MX_UART4_Init+0xa0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <MX_UART4_Init+0xa0>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <MX_UART4_Init+0xa0>)
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <MX_UART4_Init+0xa0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <MX_UART4_Init+0xa0>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_UART4_Init+0xa0>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <MX_UART4_Init+0xa0>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <MX_UART4_Init+0xa0>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ae8:	4815      	ldr	r0, [pc, #84]	; (8001b40 <MX_UART4_Init+0xa0>)
 8001aea:	f007 f90d 	bl	8008d08 <HAL_UART_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001af4:	f7ff fce4 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af8:	2100      	movs	r1, #0
 8001afa:	4811      	ldr	r0, [pc, #68]	; (8001b40 <MX_UART4_Init+0xa0>)
 8001afc:	f009 ff9b 	bl	800ba36 <HAL_UARTEx_SetTxFifoThreshold>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001b06:	f7ff fcdb 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	480c      	ldr	r0, [pc, #48]	; (8001b40 <MX_UART4_Init+0xa0>)
 8001b0e:	f009 ffd0 	bl	800bab2 <HAL_UARTEx_SetRxFifoThreshold>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001b18:	f7ff fcd2 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001b1c:	4808      	ldr	r0, [pc, #32]	; (8001b40 <MX_UART4_Init+0xa0>)
 8001b1e:	f009 ff51 	bl	800b9c4 <HAL_UARTEx_DisableFifoMode>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001b28:	f7ff fcca 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  // Activation de l'interruption de transmission de l'UART4
  HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2100      	movs	r1, #0
 8001b30:	2034      	movs	r0, #52	; 0x34
 8001b32:	f000 fbe2 	bl	80022fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001b36:	2034      	movs	r0, #52	; 0x34
 8001b38:	f000 fbf9 	bl	800232e <HAL_NVIC_EnableIRQ>
  /* USER CODE END UART4_Init 2 */

}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2400057c 	.word	0x2400057c
 8001b44:	40004c00 	.word	0x40004c00

08001b48 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b4e:	4a23      	ldr	r2, [pc, #140]	; (8001bdc <MX_USART2_UART_Init+0x94>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001b52:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b54:	4a22      	ldr	r2, [pc, #136]	; (8001be0 <MX_USART2_UART_Init+0x98>)
 8001b56:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b6c:	220c      	movs	r2, #12
 8001b6e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b8e:	4812      	ldr	r0, [pc, #72]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b90:	f007 f8ba 	bl	8008d08 <HAL_UART_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001b9a:	f7ff fc91 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001ba2:	f009 ff48 	bl	800ba36 <HAL_UARTEx_SetTxFifoThreshold>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8001bac:	f7ff fc88 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001bb4:	f009 ff7d 	bl	800bab2 <HAL_UARTEx_SetRxFifoThreshold>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8001bbe:	f7ff fc7f 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001bc4:	f009 fefe 	bl	800b9c4 <HAL_UARTEx_DisableFifoMode>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8001bce:	f7ff fc77 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	24000610 	.word	0x24000610
 8001bdc:	40004400 	.word	0x40004400
 8001be0:	000f4240 	.word	0x000f4240

08001be4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001be8:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001bea:	4a23      	ldr	r2, [pc, #140]	; (8001c78 <MX_USART3_UART_Init+0x94>)
 8001bec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bee:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c02:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0e:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c14:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c1a:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c2c:	4811      	ldr	r0, [pc, #68]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c2e:	f007 f86b 	bl	8008d08 <HAL_UART_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001c38:	f7ff fc42 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	480d      	ldr	r0, [pc, #52]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c40:	f009 fef9 	bl	800ba36 <HAL_UARTEx_SetTxFifoThreshold>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001c4a:	f7ff fc39 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4808      	ldr	r0, [pc, #32]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c52:	f009 ff2e 	bl	800bab2 <HAL_UARTEx_SetRxFifoThreshold>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001c5c:	f7ff fc30 	bl	80014c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c60:	4804      	ldr	r0, [pc, #16]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c62:	f009 feaf 	bl	800b9c4 <HAL_UARTEx_DisableFifoMode>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001c6c:	f7ff fc28 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	240006a4 	.word	0x240006a4
 8001c78:	40004800 	.word	0x40004800

08001c7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b0c0      	sub	sp, #256	; 0x100
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c98:	22c0      	movs	r2, #192	; 0xc0
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f009 ffcd 	bl	800bc3c <memset>
  if(uartHandle->Instance==UART4)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4aa0      	ldr	r2, [pc, #640]	; (8001f28 <HAL_UART_MspInit+0x2ac>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d172      	bne.n	8001d92 <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001cac:	f04f 0202 	mov.w	r2, #2
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f003 ffc2 	bl	8005c4c <HAL_RCCEx_PeriphCLKConfig>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001cce:	f7ff fbf7 	bl	80014c0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001cd2:	4b96      	ldr	r3, [pc, #600]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001cd4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001cd8:	4a94      	ldr	r2, [pc, #592]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001cda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cde:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001ce2:	4b92      	ldr	r3, [pc, #584]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001ce4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ce8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf0:	4b8e      	ldr	r3, [pc, #568]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001cf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001cf6:	4a8d      	ldr	r2, [pc, #564]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001d00:	4b8a      	ldr	r3, [pc, #552]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001d02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	623b      	str	r3, [r7, #32]
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d0e:	4b87      	ldr	r3, [pc, #540]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001d10:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d14:	4a85      	ldr	r2, [pc, #532]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001d16:	f043 0308 	orr.w	r3, r3, #8
 8001d1a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001d1e:	4b83      	ldr	r3, [pc, #524]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001d20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d44:	2308      	movs	r3, #8
 8001d46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4877      	ldr	r0, [pc, #476]	; (8001f30 <HAL_UART_MspInit+0x2b4>)
 8001d52:	f002 fd99 	bl	8004888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d56:	2301      	movs	r3, #1
 8001d58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d6e:	2308      	movs	r3, #8
 8001d70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d74:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d78:	4619      	mov	r1, r3
 8001d7a:	486e      	ldr	r0, [pc, #440]	; (8001f34 <HAL_UART_MspInit+0x2b8>)
 8001d7c:	f002 fd84 	bl	8004888 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2100      	movs	r1, #0
 8001d84:	2034      	movs	r0, #52	; 0x34
 8001d86:	f000 fab8 	bl	80022fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001d8a:	2034      	movs	r0, #52	; 0x34
 8001d8c:	f000 facf 	bl	800232e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d90:	e0c5      	b.n	8001f1e <HAL_UART_MspInit+0x2a2>
  else if(uartHandle->Instance==USART2)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a68      	ldr	r2, [pc, #416]	; (8001f38 <HAL_UART_MspInit+0x2bc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d174      	bne.n	8001e86 <HAL_UART_MspInit+0x20a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d9c:	f04f 0202 	mov.w	r2, #2
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 ff4a 	bl	8005c4c <HAL_RCCEx_PeriphCLKConfig>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_UART_MspInit+0x146>
      Error_Handler();
 8001dbe:	f7ff fb7f 	bl	80014c0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dc2:	4b5a      	ldr	r3, [pc, #360]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001dc4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001dc8:	4a58      	ldr	r2, [pc, #352]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dce:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001dd2:	4b56      	ldr	r3, [pc, #344]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001dd4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de0:	4b52      	ldr	r3, [pc, #328]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001de2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001de6:	4a51      	ldr	r2, [pc, #324]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001df0:	4b4e      	ldr	r3, [pc, #312]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001df2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dfe:	230c      	movs	r3, #12
 8001e00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e16:	2307      	movs	r3, #7
 8001e18:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e20:	4619      	mov	r1, r3
 8001e22:	4843      	ldr	r0, [pc, #268]	; (8001f30 <HAL_UART_MspInit+0x2b4>)
 8001e24:	f002 fd30 	bl	8004888 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream1;
 8001e28:	4b44      	ldr	r3, [pc, #272]	; (8001f3c <HAL_UART_MspInit+0x2c0>)
 8001e2a:	4a45      	ldr	r2, [pc, #276]	; (8001f40 <HAL_UART_MspInit+0x2c4>)
 8001e2c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001e2e:	4b43      	ldr	r3, [pc, #268]	; (8001f3c <HAL_UART_MspInit+0x2c0>)
 8001e30:	222b      	movs	r2, #43	; 0x2b
 8001e32:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e34:	4b41      	ldr	r3, [pc, #260]	; (8001f3c <HAL_UART_MspInit+0x2c0>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e3a:	4b40      	ldr	r3, [pc, #256]	; (8001f3c <HAL_UART_MspInit+0x2c0>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e40:	4b3e      	ldr	r3, [pc, #248]	; (8001f3c <HAL_UART_MspInit+0x2c0>)
 8001e42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e46:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e48:	4b3c      	ldr	r3, [pc, #240]	; (8001f3c <HAL_UART_MspInit+0x2c0>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e4e:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <HAL_UART_MspInit+0x2c0>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001e54:	4b39      	ldr	r3, [pc, #228]	; (8001f3c <HAL_UART_MspInit+0x2c0>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e5a:	4b38      	ldr	r3, [pc, #224]	; (8001f3c <HAL_UART_MspInit+0x2c0>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e60:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <HAL_UART_MspInit+0x2c0>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e66:	4835      	ldr	r0, [pc, #212]	; (8001f3c <HAL_UART_MspInit+0x2c0>)
 8001e68:	f000 fa7c 	bl	8002364 <HAL_DMA_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 8001e72:	f7ff fb25 	bl	80014c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a30      	ldr	r2, [pc, #192]	; (8001f3c <HAL_UART_MspInit+0x2c0>)
 8001e7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001e7e:	4a2f      	ldr	r2, [pc, #188]	; (8001f3c <HAL_UART_MspInit+0x2c0>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e84:	e04b      	b.n	8001f1e <HAL_UART_MspInit+0x2a2>
  else if(uartHandle->Instance==USART3)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a2e      	ldr	r2, [pc, #184]	; (8001f44 <HAL_UART_MspInit+0x2c8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d146      	bne.n	8001f1e <HAL_UART_MspInit+0x2a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e90:	f04f 0202 	mov.w	r2, #2
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f003 fed0 	bl	8005c4c <HAL_RCCEx_PeriphCLKConfig>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_UART_MspInit+0x23a>
      Error_Handler();
 8001eb2:	f7ff fb05 	bl	80014c0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001eb8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ebc:	4a1b      	ldr	r2, [pc, #108]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001ebe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001ec8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ecc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed4:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001ed6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001eda:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001edc:	f043 0308 	orr.w	r3, r3, #8
 8001ee0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <HAL_UART_MspInit+0x2b0>)
 8001ee6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001ef2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ef6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f0c:	2307      	movs	r3, #7
 8001f0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f12:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f16:	4619      	mov	r1, r3
 8001f18:	4806      	ldr	r0, [pc, #24]	; (8001f34 <HAL_UART_MspInit+0x2b8>)
 8001f1a:	f002 fcb5 	bl	8004888 <HAL_GPIO_Init>
}
 8001f1e:	bf00      	nop
 8001f20:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40004c00 	.word	0x40004c00
 8001f2c:	58024400 	.word	0x58024400
 8001f30:	58020000 	.word	0x58020000
 8001f34:	58020c00 	.word	0x58020c00
 8001f38:	40004400 	.word	0x40004400
 8001f3c:	24000738 	.word	0x24000738
 8001f40:	40020028 	.word	0x40020028
 8001f44:	40004800 	.word	0x40004800

08001f48 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <HAL_UART_RxCpltCallback+0x24>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d104      	bne.n	8001f64 <HAL_UART_RxCpltCallback+0x1c>
	{
		RPICom_DecodeBinaryMessage();
 8001f5a:	f7fe fe91 	bl	8000c80 <RPICom_DecodeBinaryMessage>
		RPICom_UartActivate(&hRPICom);
 8001f5e:	4804      	ldr	r0, [pc, #16]	; (8001f70 <HAL_UART_RxCpltCallback+0x28>)
 8001f60:	f7fe fe5e 	bl	8000c20 <RPICom_UartActivate>
	}
}
 8001f64:	bf00      	nop
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40004c00 	.word	0x40004c00
 8001f70:	240000b8 	.word	0x240000b8

08001f74 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fbc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f88:	f7ff fbca 	bl	8001720 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f8c:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f8e:	490d      	ldr	r1, [pc, #52]	; (8001fc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f90:	4a0d      	ldr	r2, [pc, #52]	; (8001fc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f94:	e002      	b.n	8001f9c <LoopCopyDataInit>

08001f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9a:	3304      	adds	r3, #4

08001f9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa0:	d3f9      	bcc.n	8001f96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fa4:	4c0a      	ldr	r4, [pc, #40]	; (8001fd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa8:	e001      	b.n	8001fae <LoopFillZerobss>

08001faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fac:	3204      	adds	r2, #4

08001fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb0:	d3fb      	bcc.n	8001faa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001fb2:	f009 fe11 	bl	800bbd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fb6:	f7ff f9c9 	bl	800134c <main>
  bx  lr
 8001fba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fbc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001fc0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001fc4:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 8001fc8:	0800d588 	.word	0x0800d588
  ldr r2, =_sbss
 8001fcc:	2400009c 	.word	0x2400009c
  ldr r4, =_ebss
 8001fd0:	240007c4 	.word	0x240007c4

08001fd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fd4:	e7fe      	b.n	8001fd4 <ADC_IRQHandler>
	...

08001fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fde:	2003      	movs	r0, #3
 8001fe0:	f000 f980 	bl	80022e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001fe4:	f003 fc5c 	bl	80058a0 <HAL_RCC_GetSysClockFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <HAL_Init+0x68>)
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	4913      	ldr	r1, [pc, #76]	; (8002044 <HAL_Init+0x6c>)
 8001ff6:	5ccb      	ldrb	r3, [r1, r3]
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8002000:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_Init+0x68>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <HAL_Init+0x6c>)
 800200c:	5cd3      	ldrb	r3, [r2, r3]
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	fa22 f303 	lsr.w	r3, r2, r3
 8002018:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <HAL_Init+0x70>)
 800201a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800201c:	4a0b      	ldr	r2, [pc, #44]	; (800204c <HAL_Init+0x74>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002022:	2000      	movs	r0, #0
 8002024:	f000 f814 	bl	8002050 <HAL_InitTick>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e002      	b.n	8002038 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002032:	f7ff fa4b 	bl	80014cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	58024400 	.word	0x58024400
 8002044:	0800d3f0 	.word	0x0800d3f0
 8002048:	2400002c 	.word	0x2400002c
 800204c:	24000028 	.word	0x24000028

08002050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002058:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_InitTick+0x60>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e021      	b.n	80020a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <HAL_InitTick+0x64>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <HAL_InitTick+0x60>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002072:	fbb3 f3f1 	udiv	r3, r3, r1
 8002076:	fbb2 f3f3 	udiv	r3, r2, r3
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f965 	bl	800234a <HAL_SYSTICK_Config>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e00e      	b.n	80020a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b0f      	cmp	r3, #15
 800208e:	d80a      	bhi.n	80020a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002090:	2200      	movs	r2, #0
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002098:	f000 f92f 	bl	80022fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800209c:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <HAL_InitTick+0x68>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e000      	b.n	80020a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	24000034 	.word	0x24000034
 80020b4:	24000028 	.word	0x24000028
 80020b8:	24000030 	.word	0x24000030

080020bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_IncTick+0x20>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_IncTick+0x24>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <HAL_IncTick+0x24>)
 80020ce:	6013      	str	r3, [r2, #0]
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	24000034 	.word	0x24000034
 80020e0:	240007b0 	.word	0x240007b0

080020e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return uwTick;
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <HAL_GetTick+0x14>)
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	240007b0 	.word	0x240007b0

080020fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002104:	f7ff ffee 	bl	80020e4 <HAL_GetTick>
 8002108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002114:	d005      	beq.n	8002122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_Delay+0x44>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002122:	bf00      	nop
 8002124:	f7ff ffde 	bl	80020e4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	429a      	cmp	r2, r3
 8002132:	d8f7      	bhi.n	8002124 <HAL_Delay+0x28>
  {
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	24000034 	.word	0x24000034

08002144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <__NVIC_SetPriorityGrouping+0x40>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002160:	4013      	ands	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 800216e:	4313      	orrs	r3, r2
 8002170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002172:	4a04      	ldr	r2, [pc, #16]	; (8002184 <__NVIC_SetPriorityGrouping+0x40>)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	60d3      	str	r3, [r2, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00
 8002188:	05fa0000 	.word	0x05fa0000

0800218c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0307 	and.w	r3, r3, #7
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	db0b      	blt.n	80021d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	f003 021f 	and.w	r2, r3, #31
 80021c0:	4907      	ldr	r1, [pc, #28]	; (80021e0 <__NVIC_EnableIRQ+0x38>)
 80021c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	2001      	movs	r0, #1
 80021ca:	fa00 f202 	lsl.w	r2, r0, r2
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000e100 	.word	0xe000e100

080021e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	db0a      	blt.n	800220e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	490c      	ldr	r1, [pc, #48]	; (8002230 <__NVIC_SetPriority+0x4c>)
 80021fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002202:	0112      	lsls	r2, r2, #4
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	440b      	add	r3, r1
 8002208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800220c:	e00a      	b.n	8002224 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4908      	ldr	r1, [pc, #32]	; (8002234 <__NVIC_SetPriority+0x50>)
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	3b04      	subs	r3, #4
 800221c:	0112      	lsls	r2, r2, #4
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	440b      	add	r3, r1
 8002222:	761a      	strb	r2, [r3, #24]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000e100 	.word	0xe000e100
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002238:	b480      	push	{r7}
 800223a:	b089      	sub	sp, #36	; 0x24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f1c3 0307 	rsb	r3, r3, #7
 8002252:	2b04      	cmp	r3, #4
 8002254:	bf28      	it	cs
 8002256:	2304      	movcs	r3, #4
 8002258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	3304      	adds	r3, #4
 800225e:	2b06      	cmp	r3, #6
 8002260:	d902      	bls.n	8002268 <NVIC_EncodePriority+0x30>
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3b03      	subs	r3, #3
 8002266:	e000      	b.n	800226a <NVIC_EncodePriority+0x32>
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	401a      	ands	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	43d9      	mvns	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	4313      	orrs	r3, r2
         );
}
 8002292:	4618      	mov	r0, r3
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b0:	d301      	bcc.n	80022b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00f      	b.n	80022d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <SysTick_Config+0x40>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022be:	210f      	movs	r1, #15
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022c4:	f7ff ff8e 	bl	80021e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <SysTick_Config+0x40>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ce:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <SysTick_Config+0x40>)
 80022d0:	2207      	movs	r2, #7
 80022d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	e000e010 	.word	0xe000e010

080022e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff29 	bl	8002144 <__NVIC_SetPriorityGrouping>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4603      	mov	r3, r0
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002308:	f7ff ff40 	bl	800218c <__NVIC_GetPriorityGrouping>
 800230c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	6978      	ldr	r0, [r7, #20]
 8002314:	f7ff ff90 	bl	8002238 <NVIC_EncodePriority>
 8002318:	4602      	mov	r2, r0
 800231a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff5f 	bl	80021e4 <__NVIC_SetPriority>
}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff33 	bl	80021a8 <__NVIC_EnableIRQ>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff ffa4 	bl	80022a0 <SysTick_Config>
 8002358:	4603      	mov	r3, r0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800236c:	f7ff feba 	bl	80020e4 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e37f      	b.n	8002a7c <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a66      	ldr	r2, [pc, #408]	; (800251c <HAL_DMA_Init+0x1b8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d04a      	beq.n	800241c <HAL_DMA_Init+0xb8>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a65      	ldr	r2, [pc, #404]	; (8002520 <HAL_DMA_Init+0x1bc>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d045      	beq.n	800241c <HAL_DMA_Init+0xb8>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a63      	ldr	r2, [pc, #396]	; (8002524 <HAL_DMA_Init+0x1c0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d040      	beq.n	800241c <HAL_DMA_Init+0xb8>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a62      	ldr	r2, [pc, #392]	; (8002528 <HAL_DMA_Init+0x1c4>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d03b      	beq.n	800241c <HAL_DMA_Init+0xb8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a60      	ldr	r2, [pc, #384]	; (800252c <HAL_DMA_Init+0x1c8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d036      	beq.n	800241c <HAL_DMA_Init+0xb8>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a5f      	ldr	r2, [pc, #380]	; (8002530 <HAL_DMA_Init+0x1cc>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d031      	beq.n	800241c <HAL_DMA_Init+0xb8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a5d      	ldr	r2, [pc, #372]	; (8002534 <HAL_DMA_Init+0x1d0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d02c      	beq.n	800241c <HAL_DMA_Init+0xb8>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a5c      	ldr	r2, [pc, #368]	; (8002538 <HAL_DMA_Init+0x1d4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d027      	beq.n	800241c <HAL_DMA_Init+0xb8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a5a      	ldr	r2, [pc, #360]	; (800253c <HAL_DMA_Init+0x1d8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d022      	beq.n	800241c <HAL_DMA_Init+0xb8>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a59      	ldr	r2, [pc, #356]	; (8002540 <HAL_DMA_Init+0x1dc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d01d      	beq.n	800241c <HAL_DMA_Init+0xb8>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a57      	ldr	r2, [pc, #348]	; (8002544 <HAL_DMA_Init+0x1e0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d018      	beq.n	800241c <HAL_DMA_Init+0xb8>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a56      	ldr	r2, [pc, #344]	; (8002548 <HAL_DMA_Init+0x1e4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d013      	beq.n	800241c <HAL_DMA_Init+0xb8>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a54      	ldr	r2, [pc, #336]	; (800254c <HAL_DMA_Init+0x1e8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00e      	beq.n	800241c <HAL_DMA_Init+0xb8>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a53      	ldr	r2, [pc, #332]	; (8002550 <HAL_DMA_Init+0x1ec>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d009      	beq.n	800241c <HAL_DMA_Init+0xb8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a51      	ldr	r2, [pc, #324]	; (8002554 <HAL_DMA_Init+0x1f0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d004      	beq.n	800241c <HAL_DMA_Init+0xb8>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a50      	ldr	r2, [pc, #320]	; (8002558 <HAL_DMA_Init+0x1f4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d101      	bne.n	8002420 <HAL_DMA_Init+0xbc>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <HAL_DMA_Init+0xbe>
 8002420:	2300      	movs	r3, #0
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 813c 	beq.w	80026a0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a37      	ldr	r2, [pc, #220]	; (800251c <HAL_DMA_Init+0x1b8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d04a      	beq.n	80024d8 <HAL_DMA_Init+0x174>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a36      	ldr	r2, [pc, #216]	; (8002520 <HAL_DMA_Init+0x1bc>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d045      	beq.n	80024d8 <HAL_DMA_Init+0x174>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a34      	ldr	r2, [pc, #208]	; (8002524 <HAL_DMA_Init+0x1c0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d040      	beq.n	80024d8 <HAL_DMA_Init+0x174>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a33      	ldr	r2, [pc, #204]	; (8002528 <HAL_DMA_Init+0x1c4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d03b      	beq.n	80024d8 <HAL_DMA_Init+0x174>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a31      	ldr	r2, [pc, #196]	; (800252c <HAL_DMA_Init+0x1c8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d036      	beq.n	80024d8 <HAL_DMA_Init+0x174>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a30      	ldr	r2, [pc, #192]	; (8002530 <HAL_DMA_Init+0x1cc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d031      	beq.n	80024d8 <HAL_DMA_Init+0x174>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a2e      	ldr	r2, [pc, #184]	; (8002534 <HAL_DMA_Init+0x1d0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d02c      	beq.n	80024d8 <HAL_DMA_Init+0x174>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a2d      	ldr	r2, [pc, #180]	; (8002538 <HAL_DMA_Init+0x1d4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d027      	beq.n	80024d8 <HAL_DMA_Init+0x174>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a2b      	ldr	r2, [pc, #172]	; (800253c <HAL_DMA_Init+0x1d8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d022      	beq.n	80024d8 <HAL_DMA_Init+0x174>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a2a      	ldr	r2, [pc, #168]	; (8002540 <HAL_DMA_Init+0x1dc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d01d      	beq.n	80024d8 <HAL_DMA_Init+0x174>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a28      	ldr	r2, [pc, #160]	; (8002544 <HAL_DMA_Init+0x1e0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d018      	beq.n	80024d8 <HAL_DMA_Init+0x174>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a27      	ldr	r2, [pc, #156]	; (8002548 <HAL_DMA_Init+0x1e4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d013      	beq.n	80024d8 <HAL_DMA_Init+0x174>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a25      	ldr	r2, [pc, #148]	; (800254c <HAL_DMA_Init+0x1e8>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00e      	beq.n	80024d8 <HAL_DMA_Init+0x174>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a24      	ldr	r2, [pc, #144]	; (8002550 <HAL_DMA_Init+0x1ec>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d009      	beq.n	80024d8 <HAL_DMA_Init+0x174>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a22      	ldr	r2, [pc, #136]	; (8002554 <HAL_DMA_Init+0x1f0>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d004      	beq.n	80024d8 <HAL_DMA_Init+0x174>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a21      	ldr	r2, [pc, #132]	; (8002558 <HAL_DMA_Init+0x1f4>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d108      	bne.n	80024ea <HAL_DMA_Init+0x186>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0201 	bic.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e007      	b.n	80024fa <HAL_DMA_Init+0x196>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0201 	bic.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024fa:	e02f      	b.n	800255c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024fc:	f7ff fdf2 	bl	80020e4 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b05      	cmp	r3, #5
 8002508:	d928      	bls.n	800255c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2220      	movs	r2, #32
 800250e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2203      	movs	r2, #3
 8002514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e2af      	b.n	8002a7c <HAL_DMA_Init+0x718>
 800251c:	40020010 	.word	0x40020010
 8002520:	40020028 	.word	0x40020028
 8002524:	40020040 	.word	0x40020040
 8002528:	40020058 	.word	0x40020058
 800252c:	40020070 	.word	0x40020070
 8002530:	40020088 	.word	0x40020088
 8002534:	400200a0 	.word	0x400200a0
 8002538:	400200b8 	.word	0x400200b8
 800253c:	40020410 	.word	0x40020410
 8002540:	40020428 	.word	0x40020428
 8002544:	40020440 	.word	0x40020440
 8002548:	40020458 	.word	0x40020458
 800254c:	40020470 	.word	0x40020470
 8002550:	40020488 	.word	0x40020488
 8002554:	400204a0 	.word	0x400204a0
 8002558:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1c8      	bne.n	80024fc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4b73      	ldr	r3, [pc, #460]	; (8002744 <HAL_DMA_Init+0x3e0>)
 8002576:	4013      	ands	r3, r2
 8002578:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002582:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800258e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800259a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d107      	bne.n	80025c0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	4313      	orrs	r3, r2
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	4313      	orrs	r3, r2
 80025be:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b28      	cmp	r3, #40	; 0x28
 80025c6:	d903      	bls.n	80025d0 <HAL_DMA_Init+0x26c>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b2e      	cmp	r3, #46	; 0x2e
 80025ce:	d91f      	bls.n	8002610 <HAL_DMA_Init+0x2ac>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b3e      	cmp	r3, #62	; 0x3e
 80025d6:	d903      	bls.n	80025e0 <HAL_DMA_Init+0x27c>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b42      	cmp	r3, #66	; 0x42
 80025de:	d917      	bls.n	8002610 <HAL_DMA_Init+0x2ac>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b46      	cmp	r3, #70	; 0x46
 80025e6:	d903      	bls.n	80025f0 <HAL_DMA_Init+0x28c>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b48      	cmp	r3, #72	; 0x48
 80025ee:	d90f      	bls.n	8002610 <HAL_DMA_Init+0x2ac>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b4e      	cmp	r3, #78	; 0x4e
 80025f6:	d903      	bls.n	8002600 <HAL_DMA_Init+0x29c>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b52      	cmp	r3, #82	; 0x52
 80025fe:	d907      	bls.n	8002610 <HAL_DMA_Init+0x2ac>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b73      	cmp	r3, #115	; 0x73
 8002606:	d905      	bls.n	8002614 <HAL_DMA_Init+0x2b0>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b77      	cmp	r3, #119	; 0x77
 800260e:	d801      	bhi.n	8002614 <HAL_DMA_Init+0x2b0>
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <HAL_DMA_Init+0x2b2>
 8002614:	2300      	movs	r3, #0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002620:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f023 0307 	bic.w	r3, r3, #7
 8002638:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	2b04      	cmp	r3, #4
 800264a:	d117      	bne.n	800267c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00e      	beq.n	800267c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f001 ff88 	bl	8004574 <DMA_CheckFifoParam>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2240      	movs	r2, #64	; 0x40
 800266e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e1ff      	b.n	8002a7c <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f001 fec3 	bl	8004410 <DMA_CalcBaseAndBitshift>
 800268a:	4603      	mov	r3, r0
 800268c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	223f      	movs	r2, #63	; 0x3f
 8002698:	409a      	lsls	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	609a      	str	r2, [r3, #8]
 800269e:	e0fe      	b.n	800289e <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a28      	ldr	r2, [pc, #160]	; (8002748 <HAL_DMA_Init+0x3e4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d04a      	beq.n	8002740 <HAL_DMA_Init+0x3dc>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a27      	ldr	r2, [pc, #156]	; (800274c <HAL_DMA_Init+0x3e8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d045      	beq.n	8002740 <HAL_DMA_Init+0x3dc>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a25      	ldr	r2, [pc, #148]	; (8002750 <HAL_DMA_Init+0x3ec>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d040      	beq.n	8002740 <HAL_DMA_Init+0x3dc>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a24      	ldr	r2, [pc, #144]	; (8002754 <HAL_DMA_Init+0x3f0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d03b      	beq.n	8002740 <HAL_DMA_Init+0x3dc>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a22      	ldr	r2, [pc, #136]	; (8002758 <HAL_DMA_Init+0x3f4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d036      	beq.n	8002740 <HAL_DMA_Init+0x3dc>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a21      	ldr	r2, [pc, #132]	; (800275c <HAL_DMA_Init+0x3f8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d031      	beq.n	8002740 <HAL_DMA_Init+0x3dc>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a1f      	ldr	r2, [pc, #124]	; (8002760 <HAL_DMA_Init+0x3fc>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d02c      	beq.n	8002740 <HAL_DMA_Init+0x3dc>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a1e      	ldr	r2, [pc, #120]	; (8002764 <HAL_DMA_Init+0x400>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d027      	beq.n	8002740 <HAL_DMA_Init+0x3dc>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a1c      	ldr	r2, [pc, #112]	; (8002768 <HAL_DMA_Init+0x404>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d022      	beq.n	8002740 <HAL_DMA_Init+0x3dc>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a1b      	ldr	r2, [pc, #108]	; (800276c <HAL_DMA_Init+0x408>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d01d      	beq.n	8002740 <HAL_DMA_Init+0x3dc>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a19      	ldr	r2, [pc, #100]	; (8002770 <HAL_DMA_Init+0x40c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d018      	beq.n	8002740 <HAL_DMA_Init+0x3dc>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a18      	ldr	r2, [pc, #96]	; (8002774 <HAL_DMA_Init+0x410>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d013      	beq.n	8002740 <HAL_DMA_Init+0x3dc>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a16      	ldr	r2, [pc, #88]	; (8002778 <HAL_DMA_Init+0x414>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00e      	beq.n	8002740 <HAL_DMA_Init+0x3dc>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a15      	ldr	r2, [pc, #84]	; (800277c <HAL_DMA_Init+0x418>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d009      	beq.n	8002740 <HAL_DMA_Init+0x3dc>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a13      	ldr	r2, [pc, #76]	; (8002780 <HAL_DMA_Init+0x41c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d004      	beq.n	8002740 <HAL_DMA_Init+0x3dc>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a12      	ldr	r2, [pc, #72]	; (8002784 <HAL_DMA_Init+0x420>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d123      	bne.n	8002788 <HAL_DMA_Init+0x424>
 8002740:	2301      	movs	r3, #1
 8002742:	e022      	b.n	800278a <HAL_DMA_Init+0x426>
 8002744:	fe10803f 	.word	0xfe10803f
 8002748:	48022c08 	.word	0x48022c08
 800274c:	48022c1c 	.word	0x48022c1c
 8002750:	48022c30 	.word	0x48022c30
 8002754:	48022c44 	.word	0x48022c44
 8002758:	48022c58 	.word	0x48022c58
 800275c:	48022c6c 	.word	0x48022c6c
 8002760:	48022c80 	.word	0x48022c80
 8002764:	48022c94 	.word	0x48022c94
 8002768:	58025408 	.word	0x58025408
 800276c:	5802541c 	.word	0x5802541c
 8002770:	58025430 	.word	0x58025430
 8002774:	58025444 	.word	0x58025444
 8002778:	58025458 	.word	0x58025458
 800277c:	5802546c 	.word	0x5802546c
 8002780:	58025480 	.word	0x58025480
 8002784:	58025494 	.word	0x58025494
 8002788:	2300      	movs	r3, #0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d07e      	beq.n	800288c <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a80      	ldr	r2, [pc, #512]	; (8002994 <HAL_DMA_Init+0x630>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d021      	beq.n	80027dc <HAL_DMA_Init+0x478>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a7e      	ldr	r2, [pc, #504]	; (8002998 <HAL_DMA_Init+0x634>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d01c      	beq.n	80027dc <HAL_DMA_Init+0x478>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a7d      	ldr	r2, [pc, #500]	; (800299c <HAL_DMA_Init+0x638>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d017      	beq.n	80027dc <HAL_DMA_Init+0x478>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a7b      	ldr	r2, [pc, #492]	; (80029a0 <HAL_DMA_Init+0x63c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d012      	beq.n	80027dc <HAL_DMA_Init+0x478>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a7a      	ldr	r2, [pc, #488]	; (80029a4 <HAL_DMA_Init+0x640>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d00d      	beq.n	80027dc <HAL_DMA_Init+0x478>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a78      	ldr	r2, [pc, #480]	; (80029a8 <HAL_DMA_Init+0x644>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d008      	beq.n	80027dc <HAL_DMA_Init+0x478>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a77      	ldr	r2, [pc, #476]	; (80029ac <HAL_DMA_Init+0x648>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d003      	beq.n	80027dc <HAL_DMA_Init+0x478>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a75      	ldr	r2, [pc, #468]	; (80029b0 <HAL_DMA_Init+0x64c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2202      	movs	r2, #2
 80027e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4b6e      	ldr	r3, [pc, #440]	; (80029b4 <HAL_DMA_Init+0x650>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b40      	cmp	r3, #64	; 0x40
 8002804:	d008      	beq.n	8002818 <HAL_DMA_Init+0x4b4>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b80      	cmp	r3, #128	; 0x80
 800280c:	d102      	bne.n	8002814 <HAL_DMA_Init+0x4b0>
 800280e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002812:	e002      	b.n	800281a <HAL_DMA_Init+0x4b6>
 8002814:	2300      	movs	r3, #0
 8002816:	e000      	b.n	800281a <HAL_DMA_Init+0x4b6>
 8002818:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68d2      	ldr	r2, [r2, #12]
 800281e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002820:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002828:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002830:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002838:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002840:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002848:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	4b56      	ldr	r3, [pc, #344]	; (80029b8 <HAL_DMA_Init+0x654>)
 8002860:	4413      	add	r3, r2
 8002862:	4a56      	ldr	r2, [pc, #344]	; (80029bc <HAL_DMA_Init+0x658>)
 8002864:	fba2 2303 	umull	r2, r3, r2, r3
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	009a      	lsls	r2, r3, #2
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f001 fdcd 	bl	8004410 <DMA_CalcBaseAndBitshift>
 8002876:	4603      	mov	r3, r0
 8002878:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	2201      	movs	r2, #1
 8002884:	409a      	lsls	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	e008      	b.n	800289e <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2240      	movs	r2, #64	; 0x40
 8002890:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2203      	movs	r2, #3
 8002896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0ee      	b.n	8002a7c <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a47      	ldr	r2, [pc, #284]	; (80029c0 <HAL_DMA_Init+0x65c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d072      	beq.n	800298e <HAL_DMA_Init+0x62a>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a45      	ldr	r2, [pc, #276]	; (80029c4 <HAL_DMA_Init+0x660>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d06d      	beq.n	800298e <HAL_DMA_Init+0x62a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a44      	ldr	r2, [pc, #272]	; (80029c8 <HAL_DMA_Init+0x664>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d068      	beq.n	800298e <HAL_DMA_Init+0x62a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a42      	ldr	r2, [pc, #264]	; (80029cc <HAL_DMA_Init+0x668>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d063      	beq.n	800298e <HAL_DMA_Init+0x62a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a41      	ldr	r2, [pc, #260]	; (80029d0 <HAL_DMA_Init+0x66c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d05e      	beq.n	800298e <HAL_DMA_Init+0x62a>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a3f      	ldr	r2, [pc, #252]	; (80029d4 <HAL_DMA_Init+0x670>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d059      	beq.n	800298e <HAL_DMA_Init+0x62a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a3e      	ldr	r2, [pc, #248]	; (80029d8 <HAL_DMA_Init+0x674>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d054      	beq.n	800298e <HAL_DMA_Init+0x62a>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a3c      	ldr	r2, [pc, #240]	; (80029dc <HAL_DMA_Init+0x678>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d04f      	beq.n	800298e <HAL_DMA_Init+0x62a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a3b      	ldr	r2, [pc, #236]	; (80029e0 <HAL_DMA_Init+0x67c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d04a      	beq.n	800298e <HAL_DMA_Init+0x62a>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a39      	ldr	r2, [pc, #228]	; (80029e4 <HAL_DMA_Init+0x680>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d045      	beq.n	800298e <HAL_DMA_Init+0x62a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a38      	ldr	r2, [pc, #224]	; (80029e8 <HAL_DMA_Init+0x684>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d040      	beq.n	800298e <HAL_DMA_Init+0x62a>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a36      	ldr	r2, [pc, #216]	; (80029ec <HAL_DMA_Init+0x688>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d03b      	beq.n	800298e <HAL_DMA_Init+0x62a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a35      	ldr	r2, [pc, #212]	; (80029f0 <HAL_DMA_Init+0x68c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d036      	beq.n	800298e <HAL_DMA_Init+0x62a>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a33      	ldr	r2, [pc, #204]	; (80029f4 <HAL_DMA_Init+0x690>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d031      	beq.n	800298e <HAL_DMA_Init+0x62a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a32      	ldr	r2, [pc, #200]	; (80029f8 <HAL_DMA_Init+0x694>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d02c      	beq.n	800298e <HAL_DMA_Init+0x62a>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a30      	ldr	r2, [pc, #192]	; (80029fc <HAL_DMA_Init+0x698>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d027      	beq.n	800298e <HAL_DMA_Init+0x62a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a14      	ldr	r2, [pc, #80]	; (8002994 <HAL_DMA_Init+0x630>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d022      	beq.n	800298e <HAL_DMA_Init+0x62a>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a12      	ldr	r2, [pc, #72]	; (8002998 <HAL_DMA_Init+0x634>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d01d      	beq.n	800298e <HAL_DMA_Init+0x62a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a11      	ldr	r2, [pc, #68]	; (800299c <HAL_DMA_Init+0x638>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d018      	beq.n	800298e <HAL_DMA_Init+0x62a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <HAL_DMA_Init+0x63c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <HAL_DMA_Init+0x62a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <HAL_DMA_Init+0x640>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d00e      	beq.n	800298e <HAL_DMA_Init+0x62a>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0c      	ldr	r2, [pc, #48]	; (80029a8 <HAL_DMA_Init+0x644>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d009      	beq.n	800298e <HAL_DMA_Init+0x62a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a0b      	ldr	r2, [pc, #44]	; (80029ac <HAL_DMA_Init+0x648>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d004      	beq.n	800298e <HAL_DMA_Init+0x62a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a09      	ldr	r2, [pc, #36]	; (80029b0 <HAL_DMA_Init+0x64c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d138      	bne.n	8002a00 <HAL_DMA_Init+0x69c>
 800298e:	2301      	movs	r3, #1
 8002990:	e037      	b.n	8002a02 <HAL_DMA_Init+0x69e>
 8002992:	bf00      	nop
 8002994:	58025408 	.word	0x58025408
 8002998:	5802541c 	.word	0x5802541c
 800299c:	58025430 	.word	0x58025430
 80029a0:	58025444 	.word	0x58025444
 80029a4:	58025458 	.word	0x58025458
 80029a8:	5802546c 	.word	0x5802546c
 80029ac:	58025480 	.word	0x58025480
 80029b0:	58025494 	.word	0x58025494
 80029b4:	fffe000f 	.word	0xfffe000f
 80029b8:	a7fdabf8 	.word	0xa7fdabf8
 80029bc:	cccccccd 	.word	0xcccccccd
 80029c0:	40020010 	.word	0x40020010
 80029c4:	40020028 	.word	0x40020028
 80029c8:	40020040 	.word	0x40020040
 80029cc:	40020058 	.word	0x40020058
 80029d0:	40020070 	.word	0x40020070
 80029d4:	40020088 	.word	0x40020088
 80029d8:	400200a0 	.word	0x400200a0
 80029dc:	400200b8 	.word	0x400200b8
 80029e0:	40020410 	.word	0x40020410
 80029e4:	40020428 	.word	0x40020428
 80029e8:	40020440 	.word	0x40020440
 80029ec:	40020458 	.word	0x40020458
 80029f0:	40020470 	.word	0x40020470
 80029f4:	40020488 	.word	0x40020488
 80029f8:	400204a0 	.word	0x400204a0
 80029fc:	400204b8 	.word	0x400204b8
 8002a00:	2300      	movs	r3, #0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d032      	beq.n	8002a6c <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f001 fe30 	bl	800466c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b80      	cmp	r3, #128	; 0x80
 8002a12:	d102      	bne.n	8002a1a <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a2e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d010      	beq.n	8002a5a <HAL_DMA_Init+0x6f6>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d80c      	bhi.n	8002a5a <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f001 fead 	bl	80047a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	e008      	b.n	8002a6c <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002a8c:	f7ff fb2a 	bl	80020e4 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e2dc      	b.n	8003056 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d008      	beq.n	8002aba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2280      	movs	r2, #128	; 0x80
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e2cd      	b.n	8003056 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a76      	ldr	r2, [pc, #472]	; (8002c98 <HAL_DMA_Abort+0x214>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d04a      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a74      	ldr	r2, [pc, #464]	; (8002c9c <HAL_DMA_Abort+0x218>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d045      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a73      	ldr	r2, [pc, #460]	; (8002ca0 <HAL_DMA_Abort+0x21c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d040      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a71      	ldr	r2, [pc, #452]	; (8002ca4 <HAL_DMA_Abort+0x220>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d03b      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a70      	ldr	r2, [pc, #448]	; (8002ca8 <HAL_DMA_Abort+0x224>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d036      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a6e      	ldr	r2, [pc, #440]	; (8002cac <HAL_DMA_Abort+0x228>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d031      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a6d      	ldr	r2, [pc, #436]	; (8002cb0 <HAL_DMA_Abort+0x22c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d02c      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a6b      	ldr	r2, [pc, #428]	; (8002cb4 <HAL_DMA_Abort+0x230>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d027      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a6a      	ldr	r2, [pc, #424]	; (8002cb8 <HAL_DMA_Abort+0x234>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d022      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a68      	ldr	r2, [pc, #416]	; (8002cbc <HAL_DMA_Abort+0x238>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d01d      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a67      	ldr	r2, [pc, #412]	; (8002cc0 <HAL_DMA_Abort+0x23c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d018      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a65      	ldr	r2, [pc, #404]	; (8002cc4 <HAL_DMA_Abort+0x240>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a64      	ldr	r2, [pc, #400]	; (8002cc8 <HAL_DMA_Abort+0x244>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d00e      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a62      	ldr	r2, [pc, #392]	; (8002ccc <HAL_DMA_Abort+0x248>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d009      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a61      	ldr	r2, [pc, #388]	; (8002cd0 <HAL_DMA_Abort+0x24c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d004      	beq.n	8002b5a <HAL_DMA_Abort+0xd6>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a5f      	ldr	r2, [pc, #380]	; (8002cd4 <HAL_DMA_Abort+0x250>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d101      	bne.n	8002b5e <HAL_DMA_Abort+0xda>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <HAL_DMA_Abort+0xdc>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d013      	beq.n	8002b8c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 021e 	bic.w	r2, r2, #30
 8002b72:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695a      	ldr	r2, [r3, #20]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b82:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	e00a      	b.n	8002ba2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 020e 	bic.w	r2, r2, #14
 8002b9a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a3c      	ldr	r2, [pc, #240]	; (8002c98 <HAL_DMA_Abort+0x214>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d072      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a3a      	ldr	r2, [pc, #232]	; (8002c9c <HAL_DMA_Abort+0x218>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d06d      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a39      	ldr	r2, [pc, #228]	; (8002ca0 <HAL_DMA_Abort+0x21c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d068      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a37      	ldr	r2, [pc, #220]	; (8002ca4 <HAL_DMA_Abort+0x220>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d063      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a36      	ldr	r2, [pc, #216]	; (8002ca8 <HAL_DMA_Abort+0x224>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d05e      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a34      	ldr	r2, [pc, #208]	; (8002cac <HAL_DMA_Abort+0x228>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d059      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a33      	ldr	r2, [pc, #204]	; (8002cb0 <HAL_DMA_Abort+0x22c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d054      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a31      	ldr	r2, [pc, #196]	; (8002cb4 <HAL_DMA_Abort+0x230>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d04f      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a30      	ldr	r2, [pc, #192]	; (8002cb8 <HAL_DMA_Abort+0x234>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d04a      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a2e      	ldr	r2, [pc, #184]	; (8002cbc <HAL_DMA_Abort+0x238>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d045      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a2d      	ldr	r2, [pc, #180]	; (8002cc0 <HAL_DMA_Abort+0x23c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d040      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a2b      	ldr	r2, [pc, #172]	; (8002cc4 <HAL_DMA_Abort+0x240>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d03b      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a2a      	ldr	r2, [pc, #168]	; (8002cc8 <HAL_DMA_Abort+0x244>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d036      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <HAL_DMA_Abort+0x248>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d031      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <HAL_DMA_Abort+0x24c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d02c      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a25      	ldr	r2, [pc, #148]	; (8002cd4 <HAL_DMA_Abort+0x250>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d027      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a24      	ldr	r2, [pc, #144]	; (8002cd8 <HAL_DMA_Abort+0x254>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d022      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a22      	ldr	r2, [pc, #136]	; (8002cdc <HAL_DMA_Abort+0x258>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01d      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a21      	ldr	r2, [pc, #132]	; (8002ce0 <HAL_DMA_Abort+0x25c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d018      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1f      	ldr	r2, [pc, #124]	; (8002ce4 <HAL_DMA_Abort+0x260>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ce8 <HAL_DMA_Abort+0x264>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d00e      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <HAL_DMA_Abort+0x268>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d009      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <HAL_DMA_Abort+0x26c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d004      	beq.n	8002c92 <HAL_DMA_Abort+0x20e>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a19      	ldr	r2, [pc, #100]	; (8002cf4 <HAL_DMA_Abort+0x270>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d132      	bne.n	8002cf8 <HAL_DMA_Abort+0x274>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e031      	b.n	8002cfa <HAL_DMA_Abort+0x276>
 8002c96:	bf00      	nop
 8002c98:	40020010 	.word	0x40020010
 8002c9c:	40020028 	.word	0x40020028
 8002ca0:	40020040 	.word	0x40020040
 8002ca4:	40020058 	.word	0x40020058
 8002ca8:	40020070 	.word	0x40020070
 8002cac:	40020088 	.word	0x40020088
 8002cb0:	400200a0 	.word	0x400200a0
 8002cb4:	400200b8 	.word	0x400200b8
 8002cb8:	40020410 	.word	0x40020410
 8002cbc:	40020428 	.word	0x40020428
 8002cc0:	40020440 	.word	0x40020440
 8002cc4:	40020458 	.word	0x40020458
 8002cc8:	40020470 	.word	0x40020470
 8002ccc:	40020488 	.word	0x40020488
 8002cd0:	400204a0 	.word	0x400204a0
 8002cd4:	400204b8 	.word	0x400204b8
 8002cd8:	58025408 	.word	0x58025408
 8002cdc:	5802541c 	.word	0x5802541c
 8002ce0:	58025430 	.word	0x58025430
 8002ce4:	58025444 	.word	0x58025444
 8002ce8:	58025458 	.word	0x58025458
 8002cec:	5802546c 	.word	0x5802546c
 8002cf0:	58025480 	.word	0x58025480
 8002cf4:	58025494 	.word	0x58025494
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d007      	beq.n	8002d0e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a6d      	ldr	r2, [pc, #436]	; (8002ec8 <HAL_DMA_Abort+0x444>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d04a      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a6b      	ldr	r2, [pc, #428]	; (8002ecc <HAL_DMA_Abort+0x448>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d045      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a6a      	ldr	r2, [pc, #424]	; (8002ed0 <HAL_DMA_Abort+0x44c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d040      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a68      	ldr	r2, [pc, #416]	; (8002ed4 <HAL_DMA_Abort+0x450>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d03b      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a67      	ldr	r2, [pc, #412]	; (8002ed8 <HAL_DMA_Abort+0x454>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d036      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a65      	ldr	r2, [pc, #404]	; (8002edc <HAL_DMA_Abort+0x458>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d031      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a64      	ldr	r2, [pc, #400]	; (8002ee0 <HAL_DMA_Abort+0x45c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d02c      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a62      	ldr	r2, [pc, #392]	; (8002ee4 <HAL_DMA_Abort+0x460>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d027      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a61      	ldr	r2, [pc, #388]	; (8002ee8 <HAL_DMA_Abort+0x464>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d022      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a5f      	ldr	r2, [pc, #380]	; (8002eec <HAL_DMA_Abort+0x468>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01d      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a5e      	ldr	r2, [pc, #376]	; (8002ef0 <HAL_DMA_Abort+0x46c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d018      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a5c      	ldr	r2, [pc, #368]	; (8002ef4 <HAL_DMA_Abort+0x470>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a5b      	ldr	r2, [pc, #364]	; (8002ef8 <HAL_DMA_Abort+0x474>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d00e      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a59      	ldr	r2, [pc, #356]	; (8002efc <HAL_DMA_Abort+0x478>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d009      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a58      	ldr	r2, [pc, #352]	; (8002f00 <HAL_DMA_Abort+0x47c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d004      	beq.n	8002dae <HAL_DMA_Abort+0x32a>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a56      	ldr	r2, [pc, #344]	; (8002f04 <HAL_DMA_Abort+0x480>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d108      	bne.n	8002dc0 <HAL_DMA_Abort+0x33c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0201 	bic.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e007      	b.n	8002dd0 <HAL_DMA_Abort+0x34c>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0201 	bic.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002dd0:	e013      	b.n	8002dfa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dd2:	f7ff f987 	bl	80020e4 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	d90c      	bls.n	8002dfa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2203      	movs	r2, #3
 8002dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e12d      	b.n	8003056 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1e5      	bne.n	8002dd2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a2f      	ldr	r2, [pc, #188]	; (8002ec8 <HAL_DMA_Abort+0x444>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d04a      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a2d      	ldr	r2, [pc, #180]	; (8002ecc <HAL_DMA_Abort+0x448>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d045      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a2c      	ldr	r2, [pc, #176]	; (8002ed0 <HAL_DMA_Abort+0x44c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d040      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a2a      	ldr	r2, [pc, #168]	; (8002ed4 <HAL_DMA_Abort+0x450>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d03b      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a29      	ldr	r2, [pc, #164]	; (8002ed8 <HAL_DMA_Abort+0x454>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d036      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a27      	ldr	r2, [pc, #156]	; (8002edc <HAL_DMA_Abort+0x458>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d031      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a26      	ldr	r2, [pc, #152]	; (8002ee0 <HAL_DMA_Abort+0x45c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d02c      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a24      	ldr	r2, [pc, #144]	; (8002ee4 <HAL_DMA_Abort+0x460>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d027      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a23      	ldr	r2, [pc, #140]	; (8002ee8 <HAL_DMA_Abort+0x464>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d022      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a21      	ldr	r2, [pc, #132]	; (8002eec <HAL_DMA_Abort+0x468>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d01d      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a20      	ldr	r2, [pc, #128]	; (8002ef0 <HAL_DMA_Abort+0x46c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d018      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <HAL_DMA_Abort+0x470>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d013      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <HAL_DMA_Abort+0x474>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00e      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1b      	ldr	r2, [pc, #108]	; (8002efc <HAL_DMA_Abort+0x478>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d009      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1a      	ldr	r2, [pc, #104]	; (8002f00 <HAL_DMA_Abort+0x47c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d004      	beq.n	8002ea6 <HAL_DMA_Abort+0x422>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <HAL_DMA_Abort+0x480>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d101      	bne.n	8002eaa <HAL_DMA_Abort+0x426>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <HAL_DMA_Abort+0x428>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d02b      	beq.n	8002f08 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	223f      	movs	r2, #63	; 0x3f
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	e02a      	b.n	8002f1e <HAL_DMA_Abort+0x49a>
 8002ec8:	40020010 	.word	0x40020010
 8002ecc:	40020028 	.word	0x40020028
 8002ed0:	40020040 	.word	0x40020040
 8002ed4:	40020058 	.word	0x40020058
 8002ed8:	40020070 	.word	0x40020070
 8002edc:	40020088 	.word	0x40020088
 8002ee0:	400200a0 	.word	0x400200a0
 8002ee4:	400200b8 	.word	0x400200b8
 8002ee8:	40020410 	.word	0x40020410
 8002eec:	40020428 	.word	0x40020428
 8002ef0:	40020440 	.word	0x40020440
 8002ef4:	40020458 	.word	0x40020458
 8002ef8:	40020470 	.word	0x40020470
 8002efc:	40020488 	.word	0x40020488
 8002f00:	400204a0 	.word	0x400204a0
 8002f04:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f12:	f003 031f 	and.w	r3, r3, #31
 8002f16:	2201      	movs	r2, #1
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a4f      	ldr	r2, [pc, #316]	; (8003060 <HAL_DMA_Abort+0x5dc>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d072      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a4d      	ldr	r2, [pc, #308]	; (8003064 <HAL_DMA_Abort+0x5e0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d06d      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a4c      	ldr	r2, [pc, #304]	; (8003068 <HAL_DMA_Abort+0x5e4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d068      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a4a      	ldr	r2, [pc, #296]	; (800306c <HAL_DMA_Abort+0x5e8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d063      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a49      	ldr	r2, [pc, #292]	; (8003070 <HAL_DMA_Abort+0x5ec>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d05e      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a47      	ldr	r2, [pc, #284]	; (8003074 <HAL_DMA_Abort+0x5f0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d059      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a46      	ldr	r2, [pc, #280]	; (8003078 <HAL_DMA_Abort+0x5f4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d054      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a44      	ldr	r2, [pc, #272]	; (800307c <HAL_DMA_Abort+0x5f8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d04f      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a43      	ldr	r2, [pc, #268]	; (8003080 <HAL_DMA_Abort+0x5fc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d04a      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a41      	ldr	r2, [pc, #260]	; (8003084 <HAL_DMA_Abort+0x600>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d045      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a40      	ldr	r2, [pc, #256]	; (8003088 <HAL_DMA_Abort+0x604>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d040      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a3e      	ldr	r2, [pc, #248]	; (800308c <HAL_DMA_Abort+0x608>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d03b      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a3d      	ldr	r2, [pc, #244]	; (8003090 <HAL_DMA_Abort+0x60c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d036      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a3b      	ldr	r2, [pc, #236]	; (8003094 <HAL_DMA_Abort+0x610>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d031      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a3a      	ldr	r2, [pc, #232]	; (8003098 <HAL_DMA_Abort+0x614>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d02c      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a38      	ldr	r2, [pc, #224]	; (800309c <HAL_DMA_Abort+0x618>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d027      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a37      	ldr	r2, [pc, #220]	; (80030a0 <HAL_DMA_Abort+0x61c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d022      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a35      	ldr	r2, [pc, #212]	; (80030a4 <HAL_DMA_Abort+0x620>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d01d      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a34      	ldr	r2, [pc, #208]	; (80030a8 <HAL_DMA_Abort+0x624>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d018      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a32      	ldr	r2, [pc, #200]	; (80030ac <HAL_DMA_Abort+0x628>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d013      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a31      	ldr	r2, [pc, #196]	; (80030b0 <HAL_DMA_Abort+0x62c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d00e      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a2f      	ldr	r2, [pc, #188]	; (80030b4 <HAL_DMA_Abort+0x630>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d009      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a2e      	ldr	r2, [pc, #184]	; (80030b8 <HAL_DMA_Abort+0x634>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d004      	beq.n	800300e <HAL_DMA_Abort+0x58a>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a2c      	ldr	r2, [pc, #176]	; (80030bc <HAL_DMA_Abort+0x638>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d101      	bne.n	8003012 <HAL_DMA_Abort+0x58e>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_DMA_Abort+0x590>
 8003012:	2300      	movs	r3, #0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d015      	beq.n	8003044 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003020:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00c      	beq.n	8003044 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003034:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003038:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003042:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40020010 	.word	0x40020010
 8003064:	40020028 	.word	0x40020028
 8003068:	40020040 	.word	0x40020040
 800306c:	40020058 	.word	0x40020058
 8003070:	40020070 	.word	0x40020070
 8003074:	40020088 	.word	0x40020088
 8003078:	400200a0 	.word	0x400200a0
 800307c:	400200b8 	.word	0x400200b8
 8003080:	40020410 	.word	0x40020410
 8003084:	40020428 	.word	0x40020428
 8003088:	40020440 	.word	0x40020440
 800308c:	40020458 	.word	0x40020458
 8003090:	40020470 	.word	0x40020470
 8003094:	40020488 	.word	0x40020488
 8003098:	400204a0 	.word	0x400204a0
 800309c:	400204b8 	.word	0x400204b8
 80030a0:	58025408 	.word	0x58025408
 80030a4:	5802541c 	.word	0x5802541c
 80030a8:	58025430 	.word	0x58025430
 80030ac:	58025444 	.word	0x58025444
 80030b0:	58025458 	.word	0x58025458
 80030b4:	5802546c 	.word	0x5802546c
 80030b8:	58025480 	.word	0x58025480
 80030bc:	58025494 	.word	0x58025494

080030c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e237      	b.n	8003542 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d004      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2280      	movs	r2, #128	; 0x80
 80030e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e22c      	b.n	8003542 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a5c      	ldr	r2, [pc, #368]	; (8003260 <HAL_DMA_Abort_IT+0x1a0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d04a      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a5b      	ldr	r2, [pc, #364]	; (8003264 <HAL_DMA_Abort_IT+0x1a4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d045      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a59      	ldr	r2, [pc, #356]	; (8003268 <HAL_DMA_Abort_IT+0x1a8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d040      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a58      	ldr	r2, [pc, #352]	; (800326c <HAL_DMA_Abort_IT+0x1ac>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d03b      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a56      	ldr	r2, [pc, #344]	; (8003270 <HAL_DMA_Abort_IT+0x1b0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d036      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a55      	ldr	r2, [pc, #340]	; (8003274 <HAL_DMA_Abort_IT+0x1b4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d031      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a53      	ldr	r2, [pc, #332]	; (8003278 <HAL_DMA_Abort_IT+0x1b8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d02c      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a52      	ldr	r2, [pc, #328]	; (800327c <HAL_DMA_Abort_IT+0x1bc>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d027      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a50      	ldr	r2, [pc, #320]	; (8003280 <HAL_DMA_Abort_IT+0x1c0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d022      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a4f      	ldr	r2, [pc, #316]	; (8003284 <HAL_DMA_Abort_IT+0x1c4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d01d      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a4d      	ldr	r2, [pc, #308]	; (8003288 <HAL_DMA_Abort_IT+0x1c8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d018      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a4c      	ldr	r2, [pc, #304]	; (800328c <HAL_DMA_Abort_IT+0x1cc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d013      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a4a      	ldr	r2, [pc, #296]	; (8003290 <HAL_DMA_Abort_IT+0x1d0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00e      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a49      	ldr	r2, [pc, #292]	; (8003294 <HAL_DMA_Abort_IT+0x1d4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d009      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a47      	ldr	r2, [pc, #284]	; (8003298 <HAL_DMA_Abort_IT+0x1d8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d004      	beq.n	8003188 <HAL_DMA_Abort_IT+0xc8>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a46      	ldr	r2, [pc, #280]	; (800329c <HAL_DMA_Abort_IT+0x1dc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d101      	bne.n	800318c <HAL_DMA_Abort_IT+0xcc>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <HAL_DMA_Abort_IT+0xce>
 800318c:	2300      	movs	r3, #0
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8086 	beq.w	80032a0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2204      	movs	r2, #4
 8003198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a2f      	ldr	r2, [pc, #188]	; (8003260 <HAL_DMA_Abort_IT+0x1a0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d04a      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a2e      	ldr	r2, [pc, #184]	; (8003264 <HAL_DMA_Abort_IT+0x1a4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d045      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a2c      	ldr	r2, [pc, #176]	; (8003268 <HAL_DMA_Abort_IT+0x1a8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d040      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a2b      	ldr	r2, [pc, #172]	; (800326c <HAL_DMA_Abort_IT+0x1ac>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d03b      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a29      	ldr	r2, [pc, #164]	; (8003270 <HAL_DMA_Abort_IT+0x1b0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d036      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a28      	ldr	r2, [pc, #160]	; (8003274 <HAL_DMA_Abort_IT+0x1b4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d031      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a26      	ldr	r2, [pc, #152]	; (8003278 <HAL_DMA_Abort_IT+0x1b8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d02c      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a25      	ldr	r2, [pc, #148]	; (800327c <HAL_DMA_Abort_IT+0x1bc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d027      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a23      	ldr	r2, [pc, #140]	; (8003280 <HAL_DMA_Abort_IT+0x1c0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d022      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a22      	ldr	r2, [pc, #136]	; (8003284 <HAL_DMA_Abort_IT+0x1c4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d01d      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a20      	ldr	r2, [pc, #128]	; (8003288 <HAL_DMA_Abort_IT+0x1c8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d018      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1f      	ldr	r2, [pc, #124]	; (800328c <HAL_DMA_Abort_IT+0x1cc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d013      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1d      	ldr	r2, [pc, #116]	; (8003290 <HAL_DMA_Abort_IT+0x1d0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00e      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1c      	ldr	r2, [pc, #112]	; (8003294 <HAL_DMA_Abort_IT+0x1d4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d009      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1a      	ldr	r2, [pc, #104]	; (8003298 <HAL_DMA_Abort_IT+0x1d8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d004      	beq.n	800323c <HAL_DMA_Abort_IT+0x17c>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a19      	ldr	r2, [pc, #100]	; (800329c <HAL_DMA_Abort_IT+0x1dc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d108      	bne.n	800324e <HAL_DMA_Abort_IT+0x18e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0201 	bic.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	e178      	b.n	8003540 <HAL_DMA_Abort_IT+0x480>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0201 	bic.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	e16f      	b.n	8003540 <HAL_DMA_Abort_IT+0x480>
 8003260:	40020010 	.word	0x40020010
 8003264:	40020028 	.word	0x40020028
 8003268:	40020040 	.word	0x40020040
 800326c:	40020058 	.word	0x40020058
 8003270:	40020070 	.word	0x40020070
 8003274:	40020088 	.word	0x40020088
 8003278:	400200a0 	.word	0x400200a0
 800327c:	400200b8 	.word	0x400200b8
 8003280:	40020410 	.word	0x40020410
 8003284:	40020428 	.word	0x40020428
 8003288:	40020440 	.word	0x40020440
 800328c:	40020458 	.word	0x40020458
 8003290:	40020470 	.word	0x40020470
 8003294:	40020488 	.word	0x40020488
 8003298:	400204a0 	.word	0x400204a0
 800329c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 020e 	bic.w	r2, r2, #14
 80032ae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a6c      	ldr	r2, [pc, #432]	; (8003468 <HAL_DMA_Abort_IT+0x3a8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d04a      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a6b      	ldr	r2, [pc, #428]	; (800346c <HAL_DMA_Abort_IT+0x3ac>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d045      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a69      	ldr	r2, [pc, #420]	; (8003470 <HAL_DMA_Abort_IT+0x3b0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d040      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a68      	ldr	r2, [pc, #416]	; (8003474 <HAL_DMA_Abort_IT+0x3b4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d03b      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a66      	ldr	r2, [pc, #408]	; (8003478 <HAL_DMA_Abort_IT+0x3b8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d036      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a65      	ldr	r2, [pc, #404]	; (800347c <HAL_DMA_Abort_IT+0x3bc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d031      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a63      	ldr	r2, [pc, #396]	; (8003480 <HAL_DMA_Abort_IT+0x3c0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d02c      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a62      	ldr	r2, [pc, #392]	; (8003484 <HAL_DMA_Abort_IT+0x3c4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d027      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a60      	ldr	r2, [pc, #384]	; (8003488 <HAL_DMA_Abort_IT+0x3c8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d022      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a5f      	ldr	r2, [pc, #380]	; (800348c <HAL_DMA_Abort_IT+0x3cc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d01d      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a5d      	ldr	r2, [pc, #372]	; (8003490 <HAL_DMA_Abort_IT+0x3d0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d018      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a5c      	ldr	r2, [pc, #368]	; (8003494 <HAL_DMA_Abort_IT+0x3d4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d013      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a5a      	ldr	r2, [pc, #360]	; (8003498 <HAL_DMA_Abort_IT+0x3d8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00e      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a59      	ldr	r2, [pc, #356]	; (800349c <HAL_DMA_Abort_IT+0x3dc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d009      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a57      	ldr	r2, [pc, #348]	; (80034a0 <HAL_DMA_Abort_IT+0x3e0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d004      	beq.n	8003350 <HAL_DMA_Abort_IT+0x290>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a56      	ldr	r2, [pc, #344]	; (80034a4 <HAL_DMA_Abort_IT+0x3e4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d108      	bne.n	8003362 <HAL_DMA_Abort_IT+0x2a2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0201 	bic.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	e007      	b.n	8003372 <HAL_DMA_Abort_IT+0x2b2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0201 	bic.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a3c      	ldr	r2, [pc, #240]	; (8003468 <HAL_DMA_Abort_IT+0x3a8>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d072      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a3a      	ldr	r2, [pc, #232]	; (800346c <HAL_DMA_Abort_IT+0x3ac>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d06d      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a39      	ldr	r2, [pc, #228]	; (8003470 <HAL_DMA_Abort_IT+0x3b0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d068      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a37      	ldr	r2, [pc, #220]	; (8003474 <HAL_DMA_Abort_IT+0x3b4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d063      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a36      	ldr	r2, [pc, #216]	; (8003478 <HAL_DMA_Abort_IT+0x3b8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d05e      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a34      	ldr	r2, [pc, #208]	; (800347c <HAL_DMA_Abort_IT+0x3bc>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d059      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a33      	ldr	r2, [pc, #204]	; (8003480 <HAL_DMA_Abort_IT+0x3c0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d054      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a31      	ldr	r2, [pc, #196]	; (8003484 <HAL_DMA_Abort_IT+0x3c4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d04f      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a30      	ldr	r2, [pc, #192]	; (8003488 <HAL_DMA_Abort_IT+0x3c8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d04a      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a2e      	ldr	r2, [pc, #184]	; (800348c <HAL_DMA_Abort_IT+0x3cc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d045      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a2d      	ldr	r2, [pc, #180]	; (8003490 <HAL_DMA_Abort_IT+0x3d0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d040      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a2b      	ldr	r2, [pc, #172]	; (8003494 <HAL_DMA_Abort_IT+0x3d4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d03b      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a2a      	ldr	r2, [pc, #168]	; (8003498 <HAL_DMA_Abort_IT+0x3d8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d036      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a28      	ldr	r2, [pc, #160]	; (800349c <HAL_DMA_Abort_IT+0x3dc>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d031      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a27      	ldr	r2, [pc, #156]	; (80034a0 <HAL_DMA_Abort_IT+0x3e0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d02c      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a25      	ldr	r2, [pc, #148]	; (80034a4 <HAL_DMA_Abort_IT+0x3e4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d027      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a24      	ldr	r2, [pc, #144]	; (80034a8 <HAL_DMA_Abort_IT+0x3e8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d022      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a22      	ldr	r2, [pc, #136]	; (80034ac <HAL_DMA_Abort_IT+0x3ec>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d01d      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a21      	ldr	r2, [pc, #132]	; (80034b0 <HAL_DMA_Abort_IT+0x3f0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d018      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a1f      	ldr	r2, [pc, #124]	; (80034b4 <HAL_DMA_Abort_IT+0x3f4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1e      	ldr	r2, [pc, #120]	; (80034b8 <HAL_DMA_Abort_IT+0x3f8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00e      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1c      	ldr	r2, [pc, #112]	; (80034bc <HAL_DMA_Abort_IT+0x3fc>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d009      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1b      	ldr	r2, [pc, #108]	; (80034c0 <HAL_DMA_Abort_IT+0x400>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d004      	beq.n	8003462 <HAL_DMA_Abort_IT+0x3a2>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a19      	ldr	r2, [pc, #100]	; (80034c4 <HAL_DMA_Abort_IT+0x404>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d132      	bne.n	80034c8 <HAL_DMA_Abort_IT+0x408>
 8003462:	2301      	movs	r3, #1
 8003464:	e031      	b.n	80034ca <HAL_DMA_Abort_IT+0x40a>
 8003466:	bf00      	nop
 8003468:	40020010 	.word	0x40020010
 800346c:	40020028 	.word	0x40020028
 8003470:	40020040 	.word	0x40020040
 8003474:	40020058 	.word	0x40020058
 8003478:	40020070 	.word	0x40020070
 800347c:	40020088 	.word	0x40020088
 8003480:	400200a0 	.word	0x400200a0
 8003484:	400200b8 	.word	0x400200b8
 8003488:	40020410 	.word	0x40020410
 800348c:	40020428 	.word	0x40020428
 8003490:	40020440 	.word	0x40020440
 8003494:	40020458 	.word	0x40020458
 8003498:	40020470 	.word	0x40020470
 800349c:	40020488 	.word	0x40020488
 80034a0:	400204a0 	.word	0x400204a0
 80034a4:	400204b8 	.word	0x400204b8
 80034a8:	58025408 	.word	0x58025408
 80034ac:	5802541c 	.word	0x5802541c
 80034b0:	58025430 	.word	0x58025430
 80034b4:	58025444 	.word	0x58025444
 80034b8:	58025458 	.word	0x58025458
 80034bc:	5802546c 	.word	0x5802546c
 80034c0:	58025480 	.word	0x58025480
 80034c4:	58025494 	.word	0x58025494
 80034c8:	2300      	movs	r3, #0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d028      	beq.n	8003520 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034dc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	2201      	movs	r2, #1
 80034ee:	409a      	lsls	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80034fc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00c      	beq.n	8003520 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003514:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800351e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop

0800354c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003558:	4b67      	ldr	r3, [pc, #412]	; (80036f8 <HAL_DMA_IRQHandler+0x1ac>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a67      	ldr	r2, [pc, #412]	; (80036fc <HAL_DMA_IRQHandler+0x1b0>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	0a9b      	lsrs	r3, r3, #10
 8003564:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a5f      	ldr	r2, [pc, #380]	; (8003700 <HAL_DMA_IRQHandler+0x1b4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d04a      	beq.n	800361e <HAL_DMA_IRQHandler+0xd2>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a5d      	ldr	r2, [pc, #372]	; (8003704 <HAL_DMA_IRQHandler+0x1b8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d045      	beq.n	800361e <HAL_DMA_IRQHandler+0xd2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a5c      	ldr	r2, [pc, #368]	; (8003708 <HAL_DMA_IRQHandler+0x1bc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d040      	beq.n	800361e <HAL_DMA_IRQHandler+0xd2>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a5a      	ldr	r2, [pc, #360]	; (800370c <HAL_DMA_IRQHandler+0x1c0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d03b      	beq.n	800361e <HAL_DMA_IRQHandler+0xd2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a59      	ldr	r2, [pc, #356]	; (8003710 <HAL_DMA_IRQHandler+0x1c4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d036      	beq.n	800361e <HAL_DMA_IRQHandler+0xd2>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a57      	ldr	r2, [pc, #348]	; (8003714 <HAL_DMA_IRQHandler+0x1c8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d031      	beq.n	800361e <HAL_DMA_IRQHandler+0xd2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a56      	ldr	r2, [pc, #344]	; (8003718 <HAL_DMA_IRQHandler+0x1cc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d02c      	beq.n	800361e <HAL_DMA_IRQHandler+0xd2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a54      	ldr	r2, [pc, #336]	; (800371c <HAL_DMA_IRQHandler+0x1d0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d027      	beq.n	800361e <HAL_DMA_IRQHandler+0xd2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a53      	ldr	r2, [pc, #332]	; (8003720 <HAL_DMA_IRQHandler+0x1d4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d022      	beq.n	800361e <HAL_DMA_IRQHandler+0xd2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a51      	ldr	r2, [pc, #324]	; (8003724 <HAL_DMA_IRQHandler+0x1d8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d01d      	beq.n	800361e <HAL_DMA_IRQHandler+0xd2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a50      	ldr	r2, [pc, #320]	; (8003728 <HAL_DMA_IRQHandler+0x1dc>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d018      	beq.n	800361e <HAL_DMA_IRQHandler+0xd2>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a4e      	ldr	r2, [pc, #312]	; (800372c <HAL_DMA_IRQHandler+0x1e0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <HAL_DMA_IRQHandler+0xd2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a4d      	ldr	r2, [pc, #308]	; (8003730 <HAL_DMA_IRQHandler+0x1e4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00e      	beq.n	800361e <HAL_DMA_IRQHandler+0xd2>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a4b      	ldr	r2, [pc, #300]	; (8003734 <HAL_DMA_IRQHandler+0x1e8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d009      	beq.n	800361e <HAL_DMA_IRQHandler+0xd2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a4a      	ldr	r2, [pc, #296]	; (8003738 <HAL_DMA_IRQHandler+0x1ec>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d004      	beq.n	800361e <HAL_DMA_IRQHandler+0xd2>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a48      	ldr	r2, [pc, #288]	; (800373c <HAL_DMA_IRQHandler+0x1f0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_DMA_IRQHandler+0xd6>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_DMA_IRQHandler+0xd8>
 8003622:	2300      	movs	r3, #0
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 842b 	beq.w	8003e80 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	2208      	movs	r2, #8
 8003634:	409a      	lsls	r2, r3
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 80a2 	beq.w	8003784 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a2e      	ldr	r2, [pc, #184]	; (8003700 <HAL_DMA_IRQHandler+0x1b4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d04a      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x194>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a2d      	ldr	r2, [pc, #180]	; (8003704 <HAL_DMA_IRQHandler+0x1b8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d045      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x194>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a2b      	ldr	r2, [pc, #172]	; (8003708 <HAL_DMA_IRQHandler+0x1bc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d040      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x194>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a2a      	ldr	r2, [pc, #168]	; (800370c <HAL_DMA_IRQHandler+0x1c0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d03b      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x194>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a28      	ldr	r2, [pc, #160]	; (8003710 <HAL_DMA_IRQHandler+0x1c4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d036      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x194>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a27      	ldr	r2, [pc, #156]	; (8003714 <HAL_DMA_IRQHandler+0x1c8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d031      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x194>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a25      	ldr	r2, [pc, #148]	; (8003718 <HAL_DMA_IRQHandler+0x1cc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d02c      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x194>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a24      	ldr	r2, [pc, #144]	; (800371c <HAL_DMA_IRQHandler+0x1d0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d027      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x194>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a22      	ldr	r2, [pc, #136]	; (8003720 <HAL_DMA_IRQHandler+0x1d4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d022      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x194>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a21      	ldr	r2, [pc, #132]	; (8003724 <HAL_DMA_IRQHandler+0x1d8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d01d      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x194>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1f      	ldr	r2, [pc, #124]	; (8003728 <HAL_DMA_IRQHandler+0x1dc>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d018      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x194>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1e      	ldr	r2, [pc, #120]	; (800372c <HAL_DMA_IRQHandler+0x1e0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d013      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x194>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1c      	ldr	r2, [pc, #112]	; (8003730 <HAL_DMA_IRQHandler+0x1e4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00e      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x194>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1b      	ldr	r2, [pc, #108]	; (8003734 <HAL_DMA_IRQHandler+0x1e8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d009      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x194>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a19      	ldr	r2, [pc, #100]	; (8003738 <HAL_DMA_IRQHandler+0x1ec>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d004      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x194>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a18      	ldr	r2, [pc, #96]	; (800373c <HAL_DMA_IRQHandler+0x1f0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d12f      	bne.n	8003740 <HAL_DMA_IRQHandler+0x1f4>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	bf14      	ite	ne
 80036ee:	2301      	movne	r3, #1
 80036f0:	2300      	moveq	r3, #0
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	e02e      	b.n	8003754 <HAL_DMA_IRQHandler+0x208>
 80036f6:	bf00      	nop
 80036f8:	24000028 	.word	0x24000028
 80036fc:	1b4e81b5 	.word	0x1b4e81b5
 8003700:	40020010 	.word	0x40020010
 8003704:	40020028 	.word	0x40020028
 8003708:	40020040 	.word	0x40020040
 800370c:	40020058 	.word	0x40020058
 8003710:	40020070 	.word	0x40020070
 8003714:	40020088 	.word	0x40020088
 8003718:	400200a0 	.word	0x400200a0
 800371c:	400200b8 	.word	0x400200b8
 8003720:	40020410 	.word	0x40020410
 8003724:	40020428 	.word	0x40020428
 8003728:	40020440 	.word	0x40020440
 800372c:	40020458 	.word	0x40020458
 8003730:	40020470 	.word	0x40020470
 8003734:	40020488 	.word	0x40020488
 8003738:	400204a0 	.word	0x400204a0
 800373c:	400204b8 	.word	0x400204b8
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	bf14      	ite	ne
 800374e:	2301      	movne	r3, #1
 8003750:	2300      	moveq	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d015      	beq.n	8003784 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0204 	bic.w	r2, r2, #4
 8003766:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	2208      	movs	r2, #8
 8003772:	409a      	lsls	r2, r3
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377c:	f043 0201 	orr.w	r2, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	fa22 f303 	lsr.w	r3, r2, r3
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d06e      	beq.n	8003878 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a69      	ldr	r2, [pc, #420]	; (8003944 <HAL_DMA_IRQHandler+0x3f8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d04a      	beq.n	800383a <HAL_DMA_IRQHandler+0x2ee>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a67      	ldr	r2, [pc, #412]	; (8003948 <HAL_DMA_IRQHandler+0x3fc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d045      	beq.n	800383a <HAL_DMA_IRQHandler+0x2ee>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a66      	ldr	r2, [pc, #408]	; (800394c <HAL_DMA_IRQHandler+0x400>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d040      	beq.n	800383a <HAL_DMA_IRQHandler+0x2ee>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a64      	ldr	r2, [pc, #400]	; (8003950 <HAL_DMA_IRQHandler+0x404>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d03b      	beq.n	800383a <HAL_DMA_IRQHandler+0x2ee>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a63      	ldr	r2, [pc, #396]	; (8003954 <HAL_DMA_IRQHandler+0x408>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d036      	beq.n	800383a <HAL_DMA_IRQHandler+0x2ee>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a61      	ldr	r2, [pc, #388]	; (8003958 <HAL_DMA_IRQHandler+0x40c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d031      	beq.n	800383a <HAL_DMA_IRQHandler+0x2ee>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a60      	ldr	r2, [pc, #384]	; (800395c <HAL_DMA_IRQHandler+0x410>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d02c      	beq.n	800383a <HAL_DMA_IRQHandler+0x2ee>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a5e      	ldr	r2, [pc, #376]	; (8003960 <HAL_DMA_IRQHandler+0x414>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d027      	beq.n	800383a <HAL_DMA_IRQHandler+0x2ee>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a5d      	ldr	r2, [pc, #372]	; (8003964 <HAL_DMA_IRQHandler+0x418>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d022      	beq.n	800383a <HAL_DMA_IRQHandler+0x2ee>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a5b      	ldr	r2, [pc, #364]	; (8003968 <HAL_DMA_IRQHandler+0x41c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d01d      	beq.n	800383a <HAL_DMA_IRQHandler+0x2ee>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a5a      	ldr	r2, [pc, #360]	; (800396c <HAL_DMA_IRQHandler+0x420>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d018      	beq.n	800383a <HAL_DMA_IRQHandler+0x2ee>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a58      	ldr	r2, [pc, #352]	; (8003970 <HAL_DMA_IRQHandler+0x424>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d013      	beq.n	800383a <HAL_DMA_IRQHandler+0x2ee>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a57      	ldr	r2, [pc, #348]	; (8003974 <HAL_DMA_IRQHandler+0x428>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00e      	beq.n	800383a <HAL_DMA_IRQHandler+0x2ee>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a55      	ldr	r2, [pc, #340]	; (8003978 <HAL_DMA_IRQHandler+0x42c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d009      	beq.n	800383a <HAL_DMA_IRQHandler+0x2ee>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a54      	ldr	r2, [pc, #336]	; (800397c <HAL_DMA_IRQHandler+0x430>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d004      	beq.n	800383a <HAL_DMA_IRQHandler+0x2ee>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a52      	ldr	r2, [pc, #328]	; (8003980 <HAL_DMA_IRQHandler+0x434>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d10a      	bne.n	8003850 <HAL_DMA_IRQHandler+0x304>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf14      	ite	ne
 8003848:	2301      	movne	r3, #1
 800384a:	2300      	moveq	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	e003      	b.n	8003858 <HAL_DMA_IRQHandler+0x30c>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2300      	movs	r3, #0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00d      	beq.n	8003878 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	2201      	movs	r2, #1
 8003866:	409a      	lsls	r2, r3
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003870:	f043 0202 	orr.w	r2, r3, #2
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	2204      	movs	r2, #4
 8003882:	409a      	lsls	r2, r3
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	4013      	ands	r3, r2
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 808f 	beq.w	80039ac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a2c      	ldr	r2, [pc, #176]	; (8003944 <HAL_DMA_IRQHandler+0x3f8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d04a      	beq.n	800392e <HAL_DMA_IRQHandler+0x3e2>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a2a      	ldr	r2, [pc, #168]	; (8003948 <HAL_DMA_IRQHandler+0x3fc>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d045      	beq.n	800392e <HAL_DMA_IRQHandler+0x3e2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a29      	ldr	r2, [pc, #164]	; (800394c <HAL_DMA_IRQHandler+0x400>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d040      	beq.n	800392e <HAL_DMA_IRQHandler+0x3e2>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a27      	ldr	r2, [pc, #156]	; (8003950 <HAL_DMA_IRQHandler+0x404>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d03b      	beq.n	800392e <HAL_DMA_IRQHandler+0x3e2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a26      	ldr	r2, [pc, #152]	; (8003954 <HAL_DMA_IRQHandler+0x408>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d036      	beq.n	800392e <HAL_DMA_IRQHandler+0x3e2>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a24      	ldr	r2, [pc, #144]	; (8003958 <HAL_DMA_IRQHandler+0x40c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d031      	beq.n	800392e <HAL_DMA_IRQHandler+0x3e2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a23      	ldr	r2, [pc, #140]	; (800395c <HAL_DMA_IRQHandler+0x410>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d02c      	beq.n	800392e <HAL_DMA_IRQHandler+0x3e2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a21      	ldr	r2, [pc, #132]	; (8003960 <HAL_DMA_IRQHandler+0x414>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d027      	beq.n	800392e <HAL_DMA_IRQHandler+0x3e2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a20      	ldr	r2, [pc, #128]	; (8003964 <HAL_DMA_IRQHandler+0x418>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d022      	beq.n	800392e <HAL_DMA_IRQHandler+0x3e2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1e      	ldr	r2, [pc, #120]	; (8003968 <HAL_DMA_IRQHandler+0x41c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01d      	beq.n	800392e <HAL_DMA_IRQHandler+0x3e2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1d      	ldr	r2, [pc, #116]	; (800396c <HAL_DMA_IRQHandler+0x420>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d018      	beq.n	800392e <HAL_DMA_IRQHandler+0x3e2>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1b      	ldr	r2, [pc, #108]	; (8003970 <HAL_DMA_IRQHandler+0x424>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d013      	beq.n	800392e <HAL_DMA_IRQHandler+0x3e2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1a      	ldr	r2, [pc, #104]	; (8003974 <HAL_DMA_IRQHandler+0x428>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00e      	beq.n	800392e <HAL_DMA_IRQHandler+0x3e2>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a18      	ldr	r2, [pc, #96]	; (8003978 <HAL_DMA_IRQHandler+0x42c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d009      	beq.n	800392e <HAL_DMA_IRQHandler+0x3e2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a17      	ldr	r2, [pc, #92]	; (800397c <HAL_DMA_IRQHandler+0x430>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d004      	beq.n	800392e <HAL_DMA_IRQHandler+0x3e2>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a15      	ldr	r2, [pc, #84]	; (8003980 <HAL_DMA_IRQHandler+0x434>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d12a      	bne.n	8003984 <HAL_DMA_IRQHandler+0x438>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf14      	ite	ne
 800393c:	2301      	movne	r3, #1
 800393e:	2300      	moveq	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e023      	b.n	800398c <HAL_DMA_IRQHandler+0x440>
 8003944:	40020010 	.word	0x40020010
 8003948:	40020028 	.word	0x40020028
 800394c:	40020040 	.word	0x40020040
 8003950:	40020058 	.word	0x40020058
 8003954:	40020070 	.word	0x40020070
 8003958:	40020088 	.word	0x40020088
 800395c:	400200a0 	.word	0x400200a0
 8003960:	400200b8 	.word	0x400200b8
 8003964:	40020410 	.word	0x40020410
 8003968:	40020428 	.word	0x40020428
 800396c:	40020440 	.word	0x40020440
 8003970:	40020458 	.word	0x40020458
 8003974:	40020470 	.word	0x40020470
 8003978:	40020488 	.word	0x40020488
 800397c:	400204a0 	.word	0x400204a0
 8003980:	400204b8 	.word	0x400204b8
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2300      	movs	r3, #0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00d      	beq.n	80039ac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	2204      	movs	r2, #4
 800399a:	409a      	lsls	r2, r3
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	f043 0204 	orr.w	r2, r3, #4
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	2210      	movs	r2, #16
 80039b6:	409a      	lsls	r2, r3
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 80a6 	beq.w	8003b0e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a85      	ldr	r2, [pc, #532]	; (8003bdc <HAL_DMA_IRQHandler+0x690>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d04a      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x516>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a83      	ldr	r2, [pc, #524]	; (8003be0 <HAL_DMA_IRQHandler+0x694>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d045      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x516>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a82      	ldr	r2, [pc, #520]	; (8003be4 <HAL_DMA_IRQHandler+0x698>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d040      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x516>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a80      	ldr	r2, [pc, #512]	; (8003be8 <HAL_DMA_IRQHandler+0x69c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d03b      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x516>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a7f      	ldr	r2, [pc, #508]	; (8003bec <HAL_DMA_IRQHandler+0x6a0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d036      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x516>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a7d      	ldr	r2, [pc, #500]	; (8003bf0 <HAL_DMA_IRQHandler+0x6a4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d031      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x516>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a7c      	ldr	r2, [pc, #496]	; (8003bf4 <HAL_DMA_IRQHandler+0x6a8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d02c      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x516>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a7a      	ldr	r2, [pc, #488]	; (8003bf8 <HAL_DMA_IRQHandler+0x6ac>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d027      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x516>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a79      	ldr	r2, [pc, #484]	; (8003bfc <HAL_DMA_IRQHandler+0x6b0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d022      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x516>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a77      	ldr	r2, [pc, #476]	; (8003c00 <HAL_DMA_IRQHandler+0x6b4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d01d      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x516>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a76      	ldr	r2, [pc, #472]	; (8003c04 <HAL_DMA_IRQHandler+0x6b8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d018      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x516>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a74      	ldr	r2, [pc, #464]	; (8003c08 <HAL_DMA_IRQHandler+0x6bc>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d013      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x516>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a73      	ldr	r2, [pc, #460]	; (8003c0c <HAL_DMA_IRQHandler+0x6c0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d00e      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x516>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a71      	ldr	r2, [pc, #452]	; (8003c10 <HAL_DMA_IRQHandler+0x6c4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d009      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x516>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a70      	ldr	r2, [pc, #448]	; (8003c14 <HAL_DMA_IRQHandler+0x6c8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d004      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x516>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a6e      	ldr	r2, [pc, #440]	; (8003c18 <HAL_DMA_IRQHandler+0x6cc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d10a      	bne.n	8003a78 <HAL_DMA_IRQHandler+0x52c>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf14      	ite	ne
 8003a70:	2301      	movne	r3, #1
 8003a72:	2300      	moveq	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	e009      	b.n	8003a8c <HAL_DMA_IRQHandler+0x540>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	bf14      	ite	ne
 8003a86:	2301      	movne	r3, #1
 8003a88:	2300      	moveq	r3, #0
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d03e      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	2210      	movs	r2, #16
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d018      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d108      	bne.n	8003ace <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d024      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	4798      	blx	r3
 8003acc:	e01f      	b.n	8003b0e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d01b      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	4798      	blx	r3
 8003ade:	e016      	b.n	8003b0e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d107      	bne.n	8003afe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0208 	bic.w	r2, r2, #8
 8003afc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b12:	f003 031f 	and.w	r3, r3, #31
 8003b16:	2220      	movs	r2, #32
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8110 	beq.w	8003d44 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a2c      	ldr	r2, [pc, #176]	; (8003bdc <HAL_DMA_IRQHandler+0x690>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d04a      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x678>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a2b      	ldr	r2, [pc, #172]	; (8003be0 <HAL_DMA_IRQHandler+0x694>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d045      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x678>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a29      	ldr	r2, [pc, #164]	; (8003be4 <HAL_DMA_IRQHandler+0x698>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d040      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x678>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a28      	ldr	r2, [pc, #160]	; (8003be8 <HAL_DMA_IRQHandler+0x69c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d03b      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x678>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a26      	ldr	r2, [pc, #152]	; (8003bec <HAL_DMA_IRQHandler+0x6a0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d036      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x678>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a25      	ldr	r2, [pc, #148]	; (8003bf0 <HAL_DMA_IRQHandler+0x6a4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d031      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x678>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a23      	ldr	r2, [pc, #140]	; (8003bf4 <HAL_DMA_IRQHandler+0x6a8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d02c      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x678>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a22      	ldr	r2, [pc, #136]	; (8003bf8 <HAL_DMA_IRQHandler+0x6ac>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d027      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x678>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a20      	ldr	r2, [pc, #128]	; (8003bfc <HAL_DMA_IRQHandler+0x6b0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d022      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x678>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a1f      	ldr	r2, [pc, #124]	; (8003c00 <HAL_DMA_IRQHandler+0x6b4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d01d      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x678>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <HAL_DMA_IRQHandler+0x6b8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d018      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x678>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a1c      	ldr	r2, [pc, #112]	; (8003c08 <HAL_DMA_IRQHandler+0x6bc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d013      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x678>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a1a      	ldr	r2, [pc, #104]	; (8003c0c <HAL_DMA_IRQHandler+0x6c0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00e      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x678>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a19      	ldr	r2, [pc, #100]	; (8003c10 <HAL_DMA_IRQHandler+0x6c4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d009      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x678>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a17      	ldr	r2, [pc, #92]	; (8003c14 <HAL_DMA_IRQHandler+0x6c8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d004      	beq.n	8003bc4 <HAL_DMA_IRQHandler+0x678>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a16      	ldr	r2, [pc, #88]	; (8003c18 <HAL_DMA_IRQHandler+0x6cc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d12b      	bne.n	8003c1c <HAL_DMA_IRQHandler+0x6d0>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	bf14      	ite	ne
 8003bd2:	2301      	movne	r3, #1
 8003bd4:	2300      	moveq	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	e02a      	b.n	8003c30 <HAL_DMA_IRQHandler+0x6e4>
 8003bda:	bf00      	nop
 8003bdc:	40020010 	.word	0x40020010
 8003be0:	40020028 	.word	0x40020028
 8003be4:	40020040 	.word	0x40020040
 8003be8:	40020058 	.word	0x40020058
 8003bec:	40020070 	.word	0x40020070
 8003bf0:	40020088 	.word	0x40020088
 8003bf4:	400200a0 	.word	0x400200a0
 8003bf8:	400200b8 	.word	0x400200b8
 8003bfc:	40020410 	.word	0x40020410
 8003c00:	40020428 	.word	0x40020428
 8003c04:	40020440 	.word	0x40020440
 8003c08:	40020458 	.word	0x40020458
 8003c0c:	40020470 	.word	0x40020470
 8003c10:	40020488 	.word	0x40020488
 8003c14:	400204a0 	.word	0x400204a0
 8003c18:	400204b8 	.word	0x400204b8
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bf14      	ite	ne
 8003c2a:	2301      	movne	r3, #1
 8003c2c:	2300      	moveq	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 8087 	beq.w	8003d44 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3a:	f003 031f 	and.w	r3, r3, #31
 8003c3e:	2220      	movs	r2, #32
 8003c40:	409a      	lsls	r2, r3
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d139      	bne.n	8003cc6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0216 	bic.w	r2, r2, #22
 8003c60:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695a      	ldr	r2, [r3, #20]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c70:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d103      	bne.n	8003c82 <HAL_DMA_IRQHandler+0x736>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0208 	bic.w	r2, r2, #8
 8003c90:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c96:	f003 031f 	and.w	r3, r3, #31
 8003c9a:	223f      	movs	r2, #63	; 0x3f
 8003c9c:	409a      	lsls	r2, r3
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 8382 	beq.w	80043c0 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4798      	blx	r3
          }
          return;
 8003cc4:	e37c      	b.n	80043c0 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d018      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d108      	bne.n	8003cf4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d02c      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4798      	blx	r3
 8003cf2:	e027      	b.n	8003d44 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d023      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	4798      	blx	r3
 8003d04:	e01e      	b.n	8003d44 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10f      	bne.n	8003d34 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0210 	bic.w	r2, r2, #16
 8003d22:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 833e 	beq.w	80043ca <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 8088 	beq.w	8003e6c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2204      	movs	r2, #4
 8003d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a89      	ldr	r2, [pc, #548]	; (8003f90 <HAL_DMA_IRQHandler+0xa44>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d04a      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x8b8>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a88      	ldr	r2, [pc, #544]	; (8003f94 <HAL_DMA_IRQHandler+0xa48>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d045      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x8b8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a86      	ldr	r2, [pc, #536]	; (8003f98 <HAL_DMA_IRQHandler+0xa4c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d040      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x8b8>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a85      	ldr	r2, [pc, #532]	; (8003f9c <HAL_DMA_IRQHandler+0xa50>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d03b      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x8b8>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a83      	ldr	r2, [pc, #524]	; (8003fa0 <HAL_DMA_IRQHandler+0xa54>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d036      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x8b8>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a82      	ldr	r2, [pc, #520]	; (8003fa4 <HAL_DMA_IRQHandler+0xa58>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d031      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x8b8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a80      	ldr	r2, [pc, #512]	; (8003fa8 <HAL_DMA_IRQHandler+0xa5c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d02c      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x8b8>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a7f      	ldr	r2, [pc, #508]	; (8003fac <HAL_DMA_IRQHandler+0xa60>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d027      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x8b8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a7d      	ldr	r2, [pc, #500]	; (8003fb0 <HAL_DMA_IRQHandler+0xa64>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d022      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x8b8>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a7c      	ldr	r2, [pc, #496]	; (8003fb4 <HAL_DMA_IRQHandler+0xa68>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d01d      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x8b8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a7a      	ldr	r2, [pc, #488]	; (8003fb8 <HAL_DMA_IRQHandler+0xa6c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d018      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x8b8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a79      	ldr	r2, [pc, #484]	; (8003fbc <HAL_DMA_IRQHandler+0xa70>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d013      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x8b8>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a77      	ldr	r2, [pc, #476]	; (8003fc0 <HAL_DMA_IRQHandler+0xa74>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00e      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x8b8>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a76      	ldr	r2, [pc, #472]	; (8003fc4 <HAL_DMA_IRQHandler+0xa78>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d009      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x8b8>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a74      	ldr	r2, [pc, #464]	; (8003fc8 <HAL_DMA_IRQHandler+0xa7c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d004      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x8b8>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a73      	ldr	r2, [pc, #460]	; (8003fcc <HAL_DMA_IRQHandler+0xa80>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d108      	bne.n	8003e16 <HAL_DMA_IRQHandler+0x8ca>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0201 	bic.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	e007      	b.n	8003e26 <HAL_DMA_IRQHandler+0x8da>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0201 	bic.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d307      	bcc.n	8003e42 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1f2      	bne.n	8003e26 <HAL_DMA_IRQHandler+0x8da>
 8003e40:	e000      	b.n	8003e44 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003e42:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d004      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2203      	movs	r2, #3
 8003e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003e5a:	e003      	b.n	8003e64 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 82aa 	beq.w	80043ca <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	4798      	blx	r3
 8003e7e:	e2a4      	b.n	80043ca <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a52      	ldr	r2, [pc, #328]	; (8003fd0 <HAL_DMA_IRQHandler+0xa84>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d04a      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x9d4>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a51      	ldr	r2, [pc, #324]	; (8003fd4 <HAL_DMA_IRQHandler+0xa88>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d045      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x9d4>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a4f      	ldr	r2, [pc, #316]	; (8003fd8 <HAL_DMA_IRQHandler+0xa8c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d040      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x9d4>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a4e      	ldr	r2, [pc, #312]	; (8003fdc <HAL_DMA_IRQHandler+0xa90>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d03b      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x9d4>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a4c      	ldr	r2, [pc, #304]	; (8003fe0 <HAL_DMA_IRQHandler+0xa94>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d036      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x9d4>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a4b      	ldr	r2, [pc, #300]	; (8003fe4 <HAL_DMA_IRQHandler+0xa98>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d031      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x9d4>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a49      	ldr	r2, [pc, #292]	; (8003fe8 <HAL_DMA_IRQHandler+0xa9c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d02c      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x9d4>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a48      	ldr	r2, [pc, #288]	; (8003fec <HAL_DMA_IRQHandler+0xaa0>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d027      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x9d4>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a46      	ldr	r2, [pc, #280]	; (8003ff0 <HAL_DMA_IRQHandler+0xaa4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d022      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x9d4>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a45      	ldr	r2, [pc, #276]	; (8003ff4 <HAL_DMA_IRQHandler+0xaa8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d01d      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x9d4>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a43      	ldr	r2, [pc, #268]	; (8003ff8 <HAL_DMA_IRQHandler+0xaac>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d018      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x9d4>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a42      	ldr	r2, [pc, #264]	; (8003ffc <HAL_DMA_IRQHandler+0xab0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d013      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x9d4>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a40      	ldr	r2, [pc, #256]	; (8004000 <HAL_DMA_IRQHandler+0xab4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00e      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x9d4>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a3f      	ldr	r2, [pc, #252]	; (8004004 <HAL_DMA_IRQHandler+0xab8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d009      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x9d4>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a3d      	ldr	r2, [pc, #244]	; (8004008 <HAL_DMA_IRQHandler+0xabc>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d004      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x9d4>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a3c      	ldr	r2, [pc, #240]	; (800400c <HAL_DMA_IRQHandler+0xac0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d101      	bne.n	8003f24 <HAL_DMA_IRQHandler+0x9d8>
 8003f20:	2301      	movs	r3, #1
 8003f22:	e000      	b.n	8003f26 <HAL_DMA_IRQHandler+0x9da>
 8003f24:	2300      	movs	r3, #0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 824f 	beq.w	80043ca <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f38:	f003 031f 	and.w	r3, r3, #31
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 80dd 	beq.w	8004104 <HAL_DMA_IRQHandler+0xbb8>
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 80d7 	beq.w	8004104 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	2204      	movs	r2, #4
 8003f60:	409a      	lsls	r2, r3
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d059      	beq.n	8004024 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d14a      	bne.n	8004010 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 8220 	beq.w	80043c4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f8c:	e21a      	b.n	80043c4 <HAL_DMA_IRQHandler+0xe78>
 8003f8e:	bf00      	nop
 8003f90:	40020010 	.word	0x40020010
 8003f94:	40020028 	.word	0x40020028
 8003f98:	40020040 	.word	0x40020040
 8003f9c:	40020058 	.word	0x40020058
 8003fa0:	40020070 	.word	0x40020070
 8003fa4:	40020088 	.word	0x40020088
 8003fa8:	400200a0 	.word	0x400200a0
 8003fac:	400200b8 	.word	0x400200b8
 8003fb0:	40020410 	.word	0x40020410
 8003fb4:	40020428 	.word	0x40020428
 8003fb8:	40020440 	.word	0x40020440
 8003fbc:	40020458 	.word	0x40020458
 8003fc0:	40020470 	.word	0x40020470
 8003fc4:	40020488 	.word	0x40020488
 8003fc8:	400204a0 	.word	0x400204a0
 8003fcc:	400204b8 	.word	0x400204b8
 8003fd0:	48022c08 	.word	0x48022c08
 8003fd4:	48022c1c 	.word	0x48022c1c
 8003fd8:	48022c30 	.word	0x48022c30
 8003fdc:	48022c44 	.word	0x48022c44
 8003fe0:	48022c58 	.word	0x48022c58
 8003fe4:	48022c6c 	.word	0x48022c6c
 8003fe8:	48022c80 	.word	0x48022c80
 8003fec:	48022c94 	.word	0x48022c94
 8003ff0:	58025408 	.word	0x58025408
 8003ff4:	5802541c 	.word	0x5802541c
 8003ff8:	58025430 	.word	0x58025430
 8003ffc:	58025444 	.word	0x58025444
 8004000:	58025458 	.word	0x58025458
 8004004:	5802546c 	.word	0x5802546c
 8004008:	58025480 	.word	0x58025480
 800400c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 81d5 	beq.w	80043c4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004022:	e1cf      	b.n	80043c4 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d160      	bne.n	80040f0 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a7f      	ldr	r2, [pc, #508]	; (8004230 <HAL_DMA_IRQHandler+0xce4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d04a      	beq.n	80040ce <HAL_DMA_IRQHandler+0xb82>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a7d      	ldr	r2, [pc, #500]	; (8004234 <HAL_DMA_IRQHandler+0xce8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d045      	beq.n	80040ce <HAL_DMA_IRQHandler+0xb82>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a7c      	ldr	r2, [pc, #496]	; (8004238 <HAL_DMA_IRQHandler+0xcec>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d040      	beq.n	80040ce <HAL_DMA_IRQHandler+0xb82>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a7a      	ldr	r2, [pc, #488]	; (800423c <HAL_DMA_IRQHandler+0xcf0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d03b      	beq.n	80040ce <HAL_DMA_IRQHandler+0xb82>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a79      	ldr	r2, [pc, #484]	; (8004240 <HAL_DMA_IRQHandler+0xcf4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d036      	beq.n	80040ce <HAL_DMA_IRQHandler+0xb82>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a77      	ldr	r2, [pc, #476]	; (8004244 <HAL_DMA_IRQHandler+0xcf8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d031      	beq.n	80040ce <HAL_DMA_IRQHandler+0xb82>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a76      	ldr	r2, [pc, #472]	; (8004248 <HAL_DMA_IRQHandler+0xcfc>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d02c      	beq.n	80040ce <HAL_DMA_IRQHandler+0xb82>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a74      	ldr	r2, [pc, #464]	; (800424c <HAL_DMA_IRQHandler+0xd00>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d027      	beq.n	80040ce <HAL_DMA_IRQHandler+0xb82>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a73      	ldr	r2, [pc, #460]	; (8004250 <HAL_DMA_IRQHandler+0xd04>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d022      	beq.n	80040ce <HAL_DMA_IRQHandler+0xb82>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a71      	ldr	r2, [pc, #452]	; (8004254 <HAL_DMA_IRQHandler+0xd08>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d01d      	beq.n	80040ce <HAL_DMA_IRQHandler+0xb82>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a70      	ldr	r2, [pc, #448]	; (8004258 <HAL_DMA_IRQHandler+0xd0c>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d018      	beq.n	80040ce <HAL_DMA_IRQHandler+0xb82>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a6e      	ldr	r2, [pc, #440]	; (800425c <HAL_DMA_IRQHandler+0xd10>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d013      	beq.n	80040ce <HAL_DMA_IRQHandler+0xb82>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a6d      	ldr	r2, [pc, #436]	; (8004260 <HAL_DMA_IRQHandler+0xd14>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00e      	beq.n	80040ce <HAL_DMA_IRQHandler+0xb82>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a6b      	ldr	r2, [pc, #428]	; (8004264 <HAL_DMA_IRQHandler+0xd18>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d009      	beq.n	80040ce <HAL_DMA_IRQHandler+0xb82>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a6a      	ldr	r2, [pc, #424]	; (8004268 <HAL_DMA_IRQHandler+0xd1c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d004      	beq.n	80040ce <HAL_DMA_IRQHandler+0xb82>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a68      	ldr	r2, [pc, #416]	; (800426c <HAL_DMA_IRQHandler+0xd20>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d108      	bne.n	80040e0 <HAL_DMA_IRQHandler+0xb94>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0208 	bic.w	r2, r2, #8
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	e007      	b.n	80040f0 <HAL_DMA_IRQHandler+0xba4>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0204 	bic.w	r2, r2, #4
 80040ee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 8165 	beq.w	80043c4 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004102:	e15f      	b.n	80043c4 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	2202      	movs	r2, #2
 800410e:	409a      	lsls	r2, r3
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	4013      	ands	r3, r2
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 80c5 	beq.w	80042a4 <HAL_DMA_IRQHandler+0xd58>
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 80bf 	beq.w	80042a4 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412a:	f003 031f 	and.w	r3, r3, #31
 800412e:	2202      	movs	r2, #2
 8004130:	409a      	lsls	r2, r3
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d018      	beq.n	8004172 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 813a 	beq.w	80043c8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800415c:	e134      	b.n	80043c8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 8130 	beq.w	80043c8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004170:	e12a      	b.n	80043c8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	f040 8089 	bne.w	8004290 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a2b      	ldr	r2, [pc, #172]	; (8004230 <HAL_DMA_IRQHandler+0xce4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d04a      	beq.n	800421e <HAL_DMA_IRQHandler+0xcd2>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a29      	ldr	r2, [pc, #164]	; (8004234 <HAL_DMA_IRQHandler+0xce8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d045      	beq.n	800421e <HAL_DMA_IRQHandler+0xcd2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a28      	ldr	r2, [pc, #160]	; (8004238 <HAL_DMA_IRQHandler+0xcec>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d040      	beq.n	800421e <HAL_DMA_IRQHandler+0xcd2>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a26      	ldr	r2, [pc, #152]	; (800423c <HAL_DMA_IRQHandler+0xcf0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d03b      	beq.n	800421e <HAL_DMA_IRQHandler+0xcd2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a25      	ldr	r2, [pc, #148]	; (8004240 <HAL_DMA_IRQHandler+0xcf4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d036      	beq.n	800421e <HAL_DMA_IRQHandler+0xcd2>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a23      	ldr	r2, [pc, #140]	; (8004244 <HAL_DMA_IRQHandler+0xcf8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d031      	beq.n	800421e <HAL_DMA_IRQHandler+0xcd2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a22      	ldr	r2, [pc, #136]	; (8004248 <HAL_DMA_IRQHandler+0xcfc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d02c      	beq.n	800421e <HAL_DMA_IRQHandler+0xcd2>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a20      	ldr	r2, [pc, #128]	; (800424c <HAL_DMA_IRQHandler+0xd00>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d027      	beq.n	800421e <HAL_DMA_IRQHandler+0xcd2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a1f      	ldr	r2, [pc, #124]	; (8004250 <HAL_DMA_IRQHandler+0xd04>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d022      	beq.n	800421e <HAL_DMA_IRQHandler+0xcd2>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1d      	ldr	r2, [pc, #116]	; (8004254 <HAL_DMA_IRQHandler+0xd08>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01d      	beq.n	800421e <HAL_DMA_IRQHandler+0xcd2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a1c      	ldr	r2, [pc, #112]	; (8004258 <HAL_DMA_IRQHandler+0xd0c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d018      	beq.n	800421e <HAL_DMA_IRQHandler+0xcd2>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1a      	ldr	r2, [pc, #104]	; (800425c <HAL_DMA_IRQHandler+0xd10>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d013      	beq.n	800421e <HAL_DMA_IRQHandler+0xcd2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a19      	ldr	r2, [pc, #100]	; (8004260 <HAL_DMA_IRQHandler+0xd14>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00e      	beq.n	800421e <HAL_DMA_IRQHandler+0xcd2>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a17      	ldr	r2, [pc, #92]	; (8004264 <HAL_DMA_IRQHandler+0xd18>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d009      	beq.n	800421e <HAL_DMA_IRQHandler+0xcd2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a16      	ldr	r2, [pc, #88]	; (8004268 <HAL_DMA_IRQHandler+0xd1c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d004      	beq.n	800421e <HAL_DMA_IRQHandler+0xcd2>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a14      	ldr	r2, [pc, #80]	; (800426c <HAL_DMA_IRQHandler+0xd20>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d128      	bne.n	8004270 <HAL_DMA_IRQHandler+0xd24>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0214 	bic.w	r2, r2, #20
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	e027      	b.n	8004280 <HAL_DMA_IRQHandler+0xd34>
 8004230:	40020010 	.word	0x40020010
 8004234:	40020028 	.word	0x40020028
 8004238:	40020040 	.word	0x40020040
 800423c:	40020058 	.word	0x40020058
 8004240:	40020070 	.word	0x40020070
 8004244:	40020088 	.word	0x40020088
 8004248:	400200a0 	.word	0x400200a0
 800424c:	400200b8 	.word	0x400200b8
 8004250:	40020410 	.word	0x40020410
 8004254:	40020428 	.word	0x40020428
 8004258:	40020440 	.word	0x40020440
 800425c:	40020458 	.word	0x40020458
 8004260:	40020470 	.word	0x40020470
 8004264:	40020488 	.word	0x40020488
 8004268:	400204a0 	.word	0x400204a0
 800426c:	400204b8 	.word	0x400204b8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 020a 	bic.w	r2, r2, #10
 800427e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8097 	beq.w	80043c8 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042a2:	e091      	b.n	80043c8 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a8:	f003 031f 	and.w	r3, r3, #31
 80042ac:	2208      	movs	r2, #8
 80042ae:	409a      	lsls	r2, r3
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	4013      	ands	r3, r2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 8088 	beq.w	80043ca <HAL_DMA_IRQHandler+0xe7e>
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 8082 	beq.w	80043ca <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a41      	ldr	r2, [pc, #260]	; (80043d0 <HAL_DMA_IRQHandler+0xe84>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d04a      	beq.n	8004366 <HAL_DMA_IRQHandler+0xe1a>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a3f      	ldr	r2, [pc, #252]	; (80043d4 <HAL_DMA_IRQHandler+0xe88>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d045      	beq.n	8004366 <HAL_DMA_IRQHandler+0xe1a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a3e      	ldr	r2, [pc, #248]	; (80043d8 <HAL_DMA_IRQHandler+0xe8c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d040      	beq.n	8004366 <HAL_DMA_IRQHandler+0xe1a>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a3c      	ldr	r2, [pc, #240]	; (80043dc <HAL_DMA_IRQHandler+0xe90>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d03b      	beq.n	8004366 <HAL_DMA_IRQHandler+0xe1a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a3b      	ldr	r2, [pc, #236]	; (80043e0 <HAL_DMA_IRQHandler+0xe94>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d036      	beq.n	8004366 <HAL_DMA_IRQHandler+0xe1a>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a39      	ldr	r2, [pc, #228]	; (80043e4 <HAL_DMA_IRQHandler+0xe98>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d031      	beq.n	8004366 <HAL_DMA_IRQHandler+0xe1a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a38      	ldr	r2, [pc, #224]	; (80043e8 <HAL_DMA_IRQHandler+0xe9c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d02c      	beq.n	8004366 <HAL_DMA_IRQHandler+0xe1a>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a36      	ldr	r2, [pc, #216]	; (80043ec <HAL_DMA_IRQHandler+0xea0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d027      	beq.n	8004366 <HAL_DMA_IRQHandler+0xe1a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a35      	ldr	r2, [pc, #212]	; (80043f0 <HAL_DMA_IRQHandler+0xea4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d022      	beq.n	8004366 <HAL_DMA_IRQHandler+0xe1a>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a33      	ldr	r2, [pc, #204]	; (80043f4 <HAL_DMA_IRQHandler+0xea8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d01d      	beq.n	8004366 <HAL_DMA_IRQHandler+0xe1a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a32      	ldr	r2, [pc, #200]	; (80043f8 <HAL_DMA_IRQHandler+0xeac>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d018      	beq.n	8004366 <HAL_DMA_IRQHandler+0xe1a>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a30      	ldr	r2, [pc, #192]	; (80043fc <HAL_DMA_IRQHandler+0xeb0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d013      	beq.n	8004366 <HAL_DMA_IRQHandler+0xe1a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a2f      	ldr	r2, [pc, #188]	; (8004400 <HAL_DMA_IRQHandler+0xeb4>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d00e      	beq.n	8004366 <HAL_DMA_IRQHandler+0xe1a>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a2d      	ldr	r2, [pc, #180]	; (8004404 <HAL_DMA_IRQHandler+0xeb8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d009      	beq.n	8004366 <HAL_DMA_IRQHandler+0xe1a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a2c      	ldr	r2, [pc, #176]	; (8004408 <HAL_DMA_IRQHandler+0xebc>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d004      	beq.n	8004366 <HAL_DMA_IRQHandler+0xe1a>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a2a      	ldr	r2, [pc, #168]	; (800440c <HAL_DMA_IRQHandler+0xec0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d108      	bne.n	8004378 <HAL_DMA_IRQHandler+0xe2c>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 021c 	bic.w	r2, r2, #28
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	e007      	b.n	8004388 <HAL_DMA_IRQHandler+0xe3c>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 020e 	bic.w	r2, r2, #14
 8004386:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438c:	f003 031f 	and.w	r3, r3, #31
 8004390:	2201      	movs	r2, #1
 8004392:	409a      	lsls	r2, r3
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
 80043be:	e004      	b.n	80043ca <HAL_DMA_IRQHandler+0xe7e>
          return;
 80043c0:	bf00      	nop
 80043c2:	e002      	b.n	80043ca <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043c4:	bf00      	nop
 80043c6:	e000      	b.n	80043ca <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043c8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80043ca:	3728      	adds	r7, #40	; 0x28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40020010 	.word	0x40020010
 80043d4:	40020028 	.word	0x40020028
 80043d8:	40020040 	.word	0x40020040
 80043dc:	40020058 	.word	0x40020058
 80043e0:	40020070 	.word	0x40020070
 80043e4:	40020088 	.word	0x40020088
 80043e8:	400200a0 	.word	0x400200a0
 80043ec:	400200b8 	.word	0x400200b8
 80043f0:	40020410 	.word	0x40020410
 80043f4:	40020428 	.word	0x40020428
 80043f8:	40020440 	.word	0x40020440
 80043fc:	40020458 	.word	0x40020458
 8004400:	40020470 	.word	0x40020470
 8004404:	40020488 	.word	0x40020488
 8004408:	400204a0 	.word	0x400204a0
 800440c:	400204b8 	.word	0x400204b8

08004410 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a42      	ldr	r2, [pc, #264]	; (8004528 <DMA_CalcBaseAndBitshift+0x118>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d04a      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a41      	ldr	r2, [pc, #260]	; (800452c <DMA_CalcBaseAndBitshift+0x11c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d045      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a3f      	ldr	r2, [pc, #252]	; (8004530 <DMA_CalcBaseAndBitshift+0x120>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d040      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a3e      	ldr	r2, [pc, #248]	; (8004534 <DMA_CalcBaseAndBitshift+0x124>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d03b      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a3c      	ldr	r2, [pc, #240]	; (8004538 <DMA_CalcBaseAndBitshift+0x128>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d036      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a3b      	ldr	r2, [pc, #236]	; (800453c <DMA_CalcBaseAndBitshift+0x12c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d031      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a39      	ldr	r2, [pc, #228]	; (8004540 <DMA_CalcBaseAndBitshift+0x130>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d02c      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a38      	ldr	r2, [pc, #224]	; (8004544 <DMA_CalcBaseAndBitshift+0x134>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d027      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a36      	ldr	r2, [pc, #216]	; (8004548 <DMA_CalcBaseAndBitshift+0x138>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d022      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a35      	ldr	r2, [pc, #212]	; (800454c <DMA_CalcBaseAndBitshift+0x13c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d01d      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a33      	ldr	r2, [pc, #204]	; (8004550 <DMA_CalcBaseAndBitshift+0x140>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d018      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a32      	ldr	r2, [pc, #200]	; (8004554 <DMA_CalcBaseAndBitshift+0x144>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d013      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a30      	ldr	r2, [pc, #192]	; (8004558 <DMA_CalcBaseAndBitshift+0x148>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00e      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a2f      	ldr	r2, [pc, #188]	; (800455c <DMA_CalcBaseAndBitshift+0x14c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d009      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a2d      	ldr	r2, [pc, #180]	; (8004560 <DMA_CalcBaseAndBitshift+0x150>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d004      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xa8>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a2c      	ldr	r2, [pc, #176]	; (8004564 <DMA_CalcBaseAndBitshift+0x154>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d101      	bne.n	80044bc <DMA_CalcBaseAndBitshift+0xac>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <DMA_CalcBaseAndBitshift+0xae>
 80044bc:	2300      	movs	r3, #0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d024      	beq.n	800450c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	3b10      	subs	r3, #16
 80044ca:	4a27      	ldr	r2, [pc, #156]	; (8004568 <DMA_CalcBaseAndBitshift+0x158>)
 80044cc:	fba2 2303 	umull	r2, r3, r2, r3
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	4a24      	ldr	r2, [pc, #144]	; (800456c <DMA_CalcBaseAndBitshift+0x15c>)
 80044dc:	5cd3      	ldrb	r3, [r2, r3]
 80044de:	461a      	mov	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d908      	bls.n	80044fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	4b1f      	ldr	r3, [pc, #124]	; (8004570 <DMA_CalcBaseAndBitshift+0x160>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	1d1a      	adds	r2, r3, #4
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	659a      	str	r2, [r3, #88]	; 0x58
 80044fa:	e00d      	b.n	8004518 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	461a      	mov	r2, r3
 8004502:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <DMA_CalcBaseAndBitshift+0x160>)
 8004504:	4013      	ands	r3, r2
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6593      	str	r3, [r2, #88]	; 0x58
 800450a:	e005      	b.n	8004518 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	40020010 	.word	0x40020010
 800452c:	40020028 	.word	0x40020028
 8004530:	40020040 	.word	0x40020040
 8004534:	40020058 	.word	0x40020058
 8004538:	40020070 	.word	0x40020070
 800453c:	40020088 	.word	0x40020088
 8004540:	400200a0 	.word	0x400200a0
 8004544:	400200b8 	.word	0x400200b8
 8004548:	40020410 	.word	0x40020410
 800454c:	40020428 	.word	0x40020428
 8004550:	40020440 	.word	0x40020440
 8004554:	40020458 	.word	0x40020458
 8004558:	40020470 	.word	0x40020470
 800455c:	40020488 	.word	0x40020488
 8004560:	400204a0 	.word	0x400204a0
 8004564:	400204b8 	.word	0x400204b8
 8004568:	aaaaaaab 	.word	0xaaaaaaab
 800456c:	0800d400 	.word	0x0800d400
 8004570:	fffffc00 	.word	0xfffffc00

08004574 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d120      	bne.n	80045ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	2b03      	cmp	r3, #3
 800458e:	d858      	bhi.n	8004642 <DMA_CheckFifoParam+0xce>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <DMA_CheckFifoParam+0x24>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045a9 	.word	0x080045a9
 800459c:	080045bb 	.word	0x080045bb
 80045a0:	080045a9 	.word	0x080045a9
 80045a4:	08004643 	.word	0x08004643
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d048      	beq.n	8004646 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045b8:	e045      	b.n	8004646 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045c2:	d142      	bne.n	800464a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045c8:	e03f      	b.n	800464a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d2:	d123      	bne.n	800461c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	2b03      	cmp	r3, #3
 80045da:	d838      	bhi.n	800464e <DMA_CheckFifoParam+0xda>
 80045dc:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <DMA_CheckFifoParam+0x70>)
 80045de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e2:	bf00      	nop
 80045e4:	080045f5 	.word	0x080045f5
 80045e8:	080045fb 	.word	0x080045fb
 80045ec:	080045f5 	.word	0x080045f5
 80045f0:	0800460d 	.word	0x0800460d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
        break;
 80045f8:	e030      	b.n	800465c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d025      	beq.n	8004652 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800460a:	e022      	b.n	8004652 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004614:	d11f      	bne.n	8004656 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800461a:	e01c      	b.n	8004656 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	2b02      	cmp	r3, #2
 8004622:	d902      	bls.n	800462a <DMA_CheckFifoParam+0xb6>
 8004624:	2b03      	cmp	r3, #3
 8004626:	d003      	beq.n	8004630 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004628:	e018      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	73fb      	strb	r3, [r7, #15]
        break;
 800462e:	e015      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00e      	beq.n	800465a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
    break;
 8004640:	e00b      	b.n	800465a <DMA_CheckFifoParam+0xe6>
        break;
 8004642:	bf00      	nop
 8004644:	e00a      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        break;
 8004646:	bf00      	nop
 8004648:	e008      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        break;
 800464a:	bf00      	nop
 800464c:	e006      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        break;
 800464e:	bf00      	nop
 8004650:	e004      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        break;
 8004652:	bf00      	nop
 8004654:	e002      	b.n	800465c <DMA_CheckFifoParam+0xe8>
        break;
 8004656:	bf00      	nop
 8004658:	e000      	b.n	800465c <DMA_CheckFifoParam+0xe8>
    break;
 800465a:	bf00      	nop
    }
  }

  return status;
 800465c:	7bfb      	ldrb	r3, [r7, #15]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop

0800466c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a38      	ldr	r2, [pc, #224]	; (8004760 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d022      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a36      	ldr	r2, [pc, #216]	; (8004764 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d01d      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a35      	ldr	r2, [pc, #212]	; (8004768 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d018      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a33      	ldr	r2, [pc, #204]	; (800476c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a32      	ldr	r2, [pc, #200]	; (8004770 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00e      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a30      	ldr	r2, [pc, #192]	; (8004774 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d009      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a2f      	ldr	r2, [pc, #188]	; (8004778 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d004      	beq.n	80046ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a2d      	ldr	r2, [pc, #180]	; (800477c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d101      	bne.n	80046ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80046ce:	2300      	movs	r3, #0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01a      	beq.n	800470a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	3b08      	subs	r3, #8
 80046dc:	4a28      	ldr	r2, [pc, #160]	; (8004780 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4b26      	ldr	r3, [pc, #152]	; (8004784 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80046ea:	4413      	add	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	461a      	mov	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a24      	ldr	r2, [pc, #144]	; (8004788 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80046f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f003 031f 	and.w	r3, r3, #31
 8004700:	2201      	movs	r2, #1
 8004702:	409a      	lsls	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004708:	e024      	b.n	8004754 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	b2db      	uxtb	r3, r3
 8004710:	3b10      	subs	r3, #16
 8004712:	4a1e      	ldr	r2, [pc, #120]	; (800478c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004714:	fba2 2303 	umull	r2, r3, r2, r3
 8004718:	091b      	lsrs	r3, r3, #4
 800471a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4a1c      	ldr	r2, [pc, #112]	; (8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d806      	bhi.n	8004732 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4a1b      	ldr	r2, [pc, #108]	; (8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d902      	bls.n	8004732 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3308      	adds	r3, #8
 8004730:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4b18      	ldr	r3, [pc, #96]	; (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	461a      	mov	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a16      	ldr	r2, [pc, #88]	; (800479c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004744:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	2201      	movs	r2, #1
 800474e:	409a      	lsls	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004754:	bf00      	nop
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	58025408 	.word	0x58025408
 8004764:	5802541c 	.word	0x5802541c
 8004768:	58025430 	.word	0x58025430
 800476c:	58025444 	.word	0x58025444
 8004770:	58025458 	.word	0x58025458
 8004774:	5802546c 	.word	0x5802546c
 8004778:	58025480 	.word	0x58025480
 800477c:	58025494 	.word	0x58025494
 8004780:	cccccccd 	.word	0xcccccccd
 8004784:	16009600 	.word	0x16009600
 8004788:	58025880 	.word	0x58025880
 800478c:	aaaaaaab 	.word	0xaaaaaaab
 8004790:	400204b8 	.word	0x400204b8
 8004794:	4002040f 	.word	0x4002040f
 8004798:	10008200 	.word	0x10008200
 800479c:	40020880 	.word	0x40020880

080047a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d04a      	beq.n	800484c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d847      	bhi.n	800484c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a25      	ldr	r2, [pc, #148]	; (8004858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d022      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a24      	ldr	r2, [pc, #144]	; (800485c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d01d      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a22      	ldr	r2, [pc, #136]	; (8004860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d018      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a21      	ldr	r2, [pc, #132]	; (8004864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d013      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1f      	ldr	r2, [pc, #124]	; (8004868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00e      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a1e      	ldr	r2, [pc, #120]	; (800486c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d009      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1c      	ldr	r2, [pc, #112]	; (8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d004      	beq.n	800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1b      	ldr	r2, [pc, #108]	; (8004874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d101      	bne.n	8004810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004810:	2300      	movs	r3, #0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4b17      	ldr	r3, [pc, #92]	; (8004878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	461a      	mov	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a15      	ldr	r2, [pc, #84]	; (800487c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004828:	671a      	str	r2, [r3, #112]	; 0x70
 800482a:	e009      	b.n	8004840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4b14      	ldr	r3, [pc, #80]	; (8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004830:	4413      	add	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	461a      	mov	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a11      	ldr	r2, [pc, #68]	; (8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800483e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3b01      	subs	r3, #1
 8004844:	2201      	movs	r2, #1
 8004846:	409a      	lsls	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800484c:	bf00      	nop
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	58025408 	.word	0x58025408
 800485c:	5802541c 	.word	0x5802541c
 8004860:	58025430 	.word	0x58025430
 8004864:	58025444 	.word	0x58025444
 8004868:	58025458 	.word	0x58025458
 800486c:	5802546c 	.word	0x5802546c
 8004870:	58025480 	.word	0x58025480
 8004874:	58025494 	.word	0x58025494
 8004878:	1600963f 	.word	0x1600963f
 800487c:	58025940 	.word	0x58025940
 8004880:	1000823f 	.word	0x1000823f
 8004884:	40020940 	.word	0x40020940

08004888 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004888:	b480      	push	{r7}
 800488a:	b089      	sub	sp, #36	; 0x24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004896:	4b89      	ldr	r3, [pc, #548]	; (8004abc <HAL_GPIO_Init+0x234>)
 8004898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800489a:	e194      	b.n	8004bc6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	2101      	movs	r1, #1
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	fa01 f303 	lsl.w	r3, r1, r3
 80048a8:	4013      	ands	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 8186 	beq.w	8004bc0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 0303 	and.w	r3, r3, #3
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d005      	beq.n	80048cc <HAL_GPIO_Init+0x44>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d130      	bne.n	800492e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	2203      	movs	r2, #3
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	43db      	mvns	r3, r3
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	4013      	ands	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004902:	2201      	movs	r2, #1
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	43db      	mvns	r3, r3
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	4013      	ands	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	091b      	lsrs	r3, r3, #4
 8004918:	f003 0201 	and.w	r2, r3, #1
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	4313      	orrs	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b03      	cmp	r3, #3
 8004938:	d017      	beq.n	800496a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	2203      	movs	r2, #3
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	43db      	mvns	r3, r3
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	4013      	ands	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4313      	orrs	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d123      	bne.n	80049be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	08da      	lsrs	r2, r3, #3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3208      	adds	r2, #8
 800497e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	220f      	movs	r2, #15
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4013      	ands	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	08da      	lsrs	r2, r3, #3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3208      	adds	r2, #8
 80049b8:	69b9      	ldr	r1, [r7, #24]
 80049ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	2203      	movs	r2, #3
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43db      	mvns	r3, r3
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	4013      	ands	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f003 0203 	and.w	r2, r3, #3
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80e0 	beq.w	8004bc0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a00:	4b2f      	ldr	r3, [pc, #188]	; (8004ac0 <HAL_GPIO_Init+0x238>)
 8004a02:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004a06:	4a2e      	ldr	r2, [pc, #184]	; (8004ac0 <HAL_GPIO_Init+0x238>)
 8004a08:	f043 0302 	orr.w	r3, r3, #2
 8004a0c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8004a10:	4b2b      	ldr	r3, [pc, #172]	; (8004ac0 <HAL_GPIO_Init+0x238>)
 8004a12:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a1e:	4a29      	ldr	r2, [pc, #164]	; (8004ac4 <HAL_GPIO_Init+0x23c>)
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	089b      	lsrs	r3, r3, #2
 8004a24:	3302      	adds	r3, #2
 8004a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	220f      	movs	r2, #15
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a20      	ldr	r2, [pc, #128]	; (8004ac8 <HAL_GPIO_Init+0x240>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d052      	beq.n	8004af0 <HAL_GPIO_Init+0x268>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a1f      	ldr	r2, [pc, #124]	; (8004acc <HAL_GPIO_Init+0x244>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d031      	beq.n	8004ab6 <HAL_GPIO_Init+0x22e>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a1e      	ldr	r2, [pc, #120]	; (8004ad0 <HAL_GPIO_Init+0x248>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d02b      	beq.n	8004ab2 <HAL_GPIO_Init+0x22a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a1d      	ldr	r2, [pc, #116]	; (8004ad4 <HAL_GPIO_Init+0x24c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d025      	beq.n	8004aae <HAL_GPIO_Init+0x226>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <HAL_GPIO_Init+0x250>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d01f      	beq.n	8004aaa <HAL_GPIO_Init+0x222>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1b      	ldr	r2, [pc, #108]	; (8004adc <HAL_GPIO_Init+0x254>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d019      	beq.n	8004aa6 <HAL_GPIO_Init+0x21e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1a      	ldr	r2, [pc, #104]	; (8004ae0 <HAL_GPIO_Init+0x258>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d013      	beq.n	8004aa2 <HAL_GPIO_Init+0x21a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a19      	ldr	r2, [pc, #100]	; (8004ae4 <HAL_GPIO_Init+0x25c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00d      	beq.n	8004a9e <HAL_GPIO_Init+0x216>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a18      	ldr	r2, [pc, #96]	; (8004ae8 <HAL_GPIO_Init+0x260>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d007      	beq.n	8004a9a <HAL_GPIO_Init+0x212>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a17      	ldr	r2, [pc, #92]	; (8004aec <HAL_GPIO_Init+0x264>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d101      	bne.n	8004a96 <HAL_GPIO_Init+0x20e>
 8004a92:	2309      	movs	r3, #9
 8004a94:	e02d      	b.n	8004af2 <HAL_GPIO_Init+0x26a>
 8004a96:	230a      	movs	r3, #10
 8004a98:	e02b      	b.n	8004af2 <HAL_GPIO_Init+0x26a>
 8004a9a:	2308      	movs	r3, #8
 8004a9c:	e029      	b.n	8004af2 <HAL_GPIO_Init+0x26a>
 8004a9e:	2307      	movs	r3, #7
 8004aa0:	e027      	b.n	8004af2 <HAL_GPIO_Init+0x26a>
 8004aa2:	2306      	movs	r3, #6
 8004aa4:	e025      	b.n	8004af2 <HAL_GPIO_Init+0x26a>
 8004aa6:	2305      	movs	r3, #5
 8004aa8:	e023      	b.n	8004af2 <HAL_GPIO_Init+0x26a>
 8004aaa:	2304      	movs	r3, #4
 8004aac:	e021      	b.n	8004af2 <HAL_GPIO_Init+0x26a>
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e01f      	b.n	8004af2 <HAL_GPIO_Init+0x26a>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e01d      	b.n	8004af2 <HAL_GPIO_Init+0x26a>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e01b      	b.n	8004af2 <HAL_GPIO_Init+0x26a>
 8004aba:	bf00      	nop
 8004abc:	58000080 	.word	0x58000080
 8004ac0:	58024400 	.word	0x58024400
 8004ac4:	58000400 	.word	0x58000400
 8004ac8:	58020000 	.word	0x58020000
 8004acc:	58020400 	.word	0x58020400
 8004ad0:	58020800 	.word	0x58020800
 8004ad4:	58020c00 	.word	0x58020c00
 8004ad8:	58021000 	.word	0x58021000
 8004adc:	58021400 	.word	0x58021400
 8004ae0:	58021800 	.word	0x58021800
 8004ae4:	58021c00 	.word	0x58021c00
 8004ae8:	58022000 	.word	0x58022000
 8004aec:	58022400 	.word	0x58022400
 8004af0:	2300      	movs	r3, #0
 8004af2:	69fa      	ldr	r2, [r7, #28]
 8004af4:	f002 0203 	and.w	r2, r2, #3
 8004af8:	0092      	lsls	r2, r2, #2
 8004afa:	4093      	lsls	r3, r2
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b02:	4938      	ldr	r1, [pc, #224]	; (8004be4 <HAL_GPIO_Init+0x35c>)
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	089b      	lsrs	r3, r3, #2
 8004b08:	3302      	adds	r3, #2
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	43db      	mvns	r3, r3
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	43db      	mvns	r3, r3
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f47f ae63 	bne.w	800489c <HAL_GPIO_Init+0x14>
  }
}
 8004bd6:	bf00      	nop
 8004bd8:	bf00      	nop
 8004bda:	3724      	adds	r7, #36	; 0x24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	58000400 	.word	0x58000400

08004be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	807b      	strh	r3, [r7, #2]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bf8:	787b      	ldrb	r3, [r7, #1]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bfe:	887a      	ldrh	r2, [r7, #2]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004c04:	e003      	b.n	8004c0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c06:	887b      	ldrh	r3, [r7, #2]
 8004c08:	041a      	lsls	r2, r3, #16
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	619a      	str	r2, [r3, #24]
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
	...

08004c1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004c24:	4b29      	ldr	r3, [pc, #164]	; (8004ccc <HAL_PWREx_ConfigSupply+0xb0>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	2b06      	cmp	r3, #6
 8004c2e:	d00a      	beq.n	8004c46 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c30:	4b26      	ldr	r3, [pc, #152]	; (8004ccc <HAL_PWREx_ConfigSupply+0xb0>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d001      	beq.n	8004c42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e040      	b.n	8004cc4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e03e      	b.n	8004cc4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c46:	4b21      	ldr	r3, [pc, #132]	; (8004ccc <HAL_PWREx_ConfigSupply+0xb0>)
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004c4e:	491f      	ldr	r1, [pc, #124]	; (8004ccc <HAL_PWREx_ConfigSupply+0xb0>)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c56:	f7fd fa45 	bl	80020e4 <HAL_GetTick>
 8004c5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c5c:	e009      	b.n	8004c72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c5e:	f7fd fa41 	bl	80020e4 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c6c:	d901      	bls.n	8004c72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e028      	b.n	8004cc4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c72:	4b16      	ldr	r3, [pc, #88]	; (8004ccc <HAL_PWREx_ConfigSupply+0xb0>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c7e:	d1ee      	bne.n	8004c5e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b1e      	cmp	r3, #30
 8004c84:	d008      	beq.n	8004c98 <HAL_PWREx_ConfigSupply+0x7c>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b2e      	cmp	r3, #46	; 0x2e
 8004c8a:	d005      	beq.n	8004c98 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b1d      	cmp	r3, #29
 8004c90:	d002      	beq.n	8004c98 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b2d      	cmp	r3, #45	; 0x2d
 8004c96:	d114      	bne.n	8004cc2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004c98:	f7fd fa24 	bl	80020e4 <HAL_GetTick>
 8004c9c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004c9e:	e009      	b.n	8004cb4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ca0:	f7fd fa20 	bl	80020e4 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cae:	d901      	bls.n	8004cb4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e007      	b.n	8004cc4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004cb4:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <HAL_PWREx_ConfigSupply+0xb0>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc0:	d1ee      	bne.n	8004ca0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	58024800 	.word	0x58024800

08004cd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08c      	sub	sp, #48	; 0x30
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d102      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f000 bc1f 	b.w	8005522 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80b3 	beq.w	8004e58 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cf2:	4b95      	ldr	r3, [pc, #596]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cfc:	4b92      	ldr	r3, [pc, #584]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d00:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d04:	2b10      	cmp	r3, #16
 8004d06:	d007      	beq.n	8004d18 <HAL_RCC_OscConfig+0x48>
 8004d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0a:	2b18      	cmp	r3, #24
 8004d0c:	d112      	bne.n	8004d34 <HAL_RCC_OscConfig+0x64>
 8004d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d10d      	bne.n	8004d34 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d18:	4b8b      	ldr	r3, [pc, #556]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8098 	beq.w	8004e56 <HAL_RCC_OscConfig+0x186>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f040 8093 	bne.w	8004e56 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e3f6      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d3c:	d106      	bne.n	8004d4c <HAL_RCC_OscConfig+0x7c>
 8004d3e:	4b82      	ldr	r3, [pc, #520]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a81      	ldr	r2, [pc, #516]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	e058      	b.n	8004dfe <HAL_RCC_OscConfig+0x12e>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d112      	bne.n	8004d7a <HAL_RCC_OscConfig+0xaa>
 8004d54:	4b7c      	ldr	r3, [pc, #496]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a7b      	ldr	r2, [pc, #492]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	4b79      	ldr	r3, [pc, #484]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a78      	ldr	r2, [pc, #480]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d66:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	4b76      	ldr	r3, [pc, #472]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a75      	ldr	r2, [pc, #468]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	e041      	b.n	8004dfe <HAL_RCC_OscConfig+0x12e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d82:	d112      	bne.n	8004daa <HAL_RCC_OscConfig+0xda>
 8004d84:	4b70      	ldr	r3, [pc, #448]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a6f      	ldr	r2, [pc, #444]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	4b6d      	ldr	r3, [pc, #436]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a6c      	ldr	r2, [pc, #432]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d96:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	4b6a      	ldr	r3, [pc, #424]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a69      	ldr	r2, [pc, #420]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	e029      	b.n	8004dfe <HAL_RCC_OscConfig+0x12e>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004db2:	d112      	bne.n	8004dda <HAL_RCC_OscConfig+0x10a>
 8004db4:	4b64      	ldr	r3, [pc, #400]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a63      	ldr	r2, [pc, #396]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004dba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	4b61      	ldr	r3, [pc, #388]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a60      	ldr	r2, [pc, #384]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	4b5e      	ldr	r3, [pc, #376]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a5d      	ldr	r2, [pc, #372]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	e011      	b.n	8004dfe <HAL_RCC_OscConfig+0x12e>
 8004dda:	4b5b      	ldr	r3, [pc, #364]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a5a      	ldr	r2, [pc, #360]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	4b58      	ldr	r3, [pc, #352]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a57      	ldr	r2, [pc, #348]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	4b55      	ldr	r3, [pc, #340]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a54      	ldr	r2, [pc, #336]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004df8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004dfc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d013      	beq.n	8004e2e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e06:	f7fd f96d 	bl	80020e4 <HAL_GetTick>
 8004e0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e0c:	e008      	b.n	8004e20 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e0e:	f7fd f969 	bl	80020e4 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b64      	cmp	r3, #100	; 0x64
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e380      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e20:	4b49      	ldr	r3, [pc, #292]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0f0      	beq.n	8004e0e <HAL_RCC_OscConfig+0x13e>
 8004e2c:	e014      	b.n	8004e58 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2e:	f7fd f959 	bl	80020e4 <HAL_GetTick>
 8004e32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e36:	f7fd f955 	bl	80020e4 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b64      	cmp	r3, #100	; 0x64
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e36c      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e48:	4b3f      	ldr	r3, [pc, #252]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1f0      	bne.n	8004e36 <HAL_RCC_OscConfig+0x166>
 8004e54:	e000      	b.n	8004e58 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e56:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 808c 	beq.w	8004f7e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e66:	4b38      	ldr	r3, [pc, #224]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e6e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e70:	4b35      	ldr	r3, [pc, #212]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d007      	beq.n	8004e8c <HAL_RCC_OscConfig+0x1bc>
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	2b18      	cmp	r3, #24
 8004e80:	d137      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x222>
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d132      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e8c:	4b2e      	ldr	r3, [pc, #184]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x1d4>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e33e      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ea4:	4b28      	ldr	r3, [pc, #160]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f023 0219 	bic.w	r2, r3, #25
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	4925      	ldr	r1, [pc, #148]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb6:	f7fd f915 	bl	80020e4 <HAL_GetTick>
 8004eba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ebe:	f7fd f911 	bl	80020e4 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e328      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ed0:	4b1d      	ldr	r3, [pc, #116]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0f0      	beq.n	8004ebe <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004edc:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	061b      	lsls	r3, r3, #24
 8004eea:	4917      	ldr	r1, [pc, #92]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ef0:	e045      	b.n	8004f7e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d028      	beq.n	8004f4c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004efa:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f023 0219 	bic.w	r2, r3, #25
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	4910      	ldr	r1, [pc, #64]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0c:	f7fd f8ea 	bl	80020e4 <HAL_GetTick>
 8004f10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f14:	f7fd f8e6 	bl	80020e4 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e2fd      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f26:	4b08      	ldr	r3, [pc, #32]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0f0      	beq.n	8004f14 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f32:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	061b      	lsls	r3, r3, #24
 8004f40:	4901      	ldr	r1, [pc, #4]	; (8004f48 <HAL_RCC_OscConfig+0x278>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	604b      	str	r3, [r1, #4]
 8004f46:	e01a      	b.n	8004f7e <HAL_RCC_OscConfig+0x2ae>
 8004f48:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f4c:	4b97      	ldr	r3, [pc, #604]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a96      	ldr	r2, [pc, #600]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8004f52:	f023 0301 	bic.w	r3, r3, #1
 8004f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f58:	f7fd f8c4 	bl	80020e4 <HAL_GetTick>
 8004f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f60:	f7fd f8c0 	bl	80020e4 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e2d7      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f72:	4b8e      	ldr	r3, [pc, #568]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f0      	bne.n	8004f60 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0310 	and.w	r3, r3, #16
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d06a      	beq.n	8005060 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f8a:	4b88      	ldr	r3, [pc, #544]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f94:	4b85      	ldr	r3, [pc, #532]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8004f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f98:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d007      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x2e0>
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	2b18      	cmp	r3, #24
 8004fa4:	d11b      	bne.n	8004fde <HAL_RCC_OscConfig+0x30e>
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d116      	bne.n	8004fde <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fb0:	4b7e      	ldr	r3, [pc, #504]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x2f8>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	2b80      	cmp	r3, #128	; 0x80
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e2ac      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fc8:	4b78      	ldr	r3, [pc, #480]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	061b      	lsls	r3, r3, #24
 8004fd6:	4975      	ldr	r1, [pc, #468]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fdc:	e040      	b.n	8005060 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d023      	beq.n	800502e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004fe6:	4b71      	ldr	r3, [pc, #452]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a70      	ldr	r2, [pc, #448]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8004fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff2:	f7fd f877 	bl	80020e4 <HAL_GetTick>
 8004ff6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ffa:	f7fd f873 	bl	80020e4 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e28a      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800500c:	4b67      	ldr	r3, [pc, #412]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0f0      	beq.n	8004ffa <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005018:	4b64      	ldr	r3, [pc, #400]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	061b      	lsls	r3, r3, #24
 8005026:	4961      	ldr	r1, [pc, #388]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8005028:	4313      	orrs	r3, r2
 800502a:	60cb      	str	r3, [r1, #12]
 800502c:	e018      	b.n	8005060 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800502e:	4b5f      	ldr	r3, [pc, #380]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a5e      	ldr	r2, [pc, #376]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8005034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503a:	f7fd f853 	bl	80020e4 <HAL_GetTick>
 800503e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005042:	f7fd f84f 	bl	80020e4 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e266      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005054:	4b55      	ldr	r3, [pc, #340]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1f0      	bne.n	8005042 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0308 	and.w	r3, r3, #8
 8005068:	2b00      	cmp	r3, #0
 800506a:	d036      	beq.n	80050da <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d019      	beq.n	80050a8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005074:	4b4d      	ldr	r3, [pc, #308]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8005076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005078:	4a4c      	ldr	r2, [pc, #304]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005080:	f7fd f830 	bl	80020e4 <HAL_GetTick>
 8005084:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005088:	f7fd f82c 	bl	80020e4 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e243      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800509a:	4b44      	ldr	r3, [pc, #272]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 800509c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0x3b8>
 80050a6:	e018      	b.n	80050da <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a8:	4b40      	ldr	r3, [pc, #256]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 80050aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ac:	4a3f      	ldr	r2, [pc, #252]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 80050ae:	f023 0301 	bic.w	r3, r3, #1
 80050b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b4:	f7fd f816 	bl	80020e4 <HAL_GetTick>
 80050b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050bc:	f7fd f812 	bl	80020e4 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e229      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80050ce:	4b37      	ldr	r3, [pc, #220]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 80050d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1f0      	bne.n	80050bc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0320 	and.w	r3, r3, #32
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d036      	beq.n	8005154 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d019      	beq.n	8005122 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050ee:	4b2f      	ldr	r3, [pc, #188]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a2e      	ldr	r2, [pc, #184]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 80050f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050fa:	f7fc fff3 	bl	80020e4 <HAL_GetTick>
 80050fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005102:	f7fc ffef 	bl	80020e4 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e206      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005114:	4b25      	ldr	r3, [pc, #148]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0f0      	beq.n	8005102 <HAL_RCC_OscConfig+0x432>
 8005120:	e018      	b.n	8005154 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005122:	4b22      	ldr	r3, [pc, #136]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a21      	ldr	r2, [pc, #132]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 8005128:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800512c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800512e:	f7fc ffd9 	bl	80020e4 <HAL_GetTick>
 8005132:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005136:	f7fc ffd5 	bl	80020e4 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e1ec      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005148:	4b18      	ldr	r3, [pc, #96]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1f0      	bne.n	8005136 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 80af 	beq.w	80052c0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005162:	4b13      	ldr	r3, [pc, #76]	; (80051b0 <HAL_RCC_OscConfig+0x4e0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a12      	ldr	r2, [pc, #72]	; (80051b0 <HAL_RCC_OscConfig+0x4e0>)
 8005168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800516e:	f7fc ffb9 	bl	80020e4 <HAL_GetTick>
 8005172:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005176:	f7fc ffb5 	bl	80020e4 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b64      	cmp	r3, #100	; 0x64
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e1cc      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005188:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <HAL_RCC_OscConfig+0x4e0>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0f0      	beq.n	8005176 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d10b      	bne.n	80051b4 <HAL_RCC_OscConfig+0x4e4>
 800519c:	4b03      	ldr	r3, [pc, #12]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 800519e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a0:	4a02      	ldr	r2, [pc, #8]	; (80051ac <HAL_RCC_OscConfig+0x4dc>)
 80051a2:	f043 0301 	orr.w	r3, r3, #1
 80051a6:	6713      	str	r3, [r2, #112]	; 0x70
 80051a8:	e05b      	b.n	8005262 <HAL_RCC_OscConfig+0x592>
 80051aa:	bf00      	nop
 80051ac:	58024400 	.word	0x58024400
 80051b0:	58024800 	.word	0x58024800
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d112      	bne.n	80051e2 <HAL_RCC_OscConfig+0x512>
 80051bc:	4b9d      	ldr	r3, [pc, #628]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80051be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c0:	4a9c      	ldr	r2, [pc, #624]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80051c2:	f023 0301 	bic.w	r3, r3, #1
 80051c6:	6713      	str	r3, [r2, #112]	; 0x70
 80051c8:	4b9a      	ldr	r3, [pc, #616]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80051ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051cc:	4a99      	ldr	r2, [pc, #612]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80051ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051d2:	6713      	str	r3, [r2, #112]	; 0x70
 80051d4:	4b97      	ldr	r3, [pc, #604]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80051d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d8:	4a96      	ldr	r2, [pc, #600]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80051da:	f023 0304 	bic.w	r3, r3, #4
 80051de:	6713      	str	r3, [r2, #112]	; 0x70
 80051e0:	e03f      	b.n	8005262 <HAL_RCC_OscConfig+0x592>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	2b05      	cmp	r3, #5
 80051e8:	d112      	bne.n	8005210 <HAL_RCC_OscConfig+0x540>
 80051ea:	4b92      	ldr	r3, [pc, #584]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80051ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ee:	4a91      	ldr	r2, [pc, #580]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80051f0:	f043 0304 	orr.w	r3, r3, #4
 80051f4:	6713      	str	r3, [r2, #112]	; 0x70
 80051f6:	4b8f      	ldr	r3, [pc, #572]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80051f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fa:	4a8e      	ldr	r2, [pc, #568]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80051fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005200:	6713      	str	r3, [r2, #112]	; 0x70
 8005202:	4b8c      	ldr	r3, [pc, #560]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005206:	4a8b      	ldr	r2, [pc, #556]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005208:	f043 0301 	orr.w	r3, r3, #1
 800520c:	6713      	str	r3, [r2, #112]	; 0x70
 800520e:	e028      	b.n	8005262 <HAL_RCC_OscConfig+0x592>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	2b85      	cmp	r3, #133	; 0x85
 8005216:	d112      	bne.n	800523e <HAL_RCC_OscConfig+0x56e>
 8005218:	4b86      	ldr	r3, [pc, #536]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 800521a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521c:	4a85      	ldr	r2, [pc, #532]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 800521e:	f043 0304 	orr.w	r3, r3, #4
 8005222:	6713      	str	r3, [r2, #112]	; 0x70
 8005224:	4b83      	ldr	r3, [pc, #524]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005228:	4a82      	ldr	r2, [pc, #520]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 800522a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522e:	6713      	str	r3, [r2, #112]	; 0x70
 8005230:	4b80      	ldr	r3, [pc, #512]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005234:	4a7f      	ldr	r2, [pc, #508]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	6713      	str	r3, [r2, #112]	; 0x70
 800523c:	e011      	b.n	8005262 <HAL_RCC_OscConfig+0x592>
 800523e:	4b7d      	ldr	r3, [pc, #500]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005242:	4a7c      	ldr	r2, [pc, #496]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	6713      	str	r3, [r2, #112]	; 0x70
 800524a:	4b7a      	ldr	r3, [pc, #488]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 800524c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524e:	4a79      	ldr	r2, [pc, #484]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005250:	f023 0304 	bic.w	r3, r3, #4
 8005254:	6713      	str	r3, [r2, #112]	; 0x70
 8005256:	4b77      	ldr	r3, [pc, #476]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525a:	4a76      	ldr	r2, [pc, #472]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 800525c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005260:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d015      	beq.n	8005296 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526a:	f7fc ff3b 	bl	80020e4 <HAL_GetTick>
 800526e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005270:	e00a      	b.n	8005288 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005272:	f7fc ff37 	bl	80020e4 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005280:	4293      	cmp	r3, r2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e14c      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005288:	4b6a      	ldr	r3, [pc, #424]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 800528a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0ee      	beq.n	8005272 <HAL_RCC_OscConfig+0x5a2>
 8005294:	e014      	b.n	80052c0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005296:	f7fc ff25 	bl	80020e4 <HAL_GetTick>
 800529a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800529c:	e00a      	b.n	80052b4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800529e:	f7fc ff21 	bl	80020e4 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e136      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052b4:	4b5f      	ldr	r3, [pc, #380]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80052b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1ee      	bne.n	800529e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 812b 	beq.w	8005520 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80052ca:	4b5a      	ldr	r3, [pc, #360]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052d2:	2b18      	cmp	r3, #24
 80052d4:	f000 80bb 	beq.w	800544e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	2b02      	cmp	r3, #2
 80052de:	f040 8095 	bne.w	800540c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e2:	4b54      	ldr	r3, [pc, #336]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a53      	ldr	r2, [pc, #332]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80052e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ee:	f7fc fef9 	bl	80020e4 <HAL_GetTick>
 80052f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052f4:	e008      	b.n	8005308 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f6:	f7fc fef5 	bl	80020e4 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e10c      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005308:	4b4a      	ldr	r3, [pc, #296]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1f0      	bne.n	80052f6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005314:	4b47      	ldr	r3, [pc, #284]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005318:	4b47      	ldr	r3, [pc, #284]	; (8005438 <HAL_RCC_OscConfig+0x768>)
 800531a:	4013      	ands	r3, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005324:	0112      	lsls	r2, r2, #4
 8005326:	430a      	orrs	r2, r1
 8005328:	4942      	ldr	r1, [pc, #264]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 800532a:	4313      	orrs	r3, r2
 800532c:	628b      	str	r3, [r1, #40]	; 0x28
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	3b01      	subs	r3, #1
 8005334:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533c:	3b01      	subs	r3, #1
 800533e:	025b      	lsls	r3, r3, #9
 8005340:	b29b      	uxth	r3, r3
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	3b01      	subs	r3, #1
 800534a:	041b      	lsls	r3, r3, #16
 800534c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005356:	3b01      	subs	r3, #1
 8005358:	061b      	lsls	r3, r3, #24
 800535a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800535e:	4935      	ldr	r1, [pc, #212]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005360:	4313      	orrs	r3, r2
 8005362:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005364:	4b33      	ldr	r3, [pc, #204]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	4a32      	ldr	r2, [pc, #200]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 800536a:	f023 0301 	bic.w	r3, r3, #1
 800536e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005370:	4b30      	ldr	r3, [pc, #192]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005374:	4b31      	ldr	r3, [pc, #196]	; (800543c <HAL_RCC_OscConfig+0x76c>)
 8005376:	4013      	ands	r3, r2
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800537c:	00d2      	lsls	r2, r2, #3
 800537e:	492d      	ldr	r1, [pc, #180]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005380:	4313      	orrs	r3, r2
 8005382:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005384:	4b2b      	ldr	r3, [pc, #172]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	f023 020c 	bic.w	r2, r3, #12
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	4928      	ldr	r1, [pc, #160]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005392:	4313      	orrs	r3, r2
 8005394:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005396:	4b27      	ldr	r3, [pc, #156]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	f023 0202 	bic.w	r2, r3, #2
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a2:	4924      	ldr	r1, [pc, #144]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053a8:	4b22      	ldr	r3, [pc, #136]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	4a21      	ldr	r2, [pc, #132]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053b4:	4b1f      	ldr	r3, [pc, #124]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	4a1e      	ldr	r2, [pc, #120]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80053c0:	4b1c      	ldr	r3, [pc, #112]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	4a1b      	ldr	r2, [pc, #108]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80053cc:	4b19      	ldr	r3, [pc, #100]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	4a18      	ldr	r2, [pc, #96]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053d2:	f043 0301 	orr.w	r3, r3, #1
 80053d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053d8:	4b16      	ldr	r3, [pc, #88]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a15      	ldr	r2, [pc, #84]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 80053de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e4:	f7fc fe7e 	bl	80020e4 <HAL_GetTick>
 80053e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ec:	f7fc fe7a 	bl	80020e4 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e091      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053fe:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f0      	beq.n	80053ec <HAL_RCC_OscConfig+0x71c>
 800540a:	e089      	b.n	8005520 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800540c:	4b09      	ldr	r3, [pc, #36]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a08      	ldr	r2, [pc, #32]	; (8005434 <HAL_RCC_OscConfig+0x764>)
 8005412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005418:	f7fc fe64 	bl	80020e4 <HAL_GetTick>
 800541c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800541e:	e00f      	b.n	8005440 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005420:	f7fc fe60 	bl	80020e4 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d908      	bls.n	8005440 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e077      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
 8005432:	bf00      	nop
 8005434:	58024400 	.word	0x58024400
 8005438:	fffffc0c 	.word	0xfffffc0c
 800543c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005440:	4b3a      	ldr	r3, [pc, #232]	; (800552c <HAL_RCC_OscConfig+0x85c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e9      	bne.n	8005420 <HAL_RCC_OscConfig+0x750>
 800544c:	e068      	b.n	8005520 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800544e:	4b37      	ldr	r3, [pc, #220]	; (800552c <HAL_RCC_OscConfig+0x85c>)
 8005450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005452:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005454:	4b35      	ldr	r3, [pc, #212]	; (800552c <HAL_RCC_OscConfig+0x85c>)
 8005456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005458:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b01      	cmp	r3, #1
 8005460:	d031      	beq.n	80054c6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f003 0203 	and.w	r2, r3, #3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800546c:	429a      	cmp	r2, r3
 800546e:	d12a      	bne.n	80054c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	091b      	lsrs	r3, r3, #4
 8005474:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800547c:	429a      	cmp	r2, r3
 800547e:	d122      	bne.n	80054c6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800548c:	429a      	cmp	r2, r3
 800548e:	d11a      	bne.n	80054c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	0a5b      	lsrs	r3, r3, #9
 8005494:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800549e:	429a      	cmp	r2, r3
 80054a0:	d111      	bne.n	80054c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	0c1b      	lsrs	r3, r3, #16
 80054a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d108      	bne.n	80054c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	0e1b      	lsrs	r3, r3, #24
 80054b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d001      	beq.n	80054ca <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e02b      	b.n	8005522 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80054ca:	4b18      	ldr	r3, [pc, #96]	; (800552c <HAL_RCC_OscConfig+0x85c>)
 80054cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ce:	08db      	lsrs	r3, r3, #3
 80054d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054d4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d01f      	beq.n	8005520 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80054e0:	4b12      	ldr	r3, [pc, #72]	; (800552c <HAL_RCC_OscConfig+0x85c>)
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	4a11      	ldr	r2, [pc, #68]	; (800552c <HAL_RCC_OscConfig+0x85c>)
 80054e6:	f023 0301 	bic.w	r3, r3, #1
 80054ea:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054ec:	f7fc fdfa 	bl	80020e4 <HAL_GetTick>
 80054f0:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80054f2:	bf00      	nop
 80054f4:	f7fc fdf6 	bl	80020e4 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d0f9      	beq.n	80054f4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005500:	4b0a      	ldr	r3, [pc, #40]	; (800552c <HAL_RCC_OscConfig+0x85c>)
 8005502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005504:	4b0a      	ldr	r3, [pc, #40]	; (8005530 <HAL_RCC_OscConfig+0x860>)
 8005506:	4013      	ands	r3, r2
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800550c:	00d2      	lsls	r2, r2, #3
 800550e:	4907      	ldr	r1, [pc, #28]	; (800552c <HAL_RCC_OscConfig+0x85c>)
 8005510:	4313      	orrs	r3, r2
 8005512:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005514:	4b05      	ldr	r3, [pc, #20]	; (800552c <HAL_RCC_OscConfig+0x85c>)
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	4a04      	ldr	r2, [pc, #16]	; (800552c <HAL_RCC_OscConfig+0x85c>)
 800551a:	f043 0301 	orr.w	r3, r3, #1
 800551e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3730      	adds	r7, #48	; 0x30
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	58024400 	.word	0x58024400
 8005530:	ffff0007 	.word	0xffff0007

08005534 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e19c      	b.n	8005882 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005548:	4b8a      	ldr	r3, [pc, #552]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d910      	bls.n	8005578 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005556:	4b87      	ldr	r3, [pc, #540]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f023 020f 	bic.w	r2, r3, #15
 800555e:	4985      	ldr	r1, [pc, #532]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	4313      	orrs	r3, r2
 8005564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005566:	4b83      	ldr	r3, [pc, #524]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d001      	beq.n	8005578 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e184      	b.n	8005882 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	d010      	beq.n	80055a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	4b7b      	ldr	r3, [pc, #492]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005590:	429a      	cmp	r2, r3
 8005592:	d908      	bls.n	80055a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005594:	4b78      	ldr	r3, [pc, #480]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	4975      	ldr	r1, [pc, #468]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0308 	and.w	r3, r3, #8
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d010      	beq.n	80055d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695a      	ldr	r2, [r3, #20]
 80055b6:	4b70      	ldr	r3, [pc, #448]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055be:	429a      	cmp	r2, r3
 80055c0:	d908      	bls.n	80055d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055c2:	4b6d      	ldr	r3, [pc, #436]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	496a      	ldr	r1, [pc, #424]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0310 	and.w	r3, r3, #16
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d010      	beq.n	8005602 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	699a      	ldr	r2, [r3, #24]
 80055e4:	4b64      	ldr	r3, [pc, #400]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d908      	bls.n	8005602 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055f0:	4b61      	ldr	r3, [pc, #388]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	495e      	ldr	r1, [pc, #376]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0320 	and.w	r3, r3, #32
 800560a:	2b00      	cmp	r3, #0
 800560c:	d010      	beq.n	8005630 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69da      	ldr	r2, [r3, #28]
 8005612:	4b59      	ldr	r3, [pc, #356]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800561a:	429a      	cmp	r2, r3
 800561c:	d908      	bls.n	8005630 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800561e:	4b56      	ldr	r3, [pc, #344]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	4953      	ldr	r1, [pc, #332]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 800562c:	4313      	orrs	r3, r2
 800562e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d010      	beq.n	800565e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	4b4d      	ldr	r3, [pc, #308]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	429a      	cmp	r2, r3
 800564a:	d908      	bls.n	800565e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800564c:	4b4a      	ldr	r3, [pc, #296]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	f023 020f 	bic.w	r2, r3, #15
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	4947      	ldr	r1, [pc, #284]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 800565a:	4313      	orrs	r3, r2
 800565c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d055      	beq.n	8005716 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800566a:	4b43      	ldr	r3, [pc, #268]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	4940      	ldr	r1, [pc, #256]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005678:	4313      	orrs	r3, r2
 800567a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b02      	cmp	r3, #2
 8005682:	d107      	bne.n	8005694 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005684:	4b3c      	ldr	r3, [pc, #240]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d121      	bne.n	80056d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e0f6      	b.n	8005882 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b03      	cmp	r3, #3
 800569a:	d107      	bne.n	80056ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800569c:	4b36      	ldr	r3, [pc, #216]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d115      	bne.n	80056d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0ea      	b.n	8005882 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d107      	bne.n	80056c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056b4:	4b30      	ldr	r3, [pc, #192]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d109      	bne.n	80056d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0de      	b.n	8005882 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056c4:	4b2c      	ldr	r3, [pc, #176]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e0d6      	b.n	8005882 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056d4:	4b28      	ldr	r3, [pc, #160]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f023 0207 	bic.w	r2, r3, #7
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	4925      	ldr	r1, [pc, #148]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e6:	f7fc fcfd 	bl	80020e4 <HAL_GetTick>
 80056ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ec:	e00a      	b.n	8005704 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ee:	f7fc fcf9 	bl	80020e4 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e0be      	b.n	8005882 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005704:	4b1c      	ldr	r3, [pc, #112]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	429a      	cmp	r2, r3
 8005714:	d1eb      	bne.n	80056ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d010      	beq.n	8005744 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	4b14      	ldr	r3, [pc, #80]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	429a      	cmp	r2, r3
 8005730:	d208      	bcs.n	8005744 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005732:	4b11      	ldr	r3, [pc, #68]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f023 020f 	bic.w	r2, r3, #15
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	490e      	ldr	r1, [pc, #56]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005740:	4313      	orrs	r3, r2
 8005742:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005744:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d214      	bcs.n	800577c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005752:	4b08      	ldr	r3, [pc, #32]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f023 020f 	bic.w	r2, r3, #15
 800575a:	4906      	ldr	r1, [pc, #24]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	4313      	orrs	r3, r2
 8005760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005762:	4b04      	ldr	r3, [pc, #16]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d005      	beq.n	800577c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e086      	b.n	8005882 <HAL_RCC_ClockConfig+0x34e>
 8005774:	52002000 	.word	0x52002000
 8005778:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d010      	beq.n	80057aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	4b3f      	ldr	r3, [pc, #252]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005794:	429a      	cmp	r2, r3
 8005796:	d208      	bcs.n	80057aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005798:	4b3c      	ldr	r3, [pc, #240]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	4939      	ldr	r1, [pc, #228]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d010      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	695a      	ldr	r2, [r3, #20]
 80057ba:	4b34      	ldr	r3, [pc, #208]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d208      	bcs.n	80057d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057c6:	4b31      	ldr	r3, [pc, #196]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	492e      	ldr	r1, [pc, #184]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0310 	and.w	r3, r3, #16
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d010      	beq.n	8005806 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699a      	ldr	r2, [r3, #24]
 80057e8:	4b28      	ldr	r3, [pc, #160]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d208      	bcs.n	8005806 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057f4:	4b25      	ldr	r3, [pc, #148]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	4922      	ldr	r1, [pc, #136]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 8005802:	4313      	orrs	r3, r2
 8005804:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b00      	cmp	r3, #0
 8005810:	d010      	beq.n	8005834 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69da      	ldr	r2, [r3, #28]
 8005816:	4b1d      	ldr	r3, [pc, #116]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800581e:	429a      	cmp	r2, r3
 8005820:	d208      	bcs.n	8005834 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005822:	4b1a      	ldr	r3, [pc, #104]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	4917      	ldr	r1, [pc, #92]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 8005830:	4313      	orrs	r3, r2
 8005832:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005834:	f000 f834 	bl	80058a0 <HAL_RCC_GetSysClockFreq>
 8005838:	4602      	mov	r2, r0
 800583a:	4b14      	ldr	r3, [pc, #80]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	0a1b      	lsrs	r3, r3, #8
 8005840:	f003 030f 	and.w	r3, r3, #15
 8005844:	4912      	ldr	r1, [pc, #72]	; (8005890 <HAL_RCC_ClockConfig+0x35c>)
 8005846:	5ccb      	ldrb	r3, [r1, r3]
 8005848:	f003 031f 	and.w	r3, r3, #31
 800584c:	fa22 f303 	lsr.w	r3, r2, r3
 8005850:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005852:	4b0e      	ldr	r3, [pc, #56]	; (800588c <HAL_RCC_ClockConfig+0x358>)
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	f003 030f 	and.w	r3, r3, #15
 800585a:	4a0d      	ldr	r2, [pc, #52]	; (8005890 <HAL_RCC_ClockConfig+0x35c>)
 800585c:	5cd3      	ldrb	r3, [r2, r3]
 800585e:	f003 031f 	and.w	r3, r3, #31
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	fa22 f303 	lsr.w	r3, r2, r3
 8005868:	4a0a      	ldr	r2, [pc, #40]	; (8005894 <HAL_RCC_ClockConfig+0x360>)
 800586a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800586c:	4a0a      	ldr	r2, [pc, #40]	; (8005898 <HAL_RCC_ClockConfig+0x364>)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005872:	4b0a      	ldr	r3, [pc, #40]	; (800589c <HAL_RCC_ClockConfig+0x368>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4618      	mov	r0, r3
 8005878:	f7fc fbea 	bl	8002050 <HAL_InitTick>
 800587c:	4603      	mov	r3, r0
 800587e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005880:	7bfb      	ldrb	r3, [r7, #15]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	58024400 	.word	0x58024400
 8005890:	0800d3f0 	.word	0x0800d3f0
 8005894:	2400002c 	.word	0x2400002c
 8005898:	24000028 	.word	0x24000028
 800589c:	24000030 	.word	0x24000030

080058a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b089      	sub	sp, #36	; 0x24
 80058a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058a6:	4bb3      	ldr	r3, [pc, #716]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058ae:	2b18      	cmp	r3, #24
 80058b0:	f200 8155 	bhi.w	8005b5e <HAL_RCC_GetSysClockFreq+0x2be>
 80058b4:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	08005921 	.word	0x08005921
 80058c0:	08005b5f 	.word	0x08005b5f
 80058c4:	08005b5f 	.word	0x08005b5f
 80058c8:	08005b5f 	.word	0x08005b5f
 80058cc:	08005b5f 	.word	0x08005b5f
 80058d0:	08005b5f 	.word	0x08005b5f
 80058d4:	08005b5f 	.word	0x08005b5f
 80058d8:	08005b5f 	.word	0x08005b5f
 80058dc:	08005947 	.word	0x08005947
 80058e0:	08005b5f 	.word	0x08005b5f
 80058e4:	08005b5f 	.word	0x08005b5f
 80058e8:	08005b5f 	.word	0x08005b5f
 80058ec:	08005b5f 	.word	0x08005b5f
 80058f0:	08005b5f 	.word	0x08005b5f
 80058f4:	08005b5f 	.word	0x08005b5f
 80058f8:	08005b5f 	.word	0x08005b5f
 80058fc:	0800594d 	.word	0x0800594d
 8005900:	08005b5f 	.word	0x08005b5f
 8005904:	08005b5f 	.word	0x08005b5f
 8005908:	08005b5f 	.word	0x08005b5f
 800590c:	08005b5f 	.word	0x08005b5f
 8005910:	08005b5f 	.word	0x08005b5f
 8005914:	08005b5f 	.word	0x08005b5f
 8005918:	08005b5f 	.word	0x08005b5f
 800591c:	08005953 	.word	0x08005953
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005920:	4b94      	ldr	r3, [pc, #592]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	2b00      	cmp	r3, #0
 800592a:	d009      	beq.n	8005940 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800592c:	4b91      	ldr	r3, [pc, #580]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	08db      	lsrs	r3, r3, #3
 8005932:	f003 0303 	and.w	r3, r3, #3
 8005936:	4a90      	ldr	r2, [pc, #576]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005938:	fa22 f303 	lsr.w	r3, r2, r3
 800593c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800593e:	e111      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005940:	4b8d      	ldr	r3, [pc, #564]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005942:	61bb      	str	r3, [r7, #24]
      break;
 8005944:	e10e      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005946:	4b8d      	ldr	r3, [pc, #564]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005948:	61bb      	str	r3, [r7, #24]
      break;
 800594a:	e10b      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800594c:	4b8c      	ldr	r3, [pc, #560]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800594e:	61bb      	str	r3, [r7, #24]
      break;
 8005950:	e108      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005952:	4b88      	ldr	r3, [pc, #544]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800595c:	4b85      	ldr	r3, [pc, #532]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800595e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005960:	091b      	lsrs	r3, r3, #4
 8005962:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005966:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005968:	4b82      	ldr	r3, [pc, #520]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005972:	4b80      	ldr	r3, [pc, #512]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005976:	08db      	lsrs	r3, r3, #3
 8005978:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	fb02 f303 	mul.w	r3, r2, r3
 8005982:	ee07 3a90 	vmov	s15, r3
 8005986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800598a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 80e1 	beq.w	8005b58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b02      	cmp	r3, #2
 800599a:	f000 8083 	beq.w	8005aa4 <HAL_RCC_GetSysClockFreq+0x204>
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	f200 80a1 	bhi.w	8005ae8 <HAL_RCC_GetSysClockFreq+0x248>
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <HAL_RCC_GetSysClockFreq+0x114>
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d056      	beq.n	8005a60 <HAL_RCC_GetSysClockFreq+0x1c0>
 80059b2:	e099      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059b4:	4b6f      	ldr	r3, [pc, #444]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d02d      	beq.n	8005a1c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059c0:	4b6c      	ldr	r3, [pc, #432]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	08db      	lsrs	r3, r3, #3
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	4a6b      	ldr	r2, [pc, #428]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059cc:	fa22 f303 	lsr.w	r3, r2, r3
 80059d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	ee07 3a90 	vmov	s15, r3
 80059d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	ee07 3a90 	vmov	s15, r3
 80059e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ea:	4b62      	ldr	r3, [pc, #392]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80059fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a16:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005a1a:	e087      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a26:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005b88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a2e:	4b51      	ldr	r3, [pc, #324]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a36:	ee07 3a90 	vmov	s15, r3
 8005a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a42:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a5e:	e065      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005b8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a72:	4b40      	ldr	r3, [pc, #256]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a86:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005aa2:	e043      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005b90 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab6:	4b2f      	ldr	r3, [pc, #188]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ae6:	e021      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	ee07 3a90 	vmov	s15, r3
 8005aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005b8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005afa:	4b1e      	ldr	r3, [pc, #120]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b0e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b2a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005b2c:	4b11      	ldr	r3, [pc, #68]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b30:	0a5b      	lsrs	r3, r3, #9
 8005b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b36:	3301      	adds	r3, #1
 8005b38:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	ee07 3a90 	vmov	s15, r3
 8005b40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b44:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b50:	ee17 3a90 	vmov	r3, s15
 8005b54:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005b56:	e005      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	61bb      	str	r3, [r7, #24]
      break;
 8005b5c:	e002      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005b5e:	4b07      	ldr	r3, [pc, #28]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b60:	61bb      	str	r3, [r7, #24]
      break;
 8005b62:	bf00      	nop
  }

  return sysclockfreq;
 8005b64:	69bb      	ldr	r3, [r7, #24]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3724      	adds	r7, #36	; 0x24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	58024400 	.word	0x58024400
 8005b78:	03d09000 	.word	0x03d09000
 8005b7c:	003d0900 	.word	0x003d0900
 8005b80:	007a1200 	.word	0x007a1200
 8005b84:	46000000 	.word	0x46000000
 8005b88:	4c742400 	.word	0x4c742400
 8005b8c:	4a742400 	.word	0x4a742400
 8005b90:	4af42400 	.word	0x4af42400

08005b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005b9a:	f7ff fe81 	bl	80058a0 <HAL_RCC_GetSysClockFreq>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	4b10      	ldr	r3, [pc, #64]	; (8005be4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	0a1b      	lsrs	r3, r3, #8
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	490f      	ldr	r1, [pc, #60]	; (8005be8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005bac:	5ccb      	ldrb	r3, [r1, r3]
 8005bae:	f003 031f 	and.w	r3, r3, #31
 8005bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005bb8:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	4a09      	ldr	r2, [pc, #36]	; (8005be8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005bc2:	5cd3      	ldrb	r3, [r2, r3]
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	fa22 f303 	lsr.w	r3, r2, r3
 8005bce:	4a07      	ldr	r2, [pc, #28]	; (8005bec <HAL_RCC_GetHCLKFreq+0x58>)
 8005bd0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005bd2:	4a07      	ldr	r2, [pc, #28]	; (8005bf0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005bd8:	4b04      	ldr	r3, [pc, #16]	; (8005bec <HAL_RCC_GetHCLKFreq+0x58>)
 8005bda:	681b      	ldr	r3, [r3, #0]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	58024400 	.word	0x58024400
 8005be8:	0800d3f0 	.word	0x0800d3f0
 8005bec:	2400002c 	.word	0x2400002c
 8005bf0:	24000028 	.word	0x24000028

08005bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005bf8:	f7ff ffcc 	bl	8005b94 <HAL_RCC_GetHCLKFreq>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	091b      	lsrs	r3, r3, #4
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	4904      	ldr	r1, [pc, #16]	; (8005c1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c0a:	5ccb      	ldrb	r3, [r1, r3]
 8005c0c:	f003 031f 	and.w	r3, r3, #31
 8005c10:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	58024400 	.word	0x58024400
 8005c1c:	0800d3f0 	.word	0x0800d3f0

08005c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005c24:	f7ff ffb6 	bl	8005b94 <HAL_RCC_GetHCLKFreq>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	0a1b      	lsrs	r3, r3, #8
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	4904      	ldr	r1, [pc, #16]	; (8005c48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c36:	5ccb      	ldrb	r3, [r1, r3]
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	58024400 	.word	0x58024400
 8005c48:	0800d3f0 	.word	0x0800d3f0

08005c4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c50:	b0c8      	sub	sp, #288	; 0x120
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005c70:	2500      	movs	r5, #0
 8005c72:	ea54 0305 	orrs.w	r3, r4, r5
 8005c76:	d049      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c82:	d02f      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c88:	d828      	bhi.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c8e:	d01a      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c94:	d822      	bhi.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c9e:	d007      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ca0:	e01c      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ca2:	4ba7      	ldr	r3, [pc, #668]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca6:	4aa6      	ldr	r2, [pc, #664]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cae:	e01a      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cb4:	3308      	adds	r3, #8
 8005cb6:	2102      	movs	r1, #2
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f001 fc43 	bl	8007544 <RCCEx_PLL2_Config>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cc4:	e00f      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cca:	3328      	adds	r3, #40	; 0x28
 8005ccc:	2102      	movs	r1, #2
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f001 fcea 	bl	80076a8 <RCCEx_PLL3_Config>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cda:	e004      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005ce2:	e000      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10a      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005cee:	4b94      	ldr	r3, [pc, #592]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cfc:	4a90      	ldr	r2, [pc, #576]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cfe:	430b      	orrs	r3, r1
 8005d00:	6513      	str	r3, [r2, #80]	; 0x50
 8005d02:	e003      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d08:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005d18:	f04f 0900 	mov.w	r9, #0
 8005d1c:	ea58 0309 	orrs.w	r3, r8, r9
 8005d20:	d047      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d82a      	bhi.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005d2c:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d32:	bf00      	nop
 8005d34:	08005d49 	.word	0x08005d49
 8005d38:	08005d57 	.word	0x08005d57
 8005d3c:	08005d6d 	.word	0x08005d6d
 8005d40:	08005d8b 	.word	0x08005d8b
 8005d44:	08005d8b 	.word	0x08005d8b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d48:	4b7d      	ldr	r3, [pc, #500]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	4a7c      	ldr	r2, [pc, #496]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d54:	e01a      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d5a:	3308      	adds	r3, #8
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f001 fbf0 	bl	8007544 <RCCEx_PLL2_Config>
 8005d64:	4603      	mov	r3, r0
 8005d66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d6a:	e00f      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d70:	3328      	adds	r3, #40	; 0x28
 8005d72:	2100      	movs	r1, #0
 8005d74:	4618      	mov	r0, r3
 8005d76:	f001 fc97 	bl	80076a8 <RCCEx_PLL3_Config>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d80:	e004      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005d88:	e000      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d94:	4b6a      	ldr	r3, [pc, #424]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d98:	f023 0107 	bic.w	r1, r3, #7
 8005d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da2:	4a67      	ldr	r2, [pc, #412]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005da4:	430b      	orrs	r3, r1
 8005da6:	6513      	str	r3, [r2, #80]	; 0x50
 8005da8:	e003      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005daa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005dae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005dbe:	f04f 0b00 	mov.w	fp, #0
 8005dc2:	ea5a 030b 	orrs.w	r3, sl, fp
 8005dc6:	d054      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dce:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005dd2:	d036      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005dd4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005dd8:	d82f      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dde:	d032      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005de4:	d829      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005de6:	2bc0      	cmp	r3, #192	; 0xc0
 8005de8:	d02f      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8005dea:	2bc0      	cmp	r3, #192	; 0xc0
 8005dec:	d825      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005dee:	2b80      	cmp	r3, #128	; 0x80
 8005df0:	d018      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005df2:	2b80      	cmp	r3, #128	; 0x80
 8005df4:	d821      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005dfa:	2b40      	cmp	r3, #64	; 0x40
 8005dfc:	d007      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005dfe:	e01c      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e00:	4b4f      	ldr	r3, [pc, #316]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e04:	4a4e      	ldr	r2, [pc, #312]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005e0c:	e01e      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e12:	3308      	adds	r3, #8
 8005e14:	2100      	movs	r1, #0
 8005e16:	4618      	mov	r0, r3
 8005e18:	f001 fb94 	bl	8007544 <RCCEx_PLL2_Config>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005e22:	e013      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e28:	3328      	adds	r3, #40	; 0x28
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f001 fc3b 	bl	80076a8 <RCCEx_PLL3_Config>
 8005e32:	4603      	mov	r3, r0
 8005e34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005e38:	e008      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005e40:	e004      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005e42:	bf00      	nop
 8005e44:	e002      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005e46:	bf00      	nop
 8005e48:	e000      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10a      	bne.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005e54:	4b3a      	ldr	r3, [pc, #232]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e58:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e62:	4a37      	ldr	r2, [pc, #220]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e64:	430b      	orrs	r3, r1
 8005e66:	6513      	str	r3, [r2, #80]	; 0x50
 8005e68:	e003      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e6e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005e7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e82:	2300      	movs	r3, #0
 8005e84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005e88:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	d05c      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e98:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005e9c:	d03b      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005e9e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005ea2:	d834      	bhi.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ea8:	d037      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005eaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eae:	d82e      	bhi.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005eb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005eb4:	d033      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005eb6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005eba:	d828      	bhi.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec0:	d01a      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec6:	d822      	bhi.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed0:	d007      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005ed2:	e01c      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed4:	4b1a      	ldr	r3, [pc, #104]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	4a19      	ldr	r2, [pc, #100]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ede:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005ee0:	e01e      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	2100      	movs	r1, #0
 8005eea:	4618      	mov	r0, r3
 8005eec:	f001 fb2a 	bl	8007544 <RCCEx_PLL2_Config>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005ef6:	e013      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005efc:	3328      	adds	r3, #40	; 0x28
 8005efe:	2100      	movs	r1, #0
 8005f00:	4618      	mov	r0, r3
 8005f02:	f001 fbd1 	bl	80076a8 <RCCEx_PLL3_Config>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005f0c:	e008      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005f14:	e004      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005f16:	bf00      	nop
 8005f18:	e002      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005f1a:	bf00      	nop
 8005f1c:	e000      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10d      	bne.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005f28:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f2c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f36:	4a02      	ldr	r2, [pc, #8]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	6513      	str	r3, [r2, #80]	; 0x50
 8005f3c:	e006      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005f3e:	bf00      	nop
 8005f40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f48:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f54:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005f58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005f62:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005f66:	460b      	mov	r3, r1
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	d03a      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f72:	2b30      	cmp	r3, #48	; 0x30
 8005f74:	d01f      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005f76:	2b30      	cmp	r3, #48	; 0x30
 8005f78:	d819      	bhi.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	d00c      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	d815      	bhi.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d019      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005f86:	2b10      	cmp	r3, #16
 8005f88:	d111      	bne.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f8a:	4bae      	ldr	r3, [pc, #696]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	4aad      	ldr	r2, [pc, #692]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005f96:	e011      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f9c:	3308      	adds	r3, #8
 8005f9e:	2102      	movs	r1, #2
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f001 facf 	bl	8007544 <RCCEx_PLL2_Config>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005fac:	e006      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005fb4:	e002      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005fb6:	bf00      	nop
 8005fb8:	e000      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10a      	bne.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005fc4:	4b9f      	ldr	r3, [pc, #636]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd2:	4a9c      	ldr	r2, [pc, #624]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fd8:	e003      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fde:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fea:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005fee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ff8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4313      	orrs	r3, r2
 8006000:	d051      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800600c:	d035      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800600e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006012:	d82e      	bhi.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006014:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006018:	d031      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800601a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800601e:	d828      	bhi.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006024:	d01a      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800602a:	d822      	bhi.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006034:	d007      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006036:	e01c      	b.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006038:	4b82      	ldr	r3, [pc, #520]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	4a81      	ldr	r2, [pc, #516]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800603e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006042:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006044:	e01c      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800604a:	3308      	adds	r3, #8
 800604c:	2100      	movs	r1, #0
 800604e:	4618      	mov	r0, r3
 8006050:	f001 fa78 	bl	8007544 <RCCEx_PLL2_Config>
 8006054:	4603      	mov	r3, r0
 8006056:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800605a:	e011      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800605c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006060:	3328      	adds	r3, #40	; 0x28
 8006062:	2100      	movs	r1, #0
 8006064:	4618      	mov	r0, r3
 8006066:	f001 fb1f 	bl	80076a8 <RCCEx_PLL3_Config>
 800606a:	4603      	mov	r3, r0
 800606c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006070:	e006      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006078:	e002      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800607a:	bf00      	nop
 800607c:	e000      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800607e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006080:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10a      	bne.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006088:	4b6e      	ldr	r3, [pc, #440]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800608a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800608c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006090:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006096:	4a6b      	ldr	r2, [pc, #428]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006098:	430b      	orrs	r3, r1
 800609a:	6513      	str	r3, [r2, #80]	; 0x50
 800609c:	e003      	b.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80060a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80060a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ae:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80060b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060b6:	2300      	movs	r3, #0
 80060b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80060bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80060c0:	460b      	mov	r3, r1
 80060c2:	4313      	orrs	r3, r2
 80060c4:	d053      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80060c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060d0:	d033      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80060d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060d6:	d82c      	bhi.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80060d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060dc:	d02f      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80060de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060e2:	d826      	bhi.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80060e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80060e8:	d02b      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80060ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80060ee:	d820      	bhi.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80060f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060f4:	d012      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80060f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060fa:	d81a      	bhi.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d022      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8006100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006104:	d115      	bne.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800610a:	3308      	adds	r3, #8
 800610c:	2101      	movs	r1, #1
 800610e:	4618      	mov	r0, r3
 8006110:	f001 fa18 	bl	8007544 <RCCEx_PLL2_Config>
 8006114:	4603      	mov	r3, r0
 8006116:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800611a:	e015      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800611c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006120:	3328      	adds	r3, #40	; 0x28
 8006122:	2101      	movs	r1, #1
 8006124:	4618      	mov	r0, r3
 8006126:	f001 fabf 	bl	80076a8 <RCCEx_PLL3_Config>
 800612a:	4603      	mov	r3, r0
 800612c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006130:	e00a      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006138:	e006      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800613a:	bf00      	nop
 800613c:	e004      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800613e:	bf00      	nop
 8006140:	e002      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006142:	bf00      	nop
 8006144:	e000      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006148:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006150:	4b3c      	ldr	r3, [pc, #240]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006154:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006158:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800615c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800615e:	4a39      	ldr	r2, [pc, #228]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006160:	430b      	orrs	r3, r1
 8006162:	6513      	str	r3, [r2, #80]	; 0x50
 8006164:	e003      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006166:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800616a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800616e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006176:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800617a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800617e:	2300      	movs	r3, #0
 8006180:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006184:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006188:	460b      	mov	r3, r1
 800618a:	4313      	orrs	r3, r2
 800618c:	d060      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800618e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006192:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006196:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800619a:	d039      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800619c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80061a0:	d832      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80061a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061a6:	d035      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80061a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061ac:	d82c      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80061ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b2:	d031      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80061b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b8:	d826      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80061ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061be:	d02d      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80061c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061c4:	d820      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80061c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061ca:	d012      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80061cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061d0:	d81a      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d024      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80061d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061da:	d115      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061e0:	3308      	adds	r3, #8
 80061e2:	2101      	movs	r1, #1
 80061e4:	4618      	mov	r0, r3
 80061e6:	f001 f9ad 	bl	8007544 <RCCEx_PLL2_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80061f0:	e017      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061f6:	3328      	adds	r3, #40	; 0x28
 80061f8:	2101      	movs	r1, #1
 80061fa:	4618      	mov	r0, r3
 80061fc:	f001 fa54 	bl	80076a8 <RCCEx_PLL3_Config>
 8006200:	4603      	mov	r3, r0
 8006202:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006206:	e00c      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800620e:	e008      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006210:	bf00      	nop
 8006212:	e006      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006214:	bf00      	nop
 8006216:	e004      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006218:	bf00      	nop
 800621a:	e002      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800621c:	bf00      	nop
 800621e:	e000      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006222:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10e      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800622a:	4b06      	ldr	r3, [pc, #24]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800622c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006236:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800623a:	4a02      	ldr	r2, [pc, #8]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800623c:	430b      	orrs	r3, r1
 800623e:	6593      	str	r3, [r2, #88]	; 0x58
 8006240:	e006      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006242:	bf00      	nop
 8006244:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006248:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800624c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006258:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800625c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006260:	2300      	movs	r3, #0
 8006262:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006266:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800626a:	460b      	mov	r3, r1
 800626c:	4313      	orrs	r3, r2
 800626e:	d037      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800627a:	d00e      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800627c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006280:	d816      	bhi.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006282:	2b00      	cmp	r3, #0
 8006284:	d018      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006286:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800628a:	d111      	bne.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800628c:	4bc4      	ldr	r3, [pc, #784]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	4ac3      	ldr	r2, [pc, #780]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006296:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006298:	e00f      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800629a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800629e:	3308      	adds	r3, #8
 80062a0:	2101      	movs	r1, #1
 80062a2:	4618      	mov	r0, r3
 80062a4:	f001 f94e 	bl	8007544 <RCCEx_PLL2_Config>
 80062a8:	4603      	mov	r3, r0
 80062aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80062ae:	e004      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80062b6:	e000      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80062b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80062c2:	4bb7      	ldr	r3, [pc, #732]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80062ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062d0:	4ab3      	ldr	r2, [pc, #716]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062d2:	430b      	orrs	r3, r1
 80062d4:	6513      	str	r3, [r2, #80]	; 0x50
 80062d6:	e003      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80062e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80062ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062f0:	2300      	movs	r3, #0
 80062f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80062f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4313      	orrs	r3, r2
 80062fe:	d039      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006306:	2b03      	cmp	r3, #3
 8006308:	d81c      	bhi.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800630a:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800630c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006310:	0800634d 	.word	0x0800634d
 8006314:	08006321 	.word	0x08006321
 8006318:	0800632f 	.word	0x0800632f
 800631c:	0800634d 	.word	0x0800634d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006320:	4b9f      	ldr	r3, [pc, #636]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	4a9e      	ldr	r2, [pc, #632]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800632a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800632c:	e00f      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800632e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006332:	3308      	adds	r3, #8
 8006334:	2102      	movs	r1, #2
 8006336:	4618      	mov	r0, r3
 8006338:	f001 f904 	bl	8007544 <RCCEx_PLL2_Config>
 800633c:	4603      	mov	r3, r0
 800633e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006342:	e004      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800634a:	e000      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800634c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800634e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10a      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006356:	4b92      	ldr	r3, [pc, #584]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800635a:	f023 0103 	bic.w	r1, r3, #3
 800635e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006364:	4a8e      	ldr	r2, [pc, #568]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006366:	430b      	orrs	r3, r1
 8006368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800636a:	e003      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006370:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006374:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006380:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006384:	2300      	movs	r3, #0
 8006386:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800638a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800638e:	460b      	mov	r3, r1
 8006390:	4313      	orrs	r3, r2
 8006392:	f000 8099 	beq.w	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006396:	4b83      	ldr	r3, [pc, #524]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a82      	ldr	r2, [pc, #520]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800639c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063a2:	f7fb fe9f 	bl	80020e4 <HAL_GetTick>
 80063a6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063aa:	e00b      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ac:	f7fb fe9a 	bl	80020e4 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b64      	cmp	r3, #100	; 0x64
 80063ba:	d903      	bls.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80063c2:	e005      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063c4:	4b77      	ldr	r3, [pc, #476]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0ed      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80063d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d173      	bne.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80063d8:	4b71      	ldr	r3, [pc, #452]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80063e4:	4053      	eors	r3, r2
 80063e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d015      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063ee:	4b6c      	ldr	r3, [pc, #432]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063fa:	4b69      	ldr	r3, [pc, #420]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fe:	4a68      	ldr	r2, [pc, #416]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006404:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006406:	4b66      	ldr	r3, [pc, #408]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640a:	4a65      	ldr	r2, [pc, #404]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800640c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006410:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006412:	4a63      	ldr	r2, [pc, #396]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006418:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800641a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800641e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006426:	d118      	bne.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006428:	f7fb fe5c 	bl	80020e4 <HAL_GetTick>
 800642c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006430:	e00d      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006432:	f7fb fe57 	bl	80020e4 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800643c:	1ad2      	subs	r2, r2, r3
 800643e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006442:	429a      	cmp	r2, r3
 8006444:	d903      	bls.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800644c:	e005      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800644e:	4b54      	ldr	r3, [pc, #336]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0eb      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800645a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800645e:	2b00      	cmp	r3, #0
 8006460:	d129      	bne.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006466:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800646a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800646e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006472:	d10e      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006474:	4b4a      	ldr	r3, [pc, #296]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800647c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006480:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006484:	091a      	lsrs	r2, r3, #4
 8006486:	4b48      	ldr	r3, [pc, #288]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006488:	4013      	ands	r3, r2
 800648a:	4a45      	ldr	r2, [pc, #276]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800648c:	430b      	orrs	r3, r1
 800648e:	6113      	str	r3, [r2, #16]
 8006490:	e005      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006492:	4b43      	ldr	r3, [pc, #268]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	4a42      	ldr	r2, [pc, #264]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006498:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800649c:	6113      	str	r3, [r2, #16]
 800649e:	4b40      	ldr	r3, [pc, #256]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064a0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80064a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80064aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064ae:	4a3c      	ldr	r2, [pc, #240]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064b0:	430b      	orrs	r3, r1
 80064b2:	6713      	str	r3, [r2, #112]	; 0x70
 80064b4:	e008      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80064ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80064be:	e003      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80064c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80064c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d0:	f002 0301 	and.w	r3, r2, #1
 80064d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064d8:	2300      	movs	r3, #0
 80064da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4313      	orrs	r3, r2
 80064e6:	f000 8090 	beq.w	800660a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80064ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064f2:	2b28      	cmp	r3, #40	; 0x28
 80064f4:	d870      	bhi.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80064f6:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fc:	080065e1 	.word	0x080065e1
 8006500:	080065d9 	.word	0x080065d9
 8006504:	080065d9 	.word	0x080065d9
 8006508:	080065d9 	.word	0x080065d9
 800650c:	080065d9 	.word	0x080065d9
 8006510:	080065d9 	.word	0x080065d9
 8006514:	080065d9 	.word	0x080065d9
 8006518:	080065d9 	.word	0x080065d9
 800651c:	080065ad 	.word	0x080065ad
 8006520:	080065d9 	.word	0x080065d9
 8006524:	080065d9 	.word	0x080065d9
 8006528:	080065d9 	.word	0x080065d9
 800652c:	080065d9 	.word	0x080065d9
 8006530:	080065d9 	.word	0x080065d9
 8006534:	080065d9 	.word	0x080065d9
 8006538:	080065d9 	.word	0x080065d9
 800653c:	080065c3 	.word	0x080065c3
 8006540:	080065d9 	.word	0x080065d9
 8006544:	080065d9 	.word	0x080065d9
 8006548:	080065d9 	.word	0x080065d9
 800654c:	080065d9 	.word	0x080065d9
 8006550:	080065d9 	.word	0x080065d9
 8006554:	080065d9 	.word	0x080065d9
 8006558:	080065d9 	.word	0x080065d9
 800655c:	080065e1 	.word	0x080065e1
 8006560:	080065d9 	.word	0x080065d9
 8006564:	080065d9 	.word	0x080065d9
 8006568:	080065d9 	.word	0x080065d9
 800656c:	080065d9 	.word	0x080065d9
 8006570:	080065d9 	.word	0x080065d9
 8006574:	080065d9 	.word	0x080065d9
 8006578:	080065d9 	.word	0x080065d9
 800657c:	080065e1 	.word	0x080065e1
 8006580:	080065d9 	.word	0x080065d9
 8006584:	080065d9 	.word	0x080065d9
 8006588:	080065d9 	.word	0x080065d9
 800658c:	080065d9 	.word	0x080065d9
 8006590:	080065d9 	.word	0x080065d9
 8006594:	080065d9 	.word	0x080065d9
 8006598:	080065d9 	.word	0x080065d9
 800659c:	080065e1 	.word	0x080065e1
 80065a0:	58024400 	.word	0x58024400
 80065a4:	58024800 	.word	0x58024800
 80065a8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065b0:	3308      	adds	r3, #8
 80065b2:	2101      	movs	r1, #1
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 ffc5 	bl	8007544 <RCCEx_PLL2_Config>
 80065ba:	4603      	mov	r3, r0
 80065bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80065c0:	e00f      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065c6:	3328      	adds	r3, #40	; 0x28
 80065c8:	2101      	movs	r1, #1
 80065ca:	4618      	mov	r0, r3
 80065cc:	f001 f86c 	bl	80076a8 <RCCEx_PLL3_Config>
 80065d0:	4603      	mov	r3, r0
 80065d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80065d6:	e004      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80065de:	e000      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80065e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10b      	bne.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80065ea:	4bc0      	ldr	r3, [pc, #768]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80065ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ee:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80065f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065fa:	4abc      	ldr	r2, [pc, #752]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80065fc:	430b      	orrs	r3, r1
 80065fe:	6553      	str	r3, [r2, #84]	; 0x54
 8006600:	e003      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006602:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006606:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800660a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006612:	f002 0302 	and.w	r3, r2, #2
 8006616:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800661a:	2300      	movs	r3, #0
 800661c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006620:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006624:	460b      	mov	r3, r1
 8006626:	4313      	orrs	r3, r2
 8006628:	d043      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800662a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800662e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006632:	2b05      	cmp	r3, #5
 8006634:	d824      	bhi.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006636:	a201      	add	r2, pc, #4	; (adr r2, 800663c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663c:	08006689 	.word	0x08006689
 8006640:	08006655 	.word	0x08006655
 8006644:	0800666b 	.word	0x0800666b
 8006648:	08006689 	.word	0x08006689
 800664c:	08006689 	.word	0x08006689
 8006650:	08006689 	.word	0x08006689
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006658:	3308      	adds	r3, #8
 800665a:	2101      	movs	r1, #1
 800665c:	4618      	mov	r0, r3
 800665e:	f000 ff71 	bl	8007544 <RCCEx_PLL2_Config>
 8006662:	4603      	mov	r3, r0
 8006664:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006668:	e00f      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800666a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800666e:	3328      	adds	r3, #40	; 0x28
 8006670:	2101      	movs	r1, #1
 8006672:	4618      	mov	r0, r3
 8006674:	f001 f818 	bl	80076a8 <RCCEx_PLL3_Config>
 8006678:	4603      	mov	r3, r0
 800667a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800667e:	e004      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006686:	e000      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8006688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800668a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10b      	bne.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006692:	4b96      	ldr	r3, [pc, #600]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006696:	f023 0107 	bic.w	r1, r3, #7
 800669a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800669e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a2:	4a92      	ldr	r2, [pc, #584]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80066a4:	430b      	orrs	r3, r1
 80066a6:	6553      	str	r3, [r2, #84]	; 0x54
 80066a8:	e003      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	f002 0304 	and.w	r3, r2, #4
 80066be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066c2:	2300      	movs	r3, #0
 80066c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066c8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80066cc:	460b      	mov	r3, r1
 80066ce:	4313      	orrs	r3, r2
 80066d0:	d043      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80066d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066da:	2b05      	cmp	r3, #5
 80066dc:	d824      	bhi.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80066de:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80066e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e4:	08006731 	.word	0x08006731
 80066e8:	080066fd 	.word	0x080066fd
 80066ec:	08006713 	.word	0x08006713
 80066f0:	08006731 	.word	0x08006731
 80066f4:	08006731 	.word	0x08006731
 80066f8:	08006731 	.word	0x08006731
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006700:	3308      	adds	r3, #8
 8006702:	2101      	movs	r1, #1
 8006704:	4618      	mov	r0, r3
 8006706:	f000 ff1d 	bl	8007544 <RCCEx_PLL2_Config>
 800670a:	4603      	mov	r3, r0
 800670c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006710:	e00f      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006716:	3328      	adds	r3, #40	; 0x28
 8006718:	2101      	movs	r1, #1
 800671a:	4618      	mov	r0, r3
 800671c:	f000 ffc4 	bl	80076a8 <RCCEx_PLL3_Config>
 8006720:	4603      	mov	r3, r0
 8006722:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006726:	e004      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800672e:	e000      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006732:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10b      	bne.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800673a:	4b6c      	ldr	r3, [pc, #432]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800673c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673e:	f023 0107 	bic.w	r1, r3, #7
 8006742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006746:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800674a:	4a68      	ldr	r2, [pc, #416]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800674c:	430b      	orrs	r3, r1
 800674e:	6593      	str	r3, [r2, #88]	; 0x58
 8006750:	e003      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006752:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006756:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800675a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006762:	f002 0320 	and.w	r3, r2, #32
 8006766:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800676a:	2300      	movs	r3, #0
 800676c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006770:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006774:	460b      	mov	r3, r1
 8006776:	4313      	orrs	r3, r2
 8006778:	d055      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800677a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800677e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006786:	d033      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800678c:	d82c      	bhi.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800678e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006792:	d02f      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006798:	d826      	bhi.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800679a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800679e:	d02b      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80067a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067a4:	d820      	bhi.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80067a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067aa:	d012      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80067ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b0:	d81a      	bhi.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d022      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80067b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067ba:	d115      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067c0:	3308      	adds	r3, #8
 80067c2:	2100      	movs	r1, #0
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 febd 	bl	8007544 <RCCEx_PLL2_Config>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80067d0:	e015      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067d6:	3328      	adds	r3, #40	; 0x28
 80067d8:	2102      	movs	r1, #2
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 ff64 	bl	80076a8 <RCCEx_PLL3_Config>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80067e6:	e00a      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80067ee:	e006      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80067f0:	bf00      	nop
 80067f2:	e004      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80067f4:	bf00      	nop
 80067f6:	e002      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80067f8:	bf00      	nop
 80067fa:	e000      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80067fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10b      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006806:	4b39      	ldr	r3, [pc, #228]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800680e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006812:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006816:	4a35      	ldr	r2, [pc, #212]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006818:	430b      	orrs	r3, r1
 800681a:	6553      	str	r3, [r2, #84]	; 0x54
 800681c:	e003      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006822:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006826:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006832:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006836:	2300      	movs	r3, #0
 8006838:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800683c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006840:	460b      	mov	r3, r1
 8006842:	4313      	orrs	r3, r2
 8006844:	d058      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800684a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800684e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006852:	d033      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006854:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006858:	d82c      	bhi.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800685a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800685e:	d02f      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006864:	d826      	bhi.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006866:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800686a:	d02b      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800686c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006870:	d820      	bhi.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006876:	d012      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800687c:	d81a      	bhi.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800687e:	2b00      	cmp	r3, #0
 8006880:	d022      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006886:	d115      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800688c:	3308      	adds	r3, #8
 800688e:	2100      	movs	r1, #0
 8006890:	4618      	mov	r0, r3
 8006892:	f000 fe57 	bl	8007544 <RCCEx_PLL2_Config>
 8006896:	4603      	mov	r3, r0
 8006898:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800689c:	e015      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800689e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068a2:	3328      	adds	r3, #40	; 0x28
 80068a4:	2102      	movs	r1, #2
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fefe 	bl	80076a8 <RCCEx_PLL3_Config>
 80068ac:	4603      	mov	r3, r0
 80068ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80068b2:	e00a      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80068ba:	e006      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80068bc:	bf00      	nop
 80068be:	e004      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80068c0:	bf00      	nop
 80068c2:	e002      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80068c4:	bf00      	nop
 80068c6:	e000      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80068c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10e      	bne.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068d2:	4b06      	ldr	r3, [pc, #24]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80068d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80068da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068e2:	4a02      	ldr	r2, [pc, #8]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80068e4:	430b      	orrs	r3, r1
 80068e6:	6593      	str	r3, [r2, #88]	; 0x58
 80068e8:	e006      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80068ea:	bf00      	nop
 80068ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80068f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006904:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006908:	2300      	movs	r3, #0
 800690a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800690e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006912:	460b      	mov	r3, r1
 8006914:	4313      	orrs	r3, r2
 8006916:	d055      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800691c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006920:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006924:	d033      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006926:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800692a:	d82c      	bhi.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800692c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006930:	d02f      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006936:	d826      	bhi.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006938:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800693c:	d02b      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800693e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006942:	d820      	bhi.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006948:	d012      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800694a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800694e:	d81a      	bhi.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006950:	2b00      	cmp	r3, #0
 8006952:	d022      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006958:	d115      	bne.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800695a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800695e:	3308      	adds	r3, #8
 8006960:	2100      	movs	r1, #0
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fdee 	bl	8007544 <RCCEx_PLL2_Config>
 8006968:	4603      	mov	r3, r0
 800696a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800696e:	e015      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006974:	3328      	adds	r3, #40	; 0x28
 8006976:	2102      	movs	r1, #2
 8006978:	4618      	mov	r0, r3
 800697a:	f000 fe95 	bl	80076a8 <RCCEx_PLL3_Config>
 800697e:	4603      	mov	r3, r0
 8006980:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006984:	e00a      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800698c:	e006      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800698e:	bf00      	nop
 8006990:	e004      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006992:	bf00      	nop
 8006994:	e002      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006996:	bf00      	nop
 8006998:	e000      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800699a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800699c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10b      	bne.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80069a4:	4ba1      	ldr	r3, [pc, #644]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80069ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80069b4:	4a9d      	ldr	r2, [pc, #628]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069b6:	430b      	orrs	r3, r1
 80069b8:	6593      	str	r3, [r2, #88]	; 0x58
 80069ba:	e003      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80069c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80069c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069cc:	f002 0308 	and.w	r3, r2, #8
 80069d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069d4:	2300      	movs	r3, #0
 80069d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80069de:	460b      	mov	r3, r1
 80069e0:	4313      	orrs	r3, r2
 80069e2:	d01e      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80069e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f0:	d10c      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80069f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069f6:	3328      	adds	r3, #40	; 0x28
 80069f8:	2102      	movs	r1, #2
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fe54 	bl	80076a8 <RCCEx_PLL3_Config>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d002      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006a0c:	4b87      	ldr	r3, [pc, #540]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a1c:	4a83      	ldr	r2, [pc, #524]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a1e:	430b      	orrs	r3, r1
 8006a20:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2a:	f002 0310 	and.w	r3, r2, #16
 8006a2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a32:	2300      	movs	r3, #0
 8006a34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a38:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	d01e      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a4e:	d10c      	bne.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a54:	3328      	adds	r3, #40	; 0x28
 8006a56:	2102      	movs	r1, #2
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 fe25 	bl	80076a8 <RCCEx_PLL3_Config>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a6a:	4b70      	ldr	r3, [pc, #448]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a7a:	4a6c      	ldr	r2, [pc, #432]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a7c:	430b      	orrs	r3, r1
 8006a7e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a88:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006a8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a90:	2300      	movs	r3, #0
 8006a92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	d03e      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aa4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006aac:	d022      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006aae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ab2:	d81b      	bhi.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d003      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006abc:	d00b      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006abe:	e015      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 fd3b 	bl	8007544 <RCCEx_PLL2_Config>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ad4:	e00f      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ada:	3328      	adds	r3, #40	; 0x28
 8006adc:	2102      	movs	r1, #2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 fde2 	bl	80076a8 <RCCEx_PLL3_Config>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006aea:	e004      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006af2:	e000      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006af6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10b      	bne.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006afe:	4b4b      	ldr	r3, [pc, #300]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b02:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b0e:	4a47      	ldr	r2, [pc, #284]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b10:	430b      	orrs	r3, r1
 8006b12:	6593      	str	r3, [r2, #88]	; 0x58
 8006b14:	e003      	b.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b1a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b26:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006b2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b30:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006b34:	460b      	mov	r3, r1
 8006b36:	4313      	orrs	r3, r2
 8006b38:	d03b      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b46:	d01f      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006b48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b4c:	d818      	bhi.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b52:	d003      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006b54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b58:	d007      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8006b5a:	e011      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b5c:	4b33      	ldr	r3, [pc, #204]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b60:	4a32      	ldr	r2, [pc, #200]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b68:	e00f      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b6e:	3328      	adds	r3, #40	; 0x28
 8006b70:	2101      	movs	r1, #1
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fd98 	bl	80076a8 <RCCEx_PLL3_Config>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b7e:	e004      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006b86:	e000      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10b      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b92:	4b26      	ldr	r3, [pc, #152]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b96:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba2:	4a22      	ldr	r2, [pc, #136]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ba4:	430b      	orrs	r3, r1
 8006ba6:	6553      	str	r3, [r2, #84]	; 0x54
 8006ba8:	e003      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006baa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006bae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006bb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006bbe:	673b      	str	r3, [r7, #112]	; 0x70
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	677b      	str	r3, [r7, #116]	; 0x74
 8006bc4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	d034      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d003      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bdc:	d007      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006bde:	e011      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006be0:	4b12      	ldr	r3, [pc, #72]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be4:	4a11      	ldr	r2, [pc, #68]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006bec:	e00e      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	2102      	movs	r1, #2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fca4 	bl	8007544 <RCCEx_PLL2_Config>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c02:	e003      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10d      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c14:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c22:	4a02      	ldr	r2, [pc, #8]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c24:	430b      	orrs	r3, r1
 8006c26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c28:	e006      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006c2a:	bf00      	nop
 8006c2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006c44:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c46:	2300      	movs	r3, #0
 8006c48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c4a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4313      	orrs	r3, r2
 8006c52:	d00c      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c58:	3328      	adds	r3, #40	; 0x28
 8006c5a:	2102      	movs	r1, #2
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 fd23 	bl	80076a8 <RCCEx_PLL3_Config>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d002      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c76:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006c7a:	663b      	str	r3, [r7, #96]	; 0x60
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	667b      	str	r3, [r7, #100]	; 0x64
 8006c80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006c84:	460b      	mov	r3, r1
 8006c86:	4313      	orrs	r3, r2
 8006c88:	d038      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c96:	d018      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006c98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c9c:	d811      	bhi.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ca2:	d014      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ca8:	d80b      	bhi.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d011      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb2:	d106      	bne.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cb4:	4bc3      	ldr	r3, [pc, #780]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb8:	4ac2      	ldr	r2, [pc, #776]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006cc0:	e008      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006cc8:	e004      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006cca:	bf00      	nop
 8006ccc:	e002      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006cce:	bf00      	nop
 8006cd0:	e000      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10b      	bne.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cdc:	4bb9      	ldr	r3, [pc, #740]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cec:	4ab5      	ldr	r2, [pc, #724]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006cee:	430b      	orrs	r3, r1
 8006cf0:	6553      	str	r3, [r2, #84]	; 0x54
 8006cf2:	e003      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006cf8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d04:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006d08:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d0e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006d12:	460b      	mov	r3, r1
 8006d14:	4313      	orrs	r3, r2
 8006d16:	d009      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d18:	4baa      	ldr	r3, [pc, #680]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d26:	4aa7      	ldr	r2, [pc, #668]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006d38:	653b      	str	r3, [r7, #80]	; 0x50
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	657b      	str	r3, [r7, #84]	; 0x54
 8006d3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006d42:	460b      	mov	r3, r1
 8006d44:	4313      	orrs	r3, r2
 8006d46:	d009      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d48:	4b9e      	ldr	r3, [pc, #632]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d4c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d56:	4a9b      	ldr	r2, [pc, #620]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006d68:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d6e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006d72:	460b      	mov	r3, r1
 8006d74:	4313      	orrs	r3, r2
 8006d76:	d009      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006d78:	4b92      	ldr	r3, [pc, #584]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d7c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8006d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d86:	4a8f      	ldr	r2, [pc, #572]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d88:	430b      	orrs	r3, r1
 8006d8a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d94:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006d98:	643b      	str	r3, [r7, #64]	; 0x40
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d9e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006da2:	460b      	mov	r3, r1
 8006da4:	4313      	orrs	r3, r2
 8006da6:	d00e      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006da8:	4b86      	ldr	r3, [pc, #536]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	4a85      	ldr	r2, [pc, #532]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006dae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006db2:	6113      	str	r3, [r2, #16]
 8006db4:	4b83      	ldr	r3, [pc, #524]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006db6:	6919      	ldr	r1, [r3, #16]
 8006db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dbc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006dc0:	4a80      	ldr	r2, [pc, #512]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006dc2:	430b      	orrs	r3, r1
 8006dc4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dce:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006dd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4313      	orrs	r3, r2
 8006de0:	d009      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006de2:	4b78      	ldr	r3, [pc, #480]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df0:	4a74      	ldr	r2, [pc, #464]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006df2:	430b      	orrs	r3, r1
 8006df4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfe:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006e02:	633b      	str	r3, [r7, #48]	; 0x30
 8006e04:	2300      	movs	r3, #0
 8006e06:	637b      	str	r3, [r7, #52]	; 0x34
 8006e08:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	d00a      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e12:	4b6c      	ldr	r3, [pc, #432]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e16:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e22:	4a68      	ldr	r2, [pc, #416]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e24:	430b      	orrs	r3, r1
 8006e26:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e30:	2100      	movs	r1, #0
 8006e32:	62b9      	str	r1, [r7, #40]	; 0x28
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e3a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4313      	orrs	r3, r2
 8006e42:	d011      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e48:	3308      	adds	r3, #8
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 fb79 	bl	8007544 <RCCEx_PLL2_Config>
 8006e52:	4603      	mov	r3, r0
 8006e54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006e58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e64:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	2100      	movs	r1, #0
 8006e72:	6239      	str	r1, [r7, #32]
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	627b      	str	r3, [r7, #36]	; 0x24
 8006e7a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4313      	orrs	r3, r2
 8006e82:	d011      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e88:	3308      	adds	r3, #8
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 fb59 	bl	8007544 <RCCEx_PLL2_Config>
 8006e92:	4603      	mov	r3, r0
 8006e94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006e98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d003      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ea4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	61b9      	str	r1, [r7, #24]
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	61fb      	str	r3, [r7, #28]
 8006eba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	d011      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ec8:	3308      	adds	r3, #8
 8006eca:	2102      	movs	r1, #2
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fb39 	bl	8007544 <RCCEx_PLL2_Config>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006ed8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ee4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	6139      	str	r1, [r7, #16]
 8006ef4:	f003 0308 	and.w	r3, r3, #8
 8006ef8:	617b      	str	r3, [r7, #20]
 8006efa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006efe:	460b      	mov	r3, r1
 8006f00:	4313      	orrs	r3, r2
 8006f02:	d011      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f08:	3328      	adds	r3, #40	; 0x28
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 fbcb 	bl	80076a8 <RCCEx_PLL3_Config>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8006f18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f24:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	2100      	movs	r1, #0
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	f003 0310 	and.w	r3, r3, #16
 8006f38:	60fb      	str	r3, [r7, #12]
 8006f3a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4313      	orrs	r3, r2
 8006f42:	d011      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f48:	3328      	adds	r3, #40	; 0x28
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 fbab 	bl	80076a8 <RCCEx_PLL3_Config>
 8006f52:	4603      	mov	r3, r0
 8006f54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006f58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f64:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f70:	2100      	movs	r1, #0
 8006f72:	6039      	str	r1, [r7, #0]
 8006f74:	f003 0320 	and.w	r3, r3, #32
 8006f78:	607b      	str	r3, [r7, #4]
 8006f7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4313      	orrs	r3, r2
 8006f82:	d011      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f88:	3328      	adds	r3, #40	; 0x28
 8006f8a:	2102      	movs	r1, #2
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fb8b 	bl	80076a8 <RCCEx_PLL3_Config>
 8006f92:	4603      	mov	r3, r0
 8006f94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006f98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d003      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fa4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8006fa8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	e000      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fc2:	bf00      	nop
 8006fc4:	58024400 	.word	0x58024400

08006fc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006fcc:	f7fe fde2 	bl	8005b94 <HAL_RCC_GetHCLKFreq>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	4b06      	ldr	r3, [pc, #24]	; (8006fec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	091b      	lsrs	r3, r3, #4
 8006fd8:	f003 0307 	and.w	r3, r3, #7
 8006fdc:	4904      	ldr	r1, [pc, #16]	; (8006ff0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006fde:	5ccb      	ldrb	r3, [r1, r3]
 8006fe0:	f003 031f 	and.w	r3, r3, #31
 8006fe4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	58024400 	.word	0x58024400
 8006ff0:	0800d3f0 	.word	0x0800d3f0

08006ff4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b089      	sub	sp, #36	; 0x24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ffc:	4ba1      	ldr	r3, [pc, #644]	; (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007000:	f003 0303 	and.w	r3, r3, #3
 8007004:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007006:	4b9f      	ldr	r3, [pc, #636]	; (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700a:	0b1b      	lsrs	r3, r3, #12
 800700c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007010:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007012:	4b9c      	ldr	r3, [pc, #624]	; (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007016:	091b      	lsrs	r3, r3, #4
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800701e:	4b99      	ldr	r3, [pc, #612]	; (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007022:	08db      	lsrs	r3, r3, #3
 8007024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	fb02 f303 	mul.w	r3, r2, r3
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007036:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 8111 	beq.w	8007264 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	2b02      	cmp	r3, #2
 8007046:	f000 8083 	beq.w	8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	2b02      	cmp	r3, #2
 800704e:	f200 80a1 	bhi.w	8007194 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d003      	beq.n	8007060 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d056      	beq.n	800710c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800705e:	e099      	b.n	8007194 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007060:	4b88      	ldr	r3, [pc, #544]	; (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0320 	and.w	r3, r3, #32
 8007068:	2b00      	cmp	r3, #0
 800706a:	d02d      	beq.n	80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800706c:	4b85      	ldr	r3, [pc, #532]	; (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	08db      	lsrs	r3, r3, #3
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	4a84      	ldr	r2, [pc, #528]	; (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007078:	fa22 f303 	lsr.w	r3, r2, r3
 800707c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	ee07 3a90 	vmov	s15, r3
 8007084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007096:	4b7b      	ldr	r3, [pc, #492]	; (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800709e:	ee07 3a90 	vmov	s15, r3
 80070a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800728c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80070c6:	e087      	b.n	80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007290 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80070d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070da:	4b6a      	ldr	r3, [pc, #424]	; (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e2:	ee07 3a90 	vmov	s15, r3
 80070e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800728c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800710a:	e065      	b.n	80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007116:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800711a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800711e:	4b59      	ldr	r3, [pc, #356]	; (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007132:	eddf 5a56 	vldr	s11, [pc, #344]	; 800728c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800713a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800713e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800714e:	e043      	b.n	80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800715e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007162:	4b48      	ldr	r3, [pc, #288]	; (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007172:	ed97 6a03 	vldr	s12, [r7, #12]
 8007176:	eddf 5a45 	vldr	s11, [pc, #276]	; 800728c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800717a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800717e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800718a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800718e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007192:	e021      	b.n	80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a6:	4b37      	ldr	r3, [pc, #220]	; (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800728c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80071d8:	4b2a      	ldr	r3, [pc, #168]	; (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071dc:	0a5b      	lsrs	r3, r3, #9
 80071de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e2:	ee07 3a90 	vmov	s15, r3
 80071e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80071f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071fe:	ee17 2a90 	vmov	r2, s15
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007206:	4b1f      	ldr	r3, [pc, #124]	; (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720a:	0c1b      	lsrs	r3, r3, #16
 800720c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007210:	ee07 3a90 	vmov	s15, r3
 8007214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007218:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800721c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007220:	edd7 6a07 	vldr	s13, [r7, #28]
 8007224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800722c:	ee17 2a90 	vmov	r2, s15
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007234:	4b13      	ldr	r3, [pc, #76]	; (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007238:	0e1b      	lsrs	r3, r3, #24
 800723a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007246:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800724a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800724e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800725a:	ee17 2a90 	vmov	r2, s15
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007262:	e008      	b.n	8007276 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	609a      	str	r2, [r3, #8]
}
 8007276:	bf00      	nop
 8007278:	3724      	adds	r7, #36	; 0x24
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	58024400 	.word	0x58024400
 8007288:	03d09000 	.word	0x03d09000
 800728c:	46000000 	.word	0x46000000
 8007290:	4c742400 	.word	0x4c742400
 8007294:	4a742400 	.word	0x4a742400
 8007298:	4af42400 	.word	0x4af42400

0800729c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800729c:	b480      	push	{r7}
 800729e:	b089      	sub	sp, #36	; 0x24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072a4:	4ba1      	ldr	r3, [pc, #644]	; (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a8:	f003 0303 	and.w	r3, r3, #3
 80072ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80072ae:	4b9f      	ldr	r3, [pc, #636]	; (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b2:	0d1b      	lsrs	r3, r3, #20
 80072b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80072ba:	4b9c      	ldr	r3, [pc, #624]	; (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072be:	0a1b      	lsrs	r3, r3, #8
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80072c6:	4b99      	ldr	r3, [pc, #612]	; (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ca:	08db      	lsrs	r3, r3, #3
 80072cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8111 	beq.w	800750c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	f000 8083 	beq.w	80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	f200 80a1 	bhi.w	800743c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d056      	beq.n	80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007306:	e099      	b.n	800743c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007308:	4b88      	ldr	r3, [pc, #544]	; (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0320 	and.w	r3, r3, #32
 8007310:	2b00      	cmp	r3, #0
 8007312:	d02d      	beq.n	8007370 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007314:	4b85      	ldr	r3, [pc, #532]	; (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	08db      	lsrs	r3, r3, #3
 800731a:	f003 0303 	and.w	r3, r3, #3
 800731e:	4a84      	ldr	r2, [pc, #528]	; (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007320:	fa22 f303 	lsr.w	r3, r2, r3
 8007324:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	ee07 3a90 	vmov	s15, r3
 800732c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733e:	4b7b      	ldr	r3, [pc, #492]	; (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007346:	ee07 3a90 	vmov	s15, r3
 800734a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007352:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800735a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800735e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800736e:	e087      	b.n	8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007538 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800737e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007382:	4b6a      	ldr	r3, [pc, #424]	; (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800738a:	ee07 3a90 	vmov	s15, r3
 800738e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007392:	ed97 6a03 	vldr	s12, [r7, #12]
 8007396:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800739a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800739e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073b2:	e065      	b.n	8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800753c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073c6:	4b59      	ldr	r3, [pc, #356]	; (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073f6:	e043      	b.n	8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007402:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800740a:	4b48      	ldr	r3, [pc, #288]	; (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741a:	ed97 6a03 	vldr	s12, [r7, #12]
 800741e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800742a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800742e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800743a:	e021      	b.n	8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	ee07 3a90 	vmov	s15, r3
 8007442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007446:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800753c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800744a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800744e:	4b37      	ldr	r3, [pc, #220]	; (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007462:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800746a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800746e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800747a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800747e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007480:	4b2a      	ldr	r3, [pc, #168]	; (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007484:	0a5b      	lsrs	r3, r3, #9
 8007486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800749a:	edd7 6a07 	vldr	s13, [r7, #28]
 800749e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074a6:	ee17 2a90 	vmov	r2, s15
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80074ae:	4b1f      	ldr	r3, [pc, #124]	; (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	0c1b      	lsrs	r3, r3, #16
 80074b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b8:	ee07 3a90 	vmov	s15, r3
 80074bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80074cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074d4:	ee17 2a90 	vmov	r2, s15
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80074dc:	4b13      	ldr	r3, [pc, #76]	; (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e0:	0e1b      	lsrs	r3, r3, #24
 80074e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80074fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007502:	ee17 2a90 	vmov	r2, s15
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800750a:	e008      	b.n	800751e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	609a      	str	r2, [r3, #8]
}
 800751e:	bf00      	nop
 8007520:	3724      	adds	r7, #36	; 0x24
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	58024400 	.word	0x58024400
 8007530:	03d09000 	.word	0x03d09000
 8007534:	46000000 	.word	0x46000000
 8007538:	4c742400 	.word	0x4c742400
 800753c:	4a742400 	.word	0x4a742400
 8007540:	4af42400 	.word	0x4af42400

08007544 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007552:	4b53      	ldr	r3, [pc, #332]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	2b03      	cmp	r3, #3
 800755c:	d101      	bne.n	8007562 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e099      	b.n	8007696 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007562:	4b4f      	ldr	r3, [pc, #316]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a4e      	ldr	r2, [pc, #312]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007568:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800756c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800756e:	f7fa fdb9 	bl	80020e4 <HAL_GetTick>
 8007572:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007574:	e008      	b.n	8007588 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007576:	f7fa fdb5 	bl	80020e4 <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	2b02      	cmp	r3, #2
 8007582:	d901      	bls.n	8007588 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e086      	b.n	8007696 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007588:	4b45      	ldr	r3, [pc, #276]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1f0      	bne.n	8007576 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007594:	4b42      	ldr	r3, [pc, #264]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007598:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	031b      	lsls	r3, r3, #12
 80075a2:	493f      	ldr	r1, [pc, #252]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	628b      	str	r3, [r1, #40]	; 0x28
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	025b      	lsls	r3, r3, #9
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	041b      	lsls	r3, r3, #16
 80075c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075ca:	431a      	orrs	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	3b01      	subs	r3, #1
 80075d2:	061b      	lsls	r3, r3, #24
 80075d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80075d8:	4931      	ldr	r1, [pc, #196]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80075de:	4b30      	ldr	r3, [pc, #192]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 80075e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	492d      	ldr	r1, [pc, #180]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80075f0:	4b2b      	ldr	r3, [pc, #172]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	f023 0220 	bic.w	r2, r3, #32
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	4928      	ldr	r1, [pc, #160]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007602:	4b27      	ldr	r3, [pc, #156]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007606:	4a26      	ldr	r2, [pc, #152]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007608:	f023 0310 	bic.w	r3, r3, #16
 800760c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800760e:	4b24      	ldr	r3, [pc, #144]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007610:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007612:	4b24      	ldr	r3, [pc, #144]	; (80076a4 <RCCEx_PLL2_Config+0x160>)
 8007614:	4013      	ands	r3, r2
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	69d2      	ldr	r2, [r2, #28]
 800761a:	00d2      	lsls	r2, r2, #3
 800761c:	4920      	ldr	r1, [pc, #128]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 800761e:	4313      	orrs	r3, r2
 8007620:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007622:	4b1f      	ldr	r3, [pc, #124]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007626:	4a1e      	ldr	r2, [pc, #120]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007628:	f043 0310 	orr.w	r3, r3, #16
 800762c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d106      	bne.n	8007642 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007634:	4b1a      	ldr	r3, [pc, #104]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	4a19      	ldr	r2, [pc, #100]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 800763a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800763e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007640:	e00f      	b.n	8007662 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d106      	bne.n	8007656 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007648:	4b15      	ldr	r3, [pc, #84]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	4a14      	ldr	r2, [pc, #80]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 800764e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007652:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007654:	e005      	b.n	8007662 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007656:	4b12      	ldr	r3, [pc, #72]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765a:	4a11      	ldr	r2, [pc, #68]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 800765c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007660:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007662:	4b0f      	ldr	r3, [pc, #60]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a0e      	ldr	r2, [pc, #56]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007668:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800766c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800766e:	f7fa fd39 	bl	80020e4 <HAL_GetTick>
 8007672:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007674:	e008      	b.n	8007688 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007676:	f7fa fd35 	bl	80020e4 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	2b02      	cmp	r3, #2
 8007682:	d901      	bls.n	8007688 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e006      	b.n	8007696 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007688:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <RCCEx_PLL2_Config+0x15c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d0f0      	beq.n	8007676 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007694:	7bfb      	ldrb	r3, [r7, #15]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	58024400 	.word	0x58024400
 80076a4:	ffff0007 	.word	0xffff0007

080076a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076b6:	4b53      	ldr	r3, [pc, #332]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 80076b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ba:	f003 0303 	and.w	r3, r3, #3
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d101      	bne.n	80076c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e099      	b.n	80077fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80076c6:	4b4f      	ldr	r3, [pc, #316]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a4e      	ldr	r2, [pc, #312]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 80076cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076d2:	f7fa fd07 	bl	80020e4 <HAL_GetTick>
 80076d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076d8:	e008      	b.n	80076ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80076da:	f7fa fd03 	bl	80020e4 <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d901      	bls.n	80076ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e086      	b.n	80077fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076ec:	4b45      	ldr	r3, [pc, #276]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1f0      	bne.n	80076da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80076f8:	4b42      	ldr	r3, [pc, #264]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 80076fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	051b      	lsls	r3, r3, #20
 8007706:	493f      	ldr	r1, [pc, #252]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 8007708:	4313      	orrs	r3, r2
 800770a:	628b      	str	r3, [r1, #40]	; 0x28
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	3b01      	subs	r3, #1
 8007712:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	3b01      	subs	r3, #1
 800771c:	025b      	lsls	r3, r3, #9
 800771e:	b29b      	uxth	r3, r3
 8007720:	431a      	orrs	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	3b01      	subs	r3, #1
 8007728:	041b      	lsls	r3, r3, #16
 800772a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800772e:	431a      	orrs	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	3b01      	subs	r3, #1
 8007736:	061b      	lsls	r3, r3, #24
 8007738:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800773c:	4931      	ldr	r1, [pc, #196]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 800773e:	4313      	orrs	r3, r2
 8007740:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007742:	4b30      	ldr	r3, [pc, #192]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 8007744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007746:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	492d      	ldr	r1, [pc, #180]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 8007750:	4313      	orrs	r3, r2
 8007752:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007754:	4b2b      	ldr	r3, [pc, #172]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 8007756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007758:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	4928      	ldr	r1, [pc, #160]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 8007762:	4313      	orrs	r3, r2
 8007764:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007766:	4b27      	ldr	r3, [pc, #156]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 8007768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776a:	4a26      	ldr	r2, [pc, #152]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 800776c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007770:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007772:	4b24      	ldr	r3, [pc, #144]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 8007774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007776:	4b24      	ldr	r3, [pc, #144]	; (8007808 <RCCEx_PLL3_Config+0x160>)
 8007778:	4013      	ands	r3, r2
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	69d2      	ldr	r2, [r2, #28]
 800777e:	00d2      	lsls	r2, r2, #3
 8007780:	4920      	ldr	r1, [pc, #128]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 8007782:	4313      	orrs	r3, r2
 8007784:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007786:	4b1f      	ldr	r3, [pc, #124]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 8007788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778a:	4a1e      	ldr	r2, [pc, #120]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 800778c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007790:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d106      	bne.n	80077a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007798:	4b1a      	ldr	r3, [pc, #104]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 800779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779c:	4a19      	ldr	r2, [pc, #100]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 800779e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80077a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077a4:	e00f      	b.n	80077c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d106      	bne.n	80077ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80077ac:	4b15      	ldr	r3, [pc, #84]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 80077ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b0:	4a14      	ldr	r2, [pc, #80]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 80077b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077b8:	e005      	b.n	80077c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80077ba:	4b12      	ldr	r3, [pc, #72]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 80077bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077be:	4a11      	ldr	r2, [pc, #68]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 80077c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80077c6:	4b0f      	ldr	r3, [pc, #60]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a0e      	ldr	r2, [pc, #56]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 80077cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077d2:	f7fa fc87 	bl	80020e4 <HAL_GetTick>
 80077d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077d8:	e008      	b.n	80077ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80077da:	f7fa fc83 	bl	80020e4 <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d901      	bls.n	80077ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e006      	b.n	80077fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077ec:	4b05      	ldr	r3, [pc, #20]	; (8007804 <RCCEx_PLL3_Config+0x15c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d0f0      	beq.n	80077da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	58024400 	.word	0x58024400
 8007808:	ffff0007 	.word	0xffff0007

0800780c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e049      	b.n	80078b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d106      	bne.n	8007838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7fa f8be 	bl	80019b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3304      	adds	r3, #4
 8007848:	4619      	mov	r1, r3
 800784a:	4610      	mov	r0, r2
 800784c:	f000 fd7c 	bl	8008348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
	...

080078bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d001      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e054      	b.n	800797e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68da      	ldr	r2, [r3, #12]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f042 0201 	orr.w	r2, r2, #1
 80078ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a26      	ldr	r2, [pc, #152]	; (800798c <HAL_TIM_Base_Start_IT+0xd0>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d022      	beq.n	800793c <HAL_TIM_Base_Start_IT+0x80>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078fe:	d01d      	beq.n	800793c <HAL_TIM_Base_Start_IT+0x80>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a22      	ldr	r2, [pc, #136]	; (8007990 <HAL_TIM_Base_Start_IT+0xd4>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d018      	beq.n	800793c <HAL_TIM_Base_Start_IT+0x80>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a21      	ldr	r2, [pc, #132]	; (8007994 <HAL_TIM_Base_Start_IT+0xd8>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d013      	beq.n	800793c <HAL_TIM_Base_Start_IT+0x80>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a1f      	ldr	r2, [pc, #124]	; (8007998 <HAL_TIM_Base_Start_IT+0xdc>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d00e      	beq.n	800793c <HAL_TIM_Base_Start_IT+0x80>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a1e      	ldr	r2, [pc, #120]	; (800799c <HAL_TIM_Base_Start_IT+0xe0>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d009      	beq.n	800793c <HAL_TIM_Base_Start_IT+0x80>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a1c      	ldr	r2, [pc, #112]	; (80079a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d004      	beq.n	800793c <HAL_TIM_Base_Start_IT+0x80>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a1b      	ldr	r2, [pc, #108]	; (80079a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d115      	bne.n	8007968 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	689a      	ldr	r2, [r3, #8]
 8007942:	4b19      	ldr	r3, [pc, #100]	; (80079a8 <HAL_TIM_Base_Start_IT+0xec>)
 8007944:	4013      	ands	r3, r2
 8007946:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2b06      	cmp	r3, #6
 800794c:	d015      	beq.n	800797a <HAL_TIM_Base_Start_IT+0xbe>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007954:	d011      	beq.n	800797a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f042 0201 	orr.w	r2, r2, #1
 8007964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007966:	e008      	b.n	800797a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f042 0201 	orr.w	r2, r2, #1
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	e000      	b.n	800797c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800797a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	40010000 	.word	0x40010000
 8007990:	40000400 	.word	0x40000400
 8007994:	40000800 	.word	0x40000800
 8007998:	40000c00 	.word	0x40000c00
 800799c:	40010400 	.word	0x40010400
 80079a0:	40001800 	.word	0x40001800
 80079a4:	40014000 	.word	0x40014000
 80079a8:	00010007 	.word	0x00010007

080079ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e049      	b.n	8007a52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d106      	bne.n	80079d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f841 	bl	8007a5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2202      	movs	r2, #2
 80079dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	3304      	adds	r3, #4
 80079e8:	4619      	mov	r1, r3
 80079ea:	4610      	mov	r0, r2
 80079ec:	f000 fcac 	bl	8008348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b083      	sub	sp, #12
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a62:	bf00      	nop
 8007a64:	370c      	adds	r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
	...

08007a70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d109      	bne.n	8007a94 <HAL_TIM_PWM_Start+0x24>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	bf14      	ite	ne
 8007a8c:	2301      	movne	r3, #1
 8007a8e:	2300      	moveq	r3, #0
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	e03c      	b.n	8007b0e <HAL_TIM_PWM_Start+0x9e>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2b04      	cmp	r3, #4
 8007a98:	d109      	bne.n	8007aae <HAL_TIM_PWM_Start+0x3e>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	bf14      	ite	ne
 8007aa6:	2301      	movne	r3, #1
 8007aa8:	2300      	moveq	r3, #0
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	e02f      	b.n	8007b0e <HAL_TIM_PWM_Start+0x9e>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b08      	cmp	r3, #8
 8007ab2:	d109      	bne.n	8007ac8 <HAL_TIM_PWM_Start+0x58>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	bf14      	ite	ne
 8007ac0:	2301      	movne	r3, #1
 8007ac2:	2300      	moveq	r3, #0
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	e022      	b.n	8007b0e <HAL_TIM_PWM_Start+0x9e>
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	2b0c      	cmp	r3, #12
 8007acc:	d109      	bne.n	8007ae2 <HAL_TIM_PWM_Start+0x72>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	bf14      	ite	ne
 8007ada:	2301      	movne	r3, #1
 8007adc:	2300      	moveq	r3, #0
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	e015      	b.n	8007b0e <HAL_TIM_PWM_Start+0x9e>
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b10      	cmp	r3, #16
 8007ae6:	d109      	bne.n	8007afc <HAL_TIM_PWM_Start+0x8c>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	bf14      	ite	ne
 8007af4:	2301      	movne	r3, #1
 8007af6:	2300      	moveq	r3, #0
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	e008      	b.n	8007b0e <HAL_TIM_PWM_Start+0x9e>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	bf14      	ite	ne
 8007b08:	2301      	movne	r3, #1
 8007b0a:	2300      	moveq	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e0a1      	b.n	8007c5a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d104      	bne.n	8007b26 <HAL_TIM_PWM_Start+0xb6>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b24:	e023      	b.n	8007b6e <HAL_TIM_PWM_Start+0xfe>
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	d104      	bne.n	8007b36 <HAL_TIM_PWM_Start+0xc6>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b34:	e01b      	b.n	8007b6e <HAL_TIM_PWM_Start+0xfe>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d104      	bne.n	8007b46 <HAL_TIM_PWM_Start+0xd6>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b44:	e013      	b.n	8007b6e <HAL_TIM_PWM_Start+0xfe>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b0c      	cmp	r3, #12
 8007b4a:	d104      	bne.n	8007b56 <HAL_TIM_PWM_Start+0xe6>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b54:	e00b      	b.n	8007b6e <HAL_TIM_PWM_Start+0xfe>
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b10      	cmp	r3, #16
 8007b5a:	d104      	bne.n	8007b66 <HAL_TIM_PWM_Start+0xf6>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b64:	e003      	b.n	8007b6e <HAL_TIM_PWM_Start+0xfe>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2202      	movs	r2, #2
 8007b6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2201      	movs	r2, #1
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 fff4 	bl	8008b64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a38      	ldr	r2, [pc, #224]	; (8007c64 <HAL_TIM_PWM_Start+0x1f4>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d013      	beq.n	8007bae <HAL_TIM_PWM_Start+0x13e>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a37      	ldr	r2, [pc, #220]	; (8007c68 <HAL_TIM_PWM_Start+0x1f8>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d00e      	beq.n	8007bae <HAL_TIM_PWM_Start+0x13e>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a35      	ldr	r2, [pc, #212]	; (8007c6c <HAL_TIM_PWM_Start+0x1fc>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d009      	beq.n	8007bae <HAL_TIM_PWM_Start+0x13e>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a34      	ldr	r2, [pc, #208]	; (8007c70 <HAL_TIM_PWM_Start+0x200>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d004      	beq.n	8007bae <HAL_TIM_PWM_Start+0x13e>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a32      	ldr	r2, [pc, #200]	; (8007c74 <HAL_TIM_PWM_Start+0x204>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d101      	bne.n	8007bb2 <HAL_TIM_PWM_Start+0x142>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e000      	b.n	8007bb4 <HAL_TIM_PWM_Start+0x144>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d007      	beq.n	8007bc8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a25      	ldr	r2, [pc, #148]	; (8007c64 <HAL_TIM_PWM_Start+0x1f4>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d022      	beq.n	8007c18 <HAL_TIM_PWM_Start+0x1a8>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bda:	d01d      	beq.n	8007c18 <HAL_TIM_PWM_Start+0x1a8>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a25      	ldr	r2, [pc, #148]	; (8007c78 <HAL_TIM_PWM_Start+0x208>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d018      	beq.n	8007c18 <HAL_TIM_PWM_Start+0x1a8>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a24      	ldr	r2, [pc, #144]	; (8007c7c <HAL_TIM_PWM_Start+0x20c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d013      	beq.n	8007c18 <HAL_TIM_PWM_Start+0x1a8>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a22      	ldr	r2, [pc, #136]	; (8007c80 <HAL_TIM_PWM_Start+0x210>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d00e      	beq.n	8007c18 <HAL_TIM_PWM_Start+0x1a8>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a1a      	ldr	r2, [pc, #104]	; (8007c68 <HAL_TIM_PWM_Start+0x1f8>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d009      	beq.n	8007c18 <HAL_TIM_PWM_Start+0x1a8>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a1e      	ldr	r2, [pc, #120]	; (8007c84 <HAL_TIM_PWM_Start+0x214>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d004      	beq.n	8007c18 <HAL_TIM_PWM_Start+0x1a8>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a16      	ldr	r2, [pc, #88]	; (8007c6c <HAL_TIM_PWM_Start+0x1fc>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d115      	bne.n	8007c44 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689a      	ldr	r2, [r3, #8]
 8007c1e:	4b1a      	ldr	r3, [pc, #104]	; (8007c88 <HAL_TIM_PWM_Start+0x218>)
 8007c20:	4013      	ands	r3, r2
 8007c22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b06      	cmp	r3, #6
 8007c28:	d015      	beq.n	8007c56 <HAL_TIM_PWM_Start+0x1e6>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c30:	d011      	beq.n	8007c56 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f042 0201 	orr.w	r2, r2, #1
 8007c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c42:	e008      	b.n	8007c56 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f042 0201 	orr.w	r2, r2, #1
 8007c52:	601a      	str	r2, [r3, #0]
 8007c54:	e000      	b.n	8007c58 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	40010000 	.word	0x40010000
 8007c68:	40010400 	.word	0x40010400
 8007c6c:	40014000 	.word	0x40014000
 8007c70:	40014400 	.word	0x40014400
 8007c74:	40014800 	.word	0x40014800
 8007c78:	40000400 	.word	0x40000400
 8007c7c:	40000800 	.word	0x40000800
 8007c80:	40000c00 	.word	0x40000c00
 8007c84:	40001800 	.word	0x40001800
 8007c88:	00010007 	.word	0x00010007

08007c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	f003 0302 	and.w	r3, r3, #2
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d122      	bne.n	8007ce8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d11b      	bne.n	8007ce8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f06f 0202 	mvn.w	r2, #2
 8007cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	f003 0303 	and.w	r3, r3, #3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fb1c 	bl	800830c <HAL_TIM_IC_CaptureCallback>
 8007cd4:	e005      	b.n	8007ce2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fb0e 	bl	80082f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fb1f 	bl	8008320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	f003 0304 	and.w	r3, r3, #4
 8007cf2:	2b04      	cmp	r3, #4
 8007cf4:	d122      	bne.n	8007d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	f003 0304 	and.w	r3, r3, #4
 8007d00:	2b04      	cmp	r3, #4
 8007d02:	d11b      	bne.n	8007d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f06f 0204 	mvn.w	r2, #4
 8007d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2202      	movs	r2, #2
 8007d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 faf2 	bl	800830c <HAL_TIM_IC_CaptureCallback>
 8007d28:	e005      	b.n	8007d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fae4 	bl	80082f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 faf5 	bl	8008320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	f003 0308 	and.w	r3, r3, #8
 8007d46:	2b08      	cmp	r3, #8
 8007d48:	d122      	bne.n	8007d90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	f003 0308 	and.w	r3, r3, #8
 8007d54:	2b08      	cmp	r3, #8
 8007d56:	d11b      	bne.n	8007d90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f06f 0208 	mvn.w	r2, #8
 8007d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2204      	movs	r2, #4
 8007d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	f003 0303 	and.w	r3, r3, #3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fac8 	bl	800830c <HAL_TIM_IC_CaptureCallback>
 8007d7c:	e005      	b.n	8007d8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 faba 	bl	80082f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 facb 	bl	8008320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	f003 0310 	and.w	r3, r3, #16
 8007d9a:	2b10      	cmp	r3, #16
 8007d9c:	d122      	bne.n	8007de4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f003 0310 	and.w	r3, r3, #16
 8007da8:	2b10      	cmp	r3, #16
 8007daa:	d11b      	bne.n	8007de4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f06f 0210 	mvn.w	r2, #16
 8007db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2208      	movs	r2, #8
 8007dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fa9e 	bl	800830c <HAL_TIM_IC_CaptureCallback>
 8007dd0:	e005      	b.n	8007dde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fa90 	bl	80082f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 faa1 	bl	8008320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d10e      	bne.n	8007e10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d107      	bne.n	8007e10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f06f 0201 	mvn.w	r2, #1
 8007e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fa6a 	bl	80082e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e1a:	2b80      	cmp	r3, #128	; 0x80
 8007e1c:	d10e      	bne.n	8007e3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e28:	2b80      	cmp	r3, #128	; 0x80
 8007e2a:	d107      	bne.n	8007e3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 ff52 	bl	8008ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e4a:	d10e      	bne.n	8007e6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e56:	2b80      	cmp	r3, #128	; 0x80
 8007e58:	d107      	bne.n	8007e6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 ff45 	bl	8008cf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e74:	2b40      	cmp	r3, #64	; 0x40
 8007e76:	d10e      	bne.n	8007e96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e82:	2b40      	cmp	r3, #64	; 0x40
 8007e84:	d107      	bne.n	8007e96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fa4f 	bl	8008334 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	f003 0320 	and.w	r3, r3, #32
 8007ea0:	2b20      	cmp	r3, #32
 8007ea2:	d10e      	bne.n	8007ec2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	f003 0320 	and.w	r3, r3, #32
 8007eae:	2b20      	cmp	r3, #32
 8007eb0:	d107      	bne.n	8007ec2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f06f 0220 	mvn.w	r2, #32
 8007eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 ff05 	bl	8008ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ec2:	bf00      	nop
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
	...

08007ecc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d101      	bne.n	8007eea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	e0ff      	b.n	80080ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b14      	cmp	r3, #20
 8007ef6:	f200 80f0 	bhi.w	80080da <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007efa:	a201      	add	r2, pc, #4	; (adr r2, 8007f00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f00:	08007f55 	.word	0x08007f55
 8007f04:	080080db 	.word	0x080080db
 8007f08:	080080db 	.word	0x080080db
 8007f0c:	080080db 	.word	0x080080db
 8007f10:	08007f95 	.word	0x08007f95
 8007f14:	080080db 	.word	0x080080db
 8007f18:	080080db 	.word	0x080080db
 8007f1c:	080080db 	.word	0x080080db
 8007f20:	08007fd7 	.word	0x08007fd7
 8007f24:	080080db 	.word	0x080080db
 8007f28:	080080db 	.word	0x080080db
 8007f2c:	080080db 	.word	0x080080db
 8007f30:	08008017 	.word	0x08008017
 8007f34:	080080db 	.word	0x080080db
 8007f38:	080080db 	.word	0x080080db
 8007f3c:	080080db 	.word	0x080080db
 8007f40:	08008059 	.word	0x08008059
 8007f44:	080080db 	.word	0x080080db
 8007f48:	080080db 	.word	0x080080db
 8007f4c:	080080db 	.word	0x080080db
 8007f50:	08008099 	.word	0x08008099
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68b9      	ldr	r1, [r7, #8]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 fa8e 	bl	800847c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	699a      	ldr	r2, [r3, #24]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f042 0208 	orr.w	r2, r2, #8
 8007f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	699a      	ldr	r2, [r3, #24]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f022 0204 	bic.w	r2, r2, #4
 8007f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6999      	ldr	r1, [r3, #24]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	691a      	ldr	r2, [r3, #16]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	619a      	str	r2, [r3, #24]
      break;
 8007f92:	e0a5      	b.n	80080e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68b9      	ldr	r1, [r7, #8]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 fafe 	bl	800859c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	699a      	ldr	r2, [r3, #24]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	699a      	ldr	r2, [r3, #24]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6999      	ldr	r1, [r3, #24]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	021a      	lsls	r2, r3, #8
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	619a      	str	r2, [r3, #24]
      break;
 8007fd4:	e084      	b.n	80080e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68b9      	ldr	r1, [r7, #8]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 fb67 	bl	80086b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69da      	ldr	r2, [r3, #28]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f042 0208 	orr.w	r2, r2, #8
 8007ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	69da      	ldr	r2, [r3, #28]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 0204 	bic.w	r2, r2, #4
 8008000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	69d9      	ldr	r1, [r3, #28]
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	691a      	ldr	r2, [r3, #16]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	430a      	orrs	r2, r1
 8008012:	61da      	str	r2, [r3, #28]
      break;
 8008014:	e064      	b.n	80080e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68b9      	ldr	r1, [r7, #8]
 800801c:	4618      	mov	r0, r3
 800801e:	f000 fbcf 	bl	80087c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69da      	ldr	r2, [r3, #28]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	69da      	ldr	r2, [r3, #28]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69d9      	ldr	r1, [r3, #28]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	021a      	lsls	r2, r3, #8
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	430a      	orrs	r2, r1
 8008054:	61da      	str	r2, [r3, #28]
      break;
 8008056:	e043      	b.n	80080e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68b9      	ldr	r1, [r7, #8]
 800805e:	4618      	mov	r0, r3
 8008060:	f000 fc18 	bl	8008894 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f042 0208 	orr.w	r2, r2, #8
 8008072:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f022 0204 	bic.w	r2, r2, #4
 8008082:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	691a      	ldr	r2, [r3, #16]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	430a      	orrs	r2, r1
 8008094:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008096:	e023      	b.n	80080e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68b9      	ldr	r1, [r7, #8]
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fc5c 	bl	800895c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	021a      	lsls	r2, r3, #8
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	430a      	orrs	r2, r1
 80080d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80080d8:	e002      	b.n	80080e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	75fb      	strb	r3, [r7, #23]
      break;
 80080de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3718      	adds	r7, #24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop

080080f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008108:	2b01      	cmp	r3, #1
 800810a:	d101      	bne.n	8008110 <HAL_TIM_ConfigClockSource+0x1c>
 800810c:	2302      	movs	r3, #2
 800810e:	e0dc      	b.n	80082ca <HAL_TIM_ConfigClockSource+0x1d6>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	4b6a      	ldr	r3, [pc, #424]	; (80082d4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800812c:	4013      	ands	r3, r2
 800812e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008136:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a64      	ldr	r2, [pc, #400]	; (80082d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008146:	4293      	cmp	r3, r2
 8008148:	f000 80a9 	beq.w	800829e <HAL_TIM_ConfigClockSource+0x1aa>
 800814c:	4a62      	ldr	r2, [pc, #392]	; (80082d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800814e:	4293      	cmp	r3, r2
 8008150:	f200 80ae 	bhi.w	80082b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008154:	4a61      	ldr	r2, [pc, #388]	; (80082dc <HAL_TIM_ConfigClockSource+0x1e8>)
 8008156:	4293      	cmp	r3, r2
 8008158:	f000 80a1 	beq.w	800829e <HAL_TIM_ConfigClockSource+0x1aa>
 800815c:	4a5f      	ldr	r2, [pc, #380]	; (80082dc <HAL_TIM_ConfigClockSource+0x1e8>)
 800815e:	4293      	cmp	r3, r2
 8008160:	f200 80a6 	bhi.w	80082b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008164:	4a5e      	ldr	r2, [pc, #376]	; (80082e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008166:	4293      	cmp	r3, r2
 8008168:	f000 8099 	beq.w	800829e <HAL_TIM_ConfigClockSource+0x1aa>
 800816c:	4a5c      	ldr	r2, [pc, #368]	; (80082e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800816e:	4293      	cmp	r3, r2
 8008170:	f200 809e 	bhi.w	80082b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008174:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008178:	f000 8091 	beq.w	800829e <HAL_TIM_ConfigClockSource+0x1aa>
 800817c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008180:	f200 8096 	bhi.w	80082b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008184:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008188:	f000 8089 	beq.w	800829e <HAL_TIM_ConfigClockSource+0x1aa>
 800818c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008190:	f200 808e 	bhi.w	80082b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008198:	d03e      	beq.n	8008218 <HAL_TIM_ConfigClockSource+0x124>
 800819a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800819e:	f200 8087 	bhi.w	80082b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80081a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081a6:	f000 8086 	beq.w	80082b6 <HAL_TIM_ConfigClockSource+0x1c2>
 80081aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ae:	d87f      	bhi.n	80082b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80081b0:	2b70      	cmp	r3, #112	; 0x70
 80081b2:	d01a      	beq.n	80081ea <HAL_TIM_ConfigClockSource+0xf6>
 80081b4:	2b70      	cmp	r3, #112	; 0x70
 80081b6:	d87b      	bhi.n	80082b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80081b8:	2b60      	cmp	r3, #96	; 0x60
 80081ba:	d050      	beq.n	800825e <HAL_TIM_ConfigClockSource+0x16a>
 80081bc:	2b60      	cmp	r3, #96	; 0x60
 80081be:	d877      	bhi.n	80082b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80081c0:	2b50      	cmp	r3, #80	; 0x50
 80081c2:	d03c      	beq.n	800823e <HAL_TIM_ConfigClockSource+0x14a>
 80081c4:	2b50      	cmp	r3, #80	; 0x50
 80081c6:	d873      	bhi.n	80082b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80081c8:	2b40      	cmp	r3, #64	; 0x40
 80081ca:	d058      	beq.n	800827e <HAL_TIM_ConfigClockSource+0x18a>
 80081cc:	2b40      	cmp	r3, #64	; 0x40
 80081ce:	d86f      	bhi.n	80082b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80081d0:	2b30      	cmp	r3, #48	; 0x30
 80081d2:	d064      	beq.n	800829e <HAL_TIM_ConfigClockSource+0x1aa>
 80081d4:	2b30      	cmp	r3, #48	; 0x30
 80081d6:	d86b      	bhi.n	80082b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80081d8:	2b20      	cmp	r3, #32
 80081da:	d060      	beq.n	800829e <HAL_TIM_ConfigClockSource+0x1aa>
 80081dc:	2b20      	cmp	r3, #32
 80081de:	d867      	bhi.n	80082b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d05c      	beq.n	800829e <HAL_TIM_ConfigClockSource+0x1aa>
 80081e4:	2b10      	cmp	r3, #16
 80081e6:	d05a      	beq.n	800829e <HAL_TIM_ConfigClockSource+0x1aa>
 80081e8:	e062      	b.n	80082b0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6818      	ldr	r0, [r3, #0]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	6899      	ldr	r1, [r3, #8]
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	f000 fc93 	bl	8008b24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800820c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	609a      	str	r2, [r3, #8]
      break;
 8008216:	e04f      	b.n	80082b8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6818      	ldr	r0, [r3, #0]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	6899      	ldr	r1, [r3, #8]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	f000 fc7c 	bl	8008b24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689a      	ldr	r2, [r3, #8]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800823a:	609a      	str	r2, [r3, #8]
      break;
 800823c:	e03c      	b.n	80082b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6818      	ldr	r0, [r3, #0]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	6859      	ldr	r1, [r3, #4]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	461a      	mov	r2, r3
 800824c:	f000 fbec 	bl	8008a28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2150      	movs	r1, #80	; 0x50
 8008256:	4618      	mov	r0, r3
 8008258:	f000 fc46 	bl	8008ae8 <TIM_ITRx_SetConfig>
      break;
 800825c:	e02c      	b.n	80082b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6818      	ldr	r0, [r3, #0]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	6859      	ldr	r1, [r3, #4]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	461a      	mov	r2, r3
 800826c:	f000 fc0b 	bl	8008a86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2160      	movs	r1, #96	; 0x60
 8008276:	4618      	mov	r0, r3
 8008278:	f000 fc36 	bl	8008ae8 <TIM_ITRx_SetConfig>
      break;
 800827c:	e01c      	b.n	80082b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6818      	ldr	r0, [r3, #0]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	6859      	ldr	r1, [r3, #4]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	461a      	mov	r2, r3
 800828c:	f000 fbcc 	bl	8008a28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2140      	movs	r1, #64	; 0x40
 8008296:	4618      	mov	r0, r3
 8008298:	f000 fc26 	bl	8008ae8 <TIM_ITRx_SetConfig>
      break;
 800829c:	e00c      	b.n	80082b8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4619      	mov	r1, r3
 80082a8:	4610      	mov	r0, r2
 80082aa:	f000 fc1d 	bl	8008ae8 <TIM_ITRx_SetConfig>
      break;
 80082ae:	e003      	b.n	80082b8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	73fb      	strb	r3, [r7, #15]
      break;
 80082b4:	e000      	b.n	80082b8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80082b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	ffceff88 	.word	0xffceff88
 80082d8:	00100040 	.word	0x00100040
 80082dc:	00100030 	.word	0x00100030
 80082e0:	00100020 	.word	0x00100020

080082e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80082ec:	bf00      	nop
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008314:	bf00      	nop
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a40      	ldr	r2, [pc, #256]	; (800845c <TIM_Base_SetConfig+0x114>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d013      	beq.n	8008388 <TIM_Base_SetConfig+0x40>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008366:	d00f      	beq.n	8008388 <TIM_Base_SetConfig+0x40>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a3d      	ldr	r2, [pc, #244]	; (8008460 <TIM_Base_SetConfig+0x118>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d00b      	beq.n	8008388 <TIM_Base_SetConfig+0x40>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a3c      	ldr	r2, [pc, #240]	; (8008464 <TIM_Base_SetConfig+0x11c>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d007      	beq.n	8008388 <TIM_Base_SetConfig+0x40>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a3b      	ldr	r2, [pc, #236]	; (8008468 <TIM_Base_SetConfig+0x120>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d003      	beq.n	8008388 <TIM_Base_SetConfig+0x40>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a3a      	ldr	r2, [pc, #232]	; (800846c <TIM_Base_SetConfig+0x124>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d108      	bne.n	800839a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800838e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	4313      	orrs	r3, r2
 8008398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a2f      	ldr	r2, [pc, #188]	; (800845c <TIM_Base_SetConfig+0x114>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d01f      	beq.n	80083e2 <TIM_Base_SetConfig+0x9a>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083a8:	d01b      	beq.n	80083e2 <TIM_Base_SetConfig+0x9a>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a2c      	ldr	r2, [pc, #176]	; (8008460 <TIM_Base_SetConfig+0x118>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d017      	beq.n	80083e2 <TIM_Base_SetConfig+0x9a>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a2b      	ldr	r2, [pc, #172]	; (8008464 <TIM_Base_SetConfig+0x11c>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d013      	beq.n	80083e2 <TIM_Base_SetConfig+0x9a>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a2a      	ldr	r2, [pc, #168]	; (8008468 <TIM_Base_SetConfig+0x120>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d00f      	beq.n	80083e2 <TIM_Base_SetConfig+0x9a>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a29      	ldr	r2, [pc, #164]	; (800846c <TIM_Base_SetConfig+0x124>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d00b      	beq.n	80083e2 <TIM_Base_SetConfig+0x9a>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a28      	ldr	r2, [pc, #160]	; (8008470 <TIM_Base_SetConfig+0x128>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d007      	beq.n	80083e2 <TIM_Base_SetConfig+0x9a>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a27      	ldr	r2, [pc, #156]	; (8008474 <TIM_Base_SetConfig+0x12c>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d003      	beq.n	80083e2 <TIM_Base_SetConfig+0x9a>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a26      	ldr	r2, [pc, #152]	; (8008478 <TIM_Base_SetConfig+0x130>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d108      	bne.n	80083f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	4313      	orrs	r3, r2
 8008400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	689a      	ldr	r2, [r3, #8]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a10      	ldr	r2, [pc, #64]	; (800845c <TIM_Base_SetConfig+0x114>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d00f      	beq.n	8008440 <TIM_Base_SetConfig+0xf8>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a12      	ldr	r2, [pc, #72]	; (800846c <TIM_Base_SetConfig+0x124>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d00b      	beq.n	8008440 <TIM_Base_SetConfig+0xf8>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a11      	ldr	r2, [pc, #68]	; (8008470 <TIM_Base_SetConfig+0x128>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d007      	beq.n	8008440 <TIM_Base_SetConfig+0xf8>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a10      	ldr	r2, [pc, #64]	; (8008474 <TIM_Base_SetConfig+0x12c>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d003      	beq.n	8008440 <TIM_Base_SetConfig+0xf8>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a0f      	ldr	r2, [pc, #60]	; (8008478 <TIM_Base_SetConfig+0x130>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d103      	bne.n	8008448 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	691a      	ldr	r2, [r3, #16]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	615a      	str	r2, [r3, #20]
}
 800844e:	bf00      	nop
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	40010000 	.word	0x40010000
 8008460:	40000400 	.word	0x40000400
 8008464:	40000800 	.word	0x40000800
 8008468:	40000c00 	.word	0x40000c00
 800846c:	40010400 	.word	0x40010400
 8008470:	40014000 	.word	0x40014000
 8008474:	40014400 	.word	0x40014400
 8008478:	40014800 	.word	0x40014800

0800847c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800847c:	b480      	push	{r7}
 800847e:	b087      	sub	sp, #28
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a1b      	ldr	r3, [r3, #32]
 800848a:	f023 0201 	bic.w	r2, r3, #1
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	4b37      	ldr	r3, [pc, #220]	; (8008584 <TIM_OC1_SetConfig+0x108>)
 80084a8:	4013      	ands	r3, r2
 80084aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f023 0303 	bic.w	r3, r3, #3
 80084b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f023 0302 	bic.w	r3, r3, #2
 80084c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a2d      	ldr	r2, [pc, #180]	; (8008588 <TIM_OC1_SetConfig+0x10c>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d00f      	beq.n	80084f8 <TIM_OC1_SetConfig+0x7c>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a2c      	ldr	r2, [pc, #176]	; (800858c <TIM_OC1_SetConfig+0x110>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d00b      	beq.n	80084f8 <TIM_OC1_SetConfig+0x7c>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a2b      	ldr	r2, [pc, #172]	; (8008590 <TIM_OC1_SetConfig+0x114>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d007      	beq.n	80084f8 <TIM_OC1_SetConfig+0x7c>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a2a      	ldr	r2, [pc, #168]	; (8008594 <TIM_OC1_SetConfig+0x118>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d003      	beq.n	80084f8 <TIM_OC1_SetConfig+0x7c>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a29      	ldr	r2, [pc, #164]	; (8008598 <TIM_OC1_SetConfig+0x11c>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d10c      	bne.n	8008512 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f023 0308 	bic.w	r3, r3, #8
 80084fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	4313      	orrs	r3, r2
 8008508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f023 0304 	bic.w	r3, r3, #4
 8008510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a1c      	ldr	r2, [pc, #112]	; (8008588 <TIM_OC1_SetConfig+0x10c>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d00f      	beq.n	800853a <TIM_OC1_SetConfig+0xbe>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a1b      	ldr	r2, [pc, #108]	; (800858c <TIM_OC1_SetConfig+0x110>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d00b      	beq.n	800853a <TIM_OC1_SetConfig+0xbe>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a1a      	ldr	r2, [pc, #104]	; (8008590 <TIM_OC1_SetConfig+0x114>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d007      	beq.n	800853a <TIM_OC1_SetConfig+0xbe>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a19      	ldr	r2, [pc, #100]	; (8008594 <TIM_OC1_SetConfig+0x118>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d003      	beq.n	800853a <TIM_OC1_SetConfig+0xbe>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a18      	ldr	r2, [pc, #96]	; (8008598 <TIM_OC1_SetConfig+0x11c>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d111      	bne.n	800855e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	693a      	ldr	r2, [r7, #16]
 8008550:	4313      	orrs	r3, r2
 8008552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	4313      	orrs	r3, r2
 800855c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	685a      	ldr	r2, [r3, #4]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	697a      	ldr	r2, [r7, #20]
 8008576:	621a      	str	r2, [r3, #32]
}
 8008578:	bf00      	nop
 800857a:	371c      	adds	r7, #28
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr
 8008584:	fffeff8f 	.word	0xfffeff8f
 8008588:	40010000 	.word	0x40010000
 800858c:	40010400 	.word	0x40010400
 8008590:	40014000 	.word	0x40014000
 8008594:	40014400 	.word	0x40014400
 8008598:	40014800 	.word	0x40014800

0800859c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800859c:	b480      	push	{r7}
 800859e:	b087      	sub	sp, #28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	f023 0210 	bic.w	r2, r3, #16
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	4b34      	ldr	r3, [pc, #208]	; (8008698 <TIM_OC2_SetConfig+0xfc>)
 80085c8:	4013      	ands	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	021b      	lsls	r3, r3, #8
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	4313      	orrs	r3, r2
 80085de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	f023 0320 	bic.w	r3, r3, #32
 80085e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	011b      	lsls	r3, r3, #4
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a29      	ldr	r2, [pc, #164]	; (800869c <TIM_OC2_SetConfig+0x100>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d003      	beq.n	8008604 <TIM_OC2_SetConfig+0x68>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a28      	ldr	r2, [pc, #160]	; (80086a0 <TIM_OC2_SetConfig+0x104>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d10d      	bne.n	8008620 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800860a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	011b      	lsls	r3, r3, #4
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	4313      	orrs	r3, r2
 8008616:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800861e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a1e      	ldr	r2, [pc, #120]	; (800869c <TIM_OC2_SetConfig+0x100>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d00f      	beq.n	8008648 <TIM_OC2_SetConfig+0xac>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a1d      	ldr	r2, [pc, #116]	; (80086a0 <TIM_OC2_SetConfig+0x104>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d00b      	beq.n	8008648 <TIM_OC2_SetConfig+0xac>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a1c      	ldr	r2, [pc, #112]	; (80086a4 <TIM_OC2_SetConfig+0x108>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d007      	beq.n	8008648 <TIM_OC2_SetConfig+0xac>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a1b      	ldr	r2, [pc, #108]	; (80086a8 <TIM_OC2_SetConfig+0x10c>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d003      	beq.n	8008648 <TIM_OC2_SetConfig+0xac>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a1a      	ldr	r2, [pc, #104]	; (80086ac <TIM_OC2_SetConfig+0x110>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d113      	bne.n	8008670 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800864e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008656:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	4313      	orrs	r3, r2
 8008662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	4313      	orrs	r3, r2
 800866e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	621a      	str	r2, [r3, #32]
}
 800868a:	bf00      	nop
 800868c:	371c      	adds	r7, #28
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	feff8fff 	.word	0xfeff8fff
 800869c:	40010000 	.word	0x40010000
 80086a0:	40010400 	.word	0x40010400
 80086a4:	40014000 	.word	0x40014000
 80086a8:	40014400 	.word	0x40014400
 80086ac:	40014800 	.word	0x40014800

080086b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b087      	sub	sp, #28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	4b33      	ldr	r3, [pc, #204]	; (80087a8 <TIM_OC3_SetConfig+0xf8>)
 80086dc:	4013      	ands	r3, r2
 80086de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f023 0303 	bic.w	r3, r3, #3
 80086e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	021b      	lsls	r3, r3, #8
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	4313      	orrs	r3, r2
 8008704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a28      	ldr	r2, [pc, #160]	; (80087ac <TIM_OC3_SetConfig+0xfc>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d003      	beq.n	8008716 <TIM_OC3_SetConfig+0x66>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a27      	ldr	r2, [pc, #156]	; (80087b0 <TIM_OC3_SetConfig+0x100>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d10d      	bne.n	8008732 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800871c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	021b      	lsls	r3, r3, #8
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	4313      	orrs	r3, r2
 8008728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a1d      	ldr	r2, [pc, #116]	; (80087ac <TIM_OC3_SetConfig+0xfc>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d00f      	beq.n	800875a <TIM_OC3_SetConfig+0xaa>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a1c      	ldr	r2, [pc, #112]	; (80087b0 <TIM_OC3_SetConfig+0x100>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d00b      	beq.n	800875a <TIM_OC3_SetConfig+0xaa>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a1b      	ldr	r2, [pc, #108]	; (80087b4 <TIM_OC3_SetConfig+0x104>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d007      	beq.n	800875a <TIM_OC3_SetConfig+0xaa>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a1a      	ldr	r2, [pc, #104]	; (80087b8 <TIM_OC3_SetConfig+0x108>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d003      	beq.n	800875a <TIM_OC3_SetConfig+0xaa>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a19      	ldr	r2, [pc, #100]	; (80087bc <TIM_OC3_SetConfig+0x10c>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d113      	bne.n	8008782 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	011b      	lsls	r3, r3, #4
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	4313      	orrs	r3, r2
 8008774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	011b      	lsls	r3, r3, #4
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	4313      	orrs	r3, r2
 8008780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	697a      	ldr	r2, [r7, #20]
 800879a:	621a      	str	r2, [r3, #32]
}
 800879c:	bf00      	nop
 800879e:	371c      	adds	r7, #28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr
 80087a8:	fffeff8f 	.word	0xfffeff8f
 80087ac:	40010000 	.word	0x40010000
 80087b0:	40010400 	.word	0x40010400
 80087b4:	40014000 	.word	0x40014000
 80087b8:	40014400 	.word	0x40014400
 80087bc:	40014800 	.word	0x40014800

080087c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b087      	sub	sp, #28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a1b      	ldr	r3, [r3, #32]
 80087da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	69db      	ldr	r3, [r3, #28]
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	4b24      	ldr	r3, [pc, #144]	; (800887c <TIM_OC4_SetConfig+0xbc>)
 80087ec:	4013      	ands	r3, r2
 80087ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	021b      	lsls	r3, r3, #8
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	4313      	orrs	r3, r2
 8008802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800880a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	031b      	lsls	r3, r3, #12
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	4313      	orrs	r3, r2
 8008816:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a19      	ldr	r2, [pc, #100]	; (8008880 <TIM_OC4_SetConfig+0xc0>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d00f      	beq.n	8008840 <TIM_OC4_SetConfig+0x80>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a18      	ldr	r2, [pc, #96]	; (8008884 <TIM_OC4_SetConfig+0xc4>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d00b      	beq.n	8008840 <TIM_OC4_SetConfig+0x80>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a17      	ldr	r2, [pc, #92]	; (8008888 <TIM_OC4_SetConfig+0xc8>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d007      	beq.n	8008840 <TIM_OC4_SetConfig+0x80>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a16      	ldr	r2, [pc, #88]	; (800888c <TIM_OC4_SetConfig+0xcc>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d003      	beq.n	8008840 <TIM_OC4_SetConfig+0x80>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a15      	ldr	r2, [pc, #84]	; (8008890 <TIM_OC4_SetConfig+0xd0>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d109      	bne.n	8008854 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008846:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	019b      	lsls	r3, r3, #6
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	4313      	orrs	r3, r2
 8008852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	685a      	ldr	r2, [r3, #4]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	693a      	ldr	r2, [r7, #16]
 800886c:	621a      	str	r2, [r3, #32]
}
 800886e:	bf00      	nop
 8008870:	371c      	adds	r7, #28
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	feff8fff 	.word	0xfeff8fff
 8008880:	40010000 	.word	0x40010000
 8008884:	40010400 	.word	0x40010400
 8008888:	40014000 	.word	0x40014000
 800888c:	40014400 	.word	0x40014400
 8008890:	40014800 	.word	0x40014800

08008894 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008894:	b480      	push	{r7}
 8008896:	b087      	sub	sp, #28
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a1b      	ldr	r3, [r3, #32]
 80088a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	4b21      	ldr	r3, [pc, #132]	; (8008944 <TIM_OC5_SetConfig+0xb0>)
 80088c0:	4013      	ands	r3, r2
 80088c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80088d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	041b      	lsls	r3, r3, #16
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	4313      	orrs	r3, r2
 80088e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a18      	ldr	r2, [pc, #96]	; (8008948 <TIM_OC5_SetConfig+0xb4>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d00f      	beq.n	800890a <TIM_OC5_SetConfig+0x76>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a17      	ldr	r2, [pc, #92]	; (800894c <TIM_OC5_SetConfig+0xb8>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d00b      	beq.n	800890a <TIM_OC5_SetConfig+0x76>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a16      	ldr	r2, [pc, #88]	; (8008950 <TIM_OC5_SetConfig+0xbc>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d007      	beq.n	800890a <TIM_OC5_SetConfig+0x76>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a15      	ldr	r2, [pc, #84]	; (8008954 <TIM_OC5_SetConfig+0xc0>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d003      	beq.n	800890a <TIM_OC5_SetConfig+0x76>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a14      	ldr	r2, [pc, #80]	; (8008958 <TIM_OC5_SetConfig+0xc4>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d109      	bne.n	800891e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008910:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	021b      	lsls	r3, r3, #8
 8008918:	697a      	ldr	r2, [r7, #20]
 800891a:	4313      	orrs	r3, r2
 800891c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	621a      	str	r2, [r3, #32]
}
 8008938:	bf00      	nop
 800893a:	371c      	adds	r7, #28
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	fffeff8f 	.word	0xfffeff8f
 8008948:	40010000 	.word	0x40010000
 800894c:	40010400 	.word	0x40010400
 8008950:	40014000 	.word	0x40014000
 8008954:	40014400 	.word	0x40014400
 8008958:	40014800 	.word	0x40014800

0800895c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800895c:	b480      	push	{r7}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a1b      	ldr	r3, [r3, #32]
 800896a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	4b22      	ldr	r3, [pc, #136]	; (8008a10 <TIM_OC6_SetConfig+0xb4>)
 8008988:	4013      	ands	r3, r2
 800898a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	021b      	lsls	r3, r3, #8
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	4313      	orrs	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800899e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	051b      	lsls	r3, r3, #20
 80089a6:	693a      	ldr	r2, [r7, #16]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a19      	ldr	r2, [pc, #100]	; (8008a14 <TIM_OC6_SetConfig+0xb8>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d00f      	beq.n	80089d4 <TIM_OC6_SetConfig+0x78>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a18      	ldr	r2, [pc, #96]	; (8008a18 <TIM_OC6_SetConfig+0xbc>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d00b      	beq.n	80089d4 <TIM_OC6_SetConfig+0x78>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a17      	ldr	r2, [pc, #92]	; (8008a1c <TIM_OC6_SetConfig+0xc0>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d007      	beq.n	80089d4 <TIM_OC6_SetConfig+0x78>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a16      	ldr	r2, [pc, #88]	; (8008a20 <TIM_OC6_SetConfig+0xc4>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d003      	beq.n	80089d4 <TIM_OC6_SetConfig+0x78>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a15      	ldr	r2, [pc, #84]	; (8008a24 <TIM_OC6_SetConfig+0xc8>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d109      	bne.n	80089e8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	695b      	ldr	r3, [r3, #20]
 80089e0:	029b      	lsls	r3, r3, #10
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	685a      	ldr	r2, [r3, #4]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	621a      	str	r2, [r3, #32]
}
 8008a02:	bf00      	nop
 8008a04:	371c      	adds	r7, #28
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	feff8fff 	.word	0xfeff8fff
 8008a14:	40010000 	.word	0x40010000
 8008a18:	40010400 	.word	0x40010400
 8008a1c:	40014000 	.word	0x40014000
 8008a20:	40014400 	.word	0x40014400
 8008a24:	40014800 	.word	0x40014800

08008a28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b087      	sub	sp, #28
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6a1b      	ldr	r3, [r3, #32]
 8008a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	f023 0201 	bic.w	r2, r3, #1
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	011b      	lsls	r3, r3, #4
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	f023 030a 	bic.w	r3, r3, #10
 8008a64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	693a      	ldr	r2, [r7, #16]
 8008a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	621a      	str	r2, [r3, #32]
}
 8008a7a:	bf00      	nop
 8008a7c:	371c      	adds	r7, #28
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b087      	sub	sp, #28
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	60f8      	str	r0, [r7, #12]
 8008a8e:	60b9      	str	r1, [r7, #8]
 8008a90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	f023 0210 	bic.w	r2, r3, #16
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6a1b      	ldr	r3, [r3, #32]
 8008aa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ab0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	031b      	lsls	r3, r3, #12
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ac2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	011b      	lsls	r3, r3, #4
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	621a      	str	r2, [r3, #32]
}
 8008ada:	bf00      	nop
 8008adc:	371c      	adds	r7, #28
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
	...

08008ae8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	4b09      	ldr	r3, [pc, #36]	; (8008b20 <TIM_ITRx_SetConfig+0x38>)
 8008afc:	4013      	ands	r3, r2
 8008afe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	f043 0307 	orr.w	r3, r3, #7
 8008b0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	609a      	str	r2, [r3, #8]
}
 8008b12:	bf00      	nop
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	ffcfff8f 	.word	0xffcfff8f

08008b24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b087      	sub	sp, #28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
 8008b30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	021a      	lsls	r2, r3, #8
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	431a      	orrs	r2, r3
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	609a      	str	r2, [r3, #8]
}
 8008b58:	bf00      	nop
 8008b5a:	371c      	adds	r7, #28
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b087      	sub	sp, #28
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f003 031f 	and.w	r3, r3, #31
 8008b76:	2201      	movs	r2, #1
 8008b78:	fa02 f303 	lsl.w	r3, r2, r3
 8008b7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6a1a      	ldr	r2, [r3, #32]
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	43db      	mvns	r3, r3
 8008b86:	401a      	ands	r2, r3
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6a1a      	ldr	r2, [r3, #32]
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	f003 031f 	and.w	r3, r3, #31
 8008b96:	6879      	ldr	r1, [r7, #4]
 8008b98:	fa01 f303 	lsl.w	r3, r1, r3
 8008b9c:	431a      	orrs	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	621a      	str	r2, [r3, #32]
}
 8008ba2:	bf00      	nop
 8008ba4:	371c      	adds	r7, #28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
	...

08008bb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d101      	bne.n	8008bc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	e06d      	b.n	8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a30      	ldr	r2, [pc, #192]	; (8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d004      	beq.n	8008bfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a2f      	ldr	r2, [pc, #188]	; (8008cb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d108      	bne.n	8008c0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a20      	ldr	r2, [pc, #128]	; (8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d022      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c3a:	d01d      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a1d      	ldr	r2, [pc, #116]	; (8008cb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d018      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a1c      	ldr	r2, [pc, #112]	; (8008cbc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d013      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a1a      	ldr	r2, [pc, #104]	; (8008cc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d00e      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a15      	ldr	r2, [pc, #84]	; (8008cb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d009      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a16      	ldr	r2, [pc, #88]	; (8008cc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d004      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a15      	ldr	r2, [pc, #84]	; (8008cc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d10c      	bne.n	8008c92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	40010000 	.word	0x40010000
 8008cb4:	40010400 	.word	0x40010400
 8008cb8:	40000400 	.word	0x40000400
 8008cbc:	40000800 	.word	0x40000800
 8008cc0:	40000c00 	.word	0x40000c00
 8008cc4:	40001800 	.word	0x40001800
 8008cc8:	40014000 	.word	0x40014000

08008ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008cd4:	bf00      	nop
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ce8:	bf00      	nop
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008cfc:	bf00      	nop
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d101      	bne.n	8008d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e042      	b.n	8008da0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d106      	bne.n	8008d32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f7f8 ffa5 	bl	8001c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2224      	movs	r2, #36	; 0x24
 8008d36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f022 0201 	bic.w	r2, r2, #1
 8008d48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fd74 	bl	8009838 <UART_SetConfig>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d101      	bne.n	8008d5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e022      	b.n	8008da0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d002      	beq.n	8008d68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f001 fbd4 	bl	800a510 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	689a      	ldr	r2, [r3, #8]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f042 0201 	orr.w	r2, r2, #1
 8008d96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f001 fc5b 	bl	800a654 <UART_CheckIdleState>
 8008d9e:	4603      	mov	r3, r0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08a      	sub	sp, #40	; 0x28
 8008dac:	af02      	add	r7, sp, #8
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	603b      	str	r3, [r7, #0]
 8008db4:	4613      	mov	r3, r2
 8008db6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dbe:	2b20      	cmp	r3, #32
 8008dc0:	d17b      	bne.n	8008eba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <HAL_UART_Transmit+0x26>
 8008dc8:	88fb      	ldrh	r3, [r7, #6]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d101      	bne.n	8008dd2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e074      	b.n	8008ebc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2221      	movs	r2, #33	; 0x21
 8008dde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008de2:	f7f9 f97f 	bl	80020e4 <HAL_GetTick>
 8008de6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	88fa      	ldrh	r2, [r7, #6]
 8008dec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	88fa      	ldrh	r2, [r7, #6]
 8008df4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e00:	d108      	bne.n	8008e14 <HAL_UART_Transmit+0x6c>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d104      	bne.n	8008e14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	61bb      	str	r3, [r7, #24]
 8008e12:	e003      	b.n	8008e1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e1c:	e030      	b.n	8008e80 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	2200      	movs	r2, #0
 8008e26:	2180      	movs	r1, #128	; 0x80
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f001 fcbd 	bl	800a7a8 <UART_WaitOnFlagUntilTimeout>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d005      	beq.n	8008e40 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2220      	movs	r2, #32
 8008e38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e03d      	b.n	8008ebc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10b      	bne.n	8008e5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	881b      	ldrh	r3, [r3, #0]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	3302      	adds	r3, #2
 8008e5a:	61bb      	str	r3, [r7, #24]
 8008e5c:	e007      	b.n	8008e6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	781a      	ldrb	r2, [r3, #0]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	3b01      	subs	r3, #1
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1c8      	bne.n	8008e1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	2200      	movs	r2, #0
 8008e94:	2140      	movs	r1, #64	; 0x40
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f001 fc86 	bl	800a7a8 <UART_WaitOnFlagUntilTimeout>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d005      	beq.n	8008eae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2220      	movs	r2, #32
 8008ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e006      	b.n	8008ebc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2220      	movs	r2, #32
 8008eb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	e000      	b.n	8008ebc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008eba:	2302      	movs	r3, #2
  }
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3720      	adds	r7, #32
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b091      	sub	sp, #68	; 0x44
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ed8:	2b20      	cmp	r3, #32
 8008eda:	d178      	bne.n	8008fce <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d002      	beq.n	8008ee8 <HAL_UART_Transmit_IT+0x24>
 8008ee2:	88fb      	ldrh	r3, [r7, #6]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d101      	bne.n	8008eec <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e071      	b.n	8008fd0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	88fa      	ldrh	r2, [r7, #6]
 8008ef6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	88fa      	ldrh	r2, [r7, #6]
 8008efe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2221      	movs	r2, #33	; 0x21
 8008f14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f20:	d12a      	bne.n	8008f78 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f2a:	d107      	bne.n	8008f3c <HAL_UART_Transmit_IT+0x78>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d103      	bne.n	8008f3c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	4a29      	ldr	r2, [pc, #164]	; (8008fdc <HAL_UART_Transmit_IT+0x118>)
 8008f38:	679a      	str	r2, [r3, #120]	; 0x78
 8008f3a:	e002      	b.n	8008f42 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4a28      	ldr	r2, [pc, #160]	; (8008fe0 <HAL_UART_Transmit_IT+0x11c>)
 8008f40:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	3308      	adds	r3, #8
 8008f48:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4c:	e853 3f00 	ldrex	r3, [r3]
 8008f50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f58:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3308      	adds	r3, #8
 8008f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f62:	637a      	str	r2, [r7, #52]	; 0x34
 8008f64:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f6a:	e841 2300 	strex	r3, r2, [r1]
 8008f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1e5      	bne.n	8008f42 <HAL_UART_Transmit_IT+0x7e>
 8008f76:	e028      	b.n	8008fca <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f80:	d107      	bne.n	8008f92 <HAL_UART_Transmit_IT+0xce>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d103      	bne.n	8008f92 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	4a15      	ldr	r2, [pc, #84]	; (8008fe4 <HAL_UART_Transmit_IT+0x120>)
 8008f8e:	679a      	str	r2, [r3, #120]	; 0x78
 8008f90:	e002      	b.n	8008f98 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	4a14      	ldr	r2, [pc, #80]	; (8008fe8 <HAL_UART_Transmit_IT+0x124>)
 8008f96:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	e853 3f00 	ldrex	r3, [r3]
 8008fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb6:	623b      	str	r3, [r7, #32]
 8008fb8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fba:	69f9      	ldr	r1, [r7, #28]
 8008fbc:	6a3a      	ldr	r2, [r7, #32]
 8008fbe:	e841 2300 	strex	r3, r2, [r1]
 8008fc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1e6      	bne.n	8008f98 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	e000      	b.n	8008fd0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008fce:	2302      	movs	r3, #2
  }
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3744      	adds	r7, #68	; 0x44
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr
 8008fdc:	0800ae0f 	.word	0x0800ae0f
 8008fe0:	0800ad2f 	.word	0x0800ad2f
 8008fe4:	0800ac6d 	.word	0x0800ac6d
 8008fe8:	0800abb5 	.word	0x0800abb5

08008fec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b08a      	sub	sp, #40	; 0x28
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009000:	2b20      	cmp	r3, #32
 8009002:	d137      	bne.n	8009074 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d002      	beq.n	8009010 <HAL_UART_Receive_IT+0x24>
 800900a:	88fb      	ldrh	r3, [r7, #6]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d101      	bne.n	8009014 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e030      	b.n	8009076 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a18      	ldr	r2, [pc, #96]	; (8009080 <HAL_UART_Receive_IT+0x94>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d01f      	beq.n	8009064 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800902e:	2b00      	cmp	r3, #0
 8009030:	d018      	beq.n	8009064 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	e853 3f00 	ldrex	r3, [r3]
 800903e:	613b      	str	r3, [r7, #16]
   return(result);
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009046:	627b      	str	r3, [r7, #36]	; 0x24
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	461a      	mov	r2, r3
 800904e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009050:	623b      	str	r3, [r7, #32]
 8009052:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009054:	69f9      	ldr	r1, [r7, #28]
 8009056:	6a3a      	ldr	r2, [r7, #32]
 8009058:	e841 2300 	strex	r3, r2, [r1]
 800905c:	61bb      	str	r3, [r7, #24]
   return(result);
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1e6      	bne.n	8009032 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009064:	88fb      	ldrh	r3, [r7, #6]
 8009066:	461a      	mov	r2, r3
 8009068:	68b9      	ldr	r1, [r7, #8]
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f001 fc04 	bl	800a878 <UART_Start_Receive_IT>
 8009070:	4603      	mov	r3, r0
 8009072:	e000      	b.n	8009076 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009074:	2302      	movs	r3, #2
  }
}
 8009076:	4618      	mov	r0, r3
 8009078:	3728      	adds	r7, #40	; 0x28
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	58000c00 	.word	0x58000c00

08009084 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b0ba      	sub	sp, #232	; 0xe8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	69db      	ldr	r3, [r3, #28]
 8009092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80090aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80090ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80090b2:	4013      	ands	r3, r2
 80090b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80090b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d11b      	bne.n	80090f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80090c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090c4:	f003 0320 	and.w	r3, r3, #32
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d015      	beq.n	80090f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80090cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090d0:	f003 0320 	and.w	r3, r3, #32
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d105      	bne.n	80090e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80090d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d009      	beq.n	80090f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f000 8377 	beq.w	80097dc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	4798      	blx	r3
      }
      return;
 80090f6:	e371      	b.n	80097dc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80090f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 8123 	beq.w	8009348 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009102:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009106:	4b8d      	ldr	r3, [pc, #564]	; (800933c <HAL_UART_IRQHandler+0x2b8>)
 8009108:	4013      	ands	r3, r2
 800910a:	2b00      	cmp	r3, #0
 800910c:	d106      	bne.n	800911c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800910e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009112:	4b8b      	ldr	r3, [pc, #556]	; (8009340 <HAL_UART_IRQHandler+0x2bc>)
 8009114:	4013      	ands	r3, r2
 8009116:	2b00      	cmp	r3, #0
 8009118:	f000 8116 	beq.w	8009348 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800911c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009120:	f003 0301 	and.w	r3, r3, #1
 8009124:	2b00      	cmp	r3, #0
 8009126:	d011      	beq.n	800914c <HAL_UART_IRQHandler+0xc8>
 8009128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800912c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00b      	beq.n	800914c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2201      	movs	r2, #1
 800913a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009142:	f043 0201 	orr.w	r2, r3, #1
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800914c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009150:	f003 0302 	and.w	r3, r3, #2
 8009154:	2b00      	cmp	r3, #0
 8009156:	d011      	beq.n	800917c <HAL_UART_IRQHandler+0xf8>
 8009158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00b      	beq.n	800917c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2202      	movs	r2, #2
 800916a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009172:	f043 0204 	orr.w	r2, r3, #4
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800917c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009180:	f003 0304 	and.w	r3, r3, #4
 8009184:	2b00      	cmp	r3, #0
 8009186:	d011      	beq.n	80091ac <HAL_UART_IRQHandler+0x128>
 8009188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800918c:	f003 0301 	and.w	r3, r3, #1
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00b      	beq.n	80091ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2204      	movs	r2, #4
 800919a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091a2:	f043 0202 	orr.w	r2, r3, #2
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80091ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091b0:	f003 0308 	and.w	r3, r3, #8
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d017      	beq.n	80091e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091bc:	f003 0320 	and.w	r3, r3, #32
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d105      	bne.n	80091d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80091c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80091c8:	4b5c      	ldr	r3, [pc, #368]	; (800933c <HAL_UART_IRQHandler+0x2b8>)
 80091ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00b      	beq.n	80091e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2208      	movs	r2, #8
 80091d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091de:	f043 0208 	orr.w	r2, r3, #8
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80091e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d012      	beq.n	800921a <HAL_UART_IRQHandler+0x196>
 80091f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00c      	beq.n	800921a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009208:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009210:	f043 0220 	orr.w	r2, r3, #32
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009220:	2b00      	cmp	r3, #0
 8009222:	f000 82dd 	beq.w	80097e0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800922a:	f003 0320 	and.w	r3, r3, #32
 800922e:	2b00      	cmp	r3, #0
 8009230:	d013      	beq.n	800925a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009236:	f003 0320 	and.w	r3, r3, #32
 800923a:	2b00      	cmp	r3, #0
 800923c:	d105      	bne.n	800924a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800923e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009246:	2b00      	cmp	r3, #0
 8009248:	d007      	beq.n	800925a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800924e:	2b00      	cmp	r3, #0
 8009250:	d003      	beq.n	800925a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009260:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800926e:	2b40      	cmp	r3, #64	; 0x40
 8009270:	d005      	beq.n	800927e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009276:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800927a:	2b00      	cmp	r3, #0
 800927c:	d054      	beq.n	8009328 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f001 fc1c 	bl	800aabc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800928e:	2b40      	cmp	r3, #64	; 0x40
 8009290:	d146      	bne.n	8009320 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	3308      	adds	r3, #8
 8009298:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092a0:	e853 3f00 	ldrex	r3, [r3]
 80092a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80092a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	3308      	adds	r3, #8
 80092ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80092be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80092c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80092ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80092ce:	e841 2300 	strex	r3, r2, [r1]
 80092d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80092d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1d9      	bne.n	8009292 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d017      	beq.n	8009318 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092ee:	4a15      	ldr	r2, [pc, #84]	; (8009344 <HAL_UART_IRQHandler+0x2c0>)
 80092f0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7f9 fee1 	bl	80030c0 <HAL_DMA_Abort_IT>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d019      	beq.n	8009338 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800930a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009312:	4610      	mov	r0, r2
 8009314:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009316:	e00f      	b.n	8009338 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fa77 	bl	800980c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800931e:	e00b      	b.n	8009338 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fa73 	bl	800980c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009326:	e007      	b.n	8009338 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fa6f 	bl	800980c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009336:	e253      	b.n	80097e0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009338:	bf00      	nop
    return;
 800933a:	e251      	b.n	80097e0 <HAL_UART_IRQHandler+0x75c>
 800933c:	10000001 	.word	0x10000001
 8009340:	04000120 	.word	0x04000120
 8009344:	0800ab89 	.word	0x0800ab89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800934c:	2b01      	cmp	r3, #1
 800934e:	f040 81e7 	bne.w	8009720 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009356:	f003 0310 	and.w	r3, r3, #16
 800935a:	2b00      	cmp	r3, #0
 800935c:	f000 81e0 	beq.w	8009720 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009364:	f003 0310 	and.w	r3, r3, #16
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 81d9 	beq.w	8009720 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2210      	movs	r2, #16
 8009374:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009380:	2b40      	cmp	r3, #64	; 0x40
 8009382:	f040 8151 	bne.w	8009628 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a96      	ldr	r2, [pc, #600]	; (80095e8 <HAL_UART_IRQHandler+0x564>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d068      	beq.n	8009466 <HAL_UART_IRQHandler+0x3e2>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a93      	ldr	r2, [pc, #588]	; (80095ec <HAL_UART_IRQHandler+0x568>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d061      	beq.n	8009466 <HAL_UART_IRQHandler+0x3e2>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a91      	ldr	r2, [pc, #580]	; (80095f0 <HAL_UART_IRQHandler+0x56c>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d05a      	beq.n	8009466 <HAL_UART_IRQHandler+0x3e2>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a8e      	ldr	r2, [pc, #568]	; (80095f4 <HAL_UART_IRQHandler+0x570>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d053      	beq.n	8009466 <HAL_UART_IRQHandler+0x3e2>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a8c      	ldr	r2, [pc, #560]	; (80095f8 <HAL_UART_IRQHandler+0x574>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d04c      	beq.n	8009466 <HAL_UART_IRQHandler+0x3e2>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a89      	ldr	r2, [pc, #548]	; (80095fc <HAL_UART_IRQHandler+0x578>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d045      	beq.n	8009466 <HAL_UART_IRQHandler+0x3e2>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a87      	ldr	r2, [pc, #540]	; (8009600 <HAL_UART_IRQHandler+0x57c>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d03e      	beq.n	8009466 <HAL_UART_IRQHandler+0x3e2>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a84      	ldr	r2, [pc, #528]	; (8009604 <HAL_UART_IRQHandler+0x580>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d037      	beq.n	8009466 <HAL_UART_IRQHandler+0x3e2>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a82      	ldr	r2, [pc, #520]	; (8009608 <HAL_UART_IRQHandler+0x584>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d030      	beq.n	8009466 <HAL_UART_IRQHandler+0x3e2>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a7f      	ldr	r2, [pc, #508]	; (800960c <HAL_UART_IRQHandler+0x588>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d029      	beq.n	8009466 <HAL_UART_IRQHandler+0x3e2>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a7d      	ldr	r2, [pc, #500]	; (8009610 <HAL_UART_IRQHandler+0x58c>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d022      	beq.n	8009466 <HAL_UART_IRQHandler+0x3e2>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a7a      	ldr	r2, [pc, #488]	; (8009614 <HAL_UART_IRQHandler+0x590>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d01b      	beq.n	8009466 <HAL_UART_IRQHandler+0x3e2>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a78      	ldr	r2, [pc, #480]	; (8009618 <HAL_UART_IRQHandler+0x594>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d014      	beq.n	8009466 <HAL_UART_IRQHandler+0x3e2>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a75      	ldr	r2, [pc, #468]	; (800961c <HAL_UART_IRQHandler+0x598>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d00d      	beq.n	8009466 <HAL_UART_IRQHandler+0x3e2>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a73      	ldr	r2, [pc, #460]	; (8009620 <HAL_UART_IRQHandler+0x59c>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d006      	beq.n	8009466 <HAL_UART_IRQHandler+0x3e2>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a70      	ldr	r2, [pc, #448]	; (8009624 <HAL_UART_IRQHandler+0x5a0>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d106      	bne.n	8009474 <HAL_UART_IRQHandler+0x3f0>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	b29b      	uxth	r3, r3
 8009472:	e005      	b.n	8009480 <HAL_UART_IRQHandler+0x3fc>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	b29b      	uxth	r3, r3
 8009480:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009484:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009488:	2b00      	cmp	r3, #0
 800948a:	f000 81ab 	beq.w	80097e4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009494:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009498:	429a      	cmp	r2, r3
 800949a:	f080 81a3 	bcs.w	80097e4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80094a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094ae:	69db      	ldr	r3, [r3, #28]
 80094b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094b4:	f000 8087 	beq.w	80095c6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094c4:	e853 3f00 	ldrex	r3, [r3]
 80094c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80094cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	461a      	mov	r2, r3
 80094de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80094e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80094ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80094f2:	e841 2300 	strex	r3, r2, [r1]
 80094f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80094fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1da      	bne.n	80094b8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	3308      	adds	r3, #8
 8009508:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800950c:	e853 3f00 	ldrex	r3, [r3]
 8009510:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009514:	f023 0301 	bic.w	r3, r3, #1
 8009518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	3308      	adds	r3, #8
 8009522:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009526:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800952a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800952e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009532:	e841 2300 	strex	r3, r2, [r1]
 8009536:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009538:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1e1      	bne.n	8009502 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	3308      	adds	r3, #8
 8009544:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009548:	e853 3f00 	ldrex	r3, [r3]
 800954c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800954e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	3308      	adds	r3, #8
 800955e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009562:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009564:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009566:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009568:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800956a:	e841 2300 	strex	r3, r2, [r1]
 800956e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1e3      	bne.n	800953e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2220      	movs	r2, #32
 800957a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800958c:	e853 3f00 	ldrex	r3, [r3]
 8009590:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009594:	f023 0310 	bic.w	r3, r3, #16
 8009598:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	461a      	mov	r2, r3
 80095a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80095a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095ae:	e841 2300 	strex	r3, r2, [r1]
 80095b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80095b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1e4      	bne.n	8009584 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7f9 fa5f 	bl	8002a84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2202      	movs	r2, #2
 80095ca:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095d8:	b29b      	uxth	r3, r3
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	b29b      	uxth	r3, r3
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f91d 	bl	8009820 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80095e6:	e0fd      	b.n	80097e4 <HAL_UART_IRQHandler+0x760>
 80095e8:	40020010 	.word	0x40020010
 80095ec:	40020028 	.word	0x40020028
 80095f0:	40020040 	.word	0x40020040
 80095f4:	40020058 	.word	0x40020058
 80095f8:	40020070 	.word	0x40020070
 80095fc:	40020088 	.word	0x40020088
 8009600:	400200a0 	.word	0x400200a0
 8009604:	400200b8 	.word	0x400200b8
 8009608:	40020410 	.word	0x40020410
 800960c:	40020428 	.word	0x40020428
 8009610:	40020440 	.word	0x40020440
 8009614:	40020458 	.word	0x40020458
 8009618:	40020470 	.word	0x40020470
 800961c:	40020488 	.word	0x40020488
 8009620:	400204a0 	.word	0x400204a0
 8009624:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009634:	b29b      	uxth	r3, r3
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009642:	b29b      	uxth	r3, r3
 8009644:	2b00      	cmp	r3, #0
 8009646:	f000 80cf 	beq.w	80097e8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800964a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800964e:	2b00      	cmp	r3, #0
 8009650:	f000 80ca 	beq.w	80097e8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965c:	e853 3f00 	ldrex	r3, [r3]
 8009660:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009664:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009668:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	461a      	mov	r2, r3
 8009672:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009676:	647b      	str	r3, [r7, #68]	; 0x44
 8009678:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800967c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800967e:	e841 2300 	strex	r3, r2, [r1]
 8009682:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009686:	2b00      	cmp	r3, #0
 8009688:	d1e4      	bne.n	8009654 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	3308      	adds	r3, #8
 8009690:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009694:	e853 3f00 	ldrex	r3, [r3]
 8009698:	623b      	str	r3, [r7, #32]
   return(result);
 800969a:	6a3a      	ldr	r2, [r7, #32]
 800969c:	4b55      	ldr	r3, [pc, #340]	; (80097f4 <HAL_UART_IRQHandler+0x770>)
 800969e:	4013      	ands	r3, r2
 80096a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	3308      	adds	r3, #8
 80096aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80096ae:	633a      	str	r2, [r7, #48]	; 0x30
 80096b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096b6:	e841 2300 	strex	r3, r2, [r1]
 80096ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1e3      	bne.n	800968a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2220      	movs	r2, #32
 80096c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	e853 3f00 	ldrex	r3, [r3]
 80096e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f023 0310 	bic.w	r3, r3, #16
 80096ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80096f8:	61fb      	str	r3, [r7, #28]
 80096fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fc:	69b9      	ldr	r1, [r7, #24]
 80096fe:	69fa      	ldr	r2, [r7, #28]
 8009700:	e841 2300 	strex	r3, r2, [r1]
 8009704:	617b      	str	r3, [r7, #20]
   return(result);
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1e4      	bne.n	80096d6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2202      	movs	r2, #2
 8009710:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009712:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009716:	4619      	mov	r1, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f881 	bl	8009820 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800971e:	e063      	b.n	80097e8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009724:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00e      	beq.n	800974a <HAL_UART_IRQHandler+0x6c6>
 800972c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009734:	2b00      	cmp	r3, #0
 8009736:	d008      	beq.n	800974a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009740:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f002 f920 	bl	800b988 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009748:	e051      	b.n	80097ee <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800974a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800974e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009752:	2b00      	cmp	r3, #0
 8009754:	d014      	beq.n	8009780 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800975a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800975e:	2b00      	cmp	r3, #0
 8009760:	d105      	bne.n	800976e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800976a:	2b00      	cmp	r3, #0
 800976c:	d008      	beq.n	8009780 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009772:	2b00      	cmp	r3, #0
 8009774:	d03a      	beq.n	80097ec <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	4798      	blx	r3
    }
    return;
 800977e:	e035      	b.n	80097ec <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009788:	2b00      	cmp	r3, #0
 800978a:	d009      	beq.n	80097a0 <HAL_UART_IRQHandler+0x71c>
 800978c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009794:	2b00      	cmp	r3, #0
 8009796:	d003      	beq.n	80097a0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f001 fbad 	bl	800aef8 <UART_EndTransmit_IT>
    return;
 800979e:	e026      	b.n	80097ee <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80097a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d009      	beq.n	80097c0 <HAL_UART_IRQHandler+0x73c>
 80097ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d003      	beq.n	80097c0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f002 f8f9 	bl	800b9b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097be:	e016      	b.n	80097ee <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80097c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d010      	beq.n	80097ee <HAL_UART_IRQHandler+0x76a>
 80097cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	da0c      	bge.n	80097ee <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f002 f8e1 	bl	800b99c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097da:	e008      	b.n	80097ee <HAL_UART_IRQHandler+0x76a>
      return;
 80097dc:	bf00      	nop
 80097de:	e006      	b.n	80097ee <HAL_UART_IRQHandler+0x76a>
    return;
 80097e0:	bf00      	nop
 80097e2:	e004      	b.n	80097ee <HAL_UART_IRQHandler+0x76a>
      return;
 80097e4:	bf00      	nop
 80097e6:	e002      	b.n	80097ee <HAL_UART_IRQHandler+0x76a>
      return;
 80097e8:	bf00      	nop
 80097ea:	e000      	b.n	80097ee <HAL_UART_IRQHandler+0x76a>
    return;
 80097ec:	bf00      	nop
  }
}
 80097ee:	37e8      	adds	r7, #232	; 0xe8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	effffffe 	.word	0xeffffffe

080097f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	460b      	mov	r3, r1
 800982a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800983c:	b092      	sub	sp, #72	; 0x48
 800983e:	af00      	add	r7, sp, #0
 8009840:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	689a      	ldr	r2, [r3, #8]
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	431a      	orrs	r2, r3
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	431a      	orrs	r2, r3
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	69db      	ldr	r3, [r3, #28]
 800985c:	4313      	orrs	r3, r2
 800985e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	4bbe      	ldr	r3, [pc, #760]	; (8009b60 <UART_SetConfig+0x328>)
 8009868:	4013      	ands	r3, r2
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	6812      	ldr	r2, [r2, #0]
 800986e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009870:	430b      	orrs	r3, r1
 8009872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	68da      	ldr	r2, [r3, #12]
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	430a      	orrs	r2, r1
 8009888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4ab3      	ldr	r2, [pc, #716]	; (8009b64 <UART_SetConfig+0x32c>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d004      	beq.n	80098a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	6a1b      	ldr	r3, [r3, #32]
 800989e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098a0:	4313      	orrs	r3, r2
 80098a2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	689a      	ldr	r2, [r3, #8]
 80098aa:	4baf      	ldr	r3, [pc, #700]	; (8009b68 <UART_SetConfig+0x330>)
 80098ac:	4013      	ands	r3, r2
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	6812      	ldr	r2, [r2, #0]
 80098b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80098b4:	430b      	orrs	r3, r1
 80098b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098be:	f023 010f 	bic.w	r1, r3, #15
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	430a      	orrs	r2, r1
 80098cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4aa6      	ldr	r2, [pc, #664]	; (8009b6c <UART_SetConfig+0x334>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d177      	bne.n	80099c8 <UART_SetConfig+0x190>
 80098d8:	4ba5      	ldr	r3, [pc, #660]	; (8009b70 <UART_SetConfig+0x338>)
 80098da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098e0:	2b28      	cmp	r3, #40	; 0x28
 80098e2:	d86d      	bhi.n	80099c0 <UART_SetConfig+0x188>
 80098e4:	a201      	add	r2, pc, #4	; (adr r2, 80098ec <UART_SetConfig+0xb4>)
 80098e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ea:	bf00      	nop
 80098ec:	08009991 	.word	0x08009991
 80098f0:	080099c1 	.word	0x080099c1
 80098f4:	080099c1 	.word	0x080099c1
 80098f8:	080099c1 	.word	0x080099c1
 80098fc:	080099c1 	.word	0x080099c1
 8009900:	080099c1 	.word	0x080099c1
 8009904:	080099c1 	.word	0x080099c1
 8009908:	080099c1 	.word	0x080099c1
 800990c:	08009999 	.word	0x08009999
 8009910:	080099c1 	.word	0x080099c1
 8009914:	080099c1 	.word	0x080099c1
 8009918:	080099c1 	.word	0x080099c1
 800991c:	080099c1 	.word	0x080099c1
 8009920:	080099c1 	.word	0x080099c1
 8009924:	080099c1 	.word	0x080099c1
 8009928:	080099c1 	.word	0x080099c1
 800992c:	080099a1 	.word	0x080099a1
 8009930:	080099c1 	.word	0x080099c1
 8009934:	080099c1 	.word	0x080099c1
 8009938:	080099c1 	.word	0x080099c1
 800993c:	080099c1 	.word	0x080099c1
 8009940:	080099c1 	.word	0x080099c1
 8009944:	080099c1 	.word	0x080099c1
 8009948:	080099c1 	.word	0x080099c1
 800994c:	080099a9 	.word	0x080099a9
 8009950:	080099c1 	.word	0x080099c1
 8009954:	080099c1 	.word	0x080099c1
 8009958:	080099c1 	.word	0x080099c1
 800995c:	080099c1 	.word	0x080099c1
 8009960:	080099c1 	.word	0x080099c1
 8009964:	080099c1 	.word	0x080099c1
 8009968:	080099c1 	.word	0x080099c1
 800996c:	080099b1 	.word	0x080099b1
 8009970:	080099c1 	.word	0x080099c1
 8009974:	080099c1 	.word	0x080099c1
 8009978:	080099c1 	.word	0x080099c1
 800997c:	080099c1 	.word	0x080099c1
 8009980:	080099c1 	.word	0x080099c1
 8009984:	080099c1 	.word	0x080099c1
 8009988:	080099c1 	.word	0x080099c1
 800998c:	080099b9 	.word	0x080099b9
 8009990:	2301      	movs	r3, #1
 8009992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009996:	e326      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009998:	2304      	movs	r3, #4
 800999a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800999e:	e322      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 80099a0:	2308      	movs	r3, #8
 80099a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099a6:	e31e      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 80099a8:	2310      	movs	r3, #16
 80099aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ae:	e31a      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 80099b0:	2320      	movs	r3, #32
 80099b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099b6:	e316      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 80099b8:	2340      	movs	r3, #64	; 0x40
 80099ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099be:	e312      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 80099c0:	2380      	movs	r3, #128	; 0x80
 80099c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099c6:	e30e      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a69      	ldr	r2, [pc, #420]	; (8009b74 <UART_SetConfig+0x33c>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d130      	bne.n	8009a34 <UART_SetConfig+0x1fc>
 80099d2:	4b67      	ldr	r3, [pc, #412]	; (8009b70 <UART_SetConfig+0x338>)
 80099d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099d6:	f003 0307 	and.w	r3, r3, #7
 80099da:	2b05      	cmp	r3, #5
 80099dc:	d826      	bhi.n	8009a2c <UART_SetConfig+0x1f4>
 80099de:	a201      	add	r2, pc, #4	; (adr r2, 80099e4 <UART_SetConfig+0x1ac>)
 80099e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e4:	080099fd 	.word	0x080099fd
 80099e8:	08009a05 	.word	0x08009a05
 80099ec:	08009a0d 	.word	0x08009a0d
 80099f0:	08009a15 	.word	0x08009a15
 80099f4:	08009a1d 	.word	0x08009a1d
 80099f8:	08009a25 	.word	0x08009a25
 80099fc:	2300      	movs	r3, #0
 80099fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a02:	e2f0      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009a04:	2304      	movs	r3, #4
 8009a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a0a:	e2ec      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009a0c:	2308      	movs	r3, #8
 8009a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a12:	e2e8      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009a14:	2310      	movs	r3, #16
 8009a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a1a:	e2e4      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009a1c:	2320      	movs	r3, #32
 8009a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a22:	e2e0      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009a24:	2340      	movs	r3, #64	; 0x40
 8009a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a2a:	e2dc      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009a2c:	2380      	movs	r3, #128	; 0x80
 8009a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a32:	e2d8      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a4f      	ldr	r2, [pc, #316]	; (8009b78 <UART_SetConfig+0x340>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d130      	bne.n	8009aa0 <UART_SetConfig+0x268>
 8009a3e:	4b4c      	ldr	r3, [pc, #304]	; (8009b70 <UART_SetConfig+0x338>)
 8009a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a42:	f003 0307 	and.w	r3, r3, #7
 8009a46:	2b05      	cmp	r3, #5
 8009a48:	d826      	bhi.n	8009a98 <UART_SetConfig+0x260>
 8009a4a:	a201      	add	r2, pc, #4	; (adr r2, 8009a50 <UART_SetConfig+0x218>)
 8009a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a50:	08009a69 	.word	0x08009a69
 8009a54:	08009a71 	.word	0x08009a71
 8009a58:	08009a79 	.word	0x08009a79
 8009a5c:	08009a81 	.word	0x08009a81
 8009a60:	08009a89 	.word	0x08009a89
 8009a64:	08009a91 	.word	0x08009a91
 8009a68:	2300      	movs	r3, #0
 8009a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a6e:	e2ba      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009a70:	2304      	movs	r3, #4
 8009a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a76:	e2b6      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009a78:	2308      	movs	r3, #8
 8009a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a7e:	e2b2      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009a80:	2310      	movs	r3, #16
 8009a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a86:	e2ae      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009a88:	2320      	movs	r3, #32
 8009a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a8e:	e2aa      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009a90:	2340      	movs	r3, #64	; 0x40
 8009a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a96:	e2a6      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009a98:	2380      	movs	r3, #128	; 0x80
 8009a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a9e:	e2a2      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a35      	ldr	r2, [pc, #212]	; (8009b7c <UART_SetConfig+0x344>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d130      	bne.n	8009b0c <UART_SetConfig+0x2d4>
 8009aaa:	4b31      	ldr	r3, [pc, #196]	; (8009b70 <UART_SetConfig+0x338>)
 8009aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aae:	f003 0307 	and.w	r3, r3, #7
 8009ab2:	2b05      	cmp	r3, #5
 8009ab4:	d826      	bhi.n	8009b04 <UART_SetConfig+0x2cc>
 8009ab6:	a201      	add	r2, pc, #4	; (adr r2, 8009abc <UART_SetConfig+0x284>)
 8009ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009abc:	08009ad5 	.word	0x08009ad5
 8009ac0:	08009add 	.word	0x08009add
 8009ac4:	08009ae5 	.word	0x08009ae5
 8009ac8:	08009aed 	.word	0x08009aed
 8009acc:	08009af5 	.word	0x08009af5
 8009ad0:	08009afd 	.word	0x08009afd
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ada:	e284      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009adc:	2304      	movs	r3, #4
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ae2:	e280      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009ae4:	2308      	movs	r3, #8
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aea:	e27c      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009aec:	2310      	movs	r3, #16
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009af2:	e278      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009af4:	2320      	movs	r3, #32
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009afa:	e274      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009afc:	2340      	movs	r3, #64	; 0x40
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b02:	e270      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009b04:	2380      	movs	r3, #128	; 0x80
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b0a:	e26c      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a1b      	ldr	r2, [pc, #108]	; (8009b80 <UART_SetConfig+0x348>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d142      	bne.n	8009b9c <UART_SetConfig+0x364>
 8009b16:	4b16      	ldr	r3, [pc, #88]	; (8009b70 <UART_SetConfig+0x338>)
 8009b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b1a:	f003 0307 	and.w	r3, r3, #7
 8009b1e:	2b05      	cmp	r3, #5
 8009b20:	d838      	bhi.n	8009b94 <UART_SetConfig+0x35c>
 8009b22:	a201      	add	r2, pc, #4	; (adr r2, 8009b28 <UART_SetConfig+0x2f0>)
 8009b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b28:	08009b41 	.word	0x08009b41
 8009b2c:	08009b49 	.word	0x08009b49
 8009b30:	08009b51 	.word	0x08009b51
 8009b34:	08009b59 	.word	0x08009b59
 8009b38:	08009b85 	.word	0x08009b85
 8009b3c:	08009b8d 	.word	0x08009b8d
 8009b40:	2300      	movs	r3, #0
 8009b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b46:	e24e      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009b48:	2304      	movs	r3, #4
 8009b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b4e:	e24a      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009b50:	2308      	movs	r3, #8
 8009b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b56:	e246      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009b58:	2310      	movs	r3, #16
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b5e:	e242      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009b60:	cfff69f3 	.word	0xcfff69f3
 8009b64:	58000c00 	.word	0x58000c00
 8009b68:	11fff4ff 	.word	0x11fff4ff
 8009b6c:	40011000 	.word	0x40011000
 8009b70:	58024400 	.word	0x58024400
 8009b74:	40004400 	.word	0x40004400
 8009b78:	40004800 	.word	0x40004800
 8009b7c:	40004c00 	.word	0x40004c00
 8009b80:	40005000 	.word	0x40005000
 8009b84:	2320      	movs	r3, #32
 8009b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b8a:	e22c      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009b8c:	2340      	movs	r3, #64	; 0x40
 8009b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b92:	e228      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009b94:	2380      	movs	r3, #128	; 0x80
 8009b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b9a:	e224      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4ab1      	ldr	r2, [pc, #708]	; (8009e68 <UART_SetConfig+0x630>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d176      	bne.n	8009c94 <UART_SetConfig+0x45c>
 8009ba6:	4bb1      	ldr	r3, [pc, #708]	; (8009e6c <UART_SetConfig+0x634>)
 8009ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bae:	2b28      	cmp	r3, #40	; 0x28
 8009bb0:	d86c      	bhi.n	8009c8c <UART_SetConfig+0x454>
 8009bb2:	a201      	add	r2, pc, #4	; (adr r2, 8009bb8 <UART_SetConfig+0x380>)
 8009bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb8:	08009c5d 	.word	0x08009c5d
 8009bbc:	08009c8d 	.word	0x08009c8d
 8009bc0:	08009c8d 	.word	0x08009c8d
 8009bc4:	08009c8d 	.word	0x08009c8d
 8009bc8:	08009c8d 	.word	0x08009c8d
 8009bcc:	08009c8d 	.word	0x08009c8d
 8009bd0:	08009c8d 	.word	0x08009c8d
 8009bd4:	08009c8d 	.word	0x08009c8d
 8009bd8:	08009c65 	.word	0x08009c65
 8009bdc:	08009c8d 	.word	0x08009c8d
 8009be0:	08009c8d 	.word	0x08009c8d
 8009be4:	08009c8d 	.word	0x08009c8d
 8009be8:	08009c8d 	.word	0x08009c8d
 8009bec:	08009c8d 	.word	0x08009c8d
 8009bf0:	08009c8d 	.word	0x08009c8d
 8009bf4:	08009c8d 	.word	0x08009c8d
 8009bf8:	08009c6d 	.word	0x08009c6d
 8009bfc:	08009c8d 	.word	0x08009c8d
 8009c00:	08009c8d 	.word	0x08009c8d
 8009c04:	08009c8d 	.word	0x08009c8d
 8009c08:	08009c8d 	.word	0x08009c8d
 8009c0c:	08009c8d 	.word	0x08009c8d
 8009c10:	08009c8d 	.word	0x08009c8d
 8009c14:	08009c8d 	.word	0x08009c8d
 8009c18:	08009c75 	.word	0x08009c75
 8009c1c:	08009c8d 	.word	0x08009c8d
 8009c20:	08009c8d 	.word	0x08009c8d
 8009c24:	08009c8d 	.word	0x08009c8d
 8009c28:	08009c8d 	.word	0x08009c8d
 8009c2c:	08009c8d 	.word	0x08009c8d
 8009c30:	08009c8d 	.word	0x08009c8d
 8009c34:	08009c8d 	.word	0x08009c8d
 8009c38:	08009c7d 	.word	0x08009c7d
 8009c3c:	08009c8d 	.word	0x08009c8d
 8009c40:	08009c8d 	.word	0x08009c8d
 8009c44:	08009c8d 	.word	0x08009c8d
 8009c48:	08009c8d 	.word	0x08009c8d
 8009c4c:	08009c8d 	.word	0x08009c8d
 8009c50:	08009c8d 	.word	0x08009c8d
 8009c54:	08009c8d 	.word	0x08009c8d
 8009c58:	08009c85 	.word	0x08009c85
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c62:	e1c0      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009c64:	2304      	movs	r3, #4
 8009c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c6a:	e1bc      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009c6c:	2308      	movs	r3, #8
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c72:	e1b8      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009c74:	2310      	movs	r3, #16
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c7a:	e1b4      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009c7c:	2320      	movs	r3, #32
 8009c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c82:	e1b0      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009c84:	2340      	movs	r3, #64	; 0x40
 8009c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c8a:	e1ac      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009c8c:	2380      	movs	r3, #128	; 0x80
 8009c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c92:	e1a8      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a75      	ldr	r2, [pc, #468]	; (8009e70 <UART_SetConfig+0x638>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d130      	bne.n	8009d00 <UART_SetConfig+0x4c8>
 8009c9e:	4b73      	ldr	r3, [pc, #460]	; (8009e6c <UART_SetConfig+0x634>)
 8009ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca2:	f003 0307 	and.w	r3, r3, #7
 8009ca6:	2b05      	cmp	r3, #5
 8009ca8:	d826      	bhi.n	8009cf8 <UART_SetConfig+0x4c0>
 8009caa:	a201      	add	r2, pc, #4	; (adr r2, 8009cb0 <UART_SetConfig+0x478>)
 8009cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb0:	08009cc9 	.word	0x08009cc9
 8009cb4:	08009cd1 	.word	0x08009cd1
 8009cb8:	08009cd9 	.word	0x08009cd9
 8009cbc:	08009ce1 	.word	0x08009ce1
 8009cc0:	08009ce9 	.word	0x08009ce9
 8009cc4:	08009cf1 	.word	0x08009cf1
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cce:	e18a      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009cd0:	2304      	movs	r3, #4
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd6:	e186      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009cd8:	2308      	movs	r3, #8
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cde:	e182      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009ce0:	2310      	movs	r3, #16
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce6:	e17e      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009ce8:	2320      	movs	r3, #32
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cee:	e17a      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009cf0:	2340      	movs	r3, #64	; 0x40
 8009cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cf6:	e176      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009cf8:	2380      	movs	r3, #128	; 0x80
 8009cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cfe:	e172      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a5b      	ldr	r2, [pc, #364]	; (8009e74 <UART_SetConfig+0x63c>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d130      	bne.n	8009d6c <UART_SetConfig+0x534>
 8009d0a:	4b58      	ldr	r3, [pc, #352]	; (8009e6c <UART_SetConfig+0x634>)
 8009d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d0e:	f003 0307 	and.w	r3, r3, #7
 8009d12:	2b05      	cmp	r3, #5
 8009d14:	d826      	bhi.n	8009d64 <UART_SetConfig+0x52c>
 8009d16:	a201      	add	r2, pc, #4	; (adr r2, 8009d1c <UART_SetConfig+0x4e4>)
 8009d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1c:	08009d35 	.word	0x08009d35
 8009d20:	08009d3d 	.word	0x08009d3d
 8009d24:	08009d45 	.word	0x08009d45
 8009d28:	08009d4d 	.word	0x08009d4d
 8009d2c:	08009d55 	.word	0x08009d55
 8009d30:	08009d5d 	.word	0x08009d5d
 8009d34:	2300      	movs	r3, #0
 8009d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d3a:	e154      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009d3c:	2304      	movs	r3, #4
 8009d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d42:	e150      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009d44:	2308      	movs	r3, #8
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d4a:	e14c      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009d4c:	2310      	movs	r3, #16
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d52:	e148      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009d54:	2320      	movs	r3, #32
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d5a:	e144      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009d5c:	2340      	movs	r3, #64	; 0x40
 8009d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d62:	e140      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009d64:	2380      	movs	r3, #128	; 0x80
 8009d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d6a:	e13c      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a41      	ldr	r2, [pc, #260]	; (8009e78 <UART_SetConfig+0x640>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	f040 8082 	bne.w	8009e7c <UART_SetConfig+0x644>
 8009d78:	4b3c      	ldr	r3, [pc, #240]	; (8009e6c <UART_SetConfig+0x634>)
 8009d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d80:	2b28      	cmp	r3, #40	; 0x28
 8009d82:	d86d      	bhi.n	8009e60 <UART_SetConfig+0x628>
 8009d84:	a201      	add	r2, pc, #4	; (adr r2, 8009d8c <UART_SetConfig+0x554>)
 8009d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8a:	bf00      	nop
 8009d8c:	08009e31 	.word	0x08009e31
 8009d90:	08009e61 	.word	0x08009e61
 8009d94:	08009e61 	.word	0x08009e61
 8009d98:	08009e61 	.word	0x08009e61
 8009d9c:	08009e61 	.word	0x08009e61
 8009da0:	08009e61 	.word	0x08009e61
 8009da4:	08009e61 	.word	0x08009e61
 8009da8:	08009e61 	.word	0x08009e61
 8009dac:	08009e39 	.word	0x08009e39
 8009db0:	08009e61 	.word	0x08009e61
 8009db4:	08009e61 	.word	0x08009e61
 8009db8:	08009e61 	.word	0x08009e61
 8009dbc:	08009e61 	.word	0x08009e61
 8009dc0:	08009e61 	.word	0x08009e61
 8009dc4:	08009e61 	.word	0x08009e61
 8009dc8:	08009e61 	.word	0x08009e61
 8009dcc:	08009e41 	.word	0x08009e41
 8009dd0:	08009e61 	.word	0x08009e61
 8009dd4:	08009e61 	.word	0x08009e61
 8009dd8:	08009e61 	.word	0x08009e61
 8009ddc:	08009e61 	.word	0x08009e61
 8009de0:	08009e61 	.word	0x08009e61
 8009de4:	08009e61 	.word	0x08009e61
 8009de8:	08009e61 	.word	0x08009e61
 8009dec:	08009e49 	.word	0x08009e49
 8009df0:	08009e61 	.word	0x08009e61
 8009df4:	08009e61 	.word	0x08009e61
 8009df8:	08009e61 	.word	0x08009e61
 8009dfc:	08009e61 	.word	0x08009e61
 8009e00:	08009e61 	.word	0x08009e61
 8009e04:	08009e61 	.word	0x08009e61
 8009e08:	08009e61 	.word	0x08009e61
 8009e0c:	08009e51 	.word	0x08009e51
 8009e10:	08009e61 	.word	0x08009e61
 8009e14:	08009e61 	.word	0x08009e61
 8009e18:	08009e61 	.word	0x08009e61
 8009e1c:	08009e61 	.word	0x08009e61
 8009e20:	08009e61 	.word	0x08009e61
 8009e24:	08009e61 	.word	0x08009e61
 8009e28:	08009e61 	.word	0x08009e61
 8009e2c:	08009e59 	.word	0x08009e59
 8009e30:	2301      	movs	r3, #1
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e36:	e0d6      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009e38:	2304      	movs	r3, #4
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e3e:	e0d2      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009e40:	2308      	movs	r3, #8
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e46:	e0ce      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009e48:	2310      	movs	r3, #16
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e4e:	e0ca      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009e50:	2320      	movs	r3, #32
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e56:	e0c6      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009e58:	2340      	movs	r3, #64	; 0x40
 8009e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e5e:	e0c2      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009e60:	2380      	movs	r3, #128	; 0x80
 8009e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e66:	e0be      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009e68:	40011400 	.word	0x40011400
 8009e6c:	58024400 	.word	0x58024400
 8009e70:	40007800 	.word	0x40007800
 8009e74:	40007c00 	.word	0x40007c00
 8009e78:	40011800 	.word	0x40011800
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4aad      	ldr	r2, [pc, #692]	; (800a138 <UART_SetConfig+0x900>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d176      	bne.n	8009f74 <UART_SetConfig+0x73c>
 8009e86:	4bad      	ldr	r3, [pc, #692]	; (800a13c <UART_SetConfig+0x904>)
 8009e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e8e:	2b28      	cmp	r3, #40	; 0x28
 8009e90:	d86c      	bhi.n	8009f6c <UART_SetConfig+0x734>
 8009e92:	a201      	add	r2, pc, #4	; (adr r2, 8009e98 <UART_SetConfig+0x660>)
 8009e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e98:	08009f3d 	.word	0x08009f3d
 8009e9c:	08009f6d 	.word	0x08009f6d
 8009ea0:	08009f6d 	.word	0x08009f6d
 8009ea4:	08009f6d 	.word	0x08009f6d
 8009ea8:	08009f6d 	.word	0x08009f6d
 8009eac:	08009f6d 	.word	0x08009f6d
 8009eb0:	08009f6d 	.word	0x08009f6d
 8009eb4:	08009f6d 	.word	0x08009f6d
 8009eb8:	08009f45 	.word	0x08009f45
 8009ebc:	08009f6d 	.word	0x08009f6d
 8009ec0:	08009f6d 	.word	0x08009f6d
 8009ec4:	08009f6d 	.word	0x08009f6d
 8009ec8:	08009f6d 	.word	0x08009f6d
 8009ecc:	08009f6d 	.word	0x08009f6d
 8009ed0:	08009f6d 	.word	0x08009f6d
 8009ed4:	08009f6d 	.word	0x08009f6d
 8009ed8:	08009f4d 	.word	0x08009f4d
 8009edc:	08009f6d 	.word	0x08009f6d
 8009ee0:	08009f6d 	.word	0x08009f6d
 8009ee4:	08009f6d 	.word	0x08009f6d
 8009ee8:	08009f6d 	.word	0x08009f6d
 8009eec:	08009f6d 	.word	0x08009f6d
 8009ef0:	08009f6d 	.word	0x08009f6d
 8009ef4:	08009f6d 	.word	0x08009f6d
 8009ef8:	08009f55 	.word	0x08009f55
 8009efc:	08009f6d 	.word	0x08009f6d
 8009f00:	08009f6d 	.word	0x08009f6d
 8009f04:	08009f6d 	.word	0x08009f6d
 8009f08:	08009f6d 	.word	0x08009f6d
 8009f0c:	08009f6d 	.word	0x08009f6d
 8009f10:	08009f6d 	.word	0x08009f6d
 8009f14:	08009f6d 	.word	0x08009f6d
 8009f18:	08009f5d 	.word	0x08009f5d
 8009f1c:	08009f6d 	.word	0x08009f6d
 8009f20:	08009f6d 	.word	0x08009f6d
 8009f24:	08009f6d 	.word	0x08009f6d
 8009f28:	08009f6d 	.word	0x08009f6d
 8009f2c:	08009f6d 	.word	0x08009f6d
 8009f30:	08009f6d 	.word	0x08009f6d
 8009f34:	08009f6d 	.word	0x08009f6d
 8009f38:	08009f65 	.word	0x08009f65
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f42:	e050      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009f44:	2304      	movs	r3, #4
 8009f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f4a:	e04c      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009f4c:	2308      	movs	r3, #8
 8009f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f52:	e048      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009f54:	2310      	movs	r3, #16
 8009f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f5a:	e044      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009f5c:	2320      	movs	r3, #32
 8009f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f62:	e040      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009f64:	2340      	movs	r3, #64	; 0x40
 8009f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f6a:	e03c      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009f6c:	2380      	movs	r3, #128	; 0x80
 8009f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f72:	e038      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a71      	ldr	r2, [pc, #452]	; (800a140 <UART_SetConfig+0x908>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d130      	bne.n	8009fe0 <UART_SetConfig+0x7a8>
 8009f7e:	4b6f      	ldr	r3, [pc, #444]	; (800a13c <UART_SetConfig+0x904>)
 8009f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f82:	f003 0307 	and.w	r3, r3, #7
 8009f86:	2b05      	cmp	r3, #5
 8009f88:	d826      	bhi.n	8009fd8 <UART_SetConfig+0x7a0>
 8009f8a:	a201      	add	r2, pc, #4	; (adr r2, 8009f90 <UART_SetConfig+0x758>)
 8009f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f90:	08009fa9 	.word	0x08009fa9
 8009f94:	08009fb1 	.word	0x08009fb1
 8009f98:	08009fb9 	.word	0x08009fb9
 8009f9c:	08009fc1 	.word	0x08009fc1
 8009fa0:	08009fc9 	.word	0x08009fc9
 8009fa4:	08009fd1 	.word	0x08009fd1
 8009fa8:	2302      	movs	r3, #2
 8009faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fae:	e01a      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009fb0:	2304      	movs	r3, #4
 8009fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fb6:	e016      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009fb8:	2308      	movs	r3, #8
 8009fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fbe:	e012      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009fc0:	2310      	movs	r3, #16
 8009fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fc6:	e00e      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009fc8:	2320      	movs	r3, #32
 8009fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fce:	e00a      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009fd0:	2340      	movs	r3, #64	; 0x40
 8009fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fd6:	e006      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009fd8:	2380      	movs	r3, #128	; 0x80
 8009fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fde:	e002      	b.n	8009fe6 <UART_SetConfig+0x7ae>
 8009fe0:	2380      	movs	r3, #128	; 0x80
 8009fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a55      	ldr	r2, [pc, #340]	; (800a140 <UART_SetConfig+0x908>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	f040 80f8 	bne.w	800a1e2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ff2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009ff6:	2b20      	cmp	r3, #32
 8009ff8:	dc46      	bgt.n	800a088 <UART_SetConfig+0x850>
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	db75      	blt.n	800a0ea <UART_SetConfig+0x8b2>
 8009ffe:	3b02      	subs	r3, #2
 800a000:	2b1e      	cmp	r3, #30
 800a002:	d872      	bhi.n	800a0ea <UART_SetConfig+0x8b2>
 800a004:	a201      	add	r2, pc, #4	; (adr r2, 800a00c <UART_SetConfig+0x7d4>)
 800a006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00a:	bf00      	nop
 800a00c:	0800a08f 	.word	0x0800a08f
 800a010:	0800a0eb 	.word	0x0800a0eb
 800a014:	0800a097 	.word	0x0800a097
 800a018:	0800a0eb 	.word	0x0800a0eb
 800a01c:	0800a0eb 	.word	0x0800a0eb
 800a020:	0800a0eb 	.word	0x0800a0eb
 800a024:	0800a0a7 	.word	0x0800a0a7
 800a028:	0800a0eb 	.word	0x0800a0eb
 800a02c:	0800a0eb 	.word	0x0800a0eb
 800a030:	0800a0eb 	.word	0x0800a0eb
 800a034:	0800a0eb 	.word	0x0800a0eb
 800a038:	0800a0eb 	.word	0x0800a0eb
 800a03c:	0800a0eb 	.word	0x0800a0eb
 800a040:	0800a0eb 	.word	0x0800a0eb
 800a044:	0800a0b7 	.word	0x0800a0b7
 800a048:	0800a0eb 	.word	0x0800a0eb
 800a04c:	0800a0eb 	.word	0x0800a0eb
 800a050:	0800a0eb 	.word	0x0800a0eb
 800a054:	0800a0eb 	.word	0x0800a0eb
 800a058:	0800a0eb 	.word	0x0800a0eb
 800a05c:	0800a0eb 	.word	0x0800a0eb
 800a060:	0800a0eb 	.word	0x0800a0eb
 800a064:	0800a0eb 	.word	0x0800a0eb
 800a068:	0800a0eb 	.word	0x0800a0eb
 800a06c:	0800a0eb 	.word	0x0800a0eb
 800a070:	0800a0eb 	.word	0x0800a0eb
 800a074:	0800a0eb 	.word	0x0800a0eb
 800a078:	0800a0eb 	.word	0x0800a0eb
 800a07c:	0800a0eb 	.word	0x0800a0eb
 800a080:	0800a0eb 	.word	0x0800a0eb
 800a084:	0800a0dd 	.word	0x0800a0dd
 800a088:	2b40      	cmp	r3, #64	; 0x40
 800a08a:	d02a      	beq.n	800a0e2 <UART_SetConfig+0x8aa>
 800a08c:	e02d      	b.n	800a0ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a08e:	f7fc ff9b 	bl	8006fc8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a092:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a094:	e02f      	b.n	800a0f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fc ffaa 	bl	8006ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0a4:	e027      	b.n	800a0f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0a6:	f107 0318 	add.w	r3, r7, #24
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fd f8f6 	bl	800729c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0b4:	e01f      	b.n	800a0f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0b6:	4b21      	ldr	r3, [pc, #132]	; (800a13c <UART_SetConfig+0x904>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 0320 	and.w	r3, r3, #32
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d009      	beq.n	800a0d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0c2:	4b1e      	ldr	r3, [pc, #120]	; (800a13c <UART_SetConfig+0x904>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	08db      	lsrs	r3, r3, #3
 800a0c8:	f003 0303 	and.w	r3, r3, #3
 800a0cc:	4a1d      	ldr	r2, [pc, #116]	; (800a144 <UART_SetConfig+0x90c>)
 800a0ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0d4:	e00f      	b.n	800a0f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a0d6:	4b1b      	ldr	r3, [pc, #108]	; (800a144 <UART_SetConfig+0x90c>)
 800a0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0da:	e00c      	b.n	800a0f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0dc:	4b1a      	ldr	r3, [pc, #104]	; (800a148 <UART_SetConfig+0x910>)
 800a0de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0e0:	e009      	b.n	800a0f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0e8:	e005      	b.n	800a0f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a0f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 81ee 	beq.w	800a4da <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a102:	4a12      	ldr	r2, [pc, #72]	; (800a14c <UART_SetConfig+0x914>)
 800a104:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a108:	461a      	mov	r2, r3
 800a10a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a10c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a110:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	685a      	ldr	r2, [r3, #4]
 800a116:	4613      	mov	r3, r2
 800a118:	005b      	lsls	r3, r3, #1
 800a11a:	4413      	add	r3, r2
 800a11c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a11e:	429a      	cmp	r2, r3
 800a120:	d305      	bcc.n	800a12e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d910      	bls.n	800a150 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a134:	e1d1      	b.n	800a4da <UART_SetConfig+0xca2>
 800a136:	bf00      	nop
 800a138:	40011c00 	.word	0x40011c00
 800a13c:	58024400 	.word	0x58024400
 800a140:	58000c00 	.word	0x58000c00
 800a144:	03d09000 	.word	0x03d09000
 800a148:	003d0900 	.word	0x003d0900
 800a14c:	0800d408 	.word	0x0800d408
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a152:	2200      	movs	r2, #0
 800a154:	60bb      	str	r3, [r7, #8]
 800a156:	60fa      	str	r2, [r7, #12]
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15c:	4ac0      	ldr	r2, [pc, #768]	; (800a460 <UART_SetConfig+0xc28>)
 800a15e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a162:	b29b      	uxth	r3, r3
 800a164:	2200      	movs	r2, #0
 800a166:	603b      	str	r3, [r7, #0]
 800a168:	607a      	str	r2, [r7, #4]
 800a16a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a16e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a172:	f7f6 f90d 	bl	8000390 <__aeabi_uldivmod>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	4610      	mov	r0, r2
 800a17c:	4619      	mov	r1, r3
 800a17e:	f04f 0200 	mov.w	r2, #0
 800a182:	f04f 0300 	mov.w	r3, #0
 800a186:	020b      	lsls	r3, r1, #8
 800a188:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a18c:	0202      	lsls	r2, r0, #8
 800a18e:	6979      	ldr	r1, [r7, #20]
 800a190:	6849      	ldr	r1, [r1, #4]
 800a192:	0849      	lsrs	r1, r1, #1
 800a194:	2000      	movs	r0, #0
 800a196:	460c      	mov	r4, r1
 800a198:	4605      	mov	r5, r0
 800a19a:	eb12 0804 	adds.w	r8, r2, r4
 800a19e:	eb43 0905 	adc.w	r9, r3, r5
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	469a      	mov	sl, r3
 800a1aa:	4693      	mov	fp, r2
 800a1ac:	4652      	mov	r2, sl
 800a1ae:	465b      	mov	r3, fp
 800a1b0:	4640      	mov	r0, r8
 800a1b2:	4649      	mov	r1, r9
 800a1b4:	f7f6 f8ec 	bl	8000390 <__aeabi_uldivmod>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	4613      	mov	r3, r2
 800a1be:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1c6:	d308      	bcc.n	800a1da <UART_SetConfig+0x9a2>
 800a1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1ce:	d204      	bcs.n	800a1da <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1d6:	60da      	str	r2, [r3, #12]
 800a1d8:	e17f      	b.n	800a4da <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a1e0:	e17b      	b.n	800a4da <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	69db      	ldr	r3, [r3, #28]
 800a1e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1ea:	f040 80bd 	bne.w	800a368 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a1ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a1f2:	2b20      	cmp	r3, #32
 800a1f4:	dc48      	bgt.n	800a288 <UART_SetConfig+0xa50>
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	db7b      	blt.n	800a2f2 <UART_SetConfig+0xaba>
 800a1fa:	2b20      	cmp	r3, #32
 800a1fc:	d879      	bhi.n	800a2f2 <UART_SetConfig+0xaba>
 800a1fe:	a201      	add	r2, pc, #4	; (adr r2, 800a204 <UART_SetConfig+0x9cc>)
 800a200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a204:	0800a28f 	.word	0x0800a28f
 800a208:	0800a297 	.word	0x0800a297
 800a20c:	0800a2f3 	.word	0x0800a2f3
 800a210:	0800a2f3 	.word	0x0800a2f3
 800a214:	0800a29f 	.word	0x0800a29f
 800a218:	0800a2f3 	.word	0x0800a2f3
 800a21c:	0800a2f3 	.word	0x0800a2f3
 800a220:	0800a2f3 	.word	0x0800a2f3
 800a224:	0800a2af 	.word	0x0800a2af
 800a228:	0800a2f3 	.word	0x0800a2f3
 800a22c:	0800a2f3 	.word	0x0800a2f3
 800a230:	0800a2f3 	.word	0x0800a2f3
 800a234:	0800a2f3 	.word	0x0800a2f3
 800a238:	0800a2f3 	.word	0x0800a2f3
 800a23c:	0800a2f3 	.word	0x0800a2f3
 800a240:	0800a2f3 	.word	0x0800a2f3
 800a244:	0800a2bf 	.word	0x0800a2bf
 800a248:	0800a2f3 	.word	0x0800a2f3
 800a24c:	0800a2f3 	.word	0x0800a2f3
 800a250:	0800a2f3 	.word	0x0800a2f3
 800a254:	0800a2f3 	.word	0x0800a2f3
 800a258:	0800a2f3 	.word	0x0800a2f3
 800a25c:	0800a2f3 	.word	0x0800a2f3
 800a260:	0800a2f3 	.word	0x0800a2f3
 800a264:	0800a2f3 	.word	0x0800a2f3
 800a268:	0800a2f3 	.word	0x0800a2f3
 800a26c:	0800a2f3 	.word	0x0800a2f3
 800a270:	0800a2f3 	.word	0x0800a2f3
 800a274:	0800a2f3 	.word	0x0800a2f3
 800a278:	0800a2f3 	.word	0x0800a2f3
 800a27c:	0800a2f3 	.word	0x0800a2f3
 800a280:	0800a2f3 	.word	0x0800a2f3
 800a284:	0800a2e5 	.word	0x0800a2e5
 800a288:	2b40      	cmp	r3, #64	; 0x40
 800a28a:	d02e      	beq.n	800a2ea <UART_SetConfig+0xab2>
 800a28c:	e031      	b.n	800a2f2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a28e:	f7fb fcb1 	bl	8005bf4 <HAL_RCC_GetPCLK1Freq>
 800a292:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a294:	e033      	b.n	800a2fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a296:	f7fb fcc3 	bl	8005c20 <HAL_RCC_GetPCLK2Freq>
 800a29a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a29c:	e02f      	b.n	800a2fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a29e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fc fea6 	bl	8006ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2ac:	e027      	b.n	800a2fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2ae:	f107 0318 	add.w	r3, r7, #24
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fc fff2 	bl	800729c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2bc:	e01f      	b.n	800a2fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2be:	4b69      	ldr	r3, [pc, #420]	; (800a464 <UART_SetConfig+0xc2c>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 0320 	and.w	r3, r3, #32
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d009      	beq.n	800a2de <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2ca:	4b66      	ldr	r3, [pc, #408]	; (800a464 <UART_SetConfig+0xc2c>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	08db      	lsrs	r3, r3, #3
 800a2d0:	f003 0303 	and.w	r3, r3, #3
 800a2d4:	4a64      	ldr	r2, [pc, #400]	; (800a468 <UART_SetConfig+0xc30>)
 800a2d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a2da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2dc:	e00f      	b.n	800a2fe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a2de:	4b62      	ldr	r3, [pc, #392]	; (800a468 <UART_SetConfig+0xc30>)
 800a2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2e2:	e00c      	b.n	800a2fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2e4:	4b61      	ldr	r3, [pc, #388]	; (800a46c <UART_SetConfig+0xc34>)
 800a2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2e8:	e009      	b.n	800a2fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2f0:	e005      	b.n	800a2fe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a2fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a300:	2b00      	cmp	r3, #0
 800a302:	f000 80ea 	beq.w	800a4da <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30a:	4a55      	ldr	r2, [pc, #340]	; (800a460 <UART_SetConfig+0xc28>)
 800a30c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a310:	461a      	mov	r2, r3
 800a312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a314:	fbb3 f3f2 	udiv	r3, r3, r2
 800a318:	005a      	lsls	r2, r3, #1
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	085b      	lsrs	r3, r3, #1
 800a320:	441a      	add	r2, r3
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	fbb2 f3f3 	udiv	r3, r2, r3
 800a32a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32e:	2b0f      	cmp	r3, #15
 800a330:	d916      	bls.n	800a360 <UART_SetConfig+0xb28>
 800a332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a338:	d212      	bcs.n	800a360 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	f023 030f 	bic.w	r3, r3, #15
 800a342:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a346:	085b      	lsrs	r3, r3, #1
 800a348:	b29b      	uxth	r3, r3
 800a34a:	f003 0307 	and.w	r3, r3, #7
 800a34e:	b29a      	uxth	r2, r3
 800a350:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a352:	4313      	orrs	r3, r2
 800a354:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a35c:	60da      	str	r2, [r3, #12]
 800a35e:	e0bc      	b.n	800a4da <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a366:	e0b8      	b.n	800a4da <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a368:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a36c:	2b20      	cmp	r3, #32
 800a36e:	dc4b      	bgt.n	800a408 <UART_SetConfig+0xbd0>
 800a370:	2b00      	cmp	r3, #0
 800a372:	f2c0 8087 	blt.w	800a484 <UART_SetConfig+0xc4c>
 800a376:	2b20      	cmp	r3, #32
 800a378:	f200 8084 	bhi.w	800a484 <UART_SetConfig+0xc4c>
 800a37c:	a201      	add	r2, pc, #4	; (adr r2, 800a384 <UART_SetConfig+0xb4c>)
 800a37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a382:	bf00      	nop
 800a384:	0800a40f 	.word	0x0800a40f
 800a388:	0800a417 	.word	0x0800a417
 800a38c:	0800a485 	.word	0x0800a485
 800a390:	0800a485 	.word	0x0800a485
 800a394:	0800a41f 	.word	0x0800a41f
 800a398:	0800a485 	.word	0x0800a485
 800a39c:	0800a485 	.word	0x0800a485
 800a3a0:	0800a485 	.word	0x0800a485
 800a3a4:	0800a42f 	.word	0x0800a42f
 800a3a8:	0800a485 	.word	0x0800a485
 800a3ac:	0800a485 	.word	0x0800a485
 800a3b0:	0800a485 	.word	0x0800a485
 800a3b4:	0800a485 	.word	0x0800a485
 800a3b8:	0800a485 	.word	0x0800a485
 800a3bc:	0800a485 	.word	0x0800a485
 800a3c0:	0800a485 	.word	0x0800a485
 800a3c4:	0800a43f 	.word	0x0800a43f
 800a3c8:	0800a485 	.word	0x0800a485
 800a3cc:	0800a485 	.word	0x0800a485
 800a3d0:	0800a485 	.word	0x0800a485
 800a3d4:	0800a485 	.word	0x0800a485
 800a3d8:	0800a485 	.word	0x0800a485
 800a3dc:	0800a485 	.word	0x0800a485
 800a3e0:	0800a485 	.word	0x0800a485
 800a3e4:	0800a485 	.word	0x0800a485
 800a3e8:	0800a485 	.word	0x0800a485
 800a3ec:	0800a485 	.word	0x0800a485
 800a3f0:	0800a485 	.word	0x0800a485
 800a3f4:	0800a485 	.word	0x0800a485
 800a3f8:	0800a485 	.word	0x0800a485
 800a3fc:	0800a485 	.word	0x0800a485
 800a400:	0800a485 	.word	0x0800a485
 800a404:	0800a477 	.word	0x0800a477
 800a408:	2b40      	cmp	r3, #64	; 0x40
 800a40a:	d037      	beq.n	800a47c <UART_SetConfig+0xc44>
 800a40c:	e03a      	b.n	800a484 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a40e:	f7fb fbf1 	bl	8005bf4 <HAL_RCC_GetPCLK1Freq>
 800a412:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a414:	e03c      	b.n	800a490 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a416:	f7fb fc03 	bl	8005c20 <HAL_RCC_GetPCLK2Freq>
 800a41a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a41c:	e038      	b.n	800a490 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a41e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a422:	4618      	mov	r0, r3
 800a424:	f7fc fde6 	bl	8006ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a42c:	e030      	b.n	800a490 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a42e:	f107 0318 	add.w	r3, r7, #24
 800a432:	4618      	mov	r0, r3
 800a434:	f7fc ff32 	bl	800729c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a43c:	e028      	b.n	800a490 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a43e:	4b09      	ldr	r3, [pc, #36]	; (800a464 <UART_SetConfig+0xc2c>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f003 0320 	and.w	r3, r3, #32
 800a446:	2b00      	cmp	r3, #0
 800a448:	d012      	beq.n	800a470 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a44a:	4b06      	ldr	r3, [pc, #24]	; (800a464 <UART_SetConfig+0xc2c>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	08db      	lsrs	r3, r3, #3
 800a450:	f003 0303 	and.w	r3, r3, #3
 800a454:	4a04      	ldr	r2, [pc, #16]	; (800a468 <UART_SetConfig+0xc30>)
 800a456:	fa22 f303 	lsr.w	r3, r2, r3
 800a45a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a45c:	e018      	b.n	800a490 <UART_SetConfig+0xc58>
 800a45e:	bf00      	nop
 800a460:	0800d408 	.word	0x0800d408
 800a464:	58024400 	.word	0x58024400
 800a468:	03d09000 	.word	0x03d09000
 800a46c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a470:	4b24      	ldr	r3, [pc, #144]	; (800a504 <UART_SetConfig+0xccc>)
 800a472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a474:	e00c      	b.n	800a490 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a476:	4b24      	ldr	r3, [pc, #144]	; (800a508 <UART_SetConfig+0xcd0>)
 800a478:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a47a:	e009      	b.n	800a490 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a47c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a480:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a482:	e005      	b.n	800a490 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a484:	2300      	movs	r3, #0
 800a486:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a48e:	bf00      	nop
    }

    if (pclk != 0U)
 800a490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a492:	2b00      	cmp	r3, #0
 800a494:	d021      	beq.n	800a4da <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49a:	4a1c      	ldr	r2, [pc, #112]	; (800a50c <UART_SetConfig+0xcd4>)
 800a49c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4a4:	fbb3 f2f2 	udiv	r2, r3, r2
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	085b      	lsrs	r3, r3, #1
 800a4ae:	441a      	add	r2, r3
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4b8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4bc:	2b0f      	cmp	r3, #15
 800a4be:	d909      	bls.n	800a4d4 <UART_SetConfig+0xc9c>
 800a4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4c6:	d205      	bcs.n	800a4d4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	60da      	str	r2, [r3, #12]
 800a4d2:	e002      	b.n	800a4da <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	2201      	movs	r2, #1
 800a4de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a4f6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3748      	adds	r7, #72	; 0x48
 800a4fe:	46bd      	mov	sp, r7
 800a500:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a504:	03d09000 	.word	0x03d09000
 800a508:	003d0900 	.word	0x003d0900
 800a50c:	0800d408 	.word	0x0800d408

0800a510 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51c:	f003 0301 	and.w	r3, r3, #1
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00a      	beq.n	800a53a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	430a      	orrs	r2, r1
 800a538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a53e:	f003 0302 	and.w	r3, r3, #2
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00a      	beq.n	800a55c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	430a      	orrs	r2, r1
 800a55a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a560:	f003 0304 	and.w	r3, r3, #4
 800a564:	2b00      	cmp	r3, #0
 800a566:	d00a      	beq.n	800a57e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	430a      	orrs	r2, r1
 800a57c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a582:	f003 0308 	and.w	r3, r3, #8
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00a      	beq.n	800a5a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	430a      	orrs	r2, r1
 800a59e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a4:	f003 0310 	and.w	r3, r3, #16
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00a      	beq.n	800a5c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	430a      	orrs	r2, r1
 800a5c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c6:	f003 0320 	and.w	r3, r3, #32
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00a      	beq.n	800a5e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	430a      	orrs	r2, r1
 800a5e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d01a      	beq.n	800a626 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	430a      	orrs	r2, r1
 800a604:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a60a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a60e:	d10a      	bne.n	800a626 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	430a      	orrs	r2, r1
 800a624:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00a      	beq.n	800a648 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	430a      	orrs	r2, r1
 800a646:	605a      	str	r2, [r3, #4]
  }
}
 800a648:	bf00      	nop
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b098      	sub	sp, #96	; 0x60
 800a658:	af02      	add	r7, sp, #8
 800a65a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a664:	f7f7 fd3e 	bl	80020e4 <HAL_GetTick>
 800a668:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 0308 	and.w	r3, r3, #8
 800a674:	2b08      	cmp	r3, #8
 800a676:	d12f      	bne.n	800a6d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a678:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a67c:	9300      	str	r3, [sp, #0]
 800a67e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a680:	2200      	movs	r2, #0
 800a682:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f88e 	bl	800a7a8 <UART_WaitOnFlagUntilTimeout>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d022      	beq.n	800a6d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69a:	e853 3f00 	ldrex	r3, [r3]
 800a69e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6a6:	653b      	str	r3, [r7, #80]	; 0x50
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6b0:	647b      	str	r3, [r7, #68]	; 0x44
 800a6b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a6b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6b8:	e841 2300 	strex	r3, r2, [r1]
 800a6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1e6      	bne.n	800a692 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2220      	movs	r2, #32
 800a6c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	e063      	b.n	800a7a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f003 0304 	and.w	r3, r3, #4
 800a6e2:	2b04      	cmp	r3, #4
 800a6e4:	d149      	bne.n	800a77a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f857 	bl	800a7a8 <UART_WaitOnFlagUntilTimeout>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d03c      	beq.n	800a77a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a708:	e853 3f00 	ldrex	r3, [r3]
 800a70c:	623b      	str	r3, [r7, #32]
   return(result);
 800a70e:	6a3b      	ldr	r3, [r7, #32]
 800a710:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a714:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	461a      	mov	r2, r3
 800a71c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a71e:	633b      	str	r3, [r7, #48]	; 0x30
 800a720:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a726:	e841 2300 	strex	r3, r2, [r1]
 800a72a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1e6      	bne.n	800a700 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	3308      	adds	r3, #8
 800a738:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	e853 3f00 	ldrex	r3, [r3]
 800a740:	60fb      	str	r3, [r7, #12]
   return(result);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f023 0301 	bic.w	r3, r3, #1
 800a748:	64bb      	str	r3, [r7, #72]	; 0x48
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	3308      	adds	r3, #8
 800a750:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a752:	61fa      	str	r2, [r7, #28]
 800a754:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a756:	69b9      	ldr	r1, [r7, #24]
 800a758:	69fa      	ldr	r2, [r7, #28]
 800a75a:	e841 2300 	strex	r3, r2, [r1]
 800a75e:	617b      	str	r3, [r7, #20]
   return(result);
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d1e5      	bne.n	800a732 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2220      	movs	r2, #32
 800a76a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a776:	2303      	movs	r3, #3
 800a778:	e012      	b.n	800a7a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2220      	movs	r2, #32
 800a77e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2220      	movs	r2, #32
 800a786:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3758      	adds	r7, #88	; 0x58
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	603b      	str	r3, [r7, #0]
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7b8:	e049      	b.n	800a84e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7c0:	d045      	beq.n	800a84e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7c2:	f7f7 fc8f 	bl	80020e4 <HAL_GetTick>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	1ad3      	subs	r3, r2, r3
 800a7cc:	69ba      	ldr	r2, [r7, #24]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d302      	bcc.n	800a7d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d101      	bne.n	800a7dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a7d8:	2303      	movs	r3, #3
 800a7da:	e048      	b.n	800a86e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 0304 	and.w	r3, r3, #4
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d031      	beq.n	800a84e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	69db      	ldr	r3, [r3, #28]
 800a7f0:	f003 0308 	and.w	r3, r3, #8
 800a7f4:	2b08      	cmp	r3, #8
 800a7f6:	d110      	bne.n	800a81a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2208      	movs	r2, #8
 800a7fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f000 f95b 	bl	800aabc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2208      	movs	r2, #8
 800a80a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2200      	movs	r2, #0
 800a812:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	e029      	b.n	800a86e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	69db      	ldr	r3, [r3, #28]
 800a820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a828:	d111      	bne.n	800a84e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a832:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f000 f941 	bl	800aabc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2220      	movs	r2, #32
 800a83e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2200      	movs	r2, #0
 800a846:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a84a:	2303      	movs	r3, #3
 800a84c:	e00f      	b.n	800a86e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	69da      	ldr	r2, [r3, #28]
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	4013      	ands	r3, r2
 800a858:	68ba      	ldr	r2, [r7, #8]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	bf0c      	ite	eq
 800a85e:	2301      	moveq	r3, #1
 800a860:	2300      	movne	r3, #0
 800a862:	b2db      	uxtb	r3, r3
 800a864:	461a      	mov	r2, r3
 800a866:	79fb      	ldrb	r3, [r7, #7]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d0a6      	beq.n	800a7ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
	...

0800a878 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a878:	b480      	push	{r7}
 800a87a:	b0a3      	sub	sp, #140	; 0x8c
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	4613      	mov	r3, r2
 800a884:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	88fa      	ldrh	r2, [r7, #6]
 800a890:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	88fa      	ldrh	r2, [r7, #6]
 800a898:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8aa:	d10e      	bne.n	800a8ca <UART_Start_Receive_IT+0x52>
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d105      	bne.n	800a8c0 <UART_Start_Receive_IT+0x48>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a8ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a8be:	e02d      	b.n	800a91c <UART_Start_Receive_IT+0xa4>
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	22ff      	movs	r2, #255	; 0xff
 800a8c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a8c8:	e028      	b.n	800a91c <UART_Start_Receive_IT+0xa4>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d10d      	bne.n	800a8ee <UART_Start_Receive_IT+0x76>
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d104      	bne.n	800a8e4 <UART_Start_Receive_IT+0x6c>
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	22ff      	movs	r2, #255	; 0xff
 800a8de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a8e2:	e01b      	b.n	800a91c <UART_Start_Receive_IT+0xa4>
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	227f      	movs	r2, #127	; 0x7f
 800a8e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a8ec:	e016      	b.n	800a91c <UART_Start_Receive_IT+0xa4>
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8f6:	d10d      	bne.n	800a914 <UART_Start_Receive_IT+0x9c>
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d104      	bne.n	800a90a <UART_Start_Receive_IT+0x92>
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	227f      	movs	r2, #127	; 0x7f
 800a904:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a908:	e008      	b.n	800a91c <UART_Start_Receive_IT+0xa4>
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	223f      	movs	r2, #63	; 0x3f
 800a90e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a912:	e003      	b.n	800a91c <UART_Start_Receive_IT+0xa4>
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2200      	movs	r2, #0
 800a918:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2200      	movs	r2, #0
 800a920:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2222      	movs	r2, #34	; 0x22
 800a928:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	3308      	adds	r3, #8
 800a932:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a936:	e853 3f00 	ldrex	r3, [r3]
 800a93a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a93c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a93e:	f043 0301 	orr.w	r3, r3, #1
 800a942:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3308      	adds	r3, #8
 800a94c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a950:	673a      	str	r2, [r7, #112]	; 0x70
 800a952:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a954:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a956:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a958:	e841 2300 	strex	r3, r2, [r1]
 800a95c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a95e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1e3      	bne.n	800a92c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a96c:	d14f      	bne.n	800aa0e <UART_Start_Receive_IT+0x196>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a974:	88fa      	ldrh	r2, [r7, #6]
 800a976:	429a      	cmp	r2, r3
 800a978:	d349      	bcc.n	800aa0e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a982:	d107      	bne.n	800a994 <UART_Start_Receive_IT+0x11c>
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d103      	bne.n	800a994 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	4a47      	ldr	r2, [pc, #284]	; (800aaac <UART_Start_Receive_IT+0x234>)
 800a990:	675a      	str	r2, [r3, #116]	; 0x74
 800a992:	e002      	b.n	800a99a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	4a46      	ldr	r2, [pc, #280]	; (800aab0 <UART_Start_Receive_IT+0x238>)
 800a998:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d01a      	beq.n	800a9d8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9aa:	e853 3f00 	ldrex	r3, [r3]
 800a9ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a9b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	461a      	mov	r2, r3
 800a9c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a9c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9c6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9cc:	e841 2300 	strex	r3, r2, [r1]
 800a9d0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a9d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1e4      	bne.n	800a9a2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	3308      	adds	r3, #8
 800a9de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9e2:	e853 3f00 	ldrex	r3, [r3]
 800a9e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	3308      	adds	r3, #8
 800a9f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a9f8:	64ba      	str	r2, [r7, #72]	; 0x48
 800a9fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a9fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa00:	e841 2300 	strex	r3, r2, [r1]
 800aa04:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aa06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1e5      	bne.n	800a9d8 <UART_Start_Receive_IT+0x160>
 800aa0c:	e046      	b.n	800aa9c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa16:	d107      	bne.n	800aa28 <UART_Start_Receive_IT+0x1b0>
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d103      	bne.n	800aa28 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	4a24      	ldr	r2, [pc, #144]	; (800aab4 <UART_Start_Receive_IT+0x23c>)
 800aa24:	675a      	str	r2, [r3, #116]	; 0x74
 800aa26:	e002      	b.n	800aa2e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	4a23      	ldr	r2, [pc, #140]	; (800aab8 <UART_Start_Receive_IT+0x240>)
 800aa2c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d019      	beq.n	800aa6a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3e:	e853 3f00 	ldrex	r3, [r3]
 800aa42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa46:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800aa4a:	677b      	str	r3, [r7, #116]	; 0x74
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	461a      	mov	r2, r3
 800aa52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa54:	637b      	str	r3, [r7, #52]	; 0x34
 800aa56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa5c:	e841 2300 	strex	r3, r2, [r1]
 800aa60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d1e6      	bne.n	800aa36 <UART_Start_Receive_IT+0x1be>
 800aa68:	e018      	b.n	800aa9c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	e853 3f00 	ldrex	r3, [r3]
 800aa76:	613b      	str	r3, [r7, #16]
   return(result);
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	f043 0320 	orr.w	r3, r3, #32
 800aa7e:	67bb      	str	r3, [r7, #120]	; 0x78
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	461a      	mov	r2, r3
 800aa86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa88:	623b      	str	r3, [r7, #32]
 800aa8a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8c:	69f9      	ldr	r1, [r7, #28]
 800aa8e:	6a3a      	ldr	r2, [r7, #32]
 800aa90:	e841 2300 	strex	r3, r2, [r1]
 800aa94:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa96:	69bb      	ldr	r3, [r7, #24]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1e6      	bne.n	800aa6a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	378c      	adds	r7, #140	; 0x8c
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	0800b621 	.word	0x0800b621
 800aab0:	0800b2c1 	.word	0x0800b2c1
 800aab4:	0800b109 	.word	0x0800b109
 800aab8:	0800af51 	.word	0x0800af51

0800aabc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b095      	sub	sp, #84	; 0x54
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aacc:	e853 3f00 	ldrex	r3, [r3]
 800aad0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aad8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	461a      	mov	r2, r3
 800aae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aae2:	643b      	str	r3, [r7, #64]	; 0x40
 800aae4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aae8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aaea:	e841 2300 	strex	r3, r2, [r1]
 800aaee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aaf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d1e6      	bne.n	800aac4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	3308      	adds	r3, #8
 800aafc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafe:	6a3b      	ldr	r3, [r7, #32]
 800ab00:	e853 3f00 	ldrex	r3, [r3]
 800ab04:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab06:	69fa      	ldr	r2, [r7, #28]
 800ab08:	4b1e      	ldr	r3, [pc, #120]	; (800ab84 <UART_EndRxTransfer+0xc8>)
 800ab0a:	4013      	ands	r3, r2
 800ab0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	3308      	adds	r3, #8
 800ab14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab16:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ab18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab1e:	e841 2300 	strex	r3, r2, [r1]
 800ab22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1e5      	bne.n	800aaf6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d118      	bne.n	800ab64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	e853 3f00 	ldrex	r3, [r3]
 800ab3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	f023 0310 	bic.w	r3, r3, #16
 800ab46:	647b      	str	r3, [r7, #68]	; 0x44
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab50:	61bb      	str	r3, [r7, #24]
 800ab52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab54:	6979      	ldr	r1, [r7, #20]
 800ab56:	69ba      	ldr	r2, [r7, #24]
 800ab58:	e841 2300 	strex	r3, r2, [r1]
 800ab5c:	613b      	str	r3, [r7, #16]
   return(result);
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d1e6      	bne.n	800ab32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2220      	movs	r2, #32
 800ab68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ab78:	bf00      	nop
 800ab7a:	3754      	adds	r7, #84	; 0x54
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr
 800ab84:	effffffe 	.word	0xeffffffe

0800ab88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aba6:	68f8      	ldr	r0, [r7, #12]
 800aba8:	f7fe fe30 	bl	800980c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abac:	bf00      	nop
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b08f      	sub	sp, #60	; 0x3c
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abc2:	2b21      	cmp	r3, #33	; 0x21
 800abc4:	d14c      	bne.n	800ac60 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800abcc:	b29b      	uxth	r3, r3
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d132      	bne.n	800ac38 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd8:	6a3b      	ldr	r3, [r7, #32]
 800abda:	e853 3f00 	ldrex	r3, [r3]
 800abde:	61fb      	str	r3, [r7, #28]
   return(result);
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abe6:	637b      	str	r3, [r7, #52]	; 0x34
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	461a      	mov	r2, r3
 800abee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abf2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abf8:	e841 2300 	strex	r3, r2, [r1]
 800abfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d1e6      	bne.n	800abd2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	e853 3f00 	ldrex	r3, [r3]
 800ac10:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac18:	633b      	str	r3, [r7, #48]	; 0x30
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	461a      	mov	r2, r3
 800ac20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac22:	61bb      	str	r3, [r7, #24]
 800ac24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac26:	6979      	ldr	r1, [r7, #20]
 800ac28:	69ba      	ldr	r2, [r7, #24]
 800ac2a:	e841 2300 	strex	r3, r2, [r1]
 800ac2e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d1e6      	bne.n	800ac04 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800ac36:	e013      	b.n	800ac60 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac3c:	781a      	ldrb	r2, [r3, #0]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac48:	1c5a      	adds	r2, r3, #1
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	3b01      	subs	r3, #1
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800ac60:	bf00      	nop
 800ac62:	373c      	adds	r7, #60	; 0x3c
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b091      	sub	sp, #68	; 0x44
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac7a:	2b21      	cmp	r3, #33	; 0x21
 800ac7c:	d151      	bne.n	800ad22 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d132      	bne.n	800acf0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	e853 3f00 	ldrex	r3, [r3]
 800ac96:	623b      	str	r3, [r7, #32]
   return(result);
 800ac98:	6a3b      	ldr	r3, [r7, #32]
 800ac9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac9e:	63bb      	str	r3, [r7, #56]	; 0x38
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	461a      	mov	r2, r3
 800aca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca8:	633b      	str	r3, [r7, #48]	; 0x30
 800acaa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800acae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acb0:	e841 2300 	strex	r3, r2, [r1]
 800acb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800acb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1e6      	bne.n	800ac8a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	e853 3f00 	ldrex	r3, [r3]
 800acc8:	60fb      	str	r3, [r7, #12]
   return(result);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acd0:	637b      	str	r3, [r7, #52]	; 0x34
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	461a      	mov	r2, r3
 800acd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acda:	61fb      	str	r3, [r7, #28]
 800acdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acde:	69b9      	ldr	r1, [r7, #24]
 800ace0:	69fa      	ldr	r2, [r7, #28]
 800ace2:	e841 2300 	strex	r3, r2, [r1]
 800ace6:	617b      	str	r3, [r7, #20]
   return(result);
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d1e6      	bne.n	800acbc <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800acee:	e018      	b.n	800ad22 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acf4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800acf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf8:	881b      	ldrh	r3, [r3, #0]
 800acfa:	461a      	mov	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad04:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad0a:	1c9a      	adds	r2, r3, #2
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	b29a      	uxth	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800ad22:	bf00      	nop
 800ad24:	3744      	adds	r7, #68	; 0x44
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr

0800ad2e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b091      	sub	sp, #68	; 0x44
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad3c:	2b21      	cmp	r3, #33	; 0x21
 800ad3e:	d160      	bne.n	800ae02 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ad46:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ad48:	e057      	b.n	800adfa <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d133      	bne.n	800adbe <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	3308      	adds	r3, #8
 800ad5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad60:	e853 3f00 	ldrex	r3, [r3]
 800ad64:	623b      	str	r3, [r7, #32]
   return(result);
 800ad66:	6a3b      	ldr	r3, [r7, #32]
 800ad68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ad6c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	3308      	adds	r3, #8
 800ad74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad76:	633a      	str	r2, [r7, #48]	; 0x30
 800ad78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad7e:	e841 2300 	strex	r3, r2, [r1]
 800ad82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1e5      	bne.n	800ad56 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	e853 3f00 	ldrex	r3, [r3]
 800ad96:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad9e:	637b      	str	r3, [r7, #52]	; 0x34
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	461a      	mov	r2, r3
 800ada6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada8:	61fb      	str	r3, [r7, #28]
 800adaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adac:	69b9      	ldr	r1, [r7, #24]
 800adae:	69fa      	ldr	r2, [r7, #28]
 800adb0:	e841 2300 	strex	r3, r2, [r1]
 800adb4:	617b      	str	r3, [r7, #20]
   return(result);
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1e6      	bne.n	800ad8a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800adbc:	e021      	b.n	800ae02 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	69db      	ldr	r3, [r3, #28]
 800adc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d013      	beq.n	800adf4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800add0:	781a      	ldrb	r2, [r3, #0]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800addc:	1c5a      	adds	r2, r3, #1
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ade8:	b29b      	uxth	r3, r3
 800adea:	3b01      	subs	r3, #1
 800adec:	b29a      	uxth	r2, r3
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800adf4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800adf6:	3b01      	subs	r3, #1
 800adf8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800adfa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1a4      	bne.n	800ad4a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800ae00:	e7ff      	b.n	800ae02 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800ae02:	bf00      	nop
 800ae04:	3744      	adds	r7, #68	; 0x44
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr

0800ae0e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ae0e:	b480      	push	{r7}
 800ae10:	b091      	sub	sp, #68	; 0x44
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae1c:	2b21      	cmp	r3, #33	; 0x21
 800ae1e:	d165      	bne.n	800aeec <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae26:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ae28:	e05c      	b.n	800aee4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d133      	bne.n	800ae9e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	3308      	adds	r3, #8
 800ae3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3e:	6a3b      	ldr	r3, [r7, #32]
 800ae40:	e853 3f00 	ldrex	r3, [r3]
 800ae44:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ae4c:	637b      	str	r3, [r7, #52]	; 0x34
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	3308      	adds	r3, #8
 800ae54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae56:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae5e:	e841 2300 	strex	r3, r2, [r1]
 800ae62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1e5      	bne.n	800ae36 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	e853 3f00 	ldrex	r3, [r3]
 800ae76:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae7e:	633b      	str	r3, [r7, #48]	; 0x30
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	461a      	mov	r2, r3
 800ae86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae88:	61bb      	str	r3, [r7, #24]
 800ae8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8c:	6979      	ldr	r1, [r7, #20]
 800ae8e:	69ba      	ldr	r2, [r7, #24]
 800ae90:	e841 2300 	strex	r3, r2, [r1]
 800ae94:	613b      	str	r3, [r7, #16]
   return(result);
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1e6      	bne.n	800ae6a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ae9c:	e026      	b.n	800aeec <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	69db      	ldr	r3, [r3, #28]
 800aea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d018      	beq.n	800aede <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeb0:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb4:	881b      	ldrh	r3, [r3, #0]
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aec0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aec6:	1c9a      	adds	r2, r3, #2
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	3b01      	subs	r3, #1
 800aed6:	b29a      	uxth	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800aede:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aee0:	3b01      	subs	r3, #1
 800aee2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800aee4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d19f      	bne.n	800ae2a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800aeea:	e7ff      	b.n	800aeec <UART_TxISR_16BIT_FIFOEN+0xde>
 800aeec:	bf00      	nop
 800aeee:	3744      	adds	r7, #68	; 0x44
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b088      	sub	sp, #32
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	e853 3f00 	ldrex	r3, [r3]
 800af0c:	60bb      	str	r3, [r7, #8]
   return(result);
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af14:	61fb      	str	r3, [r7, #28]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	461a      	mov	r2, r3
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	61bb      	str	r3, [r7, #24]
 800af20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af22:	6979      	ldr	r1, [r7, #20]
 800af24:	69ba      	ldr	r2, [r7, #24]
 800af26:	e841 2300 	strex	r3, r2, [r1]
 800af2a:	613b      	str	r3, [r7, #16]
   return(result);
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1e6      	bne.n	800af00 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2220      	movs	r2, #32
 800af36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2200      	movs	r2, #0
 800af3e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f7fe fc59 	bl	80097f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af46:	bf00      	nop
 800af48:	3720      	adds	r7, #32
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
	...

0800af50 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b09c      	sub	sp, #112	; 0x70
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800af5e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af68:	2b22      	cmp	r3, #34	; 0x22
 800af6a:	f040 80be 	bne.w	800b0ea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af74:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800af78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800af7c:	b2d9      	uxtb	r1, r3
 800af7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800af82:	b2da      	uxtb	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af88:	400a      	ands	r2, r1
 800af8a:	b2d2      	uxtb	r2, r2
 800af8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af92:	1c5a      	adds	r2, r3, #1
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	3b01      	subs	r3, #1
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	f040 80a1 	bne.w	800b0fa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afc0:	e853 3f00 	ldrex	r3, [r3]
 800afc4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800afc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afcc:	66bb      	str	r3, [r7, #104]	; 0x68
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	461a      	mov	r2, r3
 800afd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800afd6:	65bb      	str	r3, [r7, #88]	; 0x58
 800afd8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800afdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800afde:	e841 2300 	strex	r3, r2, [r1]
 800afe2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800afe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1e6      	bne.n	800afb8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	3308      	adds	r3, #8
 800aff0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff4:	e853 3f00 	ldrex	r3, [r3]
 800aff8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800affa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800affc:	f023 0301 	bic.w	r3, r3, #1
 800b000:	667b      	str	r3, [r7, #100]	; 0x64
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	3308      	adds	r3, #8
 800b008:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b00a:	647a      	str	r2, [r7, #68]	; 0x44
 800b00c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b010:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b012:	e841 2300 	strex	r3, r2, [r1]
 800b016:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d1e5      	bne.n	800afea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2220      	movs	r2, #32
 800b022:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a33      	ldr	r2, [pc, #204]	; (800b104 <UART_RxISR_8BIT+0x1b4>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d01f      	beq.n	800b07c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b046:	2b00      	cmp	r3, #0
 800b048:	d018      	beq.n	800b07c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	e853 3f00 	ldrex	r3, [r3]
 800b056:	623b      	str	r3, [r7, #32]
   return(result);
 800b058:	6a3b      	ldr	r3, [r7, #32]
 800b05a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b05e:	663b      	str	r3, [r7, #96]	; 0x60
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	461a      	mov	r2, r3
 800b066:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b068:	633b      	str	r3, [r7, #48]	; 0x30
 800b06a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b06e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b070:	e841 2300 	strex	r3, r2, [r1]
 800b074:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1e6      	bne.n	800b04a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b080:	2b01      	cmp	r3, #1
 800b082:	d12e      	bne.n	800b0e2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	e853 3f00 	ldrex	r3, [r3]
 800b096:	60fb      	str	r3, [r7, #12]
   return(result);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f023 0310 	bic.w	r3, r3, #16
 800b09e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0a8:	61fb      	str	r3, [r7, #28]
 800b0aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ac:	69b9      	ldr	r1, [r7, #24]
 800b0ae:	69fa      	ldr	r2, [r7, #28]
 800b0b0:	e841 2300 	strex	r3, r2, [r1]
 800b0b4:	617b      	str	r3, [r7, #20]
   return(result);
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1e6      	bne.n	800b08a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	69db      	ldr	r3, [r3, #28]
 800b0c2:	f003 0310 	and.w	r3, r3, #16
 800b0c6:	2b10      	cmp	r3, #16
 800b0c8:	d103      	bne.n	800b0d2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2210      	movs	r2, #16
 800b0d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b0d8:	4619      	mov	r1, r3
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f7fe fba0 	bl	8009820 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b0e0:	e00b      	b.n	800b0fa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f7f6 ff30 	bl	8001f48 <HAL_UART_RxCpltCallback>
}
 800b0e8:	e007      	b.n	800b0fa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	699a      	ldr	r2, [r3, #24]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f042 0208 	orr.w	r2, r2, #8
 800b0f8:	619a      	str	r2, [r3, #24]
}
 800b0fa:	bf00      	nop
 800b0fc:	3770      	adds	r7, #112	; 0x70
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	58000c00 	.word	0x58000c00

0800b108 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b09c      	sub	sp, #112	; 0x70
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b116:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b120:	2b22      	cmp	r3, #34	; 0x22
 800b122:	f040 80be 	bne.w	800b2a2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b134:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b136:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800b13a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b13e:	4013      	ands	r3, r2
 800b140:	b29a      	uxth	r2, r3
 800b142:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b144:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b14a:	1c9a      	adds	r2, r3, #2
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b156:	b29b      	uxth	r3, r3
 800b158:	3b01      	subs	r3, #1
 800b15a:	b29a      	uxth	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b168:	b29b      	uxth	r3, r3
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	f040 80a1 	bne.w	800b2b2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b178:	e853 3f00 	ldrex	r3, [r3]
 800b17c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b17e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b180:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b184:	667b      	str	r3, [r7, #100]	; 0x64
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	461a      	mov	r2, r3
 800b18c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b18e:	657b      	str	r3, [r7, #84]	; 0x54
 800b190:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b192:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b194:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b196:	e841 2300 	strex	r3, r2, [r1]
 800b19a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b19c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d1e6      	bne.n	800b170 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	3308      	adds	r3, #8
 800b1a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ac:	e853 3f00 	ldrex	r3, [r3]
 800b1b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b4:	f023 0301 	bic.w	r3, r3, #1
 800b1b8:	663b      	str	r3, [r7, #96]	; 0x60
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	3308      	adds	r3, #8
 800b1c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b1c2:	643a      	str	r2, [r7, #64]	; 0x40
 800b1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b1c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1ca:	e841 2300 	strex	r3, r2, [r1]
 800b1ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d1e5      	bne.n	800b1a2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2220      	movs	r2, #32
 800b1da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a33      	ldr	r2, [pc, #204]	; (800b2bc <UART_RxISR_16BIT+0x1b4>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d01f      	beq.n	800b234 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d018      	beq.n	800b234 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	e853 3f00 	ldrex	r3, [r3]
 800b20e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b216:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	461a      	mov	r2, r3
 800b21e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b220:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b222:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b228:	e841 2300 	strex	r3, r2, [r1]
 800b22c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1e6      	bne.n	800b202 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d12e      	bne.n	800b29a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	e853 3f00 	ldrex	r3, [r3]
 800b24e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	f023 0310 	bic.w	r3, r3, #16
 800b256:	65bb      	str	r3, [r7, #88]	; 0x58
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	461a      	mov	r2, r3
 800b25e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b260:	61bb      	str	r3, [r7, #24]
 800b262:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b264:	6979      	ldr	r1, [r7, #20]
 800b266:	69ba      	ldr	r2, [r7, #24]
 800b268:	e841 2300 	strex	r3, r2, [r1]
 800b26c:	613b      	str	r3, [r7, #16]
   return(result);
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d1e6      	bne.n	800b242 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	69db      	ldr	r3, [r3, #28]
 800b27a:	f003 0310 	and.w	r3, r3, #16
 800b27e:	2b10      	cmp	r3, #16
 800b280:	d103      	bne.n	800b28a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2210      	movs	r2, #16
 800b288:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b290:	4619      	mov	r1, r3
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f7fe fac4 	bl	8009820 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b298:	e00b      	b.n	800b2b2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f7f6 fe54 	bl	8001f48 <HAL_UART_RxCpltCallback>
}
 800b2a0:	e007      	b.n	800b2b2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	699a      	ldr	r2, [r3, #24]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f042 0208 	orr.w	r2, r2, #8
 800b2b0:	619a      	str	r2, [r3, #24]
}
 800b2b2:	bf00      	nop
 800b2b4:	3770      	adds	r7, #112	; 0x70
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	58000c00 	.word	0x58000c00

0800b2c0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b0ac      	sub	sp, #176	; 0xb0
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b2ce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	69db      	ldr	r3, [r3, #28]
 800b2d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2f6:	2b22      	cmp	r3, #34	; 0x22
 800b2f8:	f040 8180 	bne.w	800b5fc <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b302:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b306:	e123      	b.n	800b550 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b312:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b316:	b2d9      	uxtb	r1, r3
 800b318:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b31c:	b2da      	uxtb	r2, r3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b322:	400a      	ands	r2, r1
 800b324:	b2d2      	uxtb	r2, r2
 800b326:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b32c:	1c5a      	adds	r2, r3, #1
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b338:	b29b      	uxth	r3, r3
 800b33a:	3b01      	subs	r3, #1
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	69db      	ldr	r3, [r3, #28]
 800b34a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b34e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b352:	f003 0307 	and.w	r3, r3, #7
 800b356:	2b00      	cmp	r3, #0
 800b358:	d053      	beq.n	800b402 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b35a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b35e:	f003 0301 	and.w	r3, r3, #1
 800b362:	2b00      	cmp	r3, #0
 800b364:	d011      	beq.n	800b38a <UART_RxISR_8BIT_FIFOEN+0xca>
 800b366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b36a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00b      	beq.n	800b38a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2201      	movs	r2, #1
 800b378:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b380:	f043 0201 	orr.w	r2, r3, #1
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b38a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b38e:	f003 0302 	and.w	r3, r3, #2
 800b392:	2b00      	cmp	r3, #0
 800b394:	d011      	beq.n	800b3ba <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b39a:	f003 0301 	and.w	r3, r3, #1
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00b      	beq.n	800b3ba <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2202      	movs	r2, #2
 800b3a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3b0:	f043 0204 	orr.w	r2, r3, #4
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b3ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3be:	f003 0304 	and.w	r3, r3, #4
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d011      	beq.n	800b3ea <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b3c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b3ca:	f003 0301 	and.w	r3, r3, #1
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00b      	beq.n	800b3ea <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2204      	movs	r2, #4
 800b3d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3e0:	f043 0202 	orr.w	r2, r3, #2
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d006      	beq.n	800b402 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f7fe fa09 	bl	800980c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b408:	b29b      	uxth	r3, r3
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f040 80a0 	bne.w	800b550 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b416:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b418:	e853 3f00 	ldrex	r3, [r3]
 800b41c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800b41e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b424:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	461a      	mov	r2, r3
 800b42e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b432:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b434:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b436:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b438:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b43a:	e841 2300 	strex	r3, r2, [r1]
 800b43e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800b440:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b442:	2b00      	cmp	r3, #0
 800b444:	d1e4      	bne.n	800b410 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	3308      	adds	r3, #8
 800b44c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b44e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b450:	e853 3f00 	ldrex	r3, [r3]
 800b454:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b456:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b458:	4b6e      	ldr	r3, [pc, #440]	; (800b614 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800b45a:	4013      	ands	r3, r2
 800b45c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	3308      	adds	r3, #8
 800b466:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b46a:	66ba      	str	r2, [r7, #104]	; 0x68
 800b46c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b46e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b470:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b472:	e841 2300 	strex	r3, r2, [r1]
 800b476:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d1e3      	bne.n	800b446 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2220      	movs	r2, #32
 800b482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2200      	movs	r2, #0
 800b48a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a60      	ldr	r2, [pc, #384]	; (800b618 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d021      	beq.n	800b4e0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d01a      	beq.n	800b4e0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4b2:	e853 3f00 	ldrex	r3, [r3]
 800b4b6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b4b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b4be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b4cc:	657b      	str	r3, [r7, #84]	; 0x54
 800b4ce:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b4d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b4d4:	e841 2300 	strex	r3, r2, [r1]
 800b4d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b4da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d1e4      	bne.n	800b4aa <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d130      	bne.n	800b54a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4f6:	e853 3f00 	ldrex	r3, [r3]
 800b4fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fe:	f023 0310 	bic.w	r3, r3, #16
 800b502:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	461a      	mov	r2, r3
 800b50c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b510:	643b      	str	r3, [r7, #64]	; 0x40
 800b512:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b514:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b516:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b518:	e841 2300 	strex	r3, r2, [r1]
 800b51c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b520:	2b00      	cmp	r3, #0
 800b522:	d1e4      	bne.n	800b4ee <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	69db      	ldr	r3, [r3, #28]
 800b52a:	f003 0310 	and.w	r3, r3, #16
 800b52e:	2b10      	cmp	r3, #16
 800b530:	d103      	bne.n	800b53a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2210      	movs	r2, #16
 800b538:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b540:	4619      	mov	r1, r3
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f7fe f96c 	bl	8009820 <HAL_UARTEx_RxEventCallback>
 800b548:	e002      	b.n	800b550 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f7f6 fcfc 	bl	8001f48 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b550:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800b554:	2b00      	cmp	r3, #0
 800b556:	d006      	beq.n	800b566 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800b558:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b55c:	f003 0320 	and.w	r3, r3, #32
 800b560:	2b00      	cmp	r3, #0
 800b562:	f47f aed1 	bne.w	800b308 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b56c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b570:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b574:	2b00      	cmp	r3, #0
 800b576:	d049      	beq.n	800b60c <UART_RxISR_8BIT_FIFOEN+0x34c>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b57e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800b582:	429a      	cmp	r2, r3
 800b584:	d242      	bcs.n	800b60c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	3308      	adds	r3, #8
 800b58c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58e:	6a3b      	ldr	r3, [r7, #32]
 800b590:	e853 3f00 	ldrex	r3, [r3]
 800b594:	61fb      	str	r3, [r7, #28]
   return(result);
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b59c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3308      	adds	r3, #8
 800b5a6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b5aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b5ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5b2:	e841 2300 	strex	r3, r2, [r1]
 800b5b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1e3      	bne.n	800b586 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a16      	ldr	r2, [pc, #88]	; (800b61c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b5c2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	e853 3f00 	ldrex	r3, [r3]
 800b5d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	f043 0320 	orr.w	r3, r3, #32
 800b5d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b5e6:	61bb      	str	r3, [r7, #24]
 800b5e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ea:	6979      	ldr	r1, [r7, #20]
 800b5ec:	69ba      	ldr	r2, [r7, #24]
 800b5ee:	e841 2300 	strex	r3, r2, [r1]
 800b5f2:	613b      	str	r3, [r7, #16]
   return(result);
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d1e4      	bne.n	800b5c4 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b5fa:	e007      	b.n	800b60c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	699a      	ldr	r2, [r3, #24]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f042 0208 	orr.w	r2, r2, #8
 800b60a:	619a      	str	r2, [r3, #24]
}
 800b60c:	bf00      	nop
 800b60e:	37b0      	adds	r7, #176	; 0xb0
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	effffffe 	.word	0xeffffffe
 800b618:	58000c00 	.word	0x58000c00
 800b61c:	0800af51 	.word	0x0800af51

0800b620 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b0ae      	sub	sp, #184	; 0xb8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b62e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	69db      	ldr	r3, [r3, #28]
 800b638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b656:	2b22      	cmp	r3, #34	; 0x22
 800b658:	f040 8184 	bne.w	800b964 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b662:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b666:	e127      	b.n	800b8b8 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b67a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800b67e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800b682:	4013      	ands	r3, r2
 800b684:	b29a      	uxth	r2, r3
 800b686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b68a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b690:	1c9a      	adds	r2, r3, #2
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	3b01      	subs	r3, #1
 800b6a0:	b29a      	uxth	r2, r3
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	69db      	ldr	r3, [r3, #28]
 800b6ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b6b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b6b6:	f003 0307 	and.w	r3, r3, #7
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d053      	beq.n	800b766 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b6be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b6c2:	f003 0301 	and.w	r3, r3, #1
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d011      	beq.n	800b6ee <UART_RxISR_16BIT_FIFOEN+0xce>
 800b6ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b6ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00b      	beq.n	800b6ee <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6e4:	f043 0201 	orr.w	r2, r3, #1
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b6ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b6f2:	f003 0302 	and.w	r3, r3, #2
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d011      	beq.n	800b71e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b6fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b6fe:	f003 0301 	and.w	r3, r3, #1
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00b      	beq.n	800b71e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2202      	movs	r2, #2
 800b70c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b714:	f043 0204 	orr.w	r2, r3, #4
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b71e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b722:	f003 0304 	and.w	r3, r3, #4
 800b726:	2b00      	cmp	r3, #0
 800b728:	d011      	beq.n	800b74e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b72a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b72e:	f003 0301 	and.w	r3, r3, #1
 800b732:	2b00      	cmp	r3, #0
 800b734:	d00b      	beq.n	800b74e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2204      	movs	r2, #4
 800b73c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b744:	f043 0202 	orr.w	r2, r3, #2
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b754:	2b00      	cmp	r3, #0
 800b756:	d006      	beq.n	800b766 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f7fe f857 	bl	800980c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f040 80a2 	bne.w	800b8b8 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b77a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b77c:	e853 3f00 	ldrex	r3, [r3]
 800b780:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b788:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	461a      	mov	r2, r3
 800b792:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b796:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b79a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b79c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b79e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b7a2:	e841 2300 	strex	r3, r2, [r1]
 800b7a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b7a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d1e2      	bne.n	800b774 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	3308      	adds	r3, #8
 800b7b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7b8:	e853 3f00 	ldrex	r3, [r3]
 800b7bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b7be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b7c0:	4b6e      	ldr	r3, [pc, #440]	; (800b97c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800b7c2:	4013      	ands	r3, r2
 800b7c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	3308      	adds	r3, #8
 800b7ce:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b7d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b7d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b7d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b7da:	e841 2300 	strex	r3, r2, [r1]
 800b7de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b7e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d1e3      	bne.n	800b7ae <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2220      	movs	r2, #32
 800b7ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a60      	ldr	r2, [pc, #384]	; (800b980 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d021      	beq.n	800b848 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d01a      	beq.n	800b848 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b81a:	e853 3f00 	ldrex	r3, [r3]
 800b81e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b822:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b826:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	461a      	mov	r2, r3
 800b830:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b834:	65bb      	str	r3, [r7, #88]	; 0x58
 800b836:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b838:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b83a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b83c:	e841 2300 	strex	r3, r2, [r1]
 800b840:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1e4      	bne.n	800b812 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d130      	bne.n	800b8b2 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85e:	e853 3f00 	ldrex	r3, [r3]
 800b862:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b866:	f023 0310 	bic.w	r3, r3, #16
 800b86a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	461a      	mov	r2, r3
 800b874:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b878:	647b      	str	r3, [r7, #68]	; 0x44
 800b87a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b87e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b880:	e841 2300 	strex	r3, r2, [r1]
 800b884:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d1e4      	bne.n	800b856 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	69db      	ldr	r3, [r3, #28]
 800b892:	f003 0310 	and.w	r3, r3, #16
 800b896:	2b10      	cmp	r3, #16
 800b898:	d103      	bne.n	800b8a2 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2210      	movs	r2, #16
 800b8a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7fd ffb8 	bl	8009820 <HAL_UARTEx_RxEventCallback>
 800b8b0:	e002      	b.n	800b8b8 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f7f6 fb48 	bl	8001f48 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b8b8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d006      	beq.n	800b8ce <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800b8c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b8c4:	f003 0320 	and.w	r3, r3, #32
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f47f aecd 	bne.w	800b668 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b8d4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b8d8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d049      	beq.n	800b974 <UART_RxISR_16BIT_FIFOEN+0x354>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b8e6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d242      	bcs.n	800b974 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	3308      	adds	r3, #8
 800b8f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f8:	e853 3f00 	ldrex	r3, [r3]
 800b8fc:	623b      	str	r3, [r7, #32]
   return(result);
 800b8fe:	6a3b      	ldr	r3, [r7, #32]
 800b900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	3308      	adds	r3, #8
 800b90e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b912:	633a      	str	r2, [r7, #48]	; 0x30
 800b914:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b916:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b91a:	e841 2300 	strex	r3, r2, [r1]
 800b91e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b922:	2b00      	cmp	r3, #0
 800b924:	d1e3      	bne.n	800b8ee <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	4a16      	ldr	r2, [pc, #88]	; (800b984 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b92a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	e853 3f00 	ldrex	r3, [r3]
 800b938:	60fb      	str	r3, [r7, #12]
   return(result);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f043 0320 	orr.w	r3, r3, #32
 800b940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	461a      	mov	r2, r3
 800b94a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b94e:	61fb      	str	r3, [r7, #28]
 800b950:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b952:	69b9      	ldr	r1, [r7, #24]
 800b954:	69fa      	ldr	r2, [r7, #28]
 800b956:	e841 2300 	strex	r3, r2, [r1]
 800b95a:	617b      	str	r3, [r7, #20]
   return(result);
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1e4      	bne.n	800b92c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b962:	e007      	b.n	800b974 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	699a      	ldr	r2, [r3, #24]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f042 0208 	orr.w	r2, r2, #8
 800b972:	619a      	str	r2, [r3, #24]
}
 800b974:	bf00      	nop
 800b976:	37b8      	adds	r7, #184	; 0xb8
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	effffffe 	.word	0xeffffffe
 800b980:	58000c00 	.word	0x58000c00
 800b984:	0800b109 	.word	0x0800b109

0800b988 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b990:	bf00      	nop
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b9a4:	bf00      	nop
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b9b8:	bf00      	nop
 800b9ba:	370c      	adds	r7, #12
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr

0800b9c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d101      	bne.n	800b9da <HAL_UARTEx_DisableFifoMode+0x16>
 800b9d6:	2302      	movs	r3, #2
 800b9d8:	e027      	b.n	800ba2a <HAL_UARTEx_DisableFifoMode+0x66>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2224      	movs	r2, #36	; 0x24
 800b9e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f022 0201 	bic.w	r2, r2, #1
 800ba00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ba08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2220      	movs	r2, #32
 800ba1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3714      	adds	r7, #20
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr

0800ba36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b084      	sub	sp, #16
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
 800ba3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d101      	bne.n	800ba4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ba4a:	2302      	movs	r3, #2
 800ba4c:	e02d      	b.n	800baaa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2224      	movs	r2, #36	; 0x24
 800ba5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f022 0201 	bic.w	r2, r2, #1
 800ba74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	683a      	ldr	r2, [r7, #0]
 800ba86:	430a      	orrs	r2, r1
 800ba88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 f850 	bl	800bb30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	68fa      	ldr	r2, [r7, #12]
 800ba96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2220      	movs	r2, #32
 800ba9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b084      	sub	sp, #16
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
 800baba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d101      	bne.n	800baca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bac6:	2302      	movs	r3, #2
 800bac8:	e02d      	b.n	800bb26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2201      	movs	r2, #1
 800bace:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2224      	movs	r2, #36	; 0x24
 800bad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f022 0201 	bic.w	r2, r2, #1
 800baf0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	683a      	ldr	r2, [r7, #0]
 800bb02:	430a      	orrs	r2, r1
 800bb04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 f812 	bl	800bb30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	68fa      	ldr	r2, [r7, #12]
 800bb12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2220      	movs	r2, #32
 800bb18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3710      	adds	r7, #16
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
	...

0800bb30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d108      	bne.n	800bb52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb50:	e031      	b.n	800bbb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb52:	2310      	movs	r3, #16
 800bb54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb56:	2310      	movs	r3, #16
 800bb58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	0e5b      	lsrs	r3, r3, #25
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	f003 0307 	and.w	r3, r3, #7
 800bb68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	0f5b      	lsrs	r3, r3, #29
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	f003 0307 	and.w	r3, r3, #7
 800bb78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb7a:	7bbb      	ldrb	r3, [r7, #14]
 800bb7c:	7b3a      	ldrb	r2, [r7, #12]
 800bb7e:	4911      	ldr	r1, [pc, #68]	; (800bbc4 <UARTEx_SetNbDataToProcess+0x94>)
 800bb80:	5c8a      	ldrb	r2, [r1, r2]
 800bb82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb86:	7b3a      	ldrb	r2, [r7, #12]
 800bb88:	490f      	ldr	r1, [pc, #60]	; (800bbc8 <UARTEx_SetNbDataToProcess+0x98>)
 800bb8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb8c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb90:	b29a      	uxth	r2, r3
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb98:	7bfb      	ldrb	r3, [r7, #15]
 800bb9a:	7b7a      	ldrb	r2, [r7, #13]
 800bb9c:	4909      	ldr	r1, [pc, #36]	; (800bbc4 <UARTEx_SetNbDataToProcess+0x94>)
 800bb9e:	5c8a      	ldrb	r2, [r1, r2]
 800bba0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bba4:	7b7a      	ldrb	r2, [r7, #13]
 800bba6:	4908      	ldr	r1, [pc, #32]	; (800bbc8 <UARTEx_SetNbDataToProcess+0x98>)
 800bba8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bbaa:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbae:	b29a      	uxth	r2, r3
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bbb6:	bf00      	nop
 800bbb8:	3714      	adds	r7, #20
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	0800d420 	.word	0x0800d420
 800bbc8:	0800d428 	.word	0x0800d428

0800bbcc <__errno>:
 800bbcc:	4b01      	ldr	r3, [pc, #4]	; (800bbd4 <__errno+0x8>)
 800bbce:	6818      	ldr	r0, [r3, #0]
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop
 800bbd4:	24000038 	.word	0x24000038

0800bbd8 <__libc_init_array>:
 800bbd8:	b570      	push	{r4, r5, r6, lr}
 800bbda:	4d0d      	ldr	r5, [pc, #52]	; (800bc10 <__libc_init_array+0x38>)
 800bbdc:	4c0d      	ldr	r4, [pc, #52]	; (800bc14 <__libc_init_array+0x3c>)
 800bbde:	1b64      	subs	r4, r4, r5
 800bbe0:	10a4      	asrs	r4, r4, #2
 800bbe2:	2600      	movs	r6, #0
 800bbe4:	42a6      	cmp	r6, r4
 800bbe6:	d109      	bne.n	800bbfc <__libc_init_array+0x24>
 800bbe8:	4d0b      	ldr	r5, [pc, #44]	; (800bc18 <__libc_init_array+0x40>)
 800bbea:	4c0c      	ldr	r4, [pc, #48]	; (800bc1c <__libc_init_array+0x44>)
 800bbec:	f001 faaa 	bl	800d144 <_init>
 800bbf0:	1b64      	subs	r4, r4, r5
 800bbf2:	10a4      	asrs	r4, r4, #2
 800bbf4:	2600      	movs	r6, #0
 800bbf6:	42a6      	cmp	r6, r4
 800bbf8:	d105      	bne.n	800bc06 <__libc_init_array+0x2e>
 800bbfa:	bd70      	pop	{r4, r5, r6, pc}
 800bbfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc00:	4798      	blx	r3
 800bc02:	3601      	adds	r6, #1
 800bc04:	e7ee      	b.n	800bbe4 <__libc_init_array+0xc>
 800bc06:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc0a:	4798      	blx	r3
 800bc0c:	3601      	adds	r6, #1
 800bc0e:	e7f2      	b.n	800bbf6 <__libc_init_array+0x1e>
 800bc10:	0800d580 	.word	0x0800d580
 800bc14:	0800d580 	.word	0x0800d580
 800bc18:	0800d580 	.word	0x0800d580
 800bc1c:	0800d584 	.word	0x0800d584

0800bc20 <memcpy>:
 800bc20:	440a      	add	r2, r1
 800bc22:	4291      	cmp	r1, r2
 800bc24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bc28:	d100      	bne.n	800bc2c <memcpy+0xc>
 800bc2a:	4770      	bx	lr
 800bc2c:	b510      	push	{r4, lr}
 800bc2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc36:	4291      	cmp	r1, r2
 800bc38:	d1f9      	bne.n	800bc2e <memcpy+0xe>
 800bc3a:	bd10      	pop	{r4, pc}

0800bc3c <memset>:
 800bc3c:	4402      	add	r2, r0
 800bc3e:	4603      	mov	r3, r0
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d100      	bne.n	800bc46 <memset+0xa>
 800bc44:	4770      	bx	lr
 800bc46:	f803 1b01 	strb.w	r1, [r3], #1
 800bc4a:	e7f9      	b.n	800bc40 <memset+0x4>

0800bc4c <srand>:
 800bc4c:	b538      	push	{r3, r4, r5, lr}
 800bc4e:	4b10      	ldr	r3, [pc, #64]	; (800bc90 <srand+0x44>)
 800bc50:	681d      	ldr	r5, [r3, #0]
 800bc52:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800bc54:	4604      	mov	r4, r0
 800bc56:	b9b3      	cbnz	r3, 800bc86 <srand+0x3a>
 800bc58:	2018      	movs	r0, #24
 800bc5a:	f000 f8f3 	bl	800be44 <malloc>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	63a8      	str	r0, [r5, #56]	; 0x38
 800bc62:	b920      	cbnz	r0, 800bc6e <srand+0x22>
 800bc64:	4b0b      	ldr	r3, [pc, #44]	; (800bc94 <srand+0x48>)
 800bc66:	480c      	ldr	r0, [pc, #48]	; (800bc98 <srand+0x4c>)
 800bc68:	2142      	movs	r1, #66	; 0x42
 800bc6a:	f000 f8a9 	bl	800bdc0 <__assert_func>
 800bc6e:	490b      	ldr	r1, [pc, #44]	; (800bc9c <srand+0x50>)
 800bc70:	4b0b      	ldr	r3, [pc, #44]	; (800bca0 <srand+0x54>)
 800bc72:	e9c0 1300 	strd	r1, r3, [r0]
 800bc76:	4b0b      	ldr	r3, [pc, #44]	; (800bca4 <srand+0x58>)
 800bc78:	6083      	str	r3, [r0, #8]
 800bc7a:	230b      	movs	r3, #11
 800bc7c:	8183      	strh	r3, [r0, #12]
 800bc7e:	2100      	movs	r1, #0
 800bc80:	2001      	movs	r0, #1
 800bc82:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800bc86:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800bc88:	2200      	movs	r2, #0
 800bc8a:	611c      	str	r4, [r3, #16]
 800bc8c:	615a      	str	r2, [r3, #20]
 800bc8e:	bd38      	pop	{r3, r4, r5, pc}
 800bc90:	24000038 	.word	0x24000038
 800bc94:	0800d434 	.word	0x0800d434
 800bc98:	0800d44b 	.word	0x0800d44b
 800bc9c:	abcd330e 	.word	0xabcd330e
 800bca0:	e66d1234 	.word	0xe66d1234
 800bca4:	0005deec 	.word	0x0005deec

0800bca8 <rand>:
 800bca8:	4b16      	ldr	r3, [pc, #88]	; (800bd04 <rand+0x5c>)
 800bcaa:	b510      	push	{r4, lr}
 800bcac:	681c      	ldr	r4, [r3, #0]
 800bcae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bcb0:	b9b3      	cbnz	r3, 800bce0 <rand+0x38>
 800bcb2:	2018      	movs	r0, #24
 800bcb4:	f000 f8c6 	bl	800be44 <malloc>
 800bcb8:	63a0      	str	r0, [r4, #56]	; 0x38
 800bcba:	b928      	cbnz	r0, 800bcc8 <rand+0x20>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	4b12      	ldr	r3, [pc, #72]	; (800bd08 <rand+0x60>)
 800bcc0:	4812      	ldr	r0, [pc, #72]	; (800bd0c <rand+0x64>)
 800bcc2:	214e      	movs	r1, #78	; 0x4e
 800bcc4:	f000 f87c 	bl	800bdc0 <__assert_func>
 800bcc8:	4a11      	ldr	r2, [pc, #68]	; (800bd10 <rand+0x68>)
 800bcca:	4b12      	ldr	r3, [pc, #72]	; (800bd14 <rand+0x6c>)
 800bccc:	e9c0 2300 	strd	r2, r3, [r0]
 800bcd0:	4b11      	ldr	r3, [pc, #68]	; (800bd18 <rand+0x70>)
 800bcd2:	6083      	str	r3, [r0, #8]
 800bcd4:	230b      	movs	r3, #11
 800bcd6:	8183      	strh	r3, [r0, #12]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	2300      	movs	r3, #0
 800bcdc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800bce0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800bce2:	4a0e      	ldr	r2, [pc, #56]	; (800bd1c <rand+0x74>)
 800bce4:	6920      	ldr	r0, [r4, #16]
 800bce6:	6963      	ldr	r3, [r4, #20]
 800bce8:	490d      	ldr	r1, [pc, #52]	; (800bd20 <rand+0x78>)
 800bcea:	4342      	muls	r2, r0
 800bcec:	fb01 2203 	mla	r2, r1, r3, r2
 800bcf0:	fba0 0101 	umull	r0, r1, r0, r1
 800bcf4:	1c43      	adds	r3, r0, #1
 800bcf6:	eb42 0001 	adc.w	r0, r2, r1
 800bcfa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800bcfe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bd02:	bd10      	pop	{r4, pc}
 800bd04:	24000038 	.word	0x24000038
 800bd08:	0800d434 	.word	0x0800d434
 800bd0c:	0800d44b 	.word	0x0800d44b
 800bd10:	abcd330e 	.word	0xabcd330e
 800bd14:	e66d1234 	.word	0xe66d1234
 800bd18:	0005deec 	.word	0x0005deec
 800bd1c:	5851f42d 	.word	0x5851f42d
 800bd20:	4c957f2d 	.word	0x4c957f2d

0800bd24 <sniprintf>:
 800bd24:	b40c      	push	{r2, r3}
 800bd26:	b530      	push	{r4, r5, lr}
 800bd28:	4b17      	ldr	r3, [pc, #92]	; (800bd88 <sniprintf+0x64>)
 800bd2a:	1e0c      	subs	r4, r1, #0
 800bd2c:	681d      	ldr	r5, [r3, #0]
 800bd2e:	b09d      	sub	sp, #116	; 0x74
 800bd30:	da08      	bge.n	800bd44 <sniprintf+0x20>
 800bd32:	238b      	movs	r3, #139	; 0x8b
 800bd34:	602b      	str	r3, [r5, #0]
 800bd36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd3a:	b01d      	add	sp, #116	; 0x74
 800bd3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd40:	b002      	add	sp, #8
 800bd42:	4770      	bx	lr
 800bd44:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bd48:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bd4c:	bf14      	ite	ne
 800bd4e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800bd52:	4623      	moveq	r3, r4
 800bd54:	9304      	str	r3, [sp, #16]
 800bd56:	9307      	str	r3, [sp, #28]
 800bd58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd5c:	9002      	str	r0, [sp, #8]
 800bd5e:	9006      	str	r0, [sp, #24]
 800bd60:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bd64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bd66:	ab21      	add	r3, sp, #132	; 0x84
 800bd68:	a902      	add	r1, sp, #8
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	9301      	str	r3, [sp, #4]
 800bd6e:	f000 f9ad 	bl	800c0cc <_svfiprintf_r>
 800bd72:	1c43      	adds	r3, r0, #1
 800bd74:	bfbc      	itt	lt
 800bd76:	238b      	movlt	r3, #139	; 0x8b
 800bd78:	602b      	strlt	r3, [r5, #0]
 800bd7a:	2c00      	cmp	r4, #0
 800bd7c:	d0dd      	beq.n	800bd3a <sniprintf+0x16>
 800bd7e:	9b02      	ldr	r3, [sp, #8]
 800bd80:	2200      	movs	r2, #0
 800bd82:	701a      	strb	r2, [r3, #0]
 800bd84:	e7d9      	b.n	800bd3a <sniprintf+0x16>
 800bd86:	bf00      	nop
 800bd88:	24000038 	.word	0x24000038

0800bd8c <time>:
 800bd8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd8e:	4b0b      	ldr	r3, [pc, #44]	; (800bdbc <time+0x30>)
 800bd90:	2200      	movs	r2, #0
 800bd92:	4669      	mov	r1, sp
 800bd94:	4604      	mov	r4, r0
 800bd96:	6818      	ldr	r0, [r3, #0]
 800bd98:	f000 f842 	bl	800be20 <_gettimeofday_r>
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	bfbe      	ittt	lt
 800bda0:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800bda4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bda8:	e9cd 2300 	strdlt	r2, r3, [sp]
 800bdac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdb0:	b10c      	cbz	r4, 800bdb6 <time+0x2a>
 800bdb2:	e9c4 0100 	strd	r0, r1, [r4]
 800bdb6:	b004      	add	sp, #16
 800bdb8:	bd10      	pop	{r4, pc}
 800bdba:	bf00      	nop
 800bdbc:	24000038 	.word	0x24000038

0800bdc0 <__assert_func>:
 800bdc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bdc2:	4614      	mov	r4, r2
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	4b09      	ldr	r3, [pc, #36]	; (800bdec <__assert_func+0x2c>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4605      	mov	r5, r0
 800bdcc:	68d8      	ldr	r0, [r3, #12]
 800bdce:	b14c      	cbz	r4, 800bde4 <__assert_func+0x24>
 800bdd0:	4b07      	ldr	r3, [pc, #28]	; (800bdf0 <__assert_func+0x30>)
 800bdd2:	9100      	str	r1, [sp, #0]
 800bdd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bdd8:	4906      	ldr	r1, [pc, #24]	; (800bdf4 <__assert_func+0x34>)
 800bdda:	462b      	mov	r3, r5
 800bddc:	f000 f80e 	bl	800bdfc <fiprintf>
 800bde0:	f000 fe32 	bl	800ca48 <abort>
 800bde4:	4b04      	ldr	r3, [pc, #16]	; (800bdf8 <__assert_func+0x38>)
 800bde6:	461c      	mov	r4, r3
 800bde8:	e7f3      	b.n	800bdd2 <__assert_func+0x12>
 800bdea:	bf00      	nop
 800bdec:	24000038 	.word	0x24000038
 800bdf0:	0800d4a6 	.word	0x0800d4a6
 800bdf4:	0800d4b3 	.word	0x0800d4b3
 800bdf8:	0800d4e1 	.word	0x0800d4e1

0800bdfc <fiprintf>:
 800bdfc:	b40e      	push	{r1, r2, r3}
 800bdfe:	b503      	push	{r0, r1, lr}
 800be00:	4601      	mov	r1, r0
 800be02:	ab03      	add	r3, sp, #12
 800be04:	4805      	ldr	r0, [pc, #20]	; (800be1c <fiprintf+0x20>)
 800be06:	f853 2b04 	ldr.w	r2, [r3], #4
 800be0a:	6800      	ldr	r0, [r0, #0]
 800be0c:	9301      	str	r3, [sp, #4]
 800be0e:	f000 fa87 	bl	800c320 <_vfiprintf_r>
 800be12:	b002      	add	sp, #8
 800be14:	f85d eb04 	ldr.w	lr, [sp], #4
 800be18:	b003      	add	sp, #12
 800be1a:	4770      	bx	lr
 800be1c:	24000038 	.word	0x24000038

0800be20 <_gettimeofday_r>:
 800be20:	b538      	push	{r3, r4, r5, lr}
 800be22:	4d07      	ldr	r5, [pc, #28]	; (800be40 <_gettimeofday_r+0x20>)
 800be24:	2300      	movs	r3, #0
 800be26:	4604      	mov	r4, r0
 800be28:	4608      	mov	r0, r1
 800be2a:	4611      	mov	r1, r2
 800be2c:	602b      	str	r3, [r5, #0]
 800be2e:	f001 f981 	bl	800d134 <_gettimeofday>
 800be32:	1c43      	adds	r3, r0, #1
 800be34:	d102      	bne.n	800be3c <_gettimeofday_r+0x1c>
 800be36:	682b      	ldr	r3, [r5, #0]
 800be38:	b103      	cbz	r3, 800be3c <_gettimeofday_r+0x1c>
 800be3a:	6023      	str	r3, [r4, #0]
 800be3c:	bd38      	pop	{r3, r4, r5, pc}
 800be3e:	bf00      	nop
 800be40:	240007bc 	.word	0x240007bc

0800be44 <malloc>:
 800be44:	4b02      	ldr	r3, [pc, #8]	; (800be50 <malloc+0xc>)
 800be46:	4601      	mov	r1, r0
 800be48:	6818      	ldr	r0, [r3, #0]
 800be4a:	f000 b86f 	b.w	800bf2c <_malloc_r>
 800be4e:	bf00      	nop
 800be50:	24000038 	.word	0x24000038

0800be54 <_free_r>:
 800be54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be56:	2900      	cmp	r1, #0
 800be58:	d044      	beq.n	800bee4 <_free_r+0x90>
 800be5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be5e:	9001      	str	r0, [sp, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	f1a1 0404 	sub.w	r4, r1, #4
 800be66:	bfb8      	it	lt
 800be68:	18e4      	addlt	r4, r4, r3
 800be6a:	f001 f82f 	bl	800cecc <__malloc_lock>
 800be6e:	4a1e      	ldr	r2, [pc, #120]	; (800bee8 <_free_r+0x94>)
 800be70:	9801      	ldr	r0, [sp, #4]
 800be72:	6813      	ldr	r3, [r2, #0]
 800be74:	b933      	cbnz	r3, 800be84 <_free_r+0x30>
 800be76:	6063      	str	r3, [r4, #4]
 800be78:	6014      	str	r4, [r2, #0]
 800be7a:	b003      	add	sp, #12
 800be7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be80:	f001 b82a 	b.w	800ced8 <__malloc_unlock>
 800be84:	42a3      	cmp	r3, r4
 800be86:	d908      	bls.n	800be9a <_free_r+0x46>
 800be88:	6825      	ldr	r5, [r4, #0]
 800be8a:	1961      	adds	r1, r4, r5
 800be8c:	428b      	cmp	r3, r1
 800be8e:	bf01      	itttt	eq
 800be90:	6819      	ldreq	r1, [r3, #0]
 800be92:	685b      	ldreq	r3, [r3, #4]
 800be94:	1949      	addeq	r1, r1, r5
 800be96:	6021      	streq	r1, [r4, #0]
 800be98:	e7ed      	b.n	800be76 <_free_r+0x22>
 800be9a:	461a      	mov	r2, r3
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	b10b      	cbz	r3, 800bea4 <_free_r+0x50>
 800bea0:	42a3      	cmp	r3, r4
 800bea2:	d9fa      	bls.n	800be9a <_free_r+0x46>
 800bea4:	6811      	ldr	r1, [r2, #0]
 800bea6:	1855      	adds	r5, r2, r1
 800bea8:	42a5      	cmp	r5, r4
 800beaa:	d10b      	bne.n	800bec4 <_free_r+0x70>
 800beac:	6824      	ldr	r4, [r4, #0]
 800beae:	4421      	add	r1, r4
 800beb0:	1854      	adds	r4, r2, r1
 800beb2:	42a3      	cmp	r3, r4
 800beb4:	6011      	str	r1, [r2, #0]
 800beb6:	d1e0      	bne.n	800be7a <_free_r+0x26>
 800beb8:	681c      	ldr	r4, [r3, #0]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	6053      	str	r3, [r2, #4]
 800bebe:	4421      	add	r1, r4
 800bec0:	6011      	str	r1, [r2, #0]
 800bec2:	e7da      	b.n	800be7a <_free_r+0x26>
 800bec4:	d902      	bls.n	800becc <_free_r+0x78>
 800bec6:	230c      	movs	r3, #12
 800bec8:	6003      	str	r3, [r0, #0]
 800beca:	e7d6      	b.n	800be7a <_free_r+0x26>
 800becc:	6825      	ldr	r5, [r4, #0]
 800bece:	1961      	adds	r1, r4, r5
 800bed0:	428b      	cmp	r3, r1
 800bed2:	bf04      	itt	eq
 800bed4:	6819      	ldreq	r1, [r3, #0]
 800bed6:	685b      	ldreq	r3, [r3, #4]
 800bed8:	6063      	str	r3, [r4, #4]
 800beda:	bf04      	itt	eq
 800bedc:	1949      	addeq	r1, r1, r5
 800bede:	6021      	streq	r1, [r4, #0]
 800bee0:	6054      	str	r4, [r2, #4]
 800bee2:	e7ca      	b.n	800be7a <_free_r+0x26>
 800bee4:	b003      	add	sp, #12
 800bee6:	bd30      	pop	{r4, r5, pc}
 800bee8:	240007b4 	.word	0x240007b4

0800beec <sbrk_aligned>:
 800beec:	b570      	push	{r4, r5, r6, lr}
 800beee:	4e0e      	ldr	r6, [pc, #56]	; (800bf28 <sbrk_aligned+0x3c>)
 800bef0:	460c      	mov	r4, r1
 800bef2:	6831      	ldr	r1, [r6, #0]
 800bef4:	4605      	mov	r5, r0
 800bef6:	b911      	cbnz	r1, 800befe <sbrk_aligned+0x12>
 800bef8:	f000 fcd6 	bl	800c8a8 <_sbrk_r>
 800befc:	6030      	str	r0, [r6, #0]
 800befe:	4621      	mov	r1, r4
 800bf00:	4628      	mov	r0, r5
 800bf02:	f000 fcd1 	bl	800c8a8 <_sbrk_r>
 800bf06:	1c43      	adds	r3, r0, #1
 800bf08:	d00a      	beq.n	800bf20 <sbrk_aligned+0x34>
 800bf0a:	1cc4      	adds	r4, r0, #3
 800bf0c:	f024 0403 	bic.w	r4, r4, #3
 800bf10:	42a0      	cmp	r0, r4
 800bf12:	d007      	beq.n	800bf24 <sbrk_aligned+0x38>
 800bf14:	1a21      	subs	r1, r4, r0
 800bf16:	4628      	mov	r0, r5
 800bf18:	f000 fcc6 	bl	800c8a8 <_sbrk_r>
 800bf1c:	3001      	adds	r0, #1
 800bf1e:	d101      	bne.n	800bf24 <sbrk_aligned+0x38>
 800bf20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bf24:	4620      	mov	r0, r4
 800bf26:	bd70      	pop	{r4, r5, r6, pc}
 800bf28:	240007b8 	.word	0x240007b8

0800bf2c <_malloc_r>:
 800bf2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf30:	1ccd      	adds	r5, r1, #3
 800bf32:	f025 0503 	bic.w	r5, r5, #3
 800bf36:	3508      	adds	r5, #8
 800bf38:	2d0c      	cmp	r5, #12
 800bf3a:	bf38      	it	cc
 800bf3c:	250c      	movcc	r5, #12
 800bf3e:	2d00      	cmp	r5, #0
 800bf40:	4607      	mov	r7, r0
 800bf42:	db01      	blt.n	800bf48 <_malloc_r+0x1c>
 800bf44:	42a9      	cmp	r1, r5
 800bf46:	d905      	bls.n	800bf54 <_malloc_r+0x28>
 800bf48:	230c      	movs	r3, #12
 800bf4a:	603b      	str	r3, [r7, #0]
 800bf4c:	2600      	movs	r6, #0
 800bf4e:	4630      	mov	r0, r6
 800bf50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf54:	4e2e      	ldr	r6, [pc, #184]	; (800c010 <_malloc_r+0xe4>)
 800bf56:	f000 ffb9 	bl	800cecc <__malloc_lock>
 800bf5a:	6833      	ldr	r3, [r6, #0]
 800bf5c:	461c      	mov	r4, r3
 800bf5e:	bb34      	cbnz	r4, 800bfae <_malloc_r+0x82>
 800bf60:	4629      	mov	r1, r5
 800bf62:	4638      	mov	r0, r7
 800bf64:	f7ff ffc2 	bl	800beec <sbrk_aligned>
 800bf68:	1c43      	adds	r3, r0, #1
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	d14d      	bne.n	800c00a <_malloc_r+0xde>
 800bf6e:	6834      	ldr	r4, [r6, #0]
 800bf70:	4626      	mov	r6, r4
 800bf72:	2e00      	cmp	r6, #0
 800bf74:	d140      	bne.n	800bff8 <_malloc_r+0xcc>
 800bf76:	6823      	ldr	r3, [r4, #0]
 800bf78:	4631      	mov	r1, r6
 800bf7a:	4638      	mov	r0, r7
 800bf7c:	eb04 0803 	add.w	r8, r4, r3
 800bf80:	f000 fc92 	bl	800c8a8 <_sbrk_r>
 800bf84:	4580      	cmp	r8, r0
 800bf86:	d13a      	bne.n	800bffe <_malloc_r+0xd2>
 800bf88:	6821      	ldr	r1, [r4, #0]
 800bf8a:	3503      	adds	r5, #3
 800bf8c:	1a6d      	subs	r5, r5, r1
 800bf8e:	f025 0503 	bic.w	r5, r5, #3
 800bf92:	3508      	adds	r5, #8
 800bf94:	2d0c      	cmp	r5, #12
 800bf96:	bf38      	it	cc
 800bf98:	250c      	movcc	r5, #12
 800bf9a:	4629      	mov	r1, r5
 800bf9c:	4638      	mov	r0, r7
 800bf9e:	f7ff ffa5 	bl	800beec <sbrk_aligned>
 800bfa2:	3001      	adds	r0, #1
 800bfa4:	d02b      	beq.n	800bffe <_malloc_r+0xd2>
 800bfa6:	6823      	ldr	r3, [r4, #0]
 800bfa8:	442b      	add	r3, r5
 800bfaa:	6023      	str	r3, [r4, #0]
 800bfac:	e00e      	b.n	800bfcc <_malloc_r+0xa0>
 800bfae:	6822      	ldr	r2, [r4, #0]
 800bfb0:	1b52      	subs	r2, r2, r5
 800bfb2:	d41e      	bmi.n	800bff2 <_malloc_r+0xc6>
 800bfb4:	2a0b      	cmp	r2, #11
 800bfb6:	d916      	bls.n	800bfe6 <_malloc_r+0xba>
 800bfb8:	1961      	adds	r1, r4, r5
 800bfba:	42a3      	cmp	r3, r4
 800bfbc:	6025      	str	r5, [r4, #0]
 800bfbe:	bf18      	it	ne
 800bfc0:	6059      	strne	r1, [r3, #4]
 800bfc2:	6863      	ldr	r3, [r4, #4]
 800bfc4:	bf08      	it	eq
 800bfc6:	6031      	streq	r1, [r6, #0]
 800bfc8:	5162      	str	r2, [r4, r5]
 800bfca:	604b      	str	r3, [r1, #4]
 800bfcc:	4638      	mov	r0, r7
 800bfce:	f104 060b 	add.w	r6, r4, #11
 800bfd2:	f000 ff81 	bl	800ced8 <__malloc_unlock>
 800bfd6:	f026 0607 	bic.w	r6, r6, #7
 800bfda:	1d23      	adds	r3, r4, #4
 800bfdc:	1af2      	subs	r2, r6, r3
 800bfde:	d0b6      	beq.n	800bf4e <_malloc_r+0x22>
 800bfe0:	1b9b      	subs	r3, r3, r6
 800bfe2:	50a3      	str	r3, [r4, r2]
 800bfe4:	e7b3      	b.n	800bf4e <_malloc_r+0x22>
 800bfe6:	6862      	ldr	r2, [r4, #4]
 800bfe8:	42a3      	cmp	r3, r4
 800bfea:	bf0c      	ite	eq
 800bfec:	6032      	streq	r2, [r6, #0]
 800bfee:	605a      	strne	r2, [r3, #4]
 800bff0:	e7ec      	b.n	800bfcc <_malloc_r+0xa0>
 800bff2:	4623      	mov	r3, r4
 800bff4:	6864      	ldr	r4, [r4, #4]
 800bff6:	e7b2      	b.n	800bf5e <_malloc_r+0x32>
 800bff8:	4634      	mov	r4, r6
 800bffa:	6876      	ldr	r6, [r6, #4]
 800bffc:	e7b9      	b.n	800bf72 <_malloc_r+0x46>
 800bffe:	230c      	movs	r3, #12
 800c000:	603b      	str	r3, [r7, #0]
 800c002:	4638      	mov	r0, r7
 800c004:	f000 ff68 	bl	800ced8 <__malloc_unlock>
 800c008:	e7a1      	b.n	800bf4e <_malloc_r+0x22>
 800c00a:	6025      	str	r5, [r4, #0]
 800c00c:	e7de      	b.n	800bfcc <_malloc_r+0xa0>
 800c00e:	bf00      	nop
 800c010:	240007b4 	.word	0x240007b4

0800c014 <__ssputs_r>:
 800c014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c018:	688e      	ldr	r6, [r1, #8]
 800c01a:	429e      	cmp	r6, r3
 800c01c:	4682      	mov	sl, r0
 800c01e:	460c      	mov	r4, r1
 800c020:	4690      	mov	r8, r2
 800c022:	461f      	mov	r7, r3
 800c024:	d838      	bhi.n	800c098 <__ssputs_r+0x84>
 800c026:	898a      	ldrh	r2, [r1, #12]
 800c028:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c02c:	d032      	beq.n	800c094 <__ssputs_r+0x80>
 800c02e:	6825      	ldr	r5, [r4, #0]
 800c030:	6909      	ldr	r1, [r1, #16]
 800c032:	eba5 0901 	sub.w	r9, r5, r1
 800c036:	6965      	ldr	r5, [r4, #20]
 800c038:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c03c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c040:	3301      	adds	r3, #1
 800c042:	444b      	add	r3, r9
 800c044:	106d      	asrs	r5, r5, #1
 800c046:	429d      	cmp	r5, r3
 800c048:	bf38      	it	cc
 800c04a:	461d      	movcc	r5, r3
 800c04c:	0553      	lsls	r3, r2, #21
 800c04e:	d531      	bpl.n	800c0b4 <__ssputs_r+0xa0>
 800c050:	4629      	mov	r1, r5
 800c052:	f7ff ff6b 	bl	800bf2c <_malloc_r>
 800c056:	4606      	mov	r6, r0
 800c058:	b950      	cbnz	r0, 800c070 <__ssputs_r+0x5c>
 800c05a:	230c      	movs	r3, #12
 800c05c:	f8ca 3000 	str.w	r3, [sl]
 800c060:	89a3      	ldrh	r3, [r4, #12]
 800c062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c066:	81a3      	strh	r3, [r4, #12]
 800c068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c070:	6921      	ldr	r1, [r4, #16]
 800c072:	464a      	mov	r2, r9
 800c074:	f7ff fdd4 	bl	800bc20 <memcpy>
 800c078:	89a3      	ldrh	r3, [r4, #12]
 800c07a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c07e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c082:	81a3      	strh	r3, [r4, #12]
 800c084:	6126      	str	r6, [r4, #16]
 800c086:	6165      	str	r5, [r4, #20]
 800c088:	444e      	add	r6, r9
 800c08a:	eba5 0509 	sub.w	r5, r5, r9
 800c08e:	6026      	str	r6, [r4, #0]
 800c090:	60a5      	str	r5, [r4, #8]
 800c092:	463e      	mov	r6, r7
 800c094:	42be      	cmp	r6, r7
 800c096:	d900      	bls.n	800c09a <__ssputs_r+0x86>
 800c098:	463e      	mov	r6, r7
 800c09a:	6820      	ldr	r0, [r4, #0]
 800c09c:	4632      	mov	r2, r6
 800c09e:	4641      	mov	r1, r8
 800c0a0:	f000 fefa 	bl	800ce98 <memmove>
 800c0a4:	68a3      	ldr	r3, [r4, #8]
 800c0a6:	1b9b      	subs	r3, r3, r6
 800c0a8:	60a3      	str	r3, [r4, #8]
 800c0aa:	6823      	ldr	r3, [r4, #0]
 800c0ac:	4433      	add	r3, r6
 800c0ae:	6023      	str	r3, [r4, #0]
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	e7db      	b.n	800c06c <__ssputs_r+0x58>
 800c0b4:	462a      	mov	r2, r5
 800c0b6:	f000 ff15 	bl	800cee4 <_realloc_r>
 800c0ba:	4606      	mov	r6, r0
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d1e1      	bne.n	800c084 <__ssputs_r+0x70>
 800c0c0:	6921      	ldr	r1, [r4, #16]
 800c0c2:	4650      	mov	r0, sl
 800c0c4:	f7ff fec6 	bl	800be54 <_free_r>
 800c0c8:	e7c7      	b.n	800c05a <__ssputs_r+0x46>
	...

0800c0cc <_svfiprintf_r>:
 800c0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d0:	4698      	mov	r8, r3
 800c0d2:	898b      	ldrh	r3, [r1, #12]
 800c0d4:	061b      	lsls	r3, r3, #24
 800c0d6:	b09d      	sub	sp, #116	; 0x74
 800c0d8:	4607      	mov	r7, r0
 800c0da:	460d      	mov	r5, r1
 800c0dc:	4614      	mov	r4, r2
 800c0de:	d50e      	bpl.n	800c0fe <_svfiprintf_r+0x32>
 800c0e0:	690b      	ldr	r3, [r1, #16]
 800c0e2:	b963      	cbnz	r3, 800c0fe <_svfiprintf_r+0x32>
 800c0e4:	2140      	movs	r1, #64	; 0x40
 800c0e6:	f7ff ff21 	bl	800bf2c <_malloc_r>
 800c0ea:	6028      	str	r0, [r5, #0]
 800c0ec:	6128      	str	r0, [r5, #16]
 800c0ee:	b920      	cbnz	r0, 800c0fa <_svfiprintf_r+0x2e>
 800c0f0:	230c      	movs	r3, #12
 800c0f2:	603b      	str	r3, [r7, #0]
 800c0f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0f8:	e0d1      	b.n	800c29e <_svfiprintf_r+0x1d2>
 800c0fa:	2340      	movs	r3, #64	; 0x40
 800c0fc:	616b      	str	r3, [r5, #20]
 800c0fe:	2300      	movs	r3, #0
 800c100:	9309      	str	r3, [sp, #36]	; 0x24
 800c102:	2320      	movs	r3, #32
 800c104:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c108:	f8cd 800c 	str.w	r8, [sp, #12]
 800c10c:	2330      	movs	r3, #48	; 0x30
 800c10e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c2b8 <_svfiprintf_r+0x1ec>
 800c112:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c116:	f04f 0901 	mov.w	r9, #1
 800c11a:	4623      	mov	r3, r4
 800c11c:	469a      	mov	sl, r3
 800c11e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c122:	b10a      	cbz	r2, 800c128 <_svfiprintf_r+0x5c>
 800c124:	2a25      	cmp	r2, #37	; 0x25
 800c126:	d1f9      	bne.n	800c11c <_svfiprintf_r+0x50>
 800c128:	ebba 0b04 	subs.w	fp, sl, r4
 800c12c:	d00b      	beq.n	800c146 <_svfiprintf_r+0x7a>
 800c12e:	465b      	mov	r3, fp
 800c130:	4622      	mov	r2, r4
 800c132:	4629      	mov	r1, r5
 800c134:	4638      	mov	r0, r7
 800c136:	f7ff ff6d 	bl	800c014 <__ssputs_r>
 800c13a:	3001      	adds	r0, #1
 800c13c:	f000 80aa 	beq.w	800c294 <_svfiprintf_r+0x1c8>
 800c140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c142:	445a      	add	r2, fp
 800c144:	9209      	str	r2, [sp, #36]	; 0x24
 800c146:	f89a 3000 	ldrb.w	r3, [sl]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f000 80a2 	beq.w	800c294 <_svfiprintf_r+0x1c8>
 800c150:	2300      	movs	r3, #0
 800c152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c15a:	f10a 0a01 	add.w	sl, sl, #1
 800c15e:	9304      	str	r3, [sp, #16]
 800c160:	9307      	str	r3, [sp, #28]
 800c162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c166:	931a      	str	r3, [sp, #104]	; 0x68
 800c168:	4654      	mov	r4, sl
 800c16a:	2205      	movs	r2, #5
 800c16c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c170:	4851      	ldr	r0, [pc, #324]	; (800c2b8 <_svfiprintf_r+0x1ec>)
 800c172:	f7f4 f8bd 	bl	80002f0 <memchr>
 800c176:	9a04      	ldr	r2, [sp, #16]
 800c178:	b9d8      	cbnz	r0, 800c1b2 <_svfiprintf_r+0xe6>
 800c17a:	06d0      	lsls	r0, r2, #27
 800c17c:	bf44      	itt	mi
 800c17e:	2320      	movmi	r3, #32
 800c180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c184:	0711      	lsls	r1, r2, #28
 800c186:	bf44      	itt	mi
 800c188:	232b      	movmi	r3, #43	; 0x2b
 800c18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c18e:	f89a 3000 	ldrb.w	r3, [sl]
 800c192:	2b2a      	cmp	r3, #42	; 0x2a
 800c194:	d015      	beq.n	800c1c2 <_svfiprintf_r+0xf6>
 800c196:	9a07      	ldr	r2, [sp, #28]
 800c198:	4654      	mov	r4, sl
 800c19a:	2000      	movs	r0, #0
 800c19c:	f04f 0c0a 	mov.w	ip, #10
 800c1a0:	4621      	mov	r1, r4
 800c1a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1a6:	3b30      	subs	r3, #48	; 0x30
 800c1a8:	2b09      	cmp	r3, #9
 800c1aa:	d94e      	bls.n	800c24a <_svfiprintf_r+0x17e>
 800c1ac:	b1b0      	cbz	r0, 800c1dc <_svfiprintf_r+0x110>
 800c1ae:	9207      	str	r2, [sp, #28]
 800c1b0:	e014      	b.n	800c1dc <_svfiprintf_r+0x110>
 800c1b2:	eba0 0308 	sub.w	r3, r0, r8
 800c1b6:	fa09 f303 	lsl.w	r3, r9, r3
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	9304      	str	r3, [sp, #16]
 800c1be:	46a2      	mov	sl, r4
 800c1c0:	e7d2      	b.n	800c168 <_svfiprintf_r+0x9c>
 800c1c2:	9b03      	ldr	r3, [sp, #12]
 800c1c4:	1d19      	adds	r1, r3, #4
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	9103      	str	r1, [sp, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	bfbb      	ittet	lt
 800c1ce:	425b      	neglt	r3, r3
 800c1d0:	f042 0202 	orrlt.w	r2, r2, #2
 800c1d4:	9307      	strge	r3, [sp, #28]
 800c1d6:	9307      	strlt	r3, [sp, #28]
 800c1d8:	bfb8      	it	lt
 800c1da:	9204      	strlt	r2, [sp, #16]
 800c1dc:	7823      	ldrb	r3, [r4, #0]
 800c1de:	2b2e      	cmp	r3, #46	; 0x2e
 800c1e0:	d10c      	bne.n	800c1fc <_svfiprintf_r+0x130>
 800c1e2:	7863      	ldrb	r3, [r4, #1]
 800c1e4:	2b2a      	cmp	r3, #42	; 0x2a
 800c1e6:	d135      	bne.n	800c254 <_svfiprintf_r+0x188>
 800c1e8:	9b03      	ldr	r3, [sp, #12]
 800c1ea:	1d1a      	adds	r2, r3, #4
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	9203      	str	r2, [sp, #12]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	bfb8      	it	lt
 800c1f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c1f8:	3402      	adds	r4, #2
 800c1fa:	9305      	str	r3, [sp, #20]
 800c1fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c2c8 <_svfiprintf_r+0x1fc>
 800c200:	7821      	ldrb	r1, [r4, #0]
 800c202:	2203      	movs	r2, #3
 800c204:	4650      	mov	r0, sl
 800c206:	f7f4 f873 	bl	80002f0 <memchr>
 800c20a:	b140      	cbz	r0, 800c21e <_svfiprintf_r+0x152>
 800c20c:	2340      	movs	r3, #64	; 0x40
 800c20e:	eba0 000a 	sub.w	r0, r0, sl
 800c212:	fa03 f000 	lsl.w	r0, r3, r0
 800c216:	9b04      	ldr	r3, [sp, #16]
 800c218:	4303      	orrs	r3, r0
 800c21a:	3401      	adds	r4, #1
 800c21c:	9304      	str	r3, [sp, #16]
 800c21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c222:	4826      	ldr	r0, [pc, #152]	; (800c2bc <_svfiprintf_r+0x1f0>)
 800c224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c228:	2206      	movs	r2, #6
 800c22a:	f7f4 f861 	bl	80002f0 <memchr>
 800c22e:	2800      	cmp	r0, #0
 800c230:	d038      	beq.n	800c2a4 <_svfiprintf_r+0x1d8>
 800c232:	4b23      	ldr	r3, [pc, #140]	; (800c2c0 <_svfiprintf_r+0x1f4>)
 800c234:	bb1b      	cbnz	r3, 800c27e <_svfiprintf_r+0x1b2>
 800c236:	9b03      	ldr	r3, [sp, #12]
 800c238:	3307      	adds	r3, #7
 800c23a:	f023 0307 	bic.w	r3, r3, #7
 800c23e:	3308      	adds	r3, #8
 800c240:	9303      	str	r3, [sp, #12]
 800c242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c244:	4433      	add	r3, r6
 800c246:	9309      	str	r3, [sp, #36]	; 0x24
 800c248:	e767      	b.n	800c11a <_svfiprintf_r+0x4e>
 800c24a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c24e:	460c      	mov	r4, r1
 800c250:	2001      	movs	r0, #1
 800c252:	e7a5      	b.n	800c1a0 <_svfiprintf_r+0xd4>
 800c254:	2300      	movs	r3, #0
 800c256:	3401      	adds	r4, #1
 800c258:	9305      	str	r3, [sp, #20]
 800c25a:	4619      	mov	r1, r3
 800c25c:	f04f 0c0a 	mov.w	ip, #10
 800c260:	4620      	mov	r0, r4
 800c262:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c266:	3a30      	subs	r2, #48	; 0x30
 800c268:	2a09      	cmp	r2, #9
 800c26a:	d903      	bls.n	800c274 <_svfiprintf_r+0x1a8>
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d0c5      	beq.n	800c1fc <_svfiprintf_r+0x130>
 800c270:	9105      	str	r1, [sp, #20]
 800c272:	e7c3      	b.n	800c1fc <_svfiprintf_r+0x130>
 800c274:	fb0c 2101 	mla	r1, ip, r1, r2
 800c278:	4604      	mov	r4, r0
 800c27a:	2301      	movs	r3, #1
 800c27c:	e7f0      	b.n	800c260 <_svfiprintf_r+0x194>
 800c27e:	ab03      	add	r3, sp, #12
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	462a      	mov	r2, r5
 800c284:	4b0f      	ldr	r3, [pc, #60]	; (800c2c4 <_svfiprintf_r+0x1f8>)
 800c286:	a904      	add	r1, sp, #16
 800c288:	4638      	mov	r0, r7
 800c28a:	f3af 8000 	nop.w
 800c28e:	1c42      	adds	r2, r0, #1
 800c290:	4606      	mov	r6, r0
 800c292:	d1d6      	bne.n	800c242 <_svfiprintf_r+0x176>
 800c294:	89ab      	ldrh	r3, [r5, #12]
 800c296:	065b      	lsls	r3, r3, #25
 800c298:	f53f af2c 	bmi.w	800c0f4 <_svfiprintf_r+0x28>
 800c29c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c29e:	b01d      	add	sp, #116	; 0x74
 800c2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a4:	ab03      	add	r3, sp, #12
 800c2a6:	9300      	str	r3, [sp, #0]
 800c2a8:	462a      	mov	r2, r5
 800c2aa:	4b06      	ldr	r3, [pc, #24]	; (800c2c4 <_svfiprintf_r+0x1f8>)
 800c2ac:	a904      	add	r1, sp, #16
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	f000 f9d4 	bl	800c65c <_printf_i>
 800c2b4:	e7eb      	b.n	800c28e <_svfiprintf_r+0x1c2>
 800c2b6:	bf00      	nop
 800c2b8:	0800d4e2 	.word	0x0800d4e2
 800c2bc:	0800d4ec 	.word	0x0800d4ec
 800c2c0:	00000000 	.word	0x00000000
 800c2c4:	0800c015 	.word	0x0800c015
 800c2c8:	0800d4e8 	.word	0x0800d4e8

0800c2cc <__sfputc_r>:
 800c2cc:	6893      	ldr	r3, [r2, #8]
 800c2ce:	3b01      	subs	r3, #1
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	b410      	push	{r4}
 800c2d4:	6093      	str	r3, [r2, #8]
 800c2d6:	da08      	bge.n	800c2ea <__sfputc_r+0x1e>
 800c2d8:	6994      	ldr	r4, [r2, #24]
 800c2da:	42a3      	cmp	r3, r4
 800c2dc:	db01      	blt.n	800c2e2 <__sfputc_r+0x16>
 800c2de:	290a      	cmp	r1, #10
 800c2e0:	d103      	bne.n	800c2ea <__sfputc_r+0x1e>
 800c2e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2e6:	f000 baef 	b.w	800c8c8 <__swbuf_r>
 800c2ea:	6813      	ldr	r3, [r2, #0]
 800c2ec:	1c58      	adds	r0, r3, #1
 800c2ee:	6010      	str	r0, [r2, #0]
 800c2f0:	7019      	strb	r1, [r3, #0]
 800c2f2:	4608      	mov	r0, r1
 800c2f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2f8:	4770      	bx	lr

0800c2fa <__sfputs_r>:
 800c2fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2fc:	4606      	mov	r6, r0
 800c2fe:	460f      	mov	r7, r1
 800c300:	4614      	mov	r4, r2
 800c302:	18d5      	adds	r5, r2, r3
 800c304:	42ac      	cmp	r4, r5
 800c306:	d101      	bne.n	800c30c <__sfputs_r+0x12>
 800c308:	2000      	movs	r0, #0
 800c30a:	e007      	b.n	800c31c <__sfputs_r+0x22>
 800c30c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c310:	463a      	mov	r2, r7
 800c312:	4630      	mov	r0, r6
 800c314:	f7ff ffda 	bl	800c2cc <__sfputc_r>
 800c318:	1c43      	adds	r3, r0, #1
 800c31a:	d1f3      	bne.n	800c304 <__sfputs_r+0xa>
 800c31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c320 <_vfiprintf_r>:
 800c320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c324:	460d      	mov	r5, r1
 800c326:	b09d      	sub	sp, #116	; 0x74
 800c328:	4614      	mov	r4, r2
 800c32a:	4698      	mov	r8, r3
 800c32c:	4606      	mov	r6, r0
 800c32e:	b118      	cbz	r0, 800c338 <_vfiprintf_r+0x18>
 800c330:	6983      	ldr	r3, [r0, #24]
 800c332:	b90b      	cbnz	r3, 800c338 <_vfiprintf_r+0x18>
 800c334:	f000 fcaa 	bl	800cc8c <__sinit>
 800c338:	4b89      	ldr	r3, [pc, #548]	; (800c560 <_vfiprintf_r+0x240>)
 800c33a:	429d      	cmp	r5, r3
 800c33c:	d11b      	bne.n	800c376 <_vfiprintf_r+0x56>
 800c33e:	6875      	ldr	r5, [r6, #4]
 800c340:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c342:	07d9      	lsls	r1, r3, #31
 800c344:	d405      	bmi.n	800c352 <_vfiprintf_r+0x32>
 800c346:	89ab      	ldrh	r3, [r5, #12]
 800c348:	059a      	lsls	r2, r3, #22
 800c34a:	d402      	bmi.n	800c352 <_vfiprintf_r+0x32>
 800c34c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c34e:	f000 fd3b 	bl	800cdc8 <__retarget_lock_acquire_recursive>
 800c352:	89ab      	ldrh	r3, [r5, #12]
 800c354:	071b      	lsls	r3, r3, #28
 800c356:	d501      	bpl.n	800c35c <_vfiprintf_r+0x3c>
 800c358:	692b      	ldr	r3, [r5, #16]
 800c35a:	b9eb      	cbnz	r3, 800c398 <_vfiprintf_r+0x78>
 800c35c:	4629      	mov	r1, r5
 800c35e:	4630      	mov	r0, r6
 800c360:	f000 fb04 	bl	800c96c <__swsetup_r>
 800c364:	b1c0      	cbz	r0, 800c398 <_vfiprintf_r+0x78>
 800c366:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c368:	07dc      	lsls	r4, r3, #31
 800c36a:	d50e      	bpl.n	800c38a <_vfiprintf_r+0x6a>
 800c36c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c370:	b01d      	add	sp, #116	; 0x74
 800c372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c376:	4b7b      	ldr	r3, [pc, #492]	; (800c564 <_vfiprintf_r+0x244>)
 800c378:	429d      	cmp	r5, r3
 800c37a:	d101      	bne.n	800c380 <_vfiprintf_r+0x60>
 800c37c:	68b5      	ldr	r5, [r6, #8]
 800c37e:	e7df      	b.n	800c340 <_vfiprintf_r+0x20>
 800c380:	4b79      	ldr	r3, [pc, #484]	; (800c568 <_vfiprintf_r+0x248>)
 800c382:	429d      	cmp	r5, r3
 800c384:	bf08      	it	eq
 800c386:	68f5      	ldreq	r5, [r6, #12]
 800c388:	e7da      	b.n	800c340 <_vfiprintf_r+0x20>
 800c38a:	89ab      	ldrh	r3, [r5, #12]
 800c38c:	0598      	lsls	r0, r3, #22
 800c38e:	d4ed      	bmi.n	800c36c <_vfiprintf_r+0x4c>
 800c390:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c392:	f000 fd1a 	bl	800cdca <__retarget_lock_release_recursive>
 800c396:	e7e9      	b.n	800c36c <_vfiprintf_r+0x4c>
 800c398:	2300      	movs	r3, #0
 800c39a:	9309      	str	r3, [sp, #36]	; 0x24
 800c39c:	2320      	movs	r3, #32
 800c39e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3a6:	2330      	movs	r3, #48	; 0x30
 800c3a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c56c <_vfiprintf_r+0x24c>
 800c3ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3b0:	f04f 0901 	mov.w	r9, #1
 800c3b4:	4623      	mov	r3, r4
 800c3b6:	469a      	mov	sl, r3
 800c3b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3bc:	b10a      	cbz	r2, 800c3c2 <_vfiprintf_r+0xa2>
 800c3be:	2a25      	cmp	r2, #37	; 0x25
 800c3c0:	d1f9      	bne.n	800c3b6 <_vfiprintf_r+0x96>
 800c3c2:	ebba 0b04 	subs.w	fp, sl, r4
 800c3c6:	d00b      	beq.n	800c3e0 <_vfiprintf_r+0xc0>
 800c3c8:	465b      	mov	r3, fp
 800c3ca:	4622      	mov	r2, r4
 800c3cc:	4629      	mov	r1, r5
 800c3ce:	4630      	mov	r0, r6
 800c3d0:	f7ff ff93 	bl	800c2fa <__sfputs_r>
 800c3d4:	3001      	adds	r0, #1
 800c3d6:	f000 80aa 	beq.w	800c52e <_vfiprintf_r+0x20e>
 800c3da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3dc:	445a      	add	r2, fp
 800c3de:	9209      	str	r2, [sp, #36]	; 0x24
 800c3e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	f000 80a2 	beq.w	800c52e <_vfiprintf_r+0x20e>
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3f4:	f10a 0a01 	add.w	sl, sl, #1
 800c3f8:	9304      	str	r3, [sp, #16]
 800c3fa:	9307      	str	r3, [sp, #28]
 800c3fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c400:	931a      	str	r3, [sp, #104]	; 0x68
 800c402:	4654      	mov	r4, sl
 800c404:	2205      	movs	r2, #5
 800c406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c40a:	4858      	ldr	r0, [pc, #352]	; (800c56c <_vfiprintf_r+0x24c>)
 800c40c:	f7f3 ff70 	bl	80002f0 <memchr>
 800c410:	9a04      	ldr	r2, [sp, #16]
 800c412:	b9d8      	cbnz	r0, 800c44c <_vfiprintf_r+0x12c>
 800c414:	06d1      	lsls	r1, r2, #27
 800c416:	bf44      	itt	mi
 800c418:	2320      	movmi	r3, #32
 800c41a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c41e:	0713      	lsls	r3, r2, #28
 800c420:	bf44      	itt	mi
 800c422:	232b      	movmi	r3, #43	; 0x2b
 800c424:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c428:	f89a 3000 	ldrb.w	r3, [sl]
 800c42c:	2b2a      	cmp	r3, #42	; 0x2a
 800c42e:	d015      	beq.n	800c45c <_vfiprintf_r+0x13c>
 800c430:	9a07      	ldr	r2, [sp, #28]
 800c432:	4654      	mov	r4, sl
 800c434:	2000      	movs	r0, #0
 800c436:	f04f 0c0a 	mov.w	ip, #10
 800c43a:	4621      	mov	r1, r4
 800c43c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c440:	3b30      	subs	r3, #48	; 0x30
 800c442:	2b09      	cmp	r3, #9
 800c444:	d94e      	bls.n	800c4e4 <_vfiprintf_r+0x1c4>
 800c446:	b1b0      	cbz	r0, 800c476 <_vfiprintf_r+0x156>
 800c448:	9207      	str	r2, [sp, #28]
 800c44a:	e014      	b.n	800c476 <_vfiprintf_r+0x156>
 800c44c:	eba0 0308 	sub.w	r3, r0, r8
 800c450:	fa09 f303 	lsl.w	r3, r9, r3
 800c454:	4313      	orrs	r3, r2
 800c456:	9304      	str	r3, [sp, #16]
 800c458:	46a2      	mov	sl, r4
 800c45a:	e7d2      	b.n	800c402 <_vfiprintf_r+0xe2>
 800c45c:	9b03      	ldr	r3, [sp, #12]
 800c45e:	1d19      	adds	r1, r3, #4
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	9103      	str	r1, [sp, #12]
 800c464:	2b00      	cmp	r3, #0
 800c466:	bfbb      	ittet	lt
 800c468:	425b      	neglt	r3, r3
 800c46a:	f042 0202 	orrlt.w	r2, r2, #2
 800c46e:	9307      	strge	r3, [sp, #28]
 800c470:	9307      	strlt	r3, [sp, #28]
 800c472:	bfb8      	it	lt
 800c474:	9204      	strlt	r2, [sp, #16]
 800c476:	7823      	ldrb	r3, [r4, #0]
 800c478:	2b2e      	cmp	r3, #46	; 0x2e
 800c47a:	d10c      	bne.n	800c496 <_vfiprintf_r+0x176>
 800c47c:	7863      	ldrb	r3, [r4, #1]
 800c47e:	2b2a      	cmp	r3, #42	; 0x2a
 800c480:	d135      	bne.n	800c4ee <_vfiprintf_r+0x1ce>
 800c482:	9b03      	ldr	r3, [sp, #12]
 800c484:	1d1a      	adds	r2, r3, #4
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	9203      	str	r2, [sp, #12]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	bfb8      	it	lt
 800c48e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c492:	3402      	adds	r4, #2
 800c494:	9305      	str	r3, [sp, #20]
 800c496:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c57c <_vfiprintf_r+0x25c>
 800c49a:	7821      	ldrb	r1, [r4, #0]
 800c49c:	2203      	movs	r2, #3
 800c49e:	4650      	mov	r0, sl
 800c4a0:	f7f3 ff26 	bl	80002f0 <memchr>
 800c4a4:	b140      	cbz	r0, 800c4b8 <_vfiprintf_r+0x198>
 800c4a6:	2340      	movs	r3, #64	; 0x40
 800c4a8:	eba0 000a 	sub.w	r0, r0, sl
 800c4ac:	fa03 f000 	lsl.w	r0, r3, r0
 800c4b0:	9b04      	ldr	r3, [sp, #16]
 800c4b2:	4303      	orrs	r3, r0
 800c4b4:	3401      	adds	r4, #1
 800c4b6:	9304      	str	r3, [sp, #16]
 800c4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4bc:	482c      	ldr	r0, [pc, #176]	; (800c570 <_vfiprintf_r+0x250>)
 800c4be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4c2:	2206      	movs	r2, #6
 800c4c4:	f7f3 ff14 	bl	80002f0 <memchr>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	d03f      	beq.n	800c54c <_vfiprintf_r+0x22c>
 800c4cc:	4b29      	ldr	r3, [pc, #164]	; (800c574 <_vfiprintf_r+0x254>)
 800c4ce:	bb1b      	cbnz	r3, 800c518 <_vfiprintf_r+0x1f8>
 800c4d0:	9b03      	ldr	r3, [sp, #12]
 800c4d2:	3307      	adds	r3, #7
 800c4d4:	f023 0307 	bic.w	r3, r3, #7
 800c4d8:	3308      	adds	r3, #8
 800c4da:	9303      	str	r3, [sp, #12]
 800c4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4de:	443b      	add	r3, r7
 800c4e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c4e2:	e767      	b.n	800c3b4 <_vfiprintf_r+0x94>
 800c4e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4e8:	460c      	mov	r4, r1
 800c4ea:	2001      	movs	r0, #1
 800c4ec:	e7a5      	b.n	800c43a <_vfiprintf_r+0x11a>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	3401      	adds	r4, #1
 800c4f2:	9305      	str	r3, [sp, #20]
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	f04f 0c0a 	mov.w	ip, #10
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c500:	3a30      	subs	r2, #48	; 0x30
 800c502:	2a09      	cmp	r2, #9
 800c504:	d903      	bls.n	800c50e <_vfiprintf_r+0x1ee>
 800c506:	2b00      	cmp	r3, #0
 800c508:	d0c5      	beq.n	800c496 <_vfiprintf_r+0x176>
 800c50a:	9105      	str	r1, [sp, #20]
 800c50c:	e7c3      	b.n	800c496 <_vfiprintf_r+0x176>
 800c50e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c512:	4604      	mov	r4, r0
 800c514:	2301      	movs	r3, #1
 800c516:	e7f0      	b.n	800c4fa <_vfiprintf_r+0x1da>
 800c518:	ab03      	add	r3, sp, #12
 800c51a:	9300      	str	r3, [sp, #0]
 800c51c:	462a      	mov	r2, r5
 800c51e:	4b16      	ldr	r3, [pc, #88]	; (800c578 <_vfiprintf_r+0x258>)
 800c520:	a904      	add	r1, sp, #16
 800c522:	4630      	mov	r0, r6
 800c524:	f3af 8000 	nop.w
 800c528:	4607      	mov	r7, r0
 800c52a:	1c78      	adds	r0, r7, #1
 800c52c:	d1d6      	bne.n	800c4dc <_vfiprintf_r+0x1bc>
 800c52e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c530:	07d9      	lsls	r1, r3, #31
 800c532:	d405      	bmi.n	800c540 <_vfiprintf_r+0x220>
 800c534:	89ab      	ldrh	r3, [r5, #12]
 800c536:	059a      	lsls	r2, r3, #22
 800c538:	d402      	bmi.n	800c540 <_vfiprintf_r+0x220>
 800c53a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c53c:	f000 fc45 	bl	800cdca <__retarget_lock_release_recursive>
 800c540:	89ab      	ldrh	r3, [r5, #12]
 800c542:	065b      	lsls	r3, r3, #25
 800c544:	f53f af12 	bmi.w	800c36c <_vfiprintf_r+0x4c>
 800c548:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c54a:	e711      	b.n	800c370 <_vfiprintf_r+0x50>
 800c54c:	ab03      	add	r3, sp, #12
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	462a      	mov	r2, r5
 800c552:	4b09      	ldr	r3, [pc, #36]	; (800c578 <_vfiprintf_r+0x258>)
 800c554:	a904      	add	r1, sp, #16
 800c556:	4630      	mov	r0, r6
 800c558:	f000 f880 	bl	800c65c <_printf_i>
 800c55c:	e7e4      	b.n	800c528 <_vfiprintf_r+0x208>
 800c55e:	bf00      	nop
 800c560:	0800d538 	.word	0x0800d538
 800c564:	0800d558 	.word	0x0800d558
 800c568:	0800d518 	.word	0x0800d518
 800c56c:	0800d4e2 	.word	0x0800d4e2
 800c570:	0800d4ec 	.word	0x0800d4ec
 800c574:	00000000 	.word	0x00000000
 800c578:	0800c2fb 	.word	0x0800c2fb
 800c57c:	0800d4e8 	.word	0x0800d4e8

0800c580 <_printf_common>:
 800c580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c584:	4616      	mov	r6, r2
 800c586:	4699      	mov	r9, r3
 800c588:	688a      	ldr	r2, [r1, #8]
 800c58a:	690b      	ldr	r3, [r1, #16]
 800c58c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c590:	4293      	cmp	r3, r2
 800c592:	bfb8      	it	lt
 800c594:	4613      	movlt	r3, r2
 800c596:	6033      	str	r3, [r6, #0]
 800c598:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c59c:	4607      	mov	r7, r0
 800c59e:	460c      	mov	r4, r1
 800c5a0:	b10a      	cbz	r2, 800c5a6 <_printf_common+0x26>
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	6033      	str	r3, [r6, #0]
 800c5a6:	6823      	ldr	r3, [r4, #0]
 800c5a8:	0699      	lsls	r1, r3, #26
 800c5aa:	bf42      	ittt	mi
 800c5ac:	6833      	ldrmi	r3, [r6, #0]
 800c5ae:	3302      	addmi	r3, #2
 800c5b0:	6033      	strmi	r3, [r6, #0]
 800c5b2:	6825      	ldr	r5, [r4, #0]
 800c5b4:	f015 0506 	ands.w	r5, r5, #6
 800c5b8:	d106      	bne.n	800c5c8 <_printf_common+0x48>
 800c5ba:	f104 0a19 	add.w	sl, r4, #25
 800c5be:	68e3      	ldr	r3, [r4, #12]
 800c5c0:	6832      	ldr	r2, [r6, #0]
 800c5c2:	1a9b      	subs	r3, r3, r2
 800c5c4:	42ab      	cmp	r3, r5
 800c5c6:	dc26      	bgt.n	800c616 <_printf_common+0x96>
 800c5c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c5cc:	1e13      	subs	r3, r2, #0
 800c5ce:	6822      	ldr	r2, [r4, #0]
 800c5d0:	bf18      	it	ne
 800c5d2:	2301      	movne	r3, #1
 800c5d4:	0692      	lsls	r2, r2, #26
 800c5d6:	d42b      	bmi.n	800c630 <_printf_common+0xb0>
 800c5d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c5dc:	4649      	mov	r1, r9
 800c5de:	4638      	mov	r0, r7
 800c5e0:	47c0      	blx	r8
 800c5e2:	3001      	adds	r0, #1
 800c5e4:	d01e      	beq.n	800c624 <_printf_common+0xa4>
 800c5e6:	6823      	ldr	r3, [r4, #0]
 800c5e8:	68e5      	ldr	r5, [r4, #12]
 800c5ea:	6832      	ldr	r2, [r6, #0]
 800c5ec:	f003 0306 	and.w	r3, r3, #6
 800c5f0:	2b04      	cmp	r3, #4
 800c5f2:	bf08      	it	eq
 800c5f4:	1aad      	subeq	r5, r5, r2
 800c5f6:	68a3      	ldr	r3, [r4, #8]
 800c5f8:	6922      	ldr	r2, [r4, #16]
 800c5fa:	bf0c      	ite	eq
 800c5fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c600:	2500      	movne	r5, #0
 800c602:	4293      	cmp	r3, r2
 800c604:	bfc4      	itt	gt
 800c606:	1a9b      	subgt	r3, r3, r2
 800c608:	18ed      	addgt	r5, r5, r3
 800c60a:	2600      	movs	r6, #0
 800c60c:	341a      	adds	r4, #26
 800c60e:	42b5      	cmp	r5, r6
 800c610:	d11a      	bne.n	800c648 <_printf_common+0xc8>
 800c612:	2000      	movs	r0, #0
 800c614:	e008      	b.n	800c628 <_printf_common+0xa8>
 800c616:	2301      	movs	r3, #1
 800c618:	4652      	mov	r2, sl
 800c61a:	4649      	mov	r1, r9
 800c61c:	4638      	mov	r0, r7
 800c61e:	47c0      	blx	r8
 800c620:	3001      	adds	r0, #1
 800c622:	d103      	bne.n	800c62c <_printf_common+0xac>
 800c624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c62c:	3501      	adds	r5, #1
 800c62e:	e7c6      	b.n	800c5be <_printf_common+0x3e>
 800c630:	18e1      	adds	r1, r4, r3
 800c632:	1c5a      	adds	r2, r3, #1
 800c634:	2030      	movs	r0, #48	; 0x30
 800c636:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c63a:	4422      	add	r2, r4
 800c63c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c640:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c644:	3302      	adds	r3, #2
 800c646:	e7c7      	b.n	800c5d8 <_printf_common+0x58>
 800c648:	2301      	movs	r3, #1
 800c64a:	4622      	mov	r2, r4
 800c64c:	4649      	mov	r1, r9
 800c64e:	4638      	mov	r0, r7
 800c650:	47c0      	blx	r8
 800c652:	3001      	adds	r0, #1
 800c654:	d0e6      	beq.n	800c624 <_printf_common+0xa4>
 800c656:	3601      	adds	r6, #1
 800c658:	e7d9      	b.n	800c60e <_printf_common+0x8e>
	...

0800c65c <_printf_i>:
 800c65c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c660:	7e0f      	ldrb	r7, [r1, #24]
 800c662:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c664:	2f78      	cmp	r7, #120	; 0x78
 800c666:	4691      	mov	r9, r2
 800c668:	4680      	mov	r8, r0
 800c66a:	460c      	mov	r4, r1
 800c66c:	469a      	mov	sl, r3
 800c66e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c672:	d807      	bhi.n	800c684 <_printf_i+0x28>
 800c674:	2f62      	cmp	r7, #98	; 0x62
 800c676:	d80a      	bhi.n	800c68e <_printf_i+0x32>
 800c678:	2f00      	cmp	r7, #0
 800c67a:	f000 80d8 	beq.w	800c82e <_printf_i+0x1d2>
 800c67e:	2f58      	cmp	r7, #88	; 0x58
 800c680:	f000 80a3 	beq.w	800c7ca <_printf_i+0x16e>
 800c684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c688:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c68c:	e03a      	b.n	800c704 <_printf_i+0xa8>
 800c68e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c692:	2b15      	cmp	r3, #21
 800c694:	d8f6      	bhi.n	800c684 <_printf_i+0x28>
 800c696:	a101      	add	r1, pc, #4	; (adr r1, 800c69c <_printf_i+0x40>)
 800c698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c69c:	0800c6f5 	.word	0x0800c6f5
 800c6a0:	0800c709 	.word	0x0800c709
 800c6a4:	0800c685 	.word	0x0800c685
 800c6a8:	0800c685 	.word	0x0800c685
 800c6ac:	0800c685 	.word	0x0800c685
 800c6b0:	0800c685 	.word	0x0800c685
 800c6b4:	0800c709 	.word	0x0800c709
 800c6b8:	0800c685 	.word	0x0800c685
 800c6bc:	0800c685 	.word	0x0800c685
 800c6c0:	0800c685 	.word	0x0800c685
 800c6c4:	0800c685 	.word	0x0800c685
 800c6c8:	0800c815 	.word	0x0800c815
 800c6cc:	0800c739 	.word	0x0800c739
 800c6d0:	0800c7f7 	.word	0x0800c7f7
 800c6d4:	0800c685 	.word	0x0800c685
 800c6d8:	0800c685 	.word	0x0800c685
 800c6dc:	0800c837 	.word	0x0800c837
 800c6e0:	0800c685 	.word	0x0800c685
 800c6e4:	0800c739 	.word	0x0800c739
 800c6e8:	0800c685 	.word	0x0800c685
 800c6ec:	0800c685 	.word	0x0800c685
 800c6f0:	0800c7ff 	.word	0x0800c7ff
 800c6f4:	682b      	ldr	r3, [r5, #0]
 800c6f6:	1d1a      	adds	r2, r3, #4
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	602a      	str	r2, [r5, #0]
 800c6fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c700:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c704:	2301      	movs	r3, #1
 800c706:	e0a3      	b.n	800c850 <_printf_i+0x1f4>
 800c708:	6820      	ldr	r0, [r4, #0]
 800c70a:	6829      	ldr	r1, [r5, #0]
 800c70c:	0606      	lsls	r6, r0, #24
 800c70e:	f101 0304 	add.w	r3, r1, #4
 800c712:	d50a      	bpl.n	800c72a <_printf_i+0xce>
 800c714:	680e      	ldr	r6, [r1, #0]
 800c716:	602b      	str	r3, [r5, #0]
 800c718:	2e00      	cmp	r6, #0
 800c71a:	da03      	bge.n	800c724 <_printf_i+0xc8>
 800c71c:	232d      	movs	r3, #45	; 0x2d
 800c71e:	4276      	negs	r6, r6
 800c720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c724:	485e      	ldr	r0, [pc, #376]	; (800c8a0 <_printf_i+0x244>)
 800c726:	230a      	movs	r3, #10
 800c728:	e019      	b.n	800c75e <_printf_i+0x102>
 800c72a:	680e      	ldr	r6, [r1, #0]
 800c72c:	602b      	str	r3, [r5, #0]
 800c72e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c732:	bf18      	it	ne
 800c734:	b236      	sxthne	r6, r6
 800c736:	e7ef      	b.n	800c718 <_printf_i+0xbc>
 800c738:	682b      	ldr	r3, [r5, #0]
 800c73a:	6820      	ldr	r0, [r4, #0]
 800c73c:	1d19      	adds	r1, r3, #4
 800c73e:	6029      	str	r1, [r5, #0]
 800c740:	0601      	lsls	r1, r0, #24
 800c742:	d501      	bpl.n	800c748 <_printf_i+0xec>
 800c744:	681e      	ldr	r6, [r3, #0]
 800c746:	e002      	b.n	800c74e <_printf_i+0xf2>
 800c748:	0646      	lsls	r6, r0, #25
 800c74a:	d5fb      	bpl.n	800c744 <_printf_i+0xe8>
 800c74c:	881e      	ldrh	r6, [r3, #0]
 800c74e:	4854      	ldr	r0, [pc, #336]	; (800c8a0 <_printf_i+0x244>)
 800c750:	2f6f      	cmp	r7, #111	; 0x6f
 800c752:	bf0c      	ite	eq
 800c754:	2308      	moveq	r3, #8
 800c756:	230a      	movne	r3, #10
 800c758:	2100      	movs	r1, #0
 800c75a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c75e:	6865      	ldr	r5, [r4, #4]
 800c760:	60a5      	str	r5, [r4, #8]
 800c762:	2d00      	cmp	r5, #0
 800c764:	bfa2      	ittt	ge
 800c766:	6821      	ldrge	r1, [r4, #0]
 800c768:	f021 0104 	bicge.w	r1, r1, #4
 800c76c:	6021      	strge	r1, [r4, #0]
 800c76e:	b90e      	cbnz	r6, 800c774 <_printf_i+0x118>
 800c770:	2d00      	cmp	r5, #0
 800c772:	d04d      	beq.n	800c810 <_printf_i+0x1b4>
 800c774:	4615      	mov	r5, r2
 800c776:	fbb6 f1f3 	udiv	r1, r6, r3
 800c77a:	fb03 6711 	mls	r7, r3, r1, r6
 800c77e:	5dc7      	ldrb	r7, [r0, r7]
 800c780:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c784:	4637      	mov	r7, r6
 800c786:	42bb      	cmp	r3, r7
 800c788:	460e      	mov	r6, r1
 800c78a:	d9f4      	bls.n	800c776 <_printf_i+0x11a>
 800c78c:	2b08      	cmp	r3, #8
 800c78e:	d10b      	bne.n	800c7a8 <_printf_i+0x14c>
 800c790:	6823      	ldr	r3, [r4, #0]
 800c792:	07de      	lsls	r6, r3, #31
 800c794:	d508      	bpl.n	800c7a8 <_printf_i+0x14c>
 800c796:	6923      	ldr	r3, [r4, #16]
 800c798:	6861      	ldr	r1, [r4, #4]
 800c79a:	4299      	cmp	r1, r3
 800c79c:	bfde      	ittt	le
 800c79e:	2330      	movle	r3, #48	; 0x30
 800c7a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c7a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c7a8:	1b52      	subs	r2, r2, r5
 800c7aa:	6122      	str	r2, [r4, #16]
 800c7ac:	f8cd a000 	str.w	sl, [sp]
 800c7b0:	464b      	mov	r3, r9
 800c7b2:	aa03      	add	r2, sp, #12
 800c7b4:	4621      	mov	r1, r4
 800c7b6:	4640      	mov	r0, r8
 800c7b8:	f7ff fee2 	bl	800c580 <_printf_common>
 800c7bc:	3001      	adds	r0, #1
 800c7be:	d14c      	bne.n	800c85a <_printf_i+0x1fe>
 800c7c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7c4:	b004      	add	sp, #16
 800c7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ca:	4835      	ldr	r0, [pc, #212]	; (800c8a0 <_printf_i+0x244>)
 800c7cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c7d0:	6829      	ldr	r1, [r5, #0]
 800c7d2:	6823      	ldr	r3, [r4, #0]
 800c7d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c7d8:	6029      	str	r1, [r5, #0]
 800c7da:	061d      	lsls	r5, r3, #24
 800c7dc:	d514      	bpl.n	800c808 <_printf_i+0x1ac>
 800c7de:	07df      	lsls	r7, r3, #31
 800c7e0:	bf44      	itt	mi
 800c7e2:	f043 0320 	orrmi.w	r3, r3, #32
 800c7e6:	6023      	strmi	r3, [r4, #0]
 800c7e8:	b91e      	cbnz	r6, 800c7f2 <_printf_i+0x196>
 800c7ea:	6823      	ldr	r3, [r4, #0]
 800c7ec:	f023 0320 	bic.w	r3, r3, #32
 800c7f0:	6023      	str	r3, [r4, #0]
 800c7f2:	2310      	movs	r3, #16
 800c7f4:	e7b0      	b.n	800c758 <_printf_i+0xfc>
 800c7f6:	6823      	ldr	r3, [r4, #0]
 800c7f8:	f043 0320 	orr.w	r3, r3, #32
 800c7fc:	6023      	str	r3, [r4, #0]
 800c7fe:	2378      	movs	r3, #120	; 0x78
 800c800:	4828      	ldr	r0, [pc, #160]	; (800c8a4 <_printf_i+0x248>)
 800c802:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c806:	e7e3      	b.n	800c7d0 <_printf_i+0x174>
 800c808:	0659      	lsls	r1, r3, #25
 800c80a:	bf48      	it	mi
 800c80c:	b2b6      	uxthmi	r6, r6
 800c80e:	e7e6      	b.n	800c7de <_printf_i+0x182>
 800c810:	4615      	mov	r5, r2
 800c812:	e7bb      	b.n	800c78c <_printf_i+0x130>
 800c814:	682b      	ldr	r3, [r5, #0]
 800c816:	6826      	ldr	r6, [r4, #0]
 800c818:	6961      	ldr	r1, [r4, #20]
 800c81a:	1d18      	adds	r0, r3, #4
 800c81c:	6028      	str	r0, [r5, #0]
 800c81e:	0635      	lsls	r5, r6, #24
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	d501      	bpl.n	800c828 <_printf_i+0x1cc>
 800c824:	6019      	str	r1, [r3, #0]
 800c826:	e002      	b.n	800c82e <_printf_i+0x1d2>
 800c828:	0670      	lsls	r0, r6, #25
 800c82a:	d5fb      	bpl.n	800c824 <_printf_i+0x1c8>
 800c82c:	8019      	strh	r1, [r3, #0]
 800c82e:	2300      	movs	r3, #0
 800c830:	6123      	str	r3, [r4, #16]
 800c832:	4615      	mov	r5, r2
 800c834:	e7ba      	b.n	800c7ac <_printf_i+0x150>
 800c836:	682b      	ldr	r3, [r5, #0]
 800c838:	1d1a      	adds	r2, r3, #4
 800c83a:	602a      	str	r2, [r5, #0]
 800c83c:	681d      	ldr	r5, [r3, #0]
 800c83e:	6862      	ldr	r2, [r4, #4]
 800c840:	2100      	movs	r1, #0
 800c842:	4628      	mov	r0, r5
 800c844:	f7f3 fd54 	bl	80002f0 <memchr>
 800c848:	b108      	cbz	r0, 800c84e <_printf_i+0x1f2>
 800c84a:	1b40      	subs	r0, r0, r5
 800c84c:	6060      	str	r0, [r4, #4]
 800c84e:	6863      	ldr	r3, [r4, #4]
 800c850:	6123      	str	r3, [r4, #16]
 800c852:	2300      	movs	r3, #0
 800c854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c858:	e7a8      	b.n	800c7ac <_printf_i+0x150>
 800c85a:	6923      	ldr	r3, [r4, #16]
 800c85c:	462a      	mov	r2, r5
 800c85e:	4649      	mov	r1, r9
 800c860:	4640      	mov	r0, r8
 800c862:	47d0      	blx	sl
 800c864:	3001      	adds	r0, #1
 800c866:	d0ab      	beq.n	800c7c0 <_printf_i+0x164>
 800c868:	6823      	ldr	r3, [r4, #0]
 800c86a:	079b      	lsls	r3, r3, #30
 800c86c:	d413      	bmi.n	800c896 <_printf_i+0x23a>
 800c86e:	68e0      	ldr	r0, [r4, #12]
 800c870:	9b03      	ldr	r3, [sp, #12]
 800c872:	4298      	cmp	r0, r3
 800c874:	bfb8      	it	lt
 800c876:	4618      	movlt	r0, r3
 800c878:	e7a4      	b.n	800c7c4 <_printf_i+0x168>
 800c87a:	2301      	movs	r3, #1
 800c87c:	4632      	mov	r2, r6
 800c87e:	4649      	mov	r1, r9
 800c880:	4640      	mov	r0, r8
 800c882:	47d0      	blx	sl
 800c884:	3001      	adds	r0, #1
 800c886:	d09b      	beq.n	800c7c0 <_printf_i+0x164>
 800c888:	3501      	adds	r5, #1
 800c88a:	68e3      	ldr	r3, [r4, #12]
 800c88c:	9903      	ldr	r1, [sp, #12]
 800c88e:	1a5b      	subs	r3, r3, r1
 800c890:	42ab      	cmp	r3, r5
 800c892:	dcf2      	bgt.n	800c87a <_printf_i+0x21e>
 800c894:	e7eb      	b.n	800c86e <_printf_i+0x212>
 800c896:	2500      	movs	r5, #0
 800c898:	f104 0619 	add.w	r6, r4, #25
 800c89c:	e7f5      	b.n	800c88a <_printf_i+0x22e>
 800c89e:	bf00      	nop
 800c8a0:	0800d4f3 	.word	0x0800d4f3
 800c8a4:	0800d504 	.word	0x0800d504

0800c8a8 <_sbrk_r>:
 800c8a8:	b538      	push	{r3, r4, r5, lr}
 800c8aa:	4d06      	ldr	r5, [pc, #24]	; (800c8c4 <_sbrk_r+0x1c>)
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	4604      	mov	r4, r0
 800c8b0:	4608      	mov	r0, r1
 800c8b2:	602b      	str	r3, [r5, #0]
 800c8b4:	f7f4 fefe 	bl	80016b4 <_sbrk>
 800c8b8:	1c43      	adds	r3, r0, #1
 800c8ba:	d102      	bne.n	800c8c2 <_sbrk_r+0x1a>
 800c8bc:	682b      	ldr	r3, [r5, #0]
 800c8be:	b103      	cbz	r3, 800c8c2 <_sbrk_r+0x1a>
 800c8c0:	6023      	str	r3, [r4, #0]
 800c8c2:	bd38      	pop	{r3, r4, r5, pc}
 800c8c4:	240007bc 	.word	0x240007bc

0800c8c8 <__swbuf_r>:
 800c8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ca:	460e      	mov	r6, r1
 800c8cc:	4614      	mov	r4, r2
 800c8ce:	4605      	mov	r5, r0
 800c8d0:	b118      	cbz	r0, 800c8da <__swbuf_r+0x12>
 800c8d2:	6983      	ldr	r3, [r0, #24]
 800c8d4:	b90b      	cbnz	r3, 800c8da <__swbuf_r+0x12>
 800c8d6:	f000 f9d9 	bl	800cc8c <__sinit>
 800c8da:	4b21      	ldr	r3, [pc, #132]	; (800c960 <__swbuf_r+0x98>)
 800c8dc:	429c      	cmp	r4, r3
 800c8de:	d12b      	bne.n	800c938 <__swbuf_r+0x70>
 800c8e0:	686c      	ldr	r4, [r5, #4]
 800c8e2:	69a3      	ldr	r3, [r4, #24]
 800c8e4:	60a3      	str	r3, [r4, #8]
 800c8e6:	89a3      	ldrh	r3, [r4, #12]
 800c8e8:	071a      	lsls	r2, r3, #28
 800c8ea:	d52f      	bpl.n	800c94c <__swbuf_r+0x84>
 800c8ec:	6923      	ldr	r3, [r4, #16]
 800c8ee:	b36b      	cbz	r3, 800c94c <__swbuf_r+0x84>
 800c8f0:	6923      	ldr	r3, [r4, #16]
 800c8f2:	6820      	ldr	r0, [r4, #0]
 800c8f4:	1ac0      	subs	r0, r0, r3
 800c8f6:	6963      	ldr	r3, [r4, #20]
 800c8f8:	b2f6      	uxtb	r6, r6
 800c8fa:	4283      	cmp	r3, r0
 800c8fc:	4637      	mov	r7, r6
 800c8fe:	dc04      	bgt.n	800c90a <__swbuf_r+0x42>
 800c900:	4621      	mov	r1, r4
 800c902:	4628      	mov	r0, r5
 800c904:	f000 f92e 	bl	800cb64 <_fflush_r>
 800c908:	bb30      	cbnz	r0, 800c958 <__swbuf_r+0x90>
 800c90a:	68a3      	ldr	r3, [r4, #8]
 800c90c:	3b01      	subs	r3, #1
 800c90e:	60a3      	str	r3, [r4, #8]
 800c910:	6823      	ldr	r3, [r4, #0]
 800c912:	1c5a      	adds	r2, r3, #1
 800c914:	6022      	str	r2, [r4, #0]
 800c916:	701e      	strb	r6, [r3, #0]
 800c918:	6963      	ldr	r3, [r4, #20]
 800c91a:	3001      	adds	r0, #1
 800c91c:	4283      	cmp	r3, r0
 800c91e:	d004      	beq.n	800c92a <__swbuf_r+0x62>
 800c920:	89a3      	ldrh	r3, [r4, #12]
 800c922:	07db      	lsls	r3, r3, #31
 800c924:	d506      	bpl.n	800c934 <__swbuf_r+0x6c>
 800c926:	2e0a      	cmp	r6, #10
 800c928:	d104      	bne.n	800c934 <__swbuf_r+0x6c>
 800c92a:	4621      	mov	r1, r4
 800c92c:	4628      	mov	r0, r5
 800c92e:	f000 f919 	bl	800cb64 <_fflush_r>
 800c932:	b988      	cbnz	r0, 800c958 <__swbuf_r+0x90>
 800c934:	4638      	mov	r0, r7
 800c936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c938:	4b0a      	ldr	r3, [pc, #40]	; (800c964 <__swbuf_r+0x9c>)
 800c93a:	429c      	cmp	r4, r3
 800c93c:	d101      	bne.n	800c942 <__swbuf_r+0x7a>
 800c93e:	68ac      	ldr	r4, [r5, #8]
 800c940:	e7cf      	b.n	800c8e2 <__swbuf_r+0x1a>
 800c942:	4b09      	ldr	r3, [pc, #36]	; (800c968 <__swbuf_r+0xa0>)
 800c944:	429c      	cmp	r4, r3
 800c946:	bf08      	it	eq
 800c948:	68ec      	ldreq	r4, [r5, #12]
 800c94a:	e7ca      	b.n	800c8e2 <__swbuf_r+0x1a>
 800c94c:	4621      	mov	r1, r4
 800c94e:	4628      	mov	r0, r5
 800c950:	f000 f80c 	bl	800c96c <__swsetup_r>
 800c954:	2800      	cmp	r0, #0
 800c956:	d0cb      	beq.n	800c8f0 <__swbuf_r+0x28>
 800c958:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c95c:	e7ea      	b.n	800c934 <__swbuf_r+0x6c>
 800c95e:	bf00      	nop
 800c960:	0800d538 	.word	0x0800d538
 800c964:	0800d558 	.word	0x0800d558
 800c968:	0800d518 	.word	0x0800d518

0800c96c <__swsetup_r>:
 800c96c:	4b32      	ldr	r3, [pc, #200]	; (800ca38 <__swsetup_r+0xcc>)
 800c96e:	b570      	push	{r4, r5, r6, lr}
 800c970:	681d      	ldr	r5, [r3, #0]
 800c972:	4606      	mov	r6, r0
 800c974:	460c      	mov	r4, r1
 800c976:	b125      	cbz	r5, 800c982 <__swsetup_r+0x16>
 800c978:	69ab      	ldr	r3, [r5, #24]
 800c97a:	b913      	cbnz	r3, 800c982 <__swsetup_r+0x16>
 800c97c:	4628      	mov	r0, r5
 800c97e:	f000 f985 	bl	800cc8c <__sinit>
 800c982:	4b2e      	ldr	r3, [pc, #184]	; (800ca3c <__swsetup_r+0xd0>)
 800c984:	429c      	cmp	r4, r3
 800c986:	d10f      	bne.n	800c9a8 <__swsetup_r+0x3c>
 800c988:	686c      	ldr	r4, [r5, #4]
 800c98a:	89a3      	ldrh	r3, [r4, #12]
 800c98c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c990:	0719      	lsls	r1, r3, #28
 800c992:	d42c      	bmi.n	800c9ee <__swsetup_r+0x82>
 800c994:	06dd      	lsls	r5, r3, #27
 800c996:	d411      	bmi.n	800c9bc <__swsetup_r+0x50>
 800c998:	2309      	movs	r3, #9
 800c99a:	6033      	str	r3, [r6, #0]
 800c99c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9a0:	81a3      	strh	r3, [r4, #12]
 800c9a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c9a6:	e03e      	b.n	800ca26 <__swsetup_r+0xba>
 800c9a8:	4b25      	ldr	r3, [pc, #148]	; (800ca40 <__swsetup_r+0xd4>)
 800c9aa:	429c      	cmp	r4, r3
 800c9ac:	d101      	bne.n	800c9b2 <__swsetup_r+0x46>
 800c9ae:	68ac      	ldr	r4, [r5, #8]
 800c9b0:	e7eb      	b.n	800c98a <__swsetup_r+0x1e>
 800c9b2:	4b24      	ldr	r3, [pc, #144]	; (800ca44 <__swsetup_r+0xd8>)
 800c9b4:	429c      	cmp	r4, r3
 800c9b6:	bf08      	it	eq
 800c9b8:	68ec      	ldreq	r4, [r5, #12]
 800c9ba:	e7e6      	b.n	800c98a <__swsetup_r+0x1e>
 800c9bc:	0758      	lsls	r0, r3, #29
 800c9be:	d512      	bpl.n	800c9e6 <__swsetup_r+0x7a>
 800c9c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9c2:	b141      	cbz	r1, 800c9d6 <__swsetup_r+0x6a>
 800c9c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9c8:	4299      	cmp	r1, r3
 800c9ca:	d002      	beq.n	800c9d2 <__swsetup_r+0x66>
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	f7ff fa41 	bl	800be54 <_free_r>
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	6363      	str	r3, [r4, #52]	; 0x34
 800c9d6:	89a3      	ldrh	r3, [r4, #12]
 800c9d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c9dc:	81a3      	strh	r3, [r4, #12]
 800c9de:	2300      	movs	r3, #0
 800c9e0:	6063      	str	r3, [r4, #4]
 800c9e2:	6923      	ldr	r3, [r4, #16]
 800c9e4:	6023      	str	r3, [r4, #0]
 800c9e6:	89a3      	ldrh	r3, [r4, #12]
 800c9e8:	f043 0308 	orr.w	r3, r3, #8
 800c9ec:	81a3      	strh	r3, [r4, #12]
 800c9ee:	6923      	ldr	r3, [r4, #16]
 800c9f0:	b94b      	cbnz	r3, 800ca06 <__swsetup_r+0x9a>
 800c9f2:	89a3      	ldrh	r3, [r4, #12]
 800c9f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c9f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9fc:	d003      	beq.n	800ca06 <__swsetup_r+0x9a>
 800c9fe:	4621      	mov	r1, r4
 800ca00:	4630      	mov	r0, r6
 800ca02:	f000 fa09 	bl	800ce18 <__smakebuf_r>
 800ca06:	89a0      	ldrh	r0, [r4, #12]
 800ca08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca0c:	f010 0301 	ands.w	r3, r0, #1
 800ca10:	d00a      	beq.n	800ca28 <__swsetup_r+0xbc>
 800ca12:	2300      	movs	r3, #0
 800ca14:	60a3      	str	r3, [r4, #8]
 800ca16:	6963      	ldr	r3, [r4, #20]
 800ca18:	425b      	negs	r3, r3
 800ca1a:	61a3      	str	r3, [r4, #24]
 800ca1c:	6923      	ldr	r3, [r4, #16]
 800ca1e:	b943      	cbnz	r3, 800ca32 <__swsetup_r+0xc6>
 800ca20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca24:	d1ba      	bne.n	800c99c <__swsetup_r+0x30>
 800ca26:	bd70      	pop	{r4, r5, r6, pc}
 800ca28:	0781      	lsls	r1, r0, #30
 800ca2a:	bf58      	it	pl
 800ca2c:	6963      	ldrpl	r3, [r4, #20]
 800ca2e:	60a3      	str	r3, [r4, #8]
 800ca30:	e7f4      	b.n	800ca1c <__swsetup_r+0xb0>
 800ca32:	2000      	movs	r0, #0
 800ca34:	e7f7      	b.n	800ca26 <__swsetup_r+0xba>
 800ca36:	bf00      	nop
 800ca38:	24000038 	.word	0x24000038
 800ca3c:	0800d538 	.word	0x0800d538
 800ca40:	0800d558 	.word	0x0800d558
 800ca44:	0800d518 	.word	0x0800d518

0800ca48 <abort>:
 800ca48:	b508      	push	{r3, lr}
 800ca4a:	2006      	movs	r0, #6
 800ca4c:	f000 faa2 	bl	800cf94 <raise>
 800ca50:	2001      	movs	r0, #1
 800ca52:	f7f4 fdb7 	bl	80015c4 <_exit>
	...

0800ca58 <__sflush_r>:
 800ca58:	898a      	ldrh	r2, [r1, #12]
 800ca5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca5e:	4605      	mov	r5, r0
 800ca60:	0710      	lsls	r0, r2, #28
 800ca62:	460c      	mov	r4, r1
 800ca64:	d458      	bmi.n	800cb18 <__sflush_r+0xc0>
 800ca66:	684b      	ldr	r3, [r1, #4]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	dc05      	bgt.n	800ca78 <__sflush_r+0x20>
 800ca6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	dc02      	bgt.n	800ca78 <__sflush_r+0x20>
 800ca72:	2000      	movs	r0, #0
 800ca74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca7a:	2e00      	cmp	r6, #0
 800ca7c:	d0f9      	beq.n	800ca72 <__sflush_r+0x1a>
 800ca7e:	2300      	movs	r3, #0
 800ca80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ca84:	682f      	ldr	r7, [r5, #0]
 800ca86:	602b      	str	r3, [r5, #0]
 800ca88:	d032      	beq.n	800caf0 <__sflush_r+0x98>
 800ca8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ca8c:	89a3      	ldrh	r3, [r4, #12]
 800ca8e:	075a      	lsls	r2, r3, #29
 800ca90:	d505      	bpl.n	800ca9e <__sflush_r+0x46>
 800ca92:	6863      	ldr	r3, [r4, #4]
 800ca94:	1ac0      	subs	r0, r0, r3
 800ca96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca98:	b10b      	cbz	r3, 800ca9e <__sflush_r+0x46>
 800ca9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca9c:	1ac0      	subs	r0, r0, r3
 800ca9e:	2300      	movs	r3, #0
 800caa0:	4602      	mov	r2, r0
 800caa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800caa4:	6a21      	ldr	r1, [r4, #32]
 800caa6:	4628      	mov	r0, r5
 800caa8:	47b0      	blx	r6
 800caaa:	1c43      	adds	r3, r0, #1
 800caac:	89a3      	ldrh	r3, [r4, #12]
 800caae:	d106      	bne.n	800cabe <__sflush_r+0x66>
 800cab0:	6829      	ldr	r1, [r5, #0]
 800cab2:	291d      	cmp	r1, #29
 800cab4:	d82c      	bhi.n	800cb10 <__sflush_r+0xb8>
 800cab6:	4a2a      	ldr	r2, [pc, #168]	; (800cb60 <__sflush_r+0x108>)
 800cab8:	40ca      	lsrs	r2, r1
 800caba:	07d6      	lsls	r6, r2, #31
 800cabc:	d528      	bpl.n	800cb10 <__sflush_r+0xb8>
 800cabe:	2200      	movs	r2, #0
 800cac0:	6062      	str	r2, [r4, #4]
 800cac2:	04d9      	lsls	r1, r3, #19
 800cac4:	6922      	ldr	r2, [r4, #16]
 800cac6:	6022      	str	r2, [r4, #0]
 800cac8:	d504      	bpl.n	800cad4 <__sflush_r+0x7c>
 800caca:	1c42      	adds	r2, r0, #1
 800cacc:	d101      	bne.n	800cad2 <__sflush_r+0x7a>
 800cace:	682b      	ldr	r3, [r5, #0]
 800cad0:	b903      	cbnz	r3, 800cad4 <__sflush_r+0x7c>
 800cad2:	6560      	str	r0, [r4, #84]	; 0x54
 800cad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cad6:	602f      	str	r7, [r5, #0]
 800cad8:	2900      	cmp	r1, #0
 800cada:	d0ca      	beq.n	800ca72 <__sflush_r+0x1a>
 800cadc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cae0:	4299      	cmp	r1, r3
 800cae2:	d002      	beq.n	800caea <__sflush_r+0x92>
 800cae4:	4628      	mov	r0, r5
 800cae6:	f7ff f9b5 	bl	800be54 <_free_r>
 800caea:	2000      	movs	r0, #0
 800caec:	6360      	str	r0, [r4, #52]	; 0x34
 800caee:	e7c1      	b.n	800ca74 <__sflush_r+0x1c>
 800caf0:	6a21      	ldr	r1, [r4, #32]
 800caf2:	2301      	movs	r3, #1
 800caf4:	4628      	mov	r0, r5
 800caf6:	47b0      	blx	r6
 800caf8:	1c41      	adds	r1, r0, #1
 800cafa:	d1c7      	bne.n	800ca8c <__sflush_r+0x34>
 800cafc:	682b      	ldr	r3, [r5, #0]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d0c4      	beq.n	800ca8c <__sflush_r+0x34>
 800cb02:	2b1d      	cmp	r3, #29
 800cb04:	d001      	beq.n	800cb0a <__sflush_r+0xb2>
 800cb06:	2b16      	cmp	r3, #22
 800cb08:	d101      	bne.n	800cb0e <__sflush_r+0xb6>
 800cb0a:	602f      	str	r7, [r5, #0]
 800cb0c:	e7b1      	b.n	800ca72 <__sflush_r+0x1a>
 800cb0e:	89a3      	ldrh	r3, [r4, #12]
 800cb10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb14:	81a3      	strh	r3, [r4, #12]
 800cb16:	e7ad      	b.n	800ca74 <__sflush_r+0x1c>
 800cb18:	690f      	ldr	r7, [r1, #16]
 800cb1a:	2f00      	cmp	r7, #0
 800cb1c:	d0a9      	beq.n	800ca72 <__sflush_r+0x1a>
 800cb1e:	0793      	lsls	r3, r2, #30
 800cb20:	680e      	ldr	r6, [r1, #0]
 800cb22:	bf08      	it	eq
 800cb24:	694b      	ldreq	r3, [r1, #20]
 800cb26:	600f      	str	r7, [r1, #0]
 800cb28:	bf18      	it	ne
 800cb2a:	2300      	movne	r3, #0
 800cb2c:	eba6 0807 	sub.w	r8, r6, r7
 800cb30:	608b      	str	r3, [r1, #8]
 800cb32:	f1b8 0f00 	cmp.w	r8, #0
 800cb36:	dd9c      	ble.n	800ca72 <__sflush_r+0x1a>
 800cb38:	6a21      	ldr	r1, [r4, #32]
 800cb3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb3c:	4643      	mov	r3, r8
 800cb3e:	463a      	mov	r2, r7
 800cb40:	4628      	mov	r0, r5
 800cb42:	47b0      	blx	r6
 800cb44:	2800      	cmp	r0, #0
 800cb46:	dc06      	bgt.n	800cb56 <__sflush_r+0xfe>
 800cb48:	89a3      	ldrh	r3, [r4, #12]
 800cb4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb4e:	81a3      	strh	r3, [r4, #12]
 800cb50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb54:	e78e      	b.n	800ca74 <__sflush_r+0x1c>
 800cb56:	4407      	add	r7, r0
 800cb58:	eba8 0800 	sub.w	r8, r8, r0
 800cb5c:	e7e9      	b.n	800cb32 <__sflush_r+0xda>
 800cb5e:	bf00      	nop
 800cb60:	20400001 	.word	0x20400001

0800cb64 <_fflush_r>:
 800cb64:	b538      	push	{r3, r4, r5, lr}
 800cb66:	690b      	ldr	r3, [r1, #16]
 800cb68:	4605      	mov	r5, r0
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	b913      	cbnz	r3, 800cb74 <_fflush_r+0x10>
 800cb6e:	2500      	movs	r5, #0
 800cb70:	4628      	mov	r0, r5
 800cb72:	bd38      	pop	{r3, r4, r5, pc}
 800cb74:	b118      	cbz	r0, 800cb7e <_fflush_r+0x1a>
 800cb76:	6983      	ldr	r3, [r0, #24]
 800cb78:	b90b      	cbnz	r3, 800cb7e <_fflush_r+0x1a>
 800cb7a:	f000 f887 	bl	800cc8c <__sinit>
 800cb7e:	4b14      	ldr	r3, [pc, #80]	; (800cbd0 <_fflush_r+0x6c>)
 800cb80:	429c      	cmp	r4, r3
 800cb82:	d11b      	bne.n	800cbbc <_fflush_r+0x58>
 800cb84:	686c      	ldr	r4, [r5, #4]
 800cb86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d0ef      	beq.n	800cb6e <_fflush_r+0xa>
 800cb8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cb90:	07d0      	lsls	r0, r2, #31
 800cb92:	d404      	bmi.n	800cb9e <_fflush_r+0x3a>
 800cb94:	0599      	lsls	r1, r3, #22
 800cb96:	d402      	bmi.n	800cb9e <_fflush_r+0x3a>
 800cb98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb9a:	f000 f915 	bl	800cdc8 <__retarget_lock_acquire_recursive>
 800cb9e:	4628      	mov	r0, r5
 800cba0:	4621      	mov	r1, r4
 800cba2:	f7ff ff59 	bl	800ca58 <__sflush_r>
 800cba6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cba8:	07da      	lsls	r2, r3, #31
 800cbaa:	4605      	mov	r5, r0
 800cbac:	d4e0      	bmi.n	800cb70 <_fflush_r+0xc>
 800cbae:	89a3      	ldrh	r3, [r4, #12]
 800cbb0:	059b      	lsls	r3, r3, #22
 800cbb2:	d4dd      	bmi.n	800cb70 <_fflush_r+0xc>
 800cbb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbb6:	f000 f908 	bl	800cdca <__retarget_lock_release_recursive>
 800cbba:	e7d9      	b.n	800cb70 <_fflush_r+0xc>
 800cbbc:	4b05      	ldr	r3, [pc, #20]	; (800cbd4 <_fflush_r+0x70>)
 800cbbe:	429c      	cmp	r4, r3
 800cbc0:	d101      	bne.n	800cbc6 <_fflush_r+0x62>
 800cbc2:	68ac      	ldr	r4, [r5, #8]
 800cbc4:	e7df      	b.n	800cb86 <_fflush_r+0x22>
 800cbc6:	4b04      	ldr	r3, [pc, #16]	; (800cbd8 <_fflush_r+0x74>)
 800cbc8:	429c      	cmp	r4, r3
 800cbca:	bf08      	it	eq
 800cbcc:	68ec      	ldreq	r4, [r5, #12]
 800cbce:	e7da      	b.n	800cb86 <_fflush_r+0x22>
 800cbd0:	0800d538 	.word	0x0800d538
 800cbd4:	0800d558 	.word	0x0800d558
 800cbd8:	0800d518 	.word	0x0800d518

0800cbdc <std>:
 800cbdc:	2300      	movs	r3, #0
 800cbde:	b510      	push	{r4, lr}
 800cbe0:	4604      	mov	r4, r0
 800cbe2:	e9c0 3300 	strd	r3, r3, [r0]
 800cbe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cbea:	6083      	str	r3, [r0, #8]
 800cbec:	8181      	strh	r1, [r0, #12]
 800cbee:	6643      	str	r3, [r0, #100]	; 0x64
 800cbf0:	81c2      	strh	r2, [r0, #14]
 800cbf2:	6183      	str	r3, [r0, #24]
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	2208      	movs	r2, #8
 800cbf8:	305c      	adds	r0, #92	; 0x5c
 800cbfa:	f7ff f81f 	bl	800bc3c <memset>
 800cbfe:	4b05      	ldr	r3, [pc, #20]	; (800cc14 <std+0x38>)
 800cc00:	6263      	str	r3, [r4, #36]	; 0x24
 800cc02:	4b05      	ldr	r3, [pc, #20]	; (800cc18 <std+0x3c>)
 800cc04:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc06:	4b05      	ldr	r3, [pc, #20]	; (800cc1c <std+0x40>)
 800cc08:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc0a:	4b05      	ldr	r3, [pc, #20]	; (800cc20 <std+0x44>)
 800cc0c:	6224      	str	r4, [r4, #32]
 800cc0e:	6323      	str	r3, [r4, #48]	; 0x30
 800cc10:	bd10      	pop	{r4, pc}
 800cc12:	bf00      	nop
 800cc14:	0800cfcd 	.word	0x0800cfcd
 800cc18:	0800cfef 	.word	0x0800cfef
 800cc1c:	0800d027 	.word	0x0800d027
 800cc20:	0800d04b 	.word	0x0800d04b

0800cc24 <_cleanup_r>:
 800cc24:	4901      	ldr	r1, [pc, #4]	; (800cc2c <_cleanup_r+0x8>)
 800cc26:	f000 b8af 	b.w	800cd88 <_fwalk_reent>
 800cc2a:	bf00      	nop
 800cc2c:	0800cb65 	.word	0x0800cb65

0800cc30 <__sfmoreglue>:
 800cc30:	b570      	push	{r4, r5, r6, lr}
 800cc32:	2268      	movs	r2, #104	; 0x68
 800cc34:	1e4d      	subs	r5, r1, #1
 800cc36:	4355      	muls	r5, r2
 800cc38:	460e      	mov	r6, r1
 800cc3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cc3e:	f7ff f975 	bl	800bf2c <_malloc_r>
 800cc42:	4604      	mov	r4, r0
 800cc44:	b140      	cbz	r0, 800cc58 <__sfmoreglue+0x28>
 800cc46:	2100      	movs	r1, #0
 800cc48:	e9c0 1600 	strd	r1, r6, [r0]
 800cc4c:	300c      	adds	r0, #12
 800cc4e:	60a0      	str	r0, [r4, #8]
 800cc50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cc54:	f7fe fff2 	bl	800bc3c <memset>
 800cc58:	4620      	mov	r0, r4
 800cc5a:	bd70      	pop	{r4, r5, r6, pc}

0800cc5c <__sfp_lock_acquire>:
 800cc5c:	4801      	ldr	r0, [pc, #4]	; (800cc64 <__sfp_lock_acquire+0x8>)
 800cc5e:	f000 b8b3 	b.w	800cdc8 <__retarget_lock_acquire_recursive>
 800cc62:	bf00      	nop
 800cc64:	240007c1 	.word	0x240007c1

0800cc68 <__sfp_lock_release>:
 800cc68:	4801      	ldr	r0, [pc, #4]	; (800cc70 <__sfp_lock_release+0x8>)
 800cc6a:	f000 b8ae 	b.w	800cdca <__retarget_lock_release_recursive>
 800cc6e:	bf00      	nop
 800cc70:	240007c1 	.word	0x240007c1

0800cc74 <__sinit_lock_acquire>:
 800cc74:	4801      	ldr	r0, [pc, #4]	; (800cc7c <__sinit_lock_acquire+0x8>)
 800cc76:	f000 b8a7 	b.w	800cdc8 <__retarget_lock_acquire_recursive>
 800cc7a:	bf00      	nop
 800cc7c:	240007c2 	.word	0x240007c2

0800cc80 <__sinit_lock_release>:
 800cc80:	4801      	ldr	r0, [pc, #4]	; (800cc88 <__sinit_lock_release+0x8>)
 800cc82:	f000 b8a2 	b.w	800cdca <__retarget_lock_release_recursive>
 800cc86:	bf00      	nop
 800cc88:	240007c2 	.word	0x240007c2

0800cc8c <__sinit>:
 800cc8c:	b510      	push	{r4, lr}
 800cc8e:	4604      	mov	r4, r0
 800cc90:	f7ff fff0 	bl	800cc74 <__sinit_lock_acquire>
 800cc94:	69a3      	ldr	r3, [r4, #24]
 800cc96:	b11b      	cbz	r3, 800cca0 <__sinit+0x14>
 800cc98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc9c:	f7ff bff0 	b.w	800cc80 <__sinit_lock_release>
 800cca0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cca4:	6523      	str	r3, [r4, #80]	; 0x50
 800cca6:	4b13      	ldr	r3, [pc, #76]	; (800ccf4 <__sinit+0x68>)
 800cca8:	4a13      	ldr	r2, [pc, #76]	; (800ccf8 <__sinit+0x6c>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	62a2      	str	r2, [r4, #40]	; 0x28
 800ccae:	42a3      	cmp	r3, r4
 800ccb0:	bf04      	itt	eq
 800ccb2:	2301      	moveq	r3, #1
 800ccb4:	61a3      	streq	r3, [r4, #24]
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	f000 f820 	bl	800ccfc <__sfp>
 800ccbc:	6060      	str	r0, [r4, #4]
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	f000 f81c 	bl	800ccfc <__sfp>
 800ccc4:	60a0      	str	r0, [r4, #8]
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	f000 f818 	bl	800ccfc <__sfp>
 800cccc:	2200      	movs	r2, #0
 800ccce:	60e0      	str	r0, [r4, #12]
 800ccd0:	2104      	movs	r1, #4
 800ccd2:	6860      	ldr	r0, [r4, #4]
 800ccd4:	f7ff ff82 	bl	800cbdc <std>
 800ccd8:	68a0      	ldr	r0, [r4, #8]
 800ccda:	2201      	movs	r2, #1
 800ccdc:	2109      	movs	r1, #9
 800ccde:	f7ff ff7d 	bl	800cbdc <std>
 800cce2:	68e0      	ldr	r0, [r4, #12]
 800cce4:	2202      	movs	r2, #2
 800cce6:	2112      	movs	r1, #18
 800cce8:	f7ff ff78 	bl	800cbdc <std>
 800ccec:	2301      	movs	r3, #1
 800ccee:	61a3      	str	r3, [r4, #24]
 800ccf0:	e7d2      	b.n	800cc98 <__sinit+0xc>
 800ccf2:	bf00      	nop
 800ccf4:	0800d430 	.word	0x0800d430
 800ccf8:	0800cc25 	.word	0x0800cc25

0800ccfc <__sfp>:
 800ccfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfe:	4607      	mov	r7, r0
 800cd00:	f7ff ffac 	bl	800cc5c <__sfp_lock_acquire>
 800cd04:	4b1e      	ldr	r3, [pc, #120]	; (800cd80 <__sfp+0x84>)
 800cd06:	681e      	ldr	r6, [r3, #0]
 800cd08:	69b3      	ldr	r3, [r6, #24]
 800cd0a:	b913      	cbnz	r3, 800cd12 <__sfp+0x16>
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	f7ff ffbd 	bl	800cc8c <__sinit>
 800cd12:	3648      	adds	r6, #72	; 0x48
 800cd14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd18:	3b01      	subs	r3, #1
 800cd1a:	d503      	bpl.n	800cd24 <__sfp+0x28>
 800cd1c:	6833      	ldr	r3, [r6, #0]
 800cd1e:	b30b      	cbz	r3, 800cd64 <__sfp+0x68>
 800cd20:	6836      	ldr	r6, [r6, #0]
 800cd22:	e7f7      	b.n	800cd14 <__sfp+0x18>
 800cd24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd28:	b9d5      	cbnz	r5, 800cd60 <__sfp+0x64>
 800cd2a:	4b16      	ldr	r3, [pc, #88]	; (800cd84 <__sfp+0x88>)
 800cd2c:	60e3      	str	r3, [r4, #12]
 800cd2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cd32:	6665      	str	r5, [r4, #100]	; 0x64
 800cd34:	f000 f847 	bl	800cdc6 <__retarget_lock_init_recursive>
 800cd38:	f7ff ff96 	bl	800cc68 <__sfp_lock_release>
 800cd3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cd40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cd44:	6025      	str	r5, [r4, #0]
 800cd46:	61a5      	str	r5, [r4, #24]
 800cd48:	2208      	movs	r2, #8
 800cd4a:	4629      	mov	r1, r5
 800cd4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cd50:	f7fe ff74 	bl	800bc3c <memset>
 800cd54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cd58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd60:	3468      	adds	r4, #104	; 0x68
 800cd62:	e7d9      	b.n	800cd18 <__sfp+0x1c>
 800cd64:	2104      	movs	r1, #4
 800cd66:	4638      	mov	r0, r7
 800cd68:	f7ff ff62 	bl	800cc30 <__sfmoreglue>
 800cd6c:	4604      	mov	r4, r0
 800cd6e:	6030      	str	r0, [r6, #0]
 800cd70:	2800      	cmp	r0, #0
 800cd72:	d1d5      	bne.n	800cd20 <__sfp+0x24>
 800cd74:	f7ff ff78 	bl	800cc68 <__sfp_lock_release>
 800cd78:	230c      	movs	r3, #12
 800cd7a:	603b      	str	r3, [r7, #0]
 800cd7c:	e7ee      	b.n	800cd5c <__sfp+0x60>
 800cd7e:	bf00      	nop
 800cd80:	0800d430 	.word	0x0800d430
 800cd84:	ffff0001 	.word	0xffff0001

0800cd88 <_fwalk_reent>:
 800cd88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd8c:	4606      	mov	r6, r0
 800cd8e:	4688      	mov	r8, r1
 800cd90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cd94:	2700      	movs	r7, #0
 800cd96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd9a:	f1b9 0901 	subs.w	r9, r9, #1
 800cd9e:	d505      	bpl.n	800cdac <_fwalk_reent+0x24>
 800cda0:	6824      	ldr	r4, [r4, #0]
 800cda2:	2c00      	cmp	r4, #0
 800cda4:	d1f7      	bne.n	800cd96 <_fwalk_reent+0xe>
 800cda6:	4638      	mov	r0, r7
 800cda8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdac:	89ab      	ldrh	r3, [r5, #12]
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d907      	bls.n	800cdc2 <_fwalk_reent+0x3a>
 800cdb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	d003      	beq.n	800cdc2 <_fwalk_reent+0x3a>
 800cdba:	4629      	mov	r1, r5
 800cdbc:	4630      	mov	r0, r6
 800cdbe:	47c0      	blx	r8
 800cdc0:	4307      	orrs	r7, r0
 800cdc2:	3568      	adds	r5, #104	; 0x68
 800cdc4:	e7e9      	b.n	800cd9a <_fwalk_reent+0x12>

0800cdc6 <__retarget_lock_init_recursive>:
 800cdc6:	4770      	bx	lr

0800cdc8 <__retarget_lock_acquire_recursive>:
 800cdc8:	4770      	bx	lr

0800cdca <__retarget_lock_release_recursive>:
 800cdca:	4770      	bx	lr

0800cdcc <__swhatbuf_r>:
 800cdcc:	b570      	push	{r4, r5, r6, lr}
 800cdce:	460e      	mov	r6, r1
 800cdd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdd4:	2900      	cmp	r1, #0
 800cdd6:	b096      	sub	sp, #88	; 0x58
 800cdd8:	4614      	mov	r4, r2
 800cdda:	461d      	mov	r5, r3
 800cddc:	da08      	bge.n	800cdf0 <__swhatbuf_r+0x24>
 800cdde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cde2:	2200      	movs	r2, #0
 800cde4:	602a      	str	r2, [r5, #0]
 800cde6:	061a      	lsls	r2, r3, #24
 800cde8:	d410      	bmi.n	800ce0c <__swhatbuf_r+0x40>
 800cdea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdee:	e00e      	b.n	800ce0e <__swhatbuf_r+0x42>
 800cdf0:	466a      	mov	r2, sp
 800cdf2:	f000 f951 	bl	800d098 <_fstat_r>
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	dbf1      	blt.n	800cdde <__swhatbuf_r+0x12>
 800cdfa:	9a01      	ldr	r2, [sp, #4]
 800cdfc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ce04:	425a      	negs	r2, r3
 800ce06:	415a      	adcs	r2, r3
 800ce08:	602a      	str	r2, [r5, #0]
 800ce0a:	e7ee      	b.n	800cdea <__swhatbuf_r+0x1e>
 800ce0c:	2340      	movs	r3, #64	; 0x40
 800ce0e:	2000      	movs	r0, #0
 800ce10:	6023      	str	r3, [r4, #0]
 800ce12:	b016      	add	sp, #88	; 0x58
 800ce14:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ce18 <__smakebuf_r>:
 800ce18:	898b      	ldrh	r3, [r1, #12]
 800ce1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce1c:	079d      	lsls	r5, r3, #30
 800ce1e:	4606      	mov	r6, r0
 800ce20:	460c      	mov	r4, r1
 800ce22:	d507      	bpl.n	800ce34 <__smakebuf_r+0x1c>
 800ce24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce28:	6023      	str	r3, [r4, #0]
 800ce2a:	6123      	str	r3, [r4, #16]
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	6163      	str	r3, [r4, #20]
 800ce30:	b002      	add	sp, #8
 800ce32:	bd70      	pop	{r4, r5, r6, pc}
 800ce34:	ab01      	add	r3, sp, #4
 800ce36:	466a      	mov	r2, sp
 800ce38:	f7ff ffc8 	bl	800cdcc <__swhatbuf_r>
 800ce3c:	9900      	ldr	r1, [sp, #0]
 800ce3e:	4605      	mov	r5, r0
 800ce40:	4630      	mov	r0, r6
 800ce42:	f7ff f873 	bl	800bf2c <_malloc_r>
 800ce46:	b948      	cbnz	r0, 800ce5c <__smakebuf_r+0x44>
 800ce48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce4c:	059a      	lsls	r2, r3, #22
 800ce4e:	d4ef      	bmi.n	800ce30 <__smakebuf_r+0x18>
 800ce50:	f023 0303 	bic.w	r3, r3, #3
 800ce54:	f043 0302 	orr.w	r3, r3, #2
 800ce58:	81a3      	strh	r3, [r4, #12]
 800ce5a:	e7e3      	b.n	800ce24 <__smakebuf_r+0xc>
 800ce5c:	4b0d      	ldr	r3, [pc, #52]	; (800ce94 <__smakebuf_r+0x7c>)
 800ce5e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce60:	89a3      	ldrh	r3, [r4, #12]
 800ce62:	6020      	str	r0, [r4, #0]
 800ce64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce68:	81a3      	strh	r3, [r4, #12]
 800ce6a:	9b00      	ldr	r3, [sp, #0]
 800ce6c:	6163      	str	r3, [r4, #20]
 800ce6e:	9b01      	ldr	r3, [sp, #4]
 800ce70:	6120      	str	r0, [r4, #16]
 800ce72:	b15b      	cbz	r3, 800ce8c <__smakebuf_r+0x74>
 800ce74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce78:	4630      	mov	r0, r6
 800ce7a:	f000 f91f 	bl	800d0bc <_isatty_r>
 800ce7e:	b128      	cbz	r0, 800ce8c <__smakebuf_r+0x74>
 800ce80:	89a3      	ldrh	r3, [r4, #12]
 800ce82:	f023 0303 	bic.w	r3, r3, #3
 800ce86:	f043 0301 	orr.w	r3, r3, #1
 800ce8a:	81a3      	strh	r3, [r4, #12]
 800ce8c:	89a0      	ldrh	r0, [r4, #12]
 800ce8e:	4305      	orrs	r5, r0
 800ce90:	81a5      	strh	r5, [r4, #12]
 800ce92:	e7cd      	b.n	800ce30 <__smakebuf_r+0x18>
 800ce94:	0800cc25 	.word	0x0800cc25

0800ce98 <memmove>:
 800ce98:	4288      	cmp	r0, r1
 800ce9a:	b510      	push	{r4, lr}
 800ce9c:	eb01 0402 	add.w	r4, r1, r2
 800cea0:	d902      	bls.n	800cea8 <memmove+0x10>
 800cea2:	4284      	cmp	r4, r0
 800cea4:	4623      	mov	r3, r4
 800cea6:	d807      	bhi.n	800ceb8 <memmove+0x20>
 800cea8:	1e43      	subs	r3, r0, #1
 800ceaa:	42a1      	cmp	r1, r4
 800ceac:	d008      	beq.n	800cec0 <memmove+0x28>
 800ceae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ceb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ceb6:	e7f8      	b.n	800ceaa <memmove+0x12>
 800ceb8:	4402      	add	r2, r0
 800ceba:	4601      	mov	r1, r0
 800cebc:	428a      	cmp	r2, r1
 800cebe:	d100      	bne.n	800cec2 <memmove+0x2a>
 800cec0:	bd10      	pop	{r4, pc}
 800cec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cec6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ceca:	e7f7      	b.n	800cebc <memmove+0x24>

0800cecc <__malloc_lock>:
 800cecc:	4801      	ldr	r0, [pc, #4]	; (800ced4 <__malloc_lock+0x8>)
 800cece:	f7ff bf7b 	b.w	800cdc8 <__retarget_lock_acquire_recursive>
 800ced2:	bf00      	nop
 800ced4:	240007c0 	.word	0x240007c0

0800ced8 <__malloc_unlock>:
 800ced8:	4801      	ldr	r0, [pc, #4]	; (800cee0 <__malloc_unlock+0x8>)
 800ceda:	f7ff bf76 	b.w	800cdca <__retarget_lock_release_recursive>
 800cede:	bf00      	nop
 800cee0:	240007c0 	.word	0x240007c0

0800cee4 <_realloc_r>:
 800cee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cee8:	4680      	mov	r8, r0
 800ceea:	4614      	mov	r4, r2
 800ceec:	460e      	mov	r6, r1
 800ceee:	b921      	cbnz	r1, 800cefa <_realloc_r+0x16>
 800cef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cef4:	4611      	mov	r1, r2
 800cef6:	f7ff b819 	b.w	800bf2c <_malloc_r>
 800cefa:	b92a      	cbnz	r2, 800cf08 <_realloc_r+0x24>
 800cefc:	f7fe ffaa 	bl	800be54 <_free_r>
 800cf00:	4625      	mov	r5, r4
 800cf02:	4628      	mov	r0, r5
 800cf04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf08:	f000 f8fa 	bl	800d100 <_malloc_usable_size_r>
 800cf0c:	4284      	cmp	r4, r0
 800cf0e:	4607      	mov	r7, r0
 800cf10:	d802      	bhi.n	800cf18 <_realloc_r+0x34>
 800cf12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf16:	d812      	bhi.n	800cf3e <_realloc_r+0x5a>
 800cf18:	4621      	mov	r1, r4
 800cf1a:	4640      	mov	r0, r8
 800cf1c:	f7ff f806 	bl	800bf2c <_malloc_r>
 800cf20:	4605      	mov	r5, r0
 800cf22:	2800      	cmp	r0, #0
 800cf24:	d0ed      	beq.n	800cf02 <_realloc_r+0x1e>
 800cf26:	42bc      	cmp	r4, r7
 800cf28:	4622      	mov	r2, r4
 800cf2a:	4631      	mov	r1, r6
 800cf2c:	bf28      	it	cs
 800cf2e:	463a      	movcs	r2, r7
 800cf30:	f7fe fe76 	bl	800bc20 <memcpy>
 800cf34:	4631      	mov	r1, r6
 800cf36:	4640      	mov	r0, r8
 800cf38:	f7fe ff8c 	bl	800be54 <_free_r>
 800cf3c:	e7e1      	b.n	800cf02 <_realloc_r+0x1e>
 800cf3e:	4635      	mov	r5, r6
 800cf40:	e7df      	b.n	800cf02 <_realloc_r+0x1e>

0800cf42 <_raise_r>:
 800cf42:	291f      	cmp	r1, #31
 800cf44:	b538      	push	{r3, r4, r5, lr}
 800cf46:	4604      	mov	r4, r0
 800cf48:	460d      	mov	r5, r1
 800cf4a:	d904      	bls.n	800cf56 <_raise_r+0x14>
 800cf4c:	2316      	movs	r3, #22
 800cf4e:	6003      	str	r3, [r0, #0]
 800cf50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf54:	bd38      	pop	{r3, r4, r5, pc}
 800cf56:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cf58:	b112      	cbz	r2, 800cf60 <_raise_r+0x1e>
 800cf5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf5e:	b94b      	cbnz	r3, 800cf74 <_raise_r+0x32>
 800cf60:	4620      	mov	r0, r4
 800cf62:	f000 f831 	bl	800cfc8 <_getpid_r>
 800cf66:	462a      	mov	r2, r5
 800cf68:	4601      	mov	r1, r0
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf70:	f000 b818 	b.w	800cfa4 <_kill_r>
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d00a      	beq.n	800cf8e <_raise_r+0x4c>
 800cf78:	1c59      	adds	r1, r3, #1
 800cf7a:	d103      	bne.n	800cf84 <_raise_r+0x42>
 800cf7c:	2316      	movs	r3, #22
 800cf7e:	6003      	str	r3, [r0, #0]
 800cf80:	2001      	movs	r0, #1
 800cf82:	e7e7      	b.n	800cf54 <_raise_r+0x12>
 800cf84:	2400      	movs	r4, #0
 800cf86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	4798      	blx	r3
 800cf8e:	2000      	movs	r0, #0
 800cf90:	e7e0      	b.n	800cf54 <_raise_r+0x12>
	...

0800cf94 <raise>:
 800cf94:	4b02      	ldr	r3, [pc, #8]	; (800cfa0 <raise+0xc>)
 800cf96:	4601      	mov	r1, r0
 800cf98:	6818      	ldr	r0, [r3, #0]
 800cf9a:	f7ff bfd2 	b.w	800cf42 <_raise_r>
 800cf9e:	bf00      	nop
 800cfa0:	24000038 	.word	0x24000038

0800cfa4 <_kill_r>:
 800cfa4:	b538      	push	{r3, r4, r5, lr}
 800cfa6:	4d07      	ldr	r5, [pc, #28]	; (800cfc4 <_kill_r+0x20>)
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	4604      	mov	r4, r0
 800cfac:	4608      	mov	r0, r1
 800cfae:	4611      	mov	r1, r2
 800cfb0:	602b      	str	r3, [r5, #0]
 800cfb2:	f7f4 faf7 	bl	80015a4 <_kill>
 800cfb6:	1c43      	adds	r3, r0, #1
 800cfb8:	d102      	bne.n	800cfc0 <_kill_r+0x1c>
 800cfba:	682b      	ldr	r3, [r5, #0]
 800cfbc:	b103      	cbz	r3, 800cfc0 <_kill_r+0x1c>
 800cfbe:	6023      	str	r3, [r4, #0]
 800cfc0:	bd38      	pop	{r3, r4, r5, pc}
 800cfc2:	bf00      	nop
 800cfc4:	240007bc 	.word	0x240007bc

0800cfc8 <_getpid_r>:
 800cfc8:	f7f4 bae4 	b.w	8001594 <_getpid>

0800cfcc <__sread>:
 800cfcc:	b510      	push	{r4, lr}
 800cfce:	460c      	mov	r4, r1
 800cfd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfd4:	f000 f89c 	bl	800d110 <_read_r>
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	bfab      	itete	ge
 800cfdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cfde:	89a3      	ldrhlt	r3, [r4, #12]
 800cfe0:	181b      	addge	r3, r3, r0
 800cfe2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cfe6:	bfac      	ite	ge
 800cfe8:	6563      	strge	r3, [r4, #84]	; 0x54
 800cfea:	81a3      	strhlt	r3, [r4, #12]
 800cfec:	bd10      	pop	{r4, pc}

0800cfee <__swrite>:
 800cfee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cff2:	461f      	mov	r7, r3
 800cff4:	898b      	ldrh	r3, [r1, #12]
 800cff6:	05db      	lsls	r3, r3, #23
 800cff8:	4605      	mov	r5, r0
 800cffa:	460c      	mov	r4, r1
 800cffc:	4616      	mov	r6, r2
 800cffe:	d505      	bpl.n	800d00c <__swrite+0x1e>
 800d000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d004:	2302      	movs	r3, #2
 800d006:	2200      	movs	r2, #0
 800d008:	f000 f868 	bl	800d0dc <_lseek_r>
 800d00c:	89a3      	ldrh	r3, [r4, #12]
 800d00e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d012:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d016:	81a3      	strh	r3, [r4, #12]
 800d018:	4632      	mov	r2, r6
 800d01a:	463b      	mov	r3, r7
 800d01c:	4628      	mov	r0, r5
 800d01e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d022:	f000 b817 	b.w	800d054 <_write_r>

0800d026 <__sseek>:
 800d026:	b510      	push	{r4, lr}
 800d028:	460c      	mov	r4, r1
 800d02a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d02e:	f000 f855 	bl	800d0dc <_lseek_r>
 800d032:	1c43      	adds	r3, r0, #1
 800d034:	89a3      	ldrh	r3, [r4, #12]
 800d036:	bf15      	itete	ne
 800d038:	6560      	strne	r0, [r4, #84]	; 0x54
 800d03a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d03e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d042:	81a3      	strheq	r3, [r4, #12]
 800d044:	bf18      	it	ne
 800d046:	81a3      	strhne	r3, [r4, #12]
 800d048:	bd10      	pop	{r4, pc}

0800d04a <__sclose>:
 800d04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d04e:	f000 b813 	b.w	800d078 <_close_r>
	...

0800d054 <_write_r>:
 800d054:	b538      	push	{r3, r4, r5, lr}
 800d056:	4d07      	ldr	r5, [pc, #28]	; (800d074 <_write_r+0x20>)
 800d058:	4604      	mov	r4, r0
 800d05a:	4608      	mov	r0, r1
 800d05c:	4611      	mov	r1, r2
 800d05e:	2200      	movs	r2, #0
 800d060:	602a      	str	r2, [r5, #0]
 800d062:	461a      	mov	r2, r3
 800d064:	f7f4 fad5 	bl	8001612 <_write>
 800d068:	1c43      	adds	r3, r0, #1
 800d06a:	d102      	bne.n	800d072 <_write_r+0x1e>
 800d06c:	682b      	ldr	r3, [r5, #0]
 800d06e:	b103      	cbz	r3, 800d072 <_write_r+0x1e>
 800d070:	6023      	str	r3, [r4, #0]
 800d072:	bd38      	pop	{r3, r4, r5, pc}
 800d074:	240007bc 	.word	0x240007bc

0800d078 <_close_r>:
 800d078:	b538      	push	{r3, r4, r5, lr}
 800d07a:	4d06      	ldr	r5, [pc, #24]	; (800d094 <_close_r+0x1c>)
 800d07c:	2300      	movs	r3, #0
 800d07e:	4604      	mov	r4, r0
 800d080:	4608      	mov	r0, r1
 800d082:	602b      	str	r3, [r5, #0]
 800d084:	f7f4 fae1 	bl	800164a <_close>
 800d088:	1c43      	adds	r3, r0, #1
 800d08a:	d102      	bne.n	800d092 <_close_r+0x1a>
 800d08c:	682b      	ldr	r3, [r5, #0]
 800d08e:	b103      	cbz	r3, 800d092 <_close_r+0x1a>
 800d090:	6023      	str	r3, [r4, #0]
 800d092:	bd38      	pop	{r3, r4, r5, pc}
 800d094:	240007bc 	.word	0x240007bc

0800d098 <_fstat_r>:
 800d098:	b538      	push	{r3, r4, r5, lr}
 800d09a:	4d07      	ldr	r5, [pc, #28]	; (800d0b8 <_fstat_r+0x20>)
 800d09c:	2300      	movs	r3, #0
 800d09e:	4604      	mov	r4, r0
 800d0a0:	4608      	mov	r0, r1
 800d0a2:	4611      	mov	r1, r2
 800d0a4:	602b      	str	r3, [r5, #0]
 800d0a6:	f7f4 fadc 	bl	8001662 <_fstat>
 800d0aa:	1c43      	adds	r3, r0, #1
 800d0ac:	d102      	bne.n	800d0b4 <_fstat_r+0x1c>
 800d0ae:	682b      	ldr	r3, [r5, #0]
 800d0b0:	b103      	cbz	r3, 800d0b4 <_fstat_r+0x1c>
 800d0b2:	6023      	str	r3, [r4, #0]
 800d0b4:	bd38      	pop	{r3, r4, r5, pc}
 800d0b6:	bf00      	nop
 800d0b8:	240007bc 	.word	0x240007bc

0800d0bc <_isatty_r>:
 800d0bc:	b538      	push	{r3, r4, r5, lr}
 800d0be:	4d06      	ldr	r5, [pc, #24]	; (800d0d8 <_isatty_r+0x1c>)
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	4608      	mov	r0, r1
 800d0c6:	602b      	str	r3, [r5, #0]
 800d0c8:	f7f4 fadb 	bl	8001682 <_isatty>
 800d0cc:	1c43      	adds	r3, r0, #1
 800d0ce:	d102      	bne.n	800d0d6 <_isatty_r+0x1a>
 800d0d0:	682b      	ldr	r3, [r5, #0]
 800d0d2:	b103      	cbz	r3, 800d0d6 <_isatty_r+0x1a>
 800d0d4:	6023      	str	r3, [r4, #0]
 800d0d6:	bd38      	pop	{r3, r4, r5, pc}
 800d0d8:	240007bc 	.word	0x240007bc

0800d0dc <_lseek_r>:
 800d0dc:	b538      	push	{r3, r4, r5, lr}
 800d0de:	4d07      	ldr	r5, [pc, #28]	; (800d0fc <_lseek_r+0x20>)
 800d0e0:	4604      	mov	r4, r0
 800d0e2:	4608      	mov	r0, r1
 800d0e4:	4611      	mov	r1, r2
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	602a      	str	r2, [r5, #0]
 800d0ea:	461a      	mov	r2, r3
 800d0ec:	f7f4 fad4 	bl	8001698 <_lseek>
 800d0f0:	1c43      	adds	r3, r0, #1
 800d0f2:	d102      	bne.n	800d0fa <_lseek_r+0x1e>
 800d0f4:	682b      	ldr	r3, [r5, #0]
 800d0f6:	b103      	cbz	r3, 800d0fa <_lseek_r+0x1e>
 800d0f8:	6023      	str	r3, [r4, #0]
 800d0fa:	bd38      	pop	{r3, r4, r5, pc}
 800d0fc:	240007bc 	.word	0x240007bc

0800d100 <_malloc_usable_size_r>:
 800d100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d104:	1f18      	subs	r0, r3, #4
 800d106:	2b00      	cmp	r3, #0
 800d108:	bfbc      	itt	lt
 800d10a:	580b      	ldrlt	r3, [r1, r0]
 800d10c:	18c0      	addlt	r0, r0, r3
 800d10e:	4770      	bx	lr

0800d110 <_read_r>:
 800d110:	b538      	push	{r3, r4, r5, lr}
 800d112:	4d07      	ldr	r5, [pc, #28]	; (800d130 <_read_r+0x20>)
 800d114:	4604      	mov	r4, r0
 800d116:	4608      	mov	r0, r1
 800d118:	4611      	mov	r1, r2
 800d11a:	2200      	movs	r2, #0
 800d11c:	602a      	str	r2, [r5, #0]
 800d11e:	461a      	mov	r2, r3
 800d120:	f7f4 fa5a 	bl	80015d8 <_read>
 800d124:	1c43      	adds	r3, r0, #1
 800d126:	d102      	bne.n	800d12e <_read_r+0x1e>
 800d128:	682b      	ldr	r3, [r5, #0]
 800d12a:	b103      	cbz	r3, 800d12e <_read_r+0x1e>
 800d12c:	6023      	str	r3, [r4, #0]
 800d12e:	bd38      	pop	{r3, r4, r5, pc}
 800d130:	240007bc 	.word	0x240007bc

0800d134 <_gettimeofday>:
 800d134:	4b02      	ldr	r3, [pc, #8]	; (800d140 <_gettimeofday+0xc>)
 800d136:	2258      	movs	r2, #88	; 0x58
 800d138:	601a      	str	r2, [r3, #0]
 800d13a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d13e:	4770      	bx	lr
 800d140:	240007bc 	.word	0x240007bc

0800d144 <_init>:
 800d144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d146:	bf00      	nop
 800d148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d14a:	bc08      	pop	{r3}
 800d14c:	469e      	mov	lr, r3
 800d14e:	4770      	bx	lr

0800d150 <_fini>:
 800d150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d152:	bf00      	nop
 800d154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d156:	bc08      	pop	{r3}
 800d158:	469e      	mov	lr, r3
 800d15a:	4770      	bx	lr
