
RECEPTION_UART_H7A3ZIQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c26c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  0800c51c  0800c51c  0001c51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c838  0800c838  0001c838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c840  0800c840  0001c840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c844  0800c844  0001c844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  24000000  0800c848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000834  24000084  0800c8cc  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240008b8  0800c8cc  000208b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a8ca  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000321a  00000000  00000000  0003a97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001250  00000000  00000000  0003db98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010e8  00000000  00000000  0003ede8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032adc  00000000  00000000  0003fed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c643  00000000  00000000  000729ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00140be4  00000000  00000000  0008efef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001cfbd3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004f20  00000000  00000000  001cfc24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000084 	.word	0x24000084
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800c504 	.word	0x0800c504

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000088 	.word	0x24000088
 80002ec:	0800c504 	.word	0x0800c504

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <Thrust_Init>:
 *      Author: romingo
 */

#include "Process.h"

void Thrust_Init(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL);
 8000698:	4b85      	ldr	r3, [pc, #532]	; (80008b0 <Thrust_Init+0x21c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a84      	ldr	r2, [pc, #528]	; (80008b0 <Thrust_Init+0x21c>)
 800069e:	6852      	ldr	r2, [r2, #4]
 80006a0:	4611      	mov	r1, r2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f007 f9cc 	bl	8007a40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL);
 80006a8:	4b82      	ldr	r3, [pc, #520]	; (80008b4 <Thrust_Init+0x220>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a81      	ldr	r2, [pc, #516]	; (80008b4 <Thrust_Init+0x220>)
 80006ae:	6852      	ldr	r2, [r2, #4]
 80006b0:	4611      	mov	r1, r2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f007 f9c4 	bl	8007a40 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 80006b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006bc:	f001 fd06 	bl	80020cc <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MIN_Thrust);
 80006c0:	4b7b      	ldr	r3, [pc, #492]	; (80008b0 <Thrust_Init+0x21c>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d105      	bne.n	80006d4 <Thrust_Init+0x40>
 80006c8:	4b79      	ldr	r3, [pc, #484]	; (80008b0 <Thrust_Init+0x21c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2264      	movs	r2, #100	; 0x64
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
 80006d2:	e02c      	b.n	800072e <Thrust_Init+0x9a>
 80006d4:	4b76      	ldr	r3, [pc, #472]	; (80008b0 <Thrust_Init+0x21c>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	2b04      	cmp	r3, #4
 80006da:	d105      	bne.n	80006e8 <Thrust_Init+0x54>
 80006dc:	4b74      	ldr	r3, [pc, #464]	; (80008b0 <Thrust_Init+0x21c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	2364      	movs	r3, #100	; 0x64
 80006e4:	6393      	str	r3, [r2, #56]	; 0x38
 80006e6:	e022      	b.n	800072e <Thrust_Init+0x9a>
 80006e8:	4b71      	ldr	r3, [pc, #452]	; (80008b0 <Thrust_Init+0x21c>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	2b08      	cmp	r3, #8
 80006ee:	d105      	bne.n	80006fc <Thrust_Init+0x68>
 80006f0:	4b6f      	ldr	r3, [pc, #444]	; (80008b0 <Thrust_Init+0x21c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006fa:	e018      	b.n	800072e <Thrust_Init+0x9a>
 80006fc:	4b6c      	ldr	r3, [pc, #432]	; (80008b0 <Thrust_Init+0x21c>)
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	2b0c      	cmp	r3, #12
 8000702:	d105      	bne.n	8000710 <Thrust_Init+0x7c>
 8000704:	4b6a      	ldr	r3, [pc, #424]	; (80008b0 <Thrust_Init+0x21c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	2364      	movs	r3, #100	; 0x64
 800070c:	6413      	str	r3, [r2, #64]	; 0x40
 800070e:	e00e      	b.n	800072e <Thrust_Init+0x9a>
 8000710:	4b67      	ldr	r3, [pc, #412]	; (80008b0 <Thrust_Init+0x21c>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	2b10      	cmp	r3, #16
 8000716:	d105      	bne.n	8000724 <Thrust_Init+0x90>
 8000718:	4b65      	ldr	r3, [pc, #404]	; (80008b0 <Thrust_Init+0x21c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	2364      	movs	r3, #100	; 0x64
 8000720:	6593      	str	r3, [r2, #88]	; 0x58
 8000722:	e004      	b.n	800072e <Thrust_Init+0x9a>
 8000724:	4b62      	ldr	r3, [pc, #392]	; (80008b0 <Thrust_Init+0x21c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MIN_Thrust);
 800072e:	4b61      	ldr	r3, [pc, #388]	; (80008b4 <Thrust_Init+0x220>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d105      	bne.n	8000742 <Thrust_Init+0xae>
 8000736:	4b5f      	ldr	r3, [pc, #380]	; (80008b4 <Thrust_Init+0x220>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2264      	movs	r2, #100	; 0x64
 800073e:	635a      	str	r2, [r3, #52]	; 0x34
 8000740:	e02c      	b.n	800079c <Thrust_Init+0x108>
 8000742:	4b5c      	ldr	r3, [pc, #368]	; (80008b4 <Thrust_Init+0x220>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	2b04      	cmp	r3, #4
 8000748:	d105      	bne.n	8000756 <Thrust_Init+0xc2>
 800074a:	4b5a      	ldr	r3, [pc, #360]	; (80008b4 <Thrust_Init+0x220>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	6393      	str	r3, [r2, #56]	; 0x38
 8000754:	e022      	b.n	800079c <Thrust_Init+0x108>
 8000756:	4b57      	ldr	r3, [pc, #348]	; (80008b4 <Thrust_Init+0x220>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	2b08      	cmp	r3, #8
 800075c:	d105      	bne.n	800076a <Thrust_Init+0xd6>
 800075e:	4b55      	ldr	r3, [pc, #340]	; (80008b4 <Thrust_Init+0x220>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000768:	e018      	b.n	800079c <Thrust_Init+0x108>
 800076a:	4b52      	ldr	r3, [pc, #328]	; (80008b4 <Thrust_Init+0x220>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	2b0c      	cmp	r3, #12
 8000770:	d105      	bne.n	800077e <Thrust_Init+0xea>
 8000772:	4b50      	ldr	r3, [pc, #320]	; (80008b4 <Thrust_Init+0x220>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	2364      	movs	r3, #100	; 0x64
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
 800077c:	e00e      	b.n	800079c <Thrust_Init+0x108>
 800077e:	4b4d      	ldr	r3, [pc, #308]	; (80008b4 <Thrust_Init+0x220>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	2b10      	cmp	r3, #16
 8000784:	d105      	bne.n	8000792 <Thrust_Init+0xfe>
 8000786:	4b4b      	ldr	r3, [pc, #300]	; (80008b4 <Thrust_Init+0x220>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	6593      	str	r3, [r2, #88]	; 0x58
 8000790:	e004      	b.n	800079c <Thrust_Init+0x108>
 8000792:	4b48      	ldr	r3, [pc, #288]	; (80008b4 <Thrust_Init+0x220>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	2364      	movs	r3, #100	; 0x64
 800079a:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(1000);
 800079c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a0:	f001 fc94 	bl	80020cc <HAL_Delay>

	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MAX_Thrust);
 80007a4:	4b42      	ldr	r3, [pc, #264]	; (80008b0 <Thrust_Init+0x21c>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d105      	bne.n	80007b8 <Thrust_Init+0x124>
 80007ac:	4b40      	ldr	r3, [pc, #256]	; (80008b0 <Thrust_Init+0x21c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2232      	movs	r2, #50	; 0x32
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
 80007b6:	e02c      	b.n	8000812 <Thrust_Init+0x17e>
 80007b8:	4b3d      	ldr	r3, [pc, #244]	; (80008b0 <Thrust_Init+0x21c>)
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	2b04      	cmp	r3, #4
 80007be:	d105      	bne.n	80007cc <Thrust_Init+0x138>
 80007c0:	4b3b      	ldr	r3, [pc, #236]	; (80008b0 <Thrust_Init+0x21c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	2332      	movs	r3, #50	; 0x32
 80007c8:	6393      	str	r3, [r2, #56]	; 0x38
 80007ca:	e022      	b.n	8000812 <Thrust_Init+0x17e>
 80007cc:	4b38      	ldr	r3, [pc, #224]	; (80008b0 <Thrust_Init+0x21c>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	2b08      	cmp	r3, #8
 80007d2:	d105      	bne.n	80007e0 <Thrust_Init+0x14c>
 80007d4:	4b36      	ldr	r3, [pc, #216]	; (80008b0 <Thrust_Init+0x21c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	2332      	movs	r3, #50	; 0x32
 80007dc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80007de:	e018      	b.n	8000812 <Thrust_Init+0x17e>
 80007e0:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <Thrust_Init+0x21c>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	2b0c      	cmp	r3, #12
 80007e6:	d105      	bne.n	80007f4 <Thrust_Init+0x160>
 80007e8:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <Thrust_Init+0x21c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	2332      	movs	r3, #50	; 0x32
 80007f0:	6413      	str	r3, [r2, #64]	; 0x40
 80007f2:	e00e      	b.n	8000812 <Thrust_Init+0x17e>
 80007f4:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <Thrust_Init+0x21c>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	2b10      	cmp	r3, #16
 80007fa:	d105      	bne.n	8000808 <Thrust_Init+0x174>
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <Thrust_Init+0x21c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	2332      	movs	r3, #50	; 0x32
 8000804:	6593      	str	r3, [r2, #88]	; 0x58
 8000806:	e004      	b.n	8000812 <Thrust_Init+0x17e>
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <Thrust_Init+0x21c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	2332      	movs	r3, #50	; 0x32
 8000810:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MAX_Thrust);
 8000812:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <Thrust_Init+0x220>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d105      	bne.n	8000826 <Thrust_Init+0x192>
 800081a:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <Thrust_Init+0x220>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2232      	movs	r2, #50	; 0x32
 8000822:	635a      	str	r2, [r3, #52]	; 0x34
 8000824:	e02c      	b.n	8000880 <Thrust_Init+0x1ec>
 8000826:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <Thrust_Init+0x220>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b04      	cmp	r3, #4
 800082c:	d105      	bne.n	800083a <Thrust_Init+0x1a6>
 800082e:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <Thrust_Init+0x220>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	2332      	movs	r3, #50	; 0x32
 8000836:	6393      	str	r3, [r2, #56]	; 0x38
 8000838:	e022      	b.n	8000880 <Thrust_Init+0x1ec>
 800083a:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <Thrust_Init+0x220>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2b08      	cmp	r3, #8
 8000840:	d105      	bne.n	800084e <Thrust_Init+0x1ba>
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <Thrust_Init+0x220>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	2332      	movs	r3, #50	; 0x32
 800084a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800084c:	e018      	b.n	8000880 <Thrust_Init+0x1ec>
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <Thrust_Init+0x220>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b0c      	cmp	r3, #12
 8000854:	d105      	bne.n	8000862 <Thrust_Init+0x1ce>
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <Thrust_Init+0x220>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	2332      	movs	r3, #50	; 0x32
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
 8000860:	e00e      	b.n	8000880 <Thrust_Init+0x1ec>
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <Thrust_Init+0x220>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2b10      	cmp	r3, #16
 8000868:	d105      	bne.n	8000876 <Thrust_Init+0x1e2>
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <Thrust_Init+0x220>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	2332      	movs	r3, #50	; 0x32
 8000872:	6593      	str	r3, [r2, #88]	; 0x58
 8000874:	e004      	b.n	8000880 <Thrust_Init+0x1ec>
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <Thrust_Init+0x220>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	2332      	movs	r3, #50	; 0x32
 800087e:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_Delay(1000);
 8000880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000884:	f001 fc22 	bl	80020cc <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MIN_Thrust);
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <Thrust_Init+0x21c>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d105      	bne.n	800089c <Thrust_Init+0x208>
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <Thrust_Init+0x21c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2264      	movs	r2, #100	; 0x64
 8000898:	635a      	str	r2, [r3, #52]	; 0x34
 800089a:	e030      	b.n	80008fe <Thrust_Init+0x26a>
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <Thrust_Init+0x21c>)
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d109      	bne.n	80008b8 <Thrust_Init+0x224>
 80008a4:	4b02      	ldr	r3, [pc, #8]	; (80008b0 <Thrust_Init+0x21c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	2364      	movs	r3, #100	; 0x64
 80008ac:	6393      	str	r3, [r2, #56]	; 0x38
 80008ae:	e026      	b.n	80008fe <Thrust_Init+0x26a>
 80008b0:	24000000 	.word	0x24000000
 80008b4:	24000008 	.word	0x24000008
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <Thrust_Init+0x2e4>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b08      	cmp	r3, #8
 80008be:	d105      	bne.n	80008cc <Thrust_Init+0x238>
 80008c0:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <Thrust_Init+0x2e4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	2364      	movs	r3, #100	; 0x64
 80008c8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008ca:	e018      	b.n	80008fe <Thrust_Init+0x26a>
 80008cc:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <Thrust_Init+0x2e4>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2b0c      	cmp	r3, #12
 80008d2:	d105      	bne.n	80008e0 <Thrust_Init+0x24c>
 80008d4:	4b28      	ldr	r3, [pc, #160]	; (8000978 <Thrust_Init+0x2e4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	2364      	movs	r3, #100	; 0x64
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	e00e      	b.n	80008fe <Thrust_Init+0x26a>
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <Thrust_Init+0x2e4>)
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2b10      	cmp	r3, #16
 80008e6:	d105      	bne.n	80008f4 <Thrust_Init+0x260>
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <Thrust_Init+0x2e4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	2364      	movs	r3, #100	; 0x64
 80008f0:	6593      	str	r3, [r2, #88]	; 0x58
 80008f2:	e004      	b.n	80008fe <Thrust_Init+0x26a>
 80008f4:	4b20      	ldr	r3, [pc, #128]	; (8000978 <Thrust_Init+0x2e4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	2364      	movs	r3, #100	; 0x64
 80008fc:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MIN_Thrust);
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <Thrust_Init+0x2e8>)
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d105      	bne.n	8000912 <Thrust_Init+0x27e>
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <Thrust_Init+0x2e8>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2264      	movs	r2, #100	; 0x64
 800090e:	635a      	str	r2, [r3, #52]	; 0x34
 8000910:	e02c      	b.n	800096c <Thrust_Init+0x2d8>
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <Thrust_Init+0x2e8>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	2b04      	cmp	r3, #4
 8000918:	d105      	bne.n	8000926 <Thrust_Init+0x292>
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <Thrust_Init+0x2e8>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	2364      	movs	r3, #100	; 0x64
 8000922:	6393      	str	r3, [r2, #56]	; 0x38
 8000924:	e022      	b.n	800096c <Thrust_Init+0x2d8>
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <Thrust_Init+0x2e8>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b08      	cmp	r3, #8
 800092c:	d105      	bne.n	800093a <Thrust_Init+0x2a6>
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <Thrust_Init+0x2e8>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	2364      	movs	r3, #100	; 0x64
 8000936:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000938:	e018      	b.n	800096c <Thrust_Init+0x2d8>
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <Thrust_Init+0x2e8>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b0c      	cmp	r3, #12
 8000940:	d105      	bne.n	800094e <Thrust_Init+0x2ba>
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <Thrust_Init+0x2e8>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	2364      	movs	r3, #100	; 0x64
 800094a:	6413      	str	r3, [r2, #64]	; 0x40
 800094c:	e00e      	b.n	800096c <Thrust_Init+0x2d8>
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <Thrust_Init+0x2e8>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	2b10      	cmp	r3, #16
 8000954:	d105      	bne.n	8000962 <Thrust_Init+0x2ce>
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <Thrust_Init+0x2e8>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	2364      	movs	r3, #100	; 0x64
 800095e:	6593      	str	r3, [r2, #88]	; 0x58
 8000960:	e004      	b.n	800096c <Thrust_Init+0x2d8>
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <Thrust_Init+0x2e8>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	2364      	movs	r3, #100	; 0x64
 800096a:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(1000);
 800096c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000970:	f001 fbac 	bl	80020cc <HAL_Delay>
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	24000000 	.word	0x24000000
 800097c:	24000008 	.word	0x24000008

08000980 <Process_Init>:
void Process_Init(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	Thrust_Init();
 8000984:	f7ff fe86 	bl	8000694 <Thrust_Init>
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <Process>:

void Process(receiveMsg* message) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
    AdjustThrust(&TIM_PROP_G, message->thrust);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <Process+0x3c>)
 800099c:	f000 f818 	bl	80009d0 <AdjustThrust>
    AdjustThrust(&TIM_PROP_D, message->thrust);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	4809      	ldr	r0, [pc, #36]	; (80009cc <Process+0x40>)
 80009a8:	f000 f812 	bl	80009d0 <AdjustThrust>
    AdjustAngle(message->thrust,message->angle);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	781a      	ldrb	r2, [r3, #0]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80009b6:	4619      	mov	r1, r3
 80009b8:	4610      	mov	r0, r2
 80009ba:	f000 f885 	bl	8000ac8 <AdjustAngle>
    //ActivationMoteur(message->depth)
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	24000000 	.word	0x24000000
 80009cc:	24000008 	.word	0x24000008

080009d0 <AdjustThrust>:

void AdjustThrust(struct TIM_PROP* tim_prop, uint8_t thrust) {
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]
	float thrust_ms = 1-(thrust * ((float)(MIN_Thrust - MAX_Thrust) / 100.0)) + MIN_Thrust;
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	ee07 3a90 	vmov	s15, r3
 80009e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009e6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80009ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009ee:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80009f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80009f6:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8000ac0 <AdjustThrust+0xf0>
 80009fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a02:	edc7 7a03 	vstr	s15, [r7, #12]
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d10a      	bne.n	8000a24 <AdjustThrust+0x54>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a1c:	ee17 2a90 	vmov	r2, s15
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a22:	e045      	b.n	8000ab0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	d10a      	bne.n	8000a42 <AdjustThrust+0x72>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a3a:	ee17 3a90 	vmov	r3, s15
 8000a3e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000a40:	e036      	b.n	8000ab0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2b08      	cmp	r3, #8
 8000a48:	d10a      	bne.n	8000a60 <AdjustThrust+0x90>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a58:	ee17 3a90 	vmov	r3, s15
 8000a5c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000a5e:	e027      	b.n	8000ab0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b0c      	cmp	r3, #12
 8000a66:	d10a      	bne.n	8000a7e <AdjustThrust+0xae>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a76:	ee17 3a90 	vmov	r3, s15
 8000a7a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a7c:	e018      	b.n	8000ab0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	2b10      	cmp	r3, #16
 8000a84:	d10a      	bne.n	8000a9c <AdjustThrust+0xcc>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a94:	ee17 3a90 	vmov	r3, s15
 8000a98:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000a9a:	e009      	b.n	8000ab0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aaa:	ee17 3a90 	vmov	r3, s15
 8000aae:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	f3af 8000 	nop.w
 8000ac0:	00000000 	.word	0x00000000
 8000ac4:	40590000 	.word	0x40590000

08000ac8 <AdjustAngle>:

void AdjustAngle(uint8_t thrust,int8_t angle){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	71bb      	strb	r3, [r7, #6]
	uint8_t thrust_G = thrust;
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	73fb      	strb	r3, [r7, #15]
	uint8_t thrust_D = thrust;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	73bb      	strb	r3, [r7, #14]

	if (angle<50){//On tourne a gauche
 8000ae0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ae4:	2b31      	cmp	r3, #49	; 0x31
 8000ae6:	dc03      	bgt.n	8000af0 <AdjustAngle+0x28>
		thrust_G = thrust;
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	73fb      	strb	r3, [r7, #15]
		thrust_D = 0; // Ajouter une diminution progressive des pousses moteurs
 8000aec:	2300      	movs	r3, #0
 8000aee:	73bb      	strb	r3, [r7, #14]
	}
	if (angle>50){//On tourne a droite
 8000af0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000af4:	2b32      	cmp	r3, #50	; 0x32
 8000af6:	dd03      	ble.n	8000b00 <AdjustAngle+0x38>
		thrust_G = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	73fb      	strb	r3, [r7, #15]
		thrust_D = thrust;
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	73bb      	strb	r3, [r7, #14]
	}
	AdjustThrust(&TIM_PROP_G, thrust_G);
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <AdjustAngle+0x54>)
 8000b06:	f7ff ff63 	bl	80009d0 <AdjustThrust>
	AdjustThrust(&TIM_PROP_D, thrust_D);
 8000b0a:	7bbb      	ldrb	r3, [r7, #14]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4804      	ldr	r0, [pc, #16]	; (8000b20 <AdjustAngle+0x58>)
 8000b10:	f7ff ff5e 	bl	80009d0 <AdjustThrust>
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	24000000 	.word	0x24000000
 8000b20:	24000008 	.word	0x24000008

08000b24 <RPICom_Init>:
#include <RPICom.h>

RPICom_HandleTypeDef hRPICom;
void RPICom_Init(UART_HandleTypeDef* huart, UART_HandleTypeDef* huartDebug){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
	hRPICom.huart = huart;
 8000b2e:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <RPICom_Init+0x70>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6013      	str	r3, [r2, #0]
	hRPICom.huartDebug = huartDebug;
 8000b34:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <RPICom_Init+0x70>)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	6053      	str	r3, [r2, #4]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	681b      	ldr	r3, [r3, #0]
	memcpy(&(hRPICom.binaryMessage), NULL, sizeof(receiveMsg));
 8000b3e:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <RPICom_Init+0x70>)
 8000b40:	6093      	str	r3, [r2, #8]
	hRPICom.errorNumberRx = 0;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <RPICom_Init+0x70>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	749a      	strb	r2, [r3, #18]
	memcpy(hRPICom.RxBuffer, NULL, UART_RPI_RX_BUFFER_SIZE);
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <RPICom_Init+0x70>)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f103 0213 	add.w	r2, r3, #19
 8000b50:	460b      	mov	r3, r1
 8000b52:	cb03      	ldmia	r3!, {r0, r1}
 8000b54:	6010      	str	r0, [r2, #0]
 8000b56:	6051      	str	r1, [r2, #4]
	memcpy(hRPICom.TxBuffer, NULL, UART_RPI_TX_BUFFER_SIZE);
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <RPICom_Init+0x70>)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f103 021b 	add.w	r2, r3, #27
 8000b60:	460b      	mov	r3, r1
 8000b62:	cb03      	ldmia	r3!, {r0, r1}
 8000b64:	6010      	str	r0, [r2, #0]
 8000b66:	6051      	str	r1, [r2, #4]
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	8113      	strh	r3, [r2, #8]
	memcpy(hRPICom.DebugBuffer, NULL, UART_RPI_DEBUG_BUFFER_SIZE);
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <RPICom_Init+0x70>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	3325      	adds	r3, #37	; 0x25
 8000b72:	4611      	mov	r1, r2
 8000b74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f00b f839 	bl	800bbf0 <memcpy>
	hRPICom.sendMessage.paquetNumber = 0;
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <RPICom_Init+0x70>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	745a      	strb	r2, [r3, #17]

	RPICom_UartActivate(&hRPICom);
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <RPICom_Init+0x70>)
 8000b86:	f000 f807 	bl	8000b98 <RPICom_UartActivate>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	240000a0 	.word	0x240000a0

08000b98 <RPICom_UartActivate>:

void RPICom_UartActivate(RPICom_HandleTypeDef* hRPI){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(hRPI->huart, hRPI->RxBuffer, UART_RPI_RX_BUFFER_SIZE);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6818      	ldr	r0, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3313      	adds	r3, #19
 8000ba8:	2208      	movs	r2, #8
 8000baa:	4619      	mov	r1, r3
 8000bac:	f008 fa06 	bl	8008fbc <HAL_UART_Receive_IT>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <checkSum>:

uint8_t checkSum(uint8_t buffer[],uint8_t buffer_size){
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	70fb      	strb	r3, [r7, #3]
	uint8_t checkSum = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < buffer_size; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	e009      	b.n	8000be2 <checkSum+0x2a>
		checkSum ^= buffer[i];
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	781a      	ldrb	r2, [r3, #0]
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	4053      	eors	r3, r2
 8000bda:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < buffer_size; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	3301      	adds	r3, #1
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	78fb      	ldrb	r3, [r7, #3]
 8000be4:	68ba      	ldr	r2, [r7, #8]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	dbf1      	blt.n	8000bce <checkSum+0x16>
	}
	return checkSum;
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <RPICom_DecodeBinaryMessage>:

void RPICom_DecodeBinaryMessage(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af04      	add	r7, sp, #16
	hRPICom.errorNumberRx = '0';
 8000bfe:	4b32      	ldr	r3, [pc, #200]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c00:	2230      	movs	r2, #48	; 0x30
 8000c02:	749a      	strb	r2, [r3, #18]
	// Check Header
	if (HEADER_CheckValue1 != hRPICom.RxBuffer[0] || HEADER_CheckValue2 != hRPICom.RxBuffer[1]){//On envoie une erreur à la raspberry
 8000c04:	4b30      	ldr	r3, [pc, #192]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c06:	7cdb      	ldrb	r3, [r3, #19]
 8000c08:	2bff      	cmp	r3, #255	; 0xff
 8000c0a:	d103      	bne.n	8000c14 <RPICom_DecodeBinaryMessage+0x1c>
 8000c0c:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c0e:	7d1b      	ldrb	r3, [r3, #20]
 8000c10:	2bfe      	cmp	r3, #254	; 0xfe
 8000c12:	d002      	beq.n	8000c1a <RPICom_DecodeBinaryMessage+0x22>
		hRPICom.errorNumberRx ='1';
 8000c14:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c16:	2231      	movs	r2, #49	; 0x31
 8000c18:	749a      	strb	r2, [r3, #18]
	}
	// Check Length
	if (UART_RPI_RX_BUFFER_SIZE != hRPICom.RxBuffer[2]){// Il nous manque des informations
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c1c:	7d5b      	ldrb	r3, [r3, #21]
 8000c1e:	2b08      	cmp	r3, #8
 8000c20:	d002      	beq.n	8000c28 <RPICom_DecodeBinaryMessage+0x30>
		hRPICom.errorNumberRx='2';
 8000c22:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c24:	2232      	movs	r2, #50	; 0x32
 8000c26:	749a      	strb	r2, [r3, #18]
	}
	hRPICom.binaryMessage.thrust = hRPICom.RxBuffer[3];
 8000c28:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c2a:	7d9a      	ldrb	r2, [r3, #22]
 8000c2c:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c2e:	721a      	strb	r2, [r3, #8]
	hRPICom.binaryMessage.angle = hRPICom.RxBuffer[4];
 8000c30:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c32:	7ddb      	ldrb	r3, [r3, #23]
 8000c34:	b25a      	sxtb	r2, r3
 8000c36:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c38:	725a      	strb	r2, [r3, #9]
	hRPICom.binaryMessage.depth = hRPICom.RxBuffer[5];
 8000c3a:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c3c:	7e1a      	ldrb	r2, [r3, #24]
 8000c3e:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c40:	729a      	strb	r2, [r3, #10]
	hRPICom.binaryMessage.paquetNumber = hRPICom.RxBuffer[6];
 8000c42:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c44:	7e5a      	ldrb	r2, [r3, #25]
 8000c46:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c48:	72da      	strb	r2, [r3, #11]

	//Checksum
	if(checkSum(hRPICom.RxBuffer,UART_RPI_RX_BUFFER_SIZE) !=  hRPICom.RxBuffer[7]){
 8000c4a:	2108      	movs	r1, #8
 8000c4c:	481f      	ldr	r0, [pc, #124]	; (8000ccc <RPICom_DecodeBinaryMessage+0xd4>)
 8000c4e:	f7ff ffb3 	bl	8000bb8 <checkSum>
 8000c52:	4603      	mov	r3, r0
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c58:	7e9b      	ldrb	r3, [r3, #26]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d002      	beq.n	8000c64 <RPICom_DecodeBinaryMessage+0x6c>
		hRPICom.errorNumberRx='3';
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c60:	2233      	movs	r2, #51	; 0x33
 8000c62:	749a      	strb	r2, [r3, #18]
	}

	//Response RPI
	uint8_t stringLength = snprintf((char *)hRPICom.DebugBuffer, UART_RPI_DEBUG_BUFFER_SIZE, "[RECEPTION]\nPaquet: %u\r\nThrust: %u\nAngle: %u\r\nStatut: %c\r\n", hRPICom.binaryMessage.paquetNumber,hRPICom.binaryMessage.thrust,hRPICom.binaryMessage.angle,hRPICom.errorNumberRx);
 8000c64:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c66:	7adb      	ldrb	r3, [r3, #11]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c6c:	7a1b      	ldrb	r3, [r3, #8]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c72:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000c76:	4619      	mov	r1, r3
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c7a:	7c9b      	ldrb	r3, [r3, #18]
 8000c7c:	9302      	str	r3, [sp, #8]
 8000c7e:	9101      	str	r1, [sp, #4]
 8000c80:	9200      	str	r2, [sp, #0]
 8000c82:	4603      	mov	r3, r0
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <RPICom_DecodeBinaryMessage+0xd8>)
 8000c86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8a:	4812      	ldr	r0, [pc, #72]	; (8000cd4 <RPICom_DecodeBinaryMessage+0xdc>)
 8000c8c:	f00a ffc6 	bl	800bc1c <sniprintf>
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
	hRPICom.DebugBuffer[UART_RPI_DEBUG_BUFFER_SIZE-1] = 0; //Securité de print
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
	HAL_UART_Transmit(hRPICom.huartDebug, hRPICom.DebugBuffer, stringLength, 10);
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c9e:	6858      	ldr	r0, [r3, #4]
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	230a      	movs	r3, #10
 8000ca6:	490b      	ldr	r1, [pc, #44]	; (8000cd4 <RPICom_DecodeBinaryMessage+0xdc>)
 8000ca8:	f008 f866 	bl	8008d78 <HAL_UART_Transmit>


	// Vous avez maintenant un message complet dans la structure BinaryMessage
	// Vous pouvez faire quelque chose avec ces données, par exemple, appeler une fonction de traitement

	if (hRPICom.errorNumberRx =='0'){
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000cae:	7c9b      	ldrb	r3, [r3, #18]
 8000cb0:	2b30      	cmp	r3, #48	; 0x30
 8000cb2:	d102      	bne.n	8000cba <RPICom_DecodeBinaryMessage+0xc2>
		Process(&hRPICom.binaryMessage);
 8000cb4:	4808      	ldr	r0, [pc, #32]	; (8000cd8 <RPICom_DecodeBinaryMessage+0xe0>)
 8000cb6:	f7ff fe69 	bl	800098c <Process>
	}
	RPICom_UartActivate(&hRPICom);
 8000cba:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000cbc:	f7ff ff6c 	bl	8000b98 <RPICom_UartActivate>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	240000a0 	.word	0x240000a0
 8000ccc:	240000b3 	.word	0x240000b3
 8000cd0:	0800c51c 	.word	0x0800c51c
 8000cd4:	240000c5 	.word	0x240000c5
 8000cd8:	240000a8 	.word	0x240000a8

08000cdc <acquireData>:
void acquireData(void){ //Factoriser surement dans un fichier AcquireData
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
	//interroge inertielle
	 hRPICom.sendMessage.posX = 10;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <acquireData+0x38>)
 8000ce2:	220a      	movs	r2, #10
 8000ce4:	731a      	strb	r2, [r3, #12]
	 hRPICom.sendMessage.posY = 20;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <acquireData+0x38>)
 8000ce8:	2214      	movs	r2, #20
 8000cea:	735a      	strb	r2, [r3, #13]
	 hRPICom.sendMessage.angleDelta = 1;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <acquireData+0x38>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	739a      	strb	r2, [r3, #14]
	//interroge capteur temp
	 hRPICom.sendMessage.temp = 25;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <acquireData+0x38>)
 8000cf4:	2219      	movs	r2, #25
 8000cf6:	73da      	strb	r2, [r3, #15]
	//interroge batterie
	 hRPICom.sendMessage.batteryPower = 90;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <acquireData+0x38>)
 8000cfa:	225a      	movs	r2, #90	; 0x5a
 8000cfc:	741a      	strb	r2, [r3, #16]
	 hRPICom.sendMessage.paquetNumber+=1;
 8000cfe:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <acquireData+0x38>)
 8000d00:	7c5b      	ldrb	r3, [r3, #17]
 8000d02:	3301      	adds	r3, #1
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <acquireData+0x38>)
 8000d08:	745a      	strb	r2, [r3, #17]

}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	240000a0 	.word	0x240000a0

08000d18 <RPICom_SendBinaryMessage>:
void RPICom_SendBinaryMessage(void){ //Declencher par TIM3_IT ttes les 1s
 8000d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d1a:	b08b      	sub	sp, #44	; 0x2c
 8000d1c:	af06      	add	r7, sp, #24
	acquireData();
 8000d1e:	f7ff ffdd 	bl	8000cdc <acquireData>
	hRPICom.TxBuffer[0]=HEADER_CheckValue1;
 8000d22:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d24:	22ff      	movs	r2, #255	; 0xff
 8000d26:	76da      	strb	r2, [r3, #27]
	hRPICom.TxBuffer[1]=HEADER_CheckValue2;
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d2a:	22fe      	movs	r2, #254	; 0xfe
 8000d2c:	771a      	strb	r2, [r3, #28]
	hRPICom.TxBuffer[2]=UART_RPI_TX_BUFFER_SIZE;
 8000d2e:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d30:	220a      	movs	r2, #10
 8000d32:	775a      	strb	r2, [r3, #29]

	memcpy(hRPICom.TxBuffer + 3, &hRPICom.sendMessage, sizeof(hRPICom.sendMessage));
 8000d34:	4a26      	ldr	r2, [pc, #152]	; (8000dd0 <RPICom_SendBinaryMessage+0xb8>)
 8000d36:	4b25      	ldr	r3, [pc, #148]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d38:	330c      	adds	r3, #12
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	6010      	str	r0, [r2, #0]
 8000d3e:	889b      	ldrh	r3, [r3, #4]
 8000d40:	8093      	strh	r3, [r2, #4]

	hRPICom.TxBuffer[9]=checkSum(hRPICom.TxBuffer,sizeof(hRPICom.sendMessage)+3);
 8000d42:	2109      	movs	r1, #9
 8000d44:	4823      	ldr	r0, [pc, #140]	; (8000dd4 <RPICom_SendBinaryMessage+0xbc>)
 8000d46:	f7ff ff37 	bl	8000bb8 <checkSum>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	HAL_UART_Transmit_IT(hRPICom.huart, hRPICom.TxBuffer, UART_RPI_TX_BUFFER_SIZE);
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	220a      	movs	r2, #10
 8000d5a:	491e      	ldr	r1, [pc, #120]	; (8000dd4 <RPICom_SendBinaryMessage+0xbc>)
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f008 f899 	bl	8008e94 <HAL_UART_Transmit_IT>
	//Response RPI
	uint8_t stringLength = snprintf((char *)hRPICom.DebugBuffer, UART_RPI_DEBUG_BUFFER_SIZE, "[SEND]\nPaquet: %u\r\nBatteryPower: %u\nPosition: %u-%u-%u°\r\nMessage transmis: %x\n", hRPICom.sendMessage.paquetNumber,hRPICom.sendMessage.batteryPower,hRPICom.sendMessage.posX,hRPICom.sendMessage.posY,hRPICom.sendMessage.angleDelta,hRPICom.sendMessage);
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d64:	7c5b      	ldrb	r3, [r3, #17]
 8000d66:	469c      	mov	ip, r3
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d6a:	7c1b      	ldrb	r3, [r3, #16]
 8000d6c:	461c      	mov	r4, r3
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d70:	7b1b      	ldrb	r3, [r3, #12]
 8000d72:	461d      	mov	r5, r3
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d76:	7b5b      	ldrb	r3, [r3, #13]
 8000d78:	461e      	mov	r6, r3
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d7c:	7b9b      	ldrb	r3, [r3, #14]
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d82:	ab04      	add	r3, sp, #16
 8000d84:	320c      	adds	r2, #12
 8000d86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d8a:	6018      	str	r0, [r3, #0]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	8019      	strh	r1, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	9303      	str	r3, [sp, #12]
 8000d94:	9602      	str	r6, [sp, #8]
 8000d96:	9501      	str	r5, [sp, #4]
 8000d98:	9400      	str	r4, [sp, #0]
 8000d9a:	4663      	mov	r3, ip
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <RPICom_SendBinaryMessage+0xc0>)
 8000d9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da2:	480e      	ldr	r0, [pc, #56]	; (8000ddc <RPICom_SendBinaryMessage+0xc4>)
 8000da4:	f00a ff3a 	bl	800bc1c <sniprintf>
 8000da8:	4603      	mov	r3, r0
 8000daa:	73fb      	strb	r3, [r7, #15]
	hRPICom.DebugBuffer[UART_RPI_DEBUG_BUFFER_SIZE-1] = 0; //Securité de print
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
	HAL_UART_Transmit(hRPICom.huartDebug, hRPICom.DebugBuffer, stringLength, 10);
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000db6:	6858      	ldr	r0, [r3, #4]
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	230a      	movs	r3, #10
 8000dbe:	4907      	ldr	r1, [pc, #28]	; (8000ddc <RPICom_SendBinaryMessage+0xc4>)
 8000dc0:	f007 ffda 	bl	8008d78 <HAL_UART_Transmit>
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dcc:	240000a0 	.word	0x240000a0
 8000dd0:	240000be 	.word	0x240000be
 8000dd4:	240000bb 	.word	0x240000bb
 8000dd8:	0800c558 	.word	0x0800c558
 8000ddc:	240000c5 	.word	0x240000c5

08000de0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_DMA_Init+0x4c>)
 8000de8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000dec:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <MX_DMA_Init+0x4c>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <MX_DMA_Init+0x4c>)
 8000df8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	200b      	movs	r0, #11
 8000e0a:	f001 fa5e 	bl	80022ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e0e:	200b      	movs	r0, #11
 8000e10:	f001 fa75 	bl	80022fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	200c      	movs	r0, #12
 8000e1a:	f001 fa56 	bl	80022ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e1e:	200c      	movs	r0, #12
 8000e20:	f001 fa6d 	bl	80022fe <HAL_NVIC_EnableIRQ>

}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	58024400 	.word	0x58024400

08000e30 <update_crc>:

#include "dynamixel_protocol2.h"

uint16_t update_crc(uint16_t crc_accum, unsigned char *data_blk_ptr, uint16_t data_blk_size)

{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000e3c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000e40:	6019      	str	r1, [r3, #0]
 8000e42:	4611      	mov	r1, r2
 8000e44:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000e48:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	801a      	strh	r2, [r3, #0]
 8000e50:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000e54:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000e58:	460a      	mov	r2, r1
 8000e5a:	801a      	strh	r2, [r3, #0]

	uint16_t i, j;

	uint16_t crc_table[256] = {
 8000e5c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000e60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e64:	4a28      	ldr	r2, [pc, #160]	; (8000f08 <update_crc+0xd8>)
 8000e66:	4618      	mov	r0, r3
 8000e68:	4611      	mov	r1, r2
 8000e6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e6e:	461a      	mov	r2, r3
 8000e70:	f00a febe 	bl	800bbf0 <memcpy>

	};



	for(j = 0; j < data_blk_size; j++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000e7a:	e031      	b.n	8000ee0 <update_crc+0xb0>

	{

		i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000e7c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000e80:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	0a1b      	lsrs	r3, r3, #8
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000e8e:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8000e92:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8000e96:	6809      	ldr	r1, [r1, #0]
 8000e98:	440b      	add	r3, r1
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	4053      	eors	r3, r2
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c

		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000ea8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000eac:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	021b      	lsls	r3, r3, #8
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8000eba:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000ebe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ec2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000ec6:	b21b      	sxth	r3, r3
 8000ec8:	4053      	eors	r3, r2
 8000eca:	b21a      	sxth	r2, r3
 8000ecc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000ed0:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000ed4:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 8000ed6:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000eda:	3301      	adds	r3, #1
 8000edc:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000ee0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000ee4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000ee8:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d3c4      	bcc.n	8000e7c <update_crc+0x4c>

	}



	return crc_accum;
 8000ef2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000ef6:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000efa:	881b      	ldrh	r3, [r3, #0]

 8000efc:	4618      	mov	r0, r3
 8000efe:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	0800c5a8 	.word	0x0800c5a8

08000f0c <map>:
// All rights reserved.
//***********************************************

#include "../Inc/dynamixel_xl320.h"

uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max){
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
 8000f18:	603b      	str	r3, [r7, #0]
	return ((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min);
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	69b9      	ldr	r1, [r7, #24]
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	1a8a      	subs	r2, r1, r2
 8000f26:	fb03 f202 	mul.w	r2, r3, r2
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	1ac9      	subs	r1, r1, r3
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	440b      	add	r3, r1
 8000f34:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <XL320_set_pos>:
	TxPacket[12] = DXL_HIBYTE(CRC_2);

	HAL_UART_Transmit(m_huart, (uint8_t *) &TxPacket, 13, HAL_MAX_DELAY);
}

void XL320_set_pos(UART_HandleTypeDef *m_huart, uint16_t pos){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
	const uint16_t POS_MAX = 120; //CHANGE THIS CONSTANT TO AVOID OVERCURRENT IN THE SERVO
 8000f50:	2378      	movs	r3, #120	; 0x78
 8000f52:	83fb      	strh	r3, [r7, #30]
	if(pos>POS_MAX) pos = POS_MAX;
 8000f54:	887a      	ldrh	r2, [r7, #2]
 8000f56:	8bfb      	ldrh	r3, [r7, #30]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d901      	bls.n	8000f60 <XL320_set_pos+0x1c>
 8000f5c:	8bfb      	ldrh	r3, [r7, #30]
 8000f5e:	807b      	strh	r3, [r7, #2]
	uint16_t pos_mapped = map(pos, 0, 300, 0, 1023);
 8000f60:	8878      	ldrh	r0, [r7, #2]
 8000f62:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f6e:	2100      	movs	r1, #0
 8000f70:	f7ff ffcc 	bl	8000f0c <map>
 8000f74:	4603      	mov	r3, r0
 8000f76:	83bb      	strh	r3, [r7, #28]
	uint8_t TxPacket[14] = {DXL2_0_PACKET_IDX_HEADER_1,
 8000f78:	23ff      	movs	r3, #255	; 0xff
 8000f7a:	733b      	strb	r3, [r7, #12]
 8000f7c:	23ff      	movs	r3, #255	; 0xff
 8000f7e:	737b      	strb	r3, [r7, #13]
 8000f80:	23fd      	movs	r3, #253	; 0xfd
 8000f82:	73bb      	strb	r3, [r7, #14]
 8000f84:	2300      	movs	r3, #0
 8000f86:	73fb      	strb	r3, [r7, #15]
 8000f88:	23fe      	movs	r3, #254	; 0xfe
 8000f8a:	743b      	strb	r3, [r7, #16]
 8000f8c:	2307      	movs	r3, #7
 8000f8e:	747b      	strb	r3, [r7, #17]
 8000f90:	2300      	movs	r3, #0
 8000f92:	74bb      	strb	r3, [r7, #18]
 8000f94:	2303      	movs	r3, #3
 8000f96:	74fb      	strb	r3, [r7, #19]
 8000f98:	231e      	movs	r3, #30
 8000f9a:	753b      	strb	r3, [r7, #20]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	757b      	strb	r3, [r7, #21]
							 0x07,
							 0x00,
							 DXL_INST_WRITE,
							 DXL_LOBYTE(XL_GOAL_POSITION_L),
							 DXL_HIBYTE(XL_GOAL_POSITION_L),
							 DXL_LOBYTE(pos_mapped),
 8000fa0:	8bbb      	ldrh	r3, [r7, #28]
 8000fa2:	b2db      	uxtb	r3, r3
	uint8_t TxPacket[14] = {DXL2_0_PACKET_IDX_HEADER_1,
 8000fa4:	75bb      	strb	r3, [r7, #22]
							 DXL_HIBYTE(pos_mapped),
 8000fa6:	8bbb      	ldrh	r3, [r7, #28]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	b2db      	uxtb	r3, r3
	uint8_t TxPacket[14] = {DXL2_0_PACKET_IDX_HEADER_1,
 8000fae:	75fb      	strb	r3, [r7, #23]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	763b      	strb	r3, [r7, #24]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	767b      	strb	r3, [r7, #25]
							 0,
							 0};
	uint16_t CRC_2 = update_crc(0, TxPacket, 12);
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	220c      	movs	r2, #12
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f7ff ff35 	bl	8000e30 <update_crc>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	837b      	strh	r3, [r7, #26]
	TxPacket[12] = DXL_LOBYTE(CRC_2);
 8000fca:	8b7b      	ldrh	r3, [r7, #26]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	763b      	strb	r3, [r7, #24]
	TxPacket[13] = DXL_HIBYTE(CRC_2);
 8000fd0:	8b7b      	ldrh	r3, [r7, #26]
 8000fd2:	0a1b      	lsrs	r3, r3, #8
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(m_huart, (uint8_t *) &TxPacket, 14, HAL_MAX_DELAY);
 8000fda:	f107 010c 	add.w	r1, r7, #12
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fe2:	220e      	movs	r2, #14
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f007 fec7 	bl	8008d78 <HAL_UART_Transmit>
}
 8000fea:	bf00      	nop
 8000fec:	3720      	adds	r7, #32
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08e      	sub	sp, #56	; 0x38
 8000ff8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	4b80      	ldr	r3, [pc, #512]	; (800120c <MX_GPIO_Init+0x218>)
 800100c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001010:	4a7e      	ldr	r2, [pc, #504]	; (800120c <MX_GPIO_Init+0x218>)
 8001012:	f043 0304 	orr.w	r3, r3, #4
 8001016:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800101a:	4b7c      	ldr	r3, [pc, #496]	; (800120c <MX_GPIO_Init+0x218>)
 800101c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	623b      	str	r3, [r7, #32]
 8001026:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001028:	4b78      	ldr	r3, [pc, #480]	; (800120c <MX_GPIO_Init+0x218>)
 800102a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800102e:	4a77      	ldr	r2, [pc, #476]	; (800120c <MX_GPIO_Init+0x218>)
 8001030:	f043 0320 	orr.w	r3, r3, #32
 8001034:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001038:	4b74      	ldr	r3, [pc, #464]	; (800120c <MX_GPIO_Init+0x218>)
 800103a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800103e:	f003 0320 	and.w	r3, r3, #32
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001046:	4b71      	ldr	r3, [pc, #452]	; (800120c <MX_GPIO_Init+0x218>)
 8001048:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800104c:	4a6f      	ldr	r2, [pc, #444]	; (800120c <MX_GPIO_Init+0x218>)
 800104e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001052:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001056:	4b6d      	ldr	r3, [pc, #436]	; (800120c <MX_GPIO_Init+0x218>)
 8001058:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800105c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001060:	61bb      	str	r3, [r7, #24]
 8001062:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b69      	ldr	r3, [pc, #420]	; (800120c <MX_GPIO_Init+0x218>)
 8001066:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800106a:	4a68      	ldr	r2, [pc, #416]	; (800120c <MX_GPIO_Init+0x218>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001074:	4b65      	ldr	r3, [pc, #404]	; (800120c <MX_GPIO_Init+0x218>)
 8001076:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	4b62      	ldr	r3, [pc, #392]	; (800120c <MX_GPIO_Init+0x218>)
 8001084:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001088:	4a60      	ldr	r2, [pc, #384]	; (800120c <MX_GPIO_Init+0x218>)
 800108a:	f043 0302 	orr.w	r3, r3, #2
 800108e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001092:	4b5e      	ldr	r3, [pc, #376]	; (800120c <MX_GPIO_Init+0x218>)
 8001094:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a0:	4b5a      	ldr	r3, [pc, #360]	; (800120c <MX_GPIO_Init+0x218>)
 80010a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010a6:	4a59      	ldr	r2, [pc, #356]	; (800120c <MX_GPIO_Init+0x218>)
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010b0:	4b56      	ldr	r3, [pc, #344]	; (800120c <MX_GPIO_Init+0x218>)
 80010b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010be:	4b53      	ldr	r3, [pc, #332]	; (800120c <MX_GPIO_Init+0x218>)
 80010c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010c4:	4a51      	ldr	r2, [pc, #324]	; (800120c <MX_GPIO_Init+0x218>)
 80010c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010ce:	4b4f      	ldr	r3, [pc, #316]	; (800120c <MX_GPIO_Init+0x218>)
 80010d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010dc:	4b4b      	ldr	r3, [pc, #300]	; (800120c <MX_GPIO_Init+0x218>)
 80010de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010e2:	4a4a      	ldr	r2, [pc, #296]	; (800120c <MX_GPIO_Init+0x218>)
 80010e4:	f043 0310 	orr.w	r3, r3, #16
 80010e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010ec:	4b47      	ldr	r3, [pc, #284]	; (800120c <MX_GPIO_Init+0x218>)
 80010ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001100:	4843      	ldr	r0, [pc, #268]	; (8001210 <MX_GPIO_Init+0x21c>)
 8001102:	f003 fd59 	bl	8004bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	f244 0101 	movw	r1, #16385	; 0x4001
 800110c:	4841      	ldr	r0, [pc, #260]	; (8001214 <MX_GPIO_Init+0x220>)
 800110e:	f003 fd53 	bl	8004bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2102      	movs	r1, #2
 8001116:	4840      	ldr	r0, [pc, #256]	; (8001218 <MX_GPIO_Init+0x224>)
 8001118:	f003 fd4e 	bl	8004bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800111c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	4619      	mov	r1, r3
 8001130:	483a      	ldr	r0, [pc, #232]	; (800121c <MX_GPIO_Init+0x228>)
 8001132:	f003 fb91 	bl	8004858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114c:	4619      	mov	r1, r3
 800114e:	4830      	ldr	r0, [pc, #192]	; (8001210 <MX_GPIO_Init+0x21c>)
 8001150:	f003 fb82 	bl	8004858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001154:	f244 0301 	movw	r3, #16385	; 0x4001
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	4619      	mov	r1, r3
 800116c:	4829      	ldr	r0, [pc, #164]	; (8001214 <MX_GPIO_Init+0x220>)
 800116e:	f003 fb73 	bl	8004858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001172:	2380      	movs	r3, #128	; 0x80
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001176:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	4619      	mov	r1, r3
 8001186:	4826      	ldr	r0, [pc, #152]	; (8001220 <MX_GPIO_Init+0x22c>)
 8001188:	f003 fb66 	bl	8004858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800118c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001192:	2300      	movs	r3, #0
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	4820      	ldr	r0, [pc, #128]	; (8001224 <MX_GPIO_Init+0x230>)
 80011a2:	f003 fb59 	bl	8004858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80011a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80011b8:	230a      	movs	r3, #10
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c0:	4619      	mov	r1, r3
 80011c2:	4818      	ldr	r0, [pc, #96]	; (8001224 <MX_GPIO_Init+0x230>)
 80011c4:	f003 fb48 	bl	8004858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80011c8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011de:	4619      	mov	r1, r3
 80011e0:	4810      	ldr	r0, [pc, #64]	; (8001224 <MX_GPIO_Init+0x230>)
 80011e2:	f003 fb39 	bl	8004858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011e6:	2302      	movs	r3, #2
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	4619      	mov	r1, r3
 80011fc:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_GPIO_Init+0x224>)
 80011fe:	f003 fb2b 	bl	8004858 <HAL_GPIO_Init>

}
 8001202:	bf00      	nop
 8001204:	3738      	adds	r7, #56	; 0x38
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	58024400 	.word	0x58024400
 8001210:	58021400 	.word	0x58021400
 8001214:	58020400 	.word	0x58020400
 8001218:	58021000 	.word	0x58021000
 800121c:	58020800 	.word	0x58020800
 8001220:	58021800 	.word	0x58021800
 8001224:	58020000 	.word	0x58020000

08001228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122e:	f000 febb 	bl	8001fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001232:	f000 f83f 	bl	80012b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001236:	f7ff fedd 	bl	8000ff4 <MX_GPIO_Init>
  MX_DMA_Init();
 800123a:	f7ff fdd1 	bl	8000de0 <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 800123e:	f000 fe81 	bl	8001f44 <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 8001242:	f000 fb17 	bl	8001874 <MX_UART4_Init>
  MX_TIM2_Init();
 8001246:	f000 f9cd 	bl	80015e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800124a:	f000 fa4d 	bl	80016e8 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800124e:	f000 fc03 	bl	8001a58 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8001252:	f000 fb63 	bl	800191c <MX_UART5_Init>
  MX_USART2_UART_Init();
 8001256:	f000 fbb3 	bl	80019c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim3);
 800125a:	4810      	ldr	r0, [pc, #64]	; (800129c <main+0x74>)
 800125c:	f006 fb16 	bl	800788c <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit(&huart3, (uint8_t *)"\nStarting...\r\n", 14, 10);
 8001260:	230a      	movs	r3, #10
 8001262:	220e      	movs	r2, #14
 8001264:	490e      	ldr	r1, [pc, #56]	; (80012a0 <main+0x78>)
 8001266:	480f      	ldr	r0, [pc, #60]	; (80012a4 <main+0x7c>)
 8001268:	f007 fd86 	bl	8008d78 <HAL_UART_Transmit>
	Process_Init();
 800126c:	f7ff fb88 	bl	8000980 <Process_Init>
	RPICom_Init(&huart4, &huart3);
 8001270:	490c      	ldr	r1, [pc, #48]	; (80012a4 <main+0x7c>)
 8001272:	480d      	ldr	r0, [pc, #52]	; (80012a8 <main+0x80>)
 8001274:	f7ff fc56 	bl	8000b24 <RPICom_Init>
	HAL_UART_Transmit(&huart3, (uint8_t *)"Init Done\r\n", 11, 10);
 8001278:	230a      	movs	r3, #10
 800127a:	220b      	movs	r2, #11
 800127c:	490b      	ldr	r1, [pc, #44]	; (80012ac <main+0x84>)
 800127e:	4809      	ldr	r0, [pc, #36]	; (80012a4 <main+0x7c>)
 8001280:	f007 fd7a 	bl	8008d78 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t pos = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	71fb      	strb	r3, [r7, #7]
	while (1)
	{
		XL320_set_pos(&huart2, pos);
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4619      	mov	r1, r3
 800128e:	4808      	ldr	r0, [pc, #32]	; (80012b0 <main+0x88>)
 8001290:	f7ff fe58 	bl	8000f44 <XL320_set_pos>
		pos=pos+100;
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	3364      	adds	r3, #100	; 0x64
 8001298:	71fb      	strb	r3, [r7, #7]
		XL320_set_pos(&huart2, pos);
 800129a:	e7f5      	b.n	8001288 <main+0x60>
 800129c:	24000518 	.word	0x24000518
 80012a0:	0800c7a8 	.word	0x0800c7a8
 80012a4:	24000720 	.word	0x24000720
 80012a8:	24000564 	.word	0x24000564
 80012ac:	0800c7b8 	.word	0x0800c7b8
 80012b0:	2400068c 	.word	0x2400068c

080012b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b09c      	sub	sp, #112	; 0x70
 80012b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012be:	224c      	movs	r2, #76	; 0x4c
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f00a fca2 	bl	800bc0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2220      	movs	r2, #32
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f00a fc9c 	bl	800bc0c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80012d4:	4b30      	ldr	r3, [pc, #192]	; (8001398 <SystemClock_Config+0xe4>)
 80012d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80012de:	2004      	movs	r0, #4
 80012e0:	f003 fc84 	bl	8004bec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012e4:	2300      	movs	r3, #0
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	4b2c      	ldr	r3, [pc, #176]	; (800139c <SystemClock_Config+0xe8>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a2b      	ldr	r2, [pc, #172]	; (800139c <SystemClock_Config+0xe8>)
 80012ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <SystemClock_Config+0xe8>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001300:	bf00      	nop
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <SystemClock_Config+0xe8>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800130a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800130e:	d1f8      	bne.n	8001302 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001310:	2321      	movs	r3, #33	; 0x21
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001314:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800131a:	2301      	movs	r3, #1
 800131c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131e:	2302      	movs	r3, #2
 8001320:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001322:	2302      	movs	r3, #2
 8001324:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001326:	2301      	movs	r3, #1
 8001328:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800132a:	2318      	movs	r3, #24
 800132c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800132e:	2302      	movs	r3, #2
 8001330:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001332:	2304      	movs	r3, #4
 8001334:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001336:	2302      	movs	r3, #2
 8001338:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800133a:	230c      	movs	r3, #12
 800133c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800133e:	2300      	movs	r3, #0
 8001340:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	4618      	mov	r0, r3
 800134c:	f003 fca8 	bl	8004ca0 <HAL_RCC_OscConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001356:	f000 f823 	bl	80013a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800135a:	233f      	movs	r3, #63	; 0x3f
 800135c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800135e:	2303      	movs	r3, #3
 8001360:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2102      	movs	r1, #2
 800137e:	4618      	mov	r0, r3
 8001380:	f004 f8c0 	bl	8005504 <HAL_RCC_ClockConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800138a:	f000 f809 	bl	80013a0 <Error_Handler>
  }
}
 800138e:	bf00      	nop
 8001390:	3770      	adds	r7, #112	; 0x70
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	58024400 	.word	0x58024400
 800139c:	58024800 	.word	0x58024800

080013a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a4:	b672      	cpsid	i
}
 80013a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80013a8:	e7fe      	b.n	80013a8 <Error_Handler+0x8>
	...

080013ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_MspInit+0x30>)
 80013b4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80013b8:	4a08      	ldr	r2, [pc, #32]	; (80013dc <HAL_MspInit+0x30>)
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_MspInit+0x30>)
 80013c4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	58024400 	.word	0x58024400

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <NMI_Handler+0x4>

080013e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142c:	f000 fe2e 	bl	800208c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <DMA1_Stream0_IRQHandler+0x10>)
 800143a:	f002 f86f 	bl	800351c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	240007b4 	.word	0x240007b4

08001448 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <DMA1_Stream1_IRQHandler+0x10>)
 800144e:	f002 f865 	bl	800351c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2400082c 	.word	0x2400082c

0800145c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	RPICom_SendBinaryMessage();
 8001460:	f7ff fc5a 	bl	8000d18 <RPICom_SendBinaryMessage>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <TIM3_IRQHandler+0x14>)
 8001466:	f006 fbf9 	bl	8007c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	24000518 	.word	0x24000518

08001474 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <UART4_IRQHandler+0x10>)
 800147a:	f007 fdeb 	bl	8009054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  /* USER CODE END UART4_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	24000564 	.word	0x24000564

08001488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <_sbrk+0x5c>)
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <_sbrk+0x60>)
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <_sbrk+0x64>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <_sbrk+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d207      	bcs.n	80014c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b8:	f00a fb70 	bl	800bb9c <__errno>
 80014bc:	4603      	mov	r3, r0
 80014be:	220c      	movs	r2, #12
 80014c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014c6:	e009      	b.n	80014dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <_sbrk+0x64>)
 80014d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	24100000 	.word	0x24100000
 80014e8:	00000400 	.word	0x00000400
 80014ec:	240004c8 	.word	0x240004c8
 80014f0:	240008b8 	.word	0x240008b8

080014f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014f8:	4b32      	ldr	r3, [pc, #200]	; (80015c4 <SystemInit+0xd0>)
 80014fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fe:	4a31      	ldr	r2, [pc, #196]	; (80015c4 <SystemInit+0xd0>)
 8001500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001508:	4b2f      	ldr	r3, [pc, #188]	; (80015c8 <SystemInit+0xd4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 030f 	and.w	r3, r3, #15
 8001510:	2b02      	cmp	r3, #2
 8001512:	d807      	bhi.n	8001524 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001514:	4b2c      	ldr	r3, [pc, #176]	; (80015c8 <SystemInit+0xd4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f023 030f 	bic.w	r3, r3, #15
 800151c:	4a2a      	ldr	r2, [pc, #168]	; (80015c8 <SystemInit+0xd4>)
 800151e:	f043 0303 	orr.w	r3, r3, #3
 8001522:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001524:	4b29      	ldr	r3, [pc, #164]	; (80015cc <SystemInit+0xd8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a28      	ldr	r2, [pc, #160]	; (80015cc <SystemInit+0xd8>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001530:	4b26      	ldr	r3, [pc, #152]	; (80015cc <SystemInit+0xd8>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001536:	4b25      	ldr	r3, [pc, #148]	; (80015cc <SystemInit+0xd8>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4924      	ldr	r1, [pc, #144]	; (80015cc <SystemInit+0xd8>)
 800153c:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <SystemInit+0xdc>)
 800153e:	4013      	ands	r3, r2
 8001540:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <SystemInit+0xd4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b00      	cmp	r3, #0
 800154c:	d007      	beq.n	800155e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800154e:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <SystemInit+0xd4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 030f 	bic.w	r3, r3, #15
 8001556:	4a1c      	ldr	r2, [pc, #112]	; (80015c8 <SystemInit+0xd4>)
 8001558:	f043 0303 	orr.w	r3, r3, #3
 800155c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800155e:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <SystemInit+0xd8>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <SystemInit+0xd8>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <SystemInit+0xd8>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <SystemInit+0xd8>)
 8001572:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <SystemInit+0xe0>)
 8001574:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <SystemInit+0xd8>)
 8001578:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <SystemInit+0xe4>)
 800157a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <SystemInit+0xd8>)
 800157e:	4a17      	ldr	r2, [pc, #92]	; (80015dc <SystemInit+0xe8>)
 8001580:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <SystemInit+0xd8>)
 8001584:	2200      	movs	r2, #0
 8001586:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001588:	4b10      	ldr	r3, [pc, #64]	; (80015cc <SystemInit+0xd8>)
 800158a:	4a14      	ldr	r2, [pc, #80]	; (80015dc <SystemInit+0xe8>)
 800158c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <SystemInit+0xd8>)
 8001590:	2200      	movs	r2, #0
 8001592:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <SystemInit+0xd8>)
 8001596:	4a11      	ldr	r2, [pc, #68]	; (80015dc <SystemInit+0xe8>)
 8001598:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <SystemInit+0xd8>)
 800159c:	2200      	movs	r2, #0
 800159e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <SystemInit+0xd8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a09      	ldr	r2, [pc, #36]	; (80015cc <SystemInit+0xd8>)
 80015a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <SystemInit+0xd8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <SystemInit+0xec>)
 80015b4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00
 80015c8:	52002000 	.word	0x52002000
 80015cc:	58024400 	.word	0x58024400
 80015d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80015d4:	02020200 	.word	0x02020200
 80015d8:	01ff0000 	.word	0x01ff0000
 80015dc:	01010280 	.word	0x01010280
 80015e0:	52004000 	.word	0x52004000

080015e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08e      	sub	sp, #56	; 0x38
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001604:	463b      	mov	r3, r7
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]
 8001612:	615a      	str	r2, [r3, #20]
 8001614:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001616:	4b33      	ldr	r3, [pc, #204]	; (80016e4 <MX_TIM2_Init+0x100>)
 8001618:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800161c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1919;
 800161e:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <MX_TIM2_Init+0x100>)
 8001620:	f240 727f 	movw	r2, #1919	; 0x77f
 8001624:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001626:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <MX_TIM2_Init+0x100>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800162c:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <MX_TIM2_Init+0x100>)
 800162e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001632:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <MX_TIM2_Init+0x100>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163a:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <MX_TIM2_Init+0x100>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001640:	4828      	ldr	r0, [pc, #160]	; (80016e4 <MX_TIM2_Init+0x100>)
 8001642:	f006 f8cb 	bl	80077dc <HAL_TIM_Base_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 800164c:	f7ff fea8 	bl	80013a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001656:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800165a:	4619      	mov	r1, r3
 800165c:	4821      	ldr	r0, [pc, #132]	; (80016e4 <MX_TIM2_Init+0x100>)
 800165e:	f006 fd31 	bl	80080c4 <HAL_TIM_ConfigClockSource>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001668:	f7ff fe9a 	bl	80013a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800166c:	481d      	ldr	r0, [pc, #116]	; (80016e4 <MX_TIM2_Init+0x100>)
 800166e:	f006 f985 	bl	800797c <HAL_TIM_PWM_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001678:	f7ff fe92 	bl	80013a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	4816      	ldr	r0, [pc, #88]	; (80016e4 <MX_TIM2_Init+0x100>)
 800168c:	f007 fa78 	bl	8008b80 <HAL_TIMEx_MasterConfigSynchronization>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001696:	f7ff fe83 	bl	80013a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800169a:	2360      	movs	r3, #96	; 0x60
 800169c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016aa:	463b      	mov	r3, r7
 80016ac:	2200      	movs	r2, #0
 80016ae:	4619      	mov	r1, r3
 80016b0:	480c      	ldr	r0, [pc, #48]	; (80016e4 <MX_TIM2_Init+0x100>)
 80016b2:	f006 fbf3 	bl	8007e9c <HAL_TIM_PWM_ConfigChannel>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80016bc:	f7ff fe70 	bl	80013a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016c0:	463b      	mov	r3, r7
 80016c2:	2204      	movs	r2, #4
 80016c4:	4619      	mov	r1, r3
 80016c6:	4807      	ldr	r0, [pc, #28]	; (80016e4 <MX_TIM2_Init+0x100>)
 80016c8:	f006 fbe8 	bl	8007e9c <HAL_TIM_PWM_ConfigChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80016d2:	f7ff fe65 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016d6:	4803      	ldr	r0, [pc, #12]	; (80016e4 <MX_TIM2_Init+0x100>)
 80016d8:	f000 f894 	bl	8001804 <HAL_TIM_MspPostInit>

}
 80016dc:	bf00      	nop
 80016de:	3738      	adds	r7, #56	; 0x38
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	240004cc 	.word	0x240004cc

080016e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MX_TIM3_Init+0x98>)
 8001708:	4a1e      	ldr	r2, [pc, #120]	; (8001784 <MX_TIM3_Init+0x9c>)
 800170a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9599;
 800170c:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <MX_TIM3_Init+0x98>)
 800170e:	f242 527f 	movw	r2, #9599	; 0x257f
 8001712:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <MX_TIM3_Init+0x98>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <MX_TIM3_Init+0x98>)
 800171c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001720:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <MX_TIM3_Init+0x98>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <MX_TIM3_Init+0x98>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800172e:	4814      	ldr	r0, [pc, #80]	; (8001780 <MX_TIM3_Init+0x98>)
 8001730:	f006 f854 	bl	80077dc <HAL_TIM_Base_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800173a:	f7ff fe31 	bl	80013a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001742:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	4619      	mov	r1, r3
 800174a:	480d      	ldr	r0, [pc, #52]	; (8001780 <MX_TIM3_Init+0x98>)
 800174c:	f006 fcba 	bl	80080c4 <HAL_TIM_ConfigClockSource>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001756:	f7ff fe23 	bl	80013a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <MX_TIM3_Init+0x98>)
 8001768:	f007 fa0a 	bl	8008b80 <HAL_TIMEx_MasterConfigSynchronization>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001772:	f7ff fe15 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	3720      	adds	r7, #32
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	24000518 	.word	0x24000518
 8001784:	40000400 	.word	0x40000400

08001788 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001798:	d10f      	bne.n	80017ba <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_TIM_Base_MspInit+0x74>)
 800179c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017a0:	4a16      	ldr	r2, [pc, #88]	; (80017fc <HAL_TIM_Base_MspInit+0x74>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <HAL_TIM_Base_MspInit+0x74>)
 80017ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80017b8:	e01b      	b.n	80017f2 <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM3)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <HAL_TIM_Base_MspInit+0x78>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d116      	bne.n	80017f2 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017c4:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <HAL_TIM_Base_MspInit+0x74>)
 80017c6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017ca:	4a0c      	ldr	r2, [pc, #48]	; (80017fc <HAL_TIM_Base_MspInit+0x74>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_TIM_Base_MspInit+0x74>)
 80017d6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	201d      	movs	r0, #29
 80017e8:	f000 fd6f 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017ec:	201d      	movs	r0, #29
 80017ee:	f000 fd86 	bl	80022fe <HAL_NVIC_EnableIRQ>
}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	58024400 	.word	0x58024400
 8001800:	40000400 	.word	0x40000400

08001804 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001824:	d11e      	bne.n	8001864 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_TIM_MspPostInit+0x68>)
 8001828:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800182c:	4a0f      	ldr	r2, [pc, #60]	; (800186c <HAL_TIM_MspPostInit+0x68>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_TIM_MspPostInit+0x68>)
 8001838:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8001844:	2322      	movs	r3, #34	; 0x22
 8001846:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001854:	2301      	movs	r3, #1
 8001856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4619      	mov	r1, r3
 800185e:	4804      	ldr	r0, [pc, #16]	; (8001870 <HAL_TIM_MspPostInit+0x6c>)
 8001860:	f002 fffa 	bl	8004858 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001864:	bf00      	nop
 8001866:	3720      	adds	r7, #32
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	58024400 	.word	0x58024400
 8001870:	58020000 	.word	0x58020000

08001874 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001878:	4b26      	ldr	r3, [pc, #152]	; (8001914 <MX_UART4_Init+0xa0>)
 800187a:	4a27      	ldr	r2, [pc, #156]	; (8001918 <MX_UART4_Init+0xa4>)
 800187c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800187e:	4b25      	ldr	r3, [pc, #148]	; (8001914 <MX_UART4_Init+0xa0>)
 8001880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001884:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001886:	4b23      	ldr	r3, [pc, #140]	; (8001914 <MX_UART4_Init+0xa0>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800188c:	4b21      	ldr	r3, [pc, #132]	; (8001914 <MX_UART4_Init+0xa0>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <MX_UART4_Init+0xa0>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <MX_UART4_Init+0xa0>)
 800189a:	220c      	movs	r2, #12
 800189c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189e:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <MX_UART4_Init+0xa0>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <MX_UART4_Init+0xa0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <MX_UART4_Init+0xa0>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <MX_UART4_Init+0xa0>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <MX_UART4_Init+0xa0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80018bc:	4815      	ldr	r0, [pc, #84]	; (8001914 <MX_UART4_Init+0xa0>)
 80018be:	f007 fa0b 	bl	8008cd8 <HAL_UART_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80018c8:	f7ff fd6a 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018cc:	2100      	movs	r1, #0
 80018ce:	4811      	ldr	r0, [pc, #68]	; (8001914 <MX_UART4_Init+0xa0>)
 80018d0:	f00a f899 	bl	800ba06 <HAL_UARTEx_SetTxFifoThreshold>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80018da:	f7ff fd61 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018de:	2100      	movs	r1, #0
 80018e0:	480c      	ldr	r0, [pc, #48]	; (8001914 <MX_UART4_Init+0xa0>)
 80018e2:	f00a f8ce 	bl	800ba82 <HAL_UARTEx_SetRxFifoThreshold>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80018ec:	f7ff fd58 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80018f0:	4808      	ldr	r0, [pc, #32]	; (8001914 <MX_UART4_Init+0xa0>)
 80018f2:	f00a f84f 	bl	800b994 <HAL_UARTEx_DisableFifoMode>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80018fc:	f7ff fd50 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  // Activation de l'interruption de transmission de l'UART4
  HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001900:	2200      	movs	r2, #0
 8001902:	2100      	movs	r1, #0
 8001904:	2034      	movs	r0, #52	; 0x34
 8001906:	f000 fce0 	bl	80022ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 800190a:	2034      	movs	r0, #52	; 0x34
 800190c:	f000 fcf7 	bl	80022fe <HAL_NVIC_EnableIRQ>
  /* USER CODE END UART4_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	24000564 	.word	0x24000564
 8001918:	40004c00 	.word	0x40004c00

0800191c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001920:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <MX_UART5_Init+0x98>)
 8001922:	4a25      	ldr	r2, [pc, #148]	; (80019b8 <MX_UART5_Init+0x9c>)
 8001924:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 8001926:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <MX_UART5_Init+0x98>)
 8001928:	4a24      	ldr	r2, [pc, #144]	; (80019bc <MX_UART5_Init+0xa0>)
 800192a:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800192c:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <MX_UART5_Init+0x98>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <MX_UART5_Init+0x98>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001938:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <MX_UART5_Init+0x98>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800193e:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <MX_UART5_Init+0x98>)
 8001940:	220c      	movs	r2, #12
 8001942:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <MX_UART5_Init+0x98>)
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <MX_UART5_Init+0x98>)
 800194c:	2200      	movs	r2, #0
 800194e:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <MX_UART5_Init+0x98>)
 8001952:	2200      	movs	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001956:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <MX_UART5_Init+0x98>)
 8001958:	2200      	movs	r2, #0
 800195a:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <MX_UART5_Init+0x98>)
 800195e:	2201      	movs	r2, #1
 8001960:	629a      	str	r2, [r3, #40]	; 0x28
  huart5.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <MX_UART5_Init+0x98>)
 8001964:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001968:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800196a:	4812      	ldr	r0, [pc, #72]	; (80019b4 <MX_UART5_Init+0x98>)
 800196c:	f007 f9b4 	bl	8008cd8 <HAL_UART_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_UART5_Init+0x5e>
  {
    Error_Handler();
 8001976:	f7ff fd13 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800197a:	2100      	movs	r1, #0
 800197c:	480d      	ldr	r0, [pc, #52]	; (80019b4 <MX_UART5_Init+0x98>)
 800197e:	f00a f842 	bl	800ba06 <HAL_UARTEx_SetTxFifoThreshold>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_UART5_Init+0x70>
  {
    Error_Handler();
 8001988:	f7ff fd0a 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800198c:	2100      	movs	r1, #0
 800198e:	4809      	ldr	r0, [pc, #36]	; (80019b4 <MX_UART5_Init+0x98>)
 8001990:	f00a f877 	bl	800ba82 <HAL_UARTEx_SetRxFifoThreshold>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_UART5_Init+0x82>
  {
    Error_Handler();
 800199a:	f7ff fd01 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_UART5_Init+0x98>)
 80019a0:	f009 fff8 	bl	800b994 <HAL_UARTEx_DisableFifoMode>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_UART5_Init+0x92>
  {
    Error_Handler();
 80019aa:	f7ff fcf9 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	240005f8 	.word	0x240005f8
 80019b8:	40005000 	.word	0x40005000
 80019bc:	000f4240 	.word	0x000f4240

080019c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <MX_USART2_UART_Init+0x90>)
 80019c6:	4a23      	ldr	r2, [pc, #140]	; (8001a54 <MX_USART2_UART_Init+0x94>)
 80019c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ca:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <MX_USART2_UART_Init+0x90>)
 80019cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019d2:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <MX_USART2_UART_Init+0x90>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019d8:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <MX_USART2_UART_Init+0x90>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019de:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <MX_USART2_UART_Init+0x90>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019e4:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <MX_USART2_UART_Init+0x90>)
 80019e6:	220c      	movs	r2, #12
 80019e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ea:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <MX_USART2_UART_Init+0x90>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f0:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <MX_USART2_UART_Init+0x90>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019f6:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <MX_USART2_UART_Init+0x90>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <MX_USART2_UART_Init+0x90>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a02:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <MX_USART2_UART_Init+0x90>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a08:	4811      	ldr	r0, [pc, #68]	; (8001a50 <MX_USART2_UART_Init+0x90>)
 8001a0a:	f007 f965 	bl	8008cd8 <HAL_UART_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001a14:	f7ff fcc4 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a18:	2100      	movs	r1, #0
 8001a1a:	480d      	ldr	r0, [pc, #52]	; (8001a50 <MX_USART2_UART_Init+0x90>)
 8001a1c:	f009 fff3 	bl	800ba06 <HAL_UARTEx_SetTxFifoThreshold>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001a26:	f7ff fcbb 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4808      	ldr	r0, [pc, #32]	; (8001a50 <MX_USART2_UART_Init+0x90>)
 8001a2e:	f00a f828 	bl	800ba82 <HAL_UARTEx_SetRxFifoThreshold>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001a38:	f7ff fcb2 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a3c:	4804      	ldr	r0, [pc, #16]	; (8001a50 <MX_USART2_UART_Init+0x90>)
 8001a3e:	f009 ffa9 	bl	800b994 <HAL_UARTEx_DisableFifoMode>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001a48:	f7ff fcaa 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	2400068c 	.word	0x2400068c
 8001a54:	40004400 	.word	0x40004400

08001a58 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a5c:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a5e:	4a23      	ldr	r2, [pc, #140]	; (8001aec <MX_USART3_UART_Init+0x94>)
 8001a60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a62:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a70:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a76:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a7e:	220c      	movs	r2, #12
 8001a80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a94:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001aa0:	4811      	ldr	r0, [pc, #68]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001aa2:	f007 f919 	bl	8008cd8 <HAL_UART_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001aac:	f7ff fc78 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	480d      	ldr	r0, [pc, #52]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001ab4:	f009 ffa7 	bl	800ba06 <HAL_UARTEx_SetTxFifoThreshold>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001abe:	f7ff fc6f 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4808      	ldr	r0, [pc, #32]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001ac6:	f009 ffdc 	bl	800ba82 <HAL_UARTEx_SetRxFifoThreshold>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ad0:	f7ff fc66 	bl	80013a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <MX_USART3_UART_Init+0x90>)
 8001ad6:	f009 ff5d 	bl	800b994 <HAL_UARTEx_DisableFifoMode>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ae0:	f7ff fc5e 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	24000720 	.word	0x24000720
 8001aec:	40004800 	.word	0x40004800

08001af0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b0c2      	sub	sp, #264	; 0x108
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001afa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001afe:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b14:	22c0      	movs	r2, #192	; 0xc0
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f00a f877 	bl	800bc0c <memset>
  if(uartHandle->Instance==UART4)
 8001b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4ac2      	ldr	r2, [pc, #776]	; (8001e34 <HAL_UART_MspInit+0x344>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d172      	bne.n	8001c16 <HAL_UART_MspInit+0x126>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001b30:	f04f 0202 	mov.w	r2, #2
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b46:	4618      	mov	r0, r3
 8001b48:	f004 f868 	bl	8005c1c <HAL_RCCEx_PeriphCLKConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8001b52:	f7ff fc25 	bl	80013a0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b56:	4bb8      	ldr	r3, [pc, #736]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001b58:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001b5c:	4ab6      	ldr	r2, [pc, #728]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001b5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b62:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001b66:	4bb4      	ldr	r3, [pc, #720]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001b68:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001b6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b74:	4bb0      	ldr	r3, [pc, #704]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001b76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b7a:	4aaf      	ldr	r2, [pc, #700]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b84:	4bac      	ldr	r3, [pc, #688]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001b86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b92:	4ba9      	ldr	r3, [pc, #676]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001b94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b98:	4aa7      	ldr	r2, [pc, #668]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001b9a:	f043 0308 	orr.w	r3, r3, #8
 8001b9e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001ba2:	4ba5      	ldr	r3, [pc, #660]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001ba4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001bc8:	2308      	movs	r3, #8
 8001bca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4899      	ldr	r0, [pc, #612]	; (8001e3c <HAL_UART_MspInit+0x34c>)
 8001bd6:	f002 fe3f 	bl	8004858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001bf2:	2308      	movs	r3, #8
 8001bf4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4890      	ldr	r0, [pc, #576]	; (8001e40 <HAL_UART_MspInit+0x350>)
 8001c00:	f002 fe2a 	bl	8004858 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	2034      	movs	r0, #52	; 0x34
 8001c0a:	f000 fb5e 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c0e:	2034      	movs	r0, #52	; 0x34
 8001c10:	f000 fb75 	bl	80022fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c14:	e174      	b.n	8001f00 <HAL_UART_MspInit+0x410>
  else if(uartHandle->Instance==UART5)
 8001c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a88      	ldr	r2, [pc, #544]	; (8001e44 <HAL_UART_MspInit+0x354>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d17d      	bne.n	8001d24 <HAL_UART_MspInit+0x234>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001c28:	f04f 0202 	mov.w	r2, #2
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 ffec 	bl	8005c1c <HAL_RCCEx_PeriphCLKConfig>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_UART_MspInit+0x15e>
      Error_Handler();
 8001c4a:	f7ff fba9 	bl	80013a0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001c4e:	4b7a      	ldr	r3, [pc, #488]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001c50:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001c54:	4a78      	ldr	r2, [pc, #480]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c5a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001c5e:	4b76      	ldr	r3, [pc, #472]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001c60:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c68:	623b      	str	r3, [r7, #32]
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6c:	4b72      	ldr	r3, [pc, #456]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001c6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c72:	4a71      	ldr	r2, [pc, #452]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c7c:	4b6e      	ldr	r3, [pc, #440]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001c7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	61fb      	str	r3, [r7, #28]
 8001c88:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001c8a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001c8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001ca4:	230e      	movs	r3, #14
 8001ca6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001caa:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4865      	ldr	r0, [pc, #404]	; (8001e48 <HAL_UART_MspInit+0x358>)
 8001cb2:	f002 fdd1 	bl	8004858 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001cb6:	4b65      	ldr	r3, [pc, #404]	; (8001e4c <HAL_UART_MspInit+0x35c>)
 8001cb8:	4a65      	ldr	r2, [pc, #404]	; (8001e50 <HAL_UART_MspInit+0x360>)
 8001cba:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8001cbc:	4b63      	ldr	r3, [pc, #396]	; (8001e4c <HAL_UART_MspInit+0x35c>)
 8001cbe:	2241      	movs	r2, #65	; 0x41
 8001cc0:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cc2:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <HAL_UART_MspInit+0x35c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc8:	4b60      	ldr	r3, [pc, #384]	; (8001e4c <HAL_UART_MspInit+0x35c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cce:	4b5f      	ldr	r3, [pc, #380]	; (8001e4c <HAL_UART_MspInit+0x35c>)
 8001cd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cd4:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cd6:	4b5d      	ldr	r3, [pc, #372]	; (8001e4c <HAL_UART_MspInit+0x35c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cdc:	4b5b      	ldr	r3, [pc, #364]	; (8001e4c <HAL_UART_MspInit+0x35c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001ce2:	4b5a      	ldr	r3, [pc, #360]	; (8001e4c <HAL_UART_MspInit+0x35c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ce8:	4b58      	ldr	r3, [pc, #352]	; (8001e4c <HAL_UART_MspInit+0x35c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cee:	4b57      	ldr	r3, [pc, #348]	; (8001e4c <HAL_UART_MspInit+0x35c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001cf4:	4855      	ldr	r0, [pc, #340]	; (8001e4c <HAL_UART_MspInit+0x35c>)
 8001cf6:	f000 fb1d 	bl	8002334 <HAL_DMA_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HAL_UART_MspInit+0x214>
      Error_Handler();
 8001d00:	f7ff fb4e 	bl	80013a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a4f      	ldr	r2, [pc, #316]	; (8001e4c <HAL_UART_MspInit+0x35c>)
 8001d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001d14:	4a4d      	ldr	r2, [pc, #308]	; (8001e4c <HAL_UART_MspInit+0x35c>)
 8001d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001d22:	e0ed      	b.n	8001f00 <HAL_UART_MspInit+0x410>
  else if(uartHandle->Instance==USART2)
 8001d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a48      	ldr	r2, [pc, #288]	; (8001e54 <HAL_UART_MspInit+0x364>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	f040 8094 	bne.w	8001e60 <HAL_UART_MspInit+0x370>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d38:	f04f 0202 	mov.w	r2, #2
 8001d3c:	f04f 0300 	mov.w	r3, #0
 8001d40:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 ff64 	bl	8005c1c <HAL_RCCEx_PeriphCLKConfig>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_UART_MspInit+0x26e>
      Error_Handler();
 8001d5a:	f7ff fb21 	bl	80013a0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d5e:	4b36      	ldr	r3, [pc, #216]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001d60:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001d64:	4a34      	ldr	r2, [pc, #208]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d6a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001d6e:	4b32      	ldr	r3, [pc, #200]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001d70:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7c:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001d7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d82:	4a2d      	ldr	r2, [pc, #180]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <HAL_UART_MspInit+0x348>)
 8001d8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d9a:	230c      	movs	r3, #12
 8001d9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001db2:	2307      	movs	r3, #7
 8001db4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	481f      	ldr	r0, [pc, #124]	; (8001e3c <HAL_UART_MspInit+0x34c>)
 8001dc0:	f002 fd4a 	bl	8004858 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream1;
 8001dc4:	4b24      	ldr	r3, [pc, #144]	; (8001e58 <HAL_UART_MspInit+0x368>)
 8001dc6:	4a25      	ldr	r2, [pc, #148]	; (8001e5c <HAL_UART_MspInit+0x36c>)
 8001dc8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001dca:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <HAL_UART_MspInit+0x368>)
 8001dcc:	222b      	movs	r2, #43	; 0x2b
 8001dce:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dd0:	4b21      	ldr	r3, [pc, #132]	; (8001e58 <HAL_UART_MspInit+0x368>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd6:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <HAL_UART_MspInit+0x368>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <HAL_UART_MspInit+0x368>)
 8001dde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001de4:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <HAL_UART_MspInit+0x368>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dea:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <HAL_UART_MspInit+0x368>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001df0:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <HAL_UART_MspInit+0x368>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_UART_MspInit+0x368>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dfc:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <HAL_UART_MspInit+0x368>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e02:	4815      	ldr	r0, [pc, #84]	; (8001e58 <HAL_UART_MspInit+0x368>)
 8001e04:	f000 fa96 	bl	8002334 <HAL_DMA_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_UART_MspInit+0x322>
      Error_Handler();
 8001e0e:	f7ff fac7 	bl	80013a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <HAL_UART_MspInit+0x368>)
 8001e1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001e22:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <HAL_UART_MspInit+0x368>)
 8001e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e30:	e066      	b.n	8001f00 <HAL_UART_MspInit+0x410>
 8001e32:	bf00      	nop
 8001e34:	40004c00 	.word	0x40004c00
 8001e38:	58024400 	.word	0x58024400
 8001e3c:	58020000 	.word	0x58020000
 8001e40:	58020c00 	.word	0x58020c00
 8001e44:	40005000 	.word	0x40005000
 8001e48:	58020400 	.word	0x58020400
 8001e4c:	240007b4 	.word	0x240007b4
 8001e50:	40020010 	.word	0x40020010
 8001e54:	40004400 	.word	0x40004400
 8001e58:	2400082c 	.word	0x2400082c
 8001e5c:	40020028 	.word	0x40020028
  else if(uartHandle->Instance==USART3)
 8001e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a27      	ldr	r2, [pc, #156]	; (8001f0c <HAL_UART_MspInit+0x41c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d146      	bne.n	8001f00 <HAL_UART_MspInit+0x410>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e72:	f04f 0202 	mov.w	r2, #2
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f003 fec7 	bl	8005c1c <HAL_RCCEx_PeriphCLKConfig>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_UART_MspInit+0x3a8>
      Error_Handler();
 8001e94:	f7ff fa84 	bl	80013a0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_UART_MspInit+0x420>)
 8001e9a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001e9e:	4a1c      	ldr	r2, [pc, #112]	; (8001f10 <HAL_UART_MspInit+0x420>)
 8001ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_UART_MspInit+0x420>)
 8001eaa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb6:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <HAL_UART_MspInit+0x420>)
 8001eb8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ebc:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <HAL_UART_MspInit+0x420>)
 8001ebe:	f043 0308 	orr.w	r3, r3, #8
 8001ec2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001ec6:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_UART_MspInit+0x420>)
 8001ec8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001ed4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ed8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001eee:	2307      	movs	r3, #7
 8001ef0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ef4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4806      	ldr	r0, [pc, #24]	; (8001f14 <HAL_UART_MspInit+0x424>)
 8001efc:	f002 fcac 	bl	8004858 <HAL_GPIO_Init>
}
 8001f00:	bf00      	nop
 8001f02:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40004800 	.word	0x40004800
 8001f10:	58024400 	.word	0x58024400
 8001f14:	58020c00 	.word	0x58020c00

08001f18 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <HAL_UART_RxCpltCallback+0x24>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d104      	bne.n	8001f34 <HAL_UART_RxCpltCallback+0x1c>
	{
		RPICom_DecodeBinaryMessage();
 8001f2a:	f7fe fe65 	bl	8000bf8 <RPICom_DecodeBinaryMessage>
		RPICom_UartActivate(&hRPICom);
 8001f2e:	4804      	ldr	r0, [pc, #16]	; (8001f40 <HAL_UART_RxCpltCallback+0x28>)
 8001f30:	f7fe fe32 	bl	8000b98 <RPICom_UartActivate>
	}
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40004c00 	.word	0x40004c00
 8001f40:	240000a0 	.word	0x240000a0

08001f44 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f58:	f7ff facc 	bl	80014f4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f5c:	480c      	ldr	r0, [pc, #48]	; (8001f90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f5e:	490d      	ldr	r1, [pc, #52]	; (8001f94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f60:	4a0d      	ldr	r2, [pc, #52]	; (8001f98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f64:	e002      	b.n	8001f6c <LoopCopyDataInit>

08001f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6a:	3304      	adds	r3, #4

08001f6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f70:	d3f9      	bcc.n	8001f66 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f72:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f74:	4c0a      	ldr	r4, [pc, #40]	; (8001fa0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f78:	e001      	b.n	8001f7e <LoopFillZerobss>

08001f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f7c:	3204      	adds	r2, #4

08001f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f80:	d3fb      	bcc.n	8001f7a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f82:	f009 fe11 	bl	800bba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f86:	f7ff f94f 	bl	8001228 <main>
  bx  lr
 8001f8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f8c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001f90:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f94:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8001f98:	0800c848 	.word	0x0800c848
  ldr r2, =_sbss
 8001f9c:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 8001fa0:	240008b8 	.word	0x240008b8

08001fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <ADC_IRQHandler>
	...

08001fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fae:	2003      	movs	r0, #3
 8001fb0:	f000 f980 	bl	80022b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001fb4:	f003 fc5c 	bl	8005870 <HAL_RCC_GetSysClockFreq>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <HAL_Init+0x68>)
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	0a1b      	lsrs	r3, r3, #8
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	4913      	ldr	r1, [pc, #76]	; (8002014 <HAL_Init+0x6c>)
 8001fc6:	5ccb      	ldrb	r3, [r1, r3]
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <HAL_Init+0x68>)
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <HAL_Init+0x6c>)
 8001fdc:	5cd3      	ldrb	r3, [r2, r3]
 8001fde:	f003 031f 	and.w	r3, r3, #31
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe8:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <HAL_Init+0x70>)
 8001fea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fec:	4a0b      	ldr	r2, [pc, #44]	; (800201c <HAL_Init+0x74>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f000 f814 	bl	8002020 <HAL_InitTick>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e002      	b.n	8002008 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002002:	f7ff f9d3 	bl	80013ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	58024400 	.word	0x58024400
 8002014:	0800c7c4 	.word	0x0800c7c4
 8002018:	24000014 	.word	0x24000014
 800201c:	24000010 	.word	0x24000010

08002020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002028:	4b15      	ldr	r3, [pc, #84]	; (8002080 <HAL_InitTick+0x60>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e021      	b.n	8002078 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002034:	4b13      	ldr	r3, [pc, #76]	; (8002084 <HAL_InitTick+0x64>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <HAL_InitTick+0x60>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002042:	fbb3 f3f1 	udiv	r3, r3, r1
 8002046:	fbb2 f3f3 	udiv	r3, r2, r3
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f965 	bl	800231a <HAL_SYSTICK_Config>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e00e      	b.n	8002078 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b0f      	cmp	r3, #15
 800205e:	d80a      	bhi.n	8002076 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002060:	2200      	movs	r2, #0
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002068:	f000 f92f 	bl	80022ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800206c:	4a06      	ldr	r2, [pc, #24]	; (8002088 <HAL_InitTick+0x68>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	e000      	b.n	8002078 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	2400001c 	.word	0x2400001c
 8002084:	24000010 	.word	0x24000010
 8002088:	24000018 	.word	0x24000018

0800208c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_IncTick+0x20>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_IncTick+0x24>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4413      	add	r3, r2
 800209c:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <HAL_IncTick+0x24>)
 800209e:	6013      	str	r3, [r2, #0]
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	2400001c 	.word	0x2400001c
 80020b0:	240008a4 	.word	0x240008a4

080020b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return uwTick;
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <HAL_GetTick+0x14>)
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	240008a4 	.word	0x240008a4

080020cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d4:	f7ff ffee 	bl	80020b4 <HAL_GetTick>
 80020d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020e4:	d005      	beq.n	80020f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <HAL_Delay+0x44>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4413      	add	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020f2:	bf00      	nop
 80020f4:	f7ff ffde 	bl	80020b4 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	429a      	cmp	r2, r3
 8002102:	d8f7      	bhi.n	80020f4 <HAL_Delay+0x28>
  {
  }
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2400001c 	.word	0x2400001c

08002114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <__NVIC_SetPriorityGrouping+0x40>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002130:	4013      	ands	r3, r2
 8002132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 800213e:	4313      	orrs	r3, r2
 8002140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002142:	4a04      	ldr	r2, [pc, #16]	; (8002154 <__NVIC_SetPriorityGrouping+0x40>)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	60d3      	str	r3, [r2, #12]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000ed00 	.word	0xe000ed00
 8002158:	05fa0000 	.word	0x05fa0000

0800215c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <__NVIC_GetPriorityGrouping+0x18>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	f003 0307 	and.w	r3, r3, #7
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002186:	2b00      	cmp	r3, #0
 8002188:	db0b      	blt.n	80021a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	f003 021f 	and.w	r2, r3, #31
 8002190:	4907      	ldr	r1, [pc, #28]	; (80021b0 <__NVIC_EnableIRQ+0x38>)
 8002192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	2001      	movs	r0, #1
 800219a:	fa00 f202 	lsl.w	r2, r0, r2
 800219e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000e100 	.word	0xe000e100

080021b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	db0a      	blt.n	80021de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	490c      	ldr	r1, [pc, #48]	; (8002200 <__NVIC_SetPriority+0x4c>)
 80021ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021d2:	0112      	lsls	r2, r2, #4
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	440b      	add	r3, r1
 80021d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021dc:	e00a      	b.n	80021f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4908      	ldr	r1, [pc, #32]	; (8002204 <__NVIC_SetPriority+0x50>)
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	3b04      	subs	r3, #4
 80021ec:	0112      	lsls	r2, r2, #4
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	440b      	add	r3, r1
 80021f2:	761a      	strb	r2, [r3, #24]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000e100 	.word	0xe000e100
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f1c3 0307 	rsb	r3, r3, #7
 8002222:	2b04      	cmp	r3, #4
 8002224:	bf28      	it	cs
 8002226:	2304      	movcs	r3, #4
 8002228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3304      	adds	r3, #4
 800222e:	2b06      	cmp	r3, #6
 8002230:	d902      	bls.n	8002238 <NVIC_EncodePriority+0x30>
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3b03      	subs	r3, #3
 8002236:	e000      	b.n	800223a <NVIC_EncodePriority+0x32>
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43da      	mvns	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	401a      	ands	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002250:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	43d9      	mvns	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	4313      	orrs	r3, r2
         );
}
 8002262:	4618      	mov	r0, r3
 8002264:	3724      	adds	r7, #36	; 0x24
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002280:	d301      	bcc.n	8002286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002282:	2301      	movs	r3, #1
 8002284:	e00f      	b.n	80022a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <SysTick_Config+0x40>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228e:	210f      	movs	r1, #15
 8002290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002294:	f7ff ff8e 	bl	80021b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <SysTick_Config+0x40>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229e:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <SysTick_Config+0x40>)
 80022a0:	2207      	movs	r2, #7
 80022a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	e000e010 	.word	0xe000e010

080022b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff29 	bl	8002114 <__NVIC_SetPriorityGrouping>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022d8:	f7ff ff40 	bl	800215c <__NVIC_GetPriorityGrouping>
 80022dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	6978      	ldr	r0, [r7, #20]
 80022e4:	f7ff ff90 	bl	8002208 <NVIC_EncodePriority>
 80022e8:	4602      	mov	r2, r0
 80022ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff5f 	bl	80021b4 <__NVIC_SetPriority>
}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff33 	bl	8002178 <__NVIC_EnableIRQ>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ffa4 	bl	8002270 <SysTick_Config>
 8002328:	4603      	mov	r3, r0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff feba 	bl	80020b4 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e37f      	b.n	8002a4c <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a66      	ldr	r2, [pc, #408]	; (80024ec <HAL_DMA_Init+0x1b8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d04a      	beq.n	80023ec <HAL_DMA_Init+0xb8>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a65      	ldr	r2, [pc, #404]	; (80024f0 <HAL_DMA_Init+0x1bc>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d045      	beq.n	80023ec <HAL_DMA_Init+0xb8>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a63      	ldr	r2, [pc, #396]	; (80024f4 <HAL_DMA_Init+0x1c0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d040      	beq.n	80023ec <HAL_DMA_Init+0xb8>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a62      	ldr	r2, [pc, #392]	; (80024f8 <HAL_DMA_Init+0x1c4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d03b      	beq.n	80023ec <HAL_DMA_Init+0xb8>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a60      	ldr	r2, [pc, #384]	; (80024fc <HAL_DMA_Init+0x1c8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d036      	beq.n	80023ec <HAL_DMA_Init+0xb8>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a5f      	ldr	r2, [pc, #380]	; (8002500 <HAL_DMA_Init+0x1cc>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d031      	beq.n	80023ec <HAL_DMA_Init+0xb8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a5d      	ldr	r2, [pc, #372]	; (8002504 <HAL_DMA_Init+0x1d0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d02c      	beq.n	80023ec <HAL_DMA_Init+0xb8>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a5c      	ldr	r2, [pc, #368]	; (8002508 <HAL_DMA_Init+0x1d4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d027      	beq.n	80023ec <HAL_DMA_Init+0xb8>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a5a      	ldr	r2, [pc, #360]	; (800250c <HAL_DMA_Init+0x1d8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d022      	beq.n	80023ec <HAL_DMA_Init+0xb8>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a59      	ldr	r2, [pc, #356]	; (8002510 <HAL_DMA_Init+0x1dc>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d01d      	beq.n	80023ec <HAL_DMA_Init+0xb8>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a57      	ldr	r2, [pc, #348]	; (8002514 <HAL_DMA_Init+0x1e0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d018      	beq.n	80023ec <HAL_DMA_Init+0xb8>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a56      	ldr	r2, [pc, #344]	; (8002518 <HAL_DMA_Init+0x1e4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d013      	beq.n	80023ec <HAL_DMA_Init+0xb8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a54      	ldr	r2, [pc, #336]	; (800251c <HAL_DMA_Init+0x1e8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00e      	beq.n	80023ec <HAL_DMA_Init+0xb8>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a53      	ldr	r2, [pc, #332]	; (8002520 <HAL_DMA_Init+0x1ec>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d009      	beq.n	80023ec <HAL_DMA_Init+0xb8>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a51      	ldr	r2, [pc, #324]	; (8002524 <HAL_DMA_Init+0x1f0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d004      	beq.n	80023ec <HAL_DMA_Init+0xb8>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a50      	ldr	r2, [pc, #320]	; (8002528 <HAL_DMA_Init+0x1f4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d101      	bne.n	80023f0 <HAL_DMA_Init+0xbc>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <HAL_DMA_Init+0xbe>
 80023f0:	2300      	movs	r3, #0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 813c 	beq.w	8002670 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a37      	ldr	r2, [pc, #220]	; (80024ec <HAL_DMA_Init+0x1b8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d04a      	beq.n	80024a8 <HAL_DMA_Init+0x174>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a36      	ldr	r2, [pc, #216]	; (80024f0 <HAL_DMA_Init+0x1bc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d045      	beq.n	80024a8 <HAL_DMA_Init+0x174>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a34      	ldr	r2, [pc, #208]	; (80024f4 <HAL_DMA_Init+0x1c0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d040      	beq.n	80024a8 <HAL_DMA_Init+0x174>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a33      	ldr	r2, [pc, #204]	; (80024f8 <HAL_DMA_Init+0x1c4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d03b      	beq.n	80024a8 <HAL_DMA_Init+0x174>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a31      	ldr	r2, [pc, #196]	; (80024fc <HAL_DMA_Init+0x1c8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d036      	beq.n	80024a8 <HAL_DMA_Init+0x174>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a30      	ldr	r2, [pc, #192]	; (8002500 <HAL_DMA_Init+0x1cc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d031      	beq.n	80024a8 <HAL_DMA_Init+0x174>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a2e      	ldr	r2, [pc, #184]	; (8002504 <HAL_DMA_Init+0x1d0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d02c      	beq.n	80024a8 <HAL_DMA_Init+0x174>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a2d      	ldr	r2, [pc, #180]	; (8002508 <HAL_DMA_Init+0x1d4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d027      	beq.n	80024a8 <HAL_DMA_Init+0x174>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a2b      	ldr	r2, [pc, #172]	; (800250c <HAL_DMA_Init+0x1d8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d022      	beq.n	80024a8 <HAL_DMA_Init+0x174>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a2a      	ldr	r2, [pc, #168]	; (8002510 <HAL_DMA_Init+0x1dc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d01d      	beq.n	80024a8 <HAL_DMA_Init+0x174>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a28      	ldr	r2, [pc, #160]	; (8002514 <HAL_DMA_Init+0x1e0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d018      	beq.n	80024a8 <HAL_DMA_Init+0x174>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a27      	ldr	r2, [pc, #156]	; (8002518 <HAL_DMA_Init+0x1e4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d013      	beq.n	80024a8 <HAL_DMA_Init+0x174>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a25      	ldr	r2, [pc, #148]	; (800251c <HAL_DMA_Init+0x1e8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00e      	beq.n	80024a8 <HAL_DMA_Init+0x174>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a24      	ldr	r2, [pc, #144]	; (8002520 <HAL_DMA_Init+0x1ec>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d009      	beq.n	80024a8 <HAL_DMA_Init+0x174>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a22      	ldr	r2, [pc, #136]	; (8002524 <HAL_DMA_Init+0x1f0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d004      	beq.n	80024a8 <HAL_DMA_Init+0x174>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a21      	ldr	r2, [pc, #132]	; (8002528 <HAL_DMA_Init+0x1f4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d108      	bne.n	80024ba <HAL_DMA_Init+0x186>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0201 	bic.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	e007      	b.n	80024ca <HAL_DMA_Init+0x196>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0201 	bic.w	r2, r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024ca:	e02f      	b.n	800252c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024cc:	f7ff fdf2 	bl	80020b4 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b05      	cmp	r3, #5
 80024d8:	d928      	bls.n	800252c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2220      	movs	r2, #32
 80024de:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2203      	movs	r2, #3
 80024e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e2af      	b.n	8002a4c <HAL_DMA_Init+0x718>
 80024ec:	40020010 	.word	0x40020010
 80024f0:	40020028 	.word	0x40020028
 80024f4:	40020040 	.word	0x40020040
 80024f8:	40020058 	.word	0x40020058
 80024fc:	40020070 	.word	0x40020070
 8002500:	40020088 	.word	0x40020088
 8002504:	400200a0 	.word	0x400200a0
 8002508:	400200b8 	.word	0x400200b8
 800250c:	40020410 	.word	0x40020410
 8002510:	40020428 	.word	0x40020428
 8002514:	40020440 	.word	0x40020440
 8002518:	40020458 	.word	0x40020458
 800251c:	40020470 	.word	0x40020470
 8002520:	40020488 	.word	0x40020488
 8002524:	400204a0 	.word	0x400204a0
 8002528:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1c8      	bne.n	80024cc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4b73      	ldr	r3, [pc, #460]	; (8002714 <HAL_DMA_Init+0x3e0>)
 8002546:	4013      	ands	r3, r2
 8002548:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002552:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	2b04      	cmp	r3, #4
 800257e:	d107      	bne.n	8002590 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	4313      	orrs	r3, r2
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b28      	cmp	r3, #40	; 0x28
 8002596:	d903      	bls.n	80025a0 <HAL_DMA_Init+0x26c>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b2e      	cmp	r3, #46	; 0x2e
 800259e:	d91f      	bls.n	80025e0 <HAL_DMA_Init+0x2ac>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b3e      	cmp	r3, #62	; 0x3e
 80025a6:	d903      	bls.n	80025b0 <HAL_DMA_Init+0x27c>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b42      	cmp	r3, #66	; 0x42
 80025ae:	d917      	bls.n	80025e0 <HAL_DMA_Init+0x2ac>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b46      	cmp	r3, #70	; 0x46
 80025b6:	d903      	bls.n	80025c0 <HAL_DMA_Init+0x28c>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b48      	cmp	r3, #72	; 0x48
 80025be:	d90f      	bls.n	80025e0 <HAL_DMA_Init+0x2ac>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b4e      	cmp	r3, #78	; 0x4e
 80025c6:	d903      	bls.n	80025d0 <HAL_DMA_Init+0x29c>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b52      	cmp	r3, #82	; 0x52
 80025ce:	d907      	bls.n	80025e0 <HAL_DMA_Init+0x2ac>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b73      	cmp	r3, #115	; 0x73
 80025d6:	d905      	bls.n	80025e4 <HAL_DMA_Init+0x2b0>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b77      	cmp	r3, #119	; 0x77
 80025de:	d801      	bhi.n	80025e4 <HAL_DMA_Init+0x2b0>
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <HAL_DMA_Init+0x2b2>
 80025e4:	2300      	movs	r3, #0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025f0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f023 0307 	bic.w	r3, r3, #7
 8002608:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	2b04      	cmp	r3, #4
 800261a:	d117      	bne.n	800264c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00e      	beq.n	800264c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f001 ff88 	bl	8004544 <DMA_CheckFifoParam>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d008      	beq.n	800264c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2240      	movs	r2, #64	; 0x40
 800263e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e1ff      	b.n	8002a4c <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f001 fec3 	bl	80043e0 <DMA_CalcBaseAndBitshift>
 800265a:	4603      	mov	r3, r0
 800265c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002662:	f003 031f 	and.w	r3, r3, #31
 8002666:	223f      	movs	r2, #63	; 0x3f
 8002668:	409a      	lsls	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	e0fe      	b.n	800286e <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a28      	ldr	r2, [pc, #160]	; (8002718 <HAL_DMA_Init+0x3e4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d04a      	beq.n	8002710 <HAL_DMA_Init+0x3dc>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a27      	ldr	r2, [pc, #156]	; (800271c <HAL_DMA_Init+0x3e8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d045      	beq.n	8002710 <HAL_DMA_Init+0x3dc>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a25      	ldr	r2, [pc, #148]	; (8002720 <HAL_DMA_Init+0x3ec>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d040      	beq.n	8002710 <HAL_DMA_Init+0x3dc>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a24      	ldr	r2, [pc, #144]	; (8002724 <HAL_DMA_Init+0x3f0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d03b      	beq.n	8002710 <HAL_DMA_Init+0x3dc>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a22      	ldr	r2, [pc, #136]	; (8002728 <HAL_DMA_Init+0x3f4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d036      	beq.n	8002710 <HAL_DMA_Init+0x3dc>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a21      	ldr	r2, [pc, #132]	; (800272c <HAL_DMA_Init+0x3f8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d031      	beq.n	8002710 <HAL_DMA_Init+0x3dc>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1f      	ldr	r2, [pc, #124]	; (8002730 <HAL_DMA_Init+0x3fc>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d02c      	beq.n	8002710 <HAL_DMA_Init+0x3dc>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1e      	ldr	r2, [pc, #120]	; (8002734 <HAL_DMA_Init+0x400>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d027      	beq.n	8002710 <HAL_DMA_Init+0x3dc>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <HAL_DMA_Init+0x404>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d022      	beq.n	8002710 <HAL_DMA_Init+0x3dc>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1b      	ldr	r2, [pc, #108]	; (800273c <HAL_DMA_Init+0x408>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d01d      	beq.n	8002710 <HAL_DMA_Init+0x3dc>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a19      	ldr	r2, [pc, #100]	; (8002740 <HAL_DMA_Init+0x40c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d018      	beq.n	8002710 <HAL_DMA_Init+0x3dc>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a18      	ldr	r2, [pc, #96]	; (8002744 <HAL_DMA_Init+0x410>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d013      	beq.n	8002710 <HAL_DMA_Init+0x3dc>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a16      	ldr	r2, [pc, #88]	; (8002748 <HAL_DMA_Init+0x414>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00e      	beq.n	8002710 <HAL_DMA_Init+0x3dc>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a15      	ldr	r2, [pc, #84]	; (800274c <HAL_DMA_Init+0x418>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d009      	beq.n	8002710 <HAL_DMA_Init+0x3dc>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a13      	ldr	r2, [pc, #76]	; (8002750 <HAL_DMA_Init+0x41c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d004      	beq.n	8002710 <HAL_DMA_Init+0x3dc>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a12      	ldr	r2, [pc, #72]	; (8002754 <HAL_DMA_Init+0x420>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d123      	bne.n	8002758 <HAL_DMA_Init+0x424>
 8002710:	2301      	movs	r3, #1
 8002712:	e022      	b.n	800275a <HAL_DMA_Init+0x426>
 8002714:	fe10803f 	.word	0xfe10803f
 8002718:	48022c08 	.word	0x48022c08
 800271c:	48022c1c 	.word	0x48022c1c
 8002720:	48022c30 	.word	0x48022c30
 8002724:	48022c44 	.word	0x48022c44
 8002728:	48022c58 	.word	0x48022c58
 800272c:	48022c6c 	.word	0x48022c6c
 8002730:	48022c80 	.word	0x48022c80
 8002734:	48022c94 	.word	0x48022c94
 8002738:	58025408 	.word	0x58025408
 800273c:	5802541c 	.word	0x5802541c
 8002740:	58025430 	.word	0x58025430
 8002744:	58025444 	.word	0x58025444
 8002748:	58025458 	.word	0x58025458
 800274c:	5802546c 	.word	0x5802546c
 8002750:	58025480 	.word	0x58025480
 8002754:	58025494 	.word	0x58025494
 8002758:	2300      	movs	r3, #0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d07e      	beq.n	800285c <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a80      	ldr	r2, [pc, #512]	; (8002964 <HAL_DMA_Init+0x630>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d021      	beq.n	80027ac <HAL_DMA_Init+0x478>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a7e      	ldr	r2, [pc, #504]	; (8002968 <HAL_DMA_Init+0x634>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d01c      	beq.n	80027ac <HAL_DMA_Init+0x478>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a7d      	ldr	r2, [pc, #500]	; (800296c <HAL_DMA_Init+0x638>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d017      	beq.n	80027ac <HAL_DMA_Init+0x478>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a7b      	ldr	r2, [pc, #492]	; (8002970 <HAL_DMA_Init+0x63c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d012      	beq.n	80027ac <HAL_DMA_Init+0x478>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a7a      	ldr	r2, [pc, #488]	; (8002974 <HAL_DMA_Init+0x640>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00d      	beq.n	80027ac <HAL_DMA_Init+0x478>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a78      	ldr	r2, [pc, #480]	; (8002978 <HAL_DMA_Init+0x644>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d008      	beq.n	80027ac <HAL_DMA_Init+0x478>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a77      	ldr	r2, [pc, #476]	; (800297c <HAL_DMA_Init+0x648>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d003      	beq.n	80027ac <HAL_DMA_Init+0x478>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a75      	ldr	r2, [pc, #468]	; (8002980 <HAL_DMA_Init+0x64c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2202      	movs	r2, #2
 80027b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4b6e      	ldr	r3, [pc, #440]	; (8002984 <HAL_DMA_Init+0x650>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b40      	cmp	r3, #64	; 0x40
 80027d4:	d008      	beq.n	80027e8 <HAL_DMA_Init+0x4b4>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b80      	cmp	r3, #128	; 0x80
 80027dc:	d102      	bne.n	80027e4 <HAL_DMA_Init+0x4b0>
 80027de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027e2:	e002      	b.n	80027ea <HAL_DMA_Init+0x4b6>
 80027e4:	2300      	movs	r3, #0
 80027e6:	e000      	b.n	80027ea <HAL_DMA_Init+0x4b6>
 80027e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68d2      	ldr	r2, [r2, #12]
 80027ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80027f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002800:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002808:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002810:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002818:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	4b56      	ldr	r3, [pc, #344]	; (8002988 <HAL_DMA_Init+0x654>)
 8002830:	4413      	add	r3, r2
 8002832:	4a56      	ldr	r2, [pc, #344]	; (800298c <HAL_DMA_Init+0x658>)
 8002834:	fba2 2303 	umull	r2, r3, r2, r3
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	009a      	lsls	r2, r3, #2
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f001 fdcd 	bl	80043e0 <DMA_CalcBaseAndBitshift>
 8002846:	4603      	mov	r3, r0
 8002848:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	2201      	movs	r2, #1
 8002854:	409a      	lsls	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	e008      	b.n	800286e <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2240      	movs	r2, #64	; 0x40
 8002860:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2203      	movs	r2, #3
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e0ee      	b.n	8002a4c <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a47      	ldr	r2, [pc, #284]	; (8002990 <HAL_DMA_Init+0x65c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d072      	beq.n	800295e <HAL_DMA_Init+0x62a>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a45      	ldr	r2, [pc, #276]	; (8002994 <HAL_DMA_Init+0x660>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d06d      	beq.n	800295e <HAL_DMA_Init+0x62a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a44      	ldr	r2, [pc, #272]	; (8002998 <HAL_DMA_Init+0x664>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d068      	beq.n	800295e <HAL_DMA_Init+0x62a>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a42      	ldr	r2, [pc, #264]	; (800299c <HAL_DMA_Init+0x668>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d063      	beq.n	800295e <HAL_DMA_Init+0x62a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a41      	ldr	r2, [pc, #260]	; (80029a0 <HAL_DMA_Init+0x66c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d05e      	beq.n	800295e <HAL_DMA_Init+0x62a>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a3f      	ldr	r2, [pc, #252]	; (80029a4 <HAL_DMA_Init+0x670>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d059      	beq.n	800295e <HAL_DMA_Init+0x62a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a3e      	ldr	r2, [pc, #248]	; (80029a8 <HAL_DMA_Init+0x674>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d054      	beq.n	800295e <HAL_DMA_Init+0x62a>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a3c      	ldr	r2, [pc, #240]	; (80029ac <HAL_DMA_Init+0x678>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d04f      	beq.n	800295e <HAL_DMA_Init+0x62a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a3b      	ldr	r2, [pc, #236]	; (80029b0 <HAL_DMA_Init+0x67c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d04a      	beq.n	800295e <HAL_DMA_Init+0x62a>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a39      	ldr	r2, [pc, #228]	; (80029b4 <HAL_DMA_Init+0x680>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d045      	beq.n	800295e <HAL_DMA_Init+0x62a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a38      	ldr	r2, [pc, #224]	; (80029b8 <HAL_DMA_Init+0x684>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d040      	beq.n	800295e <HAL_DMA_Init+0x62a>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a36      	ldr	r2, [pc, #216]	; (80029bc <HAL_DMA_Init+0x688>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d03b      	beq.n	800295e <HAL_DMA_Init+0x62a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a35      	ldr	r2, [pc, #212]	; (80029c0 <HAL_DMA_Init+0x68c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d036      	beq.n	800295e <HAL_DMA_Init+0x62a>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a33      	ldr	r2, [pc, #204]	; (80029c4 <HAL_DMA_Init+0x690>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d031      	beq.n	800295e <HAL_DMA_Init+0x62a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a32      	ldr	r2, [pc, #200]	; (80029c8 <HAL_DMA_Init+0x694>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d02c      	beq.n	800295e <HAL_DMA_Init+0x62a>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a30      	ldr	r2, [pc, #192]	; (80029cc <HAL_DMA_Init+0x698>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d027      	beq.n	800295e <HAL_DMA_Init+0x62a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a14      	ldr	r2, [pc, #80]	; (8002964 <HAL_DMA_Init+0x630>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d022      	beq.n	800295e <HAL_DMA_Init+0x62a>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a12      	ldr	r2, [pc, #72]	; (8002968 <HAL_DMA_Init+0x634>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01d      	beq.n	800295e <HAL_DMA_Init+0x62a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a11      	ldr	r2, [pc, #68]	; (800296c <HAL_DMA_Init+0x638>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d018      	beq.n	800295e <HAL_DMA_Init+0x62a>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0f      	ldr	r2, [pc, #60]	; (8002970 <HAL_DMA_Init+0x63c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <HAL_DMA_Init+0x62a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a0e      	ldr	r2, [pc, #56]	; (8002974 <HAL_DMA_Init+0x640>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00e      	beq.n	800295e <HAL_DMA_Init+0x62a>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <HAL_DMA_Init+0x644>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d009      	beq.n	800295e <HAL_DMA_Init+0x62a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a0b      	ldr	r2, [pc, #44]	; (800297c <HAL_DMA_Init+0x648>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d004      	beq.n	800295e <HAL_DMA_Init+0x62a>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a09      	ldr	r2, [pc, #36]	; (8002980 <HAL_DMA_Init+0x64c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d138      	bne.n	80029d0 <HAL_DMA_Init+0x69c>
 800295e:	2301      	movs	r3, #1
 8002960:	e037      	b.n	80029d2 <HAL_DMA_Init+0x69e>
 8002962:	bf00      	nop
 8002964:	58025408 	.word	0x58025408
 8002968:	5802541c 	.word	0x5802541c
 800296c:	58025430 	.word	0x58025430
 8002970:	58025444 	.word	0x58025444
 8002974:	58025458 	.word	0x58025458
 8002978:	5802546c 	.word	0x5802546c
 800297c:	58025480 	.word	0x58025480
 8002980:	58025494 	.word	0x58025494
 8002984:	fffe000f 	.word	0xfffe000f
 8002988:	a7fdabf8 	.word	0xa7fdabf8
 800298c:	cccccccd 	.word	0xcccccccd
 8002990:	40020010 	.word	0x40020010
 8002994:	40020028 	.word	0x40020028
 8002998:	40020040 	.word	0x40020040
 800299c:	40020058 	.word	0x40020058
 80029a0:	40020070 	.word	0x40020070
 80029a4:	40020088 	.word	0x40020088
 80029a8:	400200a0 	.word	0x400200a0
 80029ac:	400200b8 	.word	0x400200b8
 80029b0:	40020410 	.word	0x40020410
 80029b4:	40020428 	.word	0x40020428
 80029b8:	40020440 	.word	0x40020440
 80029bc:	40020458 	.word	0x40020458
 80029c0:	40020470 	.word	0x40020470
 80029c4:	40020488 	.word	0x40020488
 80029c8:	400204a0 	.word	0x400204a0
 80029cc:	400204b8 	.word	0x400204b8
 80029d0:	2300      	movs	r3, #0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d032      	beq.n	8002a3c <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f001 fe30 	bl	800463c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b80      	cmp	r3, #128	; 0x80
 80029e2:	d102      	bne.n	80029ea <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80029fe:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d010      	beq.n	8002a2a <HAL_DMA_Init+0x6f6>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d80c      	bhi.n	8002a2a <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f001 fead 	bl	8004770 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	e008      	b.n	8002a3c <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002a5c:	f7ff fb2a 	bl	80020b4 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e2dc      	b.n	8003026 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d008      	beq.n	8002a8a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e2cd      	b.n	8003026 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a76      	ldr	r2, [pc, #472]	; (8002c68 <HAL_DMA_Abort+0x214>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d04a      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a74      	ldr	r2, [pc, #464]	; (8002c6c <HAL_DMA_Abort+0x218>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d045      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a73      	ldr	r2, [pc, #460]	; (8002c70 <HAL_DMA_Abort+0x21c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d040      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a71      	ldr	r2, [pc, #452]	; (8002c74 <HAL_DMA_Abort+0x220>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d03b      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a70      	ldr	r2, [pc, #448]	; (8002c78 <HAL_DMA_Abort+0x224>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d036      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a6e      	ldr	r2, [pc, #440]	; (8002c7c <HAL_DMA_Abort+0x228>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d031      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a6d      	ldr	r2, [pc, #436]	; (8002c80 <HAL_DMA_Abort+0x22c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d02c      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a6b      	ldr	r2, [pc, #428]	; (8002c84 <HAL_DMA_Abort+0x230>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d027      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6a      	ldr	r2, [pc, #424]	; (8002c88 <HAL_DMA_Abort+0x234>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d022      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a68      	ldr	r2, [pc, #416]	; (8002c8c <HAL_DMA_Abort+0x238>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d01d      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a67      	ldr	r2, [pc, #412]	; (8002c90 <HAL_DMA_Abort+0x23c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d018      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a65      	ldr	r2, [pc, #404]	; (8002c94 <HAL_DMA_Abort+0x240>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d013      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a64      	ldr	r2, [pc, #400]	; (8002c98 <HAL_DMA_Abort+0x244>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00e      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a62      	ldr	r2, [pc, #392]	; (8002c9c <HAL_DMA_Abort+0x248>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d009      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a61      	ldr	r2, [pc, #388]	; (8002ca0 <HAL_DMA_Abort+0x24c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d004      	beq.n	8002b2a <HAL_DMA_Abort+0xd6>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a5f      	ldr	r2, [pc, #380]	; (8002ca4 <HAL_DMA_Abort+0x250>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d101      	bne.n	8002b2e <HAL_DMA_Abort+0xda>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <HAL_DMA_Abort+0xdc>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 021e 	bic.w	r2, r2, #30
 8002b42:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b52:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	e00a      	b.n	8002b72 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 020e 	bic.w	r2, r2, #14
 8002b6a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a3c      	ldr	r2, [pc, #240]	; (8002c68 <HAL_DMA_Abort+0x214>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d072      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a3a      	ldr	r2, [pc, #232]	; (8002c6c <HAL_DMA_Abort+0x218>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d06d      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a39      	ldr	r2, [pc, #228]	; (8002c70 <HAL_DMA_Abort+0x21c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d068      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a37      	ldr	r2, [pc, #220]	; (8002c74 <HAL_DMA_Abort+0x220>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d063      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a36      	ldr	r2, [pc, #216]	; (8002c78 <HAL_DMA_Abort+0x224>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d05e      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a34      	ldr	r2, [pc, #208]	; (8002c7c <HAL_DMA_Abort+0x228>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d059      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a33      	ldr	r2, [pc, #204]	; (8002c80 <HAL_DMA_Abort+0x22c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d054      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a31      	ldr	r2, [pc, #196]	; (8002c84 <HAL_DMA_Abort+0x230>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d04f      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a30      	ldr	r2, [pc, #192]	; (8002c88 <HAL_DMA_Abort+0x234>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d04a      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a2e      	ldr	r2, [pc, #184]	; (8002c8c <HAL_DMA_Abort+0x238>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d045      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a2d      	ldr	r2, [pc, #180]	; (8002c90 <HAL_DMA_Abort+0x23c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d040      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a2b      	ldr	r2, [pc, #172]	; (8002c94 <HAL_DMA_Abort+0x240>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d03b      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a2a      	ldr	r2, [pc, #168]	; (8002c98 <HAL_DMA_Abort+0x244>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d036      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a28      	ldr	r2, [pc, #160]	; (8002c9c <HAL_DMA_Abort+0x248>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d031      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a27      	ldr	r2, [pc, #156]	; (8002ca0 <HAL_DMA_Abort+0x24c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d02c      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a25      	ldr	r2, [pc, #148]	; (8002ca4 <HAL_DMA_Abort+0x250>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d027      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a24      	ldr	r2, [pc, #144]	; (8002ca8 <HAL_DMA_Abort+0x254>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d022      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a22      	ldr	r2, [pc, #136]	; (8002cac <HAL_DMA_Abort+0x258>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d01d      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a21      	ldr	r2, [pc, #132]	; (8002cb0 <HAL_DMA_Abort+0x25c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d018      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1f      	ldr	r2, [pc, #124]	; (8002cb4 <HAL_DMA_Abort+0x260>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d013      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1e      	ldr	r2, [pc, #120]	; (8002cb8 <HAL_DMA_Abort+0x264>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d00e      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1c      	ldr	r2, [pc, #112]	; (8002cbc <HAL_DMA_Abort+0x268>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d009      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1b      	ldr	r2, [pc, #108]	; (8002cc0 <HAL_DMA_Abort+0x26c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d004      	beq.n	8002c62 <HAL_DMA_Abort+0x20e>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a19      	ldr	r2, [pc, #100]	; (8002cc4 <HAL_DMA_Abort+0x270>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d132      	bne.n	8002cc8 <HAL_DMA_Abort+0x274>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e031      	b.n	8002cca <HAL_DMA_Abort+0x276>
 8002c66:	bf00      	nop
 8002c68:	40020010 	.word	0x40020010
 8002c6c:	40020028 	.word	0x40020028
 8002c70:	40020040 	.word	0x40020040
 8002c74:	40020058 	.word	0x40020058
 8002c78:	40020070 	.word	0x40020070
 8002c7c:	40020088 	.word	0x40020088
 8002c80:	400200a0 	.word	0x400200a0
 8002c84:	400200b8 	.word	0x400200b8
 8002c88:	40020410 	.word	0x40020410
 8002c8c:	40020428 	.word	0x40020428
 8002c90:	40020440 	.word	0x40020440
 8002c94:	40020458 	.word	0x40020458
 8002c98:	40020470 	.word	0x40020470
 8002c9c:	40020488 	.word	0x40020488
 8002ca0:	400204a0 	.word	0x400204a0
 8002ca4:	400204b8 	.word	0x400204b8
 8002ca8:	58025408 	.word	0x58025408
 8002cac:	5802541c 	.word	0x5802541c
 8002cb0:	58025430 	.word	0x58025430
 8002cb4:	58025444 	.word	0x58025444
 8002cb8:	58025458 	.word	0x58025458
 8002cbc:	5802546c 	.word	0x5802546c
 8002cc0:	58025480 	.word	0x58025480
 8002cc4:	58025494 	.word	0x58025494
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d007      	beq.n	8002cde <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a6d      	ldr	r2, [pc, #436]	; (8002e98 <HAL_DMA_Abort+0x444>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d04a      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a6b      	ldr	r2, [pc, #428]	; (8002e9c <HAL_DMA_Abort+0x448>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d045      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a6a      	ldr	r2, [pc, #424]	; (8002ea0 <HAL_DMA_Abort+0x44c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d040      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a68      	ldr	r2, [pc, #416]	; (8002ea4 <HAL_DMA_Abort+0x450>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d03b      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a67      	ldr	r2, [pc, #412]	; (8002ea8 <HAL_DMA_Abort+0x454>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d036      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a65      	ldr	r2, [pc, #404]	; (8002eac <HAL_DMA_Abort+0x458>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d031      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a64      	ldr	r2, [pc, #400]	; (8002eb0 <HAL_DMA_Abort+0x45c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d02c      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a62      	ldr	r2, [pc, #392]	; (8002eb4 <HAL_DMA_Abort+0x460>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d027      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a61      	ldr	r2, [pc, #388]	; (8002eb8 <HAL_DMA_Abort+0x464>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d022      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a5f      	ldr	r2, [pc, #380]	; (8002ebc <HAL_DMA_Abort+0x468>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01d      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a5e      	ldr	r2, [pc, #376]	; (8002ec0 <HAL_DMA_Abort+0x46c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d018      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a5c      	ldr	r2, [pc, #368]	; (8002ec4 <HAL_DMA_Abort+0x470>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a5b      	ldr	r2, [pc, #364]	; (8002ec8 <HAL_DMA_Abort+0x474>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00e      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a59      	ldr	r2, [pc, #356]	; (8002ecc <HAL_DMA_Abort+0x478>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d009      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a58      	ldr	r2, [pc, #352]	; (8002ed0 <HAL_DMA_Abort+0x47c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d004      	beq.n	8002d7e <HAL_DMA_Abort+0x32a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a56      	ldr	r2, [pc, #344]	; (8002ed4 <HAL_DMA_Abort+0x480>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d108      	bne.n	8002d90 <HAL_DMA_Abort+0x33c>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0201 	bic.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	e007      	b.n	8002da0 <HAL_DMA_Abort+0x34c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002da0:	e013      	b.n	8002dca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002da2:	f7ff f987 	bl	80020b4 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b05      	cmp	r3, #5
 8002dae:	d90c      	bls.n	8002dca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2203      	movs	r2, #3
 8002dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e12d      	b.n	8003026 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1e5      	bne.n	8002da2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a2f      	ldr	r2, [pc, #188]	; (8002e98 <HAL_DMA_Abort+0x444>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d04a      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a2d      	ldr	r2, [pc, #180]	; (8002e9c <HAL_DMA_Abort+0x448>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d045      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a2c      	ldr	r2, [pc, #176]	; (8002ea0 <HAL_DMA_Abort+0x44c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d040      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a2a      	ldr	r2, [pc, #168]	; (8002ea4 <HAL_DMA_Abort+0x450>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d03b      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a29      	ldr	r2, [pc, #164]	; (8002ea8 <HAL_DMA_Abort+0x454>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d036      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a27      	ldr	r2, [pc, #156]	; (8002eac <HAL_DMA_Abort+0x458>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d031      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a26      	ldr	r2, [pc, #152]	; (8002eb0 <HAL_DMA_Abort+0x45c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d02c      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a24      	ldr	r2, [pc, #144]	; (8002eb4 <HAL_DMA_Abort+0x460>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d027      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a23      	ldr	r2, [pc, #140]	; (8002eb8 <HAL_DMA_Abort+0x464>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d022      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a21      	ldr	r2, [pc, #132]	; (8002ebc <HAL_DMA_Abort+0x468>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01d      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a20      	ldr	r2, [pc, #128]	; (8002ec0 <HAL_DMA_Abort+0x46c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d018      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1e      	ldr	r2, [pc, #120]	; (8002ec4 <HAL_DMA_Abort+0x470>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d013      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <HAL_DMA_Abort+0x474>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00e      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ecc <HAL_DMA_Abort+0x478>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d009      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1a      	ldr	r2, [pc, #104]	; (8002ed0 <HAL_DMA_Abort+0x47c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d004      	beq.n	8002e76 <HAL_DMA_Abort+0x422>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <HAL_DMA_Abort+0x480>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d101      	bne.n	8002e7a <HAL_DMA_Abort+0x426>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <HAL_DMA_Abort+0x428>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d02b      	beq.n	8002ed8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	223f      	movs	r2, #63	; 0x3f
 8002e90:	409a      	lsls	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	e02a      	b.n	8002eee <HAL_DMA_Abort+0x49a>
 8002e98:	40020010 	.word	0x40020010
 8002e9c:	40020028 	.word	0x40020028
 8002ea0:	40020040 	.word	0x40020040
 8002ea4:	40020058 	.word	0x40020058
 8002ea8:	40020070 	.word	0x40020070
 8002eac:	40020088 	.word	0x40020088
 8002eb0:	400200a0 	.word	0x400200a0
 8002eb4:	400200b8 	.word	0x400200b8
 8002eb8:	40020410 	.word	0x40020410
 8002ebc:	40020428 	.word	0x40020428
 8002ec0:	40020440 	.word	0x40020440
 8002ec4:	40020458 	.word	0x40020458
 8002ec8:	40020470 	.word	0x40020470
 8002ecc:	40020488 	.word	0x40020488
 8002ed0:	400204a0 	.word	0x400204a0
 8002ed4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a4f      	ldr	r2, [pc, #316]	; (8003030 <HAL_DMA_Abort+0x5dc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d072      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a4d      	ldr	r2, [pc, #308]	; (8003034 <HAL_DMA_Abort+0x5e0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d06d      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a4c      	ldr	r2, [pc, #304]	; (8003038 <HAL_DMA_Abort+0x5e4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d068      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a4a      	ldr	r2, [pc, #296]	; (800303c <HAL_DMA_Abort+0x5e8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d063      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a49      	ldr	r2, [pc, #292]	; (8003040 <HAL_DMA_Abort+0x5ec>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d05e      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a47      	ldr	r2, [pc, #284]	; (8003044 <HAL_DMA_Abort+0x5f0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d059      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a46      	ldr	r2, [pc, #280]	; (8003048 <HAL_DMA_Abort+0x5f4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d054      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a44      	ldr	r2, [pc, #272]	; (800304c <HAL_DMA_Abort+0x5f8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d04f      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a43      	ldr	r2, [pc, #268]	; (8003050 <HAL_DMA_Abort+0x5fc>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d04a      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a41      	ldr	r2, [pc, #260]	; (8003054 <HAL_DMA_Abort+0x600>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d045      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a40      	ldr	r2, [pc, #256]	; (8003058 <HAL_DMA_Abort+0x604>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d040      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a3e      	ldr	r2, [pc, #248]	; (800305c <HAL_DMA_Abort+0x608>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d03b      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a3d      	ldr	r2, [pc, #244]	; (8003060 <HAL_DMA_Abort+0x60c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d036      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a3b      	ldr	r2, [pc, #236]	; (8003064 <HAL_DMA_Abort+0x610>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d031      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a3a      	ldr	r2, [pc, #232]	; (8003068 <HAL_DMA_Abort+0x614>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d02c      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a38      	ldr	r2, [pc, #224]	; (800306c <HAL_DMA_Abort+0x618>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d027      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a37      	ldr	r2, [pc, #220]	; (8003070 <HAL_DMA_Abort+0x61c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d022      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a35      	ldr	r2, [pc, #212]	; (8003074 <HAL_DMA_Abort+0x620>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d01d      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a34      	ldr	r2, [pc, #208]	; (8003078 <HAL_DMA_Abort+0x624>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d018      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a32      	ldr	r2, [pc, #200]	; (800307c <HAL_DMA_Abort+0x628>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a31      	ldr	r2, [pc, #196]	; (8003080 <HAL_DMA_Abort+0x62c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00e      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a2f      	ldr	r2, [pc, #188]	; (8003084 <HAL_DMA_Abort+0x630>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d009      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a2e      	ldr	r2, [pc, #184]	; (8003088 <HAL_DMA_Abort+0x634>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_DMA_Abort+0x58a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2c      	ldr	r2, [pc, #176]	; (800308c <HAL_DMA_Abort+0x638>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d101      	bne.n	8002fe2 <HAL_DMA_Abort+0x58e>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_DMA_Abort+0x590>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d015      	beq.n	8003014 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ff0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00c      	beq.n	8003014 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003004:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003008:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003012:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40020010 	.word	0x40020010
 8003034:	40020028 	.word	0x40020028
 8003038:	40020040 	.word	0x40020040
 800303c:	40020058 	.word	0x40020058
 8003040:	40020070 	.word	0x40020070
 8003044:	40020088 	.word	0x40020088
 8003048:	400200a0 	.word	0x400200a0
 800304c:	400200b8 	.word	0x400200b8
 8003050:	40020410 	.word	0x40020410
 8003054:	40020428 	.word	0x40020428
 8003058:	40020440 	.word	0x40020440
 800305c:	40020458 	.word	0x40020458
 8003060:	40020470 	.word	0x40020470
 8003064:	40020488 	.word	0x40020488
 8003068:	400204a0 	.word	0x400204a0
 800306c:	400204b8 	.word	0x400204b8
 8003070:	58025408 	.word	0x58025408
 8003074:	5802541c 	.word	0x5802541c
 8003078:	58025430 	.word	0x58025430
 800307c:	58025444 	.word	0x58025444
 8003080:	58025458 	.word	0x58025458
 8003084:	5802546c 	.word	0x5802546c
 8003088:	58025480 	.word	0x58025480
 800308c:	58025494 	.word	0x58025494

08003090 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e237      	b.n	8003512 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d004      	beq.n	80030b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2280      	movs	r2, #128	; 0x80
 80030b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e22c      	b.n	8003512 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a5c      	ldr	r2, [pc, #368]	; (8003230 <HAL_DMA_Abort_IT+0x1a0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d04a      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a5b      	ldr	r2, [pc, #364]	; (8003234 <HAL_DMA_Abort_IT+0x1a4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d045      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a59      	ldr	r2, [pc, #356]	; (8003238 <HAL_DMA_Abort_IT+0x1a8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d040      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a58      	ldr	r2, [pc, #352]	; (800323c <HAL_DMA_Abort_IT+0x1ac>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d03b      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a56      	ldr	r2, [pc, #344]	; (8003240 <HAL_DMA_Abort_IT+0x1b0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d036      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a55      	ldr	r2, [pc, #340]	; (8003244 <HAL_DMA_Abort_IT+0x1b4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d031      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a53      	ldr	r2, [pc, #332]	; (8003248 <HAL_DMA_Abort_IT+0x1b8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d02c      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a52      	ldr	r2, [pc, #328]	; (800324c <HAL_DMA_Abort_IT+0x1bc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d027      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a50      	ldr	r2, [pc, #320]	; (8003250 <HAL_DMA_Abort_IT+0x1c0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d022      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a4f      	ldr	r2, [pc, #316]	; (8003254 <HAL_DMA_Abort_IT+0x1c4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d01d      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a4d      	ldr	r2, [pc, #308]	; (8003258 <HAL_DMA_Abort_IT+0x1c8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d018      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a4c      	ldr	r2, [pc, #304]	; (800325c <HAL_DMA_Abort_IT+0x1cc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d013      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a4a      	ldr	r2, [pc, #296]	; (8003260 <HAL_DMA_Abort_IT+0x1d0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00e      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a49      	ldr	r2, [pc, #292]	; (8003264 <HAL_DMA_Abort_IT+0x1d4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d009      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a47      	ldr	r2, [pc, #284]	; (8003268 <HAL_DMA_Abort_IT+0x1d8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d004      	beq.n	8003158 <HAL_DMA_Abort_IT+0xc8>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a46      	ldr	r2, [pc, #280]	; (800326c <HAL_DMA_Abort_IT+0x1dc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d101      	bne.n	800315c <HAL_DMA_Abort_IT+0xcc>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <HAL_DMA_Abort_IT+0xce>
 800315c:	2300      	movs	r3, #0
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 8086 	beq.w	8003270 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2204      	movs	r2, #4
 8003168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a2f      	ldr	r2, [pc, #188]	; (8003230 <HAL_DMA_Abort_IT+0x1a0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d04a      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a2e      	ldr	r2, [pc, #184]	; (8003234 <HAL_DMA_Abort_IT+0x1a4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d045      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a2c      	ldr	r2, [pc, #176]	; (8003238 <HAL_DMA_Abort_IT+0x1a8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d040      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2b      	ldr	r2, [pc, #172]	; (800323c <HAL_DMA_Abort_IT+0x1ac>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d03b      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a29      	ldr	r2, [pc, #164]	; (8003240 <HAL_DMA_Abort_IT+0x1b0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d036      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a28      	ldr	r2, [pc, #160]	; (8003244 <HAL_DMA_Abort_IT+0x1b4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d031      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a26      	ldr	r2, [pc, #152]	; (8003248 <HAL_DMA_Abort_IT+0x1b8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d02c      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a25      	ldr	r2, [pc, #148]	; (800324c <HAL_DMA_Abort_IT+0x1bc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d027      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a23      	ldr	r2, [pc, #140]	; (8003250 <HAL_DMA_Abort_IT+0x1c0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d022      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a22      	ldr	r2, [pc, #136]	; (8003254 <HAL_DMA_Abort_IT+0x1c4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d01d      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a20      	ldr	r2, [pc, #128]	; (8003258 <HAL_DMA_Abort_IT+0x1c8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d018      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a1f      	ldr	r2, [pc, #124]	; (800325c <HAL_DMA_Abort_IT+0x1cc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d013      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a1d      	ldr	r2, [pc, #116]	; (8003260 <HAL_DMA_Abort_IT+0x1d0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d00e      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a1c      	ldr	r2, [pc, #112]	; (8003264 <HAL_DMA_Abort_IT+0x1d4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d009      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1a      	ldr	r2, [pc, #104]	; (8003268 <HAL_DMA_Abort_IT+0x1d8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d004      	beq.n	800320c <HAL_DMA_Abort_IT+0x17c>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a19      	ldr	r2, [pc, #100]	; (800326c <HAL_DMA_Abort_IT+0x1dc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d108      	bne.n	800321e <HAL_DMA_Abort_IT+0x18e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0201 	bic.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e178      	b.n	8003510 <HAL_DMA_Abort_IT+0x480>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	e16f      	b.n	8003510 <HAL_DMA_Abort_IT+0x480>
 8003230:	40020010 	.word	0x40020010
 8003234:	40020028 	.word	0x40020028
 8003238:	40020040 	.word	0x40020040
 800323c:	40020058 	.word	0x40020058
 8003240:	40020070 	.word	0x40020070
 8003244:	40020088 	.word	0x40020088
 8003248:	400200a0 	.word	0x400200a0
 800324c:	400200b8 	.word	0x400200b8
 8003250:	40020410 	.word	0x40020410
 8003254:	40020428 	.word	0x40020428
 8003258:	40020440 	.word	0x40020440
 800325c:	40020458 	.word	0x40020458
 8003260:	40020470 	.word	0x40020470
 8003264:	40020488 	.word	0x40020488
 8003268:	400204a0 	.word	0x400204a0
 800326c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 020e 	bic.w	r2, r2, #14
 800327e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a6c      	ldr	r2, [pc, #432]	; (8003438 <HAL_DMA_Abort_IT+0x3a8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d04a      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a6b      	ldr	r2, [pc, #428]	; (800343c <HAL_DMA_Abort_IT+0x3ac>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d045      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a69      	ldr	r2, [pc, #420]	; (8003440 <HAL_DMA_Abort_IT+0x3b0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d040      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a68      	ldr	r2, [pc, #416]	; (8003444 <HAL_DMA_Abort_IT+0x3b4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d03b      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a66      	ldr	r2, [pc, #408]	; (8003448 <HAL_DMA_Abort_IT+0x3b8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d036      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a65      	ldr	r2, [pc, #404]	; (800344c <HAL_DMA_Abort_IT+0x3bc>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d031      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a63      	ldr	r2, [pc, #396]	; (8003450 <HAL_DMA_Abort_IT+0x3c0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d02c      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a62      	ldr	r2, [pc, #392]	; (8003454 <HAL_DMA_Abort_IT+0x3c4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d027      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a60      	ldr	r2, [pc, #384]	; (8003458 <HAL_DMA_Abort_IT+0x3c8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d022      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a5f      	ldr	r2, [pc, #380]	; (800345c <HAL_DMA_Abort_IT+0x3cc>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d01d      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a5d      	ldr	r2, [pc, #372]	; (8003460 <HAL_DMA_Abort_IT+0x3d0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d018      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a5c      	ldr	r2, [pc, #368]	; (8003464 <HAL_DMA_Abort_IT+0x3d4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d013      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a5a      	ldr	r2, [pc, #360]	; (8003468 <HAL_DMA_Abort_IT+0x3d8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00e      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a59      	ldr	r2, [pc, #356]	; (800346c <HAL_DMA_Abort_IT+0x3dc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d009      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a57      	ldr	r2, [pc, #348]	; (8003470 <HAL_DMA_Abort_IT+0x3e0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_DMA_Abort_IT+0x290>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a56      	ldr	r2, [pc, #344]	; (8003474 <HAL_DMA_Abort_IT+0x3e4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d108      	bne.n	8003332 <HAL_DMA_Abort_IT+0x2a2>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	e007      	b.n	8003342 <HAL_DMA_Abort_IT+0x2b2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0201 	bic.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a3c      	ldr	r2, [pc, #240]	; (8003438 <HAL_DMA_Abort_IT+0x3a8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d072      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a3a      	ldr	r2, [pc, #232]	; (800343c <HAL_DMA_Abort_IT+0x3ac>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d06d      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a39      	ldr	r2, [pc, #228]	; (8003440 <HAL_DMA_Abort_IT+0x3b0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d068      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a37      	ldr	r2, [pc, #220]	; (8003444 <HAL_DMA_Abort_IT+0x3b4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d063      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a36      	ldr	r2, [pc, #216]	; (8003448 <HAL_DMA_Abort_IT+0x3b8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d05e      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a34      	ldr	r2, [pc, #208]	; (800344c <HAL_DMA_Abort_IT+0x3bc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d059      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a33      	ldr	r2, [pc, #204]	; (8003450 <HAL_DMA_Abort_IT+0x3c0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d054      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a31      	ldr	r2, [pc, #196]	; (8003454 <HAL_DMA_Abort_IT+0x3c4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d04f      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a30      	ldr	r2, [pc, #192]	; (8003458 <HAL_DMA_Abort_IT+0x3c8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d04a      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2e      	ldr	r2, [pc, #184]	; (800345c <HAL_DMA_Abort_IT+0x3cc>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d045      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a2d      	ldr	r2, [pc, #180]	; (8003460 <HAL_DMA_Abort_IT+0x3d0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d040      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a2b      	ldr	r2, [pc, #172]	; (8003464 <HAL_DMA_Abort_IT+0x3d4>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d03b      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a2a      	ldr	r2, [pc, #168]	; (8003468 <HAL_DMA_Abort_IT+0x3d8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d036      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a28      	ldr	r2, [pc, #160]	; (800346c <HAL_DMA_Abort_IT+0x3dc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d031      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a27      	ldr	r2, [pc, #156]	; (8003470 <HAL_DMA_Abort_IT+0x3e0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d02c      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a25      	ldr	r2, [pc, #148]	; (8003474 <HAL_DMA_Abort_IT+0x3e4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d027      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a24      	ldr	r2, [pc, #144]	; (8003478 <HAL_DMA_Abort_IT+0x3e8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d022      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a22      	ldr	r2, [pc, #136]	; (800347c <HAL_DMA_Abort_IT+0x3ec>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01d      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a21      	ldr	r2, [pc, #132]	; (8003480 <HAL_DMA_Abort_IT+0x3f0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d018      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1f      	ldr	r2, [pc, #124]	; (8003484 <HAL_DMA_Abort_IT+0x3f4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d013      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1e      	ldr	r2, [pc, #120]	; (8003488 <HAL_DMA_Abort_IT+0x3f8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00e      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1c      	ldr	r2, [pc, #112]	; (800348c <HAL_DMA_Abort_IT+0x3fc>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d009      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1b      	ldr	r2, [pc, #108]	; (8003490 <HAL_DMA_Abort_IT+0x400>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d004      	beq.n	8003432 <HAL_DMA_Abort_IT+0x3a2>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a19      	ldr	r2, [pc, #100]	; (8003494 <HAL_DMA_Abort_IT+0x404>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d132      	bne.n	8003498 <HAL_DMA_Abort_IT+0x408>
 8003432:	2301      	movs	r3, #1
 8003434:	e031      	b.n	800349a <HAL_DMA_Abort_IT+0x40a>
 8003436:	bf00      	nop
 8003438:	40020010 	.word	0x40020010
 800343c:	40020028 	.word	0x40020028
 8003440:	40020040 	.word	0x40020040
 8003444:	40020058 	.word	0x40020058
 8003448:	40020070 	.word	0x40020070
 800344c:	40020088 	.word	0x40020088
 8003450:	400200a0 	.word	0x400200a0
 8003454:	400200b8 	.word	0x400200b8
 8003458:	40020410 	.word	0x40020410
 800345c:	40020428 	.word	0x40020428
 8003460:	40020440 	.word	0x40020440
 8003464:	40020458 	.word	0x40020458
 8003468:	40020470 	.word	0x40020470
 800346c:	40020488 	.word	0x40020488
 8003470:	400204a0 	.word	0x400204a0
 8003474:	400204b8 	.word	0x400204b8
 8003478:	58025408 	.word	0x58025408
 800347c:	5802541c 	.word	0x5802541c
 8003480:	58025430 	.word	0x58025430
 8003484:	58025444 	.word	0x58025444
 8003488:	58025458 	.word	0x58025458
 800348c:	5802546c 	.word	0x5802546c
 8003490:	58025480 	.word	0x58025480
 8003494:	58025494 	.word	0x58025494
 8003498:	2300      	movs	r3, #0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d028      	beq.n	80034f0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	2201      	movs	r2, #1
 80034be:	409a      	lsls	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80034cc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00c      	beq.n	80034f0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034e4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80034ee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop

0800351c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08a      	sub	sp, #40	; 0x28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003528:	4b67      	ldr	r3, [pc, #412]	; (80036c8 <HAL_DMA_IRQHandler+0x1ac>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a67      	ldr	r2, [pc, #412]	; (80036cc <HAL_DMA_IRQHandler+0x1b0>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	0a9b      	lsrs	r3, r3, #10
 8003534:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003540:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a5f      	ldr	r2, [pc, #380]	; (80036d0 <HAL_DMA_IRQHandler+0x1b4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d04a      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a5d      	ldr	r2, [pc, #372]	; (80036d4 <HAL_DMA_IRQHandler+0x1b8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d045      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a5c      	ldr	r2, [pc, #368]	; (80036d8 <HAL_DMA_IRQHandler+0x1bc>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d040      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a5a      	ldr	r2, [pc, #360]	; (80036dc <HAL_DMA_IRQHandler+0x1c0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d03b      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a59      	ldr	r2, [pc, #356]	; (80036e0 <HAL_DMA_IRQHandler+0x1c4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d036      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a57      	ldr	r2, [pc, #348]	; (80036e4 <HAL_DMA_IRQHandler+0x1c8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d031      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a56      	ldr	r2, [pc, #344]	; (80036e8 <HAL_DMA_IRQHandler+0x1cc>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d02c      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a54      	ldr	r2, [pc, #336]	; (80036ec <HAL_DMA_IRQHandler+0x1d0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d027      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a53      	ldr	r2, [pc, #332]	; (80036f0 <HAL_DMA_IRQHandler+0x1d4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d022      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a51      	ldr	r2, [pc, #324]	; (80036f4 <HAL_DMA_IRQHandler+0x1d8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d01d      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a50      	ldr	r2, [pc, #320]	; (80036f8 <HAL_DMA_IRQHandler+0x1dc>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d018      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a4e      	ldr	r2, [pc, #312]	; (80036fc <HAL_DMA_IRQHandler+0x1e0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a4d      	ldr	r2, [pc, #308]	; (8003700 <HAL_DMA_IRQHandler+0x1e4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00e      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a4b      	ldr	r2, [pc, #300]	; (8003704 <HAL_DMA_IRQHandler+0x1e8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d009      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a4a      	ldr	r2, [pc, #296]	; (8003708 <HAL_DMA_IRQHandler+0x1ec>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_DMA_IRQHandler+0xd2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a48      	ldr	r2, [pc, #288]	; (800370c <HAL_DMA_IRQHandler+0x1f0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d101      	bne.n	80035f2 <HAL_DMA_IRQHandler+0xd6>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <HAL_DMA_IRQHandler+0xd8>
 80035f2:	2300      	movs	r3, #0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 842b 	beq.w	8003e50 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fe:	f003 031f 	and.w	r3, r3, #31
 8003602:	2208      	movs	r2, #8
 8003604:	409a      	lsls	r2, r3
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80a2 	beq.w	8003754 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a2e      	ldr	r2, [pc, #184]	; (80036d0 <HAL_DMA_IRQHandler+0x1b4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d04a      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a2d      	ldr	r2, [pc, #180]	; (80036d4 <HAL_DMA_IRQHandler+0x1b8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d045      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a2b      	ldr	r2, [pc, #172]	; (80036d8 <HAL_DMA_IRQHandler+0x1bc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d040      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a2a      	ldr	r2, [pc, #168]	; (80036dc <HAL_DMA_IRQHandler+0x1c0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d03b      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a28      	ldr	r2, [pc, #160]	; (80036e0 <HAL_DMA_IRQHandler+0x1c4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d036      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a27      	ldr	r2, [pc, #156]	; (80036e4 <HAL_DMA_IRQHandler+0x1c8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d031      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a25      	ldr	r2, [pc, #148]	; (80036e8 <HAL_DMA_IRQHandler+0x1cc>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d02c      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a24      	ldr	r2, [pc, #144]	; (80036ec <HAL_DMA_IRQHandler+0x1d0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d027      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a22      	ldr	r2, [pc, #136]	; (80036f0 <HAL_DMA_IRQHandler+0x1d4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d022      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a21      	ldr	r2, [pc, #132]	; (80036f4 <HAL_DMA_IRQHandler+0x1d8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d01d      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1f      	ldr	r2, [pc, #124]	; (80036f8 <HAL_DMA_IRQHandler+0x1dc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d018      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1e      	ldr	r2, [pc, #120]	; (80036fc <HAL_DMA_IRQHandler+0x1e0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d013      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <HAL_DMA_IRQHandler+0x1e4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00e      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <HAL_DMA_IRQHandler+0x1e8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d009      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a19      	ldr	r2, [pc, #100]	; (8003708 <HAL_DMA_IRQHandler+0x1ec>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d004      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x194>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a18      	ldr	r2, [pc, #96]	; (800370c <HAL_DMA_IRQHandler+0x1f0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d12f      	bne.n	8003710 <HAL_DMA_IRQHandler+0x1f4>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	bf14      	ite	ne
 80036be:	2301      	movne	r3, #1
 80036c0:	2300      	moveq	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	e02e      	b.n	8003724 <HAL_DMA_IRQHandler+0x208>
 80036c6:	bf00      	nop
 80036c8:	24000010 	.word	0x24000010
 80036cc:	1b4e81b5 	.word	0x1b4e81b5
 80036d0:	40020010 	.word	0x40020010
 80036d4:	40020028 	.word	0x40020028
 80036d8:	40020040 	.word	0x40020040
 80036dc:	40020058 	.word	0x40020058
 80036e0:	40020070 	.word	0x40020070
 80036e4:	40020088 	.word	0x40020088
 80036e8:	400200a0 	.word	0x400200a0
 80036ec:	400200b8 	.word	0x400200b8
 80036f0:	40020410 	.word	0x40020410
 80036f4:	40020428 	.word	0x40020428
 80036f8:	40020440 	.word	0x40020440
 80036fc:	40020458 	.word	0x40020458
 8003700:	40020470 	.word	0x40020470
 8003704:	40020488 	.word	0x40020488
 8003708:	400204a0 	.word	0x400204a0
 800370c:	400204b8 	.word	0x400204b8
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf14      	ite	ne
 800371e:	2301      	movne	r3, #1
 8003720:	2300      	moveq	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d015      	beq.n	8003754 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0204 	bic.w	r2, r2, #4
 8003736:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	2208      	movs	r2, #8
 8003742:	409a      	lsls	r2, r3
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374c:	f043 0201 	orr.w	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	fa22 f303 	lsr.w	r3, r2, r3
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d06e      	beq.n	8003848 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a69      	ldr	r2, [pc, #420]	; (8003914 <HAL_DMA_IRQHandler+0x3f8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d04a      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a67      	ldr	r2, [pc, #412]	; (8003918 <HAL_DMA_IRQHandler+0x3fc>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d045      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a66      	ldr	r2, [pc, #408]	; (800391c <HAL_DMA_IRQHandler+0x400>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d040      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a64      	ldr	r2, [pc, #400]	; (8003920 <HAL_DMA_IRQHandler+0x404>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d03b      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a63      	ldr	r2, [pc, #396]	; (8003924 <HAL_DMA_IRQHandler+0x408>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d036      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a61      	ldr	r2, [pc, #388]	; (8003928 <HAL_DMA_IRQHandler+0x40c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d031      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a60      	ldr	r2, [pc, #384]	; (800392c <HAL_DMA_IRQHandler+0x410>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d02c      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a5e      	ldr	r2, [pc, #376]	; (8003930 <HAL_DMA_IRQHandler+0x414>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d027      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a5d      	ldr	r2, [pc, #372]	; (8003934 <HAL_DMA_IRQHandler+0x418>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d022      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a5b      	ldr	r2, [pc, #364]	; (8003938 <HAL_DMA_IRQHandler+0x41c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d01d      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a5a      	ldr	r2, [pc, #360]	; (800393c <HAL_DMA_IRQHandler+0x420>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d018      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a58      	ldr	r2, [pc, #352]	; (8003940 <HAL_DMA_IRQHandler+0x424>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a57      	ldr	r2, [pc, #348]	; (8003944 <HAL_DMA_IRQHandler+0x428>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00e      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a55      	ldr	r2, [pc, #340]	; (8003948 <HAL_DMA_IRQHandler+0x42c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d009      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a54      	ldr	r2, [pc, #336]	; (800394c <HAL_DMA_IRQHandler+0x430>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d004      	beq.n	800380a <HAL_DMA_IRQHandler+0x2ee>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a52      	ldr	r2, [pc, #328]	; (8003950 <HAL_DMA_IRQHandler+0x434>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d10a      	bne.n	8003820 <HAL_DMA_IRQHandler+0x304>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003814:	2b00      	cmp	r3, #0
 8003816:	bf14      	ite	ne
 8003818:	2301      	movne	r3, #1
 800381a:	2300      	moveq	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	e003      	b.n	8003828 <HAL_DMA_IRQHandler+0x30c>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2300      	movs	r3, #0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00d      	beq.n	8003848 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	2201      	movs	r2, #1
 8003836:	409a      	lsls	r2, r3
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003840:	f043 0202 	orr.w	r2, r3, #2
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	2204      	movs	r2, #4
 8003852:	409a      	lsls	r2, r3
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 808f 	beq.w	800397c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a2c      	ldr	r2, [pc, #176]	; (8003914 <HAL_DMA_IRQHandler+0x3f8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d04a      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a2a      	ldr	r2, [pc, #168]	; (8003918 <HAL_DMA_IRQHandler+0x3fc>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d045      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a29      	ldr	r2, [pc, #164]	; (800391c <HAL_DMA_IRQHandler+0x400>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d040      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a27      	ldr	r2, [pc, #156]	; (8003920 <HAL_DMA_IRQHandler+0x404>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d03b      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a26      	ldr	r2, [pc, #152]	; (8003924 <HAL_DMA_IRQHandler+0x408>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d036      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a24      	ldr	r2, [pc, #144]	; (8003928 <HAL_DMA_IRQHandler+0x40c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d031      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a23      	ldr	r2, [pc, #140]	; (800392c <HAL_DMA_IRQHandler+0x410>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d02c      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a21      	ldr	r2, [pc, #132]	; (8003930 <HAL_DMA_IRQHandler+0x414>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d027      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a20      	ldr	r2, [pc, #128]	; (8003934 <HAL_DMA_IRQHandler+0x418>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d022      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1e      	ldr	r2, [pc, #120]	; (8003938 <HAL_DMA_IRQHandler+0x41c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01d      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1d      	ldr	r2, [pc, #116]	; (800393c <HAL_DMA_IRQHandler+0x420>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d018      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1b      	ldr	r2, [pc, #108]	; (8003940 <HAL_DMA_IRQHandler+0x424>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1a      	ldr	r2, [pc, #104]	; (8003944 <HAL_DMA_IRQHandler+0x428>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00e      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a18      	ldr	r2, [pc, #96]	; (8003948 <HAL_DMA_IRQHandler+0x42c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d009      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a17      	ldr	r2, [pc, #92]	; (800394c <HAL_DMA_IRQHandler+0x430>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d004      	beq.n	80038fe <HAL_DMA_IRQHandler+0x3e2>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a15      	ldr	r2, [pc, #84]	; (8003950 <HAL_DMA_IRQHandler+0x434>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d12a      	bne.n	8003954 <HAL_DMA_IRQHandler+0x438>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	bf14      	ite	ne
 800390c:	2301      	movne	r3, #1
 800390e:	2300      	moveq	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	e023      	b.n	800395c <HAL_DMA_IRQHandler+0x440>
 8003914:	40020010 	.word	0x40020010
 8003918:	40020028 	.word	0x40020028
 800391c:	40020040 	.word	0x40020040
 8003920:	40020058 	.word	0x40020058
 8003924:	40020070 	.word	0x40020070
 8003928:	40020088 	.word	0x40020088
 800392c:	400200a0 	.word	0x400200a0
 8003930:	400200b8 	.word	0x400200b8
 8003934:	40020410 	.word	0x40020410
 8003938:	40020428 	.word	0x40020428
 800393c:	40020440 	.word	0x40020440
 8003940:	40020458 	.word	0x40020458
 8003944:	40020470 	.word	0x40020470
 8003948:	40020488 	.word	0x40020488
 800394c:	400204a0 	.word	0x400204a0
 8003950:	400204b8 	.word	0x400204b8
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2300      	movs	r3, #0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00d      	beq.n	800397c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	2204      	movs	r2, #4
 800396a:	409a      	lsls	r2, r3
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003974:	f043 0204 	orr.w	r2, r3, #4
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	f003 031f 	and.w	r3, r3, #31
 8003984:	2210      	movs	r2, #16
 8003986:	409a      	lsls	r2, r3
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 80a6 	beq.w	8003ade <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a85      	ldr	r2, [pc, #532]	; (8003bac <HAL_DMA_IRQHandler+0x690>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d04a      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a83      	ldr	r2, [pc, #524]	; (8003bb0 <HAL_DMA_IRQHandler+0x694>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d045      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a82      	ldr	r2, [pc, #520]	; (8003bb4 <HAL_DMA_IRQHandler+0x698>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d040      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a80      	ldr	r2, [pc, #512]	; (8003bb8 <HAL_DMA_IRQHandler+0x69c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d03b      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a7f      	ldr	r2, [pc, #508]	; (8003bbc <HAL_DMA_IRQHandler+0x6a0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d036      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a7d      	ldr	r2, [pc, #500]	; (8003bc0 <HAL_DMA_IRQHandler+0x6a4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d031      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a7c      	ldr	r2, [pc, #496]	; (8003bc4 <HAL_DMA_IRQHandler+0x6a8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d02c      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a7a      	ldr	r2, [pc, #488]	; (8003bc8 <HAL_DMA_IRQHandler+0x6ac>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d027      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a79      	ldr	r2, [pc, #484]	; (8003bcc <HAL_DMA_IRQHandler+0x6b0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d022      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a77      	ldr	r2, [pc, #476]	; (8003bd0 <HAL_DMA_IRQHandler+0x6b4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d01d      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a76      	ldr	r2, [pc, #472]	; (8003bd4 <HAL_DMA_IRQHandler+0x6b8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d018      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a74      	ldr	r2, [pc, #464]	; (8003bd8 <HAL_DMA_IRQHandler+0x6bc>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d013      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a73      	ldr	r2, [pc, #460]	; (8003bdc <HAL_DMA_IRQHandler+0x6c0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00e      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a71      	ldr	r2, [pc, #452]	; (8003be0 <HAL_DMA_IRQHandler+0x6c4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d009      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a70      	ldr	r2, [pc, #448]	; (8003be4 <HAL_DMA_IRQHandler+0x6c8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d004      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x516>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a6e      	ldr	r2, [pc, #440]	; (8003be8 <HAL_DMA_IRQHandler+0x6cc>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d10a      	bne.n	8003a48 <HAL_DMA_IRQHandler+0x52c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bf14      	ite	ne
 8003a40:	2301      	movne	r3, #1
 8003a42:	2300      	moveq	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	e009      	b.n	8003a5c <HAL_DMA_IRQHandler+0x540>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bf14      	ite	ne
 8003a56:	2301      	movne	r3, #1
 8003a58:	2300      	moveq	r3, #0
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d03e      	beq.n	8003ade <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	2210      	movs	r2, #16
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d018      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d108      	bne.n	8003a9e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d024      	beq.n	8003ade <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4798      	blx	r3
 8003a9c:	e01f      	b.n	8003ade <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d01b      	beq.n	8003ade <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	4798      	blx	r3
 8003aae:	e016      	b.n	8003ade <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d107      	bne.n	8003ace <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0208 	bic.w	r2, r2, #8
 8003acc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 8110 	beq.w	8003d14 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a2c      	ldr	r2, [pc, #176]	; (8003bac <HAL_DMA_IRQHandler+0x690>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d04a      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a2b      	ldr	r2, [pc, #172]	; (8003bb0 <HAL_DMA_IRQHandler+0x694>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d045      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a29      	ldr	r2, [pc, #164]	; (8003bb4 <HAL_DMA_IRQHandler+0x698>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d040      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a28      	ldr	r2, [pc, #160]	; (8003bb8 <HAL_DMA_IRQHandler+0x69c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d03b      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a26      	ldr	r2, [pc, #152]	; (8003bbc <HAL_DMA_IRQHandler+0x6a0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d036      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a25      	ldr	r2, [pc, #148]	; (8003bc0 <HAL_DMA_IRQHandler+0x6a4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d031      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a23      	ldr	r2, [pc, #140]	; (8003bc4 <HAL_DMA_IRQHandler+0x6a8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d02c      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a22      	ldr	r2, [pc, #136]	; (8003bc8 <HAL_DMA_IRQHandler+0x6ac>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d027      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a20      	ldr	r2, [pc, #128]	; (8003bcc <HAL_DMA_IRQHandler+0x6b0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d022      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1f      	ldr	r2, [pc, #124]	; (8003bd0 <HAL_DMA_IRQHandler+0x6b4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d01d      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a1d      	ldr	r2, [pc, #116]	; (8003bd4 <HAL_DMA_IRQHandler+0x6b8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d018      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a1c      	ldr	r2, [pc, #112]	; (8003bd8 <HAL_DMA_IRQHandler+0x6bc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d013      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1a      	ldr	r2, [pc, #104]	; (8003bdc <HAL_DMA_IRQHandler+0x6c0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00e      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a19      	ldr	r2, [pc, #100]	; (8003be0 <HAL_DMA_IRQHandler+0x6c4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d009      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a17      	ldr	r2, [pc, #92]	; (8003be4 <HAL_DMA_IRQHandler+0x6c8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d004      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x678>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a16      	ldr	r2, [pc, #88]	; (8003be8 <HAL_DMA_IRQHandler+0x6cc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d12b      	bne.n	8003bec <HAL_DMA_IRQHandler+0x6d0>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	bf14      	ite	ne
 8003ba2:	2301      	movne	r3, #1
 8003ba4:	2300      	moveq	r3, #0
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	e02a      	b.n	8003c00 <HAL_DMA_IRQHandler+0x6e4>
 8003baa:	bf00      	nop
 8003bac:	40020010 	.word	0x40020010
 8003bb0:	40020028 	.word	0x40020028
 8003bb4:	40020040 	.word	0x40020040
 8003bb8:	40020058 	.word	0x40020058
 8003bbc:	40020070 	.word	0x40020070
 8003bc0:	40020088 	.word	0x40020088
 8003bc4:	400200a0 	.word	0x400200a0
 8003bc8:	400200b8 	.word	0x400200b8
 8003bcc:	40020410 	.word	0x40020410
 8003bd0:	40020428 	.word	0x40020428
 8003bd4:	40020440 	.word	0x40020440
 8003bd8:	40020458 	.word	0x40020458
 8003bdc:	40020470 	.word	0x40020470
 8003be0:	40020488 	.word	0x40020488
 8003be4:	400204a0 	.word	0x400204a0
 8003be8:	400204b8 	.word	0x400204b8
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	bf14      	ite	ne
 8003bfa:	2301      	movne	r3, #1
 8003bfc:	2300      	moveq	r3, #0
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8087 	beq.w	8003d14 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	2220      	movs	r2, #32
 8003c10:	409a      	lsls	r2, r3
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d139      	bne.n	8003c96 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0216 	bic.w	r2, r2, #22
 8003c30:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c40:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d103      	bne.n	8003c52 <HAL_DMA_IRQHandler+0x736>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d007      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0208 	bic.w	r2, r2, #8
 8003c60:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	223f      	movs	r2, #63	; 0x3f
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 8382 	beq.w	8004390 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	4798      	blx	r3
          }
          return;
 8003c94:	e37c      	b.n	8004390 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d018      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d108      	bne.n	8003cc4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d02c      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4798      	blx	r3
 8003cc2:	e027      	b.n	8003d14 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d023      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	4798      	blx	r3
 8003cd4:	e01e      	b.n	8003d14 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10f      	bne.n	8003d04 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0210 	bic.w	r2, r2, #16
 8003cf2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 833e 	beq.w	800439a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8088 	beq.w	8003e3c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2204      	movs	r2, #4
 8003d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a89      	ldr	r2, [pc, #548]	; (8003f60 <HAL_DMA_IRQHandler+0xa44>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d04a      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a88      	ldr	r2, [pc, #544]	; (8003f64 <HAL_DMA_IRQHandler+0xa48>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d045      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a86      	ldr	r2, [pc, #536]	; (8003f68 <HAL_DMA_IRQHandler+0xa4c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d040      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a85      	ldr	r2, [pc, #532]	; (8003f6c <HAL_DMA_IRQHandler+0xa50>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d03b      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a83      	ldr	r2, [pc, #524]	; (8003f70 <HAL_DMA_IRQHandler+0xa54>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d036      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a82      	ldr	r2, [pc, #520]	; (8003f74 <HAL_DMA_IRQHandler+0xa58>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d031      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a80      	ldr	r2, [pc, #512]	; (8003f78 <HAL_DMA_IRQHandler+0xa5c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d02c      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a7f      	ldr	r2, [pc, #508]	; (8003f7c <HAL_DMA_IRQHandler+0xa60>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d027      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a7d      	ldr	r2, [pc, #500]	; (8003f80 <HAL_DMA_IRQHandler+0xa64>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d022      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a7c      	ldr	r2, [pc, #496]	; (8003f84 <HAL_DMA_IRQHandler+0xa68>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d01d      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a7a      	ldr	r2, [pc, #488]	; (8003f88 <HAL_DMA_IRQHandler+0xa6c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d018      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a79      	ldr	r2, [pc, #484]	; (8003f8c <HAL_DMA_IRQHandler+0xa70>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d013      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a77      	ldr	r2, [pc, #476]	; (8003f90 <HAL_DMA_IRQHandler+0xa74>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00e      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a76      	ldr	r2, [pc, #472]	; (8003f94 <HAL_DMA_IRQHandler+0xa78>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d009      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a74      	ldr	r2, [pc, #464]	; (8003f98 <HAL_DMA_IRQHandler+0xa7c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d004      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x8b8>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a73      	ldr	r2, [pc, #460]	; (8003f9c <HAL_DMA_IRQHandler+0xa80>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d108      	bne.n	8003de6 <HAL_DMA_IRQHandler+0x8ca>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0201 	bic.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	e007      	b.n	8003df6 <HAL_DMA_IRQHandler+0x8da>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0201 	bic.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d307      	bcc.n	8003e12 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f2      	bne.n	8003df6 <HAL_DMA_IRQHandler+0x8da>
 8003e10:	e000      	b.n	8003e14 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003e12:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d004      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2203      	movs	r2, #3
 8003e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003e2a:	e003      	b.n	8003e34 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 82aa 	beq.w	800439a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
 8003e4e:	e2a4      	b.n	800439a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a52      	ldr	r2, [pc, #328]	; (8003fa0 <HAL_DMA_IRQHandler+0xa84>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d04a      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x9d4>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a51      	ldr	r2, [pc, #324]	; (8003fa4 <HAL_DMA_IRQHandler+0xa88>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d045      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x9d4>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a4f      	ldr	r2, [pc, #316]	; (8003fa8 <HAL_DMA_IRQHandler+0xa8c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d040      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x9d4>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a4e      	ldr	r2, [pc, #312]	; (8003fac <HAL_DMA_IRQHandler+0xa90>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d03b      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x9d4>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a4c      	ldr	r2, [pc, #304]	; (8003fb0 <HAL_DMA_IRQHandler+0xa94>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d036      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x9d4>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a4b      	ldr	r2, [pc, #300]	; (8003fb4 <HAL_DMA_IRQHandler+0xa98>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d031      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x9d4>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a49      	ldr	r2, [pc, #292]	; (8003fb8 <HAL_DMA_IRQHandler+0xa9c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d02c      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x9d4>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a48      	ldr	r2, [pc, #288]	; (8003fbc <HAL_DMA_IRQHandler+0xaa0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d027      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x9d4>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a46      	ldr	r2, [pc, #280]	; (8003fc0 <HAL_DMA_IRQHandler+0xaa4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d022      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x9d4>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a45      	ldr	r2, [pc, #276]	; (8003fc4 <HAL_DMA_IRQHandler+0xaa8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d01d      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x9d4>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a43      	ldr	r2, [pc, #268]	; (8003fc8 <HAL_DMA_IRQHandler+0xaac>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d018      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x9d4>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a42      	ldr	r2, [pc, #264]	; (8003fcc <HAL_DMA_IRQHandler+0xab0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d013      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x9d4>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a40      	ldr	r2, [pc, #256]	; (8003fd0 <HAL_DMA_IRQHandler+0xab4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00e      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x9d4>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a3f      	ldr	r2, [pc, #252]	; (8003fd4 <HAL_DMA_IRQHandler+0xab8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d009      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x9d4>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a3d      	ldr	r2, [pc, #244]	; (8003fd8 <HAL_DMA_IRQHandler+0xabc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d004      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x9d4>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a3c      	ldr	r2, [pc, #240]	; (8003fdc <HAL_DMA_IRQHandler+0xac0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d101      	bne.n	8003ef4 <HAL_DMA_IRQHandler+0x9d8>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <HAL_DMA_IRQHandler+0x9da>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 824f 	beq.w	800439a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	f003 031f 	and.w	r3, r3, #31
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	409a      	lsls	r2, r3
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	4013      	ands	r3, r2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 80dd 	beq.w	80040d4 <HAL_DMA_IRQHandler+0xbb8>
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 80d7 	beq.w	80040d4 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	2204      	movs	r2, #4
 8003f30:	409a      	lsls	r2, r3
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d059      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d14a      	bne.n	8003fe0 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 8220 	beq.w	8004394 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f5c:	e21a      	b.n	8004394 <HAL_DMA_IRQHandler+0xe78>
 8003f5e:	bf00      	nop
 8003f60:	40020010 	.word	0x40020010
 8003f64:	40020028 	.word	0x40020028
 8003f68:	40020040 	.word	0x40020040
 8003f6c:	40020058 	.word	0x40020058
 8003f70:	40020070 	.word	0x40020070
 8003f74:	40020088 	.word	0x40020088
 8003f78:	400200a0 	.word	0x400200a0
 8003f7c:	400200b8 	.word	0x400200b8
 8003f80:	40020410 	.word	0x40020410
 8003f84:	40020428 	.word	0x40020428
 8003f88:	40020440 	.word	0x40020440
 8003f8c:	40020458 	.word	0x40020458
 8003f90:	40020470 	.word	0x40020470
 8003f94:	40020488 	.word	0x40020488
 8003f98:	400204a0 	.word	0x400204a0
 8003f9c:	400204b8 	.word	0x400204b8
 8003fa0:	48022c08 	.word	0x48022c08
 8003fa4:	48022c1c 	.word	0x48022c1c
 8003fa8:	48022c30 	.word	0x48022c30
 8003fac:	48022c44 	.word	0x48022c44
 8003fb0:	48022c58 	.word	0x48022c58
 8003fb4:	48022c6c 	.word	0x48022c6c
 8003fb8:	48022c80 	.word	0x48022c80
 8003fbc:	48022c94 	.word	0x48022c94
 8003fc0:	58025408 	.word	0x58025408
 8003fc4:	5802541c 	.word	0x5802541c
 8003fc8:	58025430 	.word	0x58025430
 8003fcc:	58025444 	.word	0x58025444
 8003fd0:	58025458 	.word	0x58025458
 8003fd4:	5802546c 	.word	0x5802546c
 8003fd8:	58025480 	.word	0x58025480
 8003fdc:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 81d5 	beq.w	8004394 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ff2:	e1cf      	b.n	8004394 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d160      	bne.n	80040c0 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a7f      	ldr	r2, [pc, #508]	; (8004200 <HAL_DMA_IRQHandler+0xce4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d04a      	beq.n	800409e <HAL_DMA_IRQHandler+0xb82>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a7d      	ldr	r2, [pc, #500]	; (8004204 <HAL_DMA_IRQHandler+0xce8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d045      	beq.n	800409e <HAL_DMA_IRQHandler+0xb82>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a7c      	ldr	r2, [pc, #496]	; (8004208 <HAL_DMA_IRQHandler+0xcec>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d040      	beq.n	800409e <HAL_DMA_IRQHandler+0xb82>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a7a      	ldr	r2, [pc, #488]	; (800420c <HAL_DMA_IRQHandler+0xcf0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d03b      	beq.n	800409e <HAL_DMA_IRQHandler+0xb82>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a79      	ldr	r2, [pc, #484]	; (8004210 <HAL_DMA_IRQHandler+0xcf4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d036      	beq.n	800409e <HAL_DMA_IRQHandler+0xb82>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a77      	ldr	r2, [pc, #476]	; (8004214 <HAL_DMA_IRQHandler+0xcf8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d031      	beq.n	800409e <HAL_DMA_IRQHandler+0xb82>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a76      	ldr	r2, [pc, #472]	; (8004218 <HAL_DMA_IRQHandler+0xcfc>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d02c      	beq.n	800409e <HAL_DMA_IRQHandler+0xb82>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a74      	ldr	r2, [pc, #464]	; (800421c <HAL_DMA_IRQHandler+0xd00>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d027      	beq.n	800409e <HAL_DMA_IRQHandler+0xb82>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a73      	ldr	r2, [pc, #460]	; (8004220 <HAL_DMA_IRQHandler+0xd04>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d022      	beq.n	800409e <HAL_DMA_IRQHandler+0xb82>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a71      	ldr	r2, [pc, #452]	; (8004224 <HAL_DMA_IRQHandler+0xd08>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01d      	beq.n	800409e <HAL_DMA_IRQHandler+0xb82>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a70      	ldr	r2, [pc, #448]	; (8004228 <HAL_DMA_IRQHandler+0xd0c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d018      	beq.n	800409e <HAL_DMA_IRQHandler+0xb82>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a6e      	ldr	r2, [pc, #440]	; (800422c <HAL_DMA_IRQHandler+0xd10>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d013      	beq.n	800409e <HAL_DMA_IRQHandler+0xb82>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a6d      	ldr	r2, [pc, #436]	; (8004230 <HAL_DMA_IRQHandler+0xd14>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00e      	beq.n	800409e <HAL_DMA_IRQHandler+0xb82>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a6b      	ldr	r2, [pc, #428]	; (8004234 <HAL_DMA_IRQHandler+0xd18>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d009      	beq.n	800409e <HAL_DMA_IRQHandler+0xb82>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a6a      	ldr	r2, [pc, #424]	; (8004238 <HAL_DMA_IRQHandler+0xd1c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d004      	beq.n	800409e <HAL_DMA_IRQHandler+0xb82>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a68      	ldr	r2, [pc, #416]	; (800423c <HAL_DMA_IRQHandler+0xd20>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d108      	bne.n	80040b0 <HAL_DMA_IRQHandler+0xb94>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0208 	bic.w	r2, r2, #8
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	e007      	b.n	80040c0 <HAL_DMA_IRQHandler+0xba4>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0204 	bic.w	r2, r2, #4
 80040be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8165 	beq.w	8004394 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040d2:	e15f      	b.n	8004394 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	2202      	movs	r2, #2
 80040de:	409a      	lsls	r2, r3
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 80c5 	beq.w	8004274 <HAL_DMA_IRQHandler+0xd58>
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80bf 	beq.w	8004274 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	2202      	movs	r2, #2
 8004100:	409a      	lsls	r2, r3
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d018      	beq.n	8004142 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d109      	bne.n	800412e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 813a 	beq.w	8004398 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800412c:	e134      	b.n	8004398 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 8130 	beq.w	8004398 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004140:	e12a      	b.n	8004398 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	2b00      	cmp	r3, #0
 800414a:	f040 8089 	bne.w	8004260 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a2b      	ldr	r2, [pc, #172]	; (8004200 <HAL_DMA_IRQHandler+0xce4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d04a      	beq.n	80041ee <HAL_DMA_IRQHandler+0xcd2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a29      	ldr	r2, [pc, #164]	; (8004204 <HAL_DMA_IRQHandler+0xce8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d045      	beq.n	80041ee <HAL_DMA_IRQHandler+0xcd2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a28      	ldr	r2, [pc, #160]	; (8004208 <HAL_DMA_IRQHandler+0xcec>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d040      	beq.n	80041ee <HAL_DMA_IRQHandler+0xcd2>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a26      	ldr	r2, [pc, #152]	; (800420c <HAL_DMA_IRQHandler+0xcf0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d03b      	beq.n	80041ee <HAL_DMA_IRQHandler+0xcd2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a25      	ldr	r2, [pc, #148]	; (8004210 <HAL_DMA_IRQHandler+0xcf4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d036      	beq.n	80041ee <HAL_DMA_IRQHandler+0xcd2>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a23      	ldr	r2, [pc, #140]	; (8004214 <HAL_DMA_IRQHandler+0xcf8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d031      	beq.n	80041ee <HAL_DMA_IRQHandler+0xcd2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a22      	ldr	r2, [pc, #136]	; (8004218 <HAL_DMA_IRQHandler+0xcfc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d02c      	beq.n	80041ee <HAL_DMA_IRQHandler+0xcd2>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a20      	ldr	r2, [pc, #128]	; (800421c <HAL_DMA_IRQHandler+0xd00>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d027      	beq.n	80041ee <HAL_DMA_IRQHandler+0xcd2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a1f      	ldr	r2, [pc, #124]	; (8004220 <HAL_DMA_IRQHandler+0xd04>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d022      	beq.n	80041ee <HAL_DMA_IRQHandler+0xcd2>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1d      	ldr	r2, [pc, #116]	; (8004224 <HAL_DMA_IRQHandler+0xd08>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d01d      	beq.n	80041ee <HAL_DMA_IRQHandler+0xcd2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1c      	ldr	r2, [pc, #112]	; (8004228 <HAL_DMA_IRQHandler+0xd0c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d018      	beq.n	80041ee <HAL_DMA_IRQHandler+0xcd2>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a1a      	ldr	r2, [pc, #104]	; (800422c <HAL_DMA_IRQHandler+0xd10>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d013      	beq.n	80041ee <HAL_DMA_IRQHandler+0xcd2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a19      	ldr	r2, [pc, #100]	; (8004230 <HAL_DMA_IRQHandler+0xd14>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00e      	beq.n	80041ee <HAL_DMA_IRQHandler+0xcd2>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a17      	ldr	r2, [pc, #92]	; (8004234 <HAL_DMA_IRQHandler+0xd18>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d009      	beq.n	80041ee <HAL_DMA_IRQHandler+0xcd2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a16      	ldr	r2, [pc, #88]	; (8004238 <HAL_DMA_IRQHandler+0xd1c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d004      	beq.n	80041ee <HAL_DMA_IRQHandler+0xcd2>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a14      	ldr	r2, [pc, #80]	; (800423c <HAL_DMA_IRQHandler+0xd20>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d128      	bne.n	8004240 <HAL_DMA_IRQHandler+0xd24>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0214 	bic.w	r2, r2, #20
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	e027      	b.n	8004250 <HAL_DMA_IRQHandler+0xd34>
 8004200:	40020010 	.word	0x40020010
 8004204:	40020028 	.word	0x40020028
 8004208:	40020040 	.word	0x40020040
 800420c:	40020058 	.word	0x40020058
 8004210:	40020070 	.word	0x40020070
 8004214:	40020088 	.word	0x40020088
 8004218:	400200a0 	.word	0x400200a0
 800421c:	400200b8 	.word	0x400200b8
 8004220:	40020410 	.word	0x40020410
 8004224:	40020428 	.word	0x40020428
 8004228:	40020440 	.word	0x40020440
 800422c:	40020458 	.word	0x40020458
 8004230:	40020470 	.word	0x40020470
 8004234:	40020488 	.word	0x40020488
 8004238:	400204a0 	.word	0x400204a0
 800423c:	400204b8 	.word	0x400204b8
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 020a 	bic.w	r2, r2, #10
 800424e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 8097 	beq.w	8004398 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004272:	e091      	b.n	8004398 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004278:	f003 031f 	and.w	r3, r3, #31
 800427c:	2208      	movs	r2, #8
 800427e:	409a      	lsls	r2, r3
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	4013      	ands	r3, r2
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 8088 	beq.w	800439a <HAL_DMA_IRQHandler+0xe7e>
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 8082 	beq.w	800439a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a41      	ldr	r2, [pc, #260]	; (80043a0 <HAL_DMA_IRQHandler+0xe84>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d04a      	beq.n	8004336 <HAL_DMA_IRQHandler+0xe1a>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a3f      	ldr	r2, [pc, #252]	; (80043a4 <HAL_DMA_IRQHandler+0xe88>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d045      	beq.n	8004336 <HAL_DMA_IRQHandler+0xe1a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a3e      	ldr	r2, [pc, #248]	; (80043a8 <HAL_DMA_IRQHandler+0xe8c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d040      	beq.n	8004336 <HAL_DMA_IRQHandler+0xe1a>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a3c      	ldr	r2, [pc, #240]	; (80043ac <HAL_DMA_IRQHandler+0xe90>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d03b      	beq.n	8004336 <HAL_DMA_IRQHandler+0xe1a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a3b      	ldr	r2, [pc, #236]	; (80043b0 <HAL_DMA_IRQHandler+0xe94>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d036      	beq.n	8004336 <HAL_DMA_IRQHandler+0xe1a>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a39      	ldr	r2, [pc, #228]	; (80043b4 <HAL_DMA_IRQHandler+0xe98>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d031      	beq.n	8004336 <HAL_DMA_IRQHandler+0xe1a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a38      	ldr	r2, [pc, #224]	; (80043b8 <HAL_DMA_IRQHandler+0xe9c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d02c      	beq.n	8004336 <HAL_DMA_IRQHandler+0xe1a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a36      	ldr	r2, [pc, #216]	; (80043bc <HAL_DMA_IRQHandler+0xea0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d027      	beq.n	8004336 <HAL_DMA_IRQHandler+0xe1a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a35      	ldr	r2, [pc, #212]	; (80043c0 <HAL_DMA_IRQHandler+0xea4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d022      	beq.n	8004336 <HAL_DMA_IRQHandler+0xe1a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a33      	ldr	r2, [pc, #204]	; (80043c4 <HAL_DMA_IRQHandler+0xea8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d01d      	beq.n	8004336 <HAL_DMA_IRQHandler+0xe1a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a32      	ldr	r2, [pc, #200]	; (80043c8 <HAL_DMA_IRQHandler+0xeac>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d018      	beq.n	8004336 <HAL_DMA_IRQHandler+0xe1a>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a30      	ldr	r2, [pc, #192]	; (80043cc <HAL_DMA_IRQHandler+0xeb0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d013      	beq.n	8004336 <HAL_DMA_IRQHandler+0xe1a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a2f      	ldr	r2, [pc, #188]	; (80043d0 <HAL_DMA_IRQHandler+0xeb4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00e      	beq.n	8004336 <HAL_DMA_IRQHandler+0xe1a>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a2d      	ldr	r2, [pc, #180]	; (80043d4 <HAL_DMA_IRQHandler+0xeb8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d009      	beq.n	8004336 <HAL_DMA_IRQHandler+0xe1a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a2c      	ldr	r2, [pc, #176]	; (80043d8 <HAL_DMA_IRQHandler+0xebc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d004      	beq.n	8004336 <HAL_DMA_IRQHandler+0xe1a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a2a      	ldr	r2, [pc, #168]	; (80043dc <HAL_DMA_IRQHandler+0xec0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d108      	bne.n	8004348 <HAL_DMA_IRQHandler+0xe2c>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 021c 	bic.w	r2, r2, #28
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	e007      	b.n	8004358 <HAL_DMA_IRQHandler+0xe3c>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 020e 	bic.w	r2, r2, #14
 8004356:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	2201      	movs	r2, #1
 8004362:	409a      	lsls	r2, r3
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	4798      	blx	r3
 800438e:	e004      	b.n	800439a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004390:	bf00      	nop
 8004392:	e002      	b.n	800439a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004394:	bf00      	nop
 8004396:	e000      	b.n	800439a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004398:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800439a:	3728      	adds	r7, #40	; 0x28
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40020010 	.word	0x40020010
 80043a4:	40020028 	.word	0x40020028
 80043a8:	40020040 	.word	0x40020040
 80043ac:	40020058 	.word	0x40020058
 80043b0:	40020070 	.word	0x40020070
 80043b4:	40020088 	.word	0x40020088
 80043b8:	400200a0 	.word	0x400200a0
 80043bc:	400200b8 	.word	0x400200b8
 80043c0:	40020410 	.word	0x40020410
 80043c4:	40020428 	.word	0x40020428
 80043c8:	40020440 	.word	0x40020440
 80043cc:	40020458 	.word	0x40020458
 80043d0:	40020470 	.word	0x40020470
 80043d4:	40020488 	.word	0x40020488
 80043d8:	400204a0 	.word	0x400204a0
 80043dc:	400204b8 	.word	0x400204b8

080043e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a42      	ldr	r2, [pc, #264]	; (80044f8 <DMA_CalcBaseAndBitshift+0x118>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d04a      	beq.n	8004488 <DMA_CalcBaseAndBitshift+0xa8>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a41      	ldr	r2, [pc, #260]	; (80044fc <DMA_CalcBaseAndBitshift+0x11c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d045      	beq.n	8004488 <DMA_CalcBaseAndBitshift+0xa8>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a3f      	ldr	r2, [pc, #252]	; (8004500 <DMA_CalcBaseAndBitshift+0x120>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d040      	beq.n	8004488 <DMA_CalcBaseAndBitshift+0xa8>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a3e      	ldr	r2, [pc, #248]	; (8004504 <DMA_CalcBaseAndBitshift+0x124>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d03b      	beq.n	8004488 <DMA_CalcBaseAndBitshift+0xa8>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a3c      	ldr	r2, [pc, #240]	; (8004508 <DMA_CalcBaseAndBitshift+0x128>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d036      	beq.n	8004488 <DMA_CalcBaseAndBitshift+0xa8>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a3b      	ldr	r2, [pc, #236]	; (800450c <DMA_CalcBaseAndBitshift+0x12c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d031      	beq.n	8004488 <DMA_CalcBaseAndBitshift+0xa8>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a39      	ldr	r2, [pc, #228]	; (8004510 <DMA_CalcBaseAndBitshift+0x130>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d02c      	beq.n	8004488 <DMA_CalcBaseAndBitshift+0xa8>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a38      	ldr	r2, [pc, #224]	; (8004514 <DMA_CalcBaseAndBitshift+0x134>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d027      	beq.n	8004488 <DMA_CalcBaseAndBitshift+0xa8>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a36      	ldr	r2, [pc, #216]	; (8004518 <DMA_CalcBaseAndBitshift+0x138>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d022      	beq.n	8004488 <DMA_CalcBaseAndBitshift+0xa8>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a35      	ldr	r2, [pc, #212]	; (800451c <DMA_CalcBaseAndBitshift+0x13c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d01d      	beq.n	8004488 <DMA_CalcBaseAndBitshift+0xa8>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a33      	ldr	r2, [pc, #204]	; (8004520 <DMA_CalcBaseAndBitshift+0x140>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d018      	beq.n	8004488 <DMA_CalcBaseAndBitshift+0xa8>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a32      	ldr	r2, [pc, #200]	; (8004524 <DMA_CalcBaseAndBitshift+0x144>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d013      	beq.n	8004488 <DMA_CalcBaseAndBitshift+0xa8>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a30      	ldr	r2, [pc, #192]	; (8004528 <DMA_CalcBaseAndBitshift+0x148>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00e      	beq.n	8004488 <DMA_CalcBaseAndBitshift+0xa8>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a2f      	ldr	r2, [pc, #188]	; (800452c <DMA_CalcBaseAndBitshift+0x14c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d009      	beq.n	8004488 <DMA_CalcBaseAndBitshift+0xa8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a2d      	ldr	r2, [pc, #180]	; (8004530 <DMA_CalcBaseAndBitshift+0x150>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <DMA_CalcBaseAndBitshift+0xa8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a2c      	ldr	r2, [pc, #176]	; (8004534 <DMA_CalcBaseAndBitshift+0x154>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d101      	bne.n	800448c <DMA_CalcBaseAndBitshift+0xac>
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <DMA_CalcBaseAndBitshift+0xae>
 800448c:	2300      	movs	r3, #0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d024      	beq.n	80044dc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	3b10      	subs	r3, #16
 800449a:	4a27      	ldr	r2, [pc, #156]	; (8004538 <DMA_CalcBaseAndBitshift+0x158>)
 800449c:	fba2 2303 	umull	r2, r3, r2, r3
 80044a0:	091b      	lsrs	r3, r3, #4
 80044a2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	4a24      	ldr	r2, [pc, #144]	; (800453c <DMA_CalcBaseAndBitshift+0x15c>)
 80044ac:	5cd3      	ldrb	r3, [r2, r3]
 80044ae:	461a      	mov	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d908      	bls.n	80044cc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	4b1f      	ldr	r3, [pc, #124]	; (8004540 <DMA_CalcBaseAndBitshift+0x160>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	1d1a      	adds	r2, r3, #4
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	659a      	str	r2, [r3, #88]	; 0x58
 80044ca:	e00d      	b.n	80044e8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	4b1b      	ldr	r3, [pc, #108]	; (8004540 <DMA_CalcBaseAndBitshift+0x160>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6593      	str	r3, [r2, #88]	; 0x58
 80044da:	e005      	b.n	80044e8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	40020010 	.word	0x40020010
 80044fc:	40020028 	.word	0x40020028
 8004500:	40020040 	.word	0x40020040
 8004504:	40020058 	.word	0x40020058
 8004508:	40020070 	.word	0x40020070
 800450c:	40020088 	.word	0x40020088
 8004510:	400200a0 	.word	0x400200a0
 8004514:	400200b8 	.word	0x400200b8
 8004518:	40020410 	.word	0x40020410
 800451c:	40020428 	.word	0x40020428
 8004520:	40020440 	.word	0x40020440
 8004524:	40020458 	.word	0x40020458
 8004528:	40020470 	.word	0x40020470
 800452c:	40020488 	.word	0x40020488
 8004530:	400204a0 	.word	0x400204a0
 8004534:	400204b8 	.word	0x400204b8
 8004538:	aaaaaaab 	.word	0xaaaaaaab
 800453c:	0800c7d4 	.word	0x0800c7d4
 8004540:	fffffc00 	.word	0xfffffc00

08004544 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d120      	bne.n	800459a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455c:	2b03      	cmp	r3, #3
 800455e:	d858      	bhi.n	8004612 <DMA_CheckFifoParam+0xce>
 8004560:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <DMA_CheckFifoParam+0x24>)
 8004562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004566:	bf00      	nop
 8004568:	08004579 	.word	0x08004579
 800456c:	0800458b 	.word	0x0800458b
 8004570:	08004579 	.word	0x08004579
 8004574:	08004613 	.word	0x08004613
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d048      	beq.n	8004616 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004588:	e045      	b.n	8004616 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004592:	d142      	bne.n	800461a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004598:	e03f      	b.n	800461a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a2:	d123      	bne.n	80045ec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d838      	bhi.n	800461e <DMA_CheckFifoParam+0xda>
 80045ac:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <DMA_CheckFifoParam+0x70>)
 80045ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b2:	bf00      	nop
 80045b4:	080045c5 	.word	0x080045c5
 80045b8:	080045cb 	.word	0x080045cb
 80045bc:	080045c5 	.word	0x080045c5
 80045c0:	080045dd 	.word	0x080045dd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
        break;
 80045c8:	e030      	b.n	800462c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d025      	beq.n	8004622 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045da:	e022      	b.n	8004622 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045e4:	d11f      	bne.n	8004626 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045ea:	e01c      	b.n	8004626 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d902      	bls.n	80045fa <DMA_CheckFifoParam+0xb6>
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d003      	beq.n	8004600 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80045f8:	e018      	b.n	800462c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	73fb      	strb	r3, [r7, #15]
        break;
 80045fe:	e015      	b.n	800462c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00e      	beq.n	800462a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	73fb      	strb	r3, [r7, #15]
    break;
 8004610:	e00b      	b.n	800462a <DMA_CheckFifoParam+0xe6>
        break;
 8004612:	bf00      	nop
 8004614:	e00a      	b.n	800462c <DMA_CheckFifoParam+0xe8>
        break;
 8004616:	bf00      	nop
 8004618:	e008      	b.n	800462c <DMA_CheckFifoParam+0xe8>
        break;
 800461a:	bf00      	nop
 800461c:	e006      	b.n	800462c <DMA_CheckFifoParam+0xe8>
        break;
 800461e:	bf00      	nop
 8004620:	e004      	b.n	800462c <DMA_CheckFifoParam+0xe8>
        break;
 8004622:	bf00      	nop
 8004624:	e002      	b.n	800462c <DMA_CheckFifoParam+0xe8>
        break;
 8004626:	bf00      	nop
 8004628:	e000      	b.n	800462c <DMA_CheckFifoParam+0xe8>
    break;
 800462a:	bf00      	nop
    }
  }

  return status;
 800462c:	7bfb      	ldrb	r3, [r7, #15]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop

0800463c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a38      	ldr	r2, [pc, #224]	; (8004730 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d022      	beq.n	800469a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a36      	ldr	r2, [pc, #216]	; (8004734 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d01d      	beq.n	800469a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a35      	ldr	r2, [pc, #212]	; (8004738 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d018      	beq.n	800469a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a33      	ldr	r2, [pc, #204]	; (800473c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a32      	ldr	r2, [pc, #200]	; (8004740 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00e      	beq.n	800469a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a30      	ldr	r2, [pc, #192]	; (8004744 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d009      	beq.n	800469a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a2f      	ldr	r2, [pc, #188]	; (8004748 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d004      	beq.n	800469a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a2d      	ldr	r2, [pc, #180]	; (800474c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d101      	bne.n	800469e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800469e:	2300      	movs	r3, #0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01a      	beq.n	80046da <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	3b08      	subs	r3, #8
 80046ac:	4a28      	ldr	r2, [pc, #160]	; (8004750 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	091b      	lsrs	r3, r3, #4
 80046b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4b26      	ldr	r3, [pc, #152]	; (8004754 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80046ba:	4413      	add	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	461a      	mov	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a24      	ldr	r2, [pc, #144]	; (8004758 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80046c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	2201      	movs	r2, #1
 80046d2:	409a      	lsls	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80046d8:	e024      	b.n	8004724 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	3b10      	subs	r3, #16
 80046e2:	4a1e      	ldr	r2, [pc, #120]	; (800475c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80046e4:	fba2 2303 	umull	r2, r3, r2, r3
 80046e8:	091b      	lsrs	r3, r3, #4
 80046ea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4a1c      	ldr	r2, [pc, #112]	; (8004760 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d806      	bhi.n	8004702 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4a1b      	ldr	r2, [pc, #108]	; (8004764 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d902      	bls.n	8004702 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	3308      	adds	r3, #8
 8004700:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4b18      	ldr	r3, [pc, #96]	; (8004768 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004706:	4413      	add	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	461a      	mov	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a16      	ldr	r2, [pc, #88]	; (800476c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004714:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f003 031f 	and.w	r3, r3, #31
 800471c:	2201      	movs	r2, #1
 800471e:	409a      	lsls	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004724:	bf00      	nop
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	58025408 	.word	0x58025408
 8004734:	5802541c 	.word	0x5802541c
 8004738:	58025430 	.word	0x58025430
 800473c:	58025444 	.word	0x58025444
 8004740:	58025458 	.word	0x58025458
 8004744:	5802546c 	.word	0x5802546c
 8004748:	58025480 	.word	0x58025480
 800474c:	58025494 	.word	0x58025494
 8004750:	cccccccd 	.word	0xcccccccd
 8004754:	16009600 	.word	0x16009600
 8004758:	58025880 	.word	0x58025880
 800475c:	aaaaaaab 	.word	0xaaaaaaab
 8004760:	400204b8 	.word	0x400204b8
 8004764:	4002040f 	.word	0x4002040f
 8004768:	10008200 	.word	0x10008200
 800476c:	40020880 	.word	0x40020880

08004770 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	b2db      	uxtb	r3, r3
 800477e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d04a      	beq.n	800481c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2b08      	cmp	r3, #8
 800478a:	d847      	bhi.n	800481c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a25      	ldr	r2, [pc, #148]	; (8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d022      	beq.n	80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a24      	ldr	r2, [pc, #144]	; (800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d01d      	beq.n	80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a22      	ldr	r2, [pc, #136]	; (8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d018      	beq.n	80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a21      	ldr	r2, [pc, #132]	; (8004834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d013      	beq.n	80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1f      	ldr	r2, [pc, #124]	; (8004838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00e      	beq.n	80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1e      	ldr	r2, [pc, #120]	; (800483c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d009      	beq.n	80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1c      	ldr	r2, [pc, #112]	; (8004840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d004      	beq.n	80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1b      	ldr	r2, [pc, #108]	; (8004844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d101      	bne.n	80047e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80047e0:	2300      	movs	r3, #0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4b17      	ldr	r3, [pc, #92]	; (8004848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80047ea:	4413      	add	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	461a      	mov	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a15      	ldr	r2, [pc, #84]	; (800484c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80047f8:	671a      	str	r2, [r3, #112]	; 0x70
 80047fa:	e009      	b.n	8004810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4b14      	ldr	r3, [pc, #80]	; (8004850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	461a      	mov	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a11      	ldr	r2, [pc, #68]	; (8004854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800480e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	3b01      	subs	r3, #1
 8004814:	2201      	movs	r2, #1
 8004816:	409a      	lsls	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800481c:	bf00      	nop
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	58025408 	.word	0x58025408
 800482c:	5802541c 	.word	0x5802541c
 8004830:	58025430 	.word	0x58025430
 8004834:	58025444 	.word	0x58025444
 8004838:	58025458 	.word	0x58025458
 800483c:	5802546c 	.word	0x5802546c
 8004840:	58025480 	.word	0x58025480
 8004844:	58025494 	.word	0x58025494
 8004848:	1600963f 	.word	0x1600963f
 800484c:	58025940 	.word	0x58025940
 8004850:	1000823f 	.word	0x1000823f
 8004854:	40020940 	.word	0x40020940

08004858 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004858:	b480      	push	{r7}
 800485a:	b089      	sub	sp, #36	; 0x24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004862:	2300      	movs	r3, #0
 8004864:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004866:	4b89      	ldr	r3, [pc, #548]	; (8004a8c <HAL_GPIO_Init+0x234>)
 8004868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800486a:	e194      	b.n	8004b96 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	2101      	movs	r1, #1
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	fa01 f303 	lsl.w	r3, r1, r3
 8004878:	4013      	ands	r3, r2
 800487a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 8186 	beq.w	8004b90 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 0303 	and.w	r3, r3, #3
 800488c:	2b01      	cmp	r3, #1
 800488e:	d005      	beq.n	800489c <HAL_GPIO_Init+0x44>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d130      	bne.n	80048fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	2203      	movs	r2, #3
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	43db      	mvns	r3, r3
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	4013      	ands	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048d2:	2201      	movs	r2, #1
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	43db      	mvns	r3, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4013      	ands	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	f003 0201 	and.w	r2, r3, #1
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	2b03      	cmp	r3, #3
 8004908:	d017      	beq.n	800493a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	2203      	movs	r2, #3
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	43db      	mvns	r3, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4013      	ands	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4313      	orrs	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d123      	bne.n	800498e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	08da      	lsrs	r2, r3, #3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3208      	adds	r2, #8
 800494e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	220f      	movs	r2, #15
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	43db      	mvns	r3, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4013      	ands	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	4313      	orrs	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	08da      	lsrs	r2, r3, #3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3208      	adds	r2, #8
 8004988:	69b9      	ldr	r1, [r7, #24]
 800498a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	2203      	movs	r2, #3
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	43db      	mvns	r3, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4013      	ands	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f003 0203 	and.w	r2, r3, #3
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 80e0 	beq.w	8004b90 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049d0:	4b2f      	ldr	r3, [pc, #188]	; (8004a90 <HAL_GPIO_Init+0x238>)
 80049d2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80049d6:	4a2e      	ldr	r2, [pc, #184]	; (8004a90 <HAL_GPIO_Init+0x238>)
 80049d8:	f043 0302 	orr.w	r3, r3, #2
 80049dc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80049e0:	4b2b      	ldr	r3, [pc, #172]	; (8004a90 <HAL_GPIO_Init+0x238>)
 80049e2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049ee:	4a29      	ldr	r2, [pc, #164]	; (8004a94 <HAL_GPIO_Init+0x23c>)
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	089b      	lsrs	r3, r3, #2
 80049f4:	3302      	adds	r3, #2
 80049f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	220f      	movs	r2, #15
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a20      	ldr	r2, [pc, #128]	; (8004a98 <HAL_GPIO_Init+0x240>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d052      	beq.n	8004ac0 <HAL_GPIO_Init+0x268>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a1f      	ldr	r2, [pc, #124]	; (8004a9c <HAL_GPIO_Init+0x244>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d031      	beq.n	8004a86 <HAL_GPIO_Init+0x22e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a1e      	ldr	r2, [pc, #120]	; (8004aa0 <HAL_GPIO_Init+0x248>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d02b      	beq.n	8004a82 <HAL_GPIO_Init+0x22a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <HAL_GPIO_Init+0x24c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d025      	beq.n	8004a7e <HAL_GPIO_Init+0x226>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a1c      	ldr	r2, [pc, #112]	; (8004aa8 <HAL_GPIO_Init+0x250>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d01f      	beq.n	8004a7a <HAL_GPIO_Init+0x222>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a1b      	ldr	r2, [pc, #108]	; (8004aac <HAL_GPIO_Init+0x254>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d019      	beq.n	8004a76 <HAL_GPIO_Init+0x21e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a1a      	ldr	r2, [pc, #104]	; (8004ab0 <HAL_GPIO_Init+0x258>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d013      	beq.n	8004a72 <HAL_GPIO_Init+0x21a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a19      	ldr	r2, [pc, #100]	; (8004ab4 <HAL_GPIO_Init+0x25c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00d      	beq.n	8004a6e <HAL_GPIO_Init+0x216>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a18      	ldr	r2, [pc, #96]	; (8004ab8 <HAL_GPIO_Init+0x260>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d007      	beq.n	8004a6a <HAL_GPIO_Init+0x212>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a17      	ldr	r2, [pc, #92]	; (8004abc <HAL_GPIO_Init+0x264>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d101      	bne.n	8004a66 <HAL_GPIO_Init+0x20e>
 8004a62:	2309      	movs	r3, #9
 8004a64:	e02d      	b.n	8004ac2 <HAL_GPIO_Init+0x26a>
 8004a66:	230a      	movs	r3, #10
 8004a68:	e02b      	b.n	8004ac2 <HAL_GPIO_Init+0x26a>
 8004a6a:	2308      	movs	r3, #8
 8004a6c:	e029      	b.n	8004ac2 <HAL_GPIO_Init+0x26a>
 8004a6e:	2307      	movs	r3, #7
 8004a70:	e027      	b.n	8004ac2 <HAL_GPIO_Init+0x26a>
 8004a72:	2306      	movs	r3, #6
 8004a74:	e025      	b.n	8004ac2 <HAL_GPIO_Init+0x26a>
 8004a76:	2305      	movs	r3, #5
 8004a78:	e023      	b.n	8004ac2 <HAL_GPIO_Init+0x26a>
 8004a7a:	2304      	movs	r3, #4
 8004a7c:	e021      	b.n	8004ac2 <HAL_GPIO_Init+0x26a>
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e01f      	b.n	8004ac2 <HAL_GPIO_Init+0x26a>
 8004a82:	2302      	movs	r3, #2
 8004a84:	e01d      	b.n	8004ac2 <HAL_GPIO_Init+0x26a>
 8004a86:	2301      	movs	r3, #1
 8004a88:	e01b      	b.n	8004ac2 <HAL_GPIO_Init+0x26a>
 8004a8a:	bf00      	nop
 8004a8c:	58000080 	.word	0x58000080
 8004a90:	58024400 	.word	0x58024400
 8004a94:	58000400 	.word	0x58000400
 8004a98:	58020000 	.word	0x58020000
 8004a9c:	58020400 	.word	0x58020400
 8004aa0:	58020800 	.word	0x58020800
 8004aa4:	58020c00 	.word	0x58020c00
 8004aa8:	58021000 	.word	0x58021000
 8004aac:	58021400 	.word	0x58021400
 8004ab0:	58021800 	.word	0x58021800
 8004ab4:	58021c00 	.word	0x58021c00
 8004ab8:	58022000 	.word	0x58022000
 8004abc:	58022400 	.word	0x58022400
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	f002 0203 	and.w	r2, r2, #3
 8004ac8:	0092      	lsls	r2, r2, #2
 8004aca:	4093      	lsls	r3, r2
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ad2:	4938      	ldr	r1, [pc, #224]	; (8004bb4 <HAL_GPIO_Init+0x35c>)
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	089b      	lsrs	r3, r3, #2
 8004ad8:	3302      	adds	r3, #2
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	43db      	mvns	r3, r3
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	4013      	ands	r3, r2
 8004af0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	43db      	mvns	r3, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4013      	ands	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	3301      	adds	r3, #1
 8004b94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f47f ae63 	bne.w	800486c <HAL_GPIO_Init+0x14>
  }
}
 8004ba6:	bf00      	nop
 8004ba8:	bf00      	nop
 8004baa:	3724      	adds	r7, #36	; 0x24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	58000400 	.word	0x58000400

08004bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	807b      	strh	r3, [r7, #2]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bc8:	787b      	ldrb	r3, [r7, #1]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bce:	887a      	ldrh	r2, [r7, #2]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004bd4:	e003      	b.n	8004bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004bd6:	887b      	ldrh	r3, [r7, #2]
 8004bd8:	041a      	lsls	r2, r3, #16
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	619a      	str	r2, [r3, #24]
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
	...

08004bec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004bf4:	4b29      	ldr	r3, [pc, #164]	; (8004c9c <HAL_PWREx_ConfigSupply+0xb0>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	2b06      	cmp	r3, #6
 8004bfe:	d00a      	beq.n	8004c16 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c00:	4b26      	ldr	r3, [pc, #152]	; (8004c9c <HAL_PWREx_ConfigSupply+0xb0>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d001      	beq.n	8004c12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e040      	b.n	8004c94 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	e03e      	b.n	8004c94 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c16:	4b21      	ldr	r3, [pc, #132]	; (8004c9c <HAL_PWREx_ConfigSupply+0xb0>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004c1e:	491f      	ldr	r1, [pc, #124]	; (8004c9c <HAL_PWREx_ConfigSupply+0xb0>)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c26:	f7fd fa45 	bl	80020b4 <HAL_GetTick>
 8004c2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c2c:	e009      	b.n	8004c42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c2e:	f7fd fa41 	bl	80020b4 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c3c:	d901      	bls.n	8004c42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e028      	b.n	8004c94 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c42:	4b16      	ldr	r3, [pc, #88]	; (8004c9c <HAL_PWREx_ConfigSupply+0xb0>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c4e:	d1ee      	bne.n	8004c2e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b1e      	cmp	r3, #30
 8004c54:	d008      	beq.n	8004c68 <HAL_PWREx_ConfigSupply+0x7c>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b2e      	cmp	r3, #46	; 0x2e
 8004c5a:	d005      	beq.n	8004c68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b1d      	cmp	r3, #29
 8004c60:	d002      	beq.n	8004c68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b2d      	cmp	r3, #45	; 0x2d
 8004c66:	d114      	bne.n	8004c92 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004c68:	f7fd fa24 	bl	80020b4 <HAL_GetTick>
 8004c6c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004c6e:	e009      	b.n	8004c84 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c70:	f7fd fa20 	bl	80020b4 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c7e:	d901      	bls.n	8004c84 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e007      	b.n	8004c94 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004c84:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_PWREx_ConfigSupply+0xb0>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c90:	d1ee      	bne.n	8004c70 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	58024800 	.word	0x58024800

08004ca0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08c      	sub	sp, #48	; 0x30
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d102      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	f000 bc1f 	b.w	80054f2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80b3 	beq.w	8004e28 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cc2:	4b95      	ldr	r3, [pc, #596]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ccc:	4b92      	ldr	r3, [pc, #584]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd4:	2b10      	cmp	r3, #16
 8004cd6:	d007      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x48>
 8004cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cda:	2b18      	cmp	r3, #24
 8004cdc:	d112      	bne.n	8004d04 <HAL_RCC_OscConfig+0x64>
 8004cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce0:	f003 0303 	and.w	r3, r3, #3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d10d      	bne.n	8004d04 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce8:	4b8b      	ldr	r3, [pc, #556]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8098 	beq.w	8004e26 <HAL_RCC_OscConfig+0x186>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f040 8093 	bne.w	8004e26 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e3f6      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d0c:	d106      	bne.n	8004d1c <HAL_RCC_OscConfig+0x7c>
 8004d0e:	4b82      	ldr	r3, [pc, #520]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a81      	ldr	r2, [pc, #516]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	e058      	b.n	8004dce <HAL_RCC_OscConfig+0x12e>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d112      	bne.n	8004d4a <HAL_RCC_OscConfig+0xaa>
 8004d24:	4b7c      	ldr	r3, [pc, #496]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a7b      	ldr	r2, [pc, #492]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4b79      	ldr	r3, [pc, #484]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a78      	ldr	r2, [pc, #480]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004d36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	4b76      	ldr	r3, [pc, #472]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a75      	ldr	r2, [pc, #468]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	e041      	b.n	8004dce <HAL_RCC_OscConfig+0x12e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d52:	d112      	bne.n	8004d7a <HAL_RCC_OscConfig+0xda>
 8004d54:	4b70      	ldr	r3, [pc, #448]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a6f      	ldr	r2, [pc, #444]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004d5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	4b6d      	ldr	r3, [pc, #436]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a6c      	ldr	r2, [pc, #432]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004d66:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	4b6a      	ldr	r3, [pc, #424]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a69      	ldr	r2, [pc, #420]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	e029      	b.n	8004dce <HAL_RCC_OscConfig+0x12e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004d82:	d112      	bne.n	8004daa <HAL_RCC_OscConfig+0x10a>
 8004d84:	4b64      	ldr	r3, [pc, #400]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a63      	ldr	r2, [pc, #396]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004d8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	4b61      	ldr	r3, [pc, #388]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a60      	ldr	r2, [pc, #384]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	4b5e      	ldr	r3, [pc, #376]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a5d      	ldr	r2, [pc, #372]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	e011      	b.n	8004dce <HAL_RCC_OscConfig+0x12e>
 8004daa:	4b5b      	ldr	r3, [pc, #364]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a5a      	ldr	r2, [pc, #360]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	4b58      	ldr	r3, [pc, #352]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a57      	ldr	r2, [pc, #348]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004dbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	4b55      	ldr	r3, [pc, #340]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a54      	ldr	r2, [pc, #336]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004dc8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004dcc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d013      	beq.n	8004dfe <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd6:	f7fd f96d 	bl	80020b4 <HAL_GetTick>
 8004dda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dde:	f7fd f969 	bl	80020b4 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b64      	cmp	r3, #100	; 0x64
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e380      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004df0:	4b49      	ldr	r3, [pc, #292]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0f0      	beq.n	8004dde <HAL_RCC_OscConfig+0x13e>
 8004dfc:	e014      	b.n	8004e28 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfe:	f7fd f959 	bl	80020b4 <HAL_GetTick>
 8004e02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e06:	f7fd f955 	bl	80020b4 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b64      	cmp	r3, #100	; 0x64
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e36c      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e18:	4b3f      	ldr	r3, [pc, #252]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1f0      	bne.n	8004e06 <HAL_RCC_OscConfig+0x166>
 8004e24:	e000      	b.n	8004e28 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e26:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 808c 	beq.w	8004f4e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e36:	4b38      	ldr	r3, [pc, #224]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e3e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e40:	4b35      	ldr	r3, [pc, #212]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e44:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <HAL_RCC_OscConfig+0x1bc>
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	2b18      	cmp	r3, #24
 8004e50:	d137      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x222>
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f003 0303 	and.w	r3, r3, #3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d132      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e5c:	4b2e      	ldr	r3, [pc, #184]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <HAL_RCC_OscConfig+0x1d4>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e33e      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e74:	4b28      	ldr	r3, [pc, #160]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f023 0219 	bic.w	r2, r3, #25
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	4925      	ldr	r1, [pc, #148]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e86:	f7fd f915 	bl	80020b4 <HAL_GetTick>
 8004e8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e8e:	f7fd f911 	bl	80020b4 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e328      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ea0:	4b1d      	ldr	r3, [pc, #116]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eac:	4b1a      	ldr	r3, [pc, #104]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	061b      	lsls	r3, r3, #24
 8004eba:	4917      	ldr	r1, [pc, #92]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ec0:	e045      	b.n	8004f4e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d028      	beq.n	8004f1c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004eca:	4b13      	ldr	r3, [pc, #76]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f023 0219 	bic.w	r2, r3, #25
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	4910      	ldr	r1, [pc, #64]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004edc:	f7fd f8ea 	bl	80020b4 <HAL_GetTick>
 8004ee0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ee2:	e008      	b.n	8004ef6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee4:	f7fd f8e6 	bl	80020b4 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e2fd      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ef6:	4b08      	ldr	r3, [pc, #32]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0f0      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f02:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	061b      	lsls	r3, r3, #24
 8004f10:	4901      	ldr	r1, [pc, #4]	; (8004f18 <HAL_RCC_OscConfig+0x278>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	604b      	str	r3, [r1, #4]
 8004f16:	e01a      	b.n	8004f4e <HAL_RCC_OscConfig+0x2ae>
 8004f18:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f1c:	4b97      	ldr	r3, [pc, #604]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a96      	ldr	r2, [pc, #600]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 8004f22:	f023 0301 	bic.w	r3, r3, #1
 8004f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f28:	f7fd f8c4 	bl	80020b4 <HAL_GetTick>
 8004f2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f30:	f7fd f8c0 	bl	80020b4 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e2d7      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f42:	4b8e      	ldr	r3, [pc, #568]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d06a      	beq.n	8005030 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f5a:	4b88      	ldr	r3, [pc, #544]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f62:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f64:	4b85      	ldr	r3, [pc, #532]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 8004f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f68:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d007      	beq.n	8004f80 <HAL_RCC_OscConfig+0x2e0>
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	2b18      	cmp	r3, #24
 8004f74:	d11b      	bne.n	8004fae <HAL_RCC_OscConfig+0x30e>
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d116      	bne.n	8004fae <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f80:	4b7e      	ldr	r3, [pc, #504]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d005      	beq.n	8004f98 <HAL_RCC_OscConfig+0x2f8>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	2b80      	cmp	r3, #128	; 0x80
 8004f92:	d001      	beq.n	8004f98 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e2ac      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f98:	4b78      	ldr	r3, [pc, #480]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	061b      	lsls	r3, r3, #24
 8004fa6:	4975      	ldr	r1, [pc, #468]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fac:	e040      	b.n	8005030 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d023      	beq.n	8004ffe <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004fb6:	4b71      	ldr	r3, [pc, #452]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a70      	ldr	r2, [pc, #448]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 8004fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc2:	f7fd f877 	bl	80020b4 <HAL_GetTick>
 8004fc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004fca:	f7fd f873 	bl	80020b4 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e28a      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fdc:	4b67      	ldr	r3, [pc, #412]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0f0      	beq.n	8004fca <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fe8:	4b64      	ldr	r3, [pc, #400]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	061b      	lsls	r3, r3, #24
 8004ff6:	4961      	ldr	r1, [pc, #388]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60cb      	str	r3, [r1, #12]
 8004ffc:	e018      	b.n	8005030 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ffe:	4b5f      	ldr	r3, [pc, #380]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a5e      	ldr	r2, [pc, #376]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 8005004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500a:	f7fd f853 	bl	80020b4 <HAL_GetTick>
 800500e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005012:	f7fd f84f 	bl	80020b4 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e266      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005024:	4b55      	ldr	r3, [pc, #340]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1f0      	bne.n	8005012 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0308 	and.w	r3, r3, #8
 8005038:	2b00      	cmp	r3, #0
 800503a:	d036      	beq.n	80050aa <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d019      	beq.n	8005078 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005044:	4b4d      	ldr	r3, [pc, #308]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 8005046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005048:	4a4c      	ldr	r2, [pc, #304]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 800504a:	f043 0301 	orr.w	r3, r3, #1
 800504e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005050:	f7fd f830 	bl	80020b4 <HAL_GetTick>
 8005054:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005058:	f7fd f82c 	bl	80020b4 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e243      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800506a:	4b44      	ldr	r3, [pc, #272]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 800506c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f0      	beq.n	8005058 <HAL_RCC_OscConfig+0x3b8>
 8005076:	e018      	b.n	80050aa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005078:	4b40      	ldr	r3, [pc, #256]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 800507a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507c:	4a3f      	ldr	r2, [pc, #252]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005084:	f7fd f816 	bl	80020b4 <HAL_GetTick>
 8005088:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800508c:	f7fd f812 	bl	80020b4 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e229      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800509e:	4b37      	ldr	r3, [pc, #220]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 80050a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d036      	beq.n	8005124 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d019      	beq.n	80050f2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050be:	4b2f      	ldr	r3, [pc, #188]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a2e      	ldr	r2, [pc, #184]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 80050c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050ca:	f7fc fff3 	bl	80020b4 <HAL_GetTick>
 80050ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050d2:	f7fc ffef 	bl	80020b4 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e206      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050e4:	4b25      	ldr	r3, [pc, #148]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0f0      	beq.n	80050d2 <HAL_RCC_OscConfig+0x432>
 80050f0:	e018      	b.n	8005124 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050f2:	4b22      	ldr	r3, [pc, #136]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a21      	ldr	r2, [pc, #132]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 80050f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050fe:	f7fc ffd9 	bl	80020b4 <HAL_GetTick>
 8005102:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005104:	e008      	b.n	8005118 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005106:	f7fc ffd5 	bl	80020b4 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e1ec      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005118:	4b18      	ldr	r3, [pc, #96]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1f0      	bne.n	8005106 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80af 	beq.w	8005290 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005132:	4b13      	ldr	r3, [pc, #76]	; (8005180 <HAL_RCC_OscConfig+0x4e0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a12      	ldr	r2, [pc, #72]	; (8005180 <HAL_RCC_OscConfig+0x4e0>)
 8005138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800513c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800513e:	f7fc ffb9 	bl	80020b4 <HAL_GetTick>
 8005142:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005146:	f7fc ffb5 	bl	80020b4 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b64      	cmp	r3, #100	; 0x64
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e1cc      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005158:	4b09      	ldr	r3, [pc, #36]	; (8005180 <HAL_RCC_OscConfig+0x4e0>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0f0      	beq.n	8005146 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d10b      	bne.n	8005184 <HAL_RCC_OscConfig+0x4e4>
 800516c:	4b03      	ldr	r3, [pc, #12]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 800516e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005170:	4a02      	ldr	r2, [pc, #8]	; (800517c <HAL_RCC_OscConfig+0x4dc>)
 8005172:	f043 0301 	orr.w	r3, r3, #1
 8005176:	6713      	str	r3, [r2, #112]	; 0x70
 8005178:	e05b      	b.n	8005232 <HAL_RCC_OscConfig+0x592>
 800517a:	bf00      	nop
 800517c:	58024400 	.word	0x58024400
 8005180:	58024800 	.word	0x58024800
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d112      	bne.n	80051b2 <HAL_RCC_OscConfig+0x512>
 800518c:	4b9d      	ldr	r3, [pc, #628]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 800518e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005190:	4a9c      	ldr	r2, [pc, #624]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 8005192:	f023 0301 	bic.w	r3, r3, #1
 8005196:	6713      	str	r3, [r2, #112]	; 0x70
 8005198:	4b9a      	ldr	r3, [pc, #616]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 800519a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519c:	4a99      	ldr	r2, [pc, #612]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 800519e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051a2:	6713      	str	r3, [r2, #112]	; 0x70
 80051a4:	4b97      	ldr	r3, [pc, #604]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80051a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a8:	4a96      	ldr	r2, [pc, #600]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80051aa:	f023 0304 	bic.w	r3, r3, #4
 80051ae:	6713      	str	r3, [r2, #112]	; 0x70
 80051b0:	e03f      	b.n	8005232 <HAL_RCC_OscConfig+0x592>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2b05      	cmp	r3, #5
 80051b8:	d112      	bne.n	80051e0 <HAL_RCC_OscConfig+0x540>
 80051ba:	4b92      	ldr	r3, [pc, #584]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80051bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051be:	4a91      	ldr	r2, [pc, #580]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80051c0:	f043 0304 	orr.w	r3, r3, #4
 80051c4:	6713      	str	r3, [r2, #112]	; 0x70
 80051c6:	4b8f      	ldr	r3, [pc, #572]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ca:	4a8e      	ldr	r2, [pc, #568]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80051cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051d0:	6713      	str	r3, [r2, #112]	; 0x70
 80051d2:	4b8c      	ldr	r3, [pc, #560]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80051d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d6:	4a8b      	ldr	r2, [pc, #556]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80051d8:	f043 0301 	orr.w	r3, r3, #1
 80051dc:	6713      	str	r3, [r2, #112]	; 0x70
 80051de:	e028      	b.n	8005232 <HAL_RCC_OscConfig+0x592>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	2b85      	cmp	r3, #133	; 0x85
 80051e6:	d112      	bne.n	800520e <HAL_RCC_OscConfig+0x56e>
 80051e8:	4b86      	ldr	r3, [pc, #536]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80051ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ec:	4a85      	ldr	r2, [pc, #532]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80051ee:	f043 0304 	orr.w	r3, r3, #4
 80051f2:	6713      	str	r3, [r2, #112]	; 0x70
 80051f4:	4b83      	ldr	r3, [pc, #524]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80051f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f8:	4a82      	ldr	r2, [pc, #520]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80051fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005200:	4b80      	ldr	r3, [pc, #512]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 8005202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005204:	4a7f      	ldr	r2, [pc, #508]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 8005206:	f043 0301 	orr.w	r3, r3, #1
 800520a:	6713      	str	r3, [r2, #112]	; 0x70
 800520c:	e011      	b.n	8005232 <HAL_RCC_OscConfig+0x592>
 800520e:	4b7d      	ldr	r3, [pc, #500]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005212:	4a7c      	ldr	r2, [pc, #496]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 8005214:	f023 0301 	bic.w	r3, r3, #1
 8005218:	6713      	str	r3, [r2, #112]	; 0x70
 800521a:	4b7a      	ldr	r3, [pc, #488]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 800521c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521e:	4a79      	ldr	r2, [pc, #484]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 8005220:	f023 0304 	bic.w	r3, r3, #4
 8005224:	6713      	str	r3, [r2, #112]	; 0x70
 8005226:	4b77      	ldr	r3, [pc, #476]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	4a76      	ldr	r2, [pc, #472]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 800522c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005230:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d015      	beq.n	8005266 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523a:	f7fc ff3b 	bl	80020b4 <HAL_GetTick>
 800523e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005240:	e00a      	b.n	8005258 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005242:	f7fc ff37 	bl	80020b4 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005250:	4293      	cmp	r3, r2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e14c      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005258:	4b6a      	ldr	r3, [pc, #424]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 800525a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0ee      	beq.n	8005242 <HAL_RCC_OscConfig+0x5a2>
 8005264:	e014      	b.n	8005290 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005266:	f7fc ff25 	bl	80020b4 <HAL_GetTick>
 800526a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800526c:	e00a      	b.n	8005284 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526e:	f7fc ff21 	bl	80020b4 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	f241 3288 	movw	r2, #5000	; 0x1388
 800527c:	4293      	cmp	r3, r2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e136      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005284:	4b5f      	ldr	r3, [pc, #380]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 8005286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1ee      	bne.n	800526e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 812b 	beq.w	80054f0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800529a:	4b5a      	ldr	r3, [pc, #360]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052a2:	2b18      	cmp	r3, #24
 80052a4:	f000 80bb 	beq.w	800541e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	f040 8095 	bne.w	80053dc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b2:	4b54      	ldr	r3, [pc, #336]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a53      	ldr	r2, [pc, #332]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80052b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052be:	f7fc fef9 	bl	80020b4 <HAL_GetTick>
 80052c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c6:	f7fc fef5 	bl	80020b4 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e10c      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052d8:	4b4a      	ldr	r3, [pc, #296]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1f0      	bne.n	80052c6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052e4:	4b47      	ldr	r3, [pc, #284]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80052e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052e8:	4b47      	ldr	r3, [pc, #284]	; (8005408 <HAL_RCC_OscConfig+0x768>)
 80052ea:	4013      	ands	r3, r2
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80052f4:	0112      	lsls	r2, r2, #4
 80052f6:	430a      	orrs	r2, r1
 80052f8:	4942      	ldr	r1, [pc, #264]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	628b      	str	r3, [r1, #40]	; 0x28
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	3b01      	subs	r3, #1
 8005304:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530c:	3b01      	subs	r3, #1
 800530e:	025b      	lsls	r3, r3, #9
 8005310:	b29b      	uxth	r3, r3
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005318:	3b01      	subs	r3, #1
 800531a:	041b      	lsls	r3, r3, #16
 800531c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005326:	3b01      	subs	r3, #1
 8005328:	061b      	lsls	r3, r3, #24
 800532a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800532e:	4935      	ldr	r1, [pc, #212]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 8005330:	4313      	orrs	r3, r2
 8005332:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005334:	4b33      	ldr	r3, [pc, #204]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	4a32      	ldr	r2, [pc, #200]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 800533a:	f023 0301 	bic.w	r3, r3, #1
 800533e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005340:	4b30      	ldr	r3, [pc, #192]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 8005342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005344:	4b31      	ldr	r3, [pc, #196]	; (800540c <HAL_RCC_OscConfig+0x76c>)
 8005346:	4013      	ands	r3, r2
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800534c:	00d2      	lsls	r2, r2, #3
 800534e:	492d      	ldr	r1, [pc, #180]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 8005350:	4313      	orrs	r3, r2
 8005352:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005354:	4b2b      	ldr	r3, [pc, #172]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	f023 020c 	bic.w	r2, r3, #12
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	4928      	ldr	r1, [pc, #160]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 8005362:	4313      	orrs	r3, r2
 8005364:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005366:	4b27      	ldr	r3, [pc, #156]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536a:	f023 0202 	bic.w	r2, r3, #2
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005372:	4924      	ldr	r1, [pc, #144]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 8005374:	4313      	orrs	r3, r2
 8005376:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005378:	4b22      	ldr	r3, [pc, #136]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	4a21      	ldr	r2, [pc, #132]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 800537e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005382:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005384:	4b1f      	ldr	r3, [pc, #124]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	4a1e      	ldr	r2, [pc, #120]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 800538a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800538e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005390:	4b1c      	ldr	r3, [pc, #112]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	4a1b      	ldr	r2, [pc, #108]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 8005396:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800539a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800539c:	4b19      	ldr	r3, [pc, #100]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	4a18      	ldr	r2, [pc, #96]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053a8:	4b16      	ldr	r3, [pc, #88]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a15      	ldr	r2, [pc, #84]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80053ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b4:	f7fc fe7e 	bl	80020b4 <HAL_GetTick>
 80053b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053bc:	f7fc fe7a 	bl	80020b4 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e091      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053ce:	4b0d      	ldr	r3, [pc, #52]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0f0      	beq.n	80053bc <HAL_RCC_OscConfig+0x71c>
 80053da:	e089      	b.n	80054f0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053dc:	4b09      	ldr	r3, [pc, #36]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a08      	ldr	r2, [pc, #32]	; (8005404 <HAL_RCC_OscConfig+0x764>)
 80053e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e8:	f7fc fe64 	bl	80020b4 <HAL_GetTick>
 80053ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053ee:	e00f      	b.n	8005410 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053f0:	f7fc fe60 	bl	80020b4 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d908      	bls.n	8005410 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e077      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
 8005402:	bf00      	nop
 8005404:	58024400 	.word	0x58024400
 8005408:	fffffc0c 	.word	0xfffffc0c
 800540c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005410:	4b3a      	ldr	r3, [pc, #232]	; (80054fc <HAL_RCC_OscConfig+0x85c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1e9      	bne.n	80053f0 <HAL_RCC_OscConfig+0x750>
 800541c:	e068      	b.n	80054f0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800541e:	4b37      	ldr	r3, [pc, #220]	; (80054fc <HAL_RCC_OscConfig+0x85c>)
 8005420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005422:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005424:	4b35      	ldr	r3, [pc, #212]	; (80054fc <HAL_RCC_OscConfig+0x85c>)
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	2b01      	cmp	r3, #1
 8005430:	d031      	beq.n	8005496 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f003 0203 	and.w	r2, r3, #3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800543c:	429a      	cmp	r2, r3
 800543e:	d12a      	bne.n	8005496 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	091b      	lsrs	r3, r3, #4
 8005444:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800544c:	429a      	cmp	r2, r3
 800544e:	d122      	bne.n	8005496 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800545c:	429a      	cmp	r2, r3
 800545e:	d11a      	bne.n	8005496 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	0a5b      	lsrs	r3, r3, #9
 8005464:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800546e:	429a      	cmp	r2, r3
 8005470:	d111      	bne.n	8005496 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	0c1b      	lsrs	r3, r3, #16
 8005476:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005480:	429a      	cmp	r2, r3
 8005482:	d108      	bne.n	8005496 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	0e1b      	lsrs	r3, r3, #24
 8005488:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005490:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005492:	429a      	cmp	r2, r3
 8005494:	d001      	beq.n	800549a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e02b      	b.n	80054f2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800549a:	4b18      	ldr	r3, [pc, #96]	; (80054fc <HAL_RCC_OscConfig+0x85c>)
 800549c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549e:	08db      	lsrs	r3, r3, #3
 80054a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054a4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d01f      	beq.n	80054f0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80054b0:	4b12      	ldr	r3, [pc, #72]	; (80054fc <HAL_RCC_OscConfig+0x85c>)
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	4a11      	ldr	r2, [pc, #68]	; (80054fc <HAL_RCC_OscConfig+0x85c>)
 80054b6:	f023 0301 	bic.w	r3, r3, #1
 80054ba:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054bc:	f7fc fdfa 	bl	80020b4 <HAL_GetTick>
 80054c0:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80054c2:	bf00      	nop
 80054c4:	f7fc fdf6 	bl	80020b4 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d0f9      	beq.n	80054c4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80054d0:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <HAL_RCC_OscConfig+0x85c>)
 80054d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054d4:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <HAL_RCC_OscConfig+0x860>)
 80054d6:	4013      	ands	r3, r2
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80054dc:	00d2      	lsls	r2, r2, #3
 80054de:	4907      	ldr	r1, [pc, #28]	; (80054fc <HAL_RCC_OscConfig+0x85c>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80054e4:	4b05      	ldr	r3, [pc, #20]	; (80054fc <HAL_RCC_OscConfig+0x85c>)
 80054e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e8:	4a04      	ldr	r2, [pc, #16]	; (80054fc <HAL_RCC_OscConfig+0x85c>)
 80054ea:	f043 0301 	orr.w	r3, r3, #1
 80054ee:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3730      	adds	r7, #48	; 0x30
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	58024400 	.word	0x58024400
 8005500:	ffff0007 	.word	0xffff0007

08005504 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e19c      	b.n	8005852 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005518:	4b8a      	ldr	r3, [pc, #552]	; (8005744 <HAL_RCC_ClockConfig+0x240>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 030f 	and.w	r3, r3, #15
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d910      	bls.n	8005548 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005526:	4b87      	ldr	r3, [pc, #540]	; (8005744 <HAL_RCC_ClockConfig+0x240>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f023 020f 	bic.w	r2, r3, #15
 800552e:	4985      	ldr	r1, [pc, #532]	; (8005744 <HAL_RCC_ClockConfig+0x240>)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	4313      	orrs	r3, r2
 8005534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005536:	4b83      	ldr	r3, [pc, #524]	; (8005744 <HAL_RCC_ClockConfig+0x240>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d001      	beq.n	8005548 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e184      	b.n	8005852 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	d010      	beq.n	8005576 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	4b7b      	ldr	r3, [pc, #492]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005560:	429a      	cmp	r2, r3
 8005562:	d908      	bls.n	8005576 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005564:	4b78      	ldr	r3, [pc, #480]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	4975      	ldr	r1, [pc, #468]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 8005572:	4313      	orrs	r3, r2
 8005574:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d010      	beq.n	80055a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695a      	ldr	r2, [r3, #20]
 8005586:	4b70      	ldr	r3, [pc, #448]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800558e:	429a      	cmp	r2, r3
 8005590:	d908      	bls.n	80055a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005592:	4b6d      	ldr	r3, [pc, #436]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	496a      	ldr	r1, [pc, #424]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d010      	beq.n	80055d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699a      	ldr	r2, [r3, #24]
 80055b4:	4b64      	ldr	r3, [pc, #400]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055bc:	429a      	cmp	r2, r3
 80055be:	d908      	bls.n	80055d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055c0:	4b61      	ldr	r3, [pc, #388]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	495e      	ldr	r1, [pc, #376]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0320 	and.w	r3, r3, #32
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d010      	beq.n	8005600 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69da      	ldr	r2, [r3, #28]
 80055e2:	4b59      	ldr	r3, [pc, #356]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d908      	bls.n	8005600 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80055ee:	4b56      	ldr	r3, [pc, #344]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	4953      	ldr	r1, [pc, #332]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d010      	beq.n	800562e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	4b4d      	ldr	r3, [pc, #308]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	429a      	cmp	r2, r3
 800561a:	d908      	bls.n	800562e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800561c:	4b4a      	ldr	r3, [pc, #296]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	f023 020f 	bic.w	r2, r3, #15
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	4947      	ldr	r1, [pc, #284]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 800562a:	4313      	orrs	r3, r2
 800562c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d055      	beq.n	80056e6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800563a:	4b43      	ldr	r3, [pc, #268]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	4940      	ldr	r1, [pc, #256]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 8005648:	4313      	orrs	r3, r2
 800564a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	2b02      	cmp	r3, #2
 8005652:	d107      	bne.n	8005664 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005654:	4b3c      	ldr	r3, [pc, #240]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d121      	bne.n	80056a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e0f6      	b.n	8005852 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2b03      	cmp	r3, #3
 800566a:	d107      	bne.n	800567c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800566c:	4b36      	ldr	r3, [pc, #216]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d115      	bne.n	80056a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e0ea      	b.n	8005852 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d107      	bne.n	8005694 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005684:	4b30      	ldr	r3, [pc, #192]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568c:	2b00      	cmp	r3, #0
 800568e:	d109      	bne.n	80056a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e0de      	b.n	8005852 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005694:	4b2c      	ldr	r3, [pc, #176]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e0d6      	b.n	8005852 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056a4:	4b28      	ldr	r3, [pc, #160]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	f023 0207 	bic.w	r2, r3, #7
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	4925      	ldr	r1, [pc, #148]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b6:	f7fc fcfd 	bl	80020b4 <HAL_GetTick>
 80056ba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056bc:	e00a      	b.n	80056d4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056be:	f7fc fcf9 	bl	80020b4 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e0be      	b.n	8005852 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d4:	4b1c      	ldr	r3, [pc, #112]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d1eb      	bne.n	80056be <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d010      	beq.n	8005714 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	4b14      	ldr	r3, [pc, #80]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	429a      	cmp	r2, r3
 8005700:	d208      	bcs.n	8005714 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005702:	4b11      	ldr	r3, [pc, #68]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	f023 020f 	bic.w	r2, r3, #15
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	490e      	ldr	r1, [pc, #56]	; (8005748 <HAL_RCC_ClockConfig+0x244>)
 8005710:	4313      	orrs	r3, r2
 8005712:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005714:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <HAL_RCC_ClockConfig+0x240>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 030f 	and.w	r3, r3, #15
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d214      	bcs.n	800574c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005722:	4b08      	ldr	r3, [pc, #32]	; (8005744 <HAL_RCC_ClockConfig+0x240>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f023 020f 	bic.w	r2, r3, #15
 800572a:	4906      	ldr	r1, [pc, #24]	; (8005744 <HAL_RCC_ClockConfig+0x240>)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	4313      	orrs	r3, r2
 8005730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005732:	4b04      	ldr	r3, [pc, #16]	; (8005744 <HAL_RCC_ClockConfig+0x240>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d005      	beq.n	800574c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e086      	b.n	8005852 <HAL_RCC_ClockConfig+0x34e>
 8005744:	52002000 	.word	0x52002000
 8005748:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	d010      	beq.n	800577a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	4b3f      	ldr	r3, [pc, #252]	; (800585c <HAL_RCC_ClockConfig+0x358>)
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005764:	429a      	cmp	r2, r3
 8005766:	d208      	bcs.n	800577a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005768:	4b3c      	ldr	r3, [pc, #240]	; (800585c <HAL_RCC_ClockConfig+0x358>)
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	4939      	ldr	r1, [pc, #228]	; (800585c <HAL_RCC_ClockConfig+0x358>)
 8005776:	4313      	orrs	r3, r2
 8005778:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0308 	and.w	r3, r3, #8
 8005782:	2b00      	cmp	r3, #0
 8005784:	d010      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695a      	ldr	r2, [r3, #20]
 800578a:	4b34      	ldr	r3, [pc, #208]	; (800585c <HAL_RCC_ClockConfig+0x358>)
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005792:	429a      	cmp	r2, r3
 8005794:	d208      	bcs.n	80057a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005796:	4b31      	ldr	r3, [pc, #196]	; (800585c <HAL_RCC_ClockConfig+0x358>)
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	492e      	ldr	r1, [pc, #184]	; (800585c <HAL_RCC_ClockConfig+0x358>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0310 	and.w	r3, r3, #16
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d010      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	699a      	ldr	r2, [r3, #24]
 80057b8:	4b28      	ldr	r3, [pc, #160]	; (800585c <HAL_RCC_ClockConfig+0x358>)
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d208      	bcs.n	80057d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057c4:	4b25      	ldr	r3, [pc, #148]	; (800585c <HAL_RCC_ClockConfig+0x358>)
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	4922      	ldr	r1, [pc, #136]	; (800585c <HAL_RCC_ClockConfig+0x358>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0320 	and.w	r3, r3, #32
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d010      	beq.n	8005804 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69da      	ldr	r2, [r3, #28]
 80057e6:	4b1d      	ldr	r3, [pc, #116]	; (800585c <HAL_RCC_ClockConfig+0x358>)
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d208      	bcs.n	8005804 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80057f2:	4b1a      	ldr	r3, [pc, #104]	; (800585c <HAL_RCC_ClockConfig+0x358>)
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	4917      	ldr	r1, [pc, #92]	; (800585c <HAL_RCC_ClockConfig+0x358>)
 8005800:	4313      	orrs	r3, r2
 8005802:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005804:	f000 f834 	bl	8005870 <HAL_RCC_GetSysClockFreq>
 8005808:	4602      	mov	r2, r0
 800580a:	4b14      	ldr	r3, [pc, #80]	; (800585c <HAL_RCC_ClockConfig+0x358>)
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	0a1b      	lsrs	r3, r3, #8
 8005810:	f003 030f 	and.w	r3, r3, #15
 8005814:	4912      	ldr	r1, [pc, #72]	; (8005860 <HAL_RCC_ClockConfig+0x35c>)
 8005816:	5ccb      	ldrb	r3, [r1, r3]
 8005818:	f003 031f 	and.w	r3, r3, #31
 800581c:	fa22 f303 	lsr.w	r3, r2, r3
 8005820:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005822:	4b0e      	ldr	r3, [pc, #56]	; (800585c <HAL_RCC_ClockConfig+0x358>)
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	4a0d      	ldr	r2, [pc, #52]	; (8005860 <HAL_RCC_ClockConfig+0x35c>)
 800582c:	5cd3      	ldrb	r3, [r2, r3]
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	fa22 f303 	lsr.w	r3, r2, r3
 8005838:	4a0a      	ldr	r2, [pc, #40]	; (8005864 <HAL_RCC_ClockConfig+0x360>)
 800583a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800583c:	4a0a      	ldr	r2, [pc, #40]	; (8005868 <HAL_RCC_ClockConfig+0x364>)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005842:	4b0a      	ldr	r3, [pc, #40]	; (800586c <HAL_RCC_ClockConfig+0x368>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f7fc fbea 	bl	8002020 <HAL_InitTick>
 800584c:	4603      	mov	r3, r0
 800584e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005850:	7bfb      	ldrb	r3, [r7, #15]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	58024400 	.word	0x58024400
 8005860:	0800c7c4 	.word	0x0800c7c4
 8005864:	24000014 	.word	0x24000014
 8005868:	24000010 	.word	0x24000010
 800586c:	24000018 	.word	0x24000018

08005870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005870:	b480      	push	{r7}
 8005872:	b089      	sub	sp, #36	; 0x24
 8005874:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005876:	4bb3      	ldr	r3, [pc, #716]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800587e:	2b18      	cmp	r3, #24
 8005880:	f200 8155 	bhi.w	8005b2e <HAL_RCC_GetSysClockFreq+0x2be>
 8005884:	a201      	add	r2, pc, #4	; (adr r2, 800588c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588a:	bf00      	nop
 800588c:	080058f1 	.word	0x080058f1
 8005890:	08005b2f 	.word	0x08005b2f
 8005894:	08005b2f 	.word	0x08005b2f
 8005898:	08005b2f 	.word	0x08005b2f
 800589c:	08005b2f 	.word	0x08005b2f
 80058a0:	08005b2f 	.word	0x08005b2f
 80058a4:	08005b2f 	.word	0x08005b2f
 80058a8:	08005b2f 	.word	0x08005b2f
 80058ac:	08005917 	.word	0x08005917
 80058b0:	08005b2f 	.word	0x08005b2f
 80058b4:	08005b2f 	.word	0x08005b2f
 80058b8:	08005b2f 	.word	0x08005b2f
 80058bc:	08005b2f 	.word	0x08005b2f
 80058c0:	08005b2f 	.word	0x08005b2f
 80058c4:	08005b2f 	.word	0x08005b2f
 80058c8:	08005b2f 	.word	0x08005b2f
 80058cc:	0800591d 	.word	0x0800591d
 80058d0:	08005b2f 	.word	0x08005b2f
 80058d4:	08005b2f 	.word	0x08005b2f
 80058d8:	08005b2f 	.word	0x08005b2f
 80058dc:	08005b2f 	.word	0x08005b2f
 80058e0:	08005b2f 	.word	0x08005b2f
 80058e4:	08005b2f 	.word	0x08005b2f
 80058e8:	08005b2f 	.word	0x08005b2f
 80058ec:	08005923 	.word	0x08005923
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058f0:	4b94      	ldr	r3, [pc, #592]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d009      	beq.n	8005910 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058fc:	4b91      	ldr	r3, [pc, #580]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	08db      	lsrs	r3, r3, #3
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	4a90      	ldr	r2, [pc, #576]	; (8005b48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005908:	fa22 f303 	lsr.w	r3, r2, r3
 800590c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800590e:	e111      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005910:	4b8d      	ldr	r3, [pc, #564]	; (8005b48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005912:	61bb      	str	r3, [r7, #24]
      break;
 8005914:	e10e      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005916:	4b8d      	ldr	r3, [pc, #564]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005918:	61bb      	str	r3, [r7, #24]
      break;
 800591a:	e10b      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800591c:	4b8c      	ldr	r3, [pc, #560]	; (8005b50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800591e:	61bb      	str	r3, [r7, #24]
      break;
 8005920:	e108      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005922:	4b88      	ldr	r3, [pc, #544]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800592c:	4b85      	ldr	r3, [pc, #532]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	091b      	lsrs	r3, r3, #4
 8005932:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005936:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005938:	4b82      	ldr	r3, [pc, #520]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005942:	4b80      	ldr	r3, [pc, #512]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005946:	08db      	lsrs	r3, r3, #3
 8005948:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	fb02 f303 	mul.w	r3, r2, r3
 8005952:	ee07 3a90 	vmov	s15, r3
 8005956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 80e1 	beq.w	8005b28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2b02      	cmp	r3, #2
 800596a:	f000 8083 	beq.w	8005a74 <HAL_RCC_GetSysClockFreq+0x204>
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b02      	cmp	r3, #2
 8005972:	f200 80a1 	bhi.w	8005ab8 <HAL_RCC_GetSysClockFreq+0x248>
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <HAL_RCC_GetSysClockFreq+0x114>
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d056      	beq.n	8005a30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005982:	e099      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005984:	4b6f      	ldr	r3, [pc, #444]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0320 	and.w	r3, r3, #32
 800598c:	2b00      	cmp	r3, #0
 800598e:	d02d      	beq.n	80059ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005990:	4b6c      	ldr	r3, [pc, #432]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	08db      	lsrs	r3, r3, #3
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	4a6b      	ldr	r2, [pc, #428]	; (8005b48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800599c:	fa22 f303 	lsr.w	r3, r2, r3
 80059a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	ee07 3a90 	vmov	s15, r3
 80059a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ba:	4b62      	ldr	r3, [pc, #392]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c2:	ee07 3a90 	vmov	s15, r3
 80059c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80059ea:	e087      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005b58 <HAL_RCC_GetSysClockFreq+0x2e8>
 80059fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059fe:	4b51      	ldr	r3, [pc, #324]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a06:	ee07 3a90 	vmov	s15, r3
 8005a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a12:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a2e:	e065      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	ee07 3a90 	vmov	s15, r3
 8005a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005b5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a42:	4b40      	ldr	r3, [pc, #256]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a52:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a56:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a72:	e043      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	ee07 3a90 	vmov	s15, r3
 8005a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005b60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a86:	4b2f      	ldr	r3, [pc, #188]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a8e:	ee07 3a90 	vmov	s15, r3
 8005a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a9a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ab6:	e021      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005b5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aca:	4b1e      	ldr	r3, [pc, #120]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ade:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005afa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005afc:	4b11      	ldr	r3, [pc, #68]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b00:	0a5b      	lsrs	r3, r3, #9
 8005b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b06:	3301      	adds	r3, #1
 8005b08:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	ee07 3a90 	vmov	s15, r3
 8005b10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b14:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b20:	ee17 3a90 	vmov	r3, s15
 8005b24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005b26:	e005      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61bb      	str	r3, [r7, #24]
      break;
 8005b2c:	e002      	b.n	8005b34 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005b2e:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b30:	61bb      	str	r3, [r7, #24]
      break;
 8005b32:	bf00      	nop
  }

  return sysclockfreq;
 8005b34:	69bb      	ldr	r3, [r7, #24]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3724      	adds	r7, #36	; 0x24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	58024400 	.word	0x58024400
 8005b48:	03d09000 	.word	0x03d09000
 8005b4c:	003d0900 	.word	0x003d0900
 8005b50:	007a1200 	.word	0x007a1200
 8005b54:	46000000 	.word	0x46000000
 8005b58:	4c742400 	.word	0x4c742400
 8005b5c:	4a742400 	.word	0x4a742400
 8005b60:	4af42400 	.word	0x4af42400

08005b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005b6a:	f7ff fe81 	bl	8005870 <HAL_RCC_GetSysClockFreq>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	4b10      	ldr	r3, [pc, #64]	; (8005bb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	0a1b      	lsrs	r3, r3, #8
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	490f      	ldr	r1, [pc, #60]	; (8005bb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b7c:	5ccb      	ldrb	r3, [r1, r3]
 8005b7e:	f003 031f 	and.w	r3, r3, #31
 8005b82:	fa22 f303 	lsr.w	r3, r2, r3
 8005b86:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005b88:	4b0a      	ldr	r3, [pc, #40]	; (8005bb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	4a09      	ldr	r2, [pc, #36]	; (8005bb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b92:	5cd3      	ldrb	r3, [r2, r3]
 8005b94:	f003 031f 	and.w	r3, r3, #31
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9e:	4a07      	ldr	r2, [pc, #28]	; (8005bbc <HAL_RCC_GetHCLKFreq+0x58>)
 8005ba0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ba2:	4a07      	ldr	r2, [pc, #28]	; (8005bc0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005ba8:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <HAL_RCC_GetHCLKFreq+0x58>)
 8005baa:	681b      	ldr	r3, [r3, #0]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	58024400 	.word	0x58024400
 8005bb8:	0800c7c4 	.word	0x0800c7c4
 8005bbc:	24000014 	.word	0x24000014
 8005bc0:	24000010 	.word	0x24000010

08005bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005bc8:	f7ff ffcc 	bl	8005b64 <HAL_RCC_GetHCLKFreq>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	091b      	lsrs	r3, r3, #4
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	4904      	ldr	r1, [pc, #16]	; (8005bec <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bda:	5ccb      	ldrb	r3, [r1, r3]
 8005bdc:	f003 031f 	and.w	r3, r3, #31
 8005be0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	58024400 	.word	0x58024400
 8005bec:	0800c7c4 	.word	0x0800c7c4

08005bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005bf4:	f7ff ffb6 	bl	8005b64 <HAL_RCC_GetHCLKFreq>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	0a1b      	lsrs	r3, r3, #8
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	4904      	ldr	r1, [pc, #16]	; (8005c18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c06:	5ccb      	ldrb	r3, [r1, r3]
 8005c08:	f003 031f 	and.w	r3, r3, #31
 8005c0c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	58024400 	.word	0x58024400
 8005c18:	0800c7c4 	.word	0x0800c7c4

08005c1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c20:	b0c8      	sub	sp, #288	; 0x120
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005c40:	2500      	movs	r5, #0
 8005c42:	ea54 0305 	orrs.w	r3, r4, r5
 8005c46:	d049      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c52:	d02f      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005c54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c58:	d828      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c5e:	d01a      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c64:	d822      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c6e:	d007      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c70:	e01c      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c72:	4ba7      	ldr	r3, [pc, #668]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c76:	4aa6      	ldr	r2, [pc, #664]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c7e:	e01a      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c84:	3308      	adds	r3, #8
 8005c86:	2102      	movs	r1, #2
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f001 fc43 	bl	8007514 <RCCEx_PLL2_Config>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005c94:	e00f      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c9a:	3328      	adds	r3, #40	; 0x28
 8005c9c:	2102      	movs	r1, #2
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 fcea 	bl	8007678 <RCCEx_PLL3_Config>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005caa:	e004      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005cb2:	e000      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005cb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cb6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10a      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005cbe:	4b94      	ldr	r3, [pc, #592]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ccc:	4a90      	ldr	r2, [pc, #576]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cce:	430b      	orrs	r3, r1
 8005cd0:	6513      	str	r3, [r2, #80]	; 0x50
 8005cd2:	e003      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005cd8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005ce8:	f04f 0900 	mov.w	r9, #0
 8005cec:	ea58 0309 	orrs.w	r3, r8, r9
 8005cf0:	d047      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d82a      	bhi.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005cfc:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d02:	bf00      	nop
 8005d04:	08005d19 	.word	0x08005d19
 8005d08:	08005d27 	.word	0x08005d27
 8005d0c:	08005d3d 	.word	0x08005d3d
 8005d10:	08005d5b 	.word	0x08005d5b
 8005d14:	08005d5b 	.word	0x08005d5b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d18:	4b7d      	ldr	r3, [pc, #500]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1c:	4a7c      	ldr	r2, [pc, #496]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d24:	e01a      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d2a:	3308      	adds	r3, #8
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f001 fbf0 	bl	8007514 <RCCEx_PLL2_Config>
 8005d34:	4603      	mov	r3, r0
 8005d36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d3a:	e00f      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d40:	3328      	adds	r3, #40	; 0x28
 8005d42:	2100      	movs	r1, #0
 8005d44:	4618      	mov	r0, r3
 8005d46:	f001 fc97 	bl	8007678 <RCCEx_PLL3_Config>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d50:	e004      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005d58:	e000      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005d5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d64:	4b6a      	ldr	r3, [pc, #424]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d68:	f023 0107 	bic.w	r1, r3, #7
 8005d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d72:	4a67      	ldr	r2, [pc, #412]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d74:	430b      	orrs	r3, r1
 8005d76:	6513      	str	r3, [r2, #80]	; 0x50
 8005d78:	e003      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d7e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005d8e:	f04f 0b00 	mov.w	fp, #0
 8005d92:	ea5a 030b 	orrs.w	r3, sl, fp
 8005d96:	d054      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d9e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005da2:	d036      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005da4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005da8:	d82f      	bhi.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dae:	d032      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005db4:	d829      	bhi.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005db6:	2bc0      	cmp	r3, #192	; 0xc0
 8005db8:	d02f      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8005dba:	2bc0      	cmp	r3, #192	; 0xc0
 8005dbc:	d825      	bhi.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005dbe:	2b80      	cmp	r3, #128	; 0x80
 8005dc0:	d018      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005dc2:	2b80      	cmp	r3, #128	; 0x80
 8005dc4:	d821      	bhi.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005dca:	2b40      	cmp	r3, #64	; 0x40
 8005dcc:	d007      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005dce:	e01c      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dd0:	4b4f      	ldr	r3, [pc, #316]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	4a4e      	ldr	r2, [pc, #312]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005ddc:	e01e      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de2:	3308      	adds	r3, #8
 8005de4:	2100      	movs	r1, #0
 8005de6:	4618      	mov	r0, r3
 8005de8:	f001 fb94 	bl	8007514 <RCCEx_PLL2_Config>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005df2:	e013      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df8:	3328      	adds	r3, #40	; 0x28
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f001 fc3b 	bl	8007678 <RCCEx_PLL3_Config>
 8005e02:	4603      	mov	r3, r0
 8005e04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005e08:	e008      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005e10:	e004      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005e12:	bf00      	nop
 8005e14:	e002      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005e16:	bf00      	nop
 8005e18:	e000      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10a      	bne.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005e24:	4b3a      	ldr	r3, [pc, #232]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e28:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e32:	4a37      	ldr	r2, [pc, #220]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e34:	430b      	orrs	r3, r1
 8005e36:	6513      	str	r3, [r2, #80]	; 0x50
 8005e38:	e003      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005e4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005e52:	2300      	movs	r3, #0
 8005e54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005e58:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	d05c      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e68:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005e6c:	d03b      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005e6e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005e72:	d834      	bhi.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e78:	d037      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e7e:	d82e      	bhi.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005e80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e84:	d033      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005e86:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e8a:	d828      	bhi.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e90:	d01a      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e96:	d822      	bhi.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ea0:	d007      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005ea2:	e01c      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ea4:	4b1a      	ldr	r3, [pc, #104]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	4a19      	ldr	r2, [pc, #100]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005eb0:	e01e      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eb6:	3308      	adds	r3, #8
 8005eb8:	2100      	movs	r1, #0
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f001 fb2a 	bl	8007514 <RCCEx_PLL2_Config>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005ec6:	e013      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ecc:	3328      	adds	r3, #40	; 0x28
 8005ece:	2100      	movs	r1, #0
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f001 fbd1 	bl	8007678 <RCCEx_PLL3_Config>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005edc:	e008      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005ee4:	e004      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005ee6:	bf00      	nop
 8005ee8:	e002      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005eea:	bf00      	nop
 8005eec:	e000      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ef0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10d      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005ef8:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005efc:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f06:	4a02      	ldr	r2, [pc, #8]	; (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f08:	430b      	orrs	r3, r1
 8005f0a:	6513      	str	r3, [r2, #80]	; 0x50
 8005f0c:	e006      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005f0e:	bf00      	nop
 8005f10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005f28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005f32:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005f36:	460b      	mov	r3, r1
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	d03a      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f42:	2b30      	cmp	r3, #48	; 0x30
 8005f44:	d01f      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005f46:	2b30      	cmp	r3, #48	; 0x30
 8005f48:	d819      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005f4a:	2b20      	cmp	r3, #32
 8005f4c:	d00c      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005f4e:	2b20      	cmp	r3, #32
 8005f50:	d815      	bhi.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d019      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005f56:	2b10      	cmp	r3, #16
 8005f58:	d111      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f5a:	4bae      	ldr	r3, [pc, #696]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5e:	4aad      	ldr	r2, [pc, #692]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005f66:	e011      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	2102      	movs	r1, #2
 8005f70:	4618      	mov	r0, r3
 8005f72:	f001 facf 	bl	8007514 <RCCEx_PLL2_Config>
 8005f76:	4603      	mov	r3, r0
 8005f78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005f7c:	e006      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005f84:	e002      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005f86:	bf00      	nop
 8005f88:	e000      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005f8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10a      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005f94:	4b9f      	ldr	r3, [pc, #636]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f98:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa2:	4a9c      	ldr	r2, [pc, #624]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fa8:	e003      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005faa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005fbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005fc8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	d051      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fdc:	d035      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005fde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fe2:	d82e      	bhi.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005fe4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fe8:	d031      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8005fea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fee:	d828      	bhi.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff4:	d01a      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ffa:	d822      	bhi.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d003      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006004:	d007      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006006:	e01c      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006008:	4b82      	ldr	r3, [pc, #520]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	4a81      	ldr	r2, [pc, #516]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800600e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006012:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006014:	e01c      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800601a:	3308      	adds	r3, #8
 800601c:	2100      	movs	r1, #0
 800601e:	4618      	mov	r0, r3
 8006020:	f001 fa78 	bl	8007514 <RCCEx_PLL2_Config>
 8006024:	4603      	mov	r3, r0
 8006026:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800602a:	e011      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800602c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006030:	3328      	adds	r3, #40	; 0x28
 8006032:	2100      	movs	r1, #0
 8006034:	4618      	mov	r0, r3
 8006036:	f001 fb1f 	bl	8007678 <RCCEx_PLL3_Config>
 800603a:	4603      	mov	r3, r0
 800603c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006040:	e006      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006048:	e002      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800604a:	bf00      	nop
 800604c:	e000      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800604e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006050:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10a      	bne.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006058:	4b6e      	ldr	r3, [pc, #440]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800605a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800605c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006066:	4a6b      	ldr	r2, [pc, #428]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006068:	430b      	orrs	r3, r1
 800606a:	6513      	str	r3, [r2, #80]	; 0x50
 800606c:	e003      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006072:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006076:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800607a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006082:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006086:	2300      	movs	r3, #0
 8006088:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800608c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006090:	460b      	mov	r3, r1
 8006092:	4313      	orrs	r3, r2
 8006094:	d053      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800609a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800609c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060a0:	d033      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80060a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060a6:	d82c      	bhi.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80060a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060ac:	d02f      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80060ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060b2:	d826      	bhi.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80060b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80060b8:	d02b      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80060ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80060be:	d820      	bhi.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80060c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060c4:	d012      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80060c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060ca:	d81a      	bhi.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d022      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80060d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d4:	d115      	bne.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060da:	3308      	adds	r3, #8
 80060dc:	2101      	movs	r1, #1
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 fa18 	bl	8007514 <RCCEx_PLL2_Config>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80060ea:	e015      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060f0:	3328      	adds	r3, #40	; 0x28
 80060f2:	2101      	movs	r1, #1
 80060f4:	4618      	mov	r0, r3
 80060f6:	f001 fabf 	bl	8007678 <RCCEx_PLL3_Config>
 80060fa:	4603      	mov	r3, r0
 80060fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006100:	e00a      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006108:	e006      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800610a:	bf00      	nop
 800610c:	e004      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800610e:	bf00      	nop
 8006110:	e002      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006112:	bf00      	nop
 8006114:	e000      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006116:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006118:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10a      	bne.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006120:	4b3c      	ldr	r3, [pc, #240]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006124:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006128:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800612c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800612e:	4a39      	ldr	r2, [pc, #228]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006130:	430b      	orrs	r3, r1
 8006132:	6513      	str	r3, [r2, #80]	; 0x50
 8006134:	e003      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006136:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800613a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800613e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006146:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800614a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800614e:	2300      	movs	r3, #0
 8006150:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006154:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006158:	460b      	mov	r3, r1
 800615a:	4313      	orrs	r3, r2
 800615c:	d060      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800615e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006162:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006166:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800616a:	d039      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800616c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006170:	d832      	bhi.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006176:	d035      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800617c:	d82c      	bhi.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800617e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006182:	d031      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006188:	d826      	bhi.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800618a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800618e:	d02d      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006190:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006194:	d820      	bhi.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800619a:	d012      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800619c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061a0:	d81a      	bhi.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d024      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80061a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061aa:	d115      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061b0:	3308      	adds	r3, #8
 80061b2:	2101      	movs	r1, #1
 80061b4:	4618      	mov	r0, r3
 80061b6:	f001 f9ad 	bl	8007514 <RCCEx_PLL2_Config>
 80061ba:	4603      	mov	r3, r0
 80061bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80061c0:	e017      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061c6:	3328      	adds	r3, #40	; 0x28
 80061c8:	2101      	movs	r1, #1
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 fa54 	bl	8007678 <RCCEx_PLL3_Config>
 80061d0:	4603      	mov	r3, r0
 80061d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80061d6:	e00c      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80061de:	e008      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061e0:	bf00      	nop
 80061e2:	e006      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061e4:	bf00      	nop
 80061e6:	e004      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061e8:	bf00      	nop
 80061ea:	e002      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061ec:	bf00      	nop
 80061ee:	e000      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80061f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10e      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80061fa:	4b06      	ldr	r3, [pc, #24]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061fe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006202:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006206:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800620a:	4a02      	ldr	r2, [pc, #8]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800620c:	430b      	orrs	r3, r1
 800620e:	6593      	str	r3, [r2, #88]	; 0x58
 8006210:	e006      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006212:	bf00      	nop
 8006214:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006218:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800621c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006228:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800622c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006230:	2300      	movs	r3, #0
 8006232:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006236:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800623a:	460b      	mov	r3, r1
 800623c:	4313      	orrs	r3, r2
 800623e:	d037      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800624a:	d00e      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800624c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006250:	d816      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006252:	2b00      	cmp	r3, #0
 8006254:	d018      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800625a:	d111      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800625c:	4bc4      	ldr	r3, [pc, #784]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006260:	4ac3      	ldr	r2, [pc, #780]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006268:	e00f      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800626a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800626e:	3308      	adds	r3, #8
 8006270:	2101      	movs	r1, #1
 8006272:	4618      	mov	r0, r3
 8006274:	f001 f94e 	bl	8007514 <RCCEx_PLL2_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800627e:	e004      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006286:	e000      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800628a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006292:	4bb7      	ldr	r3, [pc, #732]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006296:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800629a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800629e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062a0:	4ab3      	ldr	r2, [pc, #716]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062a2:	430b      	orrs	r3, r1
 80062a4:	6513      	str	r3, [r2, #80]	; 0x50
 80062a6:	e003      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80062b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80062bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062c0:	2300      	movs	r3, #0
 80062c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80062c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80062ca:	460b      	mov	r3, r1
 80062cc:	4313      	orrs	r3, r2
 80062ce:	d039      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80062d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d81c      	bhi.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80062da:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80062dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e0:	0800631d 	.word	0x0800631d
 80062e4:	080062f1 	.word	0x080062f1
 80062e8:	080062ff 	.word	0x080062ff
 80062ec:	0800631d 	.word	0x0800631d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062f0:	4b9f      	ldr	r3, [pc, #636]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	4a9e      	ldr	r2, [pc, #632]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80062fc:	e00f      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006302:	3308      	adds	r3, #8
 8006304:	2102      	movs	r1, #2
 8006306:	4618      	mov	r0, r3
 8006308:	f001 f904 	bl	8007514 <RCCEx_PLL2_Config>
 800630c:	4603      	mov	r3, r0
 800630e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006312:	e004      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800631a:	e000      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800631c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800631e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10a      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006326:	4b92      	ldr	r3, [pc, #584]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800632a:	f023 0103 	bic.w	r1, r3, #3
 800632e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006334:	4a8e      	ldr	r2, [pc, #568]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006336:	430b      	orrs	r3, r1
 8006338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800633a:	e003      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006340:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006350:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006354:	2300      	movs	r3, #0
 8006356:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800635a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800635e:	460b      	mov	r3, r1
 8006360:	4313      	orrs	r3, r2
 8006362:	f000 8099 	beq.w	8006498 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006366:	4b83      	ldr	r3, [pc, #524]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a82      	ldr	r2, [pc, #520]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800636c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006370:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006372:	f7fb fe9f 	bl	80020b4 <HAL_GetTick>
 8006376:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800637a:	e00b      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800637c:	f7fb fe9a 	bl	80020b4 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b64      	cmp	r3, #100	; 0x64
 800638a:	d903      	bls.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006392:	e005      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006394:	4b77      	ldr	r3, [pc, #476]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0ed      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80063a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d173      	bne.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80063a8:	4b71      	ldr	r3, [pc, #452]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80063b4:	4053      	eors	r3, r2
 80063b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d015      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063be:	4b6c      	ldr	r3, [pc, #432]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063ca:	4b69      	ldr	r3, [pc, #420]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ce:	4a68      	ldr	r2, [pc, #416]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063d4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063d6:	4b66      	ldr	r3, [pc, #408]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063da:	4a65      	ldr	r2, [pc, #404]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063e0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80063e2:	4a63      	ldr	r2, [pc, #396]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80063ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80063f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063f6:	d118      	bne.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f8:	f7fb fe5c 	bl	80020b4 <HAL_GetTick>
 80063fc:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006400:	e00d      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006402:	f7fb fe57 	bl	80020b4 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800640c:	1ad2      	subs	r2, r2, r3
 800640e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006412:	429a      	cmp	r2, r3
 8006414:	d903      	bls.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800641c:	e005      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800641e:	4b54      	ldr	r3, [pc, #336]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0eb      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800642a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800642e:	2b00      	cmp	r3, #0
 8006430:	d129      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006436:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800643a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800643e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006442:	d10e      	bne.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006444:	4b4a      	ldr	r3, [pc, #296]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800644c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006450:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006454:	091a      	lsrs	r2, r3, #4
 8006456:	4b48      	ldr	r3, [pc, #288]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006458:	4013      	ands	r3, r2
 800645a:	4a45      	ldr	r2, [pc, #276]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800645c:	430b      	orrs	r3, r1
 800645e:	6113      	str	r3, [r2, #16]
 8006460:	e005      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006462:	4b43      	ldr	r3, [pc, #268]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	4a42      	ldr	r2, [pc, #264]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006468:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800646c:	6113      	str	r3, [r2, #16]
 800646e:	4b40      	ldr	r3, [pc, #256]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006470:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006472:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006476:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800647a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800647e:	4a3c      	ldr	r2, [pc, #240]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006480:	430b      	orrs	r3, r1
 8006482:	6713      	str	r3, [r2, #112]	; 0x70
 8006484:	e008      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006486:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800648a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800648e:	e003      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006490:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006494:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a0:	f002 0301 	and.w	r3, r2, #1
 80064a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064a8:	2300      	movs	r3, #0
 80064aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80064b2:	460b      	mov	r3, r1
 80064b4:	4313      	orrs	r3, r2
 80064b6:	f000 8090 	beq.w	80065da <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80064ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064c2:	2b28      	cmp	r3, #40	; 0x28
 80064c4:	d870      	bhi.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80064c6:	a201      	add	r2, pc, #4	; (adr r2, 80064cc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80064c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064cc:	080065b1 	.word	0x080065b1
 80064d0:	080065a9 	.word	0x080065a9
 80064d4:	080065a9 	.word	0x080065a9
 80064d8:	080065a9 	.word	0x080065a9
 80064dc:	080065a9 	.word	0x080065a9
 80064e0:	080065a9 	.word	0x080065a9
 80064e4:	080065a9 	.word	0x080065a9
 80064e8:	080065a9 	.word	0x080065a9
 80064ec:	0800657d 	.word	0x0800657d
 80064f0:	080065a9 	.word	0x080065a9
 80064f4:	080065a9 	.word	0x080065a9
 80064f8:	080065a9 	.word	0x080065a9
 80064fc:	080065a9 	.word	0x080065a9
 8006500:	080065a9 	.word	0x080065a9
 8006504:	080065a9 	.word	0x080065a9
 8006508:	080065a9 	.word	0x080065a9
 800650c:	08006593 	.word	0x08006593
 8006510:	080065a9 	.word	0x080065a9
 8006514:	080065a9 	.word	0x080065a9
 8006518:	080065a9 	.word	0x080065a9
 800651c:	080065a9 	.word	0x080065a9
 8006520:	080065a9 	.word	0x080065a9
 8006524:	080065a9 	.word	0x080065a9
 8006528:	080065a9 	.word	0x080065a9
 800652c:	080065b1 	.word	0x080065b1
 8006530:	080065a9 	.word	0x080065a9
 8006534:	080065a9 	.word	0x080065a9
 8006538:	080065a9 	.word	0x080065a9
 800653c:	080065a9 	.word	0x080065a9
 8006540:	080065a9 	.word	0x080065a9
 8006544:	080065a9 	.word	0x080065a9
 8006548:	080065a9 	.word	0x080065a9
 800654c:	080065b1 	.word	0x080065b1
 8006550:	080065a9 	.word	0x080065a9
 8006554:	080065a9 	.word	0x080065a9
 8006558:	080065a9 	.word	0x080065a9
 800655c:	080065a9 	.word	0x080065a9
 8006560:	080065a9 	.word	0x080065a9
 8006564:	080065a9 	.word	0x080065a9
 8006568:	080065a9 	.word	0x080065a9
 800656c:	080065b1 	.word	0x080065b1
 8006570:	58024400 	.word	0x58024400
 8006574:	58024800 	.word	0x58024800
 8006578:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800657c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006580:	3308      	adds	r3, #8
 8006582:	2101      	movs	r1, #1
 8006584:	4618      	mov	r0, r3
 8006586:	f000 ffc5 	bl	8007514 <RCCEx_PLL2_Config>
 800658a:	4603      	mov	r3, r0
 800658c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006590:	e00f      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006596:	3328      	adds	r3, #40	; 0x28
 8006598:	2101      	movs	r1, #1
 800659a:	4618      	mov	r0, r3
 800659c:	f001 f86c 	bl	8007678 <RCCEx_PLL3_Config>
 80065a0:	4603      	mov	r3, r0
 80065a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80065a6:	e004      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80065ae:	e000      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80065b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10b      	bne.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80065ba:	4bc0      	ldr	r3, [pc, #768]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80065bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065be:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80065c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ca:	4abc      	ldr	r2, [pc, #752]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80065cc:	430b      	orrs	r3, r1
 80065ce:	6553      	str	r3, [r2, #84]	; 0x54
 80065d0:	e003      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80065da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e2:	f002 0302 	and.w	r3, r2, #2
 80065e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065ea:	2300      	movs	r3, #0
 80065ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80065f0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80065f4:	460b      	mov	r3, r1
 80065f6:	4313      	orrs	r3, r2
 80065f8:	d043      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80065fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006602:	2b05      	cmp	r3, #5
 8006604:	d824      	bhi.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006606:	a201      	add	r2, pc, #4	; (adr r2, 800660c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660c:	08006659 	.word	0x08006659
 8006610:	08006625 	.word	0x08006625
 8006614:	0800663b 	.word	0x0800663b
 8006618:	08006659 	.word	0x08006659
 800661c:	08006659 	.word	0x08006659
 8006620:	08006659 	.word	0x08006659
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006628:	3308      	adds	r3, #8
 800662a:	2101      	movs	r1, #1
 800662c:	4618      	mov	r0, r3
 800662e:	f000 ff71 	bl	8007514 <RCCEx_PLL2_Config>
 8006632:	4603      	mov	r3, r0
 8006634:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006638:	e00f      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800663a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800663e:	3328      	adds	r3, #40	; 0x28
 8006640:	2101      	movs	r1, #1
 8006642:	4618      	mov	r0, r3
 8006644:	f001 f818 	bl	8007678 <RCCEx_PLL3_Config>
 8006648:	4603      	mov	r3, r0
 800664a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800664e:	e004      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006656:	e000      	b.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8006658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800665a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10b      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006662:	4b96      	ldr	r3, [pc, #600]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006666:	f023 0107 	bic.w	r1, r3, #7
 800666a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800666e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006672:	4a92      	ldr	r2, [pc, #584]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006674:	430b      	orrs	r3, r1
 8006676:	6553      	str	r3, [r2, #84]	; 0x54
 8006678:	e003      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800667e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006682:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	f002 0304 	and.w	r3, r2, #4
 800668e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006692:	2300      	movs	r3, #0
 8006694:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006698:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800669c:	460b      	mov	r3, r1
 800669e:	4313      	orrs	r3, r2
 80066a0:	d043      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80066a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066aa:	2b05      	cmp	r3, #5
 80066ac:	d824      	bhi.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80066ae:	a201      	add	r2, pc, #4	; (adr r2, 80066b4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80066b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b4:	08006701 	.word	0x08006701
 80066b8:	080066cd 	.word	0x080066cd
 80066bc:	080066e3 	.word	0x080066e3
 80066c0:	08006701 	.word	0x08006701
 80066c4:	08006701 	.word	0x08006701
 80066c8:	08006701 	.word	0x08006701
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066d0:	3308      	adds	r3, #8
 80066d2:	2101      	movs	r1, #1
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 ff1d 	bl	8007514 <RCCEx_PLL2_Config>
 80066da:	4603      	mov	r3, r0
 80066dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80066e0:	e00f      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066e6:	3328      	adds	r3, #40	; 0x28
 80066e8:	2101      	movs	r1, #1
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 ffc4 	bl	8007678 <RCCEx_PLL3_Config>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80066f6:	e004      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80066fe:	e000      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006702:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10b      	bne.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800670a:	4b6c      	ldr	r3, [pc, #432]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800670c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670e:	f023 0107 	bic.w	r1, r3, #7
 8006712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006716:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800671a:	4a68      	ldr	r2, [pc, #416]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800671c:	430b      	orrs	r3, r1
 800671e:	6593      	str	r3, [r2, #88]	; 0x58
 8006720:	e003      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006722:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006726:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800672a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800672e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006732:	f002 0320 	and.w	r3, r2, #32
 8006736:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800673a:	2300      	movs	r3, #0
 800673c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006740:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006744:	460b      	mov	r3, r1
 8006746:	4313      	orrs	r3, r2
 8006748:	d055      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800674a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800674e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006752:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006756:	d033      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800675c:	d82c      	bhi.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800675e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006762:	d02f      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006768:	d826      	bhi.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800676a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800676e:	d02b      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006770:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006774:	d820      	bhi.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800677a:	d012      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800677c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006780:	d81a      	bhi.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006782:	2b00      	cmp	r3, #0
 8006784:	d022      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006786:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800678a:	d115      	bne.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800678c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006790:	3308      	adds	r3, #8
 8006792:	2100      	movs	r1, #0
 8006794:	4618      	mov	r0, r3
 8006796:	f000 febd 	bl	8007514 <RCCEx_PLL2_Config>
 800679a:	4603      	mov	r3, r0
 800679c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80067a0:	e015      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067a6:	3328      	adds	r3, #40	; 0x28
 80067a8:	2102      	movs	r1, #2
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 ff64 	bl	8007678 <RCCEx_PLL3_Config>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80067b6:	e00a      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80067be:	e006      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80067c0:	bf00      	nop
 80067c2:	e004      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80067c4:	bf00      	nop
 80067c6:	e002      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80067c8:	bf00      	nop
 80067ca:	e000      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80067cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10b      	bne.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067d6:	4b39      	ldr	r3, [pc, #228]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80067d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80067de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067e6:	4a35      	ldr	r2, [pc, #212]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80067e8:	430b      	orrs	r3, r1
 80067ea:	6553      	str	r3, [r2, #84]	; 0x54
 80067ec:	e003      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80067f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80067f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006802:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006806:	2300      	movs	r3, #0
 8006808:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800680c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006810:	460b      	mov	r3, r1
 8006812:	4313      	orrs	r3, r2
 8006814:	d058      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800681a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800681e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006822:	d033      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006824:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006828:	d82c      	bhi.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800682a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800682e:	d02f      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006834:	d826      	bhi.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006836:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800683a:	d02b      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800683c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006840:	d820      	bhi.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006846:	d012      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8006848:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800684c:	d81a      	bhi.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d022      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006856:	d115      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800685c:	3308      	adds	r3, #8
 800685e:	2100      	movs	r1, #0
 8006860:	4618      	mov	r0, r3
 8006862:	f000 fe57 	bl	8007514 <RCCEx_PLL2_Config>
 8006866:	4603      	mov	r3, r0
 8006868:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800686c:	e015      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800686e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006872:	3328      	adds	r3, #40	; 0x28
 8006874:	2102      	movs	r1, #2
 8006876:	4618      	mov	r0, r3
 8006878:	f000 fefe 	bl	8007678 <RCCEx_PLL3_Config>
 800687c:	4603      	mov	r3, r0
 800687e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006882:	e00a      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800688a:	e006      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800688c:	bf00      	nop
 800688e:	e004      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006890:	bf00      	nop
 8006892:	e002      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006894:	bf00      	nop
 8006896:	e000      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800689a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10e      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068a2:	4b06      	ldr	r3, [pc, #24]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80068a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80068aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068b2:	4a02      	ldr	r2, [pc, #8]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80068b4:	430b      	orrs	r3, r1
 80068b6:	6593      	str	r3, [r2, #88]	; 0x58
 80068b8:	e006      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80068ba:	bf00      	nop
 80068bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80068c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80068d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80068d8:	2300      	movs	r3, #0
 80068da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80068e2:	460b      	mov	r3, r1
 80068e4:	4313      	orrs	r3, r2
 80068e6:	d055      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80068e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80068f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80068f4:	d033      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80068f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80068fa:	d82c      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80068fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006900:	d02f      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006906:	d826      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006908:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800690c:	d02b      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800690e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006912:	d820      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006918:	d012      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800691a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800691e:	d81a      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006920:	2b00      	cmp	r3, #0
 8006922:	d022      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006928:	d115      	bne.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800692a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800692e:	3308      	adds	r3, #8
 8006930:	2100      	movs	r1, #0
 8006932:	4618      	mov	r0, r3
 8006934:	f000 fdee 	bl	8007514 <RCCEx_PLL2_Config>
 8006938:	4603      	mov	r3, r0
 800693a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800693e:	e015      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006944:	3328      	adds	r3, #40	; 0x28
 8006946:	2102      	movs	r1, #2
 8006948:	4618      	mov	r0, r3
 800694a:	f000 fe95 	bl	8007678 <RCCEx_PLL3_Config>
 800694e:	4603      	mov	r3, r0
 8006950:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006954:	e00a      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800695c:	e006      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800695e:	bf00      	nop
 8006960:	e004      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006962:	bf00      	nop
 8006964:	e002      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006966:	bf00      	nop
 8006968:	e000      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800696a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800696c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10b      	bne.n	800698c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006974:	4ba1      	ldr	r3, [pc, #644]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006978:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800697c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006980:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006984:	4a9d      	ldr	r2, [pc, #628]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006986:	430b      	orrs	r3, r1
 8006988:	6593      	str	r3, [r2, #88]	; 0x58
 800698a:	e003      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006990:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006994:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699c:	f002 0308 	and.w	r3, r2, #8
 80069a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069a4:	2300      	movs	r3, #0
 80069a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80069ae:	460b      	mov	r3, r1
 80069b0:	4313      	orrs	r3, r2
 80069b2:	d01e      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80069b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c0:	d10c      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80069c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069c6:	3328      	adds	r3, #40	; 0x28
 80069c8:	2102      	movs	r1, #2
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 fe54 	bl	8007678 <RCCEx_PLL3_Config>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d002      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80069dc:	4b87      	ldr	r3, [pc, #540]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069ec:	4a83      	ldr	r2, [pc, #524]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80069ee:	430b      	orrs	r3, r1
 80069f0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fa:	f002 0310 	and.w	r3, r2, #16
 80069fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a02:	2300      	movs	r3, #0
 8006a04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a08:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	d01e      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a1e:	d10c      	bne.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a24:	3328      	adds	r3, #40	; 0x28
 8006a26:	2102      	movs	r1, #2
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f000 fe25 	bl	8007678 <RCCEx_PLL3_Config>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a3a:	4b70      	ldr	r3, [pc, #448]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a4a:	4a6c      	ldr	r2, [pc, #432]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006a4c:	430b      	orrs	r3, r1
 8006a4e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a58:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006a5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a60:	2300      	movs	r3, #0
 8006a62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a66:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	d03e      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a7c:	d022      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006a7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a82:	d81b      	bhi.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d003      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a8c:	d00b      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006a8e:	e015      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a94:	3308      	adds	r3, #8
 8006a96:	2100      	movs	r1, #0
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 fd3b 	bl	8007514 <RCCEx_PLL2_Config>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006aa4:	e00f      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aaa:	3328      	adds	r3, #40	; 0x28
 8006aac:	2102      	movs	r1, #2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 fde2 	bl	8007678 <RCCEx_PLL3_Config>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006aba:	e004      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006ac2:	e000      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ac6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10b      	bne.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ace:	4b4b      	ldr	r3, [pc, #300]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ada:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ade:	4a47      	ldr	r2, [pc, #284]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ae0:	430b      	orrs	r3, r1
 8006ae2:	6593      	str	r3, [r2, #88]	; 0x58
 8006ae4:	e003      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006aea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006afa:	67bb      	str	r3, [r7, #120]	; 0x78
 8006afc:	2300      	movs	r3, #0
 8006afe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b00:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006b04:	460b      	mov	r3, r1
 8006b06:	4313      	orrs	r3, r2
 8006b08:	d03b      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b16:	d01f      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006b18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b1c:	d818      	bhi.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b22:	d003      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006b24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b28:	d007      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8006b2a:	e011      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b2c:	4b33      	ldr	r3, [pc, #204]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	4a32      	ldr	r2, [pc, #200]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b38:	e00f      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b3e:	3328      	adds	r3, #40	; 0x28
 8006b40:	2101      	movs	r1, #1
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fd98 	bl	8007678 <RCCEx_PLL3_Config>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b4e:	e004      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006b56:	e000      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10b      	bne.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b62:	4b26      	ldr	r3, [pc, #152]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b66:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b72:	4a22      	ldr	r2, [pc, #136]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b74:	430b      	orrs	r3, r1
 8006b76:	6553      	str	r3, [r2, #84]	; 0x54
 8006b78:	e003      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b7e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006b8e:	673b      	str	r3, [r7, #112]	; 0x70
 8006b90:	2300      	movs	r3, #0
 8006b92:	677b      	str	r3, [r7, #116]	; 0x74
 8006b94:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006b98:	460b      	mov	r3, r1
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	d034      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d003      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bac:	d007      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006bae:	e011      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bb0:	4b12      	ldr	r3, [pc, #72]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb4:	4a11      	ldr	r2, [pc, #68]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006bbc:	e00e      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	2102      	movs	r1, #2
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 fca4 	bl	8007514 <RCCEx_PLL2_Config>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006bd2:	e003      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bdc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10d      	bne.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006be4:	4b05      	ldr	r3, [pc, #20]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf2:	4a02      	ldr	r2, [pc, #8]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006bf4:	430b      	orrs	r3, r1
 8006bf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bf8:	e006      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006bfa:	bf00      	nop
 8006bfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c10:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006c14:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c16:	2300      	movs	r3, #0
 8006c18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c1a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4313      	orrs	r3, r2
 8006c22:	d00c      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c28:	3328      	adds	r3, #40	; 0x28
 8006c2a:	2102      	movs	r1, #2
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 fd23 	bl	8007678 <RCCEx_PLL3_Config>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d002      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c46:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006c4a:	663b      	str	r3, [r7, #96]	; 0x60
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	667b      	str	r3, [r7, #100]	; 0x64
 8006c50:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006c54:	460b      	mov	r3, r1
 8006c56:	4313      	orrs	r3, r2
 8006c58:	d038      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c66:	d018      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006c68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c6c:	d811      	bhi.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c72:	d014      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006c74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c78:	d80b      	bhi.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d011      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c82:	d106      	bne.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c84:	4bc3      	ldr	r3, [pc, #780]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	4ac2      	ldr	r2, [pc, #776]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006c90:	e008      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006c98:	e004      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006c9a:	bf00      	nop
 8006c9c:	e002      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006c9e:	bf00      	nop
 8006ca0:	e000      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ca4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10b      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cac:	4bb9      	ldr	r3, [pc, #740]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cbc:	4ab5      	ldr	r2, [pc, #724]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006cbe:	430b      	orrs	r3, r1
 8006cc0:	6553      	str	r3, [r2, #84]	; 0x54
 8006cc2:	e003      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006cc8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006cd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cda:	2300      	movs	r3, #0
 8006cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cde:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	d009      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ce8:	4baa      	ldr	r3, [pc, #680]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cf6:	4aa7      	ldr	r2, [pc, #668]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006cf8:	430b      	orrs	r3, r1
 8006cfa:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d04:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006d08:	653b      	str	r3, [r7, #80]	; 0x50
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	657b      	str	r3, [r7, #84]	; 0x54
 8006d0e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006d12:	460b      	mov	r3, r1
 8006d14:	4313      	orrs	r3, r2
 8006d16:	d009      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d18:	4b9e      	ldr	r3, [pc, #632]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d26:	4a9b      	ldr	r2, [pc, #620]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006d38:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d3e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006d42:	460b      	mov	r3, r1
 8006d44:	4313      	orrs	r3, r2
 8006d46:	d009      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006d48:	4b92      	ldr	r3, [pc, #584]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d4c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8006d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d56:	4a8f      	ldr	r2, [pc, #572]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006d68:	643b      	str	r3, [r7, #64]	; 0x40
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d6e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006d72:	460b      	mov	r3, r1
 8006d74:	4313      	orrs	r3, r2
 8006d76:	d00e      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d78:	4b86      	ldr	r3, [pc, #536]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	4a85      	ldr	r2, [pc, #532]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d82:	6113      	str	r3, [r2, #16]
 8006d84:	4b83      	ldr	r3, [pc, #524]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d86:	6919      	ldr	r1, [r3, #16]
 8006d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006d90:	4a80      	ldr	r2, [pc, #512]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006d92:	430b      	orrs	r3, r1
 8006d94:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006da2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006da4:	2300      	movs	r3, #0
 8006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006da8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006dac:	460b      	mov	r3, r1
 8006dae:	4313      	orrs	r3, r2
 8006db0:	d009      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006db2:	4b78      	ldr	r3, [pc, #480]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc0:	4a74      	ldr	r2, [pc, #464]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006dc2:	430b      	orrs	r3, r1
 8006dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dce:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006dd2:	633b      	str	r3, [r7, #48]	; 0x30
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8006dd8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4313      	orrs	r3, r2
 8006de0:	d00a      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006de2:	4b6c      	ldr	r3, [pc, #432]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006df2:	4a68      	ldr	r2, [pc, #416]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006df4:	430b      	orrs	r3, r1
 8006df6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	2100      	movs	r1, #0
 8006e02:	62b9      	str	r1, [r7, #40]	; 0x28
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e0a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4313      	orrs	r3, r2
 8006e12:	d011      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e18:	3308      	adds	r3, #8
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 fb79 	bl	8007514 <RCCEx_PLL2_Config>
 8006e22:	4603      	mov	r3, r0
 8006e24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006e28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d003      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	2100      	movs	r1, #0
 8006e42:	6239      	str	r1, [r7, #32]
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
 8006e4a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4313      	orrs	r3, r2
 8006e52:	d011      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e58:	3308      	adds	r3, #8
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 fb59 	bl	8007514 <RCCEx_PLL2_Config>
 8006e62:	4603      	mov	r3, r0
 8006e64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006e68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e74:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	2100      	movs	r1, #0
 8006e82:	61b9      	str	r1, [r7, #24]
 8006e84:	f003 0304 	and.w	r3, r3, #4
 8006e88:	61fb      	str	r3, [r7, #28]
 8006e8a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	4313      	orrs	r3, r2
 8006e92:	d011      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e98:	3308      	adds	r3, #8
 8006e9a:	2102      	movs	r1, #2
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 fb39 	bl	8007514 <RCCEx_PLL2_Config>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006ea8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006eb4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	6139      	str	r1, [r7, #16]
 8006ec4:	f003 0308 	and.w	r3, r3, #8
 8006ec8:	617b      	str	r3, [r7, #20]
 8006eca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	d011      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ed8:	3328      	adds	r3, #40	; 0x28
 8006eda:	2100      	movs	r1, #0
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 fbcb 	bl	8007678 <RCCEx_PLL3_Config>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8006ee8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ef4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	2100      	movs	r1, #0
 8006f02:	60b9      	str	r1, [r7, #8]
 8006f04:	f003 0310 	and.w	r3, r3, #16
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4313      	orrs	r3, r2
 8006f12:	d011      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f18:	3328      	adds	r3, #40	; 0x28
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 fbab 	bl	8007678 <RCCEx_PLL3_Config>
 8006f22:	4603      	mov	r3, r0
 8006f24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006f28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f40:	2100      	movs	r1, #0
 8006f42:	6039      	str	r1, [r7, #0]
 8006f44:	f003 0320 	and.w	r3, r3, #32
 8006f48:	607b      	str	r3, [r7, #4]
 8006f4a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4313      	orrs	r3, r2
 8006f52:	d011      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f58:	3328      	adds	r3, #40	; 0x28
 8006f5a:	2102      	movs	r1, #2
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f000 fb8b 	bl	8007678 <RCCEx_PLL3_Config>
 8006f62:	4603      	mov	r3, r0
 8006f64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006f68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d003      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f74:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8006f78:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	e000      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f92:	bf00      	nop
 8006f94:	58024400 	.word	0x58024400

08006f98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006f9c:	f7fe fde2 	bl	8005b64 <HAL_RCC_GetHCLKFreq>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	4b06      	ldr	r3, [pc, #24]	; (8006fbc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	091b      	lsrs	r3, r3, #4
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	4904      	ldr	r1, [pc, #16]	; (8006fc0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006fae:	5ccb      	ldrb	r3, [r1, r3]
 8006fb0:	f003 031f 	and.w	r3, r3, #31
 8006fb4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	58024400 	.word	0x58024400
 8006fc0:	0800c7c4 	.word	0x0800c7c4

08006fc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b089      	sub	sp, #36	; 0x24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fcc:	4ba1      	ldr	r3, [pc, #644]	; (8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd0:	f003 0303 	and.w	r3, r3, #3
 8006fd4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006fd6:	4b9f      	ldr	r3, [pc, #636]	; (8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fda:	0b1b      	lsrs	r3, r3, #12
 8006fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fe0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006fe2:	4b9c      	ldr	r3, [pc, #624]	; (8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe6:	091b      	lsrs	r3, r3, #4
 8006fe8:	f003 0301 	and.w	r3, r3, #1
 8006fec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006fee:	4b99      	ldr	r3, [pc, #612]	; (8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff2:	08db      	lsrs	r3, r3, #3
 8006ff4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	fb02 f303 	mul.w	r3, r2, r3
 8006ffe:	ee07 3a90 	vmov	s15, r3
 8007002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007006:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 8111 	beq.w	8007234 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	2b02      	cmp	r3, #2
 8007016:	f000 8083 	beq.w	8007120 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	2b02      	cmp	r3, #2
 800701e:	f200 80a1 	bhi.w	8007164 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d003      	beq.n	8007030 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d056      	beq.n	80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800702e:	e099      	b.n	8007164 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007030:	4b88      	ldr	r3, [pc, #544]	; (8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0320 	and.w	r3, r3, #32
 8007038:	2b00      	cmp	r3, #0
 800703a:	d02d      	beq.n	8007098 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800703c:	4b85      	ldr	r3, [pc, #532]	; (8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	08db      	lsrs	r3, r3, #3
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	4a84      	ldr	r2, [pc, #528]	; (8007258 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007048:	fa22 f303 	lsr.w	r3, r2, r3
 800704c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	ee07 3a90 	vmov	s15, r3
 8007054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	ee07 3a90 	vmov	s15, r3
 800705e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007066:	4b7b      	ldr	r3, [pc, #492]	; (8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706e:	ee07 3a90 	vmov	s15, r3
 8007072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007076:	ed97 6a03 	vldr	s12, [r7, #12]
 800707a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800725c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800707e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800708a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800708e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007092:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007096:	e087      	b.n	80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80070a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070aa:	4b6a      	ldr	r3, [pc, #424]	; (8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80070be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800725c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070da:	e065      	b.n	80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	ee07 3a90 	vmov	s15, r3
 80070e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ee:	4b59      	ldr	r3, [pc, #356]	; (8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007102:	eddf 5a56 	vldr	s11, [pc, #344]	; 800725c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800710a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800710e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800711a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800711e:	e043      	b.n	80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	ee07 3a90 	vmov	s15, r3
 8007126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007268 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800712e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007132:	4b48      	ldr	r3, [pc, #288]	; (8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800713a:	ee07 3a90 	vmov	s15, r3
 800713e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007142:	ed97 6a03 	vldr	s12, [r7, #12]
 8007146:	eddf 5a45 	vldr	s11, [pc, #276]	; 800725c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800714a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800714e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800715a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800715e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007162:	e021      	b.n	80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007176:	4b37      	ldr	r3, [pc, #220]	; (8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007186:	ed97 6a03 	vldr	s12, [r7, #12]
 800718a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800725c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800718e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800719a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80071a8:	4b2a      	ldr	r3, [pc, #168]	; (8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ac:	0a5b      	lsrs	r3, r3, #9
 80071ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80071c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ce:	ee17 2a90 	vmov	r2, s15
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80071d6:	4b1f      	ldr	r3, [pc, #124]	; (8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071da:	0c1b      	lsrs	r3, r3, #16
 80071dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e0:	ee07 3a90 	vmov	s15, r3
 80071e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80071f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071fc:	ee17 2a90 	vmov	r2, s15
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007204:	4b13      	ldr	r3, [pc, #76]	; (8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	0e1b      	lsrs	r3, r3, #24
 800720a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007216:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800721a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800721e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800722a:	ee17 2a90 	vmov	r2, s15
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007232:	e008      	b.n	8007246 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	609a      	str	r2, [r3, #8]
}
 8007246:	bf00      	nop
 8007248:	3724      	adds	r7, #36	; 0x24
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	58024400 	.word	0x58024400
 8007258:	03d09000 	.word	0x03d09000
 800725c:	46000000 	.word	0x46000000
 8007260:	4c742400 	.word	0x4c742400
 8007264:	4a742400 	.word	0x4a742400
 8007268:	4af42400 	.word	0x4af42400

0800726c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800726c:	b480      	push	{r7}
 800726e:	b089      	sub	sp, #36	; 0x24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007274:	4ba1      	ldr	r3, [pc, #644]	; (80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007278:	f003 0303 	and.w	r3, r3, #3
 800727c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800727e:	4b9f      	ldr	r3, [pc, #636]	; (80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007282:	0d1b      	lsrs	r3, r3, #20
 8007284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007288:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800728a:	4b9c      	ldr	r3, [pc, #624]	; (80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800728c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728e:	0a1b      	lsrs	r3, r3, #8
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007296:	4b99      	ldr	r3, [pc, #612]	; (80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729a:	08db      	lsrs	r3, r3, #3
 800729c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	fb02 f303 	mul.w	r3, r2, r3
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f000 8111 	beq.w	80074dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	f000 8083 	beq.w	80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	f200 80a1 	bhi.w	800740c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d003      	beq.n	80072d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d056      	beq.n	8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80072d6:	e099      	b.n	800740c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072d8:	4b88      	ldr	r3, [pc, #544]	; (80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0320 	and.w	r3, r3, #32
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d02d      	beq.n	8007340 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072e4:	4b85      	ldr	r3, [pc, #532]	; (80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	08db      	lsrs	r3, r3, #3
 80072ea:	f003 0303 	and.w	r3, r3, #3
 80072ee:	4a84      	ldr	r2, [pc, #528]	; (8007500 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80072f0:	fa22 f303 	lsr.w	r3, r2, r3
 80072f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	ee07 3a90 	vmov	s15, r3
 80072fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	ee07 3a90 	vmov	s15, r3
 8007306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800730e:	4b7b      	ldr	r3, [pc, #492]	; (80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800731e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007322:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800732a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800732e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800733a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800733e:	e087      	b.n	8007450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800734e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007352:	4b6a      	ldr	r3, [pc, #424]	; (80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007362:	ed97 6a03 	vldr	s12, [r7, #12]
 8007366:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800736a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800736e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800737a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800737e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007382:	e065      	b.n	8007450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800750c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007396:	4b59      	ldr	r3, [pc, #356]	; (80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073c6:	e043      	b.n	8007450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007510 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80073d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073da:	4b48      	ldr	r3, [pc, #288]	; (80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800740a:	e021      	b.n	8007450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007416:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800750c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800741a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800741e:	4b37      	ldr	r3, [pc, #220]	; (80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800742e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007432:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800743a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800743e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800744a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800744e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007450:	4b2a      	ldr	r3, [pc, #168]	; (80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007454:	0a5b      	lsrs	r3, r3, #9
 8007456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800745a:	ee07 3a90 	vmov	s15, r3
 800745e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007462:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007466:	ee37 7a87 	vadd.f32	s14, s15, s14
 800746a:	edd7 6a07 	vldr	s13, [r7, #28]
 800746e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007476:	ee17 2a90 	vmov	r2, s15
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800747e:	4b1f      	ldr	r3, [pc, #124]	; (80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	0c1b      	lsrs	r3, r3, #16
 8007484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007488:	ee07 3a90 	vmov	s15, r3
 800748c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007490:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007494:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007498:	edd7 6a07 	vldr	s13, [r7, #28]
 800749c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074a4:	ee17 2a90 	vmov	r2, s15
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80074ac:	4b13      	ldr	r3, [pc, #76]	; (80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b0:	0e1b      	lsrs	r3, r3, #24
 80074b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b6:	ee07 3a90 	vmov	s15, r3
 80074ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80074ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074d2:	ee17 2a90 	vmov	r2, s15
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80074da:	e008      	b.n	80074ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	609a      	str	r2, [r3, #8]
}
 80074ee:	bf00      	nop
 80074f0:	3724      	adds	r7, #36	; 0x24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	58024400 	.word	0x58024400
 8007500:	03d09000 	.word	0x03d09000
 8007504:	46000000 	.word	0x46000000
 8007508:	4c742400 	.word	0x4c742400
 800750c:	4a742400 	.word	0x4a742400
 8007510:	4af42400 	.word	0x4af42400

08007514 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007522:	4b53      	ldr	r3, [pc, #332]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 8007524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007526:	f003 0303 	and.w	r3, r3, #3
 800752a:	2b03      	cmp	r3, #3
 800752c:	d101      	bne.n	8007532 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e099      	b.n	8007666 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007532:	4b4f      	ldr	r3, [pc, #316]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a4e      	ldr	r2, [pc, #312]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 8007538:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800753c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800753e:	f7fa fdb9 	bl	80020b4 <HAL_GetTick>
 8007542:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007544:	e008      	b.n	8007558 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007546:	f7fa fdb5 	bl	80020b4 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	2b02      	cmp	r3, #2
 8007552:	d901      	bls.n	8007558 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e086      	b.n	8007666 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007558:	4b45      	ldr	r3, [pc, #276]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1f0      	bne.n	8007546 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007564:	4b42      	ldr	r3, [pc, #264]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 8007566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007568:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	031b      	lsls	r3, r3, #12
 8007572:	493f      	ldr	r1, [pc, #252]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 8007574:	4313      	orrs	r3, r2
 8007576:	628b      	str	r3, [r1, #40]	; 0x28
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	3b01      	subs	r3, #1
 800757e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	3b01      	subs	r3, #1
 8007588:	025b      	lsls	r3, r3, #9
 800758a:	b29b      	uxth	r3, r3
 800758c:	431a      	orrs	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	3b01      	subs	r3, #1
 8007594:	041b      	lsls	r3, r3, #16
 8007596:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800759a:	431a      	orrs	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	3b01      	subs	r3, #1
 80075a2:	061b      	lsls	r3, r3, #24
 80075a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80075a8:	4931      	ldr	r1, [pc, #196]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80075ae:	4b30      	ldr	r3, [pc, #192]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 80075b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	492d      	ldr	r1, [pc, #180]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80075c0:	4b2b      	ldr	r3, [pc, #172]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	f023 0220 	bic.w	r2, r3, #32
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	4928      	ldr	r1, [pc, #160]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80075d2:	4b27      	ldr	r3, [pc, #156]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 80075d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d6:	4a26      	ldr	r2, [pc, #152]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 80075d8:	f023 0310 	bic.w	r3, r3, #16
 80075dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80075de:	4b24      	ldr	r3, [pc, #144]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 80075e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075e2:	4b24      	ldr	r3, [pc, #144]	; (8007674 <RCCEx_PLL2_Config+0x160>)
 80075e4:	4013      	ands	r3, r2
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	69d2      	ldr	r2, [r2, #28]
 80075ea:	00d2      	lsls	r2, r2, #3
 80075ec:	4920      	ldr	r1, [pc, #128]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80075f2:	4b1f      	ldr	r3, [pc, #124]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 80075f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f6:	4a1e      	ldr	r2, [pc, #120]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 80075f8:	f043 0310 	orr.w	r3, r3, #16
 80075fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d106      	bne.n	8007612 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007604:	4b1a      	ldr	r3, [pc, #104]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 8007606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007608:	4a19      	ldr	r2, [pc, #100]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 800760a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800760e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007610:	e00f      	b.n	8007632 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d106      	bne.n	8007626 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007618:	4b15      	ldr	r3, [pc, #84]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 800761a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761c:	4a14      	ldr	r2, [pc, #80]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 800761e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007622:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007624:	e005      	b.n	8007632 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007626:	4b12      	ldr	r3, [pc, #72]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 8007628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762a:	4a11      	ldr	r2, [pc, #68]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 800762c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007630:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007632:	4b0f      	ldr	r3, [pc, #60]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a0e      	ldr	r2, [pc, #56]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 8007638:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800763c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800763e:	f7fa fd39 	bl	80020b4 <HAL_GetTick>
 8007642:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007644:	e008      	b.n	8007658 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007646:	f7fa fd35 	bl	80020b4 <HAL_GetTick>
 800764a:	4602      	mov	r2, r0
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	2b02      	cmp	r3, #2
 8007652:	d901      	bls.n	8007658 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e006      	b.n	8007666 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007658:	4b05      	ldr	r3, [pc, #20]	; (8007670 <RCCEx_PLL2_Config+0x15c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0f0      	beq.n	8007646 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007664:	7bfb      	ldrb	r3, [r7, #15]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	58024400 	.word	0x58024400
 8007674:	ffff0007 	.word	0xffff0007

08007678 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007686:	4b53      	ldr	r3, [pc, #332]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 8007688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768a:	f003 0303 	and.w	r3, r3, #3
 800768e:	2b03      	cmp	r3, #3
 8007690:	d101      	bne.n	8007696 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e099      	b.n	80077ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007696:	4b4f      	ldr	r3, [pc, #316]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a4e      	ldr	r2, [pc, #312]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 800769c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076a2:	f7fa fd07 	bl	80020b4 <HAL_GetTick>
 80076a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076a8:	e008      	b.n	80076bc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80076aa:	f7fa fd03 	bl	80020b4 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d901      	bls.n	80076bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e086      	b.n	80077ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076bc:	4b45      	ldr	r3, [pc, #276]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1f0      	bne.n	80076aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80076c8:	4b42      	ldr	r3, [pc, #264]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 80076ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	051b      	lsls	r3, r3, #20
 80076d6:	493f      	ldr	r1, [pc, #252]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	628b      	str	r3, [r1, #40]	; 0x28
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	025b      	lsls	r3, r3, #9
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	431a      	orrs	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	3b01      	subs	r3, #1
 80076f8:	041b      	lsls	r3, r3, #16
 80076fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076fe:	431a      	orrs	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	3b01      	subs	r3, #1
 8007706:	061b      	lsls	r3, r3, #24
 8007708:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800770c:	4931      	ldr	r1, [pc, #196]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 800770e:	4313      	orrs	r3, r2
 8007710:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007712:	4b30      	ldr	r3, [pc, #192]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 8007714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007716:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	492d      	ldr	r1, [pc, #180]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 8007720:	4313      	orrs	r3, r2
 8007722:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007724:	4b2b      	ldr	r3, [pc, #172]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	4928      	ldr	r1, [pc, #160]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 8007732:	4313      	orrs	r3, r2
 8007734:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007736:	4b27      	ldr	r3, [pc, #156]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 8007738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773a:	4a26      	ldr	r2, [pc, #152]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 800773c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007740:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007742:	4b24      	ldr	r3, [pc, #144]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 8007744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007746:	4b24      	ldr	r3, [pc, #144]	; (80077d8 <RCCEx_PLL3_Config+0x160>)
 8007748:	4013      	ands	r3, r2
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	69d2      	ldr	r2, [r2, #28]
 800774e:	00d2      	lsls	r2, r2, #3
 8007750:	4920      	ldr	r1, [pc, #128]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 8007752:	4313      	orrs	r3, r2
 8007754:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007756:	4b1f      	ldr	r3, [pc, #124]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 8007758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775a:	4a1e      	ldr	r2, [pc, #120]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 800775c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007760:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d106      	bne.n	8007776 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007768:	4b1a      	ldr	r3, [pc, #104]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 800776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776c:	4a19      	ldr	r2, [pc, #100]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 800776e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007772:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007774:	e00f      	b.n	8007796 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d106      	bne.n	800778a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800777c:	4b15      	ldr	r3, [pc, #84]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	4a14      	ldr	r2, [pc, #80]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 8007782:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007786:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007788:	e005      	b.n	8007796 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800778a:	4b12      	ldr	r3, [pc, #72]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 800778c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778e:	4a11      	ldr	r2, [pc, #68]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 8007790:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007794:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007796:	4b0f      	ldr	r3, [pc, #60]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a0e      	ldr	r2, [pc, #56]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 800779c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077a2:	f7fa fc87 	bl	80020b4 <HAL_GetTick>
 80077a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077a8:	e008      	b.n	80077bc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80077aa:	f7fa fc83 	bl	80020b4 <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d901      	bls.n	80077bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e006      	b.n	80077ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077bc:	4b05      	ldr	r3, [pc, #20]	; (80077d4 <RCCEx_PLL3_Config+0x15c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d0f0      	beq.n	80077aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	58024400 	.word	0x58024400
 80077d8:	ffff0007 	.word	0xffff0007

080077dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e049      	b.n	8007882 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d106      	bne.n	8007808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7f9 ffc0 	bl	8001788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3304      	adds	r3, #4
 8007818:	4619      	mov	r1, r3
 800781a:	4610      	mov	r0, r2
 800781c:	f000 fd7c 	bl	8008318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
	...

0800788c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b01      	cmp	r3, #1
 800789e:	d001      	beq.n	80078a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e054      	b.n	800794e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2202      	movs	r2, #2
 80078a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68da      	ldr	r2, [r3, #12]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f042 0201 	orr.w	r2, r2, #1
 80078ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a26      	ldr	r2, [pc, #152]	; (800795c <HAL_TIM_Base_Start_IT+0xd0>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d022      	beq.n	800790c <HAL_TIM_Base_Start_IT+0x80>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ce:	d01d      	beq.n	800790c <HAL_TIM_Base_Start_IT+0x80>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a22      	ldr	r2, [pc, #136]	; (8007960 <HAL_TIM_Base_Start_IT+0xd4>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d018      	beq.n	800790c <HAL_TIM_Base_Start_IT+0x80>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a21      	ldr	r2, [pc, #132]	; (8007964 <HAL_TIM_Base_Start_IT+0xd8>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d013      	beq.n	800790c <HAL_TIM_Base_Start_IT+0x80>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a1f      	ldr	r2, [pc, #124]	; (8007968 <HAL_TIM_Base_Start_IT+0xdc>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d00e      	beq.n	800790c <HAL_TIM_Base_Start_IT+0x80>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a1e      	ldr	r2, [pc, #120]	; (800796c <HAL_TIM_Base_Start_IT+0xe0>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d009      	beq.n	800790c <HAL_TIM_Base_Start_IT+0x80>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a1c      	ldr	r2, [pc, #112]	; (8007970 <HAL_TIM_Base_Start_IT+0xe4>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d004      	beq.n	800790c <HAL_TIM_Base_Start_IT+0x80>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a1b      	ldr	r2, [pc, #108]	; (8007974 <HAL_TIM_Base_Start_IT+0xe8>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d115      	bne.n	8007938 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689a      	ldr	r2, [r3, #8]
 8007912:	4b19      	ldr	r3, [pc, #100]	; (8007978 <HAL_TIM_Base_Start_IT+0xec>)
 8007914:	4013      	ands	r3, r2
 8007916:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b06      	cmp	r3, #6
 800791c:	d015      	beq.n	800794a <HAL_TIM_Base_Start_IT+0xbe>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007924:	d011      	beq.n	800794a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f042 0201 	orr.w	r2, r2, #1
 8007934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007936:	e008      	b.n	800794a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f042 0201 	orr.w	r2, r2, #1
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	e000      	b.n	800794c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800794a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	40010000 	.word	0x40010000
 8007960:	40000400 	.word	0x40000400
 8007964:	40000800 	.word	0x40000800
 8007968:	40000c00 	.word	0x40000c00
 800796c:	40010400 	.word	0x40010400
 8007970:	40001800 	.word	0x40001800
 8007974:	40014000 	.word	0x40014000
 8007978:	00010007 	.word	0x00010007

0800797c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e049      	b.n	8007a22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d106      	bne.n	80079a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f841 	bl	8007a2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	3304      	adds	r3, #4
 80079b8:	4619      	mov	r1, r3
 80079ba:	4610      	mov	r0, r2
 80079bc:	f000 fcac 	bl	8008318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a32:	bf00      	nop
 8007a34:	370c      	adds	r7, #12
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
	...

08007a40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d109      	bne.n	8007a64 <HAL_TIM_PWM_Start+0x24>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	bf14      	ite	ne
 8007a5c:	2301      	movne	r3, #1
 8007a5e:	2300      	moveq	r3, #0
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	e03c      	b.n	8007ade <HAL_TIM_PWM_Start+0x9e>
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2b04      	cmp	r3, #4
 8007a68:	d109      	bne.n	8007a7e <HAL_TIM_PWM_Start+0x3e>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	bf14      	ite	ne
 8007a76:	2301      	movne	r3, #1
 8007a78:	2300      	moveq	r3, #0
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	e02f      	b.n	8007ade <HAL_TIM_PWM_Start+0x9e>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b08      	cmp	r3, #8
 8007a82:	d109      	bne.n	8007a98 <HAL_TIM_PWM_Start+0x58>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	bf14      	ite	ne
 8007a90:	2301      	movne	r3, #1
 8007a92:	2300      	moveq	r3, #0
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	e022      	b.n	8007ade <HAL_TIM_PWM_Start+0x9e>
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2b0c      	cmp	r3, #12
 8007a9c:	d109      	bne.n	8007ab2 <HAL_TIM_PWM_Start+0x72>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	bf14      	ite	ne
 8007aaa:	2301      	movne	r3, #1
 8007aac:	2300      	moveq	r3, #0
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	e015      	b.n	8007ade <HAL_TIM_PWM_Start+0x9e>
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b10      	cmp	r3, #16
 8007ab6:	d109      	bne.n	8007acc <HAL_TIM_PWM_Start+0x8c>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	bf14      	ite	ne
 8007ac4:	2301      	movne	r3, #1
 8007ac6:	2300      	moveq	r3, #0
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	e008      	b.n	8007ade <HAL_TIM_PWM_Start+0x9e>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	bf14      	ite	ne
 8007ad8:	2301      	movne	r3, #1
 8007ada:	2300      	moveq	r3, #0
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e0a1      	b.n	8007c2a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d104      	bne.n	8007af6 <HAL_TIM_PWM_Start+0xb6>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007af4:	e023      	b.n	8007b3e <HAL_TIM_PWM_Start+0xfe>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b04      	cmp	r3, #4
 8007afa:	d104      	bne.n	8007b06 <HAL_TIM_PWM_Start+0xc6>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b04:	e01b      	b.n	8007b3e <HAL_TIM_PWM_Start+0xfe>
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	2b08      	cmp	r3, #8
 8007b0a:	d104      	bne.n	8007b16 <HAL_TIM_PWM_Start+0xd6>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b14:	e013      	b.n	8007b3e <HAL_TIM_PWM_Start+0xfe>
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	2b0c      	cmp	r3, #12
 8007b1a:	d104      	bne.n	8007b26 <HAL_TIM_PWM_Start+0xe6>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b24:	e00b      	b.n	8007b3e <HAL_TIM_PWM_Start+0xfe>
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	2b10      	cmp	r3, #16
 8007b2a:	d104      	bne.n	8007b36 <HAL_TIM_PWM_Start+0xf6>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b34:	e003      	b.n	8007b3e <HAL_TIM_PWM_Start+0xfe>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2202      	movs	r2, #2
 8007b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2201      	movs	r2, #1
 8007b44:	6839      	ldr	r1, [r7, #0]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 fff4 	bl	8008b34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a38      	ldr	r2, [pc, #224]	; (8007c34 <HAL_TIM_PWM_Start+0x1f4>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d013      	beq.n	8007b7e <HAL_TIM_PWM_Start+0x13e>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a37      	ldr	r2, [pc, #220]	; (8007c38 <HAL_TIM_PWM_Start+0x1f8>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d00e      	beq.n	8007b7e <HAL_TIM_PWM_Start+0x13e>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a35      	ldr	r2, [pc, #212]	; (8007c3c <HAL_TIM_PWM_Start+0x1fc>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d009      	beq.n	8007b7e <HAL_TIM_PWM_Start+0x13e>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a34      	ldr	r2, [pc, #208]	; (8007c40 <HAL_TIM_PWM_Start+0x200>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d004      	beq.n	8007b7e <HAL_TIM_PWM_Start+0x13e>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a32      	ldr	r2, [pc, #200]	; (8007c44 <HAL_TIM_PWM_Start+0x204>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d101      	bne.n	8007b82 <HAL_TIM_PWM_Start+0x142>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e000      	b.n	8007b84 <HAL_TIM_PWM_Start+0x144>
 8007b82:	2300      	movs	r3, #0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d007      	beq.n	8007b98 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a25      	ldr	r2, [pc, #148]	; (8007c34 <HAL_TIM_PWM_Start+0x1f4>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d022      	beq.n	8007be8 <HAL_TIM_PWM_Start+0x1a8>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007baa:	d01d      	beq.n	8007be8 <HAL_TIM_PWM_Start+0x1a8>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a25      	ldr	r2, [pc, #148]	; (8007c48 <HAL_TIM_PWM_Start+0x208>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d018      	beq.n	8007be8 <HAL_TIM_PWM_Start+0x1a8>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a24      	ldr	r2, [pc, #144]	; (8007c4c <HAL_TIM_PWM_Start+0x20c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d013      	beq.n	8007be8 <HAL_TIM_PWM_Start+0x1a8>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a22      	ldr	r2, [pc, #136]	; (8007c50 <HAL_TIM_PWM_Start+0x210>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d00e      	beq.n	8007be8 <HAL_TIM_PWM_Start+0x1a8>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a1a      	ldr	r2, [pc, #104]	; (8007c38 <HAL_TIM_PWM_Start+0x1f8>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d009      	beq.n	8007be8 <HAL_TIM_PWM_Start+0x1a8>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a1e      	ldr	r2, [pc, #120]	; (8007c54 <HAL_TIM_PWM_Start+0x214>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d004      	beq.n	8007be8 <HAL_TIM_PWM_Start+0x1a8>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a16      	ldr	r2, [pc, #88]	; (8007c3c <HAL_TIM_PWM_Start+0x1fc>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d115      	bne.n	8007c14 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689a      	ldr	r2, [r3, #8]
 8007bee:	4b1a      	ldr	r3, [pc, #104]	; (8007c58 <HAL_TIM_PWM_Start+0x218>)
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2b06      	cmp	r3, #6
 8007bf8:	d015      	beq.n	8007c26 <HAL_TIM_PWM_Start+0x1e6>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c00:	d011      	beq.n	8007c26 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f042 0201 	orr.w	r2, r2, #1
 8007c10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c12:	e008      	b.n	8007c26 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f042 0201 	orr.w	r2, r2, #1
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	e000      	b.n	8007c28 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	40010000 	.word	0x40010000
 8007c38:	40010400 	.word	0x40010400
 8007c3c:	40014000 	.word	0x40014000
 8007c40:	40014400 	.word	0x40014400
 8007c44:	40014800 	.word	0x40014800
 8007c48:	40000400 	.word	0x40000400
 8007c4c:	40000800 	.word	0x40000800
 8007c50:	40000c00 	.word	0x40000c00
 8007c54:	40001800 	.word	0x40001800
 8007c58:	00010007 	.word	0x00010007

08007c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d122      	bne.n	8007cb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	f003 0302 	and.w	r3, r3, #2
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d11b      	bne.n	8007cb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f06f 0202 	mvn.w	r2, #2
 8007c88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	f003 0303 	and.w	r3, r3, #3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fb1c 	bl	80082dc <HAL_TIM_IC_CaptureCallback>
 8007ca4:	e005      	b.n	8007cb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fb0e 	bl	80082c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fb1f 	bl	80082f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	f003 0304 	and.w	r3, r3, #4
 8007cc2:	2b04      	cmp	r3, #4
 8007cc4:	d122      	bne.n	8007d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	f003 0304 	and.w	r3, r3, #4
 8007cd0:	2b04      	cmp	r3, #4
 8007cd2:	d11b      	bne.n	8007d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f06f 0204 	mvn.w	r2, #4
 8007cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d003      	beq.n	8007cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 faf2 	bl	80082dc <HAL_TIM_IC_CaptureCallback>
 8007cf8:	e005      	b.n	8007d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fae4 	bl	80082c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 faf5 	bl	80082f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	f003 0308 	and.w	r3, r3, #8
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d122      	bne.n	8007d60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	f003 0308 	and.w	r3, r3, #8
 8007d24:	2b08      	cmp	r3, #8
 8007d26:	d11b      	bne.n	8007d60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f06f 0208 	mvn.w	r2, #8
 8007d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2204      	movs	r2, #4
 8007d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	69db      	ldr	r3, [r3, #28]
 8007d3e:	f003 0303 	and.w	r3, r3, #3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d003      	beq.n	8007d4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fac8 	bl	80082dc <HAL_TIM_IC_CaptureCallback>
 8007d4c:	e005      	b.n	8007d5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 faba 	bl	80082c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 facb 	bl	80082f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	f003 0310 	and.w	r3, r3, #16
 8007d6a:	2b10      	cmp	r3, #16
 8007d6c:	d122      	bne.n	8007db4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	f003 0310 	and.w	r3, r3, #16
 8007d78:	2b10      	cmp	r3, #16
 8007d7a:	d11b      	bne.n	8007db4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f06f 0210 	mvn.w	r2, #16
 8007d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2208      	movs	r2, #8
 8007d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	69db      	ldr	r3, [r3, #28]
 8007d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fa9e 	bl	80082dc <HAL_TIM_IC_CaptureCallback>
 8007da0:	e005      	b.n	8007dae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fa90 	bl	80082c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 faa1 	bl	80082f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d10e      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d107      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f06f 0201 	mvn.w	r2, #1
 8007dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fa6a 	bl	80082b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dea:	2b80      	cmp	r3, #128	; 0x80
 8007dec:	d10e      	bne.n	8007e0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df8:	2b80      	cmp	r3, #128	; 0x80
 8007dfa:	d107      	bne.n	8007e0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 ff52 	bl	8008cb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e1a:	d10e      	bne.n	8007e3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e26:	2b80      	cmp	r3, #128	; 0x80
 8007e28:	d107      	bne.n	8007e3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 ff45 	bl	8008cc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e44:	2b40      	cmp	r3, #64	; 0x40
 8007e46:	d10e      	bne.n	8007e66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e52:	2b40      	cmp	r3, #64	; 0x40
 8007e54:	d107      	bne.n	8007e66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fa4f 	bl	8008304 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	f003 0320 	and.w	r3, r3, #32
 8007e70:	2b20      	cmp	r3, #32
 8007e72:	d10e      	bne.n	8007e92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f003 0320 	and.w	r3, r3, #32
 8007e7e:	2b20      	cmp	r3, #32
 8007e80:	d107      	bne.n	8007e92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f06f 0220 	mvn.w	r2, #32
 8007e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 ff05 	bl	8008c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
	...

08007e9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d101      	bne.n	8007eba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	e0ff      	b.n	80080ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b14      	cmp	r3, #20
 8007ec6:	f200 80f0 	bhi.w	80080aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007eca:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed0:	08007f25 	.word	0x08007f25
 8007ed4:	080080ab 	.word	0x080080ab
 8007ed8:	080080ab 	.word	0x080080ab
 8007edc:	080080ab 	.word	0x080080ab
 8007ee0:	08007f65 	.word	0x08007f65
 8007ee4:	080080ab 	.word	0x080080ab
 8007ee8:	080080ab 	.word	0x080080ab
 8007eec:	080080ab 	.word	0x080080ab
 8007ef0:	08007fa7 	.word	0x08007fa7
 8007ef4:	080080ab 	.word	0x080080ab
 8007ef8:	080080ab 	.word	0x080080ab
 8007efc:	080080ab 	.word	0x080080ab
 8007f00:	08007fe7 	.word	0x08007fe7
 8007f04:	080080ab 	.word	0x080080ab
 8007f08:	080080ab 	.word	0x080080ab
 8007f0c:	080080ab 	.word	0x080080ab
 8007f10:	08008029 	.word	0x08008029
 8007f14:	080080ab 	.word	0x080080ab
 8007f18:	080080ab 	.word	0x080080ab
 8007f1c:	080080ab 	.word	0x080080ab
 8007f20:	08008069 	.word	0x08008069
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68b9      	ldr	r1, [r7, #8]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 fa8e 	bl	800844c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	699a      	ldr	r2, [r3, #24]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f042 0208 	orr.w	r2, r2, #8
 8007f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	699a      	ldr	r2, [r3, #24]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f022 0204 	bic.w	r2, r2, #4
 8007f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6999      	ldr	r1, [r3, #24]
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	691a      	ldr	r2, [r3, #16]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	619a      	str	r2, [r3, #24]
      break;
 8007f62:	e0a5      	b.n	80080b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68b9      	ldr	r1, [r7, #8]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 fafe 	bl	800856c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	699a      	ldr	r2, [r3, #24]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	699a      	ldr	r2, [r3, #24]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6999      	ldr	r1, [r3, #24]
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	021a      	lsls	r2, r3, #8
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	619a      	str	r2, [r3, #24]
      break;
 8007fa4:	e084      	b.n	80080b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68b9      	ldr	r1, [r7, #8]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 fb67 	bl	8008680 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	69da      	ldr	r2, [r3, #28]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f042 0208 	orr.w	r2, r2, #8
 8007fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	69da      	ldr	r2, [r3, #28]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 0204 	bic.w	r2, r2, #4
 8007fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	69d9      	ldr	r1, [r3, #28]
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	691a      	ldr	r2, [r3, #16]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	61da      	str	r2, [r3, #28]
      break;
 8007fe4:	e064      	b.n	80080b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68b9      	ldr	r1, [r7, #8]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 fbcf 	bl	8008790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	69da      	ldr	r2, [r3, #28]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	69da      	ldr	r2, [r3, #28]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69d9      	ldr	r1, [r3, #28]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	021a      	lsls	r2, r3, #8
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	430a      	orrs	r2, r1
 8008024:	61da      	str	r2, [r3, #28]
      break;
 8008026:	e043      	b.n	80080b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68b9      	ldr	r1, [r7, #8]
 800802e:	4618      	mov	r0, r3
 8008030:	f000 fc18 	bl	8008864 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f042 0208 	orr.w	r2, r2, #8
 8008042:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 0204 	bic.w	r2, r2, #4
 8008052:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	691a      	ldr	r2, [r3, #16]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008066:	e023      	b.n	80080b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68b9      	ldr	r1, [r7, #8]
 800806e:	4618      	mov	r0, r3
 8008070:	f000 fc5c 	bl	800892c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008082:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008092:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	021a      	lsls	r2, r3, #8
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	430a      	orrs	r2, r1
 80080a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80080a8:	e002      	b.n	80080b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	75fb      	strb	r3, [r7, #23]
      break;
 80080ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop

080080c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d101      	bne.n	80080e0 <HAL_TIM_ConfigClockSource+0x1c>
 80080dc:	2302      	movs	r3, #2
 80080de:	e0dc      	b.n	800829a <HAL_TIM_ConfigClockSource+0x1d6>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2202      	movs	r2, #2
 80080ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	4b6a      	ldr	r3, [pc, #424]	; (80082a4 <HAL_TIM_ConfigClockSource+0x1e0>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008106:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a64      	ldr	r2, [pc, #400]	; (80082a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008116:	4293      	cmp	r3, r2
 8008118:	f000 80a9 	beq.w	800826e <HAL_TIM_ConfigClockSource+0x1aa>
 800811c:	4a62      	ldr	r2, [pc, #392]	; (80082a8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800811e:	4293      	cmp	r3, r2
 8008120:	f200 80ae 	bhi.w	8008280 <HAL_TIM_ConfigClockSource+0x1bc>
 8008124:	4a61      	ldr	r2, [pc, #388]	; (80082ac <HAL_TIM_ConfigClockSource+0x1e8>)
 8008126:	4293      	cmp	r3, r2
 8008128:	f000 80a1 	beq.w	800826e <HAL_TIM_ConfigClockSource+0x1aa>
 800812c:	4a5f      	ldr	r2, [pc, #380]	; (80082ac <HAL_TIM_ConfigClockSource+0x1e8>)
 800812e:	4293      	cmp	r3, r2
 8008130:	f200 80a6 	bhi.w	8008280 <HAL_TIM_ConfigClockSource+0x1bc>
 8008134:	4a5e      	ldr	r2, [pc, #376]	; (80082b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008136:	4293      	cmp	r3, r2
 8008138:	f000 8099 	beq.w	800826e <HAL_TIM_ConfigClockSource+0x1aa>
 800813c:	4a5c      	ldr	r2, [pc, #368]	; (80082b0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800813e:	4293      	cmp	r3, r2
 8008140:	f200 809e 	bhi.w	8008280 <HAL_TIM_ConfigClockSource+0x1bc>
 8008144:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008148:	f000 8091 	beq.w	800826e <HAL_TIM_ConfigClockSource+0x1aa>
 800814c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008150:	f200 8096 	bhi.w	8008280 <HAL_TIM_ConfigClockSource+0x1bc>
 8008154:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008158:	f000 8089 	beq.w	800826e <HAL_TIM_ConfigClockSource+0x1aa>
 800815c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008160:	f200 808e 	bhi.w	8008280 <HAL_TIM_ConfigClockSource+0x1bc>
 8008164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008168:	d03e      	beq.n	80081e8 <HAL_TIM_ConfigClockSource+0x124>
 800816a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800816e:	f200 8087 	bhi.w	8008280 <HAL_TIM_ConfigClockSource+0x1bc>
 8008172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008176:	f000 8086 	beq.w	8008286 <HAL_TIM_ConfigClockSource+0x1c2>
 800817a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800817e:	d87f      	bhi.n	8008280 <HAL_TIM_ConfigClockSource+0x1bc>
 8008180:	2b70      	cmp	r3, #112	; 0x70
 8008182:	d01a      	beq.n	80081ba <HAL_TIM_ConfigClockSource+0xf6>
 8008184:	2b70      	cmp	r3, #112	; 0x70
 8008186:	d87b      	bhi.n	8008280 <HAL_TIM_ConfigClockSource+0x1bc>
 8008188:	2b60      	cmp	r3, #96	; 0x60
 800818a:	d050      	beq.n	800822e <HAL_TIM_ConfigClockSource+0x16a>
 800818c:	2b60      	cmp	r3, #96	; 0x60
 800818e:	d877      	bhi.n	8008280 <HAL_TIM_ConfigClockSource+0x1bc>
 8008190:	2b50      	cmp	r3, #80	; 0x50
 8008192:	d03c      	beq.n	800820e <HAL_TIM_ConfigClockSource+0x14a>
 8008194:	2b50      	cmp	r3, #80	; 0x50
 8008196:	d873      	bhi.n	8008280 <HAL_TIM_ConfigClockSource+0x1bc>
 8008198:	2b40      	cmp	r3, #64	; 0x40
 800819a:	d058      	beq.n	800824e <HAL_TIM_ConfigClockSource+0x18a>
 800819c:	2b40      	cmp	r3, #64	; 0x40
 800819e:	d86f      	bhi.n	8008280 <HAL_TIM_ConfigClockSource+0x1bc>
 80081a0:	2b30      	cmp	r3, #48	; 0x30
 80081a2:	d064      	beq.n	800826e <HAL_TIM_ConfigClockSource+0x1aa>
 80081a4:	2b30      	cmp	r3, #48	; 0x30
 80081a6:	d86b      	bhi.n	8008280 <HAL_TIM_ConfigClockSource+0x1bc>
 80081a8:	2b20      	cmp	r3, #32
 80081aa:	d060      	beq.n	800826e <HAL_TIM_ConfigClockSource+0x1aa>
 80081ac:	2b20      	cmp	r3, #32
 80081ae:	d867      	bhi.n	8008280 <HAL_TIM_ConfigClockSource+0x1bc>
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d05c      	beq.n	800826e <HAL_TIM_ConfigClockSource+0x1aa>
 80081b4:	2b10      	cmp	r3, #16
 80081b6:	d05a      	beq.n	800826e <HAL_TIM_ConfigClockSource+0x1aa>
 80081b8:	e062      	b.n	8008280 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6818      	ldr	r0, [r3, #0]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	6899      	ldr	r1, [r3, #8]
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	f000 fc93 	bl	8008af4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80081dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	609a      	str	r2, [r3, #8]
      break;
 80081e6:	e04f      	b.n	8008288 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6818      	ldr	r0, [r3, #0]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	6899      	ldr	r1, [r3, #8]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f000 fc7c 	bl	8008af4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689a      	ldr	r2, [r3, #8]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800820a:	609a      	str	r2, [r3, #8]
      break;
 800820c:	e03c      	b.n	8008288 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6818      	ldr	r0, [r3, #0]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	6859      	ldr	r1, [r3, #4]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	461a      	mov	r2, r3
 800821c:	f000 fbec 	bl	80089f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2150      	movs	r1, #80	; 0x50
 8008226:	4618      	mov	r0, r3
 8008228:	f000 fc46 	bl	8008ab8 <TIM_ITRx_SetConfig>
      break;
 800822c:	e02c      	b.n	8008288 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	6859      	ldr	r1, [r3, #4]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	461a      	mov	r2, r3
 800823c:	f000 fc0b 	bl	8008a56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2160      	movs	r1, #96	; 0x60
 8008246:	4618      	mov	r0, r3
 8008248:	f000 fc36 	bl	8008ab8 <TIM_ITRx_SetConfig>
      break;
 800824c:	e01c      	b.n	8008288 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6818      	ldr	r0, [r3, #0]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	6859      	ldr	r1, [r3, #4]
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	461a      	mov	r2, r3
 800825c:	f000 fbcc 	bl	80089f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2140      	movs	r1, #64	; 0x40
 8008266:	4618      	mov	r0, r3
 8008268:	f000 fc26 	bl	8008ab8 <TIM_ITRx_SetConfig>
      break;
 800826c:	e00c      	b.n	8008288 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4619      	mov	r1, r3
 8008278:	4610      	mov	r0, r2
 800827a:	f000 fc1d 	bl	8008ab8 <TIM_ITRx_SetConfig>
      break;
 800827e:	e003      	b.n	8008288 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	73fb      	strb	r3, [r7, #15]
      break;
 8008284:	e000      	b.n	8008288 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008286:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008298:	7bfb      	ldrb	r3, [r7, #15]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	ffceff88 	.word	0xffceff88
 80082a8:	00100040 	.word	0x00100040
 80082ac:	00100030 	.word	0x00100030
 80082b0:	00100020 	.word	0x00100020

080082b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a40      	ldr	r2, [pc, #256]	; (800842c <TIM_Base_SetConfig+0x114>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d013      	beq.n	8008358 <TIM_Base_SetConfig+0x40>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008336:	d00f      	beq.n	8008358 <TIM_Base_SetConfig+0x40>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a3d      	ldr	r2, [pc, #244]	; (8008430 <TIM_Base_SetConfig+0x118>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d00b      	beq.n	8008358 <TIM_Base_SetConfig+0x40>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a3c      	ldr	r2, [pc, #240]	; (8008434 <TIM_Base_SetConfig+0x11c>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d007      	beq.n	8008358 <TIM_Base_SetConfig+0x40>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a3b      	ldr	r2, [pc, #236]	; (8008438 <TIM_Base_SetConfig+0x120>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d003      	beq.n	8008358 <TIM_Base_SetConfig+0x40>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a3a      	ldr	r2, [pc, #232]	; (800843c <TIM_Base_SetConfig+0x124>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d108      	bne.n	800836a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800835e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	4313      	orrs	r3, r2
 8008368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a2f      	ldr	r2, [pc, #188]	; (800842c <TIM_Base_SetConfig+0x114>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d01f      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008378:	d01b      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a2c      	ldr	r2, [pc, #176]	; (8008430 <TIM_Base_SetConfig+0x118>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d017      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a2b      	ldr	r2, [pc, #172]	; (8008434 <TIM_Base_SetConfig+0x11c>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d013      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a2a      	ldr	r2, [pc, #168]	; (8008438 <TIM_Base_SetConfig+0x120>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d00f      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a29      	ldr	r2, [pc, #164]	; (800843c <TIM_Base_SetConfig+0x124>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d00b      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a28      	ldr	r2, [pc, #160]	; (8008440 <TIM_Base_SetConfig+0x128>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d007      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a27      	ldr	r2, [pc, #156]	; (8008444 <TIM_Base_SetConfig+0x12c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d003      	beq.n	80083b2 <TIM_Base_SetConfig+0x9a>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a26      	ldr	r2, [pc, #152]	; (8008448 <TIM_Base_SetConfig+0x130>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d108      	bne.n	80083c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	689a      	ldr	r2, [r3, #8]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a10      	ldr	r2, [pc, #64]	; (800842c <TIM_Base_SetConfig+0x114>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d00f      	beq.n	8008410 <TIM_Base_SetConfig+0xf8>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a12      	ldr	r2, [pc, #72]	; (800843c <TIM_Base_SetConfig+0x124>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d00b      	beq.n	8008410 <TIM_Base_SetConfig+0xf8>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a11      	ldr	r2, [pc, #68]	; (8008440 <TIM_Base_SetConfig+0x128>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d007      	beq.n	8008410 <TIM_Base_SetConfig+0xf8>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a10      	ldr	r2, [pc, #64]	; (8008444 <TIM_Base_SetConfig+0x12c>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d003      	beq.n	8008410 <TIM_Base_SetConfig+0xf8>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a0f      	ldr	r2, [pc, #60]	; (8008448 <TIM_Base_SetConfig+0x130>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d103      	bne.n	8008418 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	691a      	ldr	r2, [r3, #16]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	615a      	str	r2, [r3, #20]
}
 800841e:	bf00      	nop
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	40010000 	.word	0x40010000
 8008430:	40000400 	.word	0x40000400
 8008434:	40000800 	.word	0x40000800
 8008438:	40000c00 	.word	0x40000c00
 800843c:	40010400 	.word	0x40010400
 8008440:	40014000 	.word	0x40014000
 8008444:	40014400 	.word	0x40014400
 8008448:	40014800 	.word	0x40014800

0800844c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800844c:	b480      	push	{r7}
 800844e:	b087      	sub	sp, #28
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	f023 0201 	bic.w	r2, r3, #1
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	4b37      	ldr	r3, [pc, #220]	; (8008554 <TIM_OC1_SetConfig+0x108>)
 8008478:	4013      	ands	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f023 0303 	bic.w	r3, r3, #3
 8008482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4313      	orrs	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f023 0302 	bic.w	r3, r3, #2
 8008494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	4313      	orrs	r3, r2
 800849e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a2d      	ldr	r2, [pc, #180]	; (8008558 <TIM_OC1_SetConfig+0x10c>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d00f      	beq.n	80084c8 <TIM_OC1_SetConfig+0x7c>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a2c      	ldr	r2, [pc, #176]	; (800855c <TIM_OC1_SetConfig+0x110>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d00b      	beq.n	80084c8 <TIM_OC1_SetConfig+0x7c>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a2b      	ldr	r2, [pc, #172]	; (8008560 <TIM_OC1_SetConfig+0x114>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d007      	beq.n	80084c8 <TIM_OC1_SetConfig+0x7c>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a2a      	ldr	r2, [pc, #168]	; (8008564 <TIM_OC1_SetConfig+0x118>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d003      	beq.n	80084c8 <TIM_OC1_SetConfig+0x7c>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a29      	ldr	r2, [pc, #164]	; (8008568 <TIM_OC1_SetConfig+0x11c>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d10c      	bne.n	80084e2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f023 0308 	bic.w	r3, r3, #8
 80084ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f023 0304 	bic.w	r3, r3, #4
 80084e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a1c      	ldr	r2, [pc, #112]	; (8008558 <TIM_OC1_SetConfig+0x10c>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d00f      	beq.n	800850a <TIM_OC1_SetConfig+0xbe>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a1b      	ldr	r2, [pc, #108]	; (800855c <TIM_OC1_SetConfig+0x110>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d00b      	beq.n	800850a <TIM_OC1_SetConfig+0xbe>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a1a      	ldr	r2, [pc, #104]	; (8008560 <TIM_OC1_SetConfig+0x114>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d007      	beq.n	800850a <TIM_OC1_SetConfig+0xbe>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a19      	ldr	r2, [pc, #100]	; (8008564 <TIM_OC1_SetConfig+0x118>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d003      	beq.n	800850a <TIM_OC1_SetConfig+0xbe>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a18      	ldr	r2, [pc, #96]	; (8008568 <TIM_OC1_SetConfig+0x11c>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d111      	bne.n	800852e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	4313      	orrs	r3, r2
 8008522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	4313      	orrs	r3, r2
 800852c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	621a      	str	r2, [r3, #32]
}
 8008548:	bf00      	nop
 800854a:	371c      	adds	r7, #28
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	fffeff8f 	.word	0xfffeff8f
 8008558:	40010000 	.word	0x40010000
 800855c:	40010400 	.word	0x40010400
 8008560:	40014000 	.word	0x40014000
 8008564:	40014400 	.word	0x40014400
 8008568:	40014800 	.word	0x40014800

0800856c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	f023 0210 	bic.w	r2, r3, #16
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	4b34      	ldr	r3, [pc, #208]	; (8008668 <TIM_OC2_SetConfig+0xfc>)
 8008598:	4013      	ands	r3, r2
 800859a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	021b      	lsls	r3, r3, #8
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	f023 0320 	bic.w	r3, r3, #32
 80085b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	011b      	lsls	r3, r3, #4
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a29      	ldr	r2, [pc, #164]	; (800866c <TIM_OC2_SetConfig+0x100>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d003      	beq.n	80085d4 <TIM_OC2_SetConfig+0x68>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a28      	ldr	r2, [pc, #160]	; (8008670 <TIM_OC2_SetConfig+0x104>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d10d      	bne.n	80085f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	011b      	lsls	r3, r3, #4
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a1e      	ldr	r2, [pc, #120]	; (800866c <TIM_OC2_SetConfig+0x100>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d00f      	beq.n	8008618 <TIM_OC2_SetConfig+0xac>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a1d      	ldr	r2, [pc, #116]	; (8008670 <TIM_OC2_SetConfig+0x104>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d00b      	beq.n	8008618 <TIM_OC2_SetConfig+0xac>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a1c      	ldr	r2, [pc, #112]	; (8008674 <TIM_OC2_SetConfig+0x108>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d007      	beq.n	8008618 <TIM_OC2_SetConfig+0xac>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a1b      	ldr	r2, [pc, #108]	; (8008678 <TIM_OC2_SetConfig+0x10c>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d003      	beq.n	8008618 <TIM_OC2_SetConfig+0xac>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a1a      	ldr	r2, [pc, #104]	; (800867c <TIM_OC2_SetConfig+0x110>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d113      	bne.n	8008640 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800861e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008626:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	693a      	ldr	r2, [r7, #16]
 8008630:	4313      	orrs	r3, r2
 8008632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	4313      	orrs	r3, r2
 800863e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	621a      	str	r2, [r3, #32]
}
 800865a:	bf00      	nop
 800865c:	371c      	adds	r7, #28
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	feff8fff 	.word	0xfeff8fff
 800866c:	40010000 	.word	0x40010000
 8008670:	40010400 	.word	0x40010400
 8008674:	40014000 	.word	0x40014000
 8008678:	40014400 	.word	0x40014400
 800867c:	40014800 	.word	0x40014800

08008680 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	69db      	ldr	r3, [r3, #28]
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	4b33      	ldr	r3, [pc, #204]	; (8008778 <TIM_OC3_SetConfig+0xf8>)
 80086ac:	4013      	ands	r3, r2
 80086ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f023 0303 	bic.w	r3, r3, #3
 80086b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	4313      	orrs	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	021b      	lsls	r3, r3, #8
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a28      	ldr	r2, [pc, #160]	; (800877c <TIM_OC3_SetConfig+0xfc>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d003      	beq.n	80086e6 <TIM_OC3_SetConfig+0x66>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a27      	ldr	r2, [pc, #156]	; (8008780 <TIM_OC3_SetConfig+0x100>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d10d      	bne.n	8008702 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	021b      	lsls	r3, r3, #8
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a1d      	ldr	r2, [pc, #116]	; (800877c <TIM_OC3_SetConfig+0xfc>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d00f      	beq.n	800872a <TIM_OC3_SetConfig+0xaa>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a1c      	ldr	r2, [pc, #112]	; (8008780 <TIM_OC3_SetConfig+0x100>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d00b      	beq.n	800872a <TIM_OC3_SetConfig+0xaa>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a1b      	ldr	r2, [pc, #108]	; (8008784 <TIM_OC3_SetConfig+0x104>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d007      	beq.n	800872a <TIM_OC3_SetConfig+0xaa>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a1a      	ldr	r2, [pc, #104]	; (8008788 <TIM_OC3_SetConfig+0x108>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d003      	beq.n	800872a <TIM_OC3_SetConfig+0xaa>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a19      	ldr	r2, [pc, #100]	; (800878c <TIM_OC3_SetConfig+0x10c>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d113      	bne.n	8008752 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	4313      	orrs	r3, r2
 8008744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	011b      	lsls	r3, r3, #4
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	4313      	orrs	r3, r2
 8008750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	621a      	str	r2, [r3, #32]
}
 800876c:	bf00      	nop
 800876e:	371c      	adds	r7, #28
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	fffeff8f 	.word	0xfffeff8f
 800877c:	40010000 	.word	0x40010000
 8008780:	40010400 	.word	0x40010400
 8008784:	40014000 	.word	0x40014000
 8008788:	40014400 	.word	0x40014400
 800878c:	40014800 	.word	0x40014800

08008790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008790:	b480      	push	{r7}
 8008792:	b087      	sub	sp, #28
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a1b      	ldr	r3, [r3, #32]
 80087aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	4b24      	ldr	r3, [pc, #144]	; (800884c <TIM_OC4_SetConfig+0xbc>)
 80087bc:	4013      	ands	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	021b      	lsls	r3, r3, #8
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	031b      	lsls	r3, r3, #12
 80087e2:	693a      	ldr	r2, [r7, #16]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a19      	ldr	r2, [pc, #100]	; (8008850 <TIM_OC4_SetConfig+0xc0>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d00f      	beq.n	8008810 <TIM_OC4_SetConfig+0x80>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a18      	ldr	r2, [pc, #96]	; (8008854 <TIM_OC4_SetConfig+0xc4>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d00b      	beq.n	8008810 <TIM_OC4_SetConfig+0x80>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a17      	ldr	r2, [pc, #92]	; (8008858 <TIM_OC4_SetConfig+0xc8>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d007      	beq.n	8008810 <TIM_OC4_SetConfig+0x80>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a16      	ldr	r2, [pc, #88]	; (800885c <TIM_OC4_SetConfig+0xcc>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d003      	beq.n	8008810 <TIM_OC4_SetConfig+0x80>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a15      	ldr	r2, [pc, #84]	; (8008860 <TIM_OC4_SetConfig+0xd0>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d109      	bne.n	8008824 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008816:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	695b      	ldr	r3, [r3, #20]
 800881c:	019b      	lsls	r3, r3, #6
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	4313      	orrs	r3, r2
 8008822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	621a      	str	r2, [r3, #32]
}
 800883e:	bf00      	nop
 8008840:	371c      	adds	r7, #28
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	feff8fff 	.word	0xfeff8fff
 8008850:	40010000 	.word	0x40010000
 8008854:	40010400 	.word	0x40010400
 8008858:	40014000 	.word	0x40014000
 800885c:	40014400 	.word	0x40014400
 8008860:	40014800 	.word	0x40014800

08008864 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008864:	b480      	push	{r7}
 8008866:	b087      	sub	sp, #28
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	4b21      	ldr	r3, [pc, #132]	; (8008914 <TIM_OC5_SetConfig+0xb0>)
 8008890:	4013      	ands	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	4313      	orrs	r3, r2
 800889c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80088a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	041b      	lsls	r3, r3, #16
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a18      	ldr	r2, [pc, #96]	; (8008918 <TIM_OC5_SetConfig+0xb4>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d00f      	beq.n	80088da <TIM_OC5_SetConfig+0x76>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a17      	ldr	r2, [pc, #92]	; (800891c <TIM_OC5_SetConfig+0xb8>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d00b      	beq.n	80088da <TIM_OC5_SetConfig+0x76>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a16      	ldr	r2, [pc, #88]	; (8008920 <TIM_OC5_SetConfig+0xbc>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d007      	beq.n	80088da <TIM_OC5_SetConfig+0x76>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a15      	ldr	r2, [pc, #84]	; (8008924 <TIM_OC5_SetConfig+0xc0>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d003      	beq.n	80088da <TIM_OC5_SetConfig+0x76>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a14      	ldr	r2, [pc, #80]	; (8008928 <TIM_OC5_SetConfig+0xc4>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d109      	bne.n	80088ee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	021b      	lsls	r3, r3, #8
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	621a      	str	r2, [r3, #32]
}
 8008908:	bf00      	nop
 800890a:	371c      	adds	r7, #28
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr
 8008914:	fffeff8f 	.word	0xfffeff8f
 8008918:	40010000 	.word	0x40010000
 800891c:	40010400 	.word	0x40010400
 8008920:	40014000 	.word	0x40014000
 8008924:	40014400 	.word	0x40014400
 8008928:	40014800 	.word	0x40014800

0800892c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800892c:	b480      	push	{r7}
 800892e:	b087      	sub	sp, #28
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a1b      	ldr	r3, [r3, #32]
 8008946:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	4b22      	ldr	r3, [pc, #136]	; (80089e0 <TIM_OC6_SetConfig+0xb4>)
 8008958:	4013      	ands	r3, r2
 800895a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	021b      	lsls	r3, r3, #8
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	4313      	orrs	r3, r2
 8008966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800896e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	051b      	lsls	r3, r3, #20
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	4313      	orrs	r3, r2
 800897a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a19      	ldr	r2, [pc, #100]	; (80089e4 <TIM_OC6_SetConfig+0xb8>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d00f      	beq.n	80089a4 <TIM_OC6_SetConfig+0x78>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a18      	ldr	r2, [pc, #96]	; (80089e8 <TIM_OC6_SetConfig+0xbc>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d00b      	beq.n	80089a4 <TIM_OC6_SetConfig+0x78>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a17      	ldr	r2, [pc, #92]	; (80089ec <TIM_OC6_SetConfig+0xc0>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d007      	beq.n	80089a4 <TIM_OC6_SetConfig+0x78>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a16      	ldr	r2, [pc, #88]	; (80089f0 <TIM_OC6_SetConfig+0xc4>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d003      	beq.n	80089a4 <TIM_OC6_SetConfig+0x78>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a15      	ldr	r2, [pc, #84]	; (80089f4 <TIM_OC6_SetConfig+0xc8>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d109      	bne.n	80089b8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	695b      	ldr	r3, [r3, #20]
 80089b0:	029b      	lsls	r3, r3, #10
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	685a      	ldr	r2, [r3, #4]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	693a      	ldr	r2, [r7, #16]
 80089d0:	621a      	str	r2, [r3, #32]
}
 80089d2:	bf00      	nop
 80089d4:	371c      	adds	r7, #28
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	feff8fff 	.word	0xfeff8fff
 80089e4:	40010000 	.word	0x40010000
 80089e8:	40010400 	.word	0x40010400
 80089ec:	40014000 	.word	0x40014000
 80089f0:	40014400 	.word	0x40014400
 80089f4:	40014800 	.word	0x40014800

080089f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6a1b      	ldr	r3, [r3, #32]
 8008a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	f023 0201 	bic.w	r2, r3, #1
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	011b      	lsls	r3, r3, #4
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	f023 030a 	bic.w	r3, r3, #10
 8008a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	621a      	str	r2, [r3, #32]
}
 8008a4a:	bf00      	nop
 8008a4c:	371c      	adds	r7, #28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b087      	sub	sp, #28
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	f023 0210 	bic.w	r2, r3, #16
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	031b      	lsls	r3, r3, #12
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	011b      	lsls	r3, r3, #4
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	621a      	str	r2, [r3, #32]
}
 8008aaa:	bf00      	nop
 8008aac:	371c      	adds	r7, #28
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
	...

08008ab8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	4b09      	ldr	r3, [pc, #36]	; (8008af0 <TIM_ITRx_SetConfig+0x38>)
 8008acc:	4013      	ands	r3, r2
 8008ace:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ad0:	683a      	ldr	r2, [r7, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	f043 0307 	orr.w	r3, r3, #7
 8008ada:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	609a      	str	r2, [r3, #8]
}
 8008ae2:	bf00      	nop
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	ffcfff8f 	.word	0xffcfff8f

08008af4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b087      	sub	sp, #28
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
 8008b00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	021a      	lsls	r2, r3, #8
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	431a      	orrs	r2, r3
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	609a      	str	r2, [r3, #8]
}
 8008b28:	bf00      	nop
 8008b2a:	371c      	adds	r7, #28
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b087      	sub	sp, #28
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	f003 031f 	and.w	r3, r3, #31
 8008b46:	2201      	movs	r2, #1
 8008b48:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6a1a      	ldr	r2, [r3, #32]
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	43db      	mvns	r3, r3
 8008b56:	401a      	ands	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6a1a      	ldr	r2, [r3, #32]
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	f003 031f 	and.w	r3, r3, #31
 8008b66:	6879      	ldr	r1, [r7, #4]
 8008b68:	fa01 f303 	lsl.w	r3, r1, r3
 8008b6c:	431a      	orrs	r2, r3
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	621a      	str	r2, [r3, #32]
}
 8008b72:	bf00      	nop
 8008b74:	371c      	adds	r7, #28
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
	...

08008b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d101      	bne.n	8008b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b94:	2302      	movs	r3, #2
 8008b96:	e06d      	b.n	8008c74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a30      	ldr	r2, [pc, #192]	; (8008c80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d004      	beq.n	8008bcc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a2f      	ldr	r2, [pc, #188]	; (8008c84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d108      	bne.n	8008bde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008bd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008be4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a20      	ldr	r2, [pc, #128]	; (8008c80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d022      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c0a:	d01d      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a1d      	ldr	r2, [pc, #116]	; (8008c88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d018      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a1c      	ldr	r2, [pc, #112]	; (8008c8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d013      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a1a      	ldr	r2, [pc, #104]	; (8008c90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d00e      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a15      	ldr	r2, [pc, #84]	; (8008c84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d009      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a16      	ldr	r2, [pc, #88]	; (8008c94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d004      	beq.n	8008c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a15      	ldr	r2, [pc, #84]	; (8008c98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d10c      	bne.n	8008c62 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	40010000 	.word	0x40010000
 8008c84:	40010400 	.word	0x40010400
 8008c88:	40000400 	.word	0x40000400
 8008c8c:	40000800 	.word	0x40000800
 8008c90:	40000c00 	.word	0x40000c00
 8008c94:	40001800 	.word	0x40001800
 8008c98:	40014000 	.word	0x40014000

08008c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ca4:	bf00      	nop
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d101      	bne.n	8008cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e042      	b.n	8008d70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d106      	bne.n	8008d02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7f8 fef7 	bl	8001af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2224      	movs	r2, #36	; 0x24
 8008d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f022 0201 	bic.w	r2, r2, #1
 8008d18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fd74 	bl	8009808 <UART_SetConfig>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d101      	bne.n	8008d2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e022      	b.n	8008d70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f001 fbd4 	bl	800a4e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	685a      	ldr	r2, [r3, #4]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	689a      	ldr	r2, [r3, #8]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f042 0201 	orr.w	r2, r2, #1
 8008d66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f001 fc5b 	bl	800a624 <UART_CheckIdleState>
 8008d6e:	4603      	mov	r3, r0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b08a      	sub	sp, #40	; 0x28
 8008d7c:	af02      	add	r7, sp, #8
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	603b      	str	r3, [r7, #0]
 8008d84:	4613      	mov	r3, r2
 8008d86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d8e:	2b20      	cmp	r3, #32
 8008d90:	d17b      	bne.n	8008e8a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d002      	beq.n	8008d9e <HAL_UART_Transmit+0x26>
 8008d98:	88fb      	ldrh	r3, [r7, #6]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d101      	bne.n	8008da2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e074      	b.n	8008e8c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2221      	movs	r2, #33	; 0x21
 8008dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008db2:	f7f9 f97f 	bl	80020b4 <HAL_GetTick>
 8008db6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	88fa      	ldrh	r2, [r7, #6]
 8008dbc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	88fa      	ldrh	r2, [r7, #6]
 8008dc4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dd0:	d108      	bne.n	8008de4 <HAL_UART_Transmit+0x6c>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d104      	bne.n	8008de4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	61bb      	str	r3, [r7, #24]
 8008de2:	e003      	b.n	8008dec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008de8:	2300      	movs	r3, #0
 8008dea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008dec:	e030      	b.n	8008e50 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2200      	movs	r2, #0
 8008df6:	2180      	movs	r1, #128	; 0x80
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f001 fcbd 	bl	800a778 <UART_WaitOnFlagUntilTimeout>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d005      	beq.n	8008e10 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2220      	movs	r2, #32
 8008e08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	e03d      	b.n	8008e8c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10b      	bne.n	8008e2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	881b      	ldrh	r3, [r3, #0]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	3302      	adds	r3, #2
 8008e2a:	61bb      	str	r3, [r7, #24]
 8008e2c:	e007      	b.n	8008e3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	781a      	ldrb	r2, [r3, #0]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	3b01      	subs	r3, #1
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1c8      	bne.n	8008dee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	2200      	movs	r2, #0
 8008e64:	2140      	movs	r1, #64	; 0x40
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f001 fc86 	bl	800a778 <UART_WaitOnFlagUntilTimeout>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d005      	beq.n	8008e7e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2220      	movs	r2, #32
 8008e76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	e006      	b.n	8008e8c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2220      	movs	r2, #32
 8008e82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	e000      	b.n	8008e8c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008e8a:	2302      	movs	r3, #2
  }
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3720      	adds	r7, #32
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b091      	sub	sp, #68	; 0x44
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ea8:	2b20      	cmp	r3, #32
 8008eaa:	d178      	bne.n	8008f9e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d002      	beq.n	8008eb8 <HAL_UART_Transmit_IT+0x24>
 8008eb2:	88fb      	ldrh	r3, [r7, #6]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e071      	b.n	8008fa0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	88fa      	ldrh	r2, [r7, #6]
 8008ec6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	88fa      	ldrh	r2, [r7, #6]
 8008ece:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2221      	movs	r2, #33	; 0x21
 8008ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ef0:	d12a      	bne.n	8008f48 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008efa:	d107      	bne.n	8008f0c <HAL_UART_Transmit_IT+0x78>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d103      	bne.n	8008f0c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4a29      	ldr	r2, [pc, #164]	; (8008fac <HAL_UART_Transmit_IT+0x118>)
 8008f08:	679a      	str	r2, [r3, #120]	; 0x78
 8008f0a:	e002      	b.n	8008f12 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	4a28      	ldr	r2, [pc, #160]	; (8008fb0 <HAL_UART_Transmit_IT+0x11c>)
 8008f10:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3308      	adds	r3, #8
 8008f18:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1c:	e853 3f00 	ldrex	r3, [r3]
 8008f20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f28:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	3308      	adds	r3, #8
 8008f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f32:	637a      	str	r2, [r7, #52]	; 0x34
 8008f34:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f3a:	e841 2300 	strex	r3, r2, [r1]
 8008f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1e5      	bne.n	8008f12 <HAL_UART_Transmit_IT+0x7e>
 8008f46:	e028      	b.n	8008f9a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f50:	d107      	bne.n	8008f62 <HAL_UART_Transmit_IT+0xce>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d103      	bne.n	8008f62 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	4a15      	ldr	r2, [pc, #84]	; (8008fb4 <HAL_UART_Transmit_IT+0x120>)
 8008f5e:	679a      	str	r2, [r3, #120]	; 0x78
 8008f60:	e002      	b.n	8008f68 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	4a14      	ldr	r2, [pc, #80]	; (8008fb8 <HAL_UART_Transmit_IT+0x124>)
 8008f66:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	e853 3f00 	ldrex	r3, [r3]
 8008f74:	613b      	str	r3, [r7, #16]
   return(result);
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	461a      	mov	r2, r3
 8008f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f86:	623b      	str	r3, [r7, #32]
 8008f88:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8a:	69f9      	ldr	r1, [r7, #28]
 8008f8c:	6a3a      	ldr	r2, [r7, #32]
 8008f8e:	e841 2300 	strex	r3, r2, [r1]
 8008f92:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1e6      	bne.n	8008f68 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e000      	b.n	8008fa0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008f9e:	2302      	movs	r3, #2
  }
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3744      	adds	r7, #68	; 0x44
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	0800addf 	.word	0x0800addf
 8008fb0:	0800acff 	.word	0x0800acff
 8008fb4:	0800ac3d 	.word	0x0800ac3d
 8008fb8:	0800ab85 	.word	0x0800ab85

08008fbc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b08a      	sub	sp, #40	; 0x28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fd0:	2b20      	cmp	r3, #32
 8008fd2:	d137      	bne.n	8009044 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d002      	beq.n	8008fe0 <HAL_UART_Receive_IT+0x24>
 8008fda:	88fb      	ldrh	r3, [r7, #6]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d101      	bne.n	8008fe4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e030      	b.n	8009046 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a18      	ldr	r2, [pc, #96]	; (8009050 <HAL_UART_Receive_IT+0x94>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d01f      	beq.n	8009034 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d018      	beq.n	8009034 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	e853 3f00 	ldrex	r3, [r3]
 800900e:	613b      	str	r3, [r7, #16]
   return(result);
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009016:	627b      	str	r3, [r7, #36]	; 0x24
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	461a      	mov	r2, r3
 800901e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009020:	623b      	str	r3, [r7, #32]
 8009022:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009024:	69f9      	ldr	r1, [r7, #28]
 8009026:	6a3a      	ldr	r2, [r7, #32]
 8009028:	e841 2300 	strex	r3, r2, [r1]
 800902c:	61bb      	str	r3, [r7, #24]
   return(result);
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1e6      	bne.n	8009002 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009034:	88fb      	ldrh	r3, [r7, #6]
 8009036:	461a      	mov	r2, r3
 8009038:	68b9      	ldr	r1, [r7, #8]
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f001 fc04 	bl	800a848 <UART_Start_Receive_IT>
 8009040:	4603      	mov	r3, r0
 8009042:	e000      	b.n	8009046 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009044:	2302      	movs	r3, #2
  }
}
 8009046:	4618      	mov	r0, r3
 8009048:	3728      	adds	r7, #40	; 0x28
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	58000c00 	.word	0x58000c00

08009054 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b0ba      	sub	sp, #232	; 0xe8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	69db      	ldr	r3, [r3, #28]
 8009062:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800907a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800907e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009082:	4013      	ands	r3, r2
 8009084:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800908c:	2b00      	cmp	r3, #0
 800908e:	d11b      	bne.n	80090c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009094:	f003 0320 	and.w	r3, r3, #32
 8009098:	2b00      	cmp	r3, #0
 800909a:	d015      	beq.n	80090c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800909c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090a0:	f003 0320 	and.w	r3, r3, #32
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d105      	bne.n	80090b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80090a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d009      	beq.n	80090c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f000 8377 	beq.w	80097ac <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	4798      	blx	r3
      }
      return;
 80090c6:	e371      	b.n	80097ac <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80090c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f000 8123 	beq.w	8009318 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80090d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80090d6:	4b8d      	ldr	r3, [pc, #564]	; (800930c <HAL_UART_IRQHandler+0x2b8>)
 80090d8:	4013      	ands	r3, r2
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d106      	bne.n	80090ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80090de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80090e2:	4b8b      	ldr	r3, [pc, #556]	; (8009310 <HAL_UART_IRQHandler+0x2bc>)
 80090e4:	4013      	ands	r3, r2
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f000 8116 	beq.w	8009318 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80090ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090f0:	f003 0301 	and.w	r3, r3, #1
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d011      	beq.n	800911c <HAL_UART_IRQHandler+0xc8>
 80090f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00b      	beq.n	800911c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2201      	movs	r2, #1
 800910a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009112:	f043 0201 	orr.w	r2, r3, #1
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800911c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009120:	f003 0302 	and.w	r3, r3, #2
 8009124:	2b00      	cmp	r3, #0
 8009126:	d011      	beq.n	800914c <HAL_UART_IRQHandler+0xf8>
 8009128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800912c:	f003 0301 	and.w	r3, r3, #1
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00b      	beq.n	800914c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2202      	movs	r2, #2
 800913a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009142:	f043 0204 	orr.w	r2, r3, #4
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800914c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009150:	f003 0304 	and.w	r3, r3, #4
 8009154:	2b00      	cmp	r3, #0
 8009156:	d011      	beq.n	800917c <HAL_UART_IRQHandler+0x128>
 8009158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00b      	beq.n	800917c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2204      	movs	r2, #4
 800916a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009172:	f043 0202 	orr.w	r2, r3, #2
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800917c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009180:	f003 0308 	and.w	r3, r3, #8
 8009184:	2b00      	cmp	r3, #0
 8009186:	d017      	beq.n	80091b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800918c:	f003 0320 	and.w	r3, r3, #32
 8009190:	2b00      	cmp	r3, #0
 8009192:	d105      	bne.n	80091a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009194:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009198:	4b5c      	ldr	r3, [pc, #368]	; (800930c <HAL_UART_IRQHandler+0x2b8>)
 800919a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00b      	beq.n	80091b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2208      	movs	r2, #8
 80091a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091ae:	f043 0208 	orr.w	r2, r3, #8
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80091b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d012      	beq.n	80091ea <HAL_UART_IRQHandler+0x196>
 80091c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00c      	beq.n	80091ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091e0:	f043 0220 	orr.w	r2, r3, #32
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 82dd 	beq.w	80097b0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80091f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091fa:	f003 0320 	and.w	r3, r3, #32
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d013      	beq.n	800922a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009206:	f003 0320 	and.w	r3, r3, #32
 800920a:	2b00      	cmp	r3, #0
 800920c:	d105      	bne.n	800921a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800920e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009216:	2b00      	cmp	r3, #0
 8009218:	d007      	beq.n	800922a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009230:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800923e:	2b40      	cmp	r3, #64	; 0x40
 8009240:	d005      	beq.n	800924e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009246:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800924a:	2b00      	cmp	r3, #0
 800924c:	d054      	beq.n	80092f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f001 fc1c 	bl	800aa8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800925e:	2b40      	cmp	r3, #64	; 0x40
 8009260:	d146      	bne.n	80092f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	3308      	adds	r3, #8
 8009268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009270:	e853 3f00 	ldrex	r3, [r3]
 8009274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009278:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800927c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009280:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	3308      	adds	r3, #8
 800928a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800928e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009292:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009296:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800929a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800929e:	e841 2300 	strex	r3, r2, [r1]
 80092a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80092a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1d9      	bne.n	8009262 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d017      	beq.n	80092e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092be:	4a15      	ldr	r2, [pc, #84]	; (8009314 <HAL_UART_IRQHandler+0x2c0>)
 80092c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7f9 fee1 	bl	8003090 <HAL_DMA_Abort_IT>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d019      	beq.n	8009308 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80092e2:	4610      	mov	r0, r2
 80092e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092e6:	e00f      	b.n	8009308 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fa77 	bl	80097dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ee:	e00b      	b.n	8009308 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fa73 	bl	80097dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092f6:	e007      	b.n	8009308 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fa6f 	bl	80097dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009306:	e253      	b.n	80097b0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009308:	bf00      	nop
    return;
 800930a:	e251      	b.n	80097b0 <HAL_UART_IRQHandler+0x75c>
 800930c:	10000001 	.word	0x10000001
 8009310:	04000120 	.word	0x04000120
 8009314:	0800ab59 	.word	0x0800ab59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800931c:	2b01      	cmp	r3, #1
 800931e:	f040 81e7 	bne.w	80096f0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009326:	f003 0310 	and.w	r3, r3, #16
 800932a:	2b00      	cmp	r3, #0
 800932c:	f000 81e0 	beq.w	80096f0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009334:	f003 0310 	and.w	r3, r3, #16
 8009338:	2b00      	cmp	r3, #0
 800933a:	f000 81d9 	beq.w	80096f0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2210      	movs	r2, #16
 8009344:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009350:	2b40      	cmp	r3, #64	; 0x40
 8009352:	f040 8151 	bne.w	80095f8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a96      	ldr	r2, [pc, #600]	; (80095b8 <HAL_UART_IRQHandler+0x564>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d068      	beq.n	8009436 <HAL_UART_IRQHandler+0x3e2>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a93      	ldr	r2, [pc, #588]	; (80095bc <HAL_UART_IRQHandler+0x568>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d061      	beq.n	8009436 <HAL_UART_IRQHandler+0x3e2>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a91      	ldr	r2, [pc, #580]	; (80095c0 <HAL_UART_IRQHandler+0x56c>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d05a      	beq.n	8009436 <HAL_UART_IRQHandler+0x3e2>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a8e      	ldr	r2, [pc, #568]	; (80095c4 <HAL_UART_IRQHandler+0x570>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d053      	beq.n	8009436 <HAL_UART_IRQHandler+0x3e2>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a8c      	ldr	r2, [pc, #560]	; (80095c8 <HAL_UART_IRQHandler+0x574>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d04c      	beq.n	8009436 <HAL_UART_IRQHandler+0x3e2>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a89      	ldr	r2, [pc, #548]	; (80095cc <HAL_UART_IRQHandler+0x578>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d045      	beq.n	8009436 <HAL_UART_IRQHandler+0x3e2>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a87      	ldr	r2, [pc, #540]	; (80095d0 <HAL_UART_IRQHandler+0x57c>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d03e      	beq.n	8009436 <HAL_UART_IRQHandler+0x3e2>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a84      	ldr	r2, [pc, #528]	; (80095d4 <HAL_UART_IRQHandler+0x580>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d037      	beq.n	8009436 <HAL_UART_IRQHandler+0x3e2>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a82      	ldr	r2, [pc, #520]	; (80095d8 <HAL_UART_IRQHandler+0x584>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d030      	beq.n	8009436 <HAL_UART_IRQHandler+0x3e2>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a7f      	ldr	r2, [pc, #508]	; (80095dc <HAL_UART_IRQHandler+0x588>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d029      	beq.n	8009436 <HAL_UART_IRQHandler+0x3e2>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a7d      	ldr	r2, [pc, #500]	; (80095e0 <HAL_UART_IRQHandler+0x58c>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d022      	beq.n	8009436 <HAL_UART_IRQHandler+0x3e2>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a7a      	ldr	r2, [pc, #488]	; (80095e4 <HAL_UART_IRQHandler+0x590>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d01b      	beq.n	8009436 <HAL_UART_IRQHandler+0x3e2>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a78      	ldr	r2, [pc, #480]	; (80095e8 <HAL_UART_IRQHandler+0x594>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d014      	beq.n	8009436 <HAL_UART_IRQHandler+0x3e2>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a75      	ldr	r2, [pc, #468]	; (80095ec <HAL_UART_IRQHandler+0x598>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d00d      	beq.n	8009436 <HAL_UART_IRQHandler+0x3e2>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a73      	ldr	r2, [pc, #460]	; (80095f0 <HAL_UART_IRQHandler+0x59c>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d006      	beq.n	8009436 <HAL_UART_IRQHandler+0x3e2>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a70      	ldr	r2, [pc, #448]	; (80095f4 <HAL_UART_IRQHandler+0x5a0>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d106      	bne.n	8009444 <HAL_UART_IRQHandler+0x3f0>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	b29b      	uxth	r3, r3
 8009442:	e005      	b.n	8009450 <HAL_UART_IRQHandler+0x3fc>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	b29b      	uxth	r3, r3
 8009450:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009454:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009458:	2b00      	cmp	r3, #0
 800945a:	f000 81ab 	beq.w	80097b4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009464:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009468:	429a      	cmp	r2, r3
 800946a:	f080 81a3 	bcs.w	80097b4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009474:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800947e:	69db      	ldr	r3, [r3, #28]
 8009480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009484:	f000 8087 	beq.w	8009596 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009490:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009494:	e853 3f00 	ldrex	r3, [r3]
 8009498:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800949c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	461a      	mov	r2, r3
 80094ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80094b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80094be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80094c2:	e841 2300 	strex	r3, r2, [r1]
 80094c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80094ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1da      	bne.n	8009488 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	3308      	adds	r3, #8
 80094d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094dc:	e853 3f00 	ldrex	r3, [r3]
 80094e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80094e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094e4:	f023 0301 	bic.w	r3, r3, #1
 80094e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	3308      	adds	r3, #8
 80094f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80094f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80094fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80094fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009502:	e841 2300 	strex	r3, r2, [r1]
 8009506:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1e1      	bne.n	80094d2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	3308      	adds	r3, #8
 8009514:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009518:	e853 3f00 	ldrex	r3, [r3]
 800951c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800951e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009524:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3308      	adds	r3, #8
 800952e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009532:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009534:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009536:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009538:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800953a:	e841 2300 	strex	r3, r2, [r1]
 800953e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1e3      	bne.n	800950e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2220      	movs	r2, #32
 800954a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800955c:	e853 3f00 	ldrex	r3, [r3]
 8009560:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009564:	f023 0310 	bic.w	r3, r3, #16
 8009568:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	461a      	mov	r2, r3
 8009572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009576:	65bb      	str	r3, [r7, #88]	; 0x58
 8009578:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800957c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800957e:	e841 2300 	strex	r3, r2, [r1]
 8009582:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009586:	2b00      	cmp	r3, #0
 8009588:	d1e4      	bne.n	8009554 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009590:	4618      	mov	r0, r3
 8009592:	f7f9 fa5f 	bl	8002a54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2202      	movs	r2, #2
 800959a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	1ad3      	subs	r3, r2, r3
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f91d 	bl	80097f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80095b6:	e0fd      	b.n	80097b4 <HAL_UART_IRQHandler+0x760>
 80095b8:	40020010 	.word	0x40020010
 80095bc:	40020028 	.word	0x40020028
 80095c0:	40020040 	.word	0x40020040
 80095c4:	40020058 	.word	0x40020058
 80095c8:	40020070 	.word	0x40020070
 80095cc:	40020088 	.word	0x40020088
 80095d0:	400200a0 	.word	0x400200a0
 80095d4:	400200b8 	.word	0x400200b8
 80095d8:	40020410 	.word	0x40020410
 80095dc:	40020428 	.word	0x40020428
 80095e0:	40020440 	.word	0x40020440
 80095e4:	40020458 	.word	0x40020458
 80095e8:	40020470 	.word	0x40020470
 80095ec:	40020488 	.word	0x40020488
 80095f0:	400204a0 	.word	0x400204a0
 80095f4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009604:	b29b      	uxth	r3, r3
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009612:	b29b      	uxth	r3, r3
 8009614:	2b00      	cmp	r3, #0
 8009616:	f000 80cf 	beq.w	80097b8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800961a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800961e:	2b00      	cmp	r3, #0
 8009620:	f000 80ca 	beq.w	80097b8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962c:	e853 3f00 	ldrex	r3, [r3]
 8009630:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009634:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009638:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	461a      	mov	r2, r3
 8009642:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009646:	647b      	str	r3, [r7, #68]	; 0x44
 8009648:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800964c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800964e:	e841 2300 	strex	r3, r2, [r1]
 8009652:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1e4      	bne.n	8009624 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	3308      	adds	r3, #8
 8009660:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	e853 3f00 	ldrex	r3, [r3]
 8009668:	623b      	str	r3, [r7, #32]
   return(result);
 800966a:	6a3a      	ldr	r2, [r7, #32]
 800966c:	4b55      	ldr	r3, [pc, #340]	; (80097c4 <HAL_UART_IRQHandler+0x770>)
 800966e:	4013      	ands	r3, r2
 8009670:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	3308      	adds	r3, #8
 800967a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800967e:	633a      	str	r2, [r7, #48]	; 0x30
 8009680:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009686:	e841 2300 	strex	r3, r2, [r1]
 800968a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800968c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1e3      	bne.n	800965a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2220      	movs	r2, #32
 8009696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	e853 3f00 	ldrex	r3, [r3]
 80096b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f023 0310 	bic.w	r3, r3, #16
 80096ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	461a      	mov	r2, r3
 80096c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80096c8:	61fb      	str	r3, [r7, #28]
 80096ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096cc:	69b9      	ldr	r1, [r7, #24]
 80096ce:	69fa      	ldr	r2, [r7, #28]
 80096d0:	e841 2300 	strex	r3, r2, [r1]
 80096d4:	617b      	str	r3, [r7, #20]
   return(result);
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1e4      	bne.n	80096a6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2202      	movs	r2, #2
 80096e0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80096e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096e6:	4619      	mov	r1, r3
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 f881 	bl	80097f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80096ee:	e063      	b.n	80097b8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80096f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00e      	beq.n	800971a <HAL_UART_IRQHandler+0x6c6>
 80096fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009704:	2b00      	cmp	r3, #0
 8009706:	d008      	beq.n	800971a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009710:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f002 f920 	bl	800b958 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009718:	e051      	b.n	80097be <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800971a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800971e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009722:	2b00      	cmp	r3, #0
 8009724:	d014      	beq.n	8009750 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800972a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800972e:	2b00      	cmp	r3, #0
 8009730:	d105      	bne.n	800973e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800973a:	2b00      	cmp	r3, #0
 800973c:	d008      	beq.n	8009750 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009742:	2b00      	cmp	r3, #0
 8009744:	d03a      	beq.n	80097bc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	4798      	blx	r3
    }
    return;
 800974e:	e035      	b.n	80097bc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009758:	2b00      	cmp	r3, #0
 800975a:	d009      	beq.n	8009770 <HAL_UART_IRQHandler+0x71c>
 800975c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009764:	2b00      	cmp	r3, #0
 8009766:	d003      	beq.n	8009770 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f001 fbad 	bl	800aec8 <UART_EndTransmit_IT>
    return;
 800976e:	e026      	b.n	80097be <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d009      	beq.n	8009790 <HAL_UART_IRQHandler+0x73c>
 800977c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009780:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009784:	2b00      	cmp	r3, #0
 8009786:	d003      	beq.n	8009790 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f002 f8f9 	bl	800b980 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800978e:	e016      	b.n	80097be <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009798:	2b00      	cmp	r3, #0
 800979a:	d010      	beq.n	80097be <HAL_UART_IRQHandler+0x76a>
 800979c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	da0c      	bge.n	80097be <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f002 f8e1 	bl	800b96c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097aa:	e008      	b.n	80097be <HAL_UART_IRQHandler+0x76a>
      return;
 80097ac:	bf00      	nop
 80097ae:	e006      	b.n	80097be <HAL_UART_IRQHandler+0x76a>
    return;
 80097b0:	bf00      	nop
 80097b2:	e004      	b.n	80097be <HAL_UART_IRQHandler+0x76a>
      return;
 80097b4:	bf00      	nop
 80097b6:	e002      	b.n	80097be <HAL_UART_IRQHandler+0x76a>
      return;
 80097b8:	bf00      	nop
 80097ba:	e000      	b.n	80097be <HAL_UART_IRQHandler+0x76a>
    return;
 80097bc:	bf00      	nop
  }
}
 80097be:	37e8      	adds	r7, #232	; 0xe8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	effffffe 	.word	0xeffffffe

080097c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	460b      	mov	r3, r1
 80097fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800980c:	b092      	sub	sp, #72	; 0x48
 800980e:	af00      	add	r7, sp, #0
 8009810:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	689a      	ldr	r2, [r3, #8]
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	431a      	orrs	r2, r3
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	695b      	ldr	r3, [r3, #20]
 8009826:	431a      	orrs	r2, r3
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	69db      	ldr	r3, [r3, #28]
 800982c:	4313      	orrs	r3, r2
 800982e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	4bbe      	ldr	r3, [pc, #760]	; (8009b30 <UART_SetConfig+0x328>)
 8009838:	4013      	ands	r3, r2
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	6812      	ldr	r2, [r2, #0]
 800983e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009840:	430b      	orrs	r3, r1
 8009842:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	68da      	ldr	r2, [r3, #12]
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	430a      	orrs	r2, r1
 8009858:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4ab3      	ldr	r2, [pc, #716]	; (8009b34 <UART_SetConfig+0x32c>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d004      	beq.n	8009874 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009870:	4313      	orrs	r3, r2
 8009872:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	689a      	ldr	r2, [r3, #8]
 800987a:	4baf      	ldr	r3, [pc, #700]	; (8009b38 <UART_SetConfig+0x330>)
 800987c:	4013      	ands	r3, r2
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	6812      	ldr	r2, [r2, #0]
 8009882:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009884:	430b      	orrs	r3, r1
 8009886:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988e:	f023 010f 	bic.w	r1, r3, #15
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	430a      	orrs	r2, r1
 800989c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4aa6      	ldr	r2, [pc, #664]	; (8009b3c <UART_SetConfig+0x334>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d177      	bne.n	8009998 <UART_SetConfig+0x190>
 80098a8:	4ba5      	ldr	r3, [pc, #660]	; (8009b40 <UART_SetConfig+0x338>)
 80098aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098b0:	2b28      	cmp	r3, #40	; 0x28
 80098b2:	d86d      	bhi.n	8009990 <UART_SetConfig+0x188>
 80098b4:	a201      	add	r2, pc, #4	; (adr r2, 80098bc <UART_SetConfig+0xb4>)
 80098b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ba:	bf00      	nop
 80098bc:	08009961 	.word	0x08009961
 80098c0:	08009991 	.word	0x08009991
 80098c4:	08009991 	.word	0x08009991
 80098c8:	08009991 	.word	0x08009991
 80098cc:	08009991 	.word	0x08009991
 80098d0:	08009991 	.word	0x08009991
 80098d4:	08009991 	.word	0x08009991
 80098d8:	08009991 	.word	0x08009991
 80098dc:	08009969 	.word	0x08009969
 80098e0:	08009991 	.word	0x08009991
 80098e4:	08009991 	.word	0x08009991
 80098e8:	08009991 	.word	0x08009991
 80098ec:	08009991 	.word	0x08009991
 80098f0:	08009991 	.word	0x08009991
 80098f4:	08009991 	.word	0x08009991
 80098f8:	08009991 	.word	0x08009991
 80098fc:	08009971 	.word	0x08009971
 8009900:	08009991 	.word	0x08009991
 8009904:	08009991 	.word	0x08009991
 8009908:	08009991 	.word	0x08009991
 800990c:	08009991 	.word	0x08009991
 8009910:	08009991 	.word	0x08009991
 8009914:	08009991 	.word	0x08009991
 8009918:	08009991 	.word	0x08009991
 800991c:	08009979 	.word	0x08009979
 8009920:	08009991 	.word	0x08009991
 8009924:	08009991 	.word	0x08009991
 8009928:	08009991 	.word	0x08009991
 800992c:	08009991 	.word	0x08009991
 8009930:	08009991 	.word	0x08009991
 8009934:	08009991 	.word	0x08009991
 8009938:	08009991 	.word	0x08009991
 800993c:	08009981 	.word	0x08009981
 8009940:	08009991 	.word	0x08009991
 8009944:	08009991 	.word	0x08009991
 8009948:	08009991 	.word	0x08009991
 800994c:	08009991 	.word	0x08009991
 8009950:	08009991 	.word	0x08009991
 8009954:	08009991 	.word	0x08009991
 8009958:	08009991 	.word	0x08009991
 800995c:	08009989 	.word	0x08009989
 8009960:	2301      	movs	r3, #1
 8009962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009966:	e326      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009968:	2304      	movs	r3, #4
 800996a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800996e:	e322      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009970:	2308      	movs	r3, #8
 8009972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009976:	e31e      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009978:	2310      	movs	r3, #16
 800997a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800997e:	e31a      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009980:	2320      	movs	r3, #32
 8009982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009986:	e316      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009988:	2340      	movs	r3, #64	; 0x40
 800998a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800998e:	e312      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009990:	2380      	movs	r3, #128	; 0x80
 8009992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009996:	e30e      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a69      	ldr	r2, [pc, #420]	; (8009b44 <UART_SetConfig+0x33c>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d130      	bne.n	8009a04 <UART_SetConfig+0x1fc>
 80099a2:	4b67      	ldr	r3, [pc, #412]	; (8009b40 <UART_SetConfig+0x338>)
 80099a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099a6:	f003 0307 	and.w	r3, r3, #7
 80099aa:	2b05      	cmp	r3, #5
 80099ac:	d826      	bhi.n	80099fc <UART_SetConfig+0x1f4>
 80099ae:	a201      	add	r2, pc, #4	; (adr r2, 80099b4 <UART_SetConfig+0x1ac>)
 80099b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b4:	080099cd 	.word	0x080099cd
 80099b8:	080099d5 	.word	0x080099d5
 80099bc:	080099dd 	.word	0x080099dd
 80099c0:	080099e5 	.word	0x080099e5
 80099c4:	080099ed 	.word	0x080099ed
 80099c8:	080099f5 	.word	0x080099f5
 80099cc:	2300      	movs	r3, #0
 80099ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099d2:	e2f0      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 80099d4:	2304      	movs	r3, #4
 80099d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099da:	e2ec      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 80099dc:	2308      	movs	r3, #8
 80099de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099e2:	e2e8      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 80099e4:	2310      	movs	r3, #16
 80099e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ea:	e2e4      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 80099ec:	2320      	movs	r3, #32
 80099ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099f2:	e2e0      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 80099f4:	2340      	movs	r3, #64	; 0x40
 80099f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099fa:	e2dc      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 80099fc:	2380      	movs	r3, #128	; 0x80
 80099fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a02:	e2d8      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a4f      	ldr	r2, [pc, #316]	; (8009b48 <UART_SetConfig+0x340>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d130      	bne.n	8009a70 <UART_SetConfig+0x268>
 8009a0e:	4b4c      	ldr	r3, [pc, #304]	; (8009b40 <UART_SetConfig+0x338>)
 8009a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a12:	f003 0307 	and.w	r3, r3, #7
 8009a16:	2b05      	cmp	r3, #5
 8009a18:	d826      	bhi.n	8009a68 <UART_SetConfig+0x260>
 8009a1a:	a201      	add	r2, pc, #4	; (adr r2, 8009a20 <UART_SetConfig+0x218>)
 8009a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a20:	08009a39 	.word	0x08009a39
 8009a24:	08009a41 	.word	0x08009a41
 8009a28:	08009a49 	.word	0x08009a49
 8009a2c:	08009a51 	.word	0x08009a51
 8009a30:	08009a59 	.word	0x08009a59
 8009a34:	08009a61 	.word	0x08009a61
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a3e:	e2ba      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009a40:	2304      	movs	r3, #4
 8009a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a46:	e2b6      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009a48:	2308      	movs	r3, #8
 8009a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a4e:	e2b2      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009a50:	2310      	movs	r3, #16
 8009a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a56:	e2ae      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009a58:	2320      	movs	r3, #32
 8009a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a5e:	e2aa      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009a60:	2340      	movs	r3, #64	; 0x40
 8009a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a66:	e2a6      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009a68:	2380      	movs	r3, #128	; 0x80
 8009a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a6e:	e2a2      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a35      	ldr	r2, [pc, #212]	; (8009b4c <UART_SetConfig+0x344>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d130      	bne.n	8009adc <UART_SetConfig+0x2d4>
 8009a7a:	4b31      	ldr	r3, [pc, #196]	; (8009b40 <UART_SetConfig+0x338>)
 8009a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a7e:	f003 0307 	and.w	r3, r3, #7
 8009a82:	2b05      	cmp	r3, #5
 8009a84:	d826      	bhi.n	8009ad4 <UART_SetConfig+0x2cc>
 8009a86:	a201      	add	r2, pc, #4	; (adr r2, 8009a8c <UART_SetConfig+0x284>)
 8009a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8c:	08009aa5 	.word	0x08009aa5
 8009a90:	08009aad 	.word	0x08009aad
 8009a94:	08009ab5 	.word	0x08009ab5
 8009a98:	08009abd 	.word	0x08009abd
 8009a9c:	08009ac5 	.word	0x08009ac5
 8009aa0:	08009acd 	.word	0x08009acd
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aaa:	e284      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009aac:	2304      	movs	r3, #4
 8009aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ab2:	e280      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009ab4:	2308      	movs	r3, #8
 8009ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aba:	e27c      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009abc:	2310      	movs	r3, #16
 8009abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ac2:	e278      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009ac4:	2320      	movs	r3, #32
 8009ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aca:	e274      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009acc:	2340      	movs	r3, #64	; 0x40
 8009ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ad2:	e270      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009ad4:	2380      	movs	r3, #128	; 0x80
 8009ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ada:	e26c      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a1b      	ldr	r2, [pc, #108]	; (8009b50 <UART_SetConfig+0x348>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d142      	bne.n	8009b6c <UART_SetConfig+0x364>
 8009ae6:	4b16      	ldr	r3, [pc, #88]	; (8009b40 <UART_SetConfig+0x338>)
 8009ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aea:	f003 0307 	and.w	r3, r3, #7
 8009aee:	2b05      	cmp	r3, #5
 8009af0:	d838      	bhi.n	8009b64 <UART_SetConfig+0x35c>
 8009af2:	a201      	add	r2, pc, #4	; (adr r2, 8009af8 <UART_SetConfig+0x2f0>)
 8009af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af8:	08009b11 	.word	0x08009b11
 8009afc:	08009b19 	.word	0x08009b19
 8009b00:	08009b21 	.word	0x08009b21
 8009b04:	08009b29 	.word	0x08009b29
 8009b08:	08009b55 	.word	0x08009b55
 8009b0c:	08009b5d 	.word	0x08009b5d
 8009b10:	2300      	movs	r3, #0
 8009b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b16:	e24e      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009b18:	2304      	movs	r3, #4
 8009b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b1e:	e24a      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009b20:	2308      	movs	r3, #8
 8009b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b26:	e246      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009b28:	2310      	movs	r3, #16
 8009b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b2e:	e242      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009b30:	cfff69f3 	.word	0xcfff69f3
 8009b34:	58000c00 	.word	0x58000c00
 8009b38:	11fff4ff 	.word	0x11fff4ff
 8009b3c:	40011000 	.word	0x40011000
 8009b40:	58024400 	.word	0x58024400
 8009b44:	40004400 	.word	0x40004400
 8009b48:	40004800 	.word	0x40004800
 8009b4c:	40004c00 	.word	0x40004c00
 8009b50:	40005000 	.word	0x40005000
 8009b54:	2320      	movs	r3, #32
 8009b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b5a:	e22c      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009b5c:	2340      	movs	r3, #64	; 0x40
 8009b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b62:	e228      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009b64:	2380      	movs	r3, #128	; 0x80
 8009b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b6a:	e224      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4ab1      	ldr	r2, [pc, #708]	; (8009e38 <UART_SetConfig+0x630>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d176      	bne.n	8009c64 <UART_SetConfig+0x45c>
 8009b76:	4bb1      	ldr	r3, [pc, #708]	; (8009e3c <UART_SetConfig+0x634>)
 8009b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b7e:	2b28      	cmp	r3, #40	; 0x28
 8009b80:	d86c      	bhi.n	8009c5c <UART_SetConfig+0x454>
 8009b82:	a201      	add	r2, pc, #4	; (adr r2, 8009b88 <UART_SetConfig+0x380>)
 8009b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b88:	08009c2d 	.word	0x08009c2d
 8009b8c:	08009c5d 	.word	0x08009c5d
 8009b90:	08009c5d 	.word	0x08009c5d
 8009b94:	08009c5d 	.word	0x08009c5d
 8009b98:	08009c5d 	.word	0x08009c5d
 8009b9c:	08009c5d 	.word	0x08009c5d
 8009ba0:	08009c5d 	.word	0x08009c5d
 8009ba4:	08009c5d 	.word	0x08009c5d
 8009ba8:	08009c35 	.word	0x08009c35
 8009bac:	08009c5d 	.word	0x08009c5d
 8009bb0:	08009c5d 	.word	0x08009c5d
 8009bb4:	08009c5d 	.word	0x08009c5d
 8009bb8:	08009c5d 	.word	0x08009c5d
 8009bbc:	08009c5d 	.word	0x08009c5d
 8009bc0:	08009c5d 	.word	0x08009c5d
 8009bc4:	08009c5d 	.word	0x08009c5d
 8009bc8:	08009c3d 	.word	0x08009c3d
 8009bcc:	08009c5d 	.word	0x08009c5d
 8009bd0:	08009c5d 	.word	0x08009c5d
 8009bd4:	08009c5d 	.word	0x08009c5d
 8009bd8:	08009c5d 	.word	0x08009c5d
 8009bdc:	08009c5d 	.word	0x08009c5d
 8009be0:	08009c5d 	.word	0x08009c5d
 8009be4:	08009c5d 	.word	0x08009c5d
 8009be8:	08009c45 	.word	0x08009c45
 8009bec:	08009c5d 	.word	0x08009c5d
 8009bf0:	08009c5d 	.word	0x08009c5d
 8009bf4:	08009c5d 	.word	0x08009c5d
 8009bf8:	08009c5d 	.word	0x08009c5d
 8009bfc:	08009c5d 	.word	0x08009c5d
 8009c00:	08009c5d 	.word	0x08009c5d
 8009c04:	08009c5d 	.word	0x08009c5d
 8009c08:	08009c4d 	.word	0x08009c4d
 8009c0c:	08009c5d 	.word	0x08009c5d
 8009c10:	08009c5d 	.word	0x08009c5d
 8009c14:	08009c5d 	.word	0x08009c5d
 8009c18:	08009c5d 	.word	0x08009c5d
 8009c1c:	08009c5d 	.word	0x08009c5d
 8009c20:	08009c5d 	.word	0x08009c5d
 8009c24:	08009c5d 	.word	0x08009c5d
 8009c28:	08009c55 	.word	0x08009c55
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c32:	e1c0      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009c34:	2304      	movs	r3, #4
 8009c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c3a:	e1bc      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009c3c:	2308      	movs	r3, #8
 8009c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c42:	e1b8      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009c44:	2310      	movs	r3, #16
 8009c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c4a:	e1b4      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009c4c:	2320      	movs	r3, #32
 8009c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c52:	e1b0      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009c54:	2340      	movs	r3, #64	; 0x40
 8009c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c5a:	e1ac      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009c5c:	2380      	movs	r3, #128	; 0x80
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c62:	e1a8      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a75      	ldr	r2, [pc, #468]	; (8009e40 <UART_SetConfig+0x638>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d130      	bne.n	8009cd0 <UART_SetConfig+0x4c8>
 8009c6e:	4b73      	ldr	r3, [pc, #460]	; (8009e3c <UART_SetConfig+0x634>)
 8009c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c72:	f003 0307 	and.w	r3, r3, #7
 8009c76:	2b05      	cmp	r3, #5
 8009c78:	d826      	bhi.n	8009cc8 <UART_SetConfig+0x4c0>
 8009c7a:	a201      	add	r2, pc, #4	; (adr r2, 8009c80 <UART_SetConfig+0x478>)
 8009c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c80:	08009c99 	.word	0x08009c99
 8009c84:	08009ca1 	.word	0x08009ca1
 8009c88:	08009ca9 	.word	0x08009ca9
 8009c8c:	08009cb1 	.word	0x08009cb1
 8009c90:	08009cb9 	.word	0x08009cb9
 8009c94:	08009cc1 	.word	0x08009cc1
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c9e:	e18a      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009ca0:	2304      	movs	r3, #4
 8009ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ca6:	e186      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009ca8:	2308      	movs	r3, #8
 8009caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cae:	e182      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009cb0:	2310      	movs	r3, #16
 8009cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cb6:	e17e      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009cb8:	2320      	movs	r3, #32
 8009cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cbe:	e17a      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009cc0:	2340      	movs	r3, #64	; 0x40
 8009cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cc6:	e176      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009cc8:	2380      	movs	r3, #128	; 0x80
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cce:	e172      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a5b      	ldr	r2, [pc, #364]	; (8009e44 <UART_SetConfig+0x63c>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d130      	bne.n	8009d3c <UART_SetConfig+0x534>
 8009cda:	4b58      	ldr	r3, [pc, #352]	; (8009e3c <UART_SetConfig+0x634>)
 8009cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cde:	f003 0307 	and.w	r3, r3, #7
 8009ce2:	2b05      	cmp	r3, #5
 8009ce4:	d826      	bhi.n	8009d34 <UART_SetConfig+0x52c>
 8009ce6:	a201      	add	r2, pc, #4	; (adr r2, 8009cec <UART_SetConfig+0x4e4>)
 8009ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cec:	08009d05 	.word	0x08009d05
 8009cf0:	08009d0d 	.word	0x08009d0d
 8009cf4:	08009d15 	.word	0x08009d15
 8009cf8:	08009d1d 	.word	0x08009d1d
 8009cfc:	08009d25 	.word	0x08009d25
 8009d00:	08009d2d 	.word	0x08009d2d
 8009d04:	2300      	movs	r3, #0
 8009d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d0a:	e154      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009d0c:	2304      	movs	r3, #4
 8009d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d12:	e150      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009d14:	2308      	movs	r3, #8
 8009d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d1a:	e14c      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009d1c:	2310      	movs	r3, #16
 8009d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d22:	e148      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009d24:	2320      	movs	r3, #32
 8009d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d2a:	e144      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009d2c:	2340      	movs	r3, #64	; 0x40
 8009d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d32:	e140      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009d34:	2380      	movs	r3, #128	; 0x80
 8009d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d3a:	e13c      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a41      	ldr	r2, [pc, #260]	; (8009e48 <UART_SetConfig+0x640>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	f040 8082 	bne.w	8009e4c <UART_SetConfig+0x644>
 8009d48:	4b3c      	ldr	r3, [pc, #240]	; (8009e3c <UART_SetConfig+0x634>)
 8009d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d50:	2b28      	cmp	r3, #40	; 0x28
 8009d52:	d86d      	bhi.n	8009e30 <UART_SetConfig+0x628>
 8009d54:	a201      	add	r2, pc, #4	; (adr r2, 8009d5c <UART_SetConfig+0x554>)
 8009d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5a:	bf00      	nop
 8009d5c:	08009e01 	.word	0x08009e01
 8009d60:	08009e31 	.word	0x08009e31
 8009d64:	08009e31 	.word	0x08009e31
 8009d68:	08009e31 	.word	0x08009e31
 8009d6c:	08009e31 	.word	0x08009e31
 8009d70:	08009e31 	.word	0x08009e31
 8009d74:	08009e31 	.word	0x08009e31
 8009d78:	08009e31 	.word	0x08009e31
 8009d7c:	08009e09 	.word	0x08009e09
 8009d80:	08009e31 	.word	0x08009e31
 8009d84:	08009e31 	.word	0x08009e31
 8009d88:	08009e31 	.word	0x08009e31
 8009d8c:	08009e31 	.word	0x08009e31
 8009d90:	08009e31 	.word	0x08009e31
 8009d94:	08009e31 	.word	0x08009e31
 8009d98:	08009e31 	.word	0x08009e31
 8009d9c:	08009e11 	.word	0x08009e11
 8009da0:	08009e31 	.word	0x08009e31
 8009da4:	08009e31 	.word	0x08009e31
 8009da8:	08009e31 	.word	0x08009e31
 8009dac:	08009e31 	.word	0x08009e31
 8009db0:	08009e31 	.word	0x08009e31
 8009db4:	08009e31 	.word	0x08009e31
 8009db8:	08009e31 	.word	0x08009e31
 8009dbc:	08009e19 	.word	0x08009e19
 8009dc0:	08009e31 	.word	0x08009e31
 8009dc4:	08009e31 	.word	0x08009e31
 8009dc8:	08009e31 	.word	0x08009e31
 8009dcc:	08009e31 	.word	0x08009e31
 8009dd0:	08009e31 	.word	0x08009e31
 8009dd4:	08009e31 	.word	0x08009e31
 8009dd8:	08009e31 	.word	0x08009e31
 8009ddc:	08009e21 	.word	0x08009e21
 8009de0:	08009e31 	.word	0x08009e31
 8009de4:	08009e31 	.word	0x08009e31
 8009de8:	08009e31 	.word	0x08009e31
 8009dec:	08009e31 	.word	0x08009e31
 8009df0:	08009e31 	.word	0x08009e31
 8009df4:	08009e31 	.word	0x08009e31
 8009df8:	08009e31 	.word	0x08009e31
 8009dfc:	08009e29 	.word	0x08009e29
 8009e00:	2301      	movs	r3, #1
 8009e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e06:	e0d6      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009e08:	2304      	movs	r3, #4
 8009e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e0e:	e0d2      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009e10:	2308      	movs	r3, #8
 8009e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e16:	e0ce      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009e18:	2310      	movs	r3, #16
 8009e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e1e:	e0ca      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009e20:	2320      	movs	r3, #32
 8009e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e26:	e0c6      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009e28:	2340      	movs	r3, #64	; 0x40
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e2e:	e0c2      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009e30:	2380      	movs	r3, #128	; 0x80
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e36:	e0be      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009e38:	40011400 	.word	0x40011400
 8009e3c:	58024400 	.word	0x58024400
 8009e40:	40007800 	.word	0x40007800
 8009e44:	40007c00 	.word	0x40007c00
 8009e48:	40011800 	.word	0x40011800
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4aad      	ldr	r2, [pc, #692]	; (800a108 <UART_SetConfig+0x900>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d176      	bne.n	8009f44 <UART_SetConfig+0x73c>
 8009e56:	4bad      	ldr	r3, [pc, #692]	; (800a10c <UART_SetConfig+0x904>)
 8009e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e5e:	2b28      	cmp	r3, #40	; 0x28
 8009e60:	d86c      	bhi.n	8009f3c <UART_SetConfig+0x734>
 8009e62:	a201      	add	r2, pc, #4	; (adr r2, 8009e68 <UART_SetConfig+0x660>)
 8009e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e68:	08009f0d 	.word	0x08009f0d
 8009e6c:	08009f3d 	.word	0x08009f3d
 8009e70:	08009f3d 	.word	0x08009f3d
 8009e74:	08009f3d 	.word	0x08009f3d
 8009e78:	08009f3d 	.word	0x08009f3d
 8009e7c:	08009f3d 	.word	0x08009f3d
 8009e80:	08009f3d 	.word	0x08009f3d
 8009e84:	08009f3d 	.word	0x08009f3d
 8009e88:	08009f15 	.word	0x08009f15
 8009e8c:	08009f3d 	.word	0x08009f3d
 8009e90:	08009f3d 	.word	0x08009f3d
 8009e94:	08009f3d 	.word	0x08009f3d
 8009e98:	08009f3d 	.word	0x08009f3d
 8009e9c:	08009f3d 	.word	0x08009f3d
 8009ea0:	08009f3d 	.word	0x08009f3d
 8009ea4:	08009f3d 	.word	0x08009f3d
 8009ea8:	08009f1d 	.word	0x08009f1d
 8009eac:	08009f3d 	.word	0x08009f3d
 8009eb0:	08009f3d 	.word	0x08009f3d
 8009eb4:	08009f3d 	.word	0x08009f3d
 8009eb8:	08009f3d 	.word	0x08009f3d
 8009ebc:	08009f3d 	.word	0x08009f3d
 8009ec0:	08009f3d 	.word	0x08009f3d
 8009ec4:	08009f3d 	.word	0x08009f3d
 8009ec8:	08009f25 	.word	0x08009f25
 8009ecc:	08009f3d 	.word	0x08009f3d
 8009ed0:	08009f3d 	.word	0x08009f3d
 8009ed4:	08009f3d 	.word	0x08009f3d
 8009ed8:	08009f3d 	.word	0x08009f3d
 8009edc:	08009f3d 	.word	0x08009f3d
 8009ee0:	08009f3d 	.word	0x08009f3d
 8009ee4:	08009f3d 	.word	0x08009f3d
 8009ee8:	08009f2d 	.word	0x08009f2d
 8009eec:	08009f3d 	.word	0x08009f3d
 8009ef0:	08009f3d 	.word	0x08009f3d
 8009ef4:	08009f3d 	.word	0x08009f3d
 8009ef8:	08009f3d 	.word	0x08009f3d
 8009efc:	08009f3d 	.word	0x08009f3d
 8009f00:	08009f3d 	.word	0x08009f3d
 8009f04:	08009f3d 	.word	0x08009f3d
 8009f08:	08009f35 	.word	0x08009f35
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f12:	e050      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009f14:	2304      	movs	r3, #4
 8009f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f1a:	e04c      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009f1c:	2308      	movs	r3, #8
 8009f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f22:	e048      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009f24:	2310      	movs	r3, #16
 8009f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2a:	e044      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009f2c:	2320      	movs	r3, #32
 8009f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f32:	e040      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009f34:	2340      	movs	r3, #64	; 0x40
 8009f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f3a:	e03c      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009f3c:	2380      	movs	r3, #128	; 0x80
 8009f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f42:	e038      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a71      	ldr	r2, [pc, #452]	; (800a110 <UART_SetConfig+0x908>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d130      	bne.n	8009fb0 <UART_SetConfig+0x7a8>
 8009f4e:	4b6f      	ldr	r3, [pc, #444]	; (800a10c <UART_SetConfig+0x904>)
 8009f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f52:	f003 0307 	and.w	r3, r3, #7
 8009f56:	2b05      	cmp	r3, #5
 8009f58:	d826      	bhi.n	8009fa8 <UART_SetConfig+0x7a0>
 8009f5a:	a201      	add	r2, pc, #4	; (adr r2, 8009f60 <UART_SetConfig+0x758>)
 8009f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f60:	08009f79 	.word	0x08009f79
 8009f64:	08009f81 	.word	0x08009f81
 8009f68:	08009f89 	.word	0x08009f89
 8009f6c:	08009f91 	.word	0x08009f91
 8009f70:	08009f99 	.word	0x08009f99
 8009f74:	08009fa1 	.word	0x08009fa1
 8009f78:	2302      	movs	r3, #2
 8009f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f7e:	e01a      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009f80:	2304      	movs	r3, #4
 8009f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f86:	e016      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009f88:	2308      	movs	r3, #8
 8009f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f8e:	e012      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009f90:	2310      	movs	r3, #16
 8009f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f96:	e00e      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009f98:	2320      	movs	r3, #32
 8009f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f9e:	e00a      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009fa0:	2340      	movs	r3, #64	; 0x40
 8009fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fa6:	e006      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009fa8:	2380      	movs	r3, #128	; 0x80
 8009faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fae:	e002      	b.n	8009fb6 <UART_SetConfig+0x7ae>
 8009fb0:	2380      	movs	r3, #128	; 0x80
 8009fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a55      	ldr	r2, [pc, #340]	; (800a110 <UART_SetConfig+0x908>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	f040 80f8 	bne.w	800a1b2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009fc2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009fc6:	2b20      	cmp	r3, #32
 8009fc8:	dc46      	bgt.n	800a058 <UART_SetConfig+0x850>
 8009fca:	2b02      	cmp	r3, #2
 8009fcc:	db75      	blt.n	800a0ba <UART_SetConfig+0x8b2>
 8009fce:	3b02      	subs	r3, #2
 8009fd0:	2b1e      	cmp	r3, #30
 8009fd2:	d872      	bhi.n	800a0ba <UART_SetConfig+0x8b2>
 8009fd4:	a201      	add	r2, pc, #4	; (adr r2, 8009fdc <UART_SetConfig+0x7d4>)
 8009fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fda:	bf00      	nop
 8009fdc:	0800a05f 	.word	0x0800a05f
 8009fe0:	0800a0bb 	.word	0x0800a0bb
 8009fe4:	0800a067 	.word	0x0800a067
 8009fe8:	0800a0bb 	.word	0x0800a0bb
 8009fec:	0800a0bb 	.word	0x0800a0bb
 8009ff0:	0800a0bb 	.word	0x0800a0bb
 8009ff4:	0800a077 	.word	0x0800a077
 8009ff8:	0800a0bb 	.word	0x0800a0bb
 8009ffc:	0800a0bb 	.word	0x0800a0bb
 800a000:	0800a0bb 	.word	0x0800a0bb
 800a004:	0800a0bb 	.word	0x0800a0bb
 800a008:	0800a0bb 	.word	0x0800a0bb
 800a00c:	0800a0bb 	.word	0x0800a0bb
 800a010:	0800a0bb 	.word	0x0800a0bb
 800a014:	0800a087 	.word	0x0800a087
 800a018:	0800a0bb 	.word	0x0800a0bb
 800a01c:	0800a0bb 	.word	0x0800a0bb
 800a020:	0800a0bb 	.word	0x0800a0bb
 800a024:	0800a0bb 	.word	0x0800a0bb
 800a028:	0800a0bb 	.word	0x0800a0bb
 800a02c:	0800a0bb 	.word	0x0800a0bb
 800a030:	0800a0bb 	.word	0x0800a0bb
 800a034:	0800a0bb 	.word	0x0800a0bb
 800a038:	0800a0bb 	.word	0x0800a0bb
 800a03c:	0800a0bb 	.word	0x0800a0bb
 800a040:	0800a0bb 	.word	0x0800a0bb
 800a044:	0800a0bb 	.word	0x0800a0bb
 800a048:	0800a0bb 	.word	0x0800a0bb
 800a04c:	0800a0bb 	.word	0x0800a0bb
 800a050:	0800a0bb 	.word	0x0800a0bb
 800a054:	0800a0ad 	.word	0x0800a0ad
 800a058:	2b40      	cmp	r3, #64	; 0x40
 800a05a:	d02a      	beq.n	800a0b2 <UART_SetConfig+0x8aa>
 800a05c:	e02d      	b.n	800a0ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a05e:	f7fc ff9b 	bl	8006f98 <HAL_RCCEx_GetD3PCLK1Freq>
 800a062:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a064:	e02f      	b.n	800a0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fc ffaa 	bl	8006fc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a074:	e027      	b.n	800a0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a076:	f107 0318 	add.w	r3, r7, #24
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fd f8f6 	bl	800726c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a084:	e01f      	b.n	800a0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a086:	4b21      	ldr	r3, [pc, #132]	; (800a10c <UART_SetConfig+0x904>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f003 0320 	and.w	r3, r3, #32
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d009      	beq.n	800a0a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a092:	4b1e      	ldr	r3, [pc, #120]	; (800a10c <UART_SetConfig+0x904>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	08db      	lsrs	r3, r3, #3
 800a098:	f003 0303 	and.w	r3, r3, #3
 800a09c:	4a1d      	ldr	r2, [pc, #116]	; (800a114 <UART_SetConfig+0x90c>)
 800a09e:	fa22 f303 	lsr.w	r3, r2, r3
 800a0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0a4:	e00f      	b.n	800a0c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a0a6:	4b1b      	ldr	r3, [pc, #108]	; (800a114 <UART_SetConfig+0x90c>)
 800a0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0aa:	e00c      	b.n	800a0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0ac:	4b1a      	ldr	r3, [pc, #104]	; (800a118 <UART_SetConfig+0x910>)
 800a0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0b0:	e009      	b.n	800a0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0b8:	e005      	b.n	800a0c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a0c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f000 81ee 	beq.w	800a4aa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d2:	4a12      	ldr	r2, [pc, #72]	; (800a11c <UART_SetConfig+0x914>)
 800a0d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0e0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	685a      	ldr	r2, [r3, #4]
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	005b      	lsls	r3, r3, #1
 800a0ea:	4413      	add	r3, r2
 800a0ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d305      	bcc.n	800a0fe <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d910      	bls.n	800a120 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a104:	e1d1      	b.n	800a4aa <UART_SetConfig+0xca2>
 800a106:	bf00      	nop
 800a108:	40011c00 	.word	0x40011c00
 800a10c:	58024400 	.word	0x58024400
 800a110:	58000c00 	.word	0x58000c00
 800a114:	03d09000 	.word	0x03d09000
 800a118:	003d0900 	.word	0x003d0900
 800a11c:	0800c7dc 	.word	0x0800c7dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a122:	2200      	movs	r2, #0
 800a124:	60bb      	str	r3, [r7, #8]
 800a126:	60fa      	str	r2, [r7, #12]
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12c:	4ac0      	ldr	r2, [pc, #768]	; (800a430 <UART_SetConfig+0xc28>)
 800a12e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a132:	b29b      	uxth	r3, r3
 800a134:	2200      	movs	r2, #0
 800a136:	603b      	str	r3, [r7, #0]
 800a138:	607a      	str	r2, [r7, #4]
 800a13a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a13e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a142:	f7f6 f925 	bl	8000390 <__aeabi_uldivmod>
 800a146:	4602      	mov	r2, r0
 800a148:	460b      	mov	r3, r1
 800a14a:	4610      	mov	r0, r2
 800a14c:	4619      	mov	r1, r3
 800a14e:	f04f 0200 	mov.w	r2, #0
 800a152:	f04f 0300 	mov.w	r3, #0
 800a156:	020b      	lsls	r3, r1, #8
 800a158:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a15c:	0202      	lsls	r2, r0, #8
 800a15e:	6979      	ldr	r1, [r7, #20]
 800a160:	6849      	ldr	r1, [r1, #4]
 800a162:	0849      	lsrs	r1, r1, #1
 800a164:	2000      	movs	r0, #0
 800a166:	460c      	mov	r4, r1
 800a168:	4605      	mov	r5, r0
 800a16a:	eb12 0804 	adds.w	r8, r2, r4
 800a16e:	eb43 0905 	adc.w	r9, r3, r5
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	469a      	mov	sl, r3
 800a17a:	4693      	mov	fp, r2
 800a17c:	4652      	mov	r2, sl
 800a17e:	465b      	mov	r3, fp
 800a180:	4640      	mov	r0, r8
 800a182:	4649      	mov	r1, r9
 800a184:	f7f6 f904 	bl	8000390 <__aeabi_uldivmod>
 800a188:	4602      	mov	r2, r0
 800a18a:	460b      	mov	r3, r1
 800a18c:	4613      	mov	r3, r2
 800a18e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a196:	d308      	bcc.n	800a1aa <UART_SetConfig+0x9a2>
 800a198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a19e:	d204      	bcs.n	800a1aa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1a6:	60da      	str	r2, [r3, #12]
 800a1a8:	e17f      	b.n	800a4aa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a1b0:	e17b      	b.n	800a4aa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	69db      	ldr	r3, [r3, #28]
 800a1b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1ba:	f040 80bd 	bne.w	800a338 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a1be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a1c2:	2b20      	cmp	r3, #32
 800a1c4:	dc48      	bgt.n	800a258 <UART_SetConfig+0xa50>
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	db7b      	blt.n	800a2c2 <UART_SetConfig+0xaba>
 800a1ca:	2b20      	cmp	r3, #32
 800a1cc:	d879      	bhi.n	800a2c2 <UART_SetConfig+0xaba>
 800a1ce:	a201      	add	r2, pc, #4	; (adr r2, 800a1d4 <UART_SetConfig+0x9cc>)
 800a1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d4:	0800a25f 	.word	0x0800a25f
 800a1d8:	0800a267 	.word	0x0800a267
 800a1dc:	0800a2c3 	.word	0x0800a2c3
 800a1e0:	0800a2c3 	.word	0x0800a2c3
 800a1e4:	0800a26f 	.word	0x0800a26f
 800a1e8:	0800a2c3 	.word	0x0800a2c3
 800a1ec:	0800a2c3 	.word	0x0800a2c3
 800a1f0:	0800a2c3 	.word	0x0800a2c3
 800a1f4:	0800a27f 	.word	0x0800a27f
 800a1f8:	0800a2c3 	.word	0x0800a2c3
 800a1fc:	0800a2c3 	.word	0x0800a2c3
 800a200:	0800a2c3 	.word	0x0800a2c3
 800a204:	0800a2c3 	.word	0x0800a2c3
 800a208:	0800a2c3 	.word	0x0800a2c3
 800a20c:	0800a2c3 	.word	0x0800a2c3
 800a210:	0800a2c3 	.word	0x0800a2c3
 800a214:	0800a28f 	.word	0x0800a28f
 800a218:	0800a2c3 	.word	0x0800a2c3
 800a21c:	0800a2c3 	.word	0x0800a2c3
 800a220:	0800a2c3 	.word	0x0800a2c3
 800a224:	0800a2c3 	.word	0x0800a2c3
 800a228:	0800a2c3 	.word	0x0800a2c3
 800a22c:	0800a2c3 	.word	0x0800a2c3
 800a230:	0800a2c3 	.word	0x0800a2c3
 800a234:	0800a2c3 	.word	0x0800a2c3
 800a238:	0800a2c3 	.word	0x0800a2c3
 800a23c:	0800a2c3 	.word	0x0800a2c3
 800a240:	0800a2c3 	.word	0x0800a2c3
 800a244:	0800a2c3 	.word	0x0800a2c3
 800a248:	0800a2c3 	.word	0x0800a2c3
 800a24c:	0800a2c3 	.word	0x0800a2c3
 800a250:	0800a2c3 	.word	0x0800a2c3
 800a254:	0800a2b5 	.word	0x0800a2b5
 800a258:	2b40      	cmp	r3, #64	; 0x40
 800a25a:	d02e      	beq.n	800a2ba <UART_SetConfig+0xab2>
 800a25c:	e031      	b.n	800a2c2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a25e:	f7fb fcb1 	bl	8005bc4 <HAL_RCC_GetPCLK1Freq>
 800a262:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a264:	e033      	b.n	800a2ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a266:	f7fb fcc3 	bl	8005bf0 <HAL_RCC_GetPCLK2Freq>
 800a26a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a26c:	e02f      	b.n	800a2ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a26e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a272:	4618      	mov	r0, r3
 800a274:	f7fc fea6 	bl	8006fc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a27c:	e027      	b.n	800a2ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a27e:	f107 0318 	add.w	r3, r7, #24
 800a282:	4618      	mov	r0, r3
 800a284:	f7fc fff2 	bl	800726c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a28c:	e01f      	b.n	800a2ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a28e:	4b69      	ldr	r3, [pc, #420]	; (800a434 <UART_SetConfig+0xc2c>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f003 0320 	and.w	r3, r3, #32
 800a296:	2b00      	cmp	r3, #0
 800a298:	d009      	beq.n	800a2ae <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a29a:	4b66      	ldr	r3, [pc, #408]	; (800a434 <UART_SetConfig+0xc2c>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	08db      	lsrs	r3, r3, #3
 800a2a0:	f003 0303 	and.w	r3, r3, #3
 800a2a4:	4a64      	ldr	r2, [pc, #400]	; (800a438 <UART_SetConfig+0xc30>)
 800a2a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2ac:	e00f      	b.n	800a2ce <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a2ae:	4b62      	ldr	r3, [pc, #392]	; (800a438 <UART_SetConfig+0xc30>)
 800a2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2b2:	e00c      	b.n	800a2ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2b4:	4b61      	ldr	r3, [pc, #388]	; (800a43c <UART_SetConfig+0xc34>)
 800a2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2b8:	e009      	b.n	800a2ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2c0:	e005      	b.n	800a2ce <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a2cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f000 80ea 	beq.w	800a4aa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2da:	4a55      	ldr	r2, [pc, #340]	; (800a430 <UART_SetConfig+0xc28>)
 800a2dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2e8:	005a      	lsls	r2, r3, #1
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	085b      	lsrs	r3, r3, #1
 800a2f0:	441a      	add	r2, r3
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	2b0f      	cmp	r3, #15
 800a300:	d916      	bls.n	800a330 <UART_SetConfig+0xb28>
 800a302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a308:	d212      	bcs.n	800a330 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	f023 030f 	bic.w	r3, r3, #15
 800a312:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a316:	085b      	lsrs	r3, r3, #1
 800a318:	b29b      	uxth	r3, r3
 800a31a:	f003 0307 	and.w	r3, r3, #7
 800a31e:	b29a      	uxth	r2, r3
 800a320:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a322:	4313      	orrs	r3, r2
 800a324:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a32c:	60da      	str	r2, [r3, #12]
 800a32e:	e0bc      	b.n	800a4aa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a336:	e0b8      	b.n	800a4aa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a338:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a33c:	2b20      	cmp	r3, #32
 800a33e:	dc4b      	bgt.n	800a3d8 <UART_SetConfig+0xbd0>
 800a340:	2b00      	cmp	r3, #0
 800a342:	f2c0 8087 	blt.w	800a454 <UART_SetConfig+0xc4c>
 800a346:	2b20      	cmp	r3, #32
 800a348:	f200 8084 	bhi.w	800a454 <UART_SetConfig+0xc4c>
 800a34c:	a201      	add	r2, pc, #4	; (adr r2, 800a354 <UART_SetConfig+0xb4c>)
 800a34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a352:	bf00      	nop
 800a354:	0800a3df 	.word	0x0800a3df
 800a358:	0800a3e7 	.word	0x0800a3e7
 800a35c:	0800a455 	.word	0x0800a455
 800a360:	0800a455 	.word	0x0800a455
 800a364:	0800a3ef 	.word	0x0800a3ef
 800a368:	0800a455 	.word	0x0800a455
 800a36c:	0800a455 	.word	0x0800a455
 800a370:	0800a455 	.word	0x0800a455
 800a374:	0800a3ff 	.word	0x0800a3ff
 800a378:	0800a455 	.word	0x0800a455
 800a37c:	0800a455 	.word	0x0800a455
 800a380:	0800a455 	.word	0x0800a455
 800a384:	0800a455 	.word	0x0800a455
 800a388:	0800a455 	.word	0x0800a455
 800a38c:	0800a455 	.word	0x0800a455
 800a390:	0800a455 	.word	0x0800a455
 800a394:	0800a40f 	.word	0x0800a40f
 800a398:	0800a455 	.word	0x0800a455
 800a39c:	0800a455 	.word	0x0800a455
 800a3a0:	0800a455 	.word	0x0800a455
 800a3a4:	0800a455 	.word	0x0800a455
 800a3a8:	0800a455 	.word	0x0800a455
 800a3ac:	0800a455 	.word	0x0800a455
 800a3b0:	0800a455 	.word	0x0800a455
 800a3b4:	0800a455 	.word	0x0800a455
 800a3b8:	0800a455 	.word	0x0800a455
 800a3bc:	0800a455 	.word	0x0800a455
 800a3c0:	0800a455 	.word	0x0800a455
 800a3c4:	0800a455 	.word	0x0800a455
 800a3c8:	0800a455 	.word	0x0800a455
 800a3cc:	0800a455 	.word	0x0800a455
 800a3d0:	0800a455 	.word	0x0800a455
 800a3d4:	0800a447 	.word	0x0800a447
 800a3d8:	2b40      	cmp	r3, #64	; 0x40
 800a3da:	d037      	beq.n	800a44c <UART_SetConfig+0xc44>
 800a3dc:	e03a      	b.n	800a454 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3de:	f7fb fbf1 	bl	8005bc4 <HAL_RCC_GetPCLK1Freq>
 800a3e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a3e4:	e03c      	b.n	800a460 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3e6:	f7fb fc03 	bl	8005bf0 <HAL_RCC_GetPCLK2Freq>
 800a3ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a3ec:	e038      	b.n	800a460 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fc fde6 	bl	8006fc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3fc:	e030      	b.n	800a460 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3fe:	f107 0318 	add.w	r3, r7, #24
 800a402:	4618      	mov	r0, r3
 800a404:	f7fc ff32 	bl	800726c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a40c:	e028      	b.n	800a460 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a40e:	4b09      	ldr	r3, [pc, #36]	; (800a434 <UART_SetConfig+0xc2c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f003 0320 	and.w	r3, r3, #32
 800a416:	2b00      	cmp	r3, #0
 800a418:	d012      	beq.n	800a440 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a41a:	4b06      	ldr	r3, [pc, #24]	; (800a434 <UART_SetConfig+0xc2c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	08db      	lsrs	r3, r3, #3
 800a420:	f003 0303 	and.w	r3, r3, #3
 800a424:	4a04      	ldr	r2, [pc, #16]	; (800a438 <UART_SetConfig+0xc30>)
 800a426:	fa22 f303 	lsr.w	r3, r2, r3
 800a42a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a42c:	e018      	b.n	800a460 <UART_SetConfig+0xc58>
 800a42e:	bf00      	nop
 800a430:	0800c7dc 	.word	0x0800c7dc
 800a434:	58024400 	.word	0x58024400
 800a438:	03d09000 	.word	0x03d09000
 800a43c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a440:	4b24      	ldr	r3, [pc, #144]	; (800a4d4 <UART_SetConfig+0xccc>)
 800a442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a444:	e00c      	b.n	800a460 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a446:	4b24      	ldr	r3, [pc, #144]	; (800a4d8 <UART_SetConfig+0xcd0>)
 800a448:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a44a:	e009      	b.n	800a460 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a44c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a450:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a452:	e005      	b.n	800a460 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a454:	2300      	movs	r3, #0
 800a456:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a45e:	bf00      	nop
    }

    if (pclk != 0U)
 800a460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a462:	2b00      	cmp	r3, #0
 800a464:	d021      	beq.n	800a4aa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46a:	4a1c      	ldr	r2, [pc, #112]	; (800a4dc <UART_SetConfig+0xcd4>)
 800a46c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a470:	461a      	mov	r2, r3
 800a472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a474:	fbb3 f2f2 	udiv	r2, r3, r2
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	085b      	lsrs	r3, r3, #1
 800a47e:	441a      	add	r2, r3
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	fbb2 f3f3 	udiv	r3, r2, r3
 800a488:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48c:	2b0f      	cmp	r3, #15
 800a48e:	d909      	bls.n	800a4a4 <UART_SetConfig+0xc9c>
 800a490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a496:	d205      	bcs.n	800a4a4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	60da      	str	r2, [r3, #12]
 800a4a2:	e002      	b.n	800a4aa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a4c6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3748      	adds	r7, #72	; 0x48
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4d4:	03d09000 	.word	0x03d09000
 800a4d8:	003d0900 	.word	0x003d0900
 800a4dc:	0800c7dc 	.word	0x0800c7dc

0800a4e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ec:	f003 0301 	and.w	r3, r3, #1
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d00a      	beq.n	800a50a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	430a      	orrs	r2, r1
 800a508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a50e:	f003 0302 	and.w	r3, r3, #2
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00a      	beq.n	800a52c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	430a      	orrs	r2, r1
 800a52a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a530:	f003 0304 	and.w	r3, r3, #4
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00a      	beq.n	800a54e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	430a      	orrs	r2, r1
 800a54c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a552:	f003 0308 	and.w	r3, r3, #8
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00a      	beq.n	800a570 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	430a      	orrs	r2, r1
 800a56e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a574:	f003 0310 	and.w	r3, r3, #16
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00a      	beq.n	800a592 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	430a      	orrs	r2, r1
 800a590:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a596:	f003 0320 	and.w	r3, r3, #32
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00a      	beq.n	800a5b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d01a      	beq.n	800a5f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5de:	d10a      	bne.n	800a5f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	430a      	orrs	r2, r1
 800a5f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00a      	beq.n	800a618 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	430a      	orrs	r2, r1
 800a616:	605a      	str	r2, [r3, #4]
  }
}
 800a618:	bf00      	nop
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b098      	sub	sp, #96	; 0x60
 800a628:	af02      	add	r7, sp, #8
 800a62a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a634:	f7f7 fd3e 	bl	80020b4 <HAL_GetTick>
 800a638:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f003 0308 	and.w	r3, r3, #8
 800a644:	2b08      	cmp	r3, #8
 800a646:	d12f      	bne.n	800a6a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a648:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a650:	2200      	movs	r2, #0
 800a652:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 f88e 	bl	800a778 <UART_WaitOnFlagUntilTimeout>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d022      	beq.n	800a6a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66a:	e853 3f00 	ldrex	r3, [r3]
 800a66e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a676:	653b      	str	r3, [r7, #80]	; 0x50
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	461a      	mov	r2, r3
 800a67e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a680:	647b      	str	r3, [r7, #68]	; 0x44
 800a682:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a684:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a686:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a688:	e841 2300 	strex	r3, r2, [r1]
 800a68c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a68e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a690:	2b00      	cmp	r3, #0
 800a692:	d1e6      	bne.n	800a662 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2220      	movs	r2, #32
 800a698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	e063      	b.n	800a770 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 0304 	and.w	r3, r3, #4
 800a6b2:	2b04      	cmp	r3, #4
 800a6b4:	d149      	bne.n	800a74a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6ba:	9300      	str	r3, [sp, #0]
 800a6bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f857 	bl	800a778 <UART_WaitOnFlagUntilTimeout>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d03c      	beq.n	800a74a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d8:	e853 3f00 	ldrex	r3, [r3]
 800a6dc:	623b      	str	r3, [r7, #32]
   return(result);
 800a6de:	6a3b      	ldr	r3, [r7, #32]
 800a6e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6ee:	633b      	str	r3, [r7, #48]	; 0x30
 800a6f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6f6:	e841 2300 	strex	r3, r2, [r1]
 800a6fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d1e6      	bne.n	800a6d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	3308      	adds	r3, #8
 800a708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	e853 3f00 	ldrex	r3, [r3]
 800a710:	60fb      	str	r3, [r7, #12]
   return(result);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f023 0301 	bic.w	r3, r3, #1
 800a718:	64bb      	str	r3, [r7, #72]	; 0x48
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	3308      	adds	r3, #8
 800a720:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a722:	61fa      	str	r2, [r7, #28]
 800a724:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a726:	69b9      	ldr	r1, [r7, #24]
 800a728:	69fa      	ldr	r2, [r7, #28]
 800a72a:	e841 2300 	strex	r3, r2, [r1]
 800a72e:	617b      	str	r3, [r7, #20]
   return(result);
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1e5      	bne.n	800a702 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2220      	movs	r2, #32
 800a73a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a746:	2303      	movs	r3, #3
 800a748:	e012      	b.n	800a770 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2220      	movs	r2, #32
 800a74e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2220      	movs	r2, #32
 800a756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3758      	adds	r7, #88	; 0x58
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	603b      	str	r3, [r7, #0]
 800a784:	4613      	mov	r3, r2
 800a786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a788:	e049      	b.n	800a81e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a790:	d045      	beq.n	800a81e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a792:	f7f7 fc8f 	bl	80020b4 <HAL_GetTick>
 800a796:	4602      	mov	r2, r0
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	1ad3      	subs	r3, r2, r3
 800a79c:	69ba      	ldr	r2, [r7, #24]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d302      	bcc.n	800a7a8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d101      	bne.n	800a7ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a7a8:	2303      	movs	r3, #3
 800a7aa:	e048      	b.n	800a83e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f003 0304 	and.w	r3, r3, #4
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d031      	beq.n	800a81e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	69db      	ldr	r3, [r3, #28]
 800a7c0:	f003 0308 	and.w	r3, r3, #8
 800a7c4:	2b08      	cmp	r3, #8
 800a7c6:	d110      	bne.n	800a7ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2208      	movs	r2, #8
 800a7ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f000 f95b 	bl	800aa8c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2208      	movs	r2, #8
 800a7da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e029      	b.n	800a83e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	69db      	ldr	r3, [r3, #28]
 800a7f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7f8:	d111      	bne.n	800a81e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a802:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f000 f941 	bl	800aa8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2220      	movs	r2, #32
 800a80e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2200      	movs	r2, #0
 800a816:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a81a:	2303      	movs	r3, #3
 800a81c:	e00f      	b.n	800a83e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	69da      	ldr	r2, [r3, #28]
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	4013      	ands	r3, r2
 800a828:	68ba      	ldr	r2, [r7, #8]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	bf0c      	ite	eq
 800a82e:	2301      	moveq	r3, #1
 800a830:	2300      	movne	r3, #0
 800a832:	b2db      	uxtb	r3, r3
 800a834:	461a      	mov	r2, r3
 800a836:	79fb      	ldrb	r3, [r7, #7]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d0a6      	beq.n	800a78a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
	...

0800a848 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a848:	b480      	push	{r7}
 800a84a:	b0a3      	sub	sp, #140	; 0x8c
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	4613      	mov	r3, r2
 800a854:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	68ba      	ldr	r2, [r7, #8]
 800a85a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	88fa      	ldrh	r2, [r7, #6]
 800a860:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	88fa      	ldrh	r2, [r7, #6]
 800a868:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2200      	movs	r2, #0
 800a870:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a87a:	d10e      	bne.n	800a89a <UART_Start_Receive_IT+0x52>
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	691b      	ldr	r3, [r3, #16]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d105      	bne.n	800a890 <UART_Start_Receive_IT+0x48>
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a88a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a88e:	e02d      	b.n	800a8ec <UART_Start_Receive_IT+0xa4>
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	22ff      	movs	r2, #255	; 0xff
 800a894:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a898:	e028      	b.n	800a8ec <UART_Start_Receive_IT+0xa4>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10d      	bne.n	800a8be <UART_Start_Receive_IT+0x76>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d104      	bne.n	800a8b4 <UART_Start_Receive_IT+0x6c>
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	22ff      	movs	r2, #255	; 0xff
 800a8ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a8b2:	e01b      	b.n	800a8ec <UART_Start_Receive_IT+0xa4>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	227f      	movs	r2, #127	; 0x7f
 800a8b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a8bc:	e016      	b.n	800a8ec <UART_Start_Receive_IT+0xa4>
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8c6:	d10d      	bne.n	800a8e4 <UART_Start_Receive_IT+0x9c>
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d104      	bne.n	800a8da <UART_Start_Receive_IT+0x92>
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	227f      	movs	r2, #127	; 0x7f
 800a8d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a8d8:	e008      	b.n	800a8ec <UART_Start_Receive_IT+0xa4>
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	223f      	movs	r2, #63	; 0x3f
 800a8de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a8e2:	e003      	b.n	800a8ec <UART_Start_Receive_IT+0xa4>
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2222      	movs	r2, #34	; 0x22
 800a8f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	3308      	adds	r3, #8
 800a902:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a906:	e853 3f00 	ldrex	r3, [r3]
 800a90a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a90c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a90e:	f043 0301 	orr.w	r3, r3, #1
 800a912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3308      	adds	r3, #8
 800a91c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a920:	673a      	str	r2, [r7, #112]	; 0x70
 800a922:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a924:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a926:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a928:	e841 2300 	strex	r3, r2, [r1]
 800a92c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a92e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1e3      	bne.n	800a8fc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a93c:	d14f      	bne.n	800a9de <UART_Start_Receive_IT+0x196>
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a944:	88fa      	ldrh	r2, [r7, #6]
 800a946:	429a      	cmp	r2, r3
 800a948:	d349      	bcc.n	800a9de <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a952:	d107      	bne.n	800a964 <UART_Start_Receive_IT+0x11c>
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d103      	bne.n	800a964 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	4a47      	ldr	r2, [pc, #284]	; (800aa7c <UART_Start_Receive_IT+0x234>)
 800a960:	675a      	str	r2, [r3, #116]	; 0x74
 800a962:	e002      	b.n	800a96a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	4a46      	ldr	r2, [pc, #280]	; (800aa80 <UART_Start_Receive_IT+0x238>)
 800a968:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d01a      	beq.n	800a9a8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a97a:	e853 3f00 	ldrex	r3, [r3]
 800a97e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a986:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	461a      	mov	r2, r3
 800a990:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a994:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a996:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a998:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a99a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a99c:	e841 2300 	strex	r3, r2, [r1]
 800a9a0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a9a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1e4      	bne.n	800a972 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3308      	adds	r3, #8
 800a9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9b2:	e853 3f00 	ldrex	r3, [r3]
 800a9b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9be:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	3308      	adds	r3, #8
 800a9c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a9c8:	64ba      	str	r2, [r7, #72]	; 0x48
 800a9ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a9ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9d0:	e841 2300 	strex	r3, r2, [r1]
 800a9d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a9d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1e5      	bne.n	800a9a8 <UART_Start_Receive_IT+0x160>
 800a9dc:	e046      	b.n	800aa6c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9e6:	d107      	bne.n	800a9f8 <UART_Start_Receive_IT+0x1b0>
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d103      	bne.n	800a9f8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	4a24      	ldr	r2, [pc, #144]	; (800aa84 <UART_Start_Receive_IT+0x23c>)
 800a9f4:	675a      	str	r2, [r3, #116]	; 0x74
 800a9f6:	e002      	b.n	800a9fe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	4a23      	ldr	r2, [pc, #140]	; (800aa88 <UART_Start_Receive_IT+0x240>)
 800a9fc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d019      	beq.n	800aa3a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0e:	e853 3f00 	ldrex	r3, [r3]
 800aa12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa16:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800aa1a:	677b      	str	r3, [r7, #116]	; 0x74
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	461a      	mov	r2, r3
 800aa22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa24:	637b      	str	r3, [r7, #52]	; 0x34
 800aa26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa2c:	e841 2300 	strex	r3, r2, [r1]
 800aa30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1e6      	bne.n	800aa06 <UART_Start_Receive_IT+0x1be>
 800aa38:	e018      	b.n	800aa6c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	e853 3f00 	ldrex	r3, [r3]
 800aa46:	613b      	str	r3, [r7, #16]
   return(result);
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	f043 0320 	orr.w	r3, r3, #32
 800aa4e:	67bb      	str	r3, [r7, #120]	; 0x78
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	461a      	mov	r2, r3
 800aa56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa58:	623b      	str	r3, [r7, #32]
 800aa5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa5c:	69f9      	ldr	r1, [r7, #28]
 800aa5e:	6a3a      	ldr	r2, [r7, #32]
 800aa60:	e841 2300 	strex	r3, r2, [r1]
 800aa64:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d1e6      	bne.n	800aa3a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800aa6c:	2300      	movs	r3, #0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	378c      	adds	r7, #140	; 0x8c
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	0800b5f1 	.word	0x0800b5f1
 800aa80:	0800b291 	.word	0x0800b291
 800aa84:	0800b0d9 	.word	0x0800b0d9
 800aa88:	0800af21 	.word	0x0800af21

0800aa8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b095      	sub	sp, #84	; 0x54
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa9c:	e853 3f00 	ldrex	r3, [r3]
 800aaa0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aaa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	461a      	mov	r2, r3
 800aab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aab2:	643b      	str	r3, [r7, #64]	; 0x40
 800aab4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aab8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aaba:	e841 2300 	strex	r3, r2, [r1]
 800aabe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1e6      	bne.n	800aa94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	3308      	adds	r3, #8
 800aacc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aace:	6a3b      	ldr	r3, [r7, #32]
 800aad0:	e853 3f00 	ldrex	r3, [r3]
 800aad4:	61fb      	str	r3, [r7, #28]
   return(result);
 800aad6:	69fa      	ldr	r2, [r7, #28]
 800aad8:	4b1e      	ldr	r3, [pc, #120]	; (800ab54 <UART_EndRxTransfer+0xc8>)
 800aada:	4013      	ands	r3, r2
 800aadc:	64bb      	str	r3, [r7, #72]	; 0x48
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3308      	adds	r3, #8
 800aae4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aae6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aae8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aaec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aaee:	e841 2300 	strex	r3, r2, [r1]
 800aaf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d1e5      	bne.n	800aac6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d118      	bne.n	800ab34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	e853 3f00 	ldrex	r3, [r3]
 800ab0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	f023 0310 	bic.w	r3, r3, #16
 800ab16:	647b      	str	r3, [r7, #68]	; 0x44
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab20:	61bb      	str	r3, [r7, #24]
 800ab22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab24:	6979      	ldr	r1, [r7, #20]
 800ab26:	69ba      	ldr	r2, [r7, #24]
 800ab28:	e841 2300 	strex	r3, r2, [r1]
 800ab2c:	613b      	str	r3, [r7, #16]
   return(result);
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1e6      	bne.n	800ab02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2220      	movs	r2, #32
 800ab38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ab48:	bf00      	nop
 800ab4a:	3754      	adds	r7, #84	; 0x54
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr
 800ab54:	effffffe 	.word	0xeffffffe

0800ab58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2200      	movs	r2, #0
 800ab72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f7fe fe30 	bl	80097dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab7c:	bf00      	nop
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b08f      	sub	sp, #60	; 0x3c
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab92:	2b21      	cmp	r3, #33	; 0x21
 800ab94:	d14c      	bne.n	800ac30 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d132      	bne.n	800ac08 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba8:	6a3b      	ldr	r3, [r7, #32]
 800abaa:	e853 3f00 	ldrex	r3, [r3]
 800abae:	61fb      	str	r3, [r7, #28]
   return(result);
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abb6:	637b      	str	r3, [r7, #52]	; 0x34
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	461a      	mov	r2, r3
 800abbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abc2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abc8:	e841 2300 	strex	r3, r2, [r1]
 800abcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1e6      	bne.n	800aba2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	e853 3f00 	ldrex	r3, [r3]
 800abe0:	60bb      	str	r3, [r7, #8]
   return(result);
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abe8:	633b      	str	r3, [r7, #48]	; 0x30
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	461a      	mov	r2, r3
 800abf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf2:	61bb      	str	r3, [r7, #24]
 800abf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf6:	6979      	ldr	r1, [r7, #20]
 800abf8:	69ba      	ldr	r2, [r7, #24]
 800abfa:	e841 2300 	strex	r3, r2, [r1]
 800abfe:	613b      	str	r3, [r7, #16]
   return(result);
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d1e6      	bne.n	800abd4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800ac06:	e013      	b.n	800ac30 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac0c:	781a      	ldrb	r2, [r3, #0]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac18:	1c5a      	adds	r2, r3, #1
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	3b01      	subs	r3, #1
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800ac30:	bf00      	nop
 800ac32:	373c      	adds	r7, #60	; 0x3c
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b091      	sub	sp, #68	; 0x44
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac4a:	2b21      	cmp	r3, #33	; 0x21
 800ac4c:	d151      	bne.n	800acf2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d132      	bne.n	800acc0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac62:	e853 3f00 	ldrex	r3, [r3]
 800ac66:	623b      	str	r3, [r7, #32]
   return(result);
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac6e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	461a      	mov	r2, r3
 800ac76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac78:	633b      	str	r3, [r7, #48]	; 0x30
 800ac7a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac80:	e841 2300 	strex	r3, r2, [r1]
 800ac84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d1e6      	bne.n	800ac5a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	e853 3f00 	ldrex	r3, [r3]
 800ac98:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aca0:	637b      	str	r3, [r7, #52]	; 0x34
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	461a      	mov	r2, r3
 800aca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acaa:	61fb      	str	r3, [r7, #28]
 800acac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acae:	69b9      	ldr	r1, [r7, #24]
 800acb0:	69fa      	ldr	r2, [r7, #28]
 800acb2:	e841 2300 	strex	r3, r2, [r1]
 800acb6:	617b      	str	r3, [r7, #20]
   return(result);
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1e6      	bne.n	800ac8c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800acbe:	e018      	b.n	800acf2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acc4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800acc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acc8:	881b      	ldrh	r3, [r3, #0]
 800acca:	461a      	mov	r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800acd4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acda:	1c9a      	adds	r2, r3, #2
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	3b01      	subs	r3, #1
 800acea:	b29a      	uxth	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800acf2:	bf00      	nop
 800acf4:	3744      	adds	r7, #68	; 0x44
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800acfe:	b480      	push	{r7}
 800ad00:	b091      	sub	sp, #68	; 0x44
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad0c:	2b21      	cmp	r3, #33	; 0x21
 800ad0e:	d160      	bne.n	800add2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ad16:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ad18:	e057      	b.n	800adca <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d133      	bne.n	800ad8e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3308      	adds	r3, #8
 800ad2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad30:	e853 3f00 	ldrex	r3, [r3]
 800ad34:	623b      	str	r3, [r7, #32]
   return(result);
 800ad36:	6a3b      	ldr	r3, [r7, #32]
 800ad38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ad3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	3308      	adds	r3, #8
 800ad44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad46:	633a      	str	r2, [r7, #48]	; 0x30
 800ad48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad4e:	e841 2300 	strex	r3, r2, [r1]
 800ad52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1e5      	bne.n	800ad26 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	e853 3f00 	ldrex	r3, [r3]
 800ad66:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	461a      	mov	r2, r3
 800ad76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad78:	61fb      	str	r3, [r7, #28]
 800ad7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7c:	69b9      	ldr	r1, [r7, #24]
 800ad7e:	69fa      	ldr	r2, [r7, #28]
 800ad80:	e841 2300 	strex	r3, r2, [r1]
 800ad84:	617b      	str	r3, [r7, #20]
   return(result);
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1e6      	bne.n	800ad5a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ad8c:	e021      	b.n	800add2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	69db      	ldr	r3, [r3, #28]
 800ad94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d013      	beq.n	800adc4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ada0:	781a      	ldrb	r2, [r3, #0]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adac:	1c5a      	adds	r2, r3, #1
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800adb8:	b29b      	uxth	r3, r3
 800adba:	3b01      	subs	r3, #1
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800adc4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800adc6:	3b01      	subs	r3, #1
 800adc8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800adca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1a4      	bne.n	800ad1a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800add0:	e7ff      	b.n	800add2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800add2:	bf00      	nop
 800add4:	3744      	adds	r7, #68	; 0x44
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr

0800adde <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800adde:	b480      	push	{r7}
 800ade0:	b091      	sub	sp, #68	; 0x44
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adec:	2b21      	cmp	r3, #33	; 0x21
 800adee:	d165      	bne.n	800aebc <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800adf6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800adf8:	e05c      	b.n	800aeb4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d133      	bne.n	800ae6e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	3308      	adds	r3, #8
 800ae0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0e:	6a3b      	ldr	r3, [r7, #32]
 800ae10:	e853 3f00 	ldrex	r3, [r3]
 800ae14:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ae1c:	637b      	str	r3, [r7, #52]	; 0x34
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3308      	adds	r3, #8
 800ae24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae26:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae2e:	e841 2300 	strex	r3, r2, [r1]
 800ae32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1e5      	bne.n	800ae06 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	e853 3f00 	ldrex	r3, [r3]
 800ae46:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae4e:	633b      	str	r3, [r7, #48]	; 0x30
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	461a      	mov	r2, r3
 800ae56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae58:	61bb      	str	r3, [r7, #24]
 800ae5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5c:	6979      	ldr	r1, [r7, #20]
 800ae5e:	69ba      	ldr	r2, [r7, #24]
 800ae60:	e841 2300 	strex	r3, r2, [r1]
 800ae64:	613b      	str	r3, [r7, #16]
   return(result);
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d1e6      	bne.n	800ae3a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ae6c:	e026      	b.n	800aebc <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	69db      	ldr	r3, [r3, #28]
 800ae74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d018      	beq.n	800aeae <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae80:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ae82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae84:	881b      	ldrh	r3, [r3, #0]
 800ae86:	461a      	mov	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae90:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae96:	1c9a      	adds	r2, r3, #2
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	3b01      	subs	r3, #1
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800aeae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aeb0:	3b01      	subs	r3, #1
 800aeb2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800aeb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d19f      	bne.n	800adfa <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800aeba:	e7ff      	b.n	800aebc <UART_TxISR_16BIT_FIFOEN+0xde>
 800aebc:	bf00      	nop
 800aebe:	3744      	adds	r7, #68	; 0x44
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b088      	sub	sp, #32
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	e853 3f00 	ldrex	r3, [r3]
 800aedc:	60bb      	str	r3, [r7, #8]
   return(result);
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aee4:	61fb      	str	r3, [r7, #28]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	461a      	mov	r2, r3
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	61bb      	str	r3, [r7, #24]
 800aef0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef2:	6979      	ldr	r1, [r7, #20]
 800aef4:	69ba      	ldr	r2, [r7, #24]
 800aef6:	e841 2300 	strex	r3, r2, [r1]
 800aefa:	613b      	str	r3, [r7, #16]
   return(result);
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d1e6      	bne.n	800aed0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2220      	movs	r2, #32
 800af06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2200      	movs	r2, #0
 800af0e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7fe fc59 	bl	80097c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af16:	bf00      	nop
 800af18:	3720      	adds	r7, #32
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
	...

0800af20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b09c      	sub	sp, #112	; 0x70
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800af2e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af38:	2b22      	cmp	r3, #34	; 0x22
 800af3a:	f040 80be 	bne.w	800b0ba <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af44:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800af48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800af4c:	b2d9      	uxtb	r1, r3
 800af4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800af52:	b2da      	uxtb	r2, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af58:	400a      	ands	r2, r1
 800af5a:	b2d2      	uxtb	r2, r2
 800af5c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af62:	1c5a      	adds	r2, r3, #1
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af6e:	b29b      	uxth	r3, r3
 800af70:	3b01      	subs	r3, #1
 800af72:	b29a      	uxth	r2, r3
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af80:	b29b      	uxth	r3, r3
 800af82:	2b00      	cmp	r3, #0
 800af84:	f040 80a1 	bne.w	800b0ca <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af90:	e853 3f00 	ldrex	r3, [r3]
 800af94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800af96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af9c:	66bb      	str	r3, [r7, #104]	; 0x68
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	461a      	mov	r2, r3
 800afa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800afa6:	65bb      	str	r3, [r7, #88]	; 0x58
 800afa8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afaa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800afac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800afae:	e841 2300 	strex	r3, r2, [r1]
 800afb2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800afb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d1e6      	bne.n	800af88 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	3308      	adds	r3, #8
 800afc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc4:	e853 3f00 	ldrex	r3, [r3]
 800afc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800afca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afcc:	f023 0301 	bic.w	r3, r3, #1
 800afd0:	667b      	str	r3, [r7, #100]	; 0x64
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	3308      	adds	r3, #8
 800afd8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800afda:	647a      	str	r2, [r7, #68]	; 0x44
 800afdc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800afe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afe2:	e841 2300 	strex	r3, r2, [r1]
 800afe6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800afe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1e5      	bne.n	800afba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2220      	movs	r2, #32
 800aff2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a33      	ldr	r2, [pc, #204]	; (800b0d4 <UART_RxISR_8BIT+0x1b4>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d01f      	beq.n	800b04c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b016:	2b00      	cmp	r3, #0
 800b018:	d018      	beq.n	800b04c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b022:	e853 3f00 	ldrex	r3, [r3]
 800b026:	623b      	str	r3, [r7, #32]
   return(result);
 800b028:	6a3b      	ldr	r3, [r7, #32]
 800b02a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b02e:	663b      	str	r3, [r7, #96]	; 0x60
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	461a      	mov	r2, r3
 800b036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b038:	633b      	str	r3, [r7, #48]	; 0x30
 800b03a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b03c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b03e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b040:	e841 2300 	strex	r3, r2, [r1]
 800b044:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1e6      	bne.n	800b01a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b050:	2b01      	cmp	r3, #1
 800b052:	d12e      	bne.n	800b0b2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	e853 3f00 	ldrex	r3, [r3]
 800b066:	60fb      	str	r3, [r7, #12]
   return(result);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f023 0310 	bic.w	r3, r3, #16
 800b06e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	461a      	mov	r2, r3
 800b076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b078:	61fb      	str	r3, [r7, #28]
 800b07a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b07c:	69b9      	ldr	r1, [r7, #24]
 800b07e:	69fa      	ldr	r2, [r7, #28]
 800b080:	e841 2300 	strex	r3, r2, [r1]
 800b084:	617b      	str	r3, [r7, #20]
   return(result);
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d1e6      	bne.n	800b05a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	69db      	ldr	r3, [r3, #28]
 800b092:	f003 0310 	and.w	r3, r3, #16
 800b096:	2b10      	cmp	r3, #16
 800b098:	d103      	bne.n	800b0a2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	2210      	movs	r2, #16
 800b0a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f7fe fba0 	bl	80097f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b0b0:	e00b      	b.n	800b0ca <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f7f6 ff30 	bl	8001f18 <HAL_UART_RxCpltCallback>
}
 800b0b8:	e007      	b.n	800b0ca <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	699a      	ldr	r2, [r3, #24]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f042 0208 	orr.w	r2, r2, #8
 800b0c8:	619a      	str	r2, [r3, #24]
}
 800b0ca:	bf00      	nop
 800b0cc:	3770      	adds	r7, #112	; 0x70
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	58000c00 	.word	0x58000c00

0800b0d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b09c      	sub	sp, #112	; 0x70
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b0e6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0f0:	2b22      	cmp	r3, #34	; 0x22
 800b0f2:	f040 80be 	bne.w	800b272 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b104:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b106:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800b10a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b10e:	4013      	ands	r3, r2
 800b110:	b29a      	uxth	r2, r3
 800b112:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b114:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b11a:	1c9a      	adds	r2, r3, #2
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b126:	b29b      	uxth	r3, r3
 800b128:	3b01      	subs	r3, #1
 800b12a:	b29a      	uxth	r2, r3
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b138:	b29b      	uxth	r3, r3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f040 80a1 	bne.w	800b282 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b148:	e853 3f00 	ldrex	r3, [r3]
 800b14c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b14e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b150:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b154:	667b      	str	r3, [r7, #100]	; 0x64
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	461a      	mov	r2, r3
 800b15c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b15e:	657b      	str	r3, [r7, #84]	; 0x54
 800b160:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b162:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b164:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b166:	e841 2300 	strex	r3, r2, [r1]
 800b16a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b16c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d1e6      	bne.n	800b140 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	3308      	adds	r3, #8
 800b178:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b17c:	e853 3f00 	ldrex	r3, [r3]
 800b180:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b184:	f023 0301 	bic.w	r3, r3, #1
 800b188:	663b      	str	r3, [r7, #96]	; 0x60
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	3308      	adds	r3, #8
 800b190:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b192:	643a      	str	r2, [r7, #64]	; 0x40
 800b194:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b196:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b198:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b19a:	e841 2300 	strex	r3, r2, [r1]
 800b19e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d1e5      	bne.n	800b172 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2220      	movs	r2, #32
 800b1aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a33      	ldr	r2, [pc, #204]	; (800b28c <UART_RxISR_16BIT+0x1b4>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d01f      	beq.n	800b204 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d018      	beq.n	800b204 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d8:	6a3b      	ldr	r3, [r7, #32]
 800b1da:	e853 3f00 	ldrex	r3, [r3]
 800b1de:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b1e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1f2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1f8:	e841 2300 	strex	r3, r2, [r1]
 800b1fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b200:	2b00      	cmp	r3, #0
 800b202:	d1e6      	bne.n	800b1d2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d12e      	bne.n	800b26a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	e853 3f00 	ldrex	r3, [r3]
 800b21e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	f023 0310 	bic.w	r3, r3, #16
 800b226:	65bb      	str	r3, [r7, #88]	; 0x58
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	461a      	mov	r2, r3
 800b22e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b230:	61bb      	str	r3, [r7, #24]
 800b232:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b234:	6979      	ldr	r1, [r7, #20]
 800b236:	69ba      	ldr	r2, [r7, #24]
 800b238:	e841 2300 	strex	r3, r2, [r1]
 800b23c:	613b      	str	r3, [r7, #16]
   return(result);
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d1e6      	bne.n	800b212 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	69db      	ldr	r3, [r3, #28]
 800b24a:	f003 0310 	and.w	r3, r3, #16
 800b24e:	2b10      	cmp	r3, #16
 800b250:	d103      	bne.n	800b25a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2210      	movs	r2, #16
 800b258:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b260:	4619      	mov	r1, r3
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f7fe fac4 	bl	80097f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b268:	e00b      	b.n	800b282 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f7f6 fe54 	bl	8001f18 <HAL_UART_RxCpltCallback>
}
 800b270:	e007      	b.n	800b282 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	699a      	ldr	r2, [r3, #24]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f042 0208 	orr.w	r2, r2, #8
 800b280:	619a      	str	r2, [r3, #24]
}
 800b282:	bf00      	nop
 800b284:	3770      	adds	r7, #112	; 0x70
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	58000c00 	.word	0x58000c00

0800b290 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b0ac      	sub	sp, #176	; 0xb0
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b29e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	69db      	ldr	r3, [r3, #28]
 800b2a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2c6:	2b22      	cmp	r3, #34	; 0x22
 800b2c8:	f040 8180 	bne.w	800b5cc <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b2d2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b2d6:	e123      	b.n	800b520 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2de:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b2e2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b2e6:	b2d9      	uxtb	r1, r3
 800b2e8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b2ec:	b2da      	uxtb	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2f2:	400a      	ands	r2, r1
 800b2f4:	b2d2      	uxtb	r2, r2
 800b2f6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2fc:	1c5a      	adds	r2, r3, #1
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b308:	b29b      	uxth	r3, r3
 800b30a:	3b01      	subs	r3, #1
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	69db      	ldr	r3, [r3, #28]
 800b31a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b31e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b322:	f003 0307 	and.w	r3, r3, #7
 800b326:	2b00      	cmp	r3, #0
 800b328:	d053      	beq.n	800b3d2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b32a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b32e:	f003 0301 	and.w	r3, r3, #1
 800b332:	2b00      	cmp	r3, #0
 800b334:	d011      	beq.n	800b35a <UART_RxISR_8BIT_FIFOEN+0xca>
 800b336:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b33a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d00b      	beq.n	800b35a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2201      	movs	r2, #1
 800b348:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b350:	f043 0201 	orr.w	r2, r3, #1
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b35a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b35e:	f003 0302 	and.w	r3, r3, #2
 800b362:	2b00      	cmp	r3, #0
 800b364:	d011      	beq.n	800b38a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b36a:	f003 0301 	and.w	r3, r3, #1
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00b      	beq.n	800b38a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2202      	movs	r2, #2
 800b378:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b380:	f043 0204 	orr.w	r2, r3, #4
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b38a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b38e:	f003 0304 	and.w	r3, r3, #4
 800b392:	2b00      	cmp	r3, #0
 800b394:	d011      	beq.n	800b3ba <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b39a:	f003 0301 	and.w	r3, r3, #1
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00b      	beq.n	800b3ba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2204      	movs	r2, #4
 800b3a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3b0:	f043 0202 	orr.w	r2, r3, #2
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d006      	beq.n	800b3d2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f7fe fa09 	bl	80097dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f040 80a0 	bne.w	800b520 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3e8:	e853 3f00 	ldrex	r3, [r3]
 800b3ec:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800b3ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b402:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b404:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b406:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b408:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b40a:	e841 2300 	strex	r3, r2, [r1]
 800b40e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800b410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b412:	2b00      	cmp	r3, #0
 800b414:	d1e4      	bne.n	800b3e0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	3308      	adds	r3, #8
 800b41c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b420:	e853 3f00 	ldrex	r3, [r3]
 800b424:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b426:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b428:	4b6e      	ldr	r3, [pc, #440]	; (800b5e4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800b42a:	4013      	ands	r3, r2
 800b42c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	3308      	adds	r3, #8
 800b436:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b43a:	66ba      	str	r2, [r7, #104]	; 0x68
 800b43c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b43e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b440:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b442:	e841 2300 	strex	r3, r2, [r1]
 800b446:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b448:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d1e3      	bne.n	800b416 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2220      	movs	r2, #32
 800b452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a60      	ldr	r2, [pc, #384]	; (800b5e8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d021      	beq.n	800b4b0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b476:	2b00      	cmp	r3, #0
 800b478:	d01a      	beq.n	800b4b0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b482:	e853 3f00 	ldrex	r3, [r3]
 800b486:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b48a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b48e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	461a      	mov	r2, r3
 800b498:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b49c:	657b      	str	r3, [r7, #84]	; 0x54
 800b49e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b4a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b4a4:	e841 2300 	strex	r3, r2, [r1]
 800b4a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b4aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d1e4      	bne.n	800b47a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d130      	bne.n	800b51a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4c6:	e853 3f00 	ldrex	r3, [r3]
 800b4ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ce:	f023 0310 	bic.w	r3, r3, #16
 800b4d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	461a      	mov	r2, r3
 800b4dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4e0:	643b      	str	r3, [r7, #64]	; 0x40
 800b4e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b4e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4e8:	e841 2300 	strex	r3, r2, [r1]
 800b4ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1e4      	bne.n	800b4be <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	69db      	ldr	r3, [r3, #28]
 800b4fa:	f003 0310 	and.w	r3, r3, #16
 800b4fe:	2b10      	cmp	r3, #16
 800b500:	d103      	bne.n	800b50a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2210      	movs	r2, #16
 800b508:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b510:	4619      	mov	r1, r3
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f7fe f96c 	bl	80097f0 <HAL_UARTEx_RxEventCallback>
 800b518:	e002      	b.n	800b520 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f7f6 fcfc 	bl	8001f18 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b520:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800b524:	2b00      	cmp	r3, #0
 800b526:	d006      	beq.n	800b536 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800b528:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b52c:	f003 0320 	and.w	r3, r3, #32
 800b530:	2b00      	cmp	r3, #0
 800b532:	f47f aed1 	bne.w	800b2d8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b53c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b540:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b544:	2b00      	cmp	r3, #0
 800b546:	d049      	beq.n	800b5dc <UART_RxISR_8BIT_FIFOEN+0x34c>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b54e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800b552:	429a      	cmp	r2, r3
 800b554:	d242      	bcs.n	800b5dc <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	3308      	adds	r3, #8
 800b55c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b55e:	6a3b      	ldr	r3, [r7, #32]
 800b560:	e853 3f00 	ldrex	r3, [r3]
 800b564:	61fb      	str	r3, [r7, #28]
   return(result);
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b56c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	3308      	adds	r3, #8
 800b576:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b57a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b57c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b57e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b582:	e841 2300 	strex	r3, r2, [r1]
 800b586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1e3      	bne.n	800b556 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4a16      	ldr	r2, [pc, #88]	; (800b5ec <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b592:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	e853 3f00 	ldrex	r3, [r3]
 800b5a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	f043 0320 	orr.w	r3, r3, #32
 800b5a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b5b6:	61bb      	str	r3, [r7, #24]
 800b5b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ba:	6979      	ldr	r1, [r7, #20]
 800b5bc:	69ba      	ldr	r2, [r7, #24]
 800b5be:	e841 2300 	strex	r3, r2, [r1]
 800b5c2:	613b      	str	r3, [r7, #16]
   return(result);
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1e4      	bne.n	800b594 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b5ca:	e007      	b.n	800b5dc <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	699a      	ldr	r2, [r3, #24]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f042 0208 	orr.w	r2, r2, #8
 800b5da:	619a      	str	r2, [r3, #24]
}
 800b5dc:	bf00      	nop
 800b5de:	37b0      	adds	r7, #176	; 0xb0
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	effffffe 	.word	0xeffffffe
 800b5e8:	58000c00 	.word	0x58000c00
 800b5ec:	0800af21 	.word	0x0800af21

0800b5f0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b0ae      	sub	sp, #184	; 0xb8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b5fe:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	69db      	ldr	r3, [r3, #28]
 800b608:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b626:	2b22      	cmp	r3, #34	; 0x22
 800b628:	f040 8184 	bne.w	800b934 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b632:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b636:	e127      	b.n	800b888 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b646:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b64a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800b64e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800b652:	4013      	ands	r3, r2
 800b654:	b29a      	uxth	r2, r3
 800b656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b65a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b660:	1c9a      	adds	r2, r3, #2
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	3b01      	subs	r3, #1
 800b670:	b29a      	uxth	r2, r3
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	69db      	ldr	r3, [r3, #28]
 800b67e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b682:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b686:	f003 0307 	and.w	r3, r3, #7
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d053      	beq.n	800b736 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b68e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b692:	f003 0301 	and.w	r3, r3, #1
 800b696:	2b00      	cmp	r3, #0
 800b698:	d011      	beq.n	800b6be <UART_RxISR_16BIT_FIFOEN+0xce>
 800b69a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b69e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d00b      	beq.n	800b6be <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6b4:	f043 0201 	orr.w	r2, r3, #1
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b6be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b6c2:	f003 0302 	and.w	r3, r3, #2
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d011      	beq.n	800b6ee <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b6ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b6ce:	f003 0301 	and.w	r3, r3, #1
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00b      	beq.n	800b6ee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2202      	movs	r2, #2
 800b6dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6e4:	f043 0204 	orr.w	r2, r3, #4
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b6ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b6f2:	f003 0304 	and.w	r3, r3, #4
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d011      	beq.n	800b71e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b6fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b6fe:	f003 0301 	and.w	r3, r3, #1
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00b      	beq.n	800b71e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2204      	movs	r2, #4
 800b70c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b714:	f043 0202 	orr.w	r2, r3, #2
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b724:	2b00      	cmp	r3, #0
 800b726:	d006      	beq.n	800b736 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f7fe f857 	bl	80097dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	2b00      	cmp	r3, #0
 800b740:	f040 80a2 	bne.w	800b888 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b74c:	e853 3f00 	ldrex	r3, [r3]
 800b750:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b752:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b758:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	461a      	mov	r2, r3
 800b762:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b766:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b76a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b76e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b772:	e841 2300 	strex	r3, r2, [r1]
 800b776:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b778:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1e2      	bne.n	800b744 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	3308      	adds	r3, #8
 800b784:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b786:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b788:	e853 3f00 	ldrex	r3, [r3]
 800b78c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b78e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b790:	4b6e      	ldr	r3, [pc, #440]	; (800b94c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800b792:	4013      	ands	r3, r2
 800b794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	3308      	adds	r3, #8
 800b79e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b7a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b7a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b7a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b7aa:	e841 2300 	strex	r3, r2, [r1]
 800b7ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b7b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1e3      	bne.n	800b77e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2220      	movs	r2, #32
 800b7ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4a60      	ldr	r2, [pc, #384]	; (800b950 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d021      	beq.n	800b818 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d01a      	beq.n	800b818 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7ea:	e853 3f00 	ldrex	r3, [r3]
 800b7ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b7f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b7f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	461a      	mov	r2, r3
 800b800:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b804:	65bb      	str	r3, [r7, #88]	; 0x58
 800b806:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b808:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b80a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b80c:	e841 2300 	strex	r3, r2, [r1]
 800b810:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b814:	2b00      	cmp	r3, #0
 800b816:	d1e4      	bne.n	800b7e2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d130      	bne.n	800b882 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82e:	e853 3f00 	ldrex	r3, [r3]
 800b832:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b836:	f023 0310 	bic.w	r3, r3, #16
 800b83a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	461a      	mov	r2, r3
 800b844:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b848:	647b      	str	r3, [r7, #68]	; 0x44
 800b84a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b84c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b84e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b850:	e841 2300 	strex	r3, r2, [r1]
 800b854:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1e4      	bne.n	800b826 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	69db      	ldr	r3, [r3, #28]
 800b862:	f003 0310 	and.w	r3, r3, #16
 800b866:	2b10      	cmp	r3, #16
 800b868:	d103      	bne.n	800b872 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2210      	movs	r2, #16
 800b870:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b878:	4619      	mov	r1, r3
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f7fd ffb8 	bl	80097f0 <HAL_UARTEx_RxEventCallback>
 800b880:	e002      	b.n	800b888 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f7f6 fb48 	bl	8001f18 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b888:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d006      	beq.n	800b89e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800b890:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b894:	f003 0320 	and.w	r3, r3, #32
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f47f aecd 	bne.w	800b638 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b8a4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b8a8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d049      	beq.n	800b944 <UART_RxISR_16BIT_FIFOEN+0x354>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b8b6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d242      	bcs.n	800b944 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	3308      	adds	r3, #8
 800b8c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c8:	e853 3f00 	ldrex	r3, [r3]
 800b8cc:	623b      	str	r3, [r7, #32]
   return(result);
 800b8ce:	6a3b      	ldr	r3, [r7, #32]
 800b8d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	3308      	adds	r3, #8
 800b8de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b8e2:	633a      	str	r2, [r7, #48]	; 0x30
 800b8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8ea:	e841 2300 	strex	r3, r2, [r1]
 800b8ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d1e3      	bne.n	800b8be <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4a16      	ldr	r2, [pc, #88]	; (800b954 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b8fa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	e853 3f00 	ldrex	r3, [r3]
 800b908:	60fb      	str	r3, [r7, #12]
   return(result);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f043 0320 	orr.w	r3, r3, #32
 800b910:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	461a      	mov	r2, r3
 800b91a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b91e:	61fb      	str	r3, [r7, #28]
 800b920:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b922:	69b9      	ldr	r1, [r7, #24]
 800b924:	69fa      	ldr	r2, [r7, #28]
 800b926:	e841 2300 	strex	r3, r2, [r1]
 800b92a:	617b      	str	r3, [r7, #20]
   return(result);
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1e4      	bne.n	800b8fc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b932:	e007      	b.n	800b944 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	699a      	ldr	r2, [r3, #24]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f042 0208 	orr.w	r2, r2, #8
 800b942:	619a      	str	r2, [r3, #24]
}
 800b944:	bf00      	nop
 800b946:	37b8      	adds	r7, #184	; 0xb8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	effffffe 	.word	0xeffffffe
 800b950:	58000c00 	.word	0x58000c00
 800b954:	0800b0d9 	.word	0x0800b0d9

0800b958 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b960:	bf00      	nop
 800b962:	370c      	adds	r7, #12
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b974:	bf00      	nop
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b988:	bf00      	nop
 800b98a:	370c      	adds	r7, #12
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr

0800b994 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d101      	bne.n	800b9aa <HAL_UARTEx_DisableFifoMode+0x16>
 800b9a6:	2302      	movs	r3, #2
 800b9a8:	e027      	b.n	800b9fa <HAL_UARTEx_DisableFifoMode+0x66>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2224      	movs	r2, #36	; 0x24
 800b9b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f022 0201 	bic.w	r2, r2, #1
 800b9d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b9d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2220      	movs	r2, #32
 800b9ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3714      	adds	r7, #20
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr

0800ba06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b084      	sub	sp, #16
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
 800ba0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d101      	bne.n	800ba1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ba1a:	2302      	movs	r3, #2
 800ba1c:	e02d      	b.n	800ba7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2201      	movs	r2, #1
 800ba22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2224      	movs	r2, #36	; 0x24
 800ba2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f022 0201 	bic.w	r2, r2, #1
 800ba44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	683a      	ldr	r2, [r7, #0]
 800ba56:	430a      	orrs	r2, r1
 800ba58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 f850 	bl	800bb00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	68fa      	ldr	r2, [r7, #12]
 800ba66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2220      	movs	r2, #32
 800ba6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b084      	sub	sp, #16
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
 800ba8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d101      	bne.n	800ba9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba96:	2302      	movs	r3, #2
 800ba98:	e02d      	b.n	800baf6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2224      	movs	r2, #36	; 0x24
 800baa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f022 0201 	bic.w	r2, r2, #1
 800bac0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	683a      	ldr	r2, [r7, #0]
 800bad2:	430a      	orrs	r2, r1
 800bad4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 f812 	bl	800bb00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	68fa      	ldr	r2, [r7, #12]
 800bae2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2220      	movs	r2, #32
 800bae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
	...

0800bb00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b085      	sub	sp, #20
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d108      	bne.n	800bb22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2201      	movs	r2, #1
 800bb14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb20:	e031      	b.n	800bb86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb22:	2310      	movs	r3, #16
 800bb24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb26:	2310      	movs	r3, #16
 800bb28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	0e5b      	lsrs	r3, r3, #25
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	f003 0307 	and.w	r3, r3, #7
 800bb38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	0f5b      	lsrs	r3, r3, #29
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	f003 0307 	and.w	r3, r3, #7
 800bb48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb4a:	7bbb      	ldrb	r3, [r7, #14]
 800bb4c:	7b3a      	ldrb	r2, [r7, #12]
 800bb4e:	4911      	ldr	r1, [pc, #68]	; (800bb94 <UARTEx_SetNbDataToProcess+0x94>)
 800bb50:	5c8a      	ldrb	r2, [r1, r2]
 800bb52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb56:	7b3a      	ldrb	r2, [r7, #12]
 800bb58:	490f      	ldr	r1, [pc, #60]	; (800bb98 <UARTEx_SetNbDataToProcess+0x98>)
 800bb5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb60:	b29a      	uxth	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
 800bb6a:	7b7a      	ldrb	r2, [r7, #13]
 800bb6c:	4909      	ldr	r1, [pc, #36]	; (800bb94 <UARTEx_SetNbDataToProcess+0x94>)
 800bb6e:	5c8a      	ldrb	r2, [r1, r2]
 800bb70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb74:	7b7a      	ldrb	r2, [r7, #13]
 800bb76:	4908      	ldr	r1, [pc, #32]	; (800bb98 <UARTEx_SetNbDataToProcess+0x98>)
 800bb78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb7e:	b29a      	uxth	r2, r3
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bb86:	bf00      	nop
 800bb88:	3714      	adds	r7, #20
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop
 800bb94:	0800c7f4 	.word	0x0800c7f4
 800bb98:	0800c7fc 	.word	0x0800c7fc

0800bb9c <__errno>:
 800bb9c:	4b01      	ldr	r3, [pc, #4]	; (800bba4 <__errno+0x8>)
 800bb9e:	6818      	ldr	r0, [r3, #0]
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	24000020 	.word	0x24000020

0800bba8 <__libc_init_array>:
 800bba8:	b570      	push	{r4, r5, r6, lr}
 800bbaa:	4d0d      	ldr	r5, [pc, #52]	; (800bbe0 <__libc_init_array+0x38>)
 800bbac:	4c0d      	ldr	r4, [pc, #52]	; (800bbe4 <__libc_init_array+0x3c>)
 800bbae:	1b64      	subs	r4, r4, r5
 800bbb0:	10a4      	asrs	r4, r4, #2
 800bbb2:	2600      	movs	r6, #0
 800bbb4:	42a6      	cmp	r6, r4
 800bbb6:	d109      	bne.n	800bbcc <__libc_init_array+0x24>
 800bbb8:	4d0b      	ldr	r5, [pc, #44]	; (800bbe8 <__libc_init_array+0x40>)
 800bbba:	4c0c      	ldr	r4, [pc, #48]	; (800bbec <__libc_init_array+0x44>)
 800bbbc:	f000 fca2 	bl	800c504 <_init>
 800bbc0:	1b64      	subs	r4, r4, r5
 800bbc2:	10a4      	asrs	r4, r4, #2
 800bbc4:	2600      	movs	r6, #0
 800bbc6:	42a6      	cmp	r6, r4
 800bbc8:	d105      	bne.n	800bbd6 <__libc_init_array+0x2e>
 800bbca:	bd70      	pop	{r4, r5, r6, pc}
 800bbcc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbd0:	4798      	blx	r3
 800bbd2:	3601      	adds	r6, #1
 800bbd4:	e7ee      	b.n	800bbb4 <__libc_init_array+0xc>
 800bbd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbda:	4798      	blx	r3
 800bbdc:	3601      	adds	r6, #1
 800bbde:	e7f2      	b.n	800bbc6 <__libc_init_array+0x1e>
 800bbe0:	0800c840 	.word	0x0800c840
 800bbe4:	0800c840 	.word	0x0800c840
 800bbe8:	0800c840 	.word	0x0800c840
 800bbec:	0800c844 	.word	0x0800c844

0800bbf0 <memcpy>:
 800bbf0:	440a      	add	r2, r1
 800bbf2:	4291      	cmp	r1, r2
 800bbf4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bbf8:	d100      	bne.n	800bbfc <memcpy+0xc>
 800bbfa:	4770      	bx	lr
 800bbfc:	b510      	push	{r4, lr}
 800bbfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc06:	4291      	cmp	r1, r2
 800bc08:	d1f9      	bne.n	800bbfe <memcpy+0xe>
 800bc0a:	bd10      	pop	{r4, pc}

0800bc0c <memset>:
 800bc0c:	4402      	add	r2, r0
 800bc0e:	4603      	mov	r3, r0
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d100      	bne.n	800bc16 <memset+0xa>
 800bc14:	4770      	bx	lr
 800bc16:	f803 1b01 	strb.w	r1, [r3], #1
 800bc1a:	e7f9      	b.n	800bc10 <memset+0x4>

0800bc1c <sniprintf>:
 800bc1c:	b40c      	push	{r2, r3}
 800bc1e:	b530      	push	{r4, r5, lr}
 800bc20:	4b17      	ldr	r3, [pc, #92]	; (800bc80 <sniprintf+0x64>)
 800bc22:	1e0c      	subs	r4, r1, #0
 800bc24:	681d      	ldr	r5, [r3, #0]
 800bc26:	b09d      	sub	sp, #116	; 0x74
 800bc28:	da08      	bge.n	800bc3c <sniprintf+0x20>
 800bc2a:	238b      	movs	r3, #139	; 0x8b
 800bc2c:	602b      	str	r3, [r5, #0]
 800bc2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc32:	b01d      	add	sp, #116	; 0x74
 800bc34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc38:	b002      	add	sp, #8
 800bc3a:	4770      	bx	lr
 800bc3c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bc40:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bc44:	bf14      	ite	ne
 800bc46:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800bc4a:	4623      	moveq	r3, r4
 800bc4c:	9304      	str	r3, [sp, #16]
 800bc4e:	9307      	str	r3, [sp, #28]
 800bc50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc54:	9002      	str	r0, [sp, #8]
 800bc56:	9006      	str	r0, [sp, #24]
 800bc58:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bc5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bc5e:	ab21      	add	r3, sp, #132	; 0x84
 800bc60:	a902      	add	r1, sp, #8
 800bc62:	4628      	mov	r0, r5
 800bc64:	9301      	str	r3, [sp, #4]
 800bc66:	f000 f869 	bl	800bd3c <_svfiprintf_r>
 800bc6a:	1c43      	adds	r3, r0, #1
 800bc6c:	bfbc      	itt	lt
 800bc6e:	238b      	movlt	r3, #139	; 0x8b
 800bc70:	602b      	strlt	r3, [r5, #0]
 800bc72:	2c00      	cmp	r4, #0
 800bc74:	d0dd      	beq.n	800bc32 <sniprintf+0x16>
 800bc76:	9b02      	ldr	r3, [sp, #8]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	701a      	strb	r2, [r3, #0]
 800bc7c:	e7d9      	b.n	800bc32 <sniprintf+0x16>
 800bc7e:	bf00      	nop
 800bc80:	24000020 	.word	0x24000020

0800bc84 <__ssputs_r>:
 800bc84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc88:	688e      	ldr	r6, [r1, #8]
 800bc8a:	429e      	cmp	r6, r3
 800bc8c:	4682      	mov	sl, r0
 800bc8e:	460c      	mov	r4, r1
 800bc90:	4690      	mov	r8, r2
 800bc92:	461f      	mov	r7, r3
 800bc94:	d838      	bhi.n	800bd08 <__ssputs_r+0x84>
 800bc96:	898a      	ldrh	r2, [r1, #12]
 800bc98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc9c:	d032      	beq.n	800bd04 <__ssputs_r+0x80>
 800bc9e:	6825      	ldr	r5, [r4, #0]
 800bca0:	6909      	ldr	r1, [r1, #16]
 800bca2:	eba5 0901 	sub.w	r9, r5, r1
 800bca6:	6965      	ldr	r5, [r4, #20]
 800bca8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bcac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	444b      	add	r3, r9
 800bcb4:	106d      	asrs	r5, r5, #1
 800bcb6:	429d      	cmp	r5, r3
 800bcb8:	bf38      	it	cc
 800bcba:	461d      	movcc	r5, r3
 800bcbc:	0553      	lsls	r3, r2, #21
 800bcbe:	d531      	bpl.n	800bd24 <__ssputs_r+0xa0>
 800bcc0:	4629      	mov	r1, r5
 800bcc2:	f000 fb55 	bl	800c370 <_malloc_r>
 800bcc6:	4606      	mov	r6, r0
 800bcc8:	b950      	cbnz	r0, 800bce0 <__ssputs_r+0x5c>
 800bcca:	230c      	movs	r3, #12
 800bccc:	f8ca 3000 	str.w	r3, [sl]
 800bcd0:	89a3      	ldrh	r3, [r4, #12]
 800bcd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcd6:	81a3      	strh	r3, [r4, #12]
 800bcd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bce0:	6921      	ldr	r1, [r4, #16]
 800bce2:	464a      	mov	r2, r9
 800bce4:	f7ff ff84 	bl	800bbf0 <memcpy>
 800bce8:	89a3      	ldrh	r3, [r4, #12]
 800bcea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bcee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcf2:	81a3      	strh	r3, [r4, #12]
 800bcf4:	6126      	str	r6, [r4, #16]
 800bcf6:	6165      	str	r5, [r4, #20]
 800bcf8:	444e      	add	r6, r9
 800bcfa:	eba5 0509 	sub.w	r5, r5, r9
 800bcfe:	6026      	str	r6, [r4, #0]
 800bd00:	60a5      	str	r5, [r4, #8]
 800bd02:	463e      	mov	r6, r7
 800bd04:	42be      	cmp	r6, r7
 800bd06:	d900      	bls.n	800bd0a <__ssputs_r+0x86>
 800bd08:	463e      	mov	r6, r7
 800bd0a:	6820      	ldr	r0, [r4, #0]
 800bd0c:	4632      	mov	r2, r6
 800bd0e:	4641      	mov	r1, r8
 800bd10:	f000 faa8 	bl	800c264 <memmove>
 800bd14:	68a3      	ldr	r3, [r4, #8]
 800bd16:	1b9b      	subs	r3, r3, r6
 800bd18:	60a3      	str	r3, [r4, #8]
 800bd1a:	6823      	ldr	r3, [r4, #0]
 800bd1c:	4433      	add	r3, r6
 800bd1e:	6023      	str	r3, [r4, #0]
 800bd20:	2000      	movs	r0, #0
 800bd22:	e7db      	b.n	800bcdc <__ssputs_r+0x58>
 800bd24:	462a      	mov	r2, r5
 800bd26:	f000 fb97 	bl	800c458 <_realloc_r>
 800bd2a:	4606      	mov	r6, r0
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d1e1      	bne.n	800bcf4 <__ssputs_r+0x70>
 800bd30:	6921      	ldr	r1, [r4, #16]
 800bd32:	4650      	mov	r0, sl
 800bd34:	f000 fab0 	bl	800c298 <_free_r>
 800bd38:	e7c7      	b.n	800bcca <__ssputs_r+0x46>
	...

0800bd3c <_svfiprintf_r>:
 800bd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd40:	4698      	mov	r8, r3
 800bd42:	898b      	ldrh	r3, [r1, #12]
 800bd44:	061b      	lsls	r3, r3, #24
 800bd46:	b09d      	sub	sp, #116	; 0x74
 800bd48:	4607      	mov	r7, r0
 800bd4a:	460d      	mov	r5, r1
 800bd4c:	4614      	mov	r4, r2
 800bd4e:	d50e      	bpl.n	800bd6e <_svfiprintf_r+0x32>
 800bd50:	690b      	ldr	r3, [r1, #16]
 800bd52:	b963      	cbnz	r3, 800bd6e <_svfiprintf_r+0x32>
 800bd54:	2140      	movs	r1, #64	; 0x40
 800bd56:	f000 fb0b 	bl	800c370 <_malloc_r>
 800bd5a:	6028      	str	r0, [r5, #0]
 800bd5c:	6128      	str	r0, [r5, #16]
 800bd5e:	b920      	cbnz	r0, 800bd6a <_svfiprintf_r+0x2e>
 800bd60:	230c      	movs	r3, #12
 800bd62:	603b      	str	r3, [r7, #0]
 800bd64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd68:	e0d1      	b.n	800bf0e <_svfiprintf_r+0x1d2>
 800bd6a:	2340      	movs	r3, #64	; 0x40
 800bd6c:	616b      	str	r3, [r5, #20]
 800bd6e:	2300      	movs	r3, #0
 800bd70:	9309      	str	r3, [sp, #36]	; 0x24
 800bd72:	2320      	movs	r3, #32
 800bd74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd78:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd7c:	2330      	movs	r3, #48	; 0x30
 800bd7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bf28 <_svfiprintf_r+0x1ec>
 800bd82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd86:	f04f 0901 	mov.w	r9, #1
 800bd8a:	4623      	mov	r3, r4
 800bd8c:	469a      	mov	sl, r3
 800bd8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd92:	b10a      	cbz	r2, 800bd98 <_svfiprintf_r+0x5c>
 800bd94:	2a25      	cmp	r2, #37	; 0x25
 800bd96:	d1f9      	bne.n	800bd8c <_svfiprintf_r+0x50>
 800bd98:	ebba 0b04 	subs.w	fp, sl, r4
 800bd9c:	d00b      	beq.n	800bdb6 <_svfiprintf_r+0x7a>
 800bd9e:	465b      	mov	r3, fp
 800bda0:	4622      	mov	r2, r4
 800bda2:	4629      	mov	r1, r5
 800bda4:	4638      	mov	r0, r7
 800bda6:	f7ff ff6d 	bl	800bc84 <__ssputs_r>
 800bdaa:	3001      	adds	r0, #1
 800bdac:	f000 80aa 	beq.w	800bf04 <_svfiprintf_r+0x1c8>
 800bdb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdb2:	445a      	add	r2, fp
 800bdb4:	9209      	str	r2, [sp, #36]	; 0x24
 800bdb6:	f89a 3000 	ldrb.w	r3, [sl]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f000 80a2 	beq.w	800bf04 <_svfiprintf_r+0x1c8>
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bdc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdca:	f10a 0a01 	add.w	sl, sl, #1
 800bdce:	9304      	str	r3, [sp, #16]
 800bdd0:	9307      	str	r3, [sp, #28]
 800bdd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdd6:	931a      	str	r3, [sp, #104]	; 0x68
 800bdd8:	4654      	mov	r4, sl
 800bdda:	2205      	movs	r2, #5
 800bddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bde0:	4851      	ldr	r0, [pc, #324]	; (800bf28 <_svfiprintf_r+0x1ec>)
 800bde2:	f7f4 fa85 	bl	80002f0 <memchr>
 800bde6:	9a04      	ldr	r2, [sp, #16]
 800bde8:	b9d8      	cbnz	r0, 800be22 <_svfiprintf_r+0xe6>
 800bdea:	06d0      	lsls	r0, r2, #27
 800bdec:	bf44      	itt	mi
 800bdee:	2320      	movmi	r3, #32
 800bdf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdf4:	0711      	lsls	r1, r2, #28
 800bdf6:	bf44      	itt	mi
 800bdf8:	232b      	movmi	r3, #43	; 0x2b
 800bdfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdfe:	f89a 3000 	ldrb.w	r3, [sl]
 800be02:	2b2a      	cmp	r3, #42	; 0x2a
 800be04:	d015      	beq.n	800be32 <_svfiprintf_r+0xf6>
 800be06:	9a07      	ldr	r2, [sp, #28]
 800be08:	4654      	mov	r4, sl
 800be0a:	2000      	movs	r0, #0
 800be0c:	f04f 0c0a 	mov.w	ip, #10
 800be10:	4621      	mov	r1, r4
 800be12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be16:	3b30      	subs	r3, #48	; 0x30
 800be18:	2b09      	cmp	r3, #9
 800be1a:	d94e      	bls.n	800beba <_svfiprintf_r+0x17e>
 800be1c:	b1b0      	cbz	r0, 800be4c <_svfiprintf_r+0x110>
 800be1e:	9207      	str	r2, [sp, #28]
 800be20:	e014      	b.n	800be4c <_svfiprintf_r+0x110>
 800be22:	eba0 0308 	sub.w	r3, r0, r8
 800be26:	fa09 f303 	lsl.w	r3, r9, r3
 800be2a:	4313      	orrs	r3, r2
 800be2c:	9304      	str	r3, [sp, #16]
 800be2e:	46a2      	mov	sl, r4
 800be30:	e7d2      	b.n	800bdd8 <_svfiprintf_r+0x9c>
 800be32:	9b03      	ldr	r3, [sp, #12]
 800be34:	1d19      	adds	r1, r3, #4
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	9103      	str	r1, [sp, #12]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	bfbb      	ittet	lt
 800be3e:	425b      	neglt	r3, r3
 800be40:	f042 0202 	orrlt.w	r2, r2, #2
 800be44:	9307      	strge	r3, [sp, #28]
 800be46:	9307      	strlt	r3, [sp, #28]
 800be48:	bfb8      	it	lt
 800be4a:	9204      	strlt	r2, [sp, #16]
 800be4c:	7823      	ldrb	r3, [r4, #0]
 800be4e:	2b2e      	cmp	r3, #46	; 0x2e
 800be50:	d10c      	bne.n	800be6c <_svfiprintf_r+0x130>
 800be52:	7863      	ldrb	r3, [r4, #1]
 800be54:	2b2a      	cmp	r3, #42	; 0x2a
 800be56:	d135      	bne.n	800bec4 <_svfiprintf_r+0x188>
 800be58:	9b03      	ldr	r3, [sp, #12]
 800be5a:	1d1a      	adds	r2, r3, #4
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	9203      	str	r2, [sp, #12]
 800be60:	2b00      	cmp	r3, #0
 800be62:	bfb8      	it	lt
 800be64:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800be68:	3402      	adds	r4, #2
 800be6a:	9305      	str	r3, [sp, #20]
 800be6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bf38 <_svfiprintf_r+0x1fc>
 800be70:	7821      	ldrb	r1, [r4, #0]
 800be72:	2203      	movs	r2, #3
 800be74:	4650      	mov	r0, sl
 800be76:	f7f4 fa3b 	bl	80002f0 <memchr>
 800be7a:	b140      	cbz	r0, 800be8e <_svfiprintf_r+0x152>
 800be7c:	2340      	movs	r3, #64	; 0x40
 800be7e:	eba0 000a 	sub.w	r0, r0, sl
 800be82:	fa03 f000 	lsl.w	r0, r3, r0
 800be86:	9b04      	ldr	r3, [sp, #16]
 800be88:	4303      	orrs	r3, r0
 800be8a:	3401      	adds	r4, #1
 800be8c:	9304      	str	r3, [sp, #16]
 800be8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be92:	4826      	ldr	r0, [pc, #152]	; (800bf2c <_svfiprintf_r+0x1f0>)
 800be94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be98:	2206      	movs	r2, #6
 800be9a:	f7f4 fa29 	bl	80002f0 <memchr>
 800be9e:	2800      	cmp	r0, #0
 800bea0:	d038      	beq.n	800bf14 <_svfiprintf_r+0x1d8>
 800bea2:	4b23      	ldr	r3, [pc, #140]	; (800bf30 <_svfiprintf_r+0x1f4>)
 800bea4:	bb1b      	cbnz	r3, 800beee <_svfiprintf_r+0x1b2>
 800bea6:	9b03      	ldr	r3, [sp, #12]
 800bea8:	3307      	adds	r3, #7
 800beaa:	f023 0307 	bic.w	r3, r3, #7
 800beae:	3308      	adds	r3, #8
 800beb0:	9303      	str	r3, [sp, #12]
 800beb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beb4:	4433      	add	r3, r6
 800beb6:	9309      	str	r3, [sp, #36]	; 0x24
 800beb8:	e767      	b.n	800bd8a <_svfiprintf_r+0x4e>
 800beba:	fb0c 3202 	mla	r2, ip, r2, r3
 800bebe:	460c      	mov	r4, r1
 800bec0:	2001      	movs	r0, #1
 800bec2:	e7a5      	b.n	800be10 <_svfiprintf_r+0xd4>
 800bec4:	2300      	movs	r3, #0
 800bec6:	3401      	adds	r4, #1
 800bec8:	9305      	str	r3, [sp, #20]
 800beca:	4619      	mov	r1, r3
 800becc:	f04f 0c0a 	mov.w	ip, #10
 800bed0:	4620      	mov	r0, r4
 800bed2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bed6:	3a30      	subs	r2, #48	; 0x30
 800bed8:	2a09      	cmp	r2, #9
 800beda:	d903      	bls.n	800bee4 <_svfiprintf_r+0x1a8>
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d0c5      	beq.n	800be6c <_svfiprintf_r+0x130>
 800bee0:	9105      	str	r1, [sp, #20]
 800bee2:	e7c3      	b.n	800be6c <_svfiprintf_r+0x130>
 800bee4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bee8:	4604      	mov	r4, r0
 800beea:	2301      	movs	r3, #1
 800beec:	e7f0      	b.n	800bed0 <_svfiprintf_r+0x194>
 800beee:	ab03      	add	r3, sp, #12
 800bef0:	9300      	str	r3, [sp, #0]
 800bef2:	462a      	mov	r2, r5
 800bef4:	4b0f      	ldr	r3, [pc, #60]	; (800bf34 <_svfiprintf_r+0x1f8>)
 800bef6:	a904      	add	r1, sp, #16
 800bef8:	4638      	mov	r0, r7
 800befa:	f3af 8000 	nop.w
 800befe:	1c42      	adds	r2, r0, #1
 800bf00:	4606      	mov	r6, r0
 800bf02:	d1d6      	bne.n	800beb2 <_svfiprintf_r+0x176>
 800bf04:	89ab      	ldrh	r3, [r5, #12]
 800bf06:	065b      	lsls	r3, r3, #25
 800bf08:	f53f af2c 	bmi.w	800bd64 <_svfiprintf_r+0x28>
 800bf0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf0e:	b01d      	add	sp, #116	; 0x74
 800bf10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf14:	ab03      	add	r3, sp, #12
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	462a      	mov	r2, r5
 800bf1a:	4b06      	ldr	r3, [pc, #24]	; (800bf34 <_svfiprintf_r+0x1f8>)
 800bf1c:	a904      	add	r1, sp, #16
 800bf1e:	4638      	mov	r0, r7
 800bf20:	f000 f87a 	bl	800c018 <_printf_i>
 800bf24:	e7eb      	b.n	800befe <_svfiprintf_r+0x1c2>
 800bf26:	bf00      	nop
 800bf28:	0800c804 	.word	0x0800c804
 800bf2c:	0800c80e 	.word	0x0800c80e
 800bf30:	00000000 	.word	0x00000000
 800bf34:	0800bc85 	.word	0x0800bc85
 800bf38:	0800c80a 	.word	0x0800c80a

0800bf3c <_printf_common>:
 800bf3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf40:	4616      	mov	r6, r2
 800bf42:	4699      	mov	r9, r3
 800bf44:	688a      	ldr	r2, [r1, #8]
 800bf46:	690b      	ldr	r3, [r1, #16]
 800bf48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	bfb8      	it	lt
 800bf50:	4613      	movlt	r3, r2
 800bf52:	6033      	str	r3, [r6, #0]
 800bf54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bf58:	4607      	mov	r7, r0
 800bf5a:	460c      	mov	r4, r1
 800bf5c:	b10a      	cbz	r2, 800bf62 <_printf_common+0x26>
 800bf5e:	3301      	adds	r3, #1
 800bf60:	6033      	str	r3, [r6, #0]
 800bf62:	6823      	ldr	r3, [r4, #0]
 800bf64:	0699      	lsls	r1, r3, #26
 800bf66:	bf42      	ittt	mi
 800bf68:	6833      	ldrmi	r3, [r6, #0]
 800bf6a:	3302      	addmi	r3, #2
 800bf6c:	6033      	strmi	r3, [r6, #0]
 800bf6e:	6825      	ldr	r5, [r4, #0]
 800bf70:	f015 0506 	ands.w	r5, r5, #6
 800bf74:	d106      	bne.n	800bf84 <_printf_common+0x48>
 800bf76:	f104 0a19 	add.w	sl, r4, #25
 800bf7a:	68e3      	ldr	r3, [r4, #12]
 800bf7c:	6832      	ldr	r2, [r6, #0]
 800bf7e:	1a9b      	subs	r3, r3, r2
 800bf80:	42ab      	cmp	r3, r5
 800bf82:	dc26      	bgt.n	800bfd2 <_printf_common+0x96>
 800bf84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bf88:	1e13      	subs	r3, r2, #0
 800bf8a:	6822      	ldr	r2, [r4, #0]
 800bf8c:	bf18      	it	ne
 800bf8e:	2301      	movne	r3, #1
 800bf90:	0692      	lsls	r2, r2, #26
 800bf92:	d42b      	bmi.n	800bfec <_printf_common+0xb0>
 800bf94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf98:	4649      	mov	r1, r9
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	47c0      	blx	r8
 800bf9e:	3001      	adds	r0, #1
 800bfa0:	d01e      	beq.n	800bfe0 <_printf_common+0xa4>
 800bfa2:	6823      	ldr	r3, [r4, #0]
 800bfa4:	68e5      	ldr	r5, [r4, #12]
 800bfa6:	6832      	ldr	r2, [r6, #0]
 800bfa8:	f003 0306 	and.w	r3, r3, #6
 800bfac:	2b04      	cmp	r3, #4
 800bfae:	bf08      	it	eq
 800bfb0:	1aad      	subeq	r5, r5, r2
 800bfb2:	68a3      	ldr	r3, [r4, #8]
 800bfb4:	6922      	ldr	r2, [r4, #16]
 800bfb6:	bf0c      	ite	eq
 800bfb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bfbc:	2500      	movne	r5, #0
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	bfc4      	itt	gt
 800bfc2:	1a9b      	subgt	r3, r3, r2
 800bfc4:	18ed      	addgt	r5, r5, r3
 800bfc6:	2600      	movs	r6, #0
 800bfc8:	341a      	adds	r4, #26
 800bfca:	42b5      	cmp	r5, r6
 800bfcc:	d11a      	bne.n	800c004 <_printf_common+0xc8>
 800bfce:	2000      	movs	r0, #0
 800bfd0:	e008      	b.n	800bfe4 <_printf_common+0xa8>
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	4652      	mov	r2, sl
 800bfd6:	4649      	mov	r1, r9
 800bfd8:	4638      	mov	r0, r7
 800bfda:	47c0      	blx	r8
 800bfdc:	3001      	adds	r0, #1
 800bfde:	d103      	bne.n	800bfe8 <_printf_common+0xac>
 800bfe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfe8:	3501      	adds	r5, #1
 800bfea:	e7c6      	b.n	800bf7a <_printf_common+0x3e>
 800bfec:	18e1      	adds	r1, r4, r3
 800bfee:	1c5a      	adds	r2, r3, #1
 800bff0:	2030      	movs	r0, #48	; 0x30
 800bff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bff6:	4422      	add	r2, r4
 800bff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c000:	3302      	adds	r3, #2
 800c002:	e7c7      	b.n	800bf94 <_printf_common+0x58>
 800c004:	2301      	movs	r3, #1
 800c006:	4622      	mov	r2, r4
 800c008:	4649      	mov	r1, r9
 800c00a:	4638      	mov	r0, r7
 800c00c:	47c0      	blx	r8
 800c00e:	3001      	adds	r0, #1
 800c010:	d0e6      	beq.n	800bfe0 <_printf_common+0xa4>
 800c012:	3601      	adds	r6, #1
 800c014:	e7d9      	b.n	800bfca <_printf_common+0x8e>
	...

0800c018 <_printf_i>:
 800c018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c01c:	7e0f      	ldrb	r7, [r1, #24]
 800c01e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c020:	2f78      	cmp	r7, #120	; 0x78
 800c022:	4691      	mov	r9, r2
 800c024:	4680      	mov	r8, r0
 800c026:	460c      	mov	r4, r1
 800c028:	469a      	mov	sl, r3
 800c02a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c02e:	d807      	bhi.n	800c040 <_printf_i+0x28>
 800c030:	2f62      	cmp	r7, #98	; 0x62
 800c032:	d80a      	bhi.n	800c04a <_printf_i+0x32>
 800c034:	2f00      	cmp	r7, #0
 800c036:	f000 80d8 	beq.w	800c1ea <_printf_i+0x1d2>
 800c03a:	2f58      	cmp	r7, #88	; 0x58
 800c03c:	f000 80a3 	beq.w	800c186 <_printf_i+0x16e>
 800c040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c048:	e03a      	b.n	800c0c0 <_printf_i+0xa8>
 800c04a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c04e:	2b15      	cmp	r3, #21
 800c050:	d8f6      	bhi.n	800c040 <_printf_i+0x28>
 800c052:	a101      	add	r1, pc, #4	; (adr r1, 800c058 <_printf_i+0x40>)
 800c054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c058:	0800c0b1 	.word	0x0800c0b1
 800c05c:	0800c0c5 	.word	0x0800c0c5
 800c060:	0800c041 	.word	0x0800c041
 800c064:	0800c041 	.word	0x0800c041
 800c068:	0800c041 	.word	0x0800c041
 800c06c:	0800c041 	.word	0x0800c041
 800c070:	0800c0c5 	.word	0x0800c0c5
 800c074:	0800c041 	.word	0x0800c041
 800c078:	0800c041 	.word	0x0800c041
 800c07c:	0800c041 	.word	0x0800c041
 800c080:	0800c041 	.word	0x0800c041
 800c084:	0800c1d1 	.word	0x0800c1d1
 800c088:	0800c0f5 	.word	0x0800c0f5
 800c08c:	0800c1b3 	.word	0x0800c1b3
 800c090:	0800c041 	.word	0x0800c041
 800c094:	0800c041 	.word	0x0800c041
 800c098:	0800c1f3 	.word	0x0800c1f3
 800c09c:	0800c041 	.word	0x0800c041
 800c0a0:	0800c0f5 	.word	0x0800c0f5
 800c0a4:	0800c041 	.word	0x0800c041
 800c0a8:	0800c041 	.word	0x0800c041
 800c0ac:	0800c1bb 	.word	0x0800c1bb
 800c0b0:	682b      	ldr	r3, [r5, #0]
 800c0b2:	1d1a      	adds	r2, r3, #4
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	602a      	str	r2, [r5, #0]
 800c0b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	e0a3      	b.n	800c20c <_printf_i+0x1f4>
 800c0c4:	6820      	ldr	r0, [r4, #0]
 800c0c6:	6829      	ldr	r1, [r5, #0]
 800c0c8:	0606      	lsls	r6, r0, #24
 800c0ca:	f101 0304 	add.w	r3, r1, #4
 800c0ce:	d50a      	bpl.n	800c0e6 <_printf_i+0xce>
 800c0d0:	680e      	ldr	r6, [r1, #0]
 800c0d2:	602b      	str	r3, [r5, #0]
 800c0d4:	2e00      	cmp	r6, #0
 800c0d6:	da03      	bge.n	800c0e0 <_printf_i+0xc8>
 800c0d8:	232d      	movs	r3, #45	; 0x2d
 800c0da:	4276      	negs	r6, r6
 800c0dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0e0:	485e      	ldr	r0, [pc, #376]	; (800c25c <_printf_i+0x244>)
 800c0e2:	230a      	movs	r3, #10
 800c0e4:	e019      	b.n	800c11a <_printf_i+0x102>
 800c0e6:	680e      	ldr	r6, [r1, #0]
 800c0e8:	602b      	str	r3, [r5, #0]
 800c0ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c0ee:	bf18      	it	ne
 800c0f0:	b236      	sxthne	r6, r6
 800c0f2:	e7ef      	b.n	800c0d4 <_printf_i+0xbc>
 800c0f4:	682b      	ldr	r3, [r5, #0]
 800c0f6:	6820      	ldr	r0, [r4, #0]
 800c0f8:	1d19      	adds	r1, r3, #4
 800c0fa:	6029      	str	r1, [r5, #0]
 800c0fc:	0601      	lsls	r1, r0, #24
 800c0fe:	d501      	bpl.n	800c104 <_printf_i+0xec>
 800c100:	681e      	ldr	r6, [r3, #0]
 800c102:	e002      	b.n	800c10a <_printf_i+0xf2>
 800c104:	0646      	lsls	r6, r0, #25
 800c106:	d5fb      	bpl.n	800c100 <_printf_i+0xe8>
 800c108:	881e      	ldrh	r6, [r3, #0]
 800c10a:	4854      	ldr	r0, [pc, #336]	; (800c25c <_printf_i+0x244>)
 800c10c:	2f6f      	cmp	r7, #111	; 0x6f
 800c10e:	bf0c      	ite	eq
 800c110:	2308      	moveq	r3, #8
 800c112:	230a      	movne	r3, #10
 800c114:	2100      	movs	r1, #0
 800c116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c11a:	6865      	ldr	r5, [r4, #4]
 800c11c:	60a5      	str	r5, [r4, #8]
 800c11e:	2d00      	cmp	r5, #0
 800c120:	bfa2      	ittt	ge
 800c122:	6821      	ldrge	r1, [r4, #0]
 800c124:	f021 0104 	bicge.w	r1, r1, #4
 800c128:	6021      	strge	r1, [r4, #0]
 800c12a:	b90e      	cbnz	r6, 800c130 <_printf_i+0x118>
 800c12c:	2d00      	cmp	r5, #0
 800c12e:	d04d      	beq.n	800c1cc <_printf_i+0x1b4>
 800c130:	4615      	mov	r5, r2
 800c132:	fbb6 f1f3 	udiv	r1, r6, r3
 800c136:	fb03 6711 	mls	r7, r3, r1, r6
 800c13a:	5dc7      	ldrb	r7, [r0, r7]
 800c13c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c140:	4637      	mov	r7, r6
 800c142:	42bb      	cmp	r3, r7
 800c144:	460e      	mov	r6, r1
 800c146:	d9f4      	bls.n	800c132 <_printf_i+0x11a>
 800c148:	2b08      	cmp	r3, #8
 800c14a:	d10b      	bne.n	800c164 <_printf_i+0x14c>
 800c14c:	6823      	ldr	r3, [r4, #0]
 800c14e:	07de      	lsls	r6, r3, #31
 800c150:	d508      	bpl.n	800c164 <_printf_i+0x14c>
 800c152:	6923      	ldr	r3, [r4, #16]
 800c154:	6861      	ldr	r1, [r4, #4]
 800c156:	4299      	cmp	r1, r3
 800c158:	bfde      	ittt	le
 800c15a:	2330      	movle	r3, #48	; 0x30
 800c15c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c160:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c164:	1b52      	subs	r2, r2, r5
 800c166:	6122      	str	r2, [r4, #16]
 800c168:	f8cd a000 	str.w	sl, [sp]
 800c16c:	464b      	mov	r3, r9
 800c16e:	aa03      	add	r2, sp, #12
 800c170:	4621      	mov	r1, r4
 800c172:	4640      	mov	r0, r8
 800c174:	f7ff fee2 	bl	800bf3c <_printf_common>
 800c178:	3001      	adds	r0, #1
 800c17a:	d14c      	bne.n	800c216 <_printf_i+0x1fe>
 800c17c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c180:	b004      	add	sp, #16
 800c182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c186:	4835      	ldr	r0, [pc, #212]	; (800c25c <_printf_i+0x244>)
 800c188:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c18c:	6829      	ldr	r1, [r5, #0]
 800c18e:	6823      	ldr	r3, [r4, #0]
 800c190:	f851 6b04 	ldr.w	r6, [r1], #4
 800c194:	6029      	str	r1, [r5, #0]
 800c196:	061d      	lsls	r5, r3, #24
 800c198:	d514      	bpl.n	800c1c4 <_printf_i+0x1ac>
 800c19a:	07df      	lsls	r7, r3, #31
 800c19c:	bf44      	itt	mi
 800c19e:	f043 0320 	orrmi.w	r3, r3, #32
 800c1a2:	6023      	strmi	r3, [r4, #0]
 800c1a4:	b91e      	cbnz	r6, 800c1ae <_printf_i+0x196>
 800c1a6:	6823      	ldr	r3, [r4, #0]
 800c1a8:	f023 0320 	bic.w	r3, r3, #32
 800c1ac:	6023      	str	r3, [r4, #0]
 800c1ae:	2310      	movs	r3, #16
 800c1b0:	e7b0      	b.n	800c114 <_printf_i+0xfc>
 800c1b2:	6823      	ldr	r3, [r4, #0]
 800c1b4:	f043 0320 	orr.w	r3, r3, #32
 800c1b8:	6023      	str	r3, [r4, #0]
 800c1ba:	2378      	movs	r3, #120	; 0x78
 800c1bc:	4828      	ldr	r0, [pc, #160]	; (800c260 <_printf_i+0x248>)
 800c1be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c1c2:	e7e3      	b.n	800c18c <_printf_i+0x174>
 800c1c4:	0659      	lsls	r1, r3, #25
 800c1c6:	bf48      	it	mi
 800c1c8:	b2b6      	uxthmi	r6, r6
 800c1ca:	e7e6      	b.n	800c19a <_printf_i+0x182>
 800c1cc:	4615      	mov	r5, r2
 800c1ce:	e7bb      	b.n	800c148 <_printf_i+0x130>
 800c1d0:	682b      	ldr	r3, [r5, #0]
 800c1d2:	6826      	ldr	r6, [r4, #0]
 800c1d4:	6961      	ldr	r1, [r4, #20]
 800c1d6:	1d18      	adds	r0, r3, #4
 800c1d8:	6028      	str	r0, [r5, #0]
 800c1da:	0635      	lsls	r5, r6, #24
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	d501      	bpl.n	800c1e4 <_printf_i+0x1cc>
 800c1e0:	6019      	str	r1, [r3, #0]
 800c1e2:	e002      	b.n	800c1ea <_printf_i+0x1d2>
 800c1e4:	0670      	lsls	r0, r6, #25
 800c1e6:	d5fb      	bpl.n	800c1e0 <_printf_i+0x1c8>
 800c1e8:	8019      	strh	r1, [r3, #0]
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	6123      	str	r3, [r4, #16]
 800c1ee:	4615      	mov	r5, r2
 800c1f0:	e7ba      	b.n	800c168 <_printf_i+0x150>
 800c1f2:	682b      	ldr	r3, [r5, #0]
 800c1f4:	1d1a      	adds	r2, r3, #4
 800c1f6:	602a      	str	r2, [r5, #0]
 800c1f8:	681d      	ldr	r5, [r3, #0]
 800c1fa:	6862      	ldr	r2, [r4, #4]
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	4628      	mov	r0, r5
 800c200:	f7f4 f876 	bl	80002f0 <memchr>
 800c204:	b108      	cbz	r0, 800c20a <_printf_i+0x1f2>
 800c206:	1b40      	subs	r0, r0, r5
 800c208:	6060      	str	r0, [r4, #4]
 800c20a:	6863      	ldr	r3, [r4, #4]
 800c20c:	6123      	str	r3, [r4, #16]
 800c20e:	2300      	movs	r3, #0
 800c210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c214:	e7a8      	b.n	800c168 <_printf_i+0x150>
 800c216:	6923      	ldr	r3, [r4, #16]
 800c218:	462a      	mov	r2, r5
 800c21a:	4649      	mov	r1, r9
 800c21c:	4640      	mov	r0, r8
 800c21e:	47d0      	blx	sl
 800c220:	3001      	adds	r0, #1
 800c222:	d0ab      	beq.n	800c17c <_printf_i+0x164>
 800c224:	6823      	ldr	r3, [r4, #0]
 800c226:	079b      	lsls	r3, r3, #30
 800c228:	d413      	bmi.n	800c252 <_printf_i+0x23a>
 800c22a:	68e0      	ldr	r0, [r4, #12]
 800c22c:	9b03      	ldr	r3, [sp, #12]
 800c22e:	4298      	cmp	r0, r3
 800c230:	bfb8      	it	lt
 800c232:	4618      	movlt	r0, r3
 800c234:	e7a4      	b.n	800c180 <_printf_i+0x168>
 800c236:	2301      	movs	r3, #1
 800c238:	4632      	mov	r2, r6
 800c23a:	4649      	mov	r1, r9
 800c23c:	4640      	mov	r0, r8
 800c23e:	47d0      	blx	sl
 800c240:	3001      	adds	r0, #1
 800c242:	d09b      	beq.n	800c17c <_printf_i+0x164>
 800c244:	3501      	adds	r5, #1
 800c246:	68e3      	ldr	r3, [r4, #12]
 800c248:	9903      	ldr	r1, [sp, #12]
 800c24a:	1a5b      	subs	r3, r3, r1
 800c24c:	42ab      	cmp	r3, r5
 800c24e:	dcf2      	bgt.n	800c236 <_printf_i+0x21e>
 800c250:	e7eb      	b.n	800c22a <_printf_i+0x212>
 800c252:	2500      	movs	r5, #0
 800c254:	f104 0619 	add.w	r6, r4, #25
 800c258:	e7f5      	b.n	800c246 <_printf_i+0x22e>
 800c25a:	bf00      	nop
 800c25c:	0800c815 	.word	0x0800c815
 800c260:	0800c826 	.word	0x0800c826

0800c264 <memmove>:
 800c264:	4288      	cmp	r0, r1
 800c266:	b510      	push	{r4, lr}
 800c268:	eb01 0402 	add.w	r4, r1, r2
 800c26c:	d902      	bls.n	800c274 <memmove+0x10>
 800c26e:	4284      	cmp	r4, r0
 800c270:	4623      	mov	r3, r4
 800c272:	d807      	bhi.n	800c284 <memmove+0x20>
 800c274:	1e43      	subs	r3, r0, #1
 800c276:	42a1      	cmp	r1, r4
 800c278:	d008      	beq.n	800c28c <memmove+0x28>
 800c27a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c27e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c282:	e7f8      	b.n	800c276 <memmove+0x12>
 800c284:	4402      	add	r2, r0
 800c286:	4601      	mov	r1, r0
 800c288:	428a      	cmp	r2, r1
 800c28a:	d100      	bne.n	800c28e <memmove+0x2a>
 800c28c:	bd10      	pop	{r4, pc}
 800c28e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c292:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c296:	e7f7      	b.n	800c288 <memmove+0x24>

0800c298 <_free_r>:
 800c298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c29a:	2900      	cmp	r1, #0
 800c29c:	d044      	beq.n	800c328 <_free_r+0x90>
 800c29e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2a2:	9001      	str	r0, [sp, #4]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	f1a1 0404 	sub.w	r4, r1, #4
 800c2aa:	bfb8      	it	lt
 800c2ac:	18e4      	addlt	r4, r4, r3
 800c2ae:	f000 f913 	bl	800c4d8 <__malloc_lock>
 800c2b2:	4a1e      	ldr	r2, [pc, #120]	; (800c32c <_free_r+0x94>)
 800c2b4:	9801      	ldr	r0, [sp, #4]
 800c2b6:	6813      	ldr	r3, [r2, #0]
 800c2b8:	b933      	cbnz	r3, 800c2c8 <_free_r+0x30>
 800c2ba:	6063      	str	r3, [r4, #4]
 800c2bc:	6014      	str	r4, [r2, #0]
 800c2be:	b003      	add	sp, #12
 800c2c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2c4:	f000 b90e 	b.w	800c4e4 <__malloc_unlock>
 800c2c8:	42a3      	cmp	r3, r4
 800c2ca:	d908      	bls.n	800c2de <_free_r+0x46>
 800c2cc:	6825      	ldr	r5, [r4, #0]
 800c2ce:	1961      	adds	r1, r4, r5
 800c2d0:	428b      	cmp	r3, r1
 800c2d2:	bf01      	itttt	eq
 800c2d4:	6819      	ldreq	r1, [r3, #0]
 800c2d6:	685b      	ldreq	r3, [r3, #4]
 800c2d8:	1949      	addeq	r1, r1, r5
 800c2da:	6021      	streq	r1, [r4, #0]
 800c2dc:	e7ed      	b.n	800c2ba <_free_r+0x22>
 800c2de:	461a      	mov	r2, r3
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	b10b      	cbz	r3, 800c2e8 <_free_r+0x50>
 800c2e4:	42a3      	cmp	r3, r4
 800c2e6:	d9fa      	bls.n	800c2de <_free_r+0x46>
 800c2e8:	6811      	ldr	r1, [r2, #0]
 800c2ea:	1855      	adds	r5, r2, r1
 800c2ec:	42a5      	cmp	r5, r4
 800c2ee:	d10b      	bne.n	800c308 <_free_r+0x70>
 800c2f0:	6824      	ldr	r4, [r4, #0]
 800c2f2:	4421      	add	r1, r4
 800c2f4:	1854      	adds	r4, r2, r1
 800c2f6:	42a3      	cmp	r3, r4
 800c2f8:	6011      	str	r1, [r2, #0]
 800c2fa:	d1e0      	bne.n	800c2be <_free_r+0x26>
 800c2fc:	681c      	ldr	r4, [r3, #0]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	6053      	str	r3, [r2, #4]
 800c302:	4421      	add	r1, r4
 800c304:	6011      	str	r1, [r2, #0]
 800c306:	e7da      	b.n	800c2be <_free_r+0x26>
 800c308:	d902      	bls.n	800c310 <_free_r+0x78>
 800c30a:	230c      	movs	r3, #12
 800c30c:	6003      	str	r3, [r0, #0]
 800c30e:	e7d6      	b.n	800c2be <_free_r+0x26>
 800c310:	6825      	ldr	r5, [r4, #0]
 800c312:	1961      	adds	r1, r4, r5
 800c314:	428b      	cmp	r3, r1
 800c316:	bf04      	itt	eq
 800c318:	6819      	ldreq	r1, [r3, #0]
 800c31a:	685b      	ldreq	r3, [r3, #4]
 800c31c:	6063      	str	r3, [r4, #4]
 800c31e:	bf04      	itt	eq
 800c320:	1949      	addeq	r1, r1, r5
 800c322:	6021      	streq	r1, [r4, #0]
 800c324:	6054      	str	r4, [r2, #4]
 800c326:	e7ca      	b.n	800c2be <_free_r+0x26>
 800c328:	b003      	add	sp, #12
 800c32a:	bd30      	pop	{r4, r5, pc}
 800c32c:	240008a8 	.word	0x240008a8

0800c330 <sbrk_aligned>:
 800c330:	b570      	push	{r4, r5, r6, lr}
 800c332:	4e0e      	ldr	r6, [pc, #56]	; (800c36c <sbrk_aligned+0x3c>)
 800c334:	460c      	mov	r4, r1
 800c336:	6831      	ldr	r1, [r6, #0]
 800c338:	4605      	mov	r5, r0
 800c33a:	b911      	cbnz	r1, 800c342 <sbrk_aligned+0x12>
 800c33c:	f000 f8bc 	bl	800c4b8 <_sbrk_r>
 800c340:	6030      	str	r0, [r6, #0]
 800c342:	4621      	mov	r1, r4
 800c344:	4628      	mov	r0, r5
 800c346:	f000 f8b7 	bl	800c4b8 <_sbrk_r>
 800c34a:	1c43      	adds	r3, r0, #1
 800c34c:	d00a      	beq.n	800c364 <sbrk_aligned+0x34>
 800c34e:	1cc4      	adds	r4, r0, #3
 800c350:	f024 0403 	bic.w	r4, r4, #3
 800c354:	42a0      	cmp	r0, r4
 800c356:	d007      	beq.n	800c368 <sbrk_aligned+0x38>
 800c358:	1a21      	subs	r1, r4, r0
 800c35a:	4628      	mov	r0, r5
 800c35c:	f000 f8ac 	bl	800c4b8 <_sbrk_r>
 800c360:	3001      	adds	r0, #1
 800c362:	d101      	bne.n	800c368 <sbrk_aligned+0x38>
 800c364:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c368:	4620      	mov	r0, r4
 800c36a:	bd70      	pop	{r4, r5, r6, pc}
 800c36c:	240008ac 	.word	0x240008ac

0800c370 <_malloc_r>:
 800c370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c374:	1ccd      	adds	r5, r1, #3
 800c376:	f025 0503 	bic.w	r5, r5, #3
 800c37a:	3508      	adds	r5, #8
 800c37c:	2d0c      	cmp	r5, #12
 800c37e:	bf38      	it	cc
 800c380:	250c      	movcc	r5, #12
 800c382:	2d00      	cmp	r5, #0
 800c384:	4607      	mov	r7, r0
 800c386:	db01      	blt.n	800c38c <_malloc_r+0x1c>
 800c388:	42a9      	cmp	r1, r5
 800c38a:	d905      	bls.n	800c398 <_malloc_r+0x28>
 800c38c:	230c      	movs	r3, #12
 800c38e:	603b      	str	r3, [r7, #0]
 800c390:	2600      	movs	r6, #0
 800c392:	4630      	mov	r0, r6
 800c394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c398:	4e2e      	ldr	r6, [pc, #184]	; (800c454 <_malloc_r+0xe4>)
 800c39a:	f000 f89d 	bl	800c4d8 <__malloc_lock>
 800c39e:	6833      	ldr	r3, [r6, #0]
 800c3a0:	461c      	mov	r4, r3
 800c3a2:	bb34      	cbnz	r4, 800c3f2 <_malloc_r+0x82>
 800c3a4:	4629      	mov	r1, r5
 800c3a6:	4638      	mov	r0, r7
 800c3a8:	f7ff ffc2 	bl	800c330 <sbrk_aligned>
 800c3ac:	1c43      	adds	r3, r0, #1
 800c3ae:	4604      	mov	r4, r0
 800c3b0:	d14d      	bne.n	800c44e <_malloc_r+0xde>
 800c3b2:	6834      	ldr	r4, [r6, #0]
 800c3b4:	4626      	mov	r6, r4
 800c3b6:	2e00      	cmp	r6, #0
 800c3b8:	d140      	bne.n	800c43c <_malloc_r+0xcc>
 800c3ba:	6823      	ldr	r3, [r4, #0]
 800c3bc:	4631      	mov	r1, r6
 800c3be:	4638      	mov	r0, r7
 800c3c0:	eb04 0803 	add.w	r8, r4, r3
 800c3c4:	f000 f878 	bl	800c4b8 <_sbrk_r>
 800c3c8:	4580      	cmp	r8, r0
 800c3ca:	d13a      	bne.n	800c442 <_malloc_r+0xd2>
 800c3cc:	6821      	ldr	r1, [r4, #0]
 800c3ce:	3503      	adds	r5, #3
 800c3d0:	1a6d      	subs	r5, r5, r1
 800c3d2:	f025 0503 	bic.w	r5, r5, #3
 800c3d6:	3508      	adds	r5, #8
 800c3d8:	2d0c      	cmp	r5, #12
 800c3da:	bf38      	it	cc
 800c3dc:	250c      	movcc	r5, #12
 800c3de:	4629      	mov	r1, r5
 800c3e0:	4638      	mov	r0, r7
 800c3e2:	f7ff ffa5 	bl	800c330 <sbrk_aligned>
 800c3e6:	3001      	adds	r0, #1
 800c3e8:	d02b      	beq.n	800c442 <_malloc_r+0xd2>
 800c3ea:	6823      	ldr	r3, [r4, #0]
 800c3ec:	442b      	add	r3, r5
 800c3ee:	6023      	str	r3, [r4, #0]
 800c3f0:	e00e      	b.n	800c410 <_malloc_r+0xa0>
 800c3f2:	6822      	ldr	r2, [r4, #0]
 800c3f4:	1b52      	subs	r2, r2, r5
 800c3f6:	d41e      	bmi.n	800c436 <_malloc_r+0xc6>
 800c3f8:	2a0b      	cmp	r2, #11
 800c3fa:	d916      	bls.n	800c42a <_malloc_r+0xba>
 800c3fc:	1961      	adds	r1, r4, r5
 800c3fe:	42a3      	cmp	r3, r4
 800c400:	6025      	str	r5, [r4, #0]
 800c402:	bf18      	it	ne
 800c404:	6059      	strne	r1, [r3, #4]
 800c406:	6863      	ldr	r3, [r4, #4]
 800c408:	bf08      	it	eq
 800c40a:	6031      	streq	r1, [r6, #0]
 800c40c:	5162      	str	r2, [r4, r5]
 800c40e:	604b      	str	r3, [r1, #4]
 800c410:	4638      	mov	r0, r7
 800c412:	f104 060b 	add.w	r6, r4, #11
 800c416:	f000 f865 	bl	800c4e4 <__malloc_unlock>
 800c41a:	f026 0607 	bic.w	r6, r6, #7
 800c41e:	1d23      	adds	r3, r4, #4
 800c420:	1af2      	subs	r2, r6, r3
 800c422:	d0b6      	beq.n	800c392 <_malloc_r+0x22>
 800c424:	1b9b      	subs	r3, r3, r6
 800c426:	50a3      	str	r3, [r4, r2]
 800c428:	e7b3      	b.n	800c392 <_malloc_r+0x22>
 800c42a:	6862      	ldr	r2, [r4, #4]
 800c42c:	42a3      	cmp	r3, r4
 800c42e:	bf0c      	ite	eq
 800c430:	6032      	streq	r2, [r6, #0]
 800c432:	605a      	strne	r2, [r3, #4]
 800c434:	e7ec      	b.n	800c410 <_malloc_r+0xa0>
 800c436:	4623      	mov	r3, r4
 800c438:	6864      	ldr	r4, [r4, #4]
 800c43a:	e7b2      	b.n	800c3a2 <_malloc_r+0x32>
 800c43c:	4634      	mov	r4, r6
 800c43e:	6876      	ldr	r6, [r6, #4]
 800c440:	e7b9      	b.n	800c3b6 <_malloc_r+0x46>
 800c442:	230c      	movs	r3, #12
 800c444:	603b      	str	r3, [r7, #0]
 800c446:	4638      	mov	r0, r7
 800c448:	f000 f84c 	bl	800c4e4 <__malloc_unlock>
 800c44c:	e7a1      	b.n	800c392 <_malloc_r+0x22>
 800c44e:	6025      	str	r5, [r4, #0]
 800c450:	e7de      	b.n	800c410 <_malloc_r+0xa0>
 800c452:	bf00      	nop
 800c454:	240008a8 	.word	0x240008a8

0800c458 <_realloc_r>:
 800c458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c45c:	4680      	mov	r8, r0
 800c45e:	4614      	mov	r4, r2
 800c460:	460e      	mov	r6, r1
 800c462:	b921      	cbnz	r1, 800c46e <_realloc_r+0x16>
 800c464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c468:	4611      	mov	r1, r2
 800c46a:	f7ff bf81 	b.w	800c370 <_malloc_r>
 800c46e:	b92a      	cbnz	r2, 800c47c <_realloc_r+0x24>
 800c470:	f7ff ff12 	bl	800c298 <_free_r>
 800c474:	4625      	mov	r5, r4
 800c476:	4628      	mov	r0, r5
 800c478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c47c:	f000 f838 	bl	800c4f0 <_malloc_usable_size_r>
 800c480:	4284      	cmp	r4, r0
 800c482:	4607      	mov	r7, r0
 800c484:	d802      	bhi.n	800c48c <_realloc_r+0x34>
 800c486:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c48a:	d812      	bhi.n	800c4b2 <_realloc_r+0x5a>
 800c48c:	4621      	mov	r1, r4
 800c48e:	4640      	mov	r0, r8
 800c490:	f7ff ff6e 	bl	800c370 <_malloc_r>
 800c494:	4605      	mov	r5, r0
 800c496:	2800      	cmp	r0, #0
 800c498:	d0ed      	beq.n	800c476 <_realloc_r+0x1e>
 800c49a:	42bc      	cmp	r4, r7
 800c49c:	4622      	mov	r2, r4
 800c49e:	4631      	mov	r1, r6
 800c4a0:	bf28      	it	cs
 800c4a2:	463a      	movcs	r2, r7
 800c4a4:	f7ff fba4 	bl	800bbf0 <memcpy>
 800c4a8:	4631      	mov	r1, r6
 800c4aa:	4640      	mov	r0, r8
 800c4ac:	f7ff fef4 	bl	800c298 <_free_r>
 800c4b0:	e7e1      	b.n	800c476 <_realloc_r+0x1e>
 800c4b2:	4635      	mov	r5, r6
 800c4b4:	e7df      	b.n	800c476 <_realloc_r+0x1e>
	...

0800c4b8 <_sbrk_r>:
 800c4b8:	b538      	push	{r3, r4, r5, lr}
 800c4ba:	4d06      	ldr	r5, [pc, #24]	; (800c4d4 <_sbrk_r+0x1c>)
 800c4bc:	2300      	movs	r3, #0
 800c4be:	4604      	mov	r4, r0
 800c4c0:	4608      	mov	r0, r1
 800c4c2:	602b      	str	r3, [r5, #0]
 800c4c4:	f7f4 ffe0 	bl	8001488 <_sbrk>
 800c4c8:	1c43      	adds	r3, r0, #1
 800c4ca:	d102      	bne.n	800c4d2 <_sbrk_r+0x1a>
 800c4cc:	682b      	ldr	r3, [r5, #0]
 800c4ce:	b103      	cbz	r3, 800c4d2 <_sbrk_r+0x1a>
 800c4d0:	6023      	str	r3, [r4, #0]
 800c4d2:	bd38      	pop	{r3, r4, r5, pc}
 800c4d4:	240008b0 	.word	0x240008b0

0800c4d8 <__malloc_lock>:
 800c4d8:	4801      	ldr	r0, [pc, #4]	; (800c4e0 <__malloc_lock+0x8>)
 800c4da:	f000 b811 	b.w	800c500 <__retarget_lock_acquire_recursive>
 800c4de:	bf00      	nop
 800c4e0:	240008b4 	.word	0x240008b4

0800c4e4 <__malloc_unlock>:
 800c4e4:	4801      	ldr	r0, [pc, #4]	; (800c4ec <__malloc_unlock+0x8>)
 800c4e6:	f000 b80c 	b.w	800c502 <__retarget_lock_release_recursive>
 800c4ea:	bf00      	nop
 800c4ec:	240008b4 	.word	0x240008b4

0800c4f0 <_malloc_usable_size_r>:
 800c4f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4f4:	1f18      	subs	r0, r3, #4
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	bfbc      	itt	lt
 800c4fa:	580b      	ldrlt	r3, [r1, r0]
 800c4fc:	18c0      	addlt	r0, r0, r3
 800c4fe:	4770      	bx	lr

0800c500 <__retarget_lock_acquire_recursive>:
 800c500:	4770      	bx	lr

0800c502 <__retarget_lock_release_recursive>:
 800c502:	4770      	bx	lr

0800c504 <_init>:
 800c504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c506:	bf00      	nop
 800c508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c50a:	bc08      	pop	{r3}
 800c50c:	469e      	mov	lr, r3
 800c50e:	4770      	bx	lr

0800c510 <_fini>:
 800c510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c512:	bf00      	nop
 800c514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c516:	bc08      	pop	{r3}
 800c518:	469e      	mov	lr, r3
 800c51a:	4770      	bx	lr
