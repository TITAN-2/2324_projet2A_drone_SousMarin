
RECEPTION_UART_H7A3ZIQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfe4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  0800d294  0800d294  0001d294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d674  0800d674  0001d674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d67c  0800d67c  0001d67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d680  0800d680  0001d680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  0800d684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000728  2400009c  0800d720  0002009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240007c4  0800d720  000207c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b5a1  00000000  00000000  000200ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003446  00000000  00000000  0003b66b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001310  00000000  00000000  0003eab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001198  00000000  00000000  0003fdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033747  00000000  00000000  00040f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cfb0  00000000  00000000  000746a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014207d  00000000  00000000  00091657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d36d4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000059e4  00000000  00000000  001d3724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         00000024  00000000  00000000  001d9108  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000004e  00000000  00000000  001d912c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400009c 	.word	0x2400009c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800d27c 	.word	0x0800d27c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000a0 	.word	0x240000a0
 80002ec:	0800d27c 	.word	0x0800d27c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <Thrust_Init>:
 *      Author: romingo
 */

#include "Process.h"

void Thrust_Init(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL);
 8000698:	4b8b      	ldr	r3, [pc, #556]	; (80008c8 <Thrust_Init+0x234>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a8a      	ldr	r2, [pc, #552]	; (80008c8 <Thrust_Init+0x234>)
 800069e:	6852      	ldr	r2, [r2, #4]
 80006a0:	4611      	mov	r1, r2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f007 fa80 	bl	8007ba8 <HAL_TIM_PWM_Start>
	HAL_Delay(500);
 80006a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ac:	f001 fdc2 	bl	8002234 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MIN_Thrust);
 80006b0:	4b85      	ldr	r3, [pc, #532]	; (80008c8 <Thrust_Init+0x234>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d105      	bne.n	80006c4 <Thrust_Init+0x30>
 80006b8:	4b83      	ldr	r3, [pc, #524]	; (80008c8 <Thrust_Init+0x234>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2264      	movs	r2, #100	; 0x64
 80006c0:	635a      	str	r2, [r3, #52]	; 0x34
 80006c2:	e02c      	b.n	800071e <Thrust_Init+0x8a>
 80006c4:	4b80      	ldr	r3, [pc, #512]	; (80008c8 <Thrust_Init+0x234>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	2b04      	cmp	r3, #4
 80006ca:	d105      	bne.n	80006d8 <Thrust_Init+0x44>
 80006cc:	4b7e      	ldr	r3, [pc, #504]	; (80008c8 <Thrust_Init+0x234>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	2364      	movs	r3, #100	; 0x64
 80006d4:	6393      	str	r3, [r2, #56]	; 0x38
 80006d6:	e022      	b.n	800071e <Thrust_Init+0x8a>
 80006d8:	4b7b      	ldr	r3, [pc, #492]	; (80008c8 <Thrust_Init+0x234>)
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	2b08      	cmp	r3, #8
 80006de:	d105      	bne.n	80006ec <Thrust_Init+0x58>
 80006e0:	4b79      	ldr	r3, [pc, #484]	; (80008c8 <Thrust_Init+0x234>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	2364      	movs	r3, #100	; 0x64
 80006e8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006ea:	e018      	b.n	800071e <Thrust_Init+0x8a>
 80006ec:	4b76      	ldr	r3, [pc, #472]	; (80008c8 <Thrust_Init+0x234>)
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	2b0c      	cmp	r3, #12
 80006f2:	d105      	bne.n	8000700 <Thrust_Init+0x6c>
 80006f4:	4b74      	ldr	r3, [pc, #464]	; (80008c8 <Thrust_Init+0x234>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	6413      	str	r3, [r2, #64]	; 0x40
 80006fe:	e00e      	b.n	800071e <Thrust_Init+0x8a>
 8000700:	4b71      	ldr	r3, [pc, #452]	; (80008c8 <Thrust_Init+0x234>)
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	2b10      	cmp	r3, #16
 8000706:	d105      	bne.n	8000714 <Thrust_Init+0x80>
 8000708:	4b6f      	ldr	r3, [pc, #444]	; (80008c8 <Thrust_Init+0x234>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	2364      	movs	r3, #100	; 0x64
 8000710:	6593      	str	r3, [r2, #88]	; 0x58
 8000712:	e004      	b.n	800071e <Thrust_Init+0x8a>
 8000714:	4b6c      	ldr	r3, [pc, #432]	; (80008c8 <Thrust_Init+0x234>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	2364      	movs	r3, #100	; 0x64
 800071c:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(500);
 800071e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000722:	f001 fd87 	bl	8002234 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MAX_Thrust);
 8000726:	4b68      	ldr	r3, [pc, #416]	; (80008c8 <Thrust_Init+0x234>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d105      	bne.n	800073a <Thrust_Init+0xa6>
 800072e:	4b66      	ldr	r3, [pc, #408]	; (80008c8 <Thrust_Init+0x234>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2232      	movs	r2, #50	; 0x32
 8000736:	635a      	str	r2, [r3, #52]	; 0x34
 8000738:	e02c      	b.n	8000794 <Thrust_Init+0x100>
 800073a:	4b63      	ldr	r3, [pc, #396]	; (80008c8 <Thrust_Init+0x234>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	2b04      	cmp	r3, #4
 8000740:	d105      	bne.n	800074e <Thrust_Init+0xba>
 8000742:	4b61      	ldr	r3, [pc, #388]	; (80008c8 <Thrust_Init+0x234>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	2332      	movs	r3, #50	; 0x32
 800074a:	6393      	str	r3, [r2, #56]	; 0x38
 800074c:	e022      	b.n	8000794 <Thrust_Init+0x100>
 800074e:	4b5e      	ldr	r3, [pc, #376]	; (80008c8 <Thrust_Init+0x234>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	2b08      	cmp	r3, #8
 8000754:	d105      	bne.n	8000762 <Thrust_Init+0xce>
 8000756:	4b5c      	ldr	r3, [pc, #368]	; (80008c8 <Thrust_Init+0x234>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	2332      	movs	r3, #50	; 0x32
 800075e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000760:	e018      	b.n	8000794 <Thrust_Init+0x100>
 8000762:	4b59      	ldr	r3, [pc, #356]	; (80008c8 <Thrust_Init+0x234>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	2b0c      	cmp	r3, #12
 8000768:	d105      	bne.n	8000776 <Thrust_Init+0xe2>
 800076a:	4b57      	ldr	r3, [pc, #348]	; (80008c8 <Thrust_Init+0x234>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	2332      	movs	r3, #50	; 0x32
 8000772:	6413      	str	r3, [r2, #64]	; 0x40
 8000774:	e00e      	b.n	8000794 <Thrust_Init+0x100>
 8000776:	4b54      	ldr	r3, [pc, #336]	; (80008c8 <Thrust_Init+0x234>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	2b10      	cmp	r3, #16
 800077c:	d105      	bne.n	800078a <Thrust_Init+0xf6>
 800077e:	4b52      	ldr	r3, [pc, #328]	; (80008c8 <Thrust_Init+0x234>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	2332      	movs	r3, #50	; 0x32
 8000786:	6593      	str	r3, [r2, #88]	; 0x58
 8000788:	e004      	b.n	8000794 <Thrust_Init+0x100>
 800078a:	4b4f      	ldr	r3, [pc, #316]	; (80008c8 <Thrust_Init+0x234>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	2332      	movs	r3, #50	; 0x32
 8000792:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(500);
 8000794:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000798:	f001 fd4c 	bl	8002234 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MIN_Thrust);
 800079c:	4b4a      	ldr	r3, [pc, #296]	; (80008c8 <Thrust_Init+0x234>)
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d105      	bne.n	80007b0 <Thrust_Init+0x11c>
 80007a4:	4b48      	ldr	r3, [pc, #288]	; (80008c8 <Thrust_Init+0x234>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2264      	movs	r2, #100	; 0x64
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34
 80007ae:	e02c      	b.n	800080a <Thrust_Init+0x176>
 80007b0:	4b45      	ldr	r3, [pc, #276]	; (80008c8 <Thrust_Init+0x234>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	2b04      	cmp	r3, #4
 80007b6:	d105      	bne.n	80007c4 <Thrust_Init+0x130>
 80007b8:	4b43      	ldr	r3, [pc, #268]	; (80008c8 <Thrust_Init+0x234>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	2364      	movs	r3, #100	; 0x64
 80007c0:	6393      	str	r3, [r2, #56]	; 0x38
 80007c2:	e022      	b.n	800080a <Thrust_Init+0x176>
 80007c4:	4b40      	ldr	r3, [pc, #256]	; (80008c8 <Thrust_Init+0x234>)
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	2b08      	cmp	r3, #8
 80007ca:	d105      	bne.n	80007d8 <Thrust_Init+0x144>
 80007cc:	4b3e      	ldr	r3, [pc, #248]	; (80008c8 <Thrust_Init+0x234>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	2364      	movs	r3, #100	; 0x64
 80007d4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80007d6:	e018      	b.n	800080a <Thrust_Init+0x176>
 80007d8:	4b3b      	ldr	r3, [pc, #236]	; (80008c8 <Thrust_Init+0x234>)
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	2b0c      	cmp	r3, #12
 80007de:	d105      	bne.n	80007ec <Thrust_Init+0x158>
 80007e0:	4b39      	ldr	r3, [pc, #228]	; (80008c8 <Thrust_Init+0x234>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	2364      	movs	r3, #100	; 0x64
 80007e8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ea:	e00e      	b.n	800080a <Thrust_Init+0x176>
 80007ec:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <Thrust_Init+0x234>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	2b10      	cmp	r3, #16
 80007f2:	d105      	bne.n	8000800 <Thrust_Init+0x16c>
 80007f4:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <Thrust_Init+0x234>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	2364      	movs	r3, #100	; 0x64
 80007fc:	6593      	str	r3, [r2, #88]	; 0x58
 80007fe:	e004      	b.n	800080a <Thrust_Init+0x176>
 8000800:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <Thrust_Init+0x234>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	2364      	movs	r3, #100	; 0x64
 8000808:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(500);
 800080a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800080e:	f001 fd11 	bl	8002234 <HAL_Delay>
	HAL_TIM_PWM_Start(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL);
 8000812:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <Thrust_Init+0x238>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a2d      	ldr	r2, [pc, #180]	; (80008cc <Thrust_Init+0x238>)
 8000818:	6852      	ldr	r2, [r2, #4]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f007 f9c3 	bl	8007ba8 <HAL_TIM_PWM_Start>
	HAL_Delay(500);
 8000822:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000826:	f001 fd05 	bl	8002234 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MIN_Thrust);
 800082a:	4b28      	ldr	r3, [pc, #160]	; (80008cc <Thrust_Init+0x238>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d105      	bne.n	800083e <Thrust_Init+0x1aa>
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <Thrust_Init+0x238>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2264      	movs	r2, #100	; 0x64
 800083a:	635a      	str	r2, [r3, #52]	; 0x34
 800083c:	e02c      	b.n	8000898 <Thrust_Init+0x204>
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <Thrust_Init+0x238>)
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	2b04      	cmp	r3, #4
 8000844:	d105      	bne.n	8000852 <Thrust_Init+0x1be>
 8000846:	4b21      	ldr	r3, [pc, #132]	; (80008cc <Thrust_Init+0x238>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	2364      	movs	r3, #100	; 0x64
 800084e:	6393      	str	r3, [r2, #56]	; 0x38
 8000850:	e022      	b.n	8000898 <Thrust_Init+0x204>
 8000852:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <Thrust_Init+0x238>)
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b08      	cmp	r3, #8
 8000858:	d105      	bne.n	8000866 <Thrust_Init+0x1d2>
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <Thrust_Init+0x238>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	2364      	movs	r3, #100	; 0x64
 8000862:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000864:	e018      	b.n	8000898 <Thrust_Init+0x204>
 8000866:	4b19      	ldr	r3, [pc, #100]	; (80008cc <Thrust_Init+0x238>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b0c      	cmp	r3, #12
 800086c:	d105      	bne.n	800087a <Thrust_Init+0x1e6>
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <Thrust_Init+0x238>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	2364      	movs	r3, #100	; 0x64
 8000876:	6413      	str	r3, [r2, #64]	; 0x40
 8000878:	e00e      	b.n	8000898 <Thrust_Init+0x204>
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <Thrust_Init+0x238>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	2b10      	cmp	r3, #16
 8000880:	d105      	bne.n	800088e <Thrust_Init+0x1fa>
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <Thrust_Init+0x238>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	2364      	movs	r3, #100	; 0x64
 800088a:	6593      	str	r3, [r2, #88]	; 0x58
 800088c:	e004      	b.n	8000898 <Thrust_Init+0x204>
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <Thrust_Init+0x238>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	2364      	movs	r3, #100	; 0x64
 8000896:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_Delay(500);
 8000898:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800089c:	f001 fcca 	bl	8002234 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MAX_Thrust);
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <Thrust_Init+0x238>)
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d105      	bne.n	80008b4 <Thrust_Init+0x220>
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <Thrust_Init+0x238>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2232      	movs	r2, #50	; 0x32
 80008b0:	635a      	str	r2, [r3, #52]	; 0x34
 80008b2:	e030      	b.n	8000916 <Thrust_Init+0x282>
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <Thrust_Init+0x238>)
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d109      	bne.n	80008d0 <Thrust_Init+0x23c>
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <Thrust_Init+0x238>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	2332      	movs	r3, #50	; 0x32
 80008c4:	6393      	str	r3, [r2, #56]	; 0x38
 80008c6:	e026      	b.n	8000916 <Thrust_Init+0x282>
 80008c8:	24000000 	.word	0x24000000
 80008cc:	24000008 	.word	0x24000008
 80008d0:	4b31      	ldr	r3, [pc, #196]	; (8000998 <Thrust_Init+0x304>)
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	2b08      	cmp	r3, #8
 80008d6:	d105      	bne.n	80008e4 <Thrust_Init+0x250>
 80008d8:	4b2f      	ldr	r3, [pc, #188]	; (8000998 <Thrust_Init+0x304>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	2332      	movs	r3, #50	; 0x32
 80008e0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008e2:	e018      	b.n	8000916 <Thrust_Init+0x282>
 80008e4:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <Thrust_Init+0x304>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	2b0c      	cmp	r3, #12
 80008ea:	d105      	bne.n	80008f8 <Thrust_Init+0x264>
 80008ec:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <Thrust_Init+0x304>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	2332      	movs	r3, #50	; 0x32
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	e00e      	b.n	8000916 <Thrust_Init+0x282>
 80008f8:	4b27      	ldr	r3, [pc, #156]	; (8000998 <Thrust_Init+0x304>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b10      	cmp	r3, #16
 80008fe:	d105      	bne.n	800090c <Thrust_Init+0x278>
 8000900:	4b25      	ldr	r3, [pc, #148]	; (8000998 <Thrust_Init+0x304>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	2332      	movs	r3, #50	; 0x32
 8000908:	6593      	str	r3, [r2, #88]	; 0x58
 800090a:	e004      	b.n	8000916 <Thrust_Init+0x282>
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <Thrust_Init+0x304>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	2332      	movs	r3, #50	; 0x32
 8000914:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(500);
 8000916:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800091a:	f001 fc8b 	bl	8002234 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MIN_Thrust);
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <Thrust_Init+0x304>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d105      	bne.n	8000932 <Thrust_Init+0x29e>
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <Thrust_Init+0x304>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2264      	movs	r2, #100	; 0x64
 800092e:	635a      	str	r2, [r3, #52]	; 0x34
 8000930:	e02c      	b.n	800098c <Thrust_Init+0x2f8>
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <Thrust_Init+0x304>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	2b04      	cmp	r3, #4
 8000938:	d105      	bne.n	8000946 <Thrust_Init+0x2b2>
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <Thrust_Init+0x304>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	2364      	movs	r3, #100	; 0x64
 8000942:	6393      	str	r3, [r2, #56]	; 0x38
 8000944:	e022      	b.n	800098c <Thrust_Init+0x2f8>
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <Thrust_Init+0x304>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	2b08      	cmp	r3, #8
 800094c:	d105      	bne.n	800095a <Thrust_Init+0x2c6>
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <Thrust_Init+0x304>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	2364      	movs	r3, #100	; 0x64
 8000956:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000958:	e018      	b.n	800098c <Thrust_Init+0x2f8>
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <Thrust_Init+0x304>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	2b0c      	cmp	r3, #12
 8000960:	d105      	bne.n	800096e <Thrust_Init+0x2da>
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <Thrust_Init+0x304>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	2364      	movs	r3, #100	; 0x64
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
 800096c:	e00e      	b.n	800098c <Thrust_Init+0x2f8>
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <Thrust_Init+0x304>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	2b10      	cmp	r3, #16
 8000974:	d105      	bne.n	8000982 <Thrust_Init+0x2ee>
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <Thrust_Init+0x304>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	2364      	movs	r3, #100	; 0x64
 800097e:	6593      	str	r3, [r2, #88]	; 0x58
 8000980:	e004      	b.n	800098c <Thrust_Init+0x2f8>
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <Thrust_Init+0x304>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	2364      	movs	r3, #100	; 0x64
 800098a:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(500);
 800098c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000990:	f001 fc50 	bl	8002234 <HAL_Delay>

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	24000008 	.word	0x24000008

0800099c <Depth_Init>:
void Depth_Init(void){
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
		//XL320_set_led_ON(XL_Front.huartXL,2); //Green Led
		XL320_set_led_ON(XL_Back.huartXL,2);
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <Depth_Init+0x44>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2102      	movs	r1, #2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 fb16 	bl	8000fd8 <XL320_set_led_ON>
		XL320_set_control_mode(XL_Back.huartXL,1);
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <Depth_Init+0x44>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2101      	movs	r1, #1
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 fb4d 	bl	8001052 <XL320_set_control_mode>
		XL320_set_torque_enable(XL_Back.huartXL,1);
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <Depth_Init+0x44>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2101      	movs	r1, #1
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 fb86 	bl	80010d0 <XL320_set_torque_enable>
		XL320_set_pos(XL_Front.huartXL, (uint16_t )0);
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <Depth_Init+0x48>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fbbd 	bl	800114a <XL320_set_pos>
		XL320_set_pos(XL_Back.huartXL, (uint16_t )0);
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <Depth_Init+0x44>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fbb7 	bl	800114a <XL320_set_pos>
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	24000018 	.word	0x24000018
 80009e4:	24000010 	.word	0x24000010

080009e8 <Process_Init>:
void Process_Init(void){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	Thrust_Init();
 80009ec:	f7ff fe52 	bl	8000694 <Thrust_Init>
	Depth_Init();
 80009f0:	f7ff ffd4 	bl	800099c <Depth_Init>
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <Process>:

void Process(receiveMsg* message) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
    AdjustAngle(message->thrust,message->angle);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	781a      	ldrb	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4610      	mov	r0, r2
 8000a0e:	f000 f88b 	bl	8000b28 <AdjustAngle>
    AdjustDepth(&XL_Net,message->depth);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	789b      	ldrb	r3, [r3, #2]
 8000a16:	4619      	mov	r1, r3
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <Process+0x30>)
 8000a1a:	f000 f8b3 	bl	8000b84 <AdjustDepth>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	24000020 	.word	0x24000020
 8000a2c:	00000000 	.word	0x00000000

08000a30 <AdjustThrust>:

void AdjustThrust( TIM_PROP* tim_prop, uint8_t thrust) {
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	70fb      	strb	r3, [r7, #3]
	float thrust_ms = 1-(thrust * ((float)(MIN_Thrust - MAX_Thrust) / 100.0)) + MIN_Thrust;
 8000a3c:	78fb      	ldrb	r3, [r7, #3]
 8000a3e:	ee07 3a90 	vmov	s15, r3
 8000a42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a46:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000a4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a4e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000a52:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a56:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8000b20 <AdjustThrust+0xf0>
 8000a5a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a5e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a62:	edc7 7a03 	vstr	s15, [r7, #12]
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d10a      	bne.n	8000a84 <AdjustThrust+0x54>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a7c:	ee17 2a90 	vmov	r2, s15
 8000a80:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a82:	e045      	b.n	8000b10 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	2b04      	cmp	r3, #4
 8000a8a:	d10a      	bne.n	8000aa2 <AdjustThrust+0x72>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a9a:	ee17 3a90 	vmov	r3, s15
 8000a9e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000aa0:	e036      	b.n	8000b10 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	2b08      	cmp	r3, #8
 8000aa8:	d10a      	bne.n	8000ac0 <AdjustThrust+0x90>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ab4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ab8:	ee17 3a90 	vmov	r3, s15
 8000abc:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000abe:	e027      	b.n	8000b10 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	2b0c      	cmp	r3, #12
 8000ac6:	d10a      	bne.n	8000ade <AdjustThrust+0xae>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ad6:	ee17 3a90 	vmov	r3, s15
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000adc:	e018      	b.n	8000b10 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	2b10      	cmp	r3, #16
 8000ae4:	d10a      	bne.n	8000afc <AdjustThrust+0xcc>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	edd7 7a03 	vldr	s15, [r7, #12]
 8000af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000af4:	ee17 3a90 	vmov	r3, s15
 8000af8:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000afa:	e009      	b.n	8000b10 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b0a:	ee17 3a90 	vmov	r3, s15
 8000b0e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	f3af 8000 	nop.w
 8000b20:	00000000 	.word	0x00000000
 8000b24:	40590000 	.word	0x40590000

08000b28 <AdjustAngle>:

void AdjustAngle(uint8_t thrust,int8_t angle){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	460a      	mov	r2, r1
 8000b32:	71fb      	strb	r3, [r7, #7]
 8000b34:	4613      	mov	r3, r2
 8000b36:	71bb      	strb	r3, [r7, #6]
	uint8_t thrust_G = thrust;
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	73fb      	strb	r3, [r7, #15]
	uint8_t thrust_D = thrust;
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	73bb      	strb	r3, [r7, #14]

	if (angle<50){//On tourne a gauche
 8000b40:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b44:	2b31      	cmp	r3, #49	; 0x31
 8000b46:	dc03      	bgt.n	8000b50 <AdjustAngle+0x28>
		thrust_G = thrust;
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	73fb      	strb	r3, [r7, #15]
		thrust_D = 0; // Ajouter une diminution progressive des pousses moteurs
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73bb      	strb	r3, [r7, #14]
	}
	if (angle>50){//On tourne a droite
 8000b50:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b54:	2b32      	cmp	r3, #50	; 0x32
 8000b56:	dd03      	ble.n	8000b60 <AdjustAngle+0x38>
		thrust_G = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	73fb      	strb	r3, [r7, #15]
		thrust_D = thrust;
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	73bb      	strb	r3, [r7, #14]
	}
	AdjustThrust(&TIM_PROP_G, thrust_G);
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <AdjustAngle+0x54>)
 8000b66:	f7ff ff63 	bl	8000a30 <AdjustThrust>
	AdjustThrust(&TIM_PROP_D, thrust_D);
 8000b6a:	7bbb      	ldrb	r3, [r7, #14]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4804      	ldr	r0, [pc, #16]	; (8000b80 <AdjustAngle+0x58>)
 8000b70:	f7ff ff5e 	bl	8000a30 <AdjustThrust>
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	24000000 	.word	0x24000000
 8000b80:	24000008 	.word	0x24000008

08000b84 <AdjustDepth>:

void AdjustDepth(XL_Network* XL_Net,uint8_t depth){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	70fb      	strb	r3, [r7, #3]
	//Logique:
	//on repartit équitablement la descente des ballasts

	//XL320_set_pos(XL_Net->XL_Front->huartXL , depth*3); // Dans XL320_set_pos on map de 0,300 --> 0,1023 ici on veut map de 0,100 --> 0,1023
	XL320_set_pos(XL_Net->XL_Back->huartXL , (uint16_t)depth*3);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	78fa      	ldrb	r2, [r7, #3]
 8000b98:	b292      	uxth	r2, r2
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	0049      	lsls	r1, r1, #1
 8000b9e:	440a      	add	r2, r1
 8000ba0:	b292      	uxth	r2, r2
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fad0 	bl	800114a <XL320_set_pos>
	XL320_set_led_ON(XL_Net->XL_Back->huartXL , 5);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2105      	movs	r1, #5
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 fa10 	bl	8000fd8 <XL320_set_led_ON>

	XL_Net->XL_Front->pos = (uint16_t)depth*3;
 8000bb8:	78fb      	ldrb	r3, [r7, #3]
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	0049      	lsls	r1, r1, #1
 8000bc4:	440a      	add	r2, r1
 8000bc6:	b292      	uxth	r2, r2
 8000bc8:	80da      	strh	r2, [r3, #6]
	XL_Net->XL_Back->pos = (uint16_t)depth*3;
 8000bca:	78fb      	ldrb	r3, [r7, #3]
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	0049      	lsls	r1, r1, #1
 8000bd6:	440a      	add	r2, r1
 8000bd8:	b292      	uxth	r2, r2
 8000bda:	80da      	strh	r2, [r3, #6]


}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <RPICom_Init>:
#include "RPICom.h"

RPICom_HandleTypeDef hRPICom;
void RPICom_Init(UART_HandleTypeDef* huart, UART_HandleTypeDef* huartDebug){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
	hRPICom.huart = huart;
 8000bee:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <RPICom_Init+0x70>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6013      	str	r3, [r2, #0]
	hRPICom.huartDebug = huartDebug;
 8000bf4:	4a17      	ldr	r2, [pc, #92]	; (8000c54 <RPICom_Init+0x70>)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	6053      	str	r3, [r2, #4]
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	681b      	ldr	r3, [r3, #0]
	memcpy(&(hRPICom.receiveMessage), NULL, sizeof(receiveMsg));
 8000bfe:	4a15      	ldr	r2, [pc, #84]	; (8000c54 <RPICom_Init+0x70>)
 8000c00:	6093      	str	r3, [r2, #8]
	memcpy(hRPICom.RxBuffer, NULL , UART_RPI_RX_BUFFER_SIZE);
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <RPICom_Init+0x70>)
 8000c04:	2100      	movs	r1, #0
 8000c06:	f103 0213 	add.w	r2, r3, #19
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	cb03      	ldmia	r3!, {r0, r1}
 8000c0e:	6010      	str	r0, [r2, #0]
 8000c10:	6051      	str	r1, [r2, #4]
	memcpy(hRPICom.TxBuffer, NULL, UART_RPI_TX_BUFFER_SIZE);
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <RPICom_Init+0x70>)
 8000c14:	2100      	movs	r1, #0
 8000c16:	f103 021b 	add.w	r2, r3, #27
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	cb03      	ldmia	r3!, {r0, r1}
 8000c1e:	6010      	str	r0, [r2, #0]
 8000c20:	6051      	str	r1, [r2, #4]
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	8113      	strh	r3, [r2, #8]
	memcpy(hRPICom.DebugBuffer, NULL, UART_RPI_DEBUG_BUFFER_SIZE);
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <RPICom_Init+0x70>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	3325      	adds	r3, #37	; 0x25
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c32:	4618      	mov	r0, r3
 8000c34:	f00b f890 	bl	800bd58 <memcpy>
	hRPICom.sendMessage.paquetNumber = 0;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <RPICom_Init+0x70>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	745a      	strb	r2, [r3, #17]
	hRPICom.errorNumberRx = 0;
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <RPICom_Init+0x70>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	749a      	strb	r2, [r3, #18]

	RPICom_UartActivate(&hRPICom);
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <RPICom_Init+0x70>)
 8000c46:	f000 f807 	bl	8000c58 <RPICom_UartActivate>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	240000b8 	.word	0x240000b8

08000c58 <RPICom_UartActivate>:

void RPICom_UartActivate(RPICom_HandleTypeDef* hRPI){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(hRPI->huart, hRPI->RxBuffer, UART_RPI_RX_BUFFER_SIZE);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6818      	ldr	r0, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3313      	adds	r3, #19
 8000c68:	2208      	movs	r2, #8
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f008 fa5a 	bl	8009124 <HAL_UART_Receive_IT>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <checkSum>:

uint8_t checkSum(uint8_t buffer[],uint8_t buffer_size){
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	70fb      	strb	r3, [r7, #3]
	uint8_t checkSum = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < buffer_size-1; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	e009      	b.n	8000ca2 <checkSum+0x2a>
		checkSum ^= buffer[i];
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	4413      	add	r3, r2
 8000c94:	781a      	ldrb	r2, [r3, #0]
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	4053      	eors	r3, r2
 8000c9a:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < buffer_size-1; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	78fb      	ldrb	r3, [r7, #3]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbf0      	blt.n	8000c8e <checkSum+0x16>
	}
	return checkSum;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <RPICom_DecodeBinaryMessage>:

void RPICom_DecodeBinaryMessage(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af04      	add	r7, sp, #16
	hRPICom.errorNumberRx = '0';
 8000cc2:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000cc4:	2230      	movs	r2, #48	; 0x30
 8000cc6:	749a      	strb	r2, [r3, #18]
	// Check Header
	if (HEADER_CheckValue1 != hRPICom.RxBuffer[0] || HEADER_CheckValue2 != hRPICom.RxBuffer[1]){//On envoie une erreur à la raspberry
 8000cc8:	4b2e      	ldr	r3, [pc, #184]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000cca:	7cdb      	ldrb	r3, [r3, #19]
 8000ccc:	2bff      	cmp	r3, #255	; 0xff
 8000cce:	d103      	bne.n	8000cd8 <RPICom_DecodeBinaryMessage+0x1c>
 8000cd0:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000cd2:	7d1b      	ldrb	r3, [r3, #20]
 8000cd4:	2bfe      	cmp	r3, #254	; 0xfe
 8000cd6:	d002      	beq.n	8000cde <RPICom_DecodeBinaryMessage+0x22>
		hRPICom.errorNumberRx ='1';
 8000cd8:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000cda:	2231      	movs	r2, #49	; 0x31
 8000cdc:	749a      	strb	r2, [r3, #18]
	}
	// Check Length
	if (UART_RPI_RX_BUFFER_SIZE != hRPICom.RxBuffer[2]){// Il nous manque des informations
 8000cde:	4b29      	ldr	r3, [pc, #164]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000ce0:	7d5b      	ldrb	r3, [r3, #21]
 8000ce2:	2b08      	cmp	r3, #8
 8000ce4:	d002      	beq.n	8000cec <RPICom_DecodeBinaryMessage+0x30>
		hRPICom.errorNumberRx='2';
 8000ce6:	4b27      	ldr	r3, [pc, #156]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000ce8:	2232      	movs	r2, #50	; 0x32
 8000cea:	749a      	strb	r2, [r3, #18]
	}
	hRPICom.receiveMessage.thrust = hRPICom.RxBuffer[3];
 8000cec:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000cee:	7d9a      	ldrb	r2, [r3, #22]
 8000cf0:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000cf2:	721a      	strb	r2, [r3, #8]
	hRPICom.receiveMessage.angle = hRPICom.RxBuffer[4];
 8000cf4:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000cf6:	7ddb      	ldrb	r3, [r3, #23]
 8000cf8:	b25a      	sxtb	r2, r3
 8000cfa:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000cfc:	725a      	strb	r2, [r3, #9]
	hRPICom.receiveMessage.depth = hRPICom.RxBuffer[5];
 8000cfe:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000d00:	7e1a      	ldrb	r2, [r3, #24]
 8000d02:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000d04:	729a      	strb	r2, [r3, #10]
	hRPICom.receiveMessage.paquetNumber = hRPICom.RxBuffer[6];
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000d08:	7e5a      	ldrb	r2, [r3, #25]
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000d0c:	72da      	strb	r2, [r3, #11]

	//Checksum
	if(checkSum(hRPICom.RxBuffer,UART_RPI_RX_BUFFER_SIZE) !=  hRPICom.RxBuffer[7]){
 8000d0e:	2108      	movs	r1, #8
 8000d10:	481d      	ldr	r0, [pc, #116]	; (8000d88 <RPICom_DecodeBinaryMessage+0xcc>)
 8000d12:	f7ff ffb1 	bl	8000c78 <checkSum>
 8000d16:	4603      	mov	r3, r0
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000d1c:	7e9b      	ldrb	r3, [r3, #26]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d002      	beq.n	8000d28 <RPICom_DecodeBinaryMessage+0x6c>
		hRPICom.errorNumberRx='3';
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000d24:	2233      	movs	r2, #51	; 0x33
 8000d26:	749a      	strb	r2, [r3, #18]
	}

	//Response RPI
	uint8_t stringLength = snprintf((char *)hRPICom.DebugBuffer, UART_RPI_DEBUG_BUFFER_SIZE, "[RECEPTION]\nPaquet: %u\r\nThrust: %u\nAngle: %u\r\nStatut: %c\r\n", hRPICom.receiveMessage.paquetNumber,hRPICom.receiveMessage.thrust,hRPICom.receiveMessage.angle,hRPICom.errorNumberRx);
 8000d28:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000d2a:	7adb      	ldrb	r3, [r3, #11]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000d30:	7a1b      	ldrb	r3, [r3, #8]
 8000d32:	461a      	mov	r2, r3
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000d36:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000d3e:	7c9b      	ldrb	r3, [r3, #18]
 8000d40:	9302      	str	r3, [sp, #8]
 8000d42:	9101      	str	r1, [sp, #4]
 8000d44:	9200      	str	r2, [sp, #0]
 8000d46:	4603      	mov	r3, r0
 8000d48:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <RPICom_DecodeBinaryMessage+0xd0>)
 8000d4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d4e:	4810      	ldr	r0, [pc, #64]	; (8000d90 <RPICom_DecodeBinaryMessage+0xd4>)
 8000d50:	f00b f884 	bl	800be5c <sniprintf>
 8000d54:	4603      	mov	r3, r0
 8000d56:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(hRPICom.huartDebug, hRPICom.DebugBuffer, stringLength, 10);
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000d5a:	6858      	ldr	r0, [r3, #4]
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	230a      	movs	r3, #10
 8000d62:	490b      	ldr	r1, [pc, #44]	; (8000d90 <RPICom_DecodeBinaryMessage+0xd4>)
 8000d64:	f008 f8bc 	bl	8008ee0 <HAL_UART_Transmit>


	// Vous avez maintenant un message complet dans la structure receiveMessage
	// Vous pouvez faire quelque chose avec ces données, par exemple, appeler une fonction de traitement

	if (hRPICom.errorNumberRx =='0'){
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000d6a:	7c9b      	ldrb	r3, [r3, #18]
 8000d6c:	2b30      	cmp	r3, #48	; 0x30
 8000d6e:	d102      	bne.n	8000d76 <RPICom_DecodeBinaryMessage+0xba>
		Process(&hRPICom.receiveMessage);
 8000d70:	4808      	ldr	r0, [pc, #32]	; (8000d94 <RPICom_DecodeBinaryMessage+0xd8>)
 8000d72:	f7ff fe41 	bl	80009f8 <Process>
	}
	RPICom_UartActivate(&hRPICom);
 8000d76:	4803      	ldr	r0, [pc, #12]	; (8000d84 <RPICom_DecodeBinaryMessage+0xc8>)
 8000d78:	f7ff ff6e 	bl	8000c58 <RPICom_UartActivate>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	240000b8 	.word	0x240000b8
 8000d88:	240000cb 	.word	0x240000cb
 8000d8c:	0800d294 	.word	0x0800d294
 8000d90:	240000dd 	.word	0x240000dd
 8000d94:	240000c0 	.word	0x240000c0

08000d98 <acquireData>:
void acquireData(void){ //Factoriser surement dans un fichier AcquireData
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	//interroge inertielle
	 hRPICom.sendMessage.posX = randomize(0,100);
 8000d9c:	2164      	movs	r1, #100	; 0x64
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f000 f850 	bl	8000e44 <randomize>
 8000da4:	4603      	mov	r3, r0
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <acquireData+0x50>)
 8000daa:	731a      	strb	r2, [r3, #12]
	 hRPICom.sendMessage.posY = randomize(0,100);
 8000dac:	2164      	movs	r1, #100	; 0x64
 8000dae:	2000      	movs	r0, #0
 8000db0:	f000 f848 	bl	8000e44 <randomize>
 8000db4:	4603      	mov	r3, r0
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <acquireData+0x50>)
 8000dba:	735a      	strb	r2, [r3, #13]
	 hRPICom.sendMessage.angleDelta = 1;
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <acquireData+0x50>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	739a      	strb	r2, [r3, #14]
	//interroge capteur temp
	 hRPICom.sendMessage.temp = randomize(15,30);
 8000dc2:	211e      	movs	r1, #30
 8000dc4:	200f      	movs	r0, #15
 8000dc6:	f000 f83d 	bl	8000e44 <randomize>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <acquireData+0x50>)
 8000dd0:	73da      	strb	r2, [r3, #15]
	//interroge batterie
	 hRPICom.sendMessage.batteryPower = 90;
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <acquireData+0x50>)
 8000dd4:	225a      	movs	r2, #90	; 0x5a
 8000dd6:	741a      	strb	r2, [r3, #16]
	 hRPICom.sendMessage.paquetNumber+=1;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <acquireData+0x50>)
 8000dda:	7c5b      	ldrb	r3, [r3, #17]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b01      	ldr	r3, [pc, #4]	; (8000de8 <acquireData+0x50>)
 8000de2:	745a      	strb	r2, [r3, #17]

}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	240000b8 	.word	0x240000b8

08000dec <RPICom_SendBinaryMessage>:
void RPICom_SendBinaryMessage(void){ //Declencher par TIM3_IT ttes les 1s
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	acquireData();
 8000df0:	f7ff ffd2 	bl	8000d98 <acquireData>
	hRPICom.TxBuffer[0]=HEADER_CheckValue1;
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <RPICom_SendBinaryMessage+0x4c>)
 8000df6:	22ff      	movs	r2, #255	; 0xff
 8000df8:	76da      	strb	r2, [r3, #27]
	hRPICom.TxBuffer[1]=HEADER_CheckValue2;
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <RPICom_SendBinaryMessage+0x4c>)
 8000dfc:	22fe      	movs	r2, #254	; 0xfe
 8000dfe:	771a      	strb	r2, [r3, #28]
	hRPICom.TxBuffer[2]=UART_RPI_TX_BUFFER_SIZE;
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <RPICom_SendBinaryMessage+0x4c>)
 8000e02:	220a      	movs	r2, #10
 8000e04:	775a      	strb	r2, [r3, #29]

	memcpy(hRPICom.TxBuffer + 3, &hRPICom.sendMessage, sizeof(hRPICom.sendMessage));
 8000e06:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <RPICom_SendBinaryMessage+0x50>)
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <RPICom_SendBinaryMessage+0x4c>)
 8000e0a:	330c      	adds	r3, #12
 8000e0c:	6818      	ldr	r0, [r3, #0]
 8000e0e:	6010      	str	r0, [r2, #0]
 8000e10:	889b      	ldrh	r3, [r3, #4]
 8000e12:	8093      	strh	r3, [r2, #4]

	hRPICom.TxBuffer[9]=checkSum(hRPICom.TxBuffer,sizeof(hRPICom.sendMessage)+3);
 8000e14:	2109      	movs	r1, #9
 8000e16:	480a      	ldr	r0, [pc, #40]	; (8000e40 <RPICom_SendBinaryMessage+0x54>)
 8000e18:	f7ff ff2e 	bl	8000c78 <checkSum>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <RPICom_SendBinaryMessage+0x4c>)
 8000e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	HAL_UART_Transmit_IT(hRPICom.huart, hRPICom.TxBuffer, UART_RPI_TX_BUFFER_SIZE);
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <RPICom_SendBinaryMessage+0x4c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	220a      	movs	r2, #10
 8000e2c:	4904      	ldr	r1, [pc, #16]	; (8000e40 <RPICom_SendBinaryMessage+0x54>)
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f008 f8e4 	bl	8008ffc <HAL_UART_Transmit_IT>
	//Response RPI
	/**
	uint8_t stringLength = snprintf((char *)hRPICom.DebugBuffer, UART_RPI_DEBUG_BUFFER_SIZE, "[SEND]\n\rPaquet:\t%u\n\rBatteryPower:\t%u\n\rPosition:\t%u-%u-%u°\n\r",hRPICom.sendMessage.paquetNumber,hRPICom.sendMessage.batteryPower,hRPICom.sendMessage.posX,hRPICom.sendMessage.posY,hRPICom.sendMessage.angleDelta);
	HAL_UART_Transmit(hRPICom.huartDebug, hRPICom.DebugBuffer, stringLength, 10);
	 **/
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	240000b8 	.word	0x240000b8
 8000e3c:	240000d6 	.word	0x240000d6
 8000e40:	240000d3 	.word	0x240000d3

08000e44 <randomize>:

int randomize(int min, int max) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
	srand(time(NULL));
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f00b f838 	bl	800bec4 <time>
 8000e54:	4602      	mov	r2, r0
 8000e56:	460b      	mov	r3, r1
 8000e58:	4613      	mov	r3, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f00a ff92 	bl	800bd84 <srand>
    return min + rand() % (max - min + 1);
 8000e60:	f00a ffbe 	bl	800bde0 <rand>
 8000e64:	4602      	mov	r2, r0
 8000e66:	6839      	ldr	r1, [r7, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	1acb      	subs	r3, r1, r3
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	fb92 f1f3 	sdiv	r1, r2, r3
 8000e72:	fb01 f303 	mul.w	r3, r1, r3
 8000e76:	1ad2      	subs	r2, r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4413      	add	r3, r2
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <MX_DMA_Init+0x3c>)
 8000e8c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <MX_DMA_Init+0x3c>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_DMA_Init+0x3c>)
 8000e9c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	200b      	movs	r0, #11
 8000eae:	f001 fac0 	bl	8002432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000eb2:	200b      	movs	r0, #11
 8000eb4:	f001 fad7 	bl	8002466 <HAL_NVIC_EnableIRQ>

}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	58024400 	.word	0x58024400

08000ec4 <update_crc>:

#include "dynamixel_protocol2.h"

uint16_t update_crc(uint16_t crc_accum, unsigned char *data_blk_ptr, uint16_t data_blk_size)

{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000ed0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8000ed4:	6019      	str	r1, [r3, #0]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000edc:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	801a      	strh	r2, [r3, #0]
 8000ee4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000ee8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000eec:	460a      	mov	r2, r1
 8000eee:	801a      	strh	r2, [r3, #0]

	uint16_t i, j;

	uint16_t crc_table[256] = {
 8000ef0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000ef4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ef8:	4a28      	ldr	r2, [pc, #160]	; (8000f9c <update_crc+0xd8>)
 8000efa:	4618      	mov	r0, r3
 8000efc:	4611      	mov	r1, r2
 8000efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f02:	461a      	mov	r2, r3
 8000f04:	f00a ff28 	bl	800bd58 <memcpy>

	};



	for(j = 0; j < data_blk_size; j++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000f0e:	e031      	b.n	8000f74 <update_crc+0xb0>

	{

		i = ((uint16_t)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000f10:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000f14:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000f22:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8000f26:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8000f2a:	6809      	ldr	r1, [r1, #0]
 8000f2c:	440b      	add	r3, r1
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	4053      	eors	r3, r2
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c

		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000f3c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000f40:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8000f4e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000f52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f56:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000f5a:	b21b      	sxth	r3, r3
 8000f5c:	4053      	eors	r3, r2
 8000f5e:	b21a      	sxth	r2, r3
 8000f60:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000f64:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000f68:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 8000f6a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000f6e:	3301      	adds	r3, #1
 8000f70:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000f74:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000f78:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000f7c:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d3c4      	bcc.n	8000f10 <update_crc+0x4c>

	}



	return crc_accum;
 8000f86:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000f8a:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8000f8e:	881b      	ldrh	r3, [r3, #0]

 8000f90:	4618      	mov	r0, r3
 8000f92:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	0800d2d0 	.word	0x0800d2d0

08000fa0 <map>:
// All rights reserved.
//***********************************************

#include "../Inc/dynamixel_xl320.h"

uint32_t map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max){
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	603b      	str	r3, [r7, #0]
	return ((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min);
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	69b9      	ldr	r1, [r7, #24]
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	1a8a      	subs	r2, r1, r2
 8000fba:	fb03 f202 	mul.w	r2, r3, r2
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	1ac9      	subs	r1, r1, r3
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	440b      	add	r3, r1
 8000fc8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <XL320_set_led_ON>:
	blue	4
	yellow	3
	cyan	6
	purple	5
	white	7*/
void XL320_set_led_ON(UART_HandleTypeDef *m_huart, uint8_t color){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	70fb      	strb	r3, [r7, #3]
	uint8_t TxPacket[13] = {DXL2_0_PACKET_IDX_HEADER_1,
 8000fe4:	23ff      	movs	r3, #255	; 0xff
 8000fe6:	723b      	strb	r3, [r7, #8]
 8000fe8:	23ff      	movs	r3, #255	; 0xff
 8000fea:	727b      	strb	r3, [r7, #9]
 8000fec:	23fd      	movs	r3, #253	; 0xfd
 8000fee:	72bb      	strb	r3, [r7, #10]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	72fb      	strb	r3, [r7, #11]
 8000ff4:	23fe      	movs	r3, #254	; 0xfe
 8000ff6:	733b      	strb	r3, [r7, #12]
 8000ff8:	2306      	movs	r3, #6
 8000ffa:	737b      	strb	r3, [r7, #13]
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73bb      	strb	r3, [r7, #14]
 8001000:	2303      	movs	r3, #3
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	2319      	movs	r3, #25
 8001006:	743b      	strb	r3, [r7, #16]
 8001008:	2300      	movs	r3, #0
 800100a:	747b      	strb	r3, [r7, #17]
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	74bb      	strb	r3, [r7, #18]
 8001010:	2300      	movs	r3, #0
 8001012:	74fb      	strb	r3, [r7, #19]
 8001014:	2300      	movs	r3, #0
 8001016:	753b      	strb	r3, [r7, #20]
							DXL_LOBYTE(XL_LED),
							DXL_HIBYTE(XL_LED),
							color,
							0,
							0};
	uint16_t CRC_2 = update_crc(0, TxPacket, 11);
 8001018:	f107 0308 	add.w	r3, r7, #8
 800101c:	220b      	movs	r2, #11
 800101e:	4619      	mov	r1, r3
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff ff4f 	bl	8000ec4 <update_crc>
 8001026:	4603      	mov	r3, r0
 8001028:	82fb      	strh	r3, [r7, #22]
	TxPacket[11] = DXL_LOBYTE(CRC_2);
 800102a:	8afb      	ldrh	r3, [r7, #22]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	74fb      	strb	r3, [r7, #19]
	TxPacket[12] = DXL_HIBYTE(CRC_2);
 8001030:	8afb      	ldrh	r3, [r7, #22]
 8001032:	0a1b      	lsrs	r3, r3, #8
 8001034:	b29b      	uxth	r3, r3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(m_huart, (uint8_t *) &TxPacket, 13, HAL_MAX_DELAY);
 800103a:	f107 0108 	add.w	r1, r7, #8
 800103e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001042:	220d      	movs	r2, #13
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f007 ff4b 	bl	8008ee0 <HAL_UART_Transmit>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <XL320_set_control_mode>:
	TxPacket[12] = DXL_HIBYTE(CRC_2);

	HAL_UART_Transmit(m_huart, (uint8_t *) &TxPacket, 13, HAL_MAX_DELAY);
}

void XL320_set_control_mode(UART_HandleTypeDef *m_huart, uint8_t boolean){
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	70fb      	strb	r3, [r7, #3]
	uint8_t TxPacket[13] = {DXL2_0_PACKET_IDX_HEADER_1,
 800105e:	23ff      	movs	r3, #255	; 0xff
 8001060:	723b      	strb	r3, [r7, #8]
 8001062:	23ff      	movs	r3, #255	; 0xff
 8001064:	727b      	strb	r3, [r7, #9]
 8001066:	23fd      	movs	r3, #253	; 0xfd
 8001068:	72bb      	strb	r3, [r7, #10]
 800106a:	2300      	movs	r3, #0
 800106c:	72fb      	strb	r3, [r7, #11]
 800106e:	23fe      	movs	r3, #254	; 0xfe
 8001070:	733b      	strb	r3, [r7, #12]
 8001072:	2306      	movs	r3, #6
 8001074:	737b      	strb	r3, [r7, #13]
 8001076:	2300      	movs	r3, #0
 8001078:	73bb      	strb	r3, [r7, #14]
 800107a:	2303      	movs	r3, #3
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	230b      	movs	r3, #11
 8001080:	743b      	strb	r3, [r7, #16]
 8001082:	2300      	movs	r3, #0
 8001084:	747b      	strb	r3, [r7, #17]
							0x06,
							0x00,
							DXL_INST_WRITE,
							DXL_LOBYTE(XL_CONTROL_MODE),
							DXL_HIBYTE(XL_CONTROL_MODE),
							(uint8_t)(boolean+1),
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	3301      	adds	r3, #1
 800108a:	b2db      	uxtb	r3, r3
	uint8_t TxPacket[13] = {DXL2_0_PACKET_IDX_HEADER_1,
 800108c:	74bb      	strb	r3, [r7, #18]
 800108e:	2300      	movs	r3, #0
 8001090:	74fb      	strb	r3, [r7, #19]
 8001092:	2300      	movs	r3, #0
 8001094:	753b      	strb	r3, [r7, #20]
							0,
							0};
	uint16_t CRC_2 = update_crc(0, TxPacket, 11);
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	220b      	movs	r2, #11
 800109c:	4619      	mov	r1, r3
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff ff10 	bl	8000ec4 <update_crc>
 80010a4:	4603      	mov	r3, r0
 80010a6:	82fb      	strh	r3, [r7, #22]
	TxPacket[11] = DXL_LOBYTE(CRC_2);
 80010a8:	8afb      	ldrh	r3, [r7, #22]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	74fb      	strb	r3, [r7, #19]
	TxPacket[12] = DXL_HIBYTE(CRC_2);
 80010ae:	8afb      	ldrh	r3, [r7, #22]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(m_huart, (uint8_t *) &TxPacket, 13, HAL_MAX_DELAY);
 80010b8:	f107 0108 	add.w	r1, r7, #8
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010c0:	220d      	movs	r2, #13
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f007 ff0c 	bl	8008ee0 <HAL_UART_Transmit>
}
 80010c8:	bf00      	nop
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <XL320_set_torque_enable>:
void XL320_set_torque_enable(UART_HandleTypeDef *m_huart,uint8_t boolean){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	70fb      	strb	r3, [r7, #3]
	uint8_t TxPacket[13] = {DXL2_0_PACKET_IDX_HEADER_1,
 80010dc:	23ff      	movs	r3, #255	; 0xff
 80010de:	723b      	strb	r3, [r7, #8]
 80010e0:	23ff      	movs	r3, #255	; 0xff
 80010e2:	727b      	strb	r3, [r7, #9]
 80010e4:	23fd      	movs	r3, #253	; 0xfd
 80010e6:	72bb      	strb	r3, [r7, #10]
 80010e8:	2300      	movs	r3, #0
 80010ea:	72fb      	strb	r3, [r7, #11]
 80010ec:	23fe      	movs	r3, #254	; 0xfe
 80010ee:	733b      	strb	r3, [r7, #12]
 80010f0:	2306      	movs	r3, #6
 80010f2:	737b      	strb	r3, [r7, #13]
 80010f4:	2300      	movs	r3, #0
 80010f6:	73bb      	strb	r3, [r7, #14]
 80010f8:	2303      	movs	r3, #3
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	2318      	movs	r3, #24
 80010fe:	743b      	strb	r3, [r7, #16]
 8001100:	2300      	movs	r3, #0
 8001102:	747b      	strb	r3, [r7, #17]
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	74bb      	strb	r3, [r7, #18]
 8001108:	2300      	movs	r3, #0
 800110a:	74fb      	strb	r3, [r7, #19]
 800110c:	2300      	movs	r3, #0
 800110e:	753b      	strb	r3, [r7, #20]
							DXL_LOBYTE(XL_TORQUE_ENABLE),
							DXL_HIBYTE(XL_TORQUE_ENABLE),
							boolean,
							0,
							0};
	uint16_t CRC_2 = update_crc(0, TxPacket, 11);
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	220b      	movs	r2, #11
 8001116:	4619      	mov	r1, r3
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff fed3 	bl	8000ec4 <update_crc>
 800111e:	4603      	mov	r3, r0
 8001120:	82fb      	strh	r3, [r7, #22]
	TxPacket[11] = DXL_LOBYTE(CRC_2);
 8001122:	8afb      	ldrh	r3, [r7, #22]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	74fb      	strb	r3, [r7, #19]
	TxPacket[12] = DXL_HIBYTE(CRC_2);
 8001128:	8afb      	ldrh	r3, [r7, #22]
 800112a:	0a1b      	lsrs	r3, r3, #8
 800112c:	b29b      	uxth	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(m_huart, (uint8_t *) &TxPacket, 13, HAL_MAX_DELAY);
 8001132:	f107 0108 	add.w	r1, r7, #8
 8001136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800113a:	220d      	movs	r2, #13
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f007 fecf 	bl	8008ee0 <HAL_UART_Transmit>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <XL320_set_pos>:

void XL320_set_pos(UART_HandleTypeDef *m_huart, uint16_t pos){
 800114a:	b580      	push	{r7, lr}
 800114c:	b08a      	sub	sp, #40	; 0x28
 800114e:	af02      	add	r7, sp, #8
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	460b      	mov	r3, r1
 8001154:	807b      	strh	r3, [r7, #2]
	const uint16_t POS_MAX = 300; //CHANGE THIS CONSTANT TO AVOID OVERCURRENT IN THE SERVO
 8001156:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800115a:	83fb      	strh	r3, [r7, #30]
	if(pos>POS_MAX) pos = POS_MAX;
 800115c:	887a      	ldrh	r2, [r7, #2]
 800115e:	8bfb      	ldrh	r3, [r7, #30]
 8001160:	429a      	cmp	r2, r3
 8001162:	d901      	bls.n	8001168 <XL320_set_pos+0x1e>
 8001164:	8bfb      	ldrh	r3, [r7, #30]
 8001166:	807b      	strh	r3, [r7, #2]
	uint16_t pos_mapped = map(pos, 0, 300, 0, 1023);
 8001168:	8878      	ldrh	r0, [r7, #2]
 800116a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2300      	movs	r3, #0
 8001172:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001176:	2100      	movs	r1, #0
 8001178:	f7ff ff12 	bl	8000fa0 <map>
 800117c:	4603      	mov	r3, r0
 800117e:	83bb      	strh	r3, [r7, #28]
	uint8_t TxPacket[14] = {DXL2_0_PACKET_IDX_HEADER_1,
 8001180:	23ff      	movs	r3, #255	; 0xff
 8001182:	733b      	strb	r3, [r7, #12]
 8001184:	23ff      	movs	r3, #255	; 0xff
 8001186:	737b      	strb	r3, [r7, #13]
 8001188:	23fd      	movs	r3, #253	; 0xfd
 800118a:	73bb      	strb	r3, [r7, #14]
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]
 8001190:	23fe      	movs	r3, #254	; 0xfe
 8001192:	743b      	strb	r3, [r7, #16]
 8001194:	2307      	movs	r3, #7
 8001196:	747b      	strb	r3, [r7, #17]
 8001198:	2300      	movs	r3, #0
 800119a:	74bb      	strb	r3, [r7, #18]
 800119c:	2303      	movs	r3, #3
 800119e:	74fb      	strb	r3, [r7, #19]
 80011a0:	231e      	movs	r3, #30
 80011a2:	753b      	strb	r3, [r7, #20]
 80011a4:	2300      	movs	r3, #0
 80011a6:	757b      	strb	r3, [r7, #21]
							 0x07,
							 0x00,
							 DXL_INST_WRITE,
							 DXL_LOBYTE(XL_GOAL_POSITION_L),
							 DXL_HIBYTE(XL_GOAL_POSITION_L),
							 DXL_LOBYTE(pos_mapped),
 80011a8:	8bbb      	ldrh	r3, [r7, #28]
 80011aa:	b2db      	uxtb	r3, r3
	uint8_t TxPacket[14] = {DXL2_0_PACKET_IDX_HEADER_1,
 80011ac:	75bb      	strb	r3, [r7, #22]
							 DXL_HIBYTE(pos_mapped),
 80011ae:	8bbb      	ldrh	r3, [r7, #28]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	b2db      	uxtb	r3, r3
	uint8_t TxPacket[14] = {DXL2_0_PACKET_IDX_HEADER_1,
 80011b6:	75fb      	strb	r3, [r7, #23]
 80011b8:	2300      	movs	r3, #0
 80011ba:	763b      	strb	r3, [r7, #24]
 80011bc:	2300      	movs	r3, #0
 80011be:	767b      	strb	r3, [r7, #25]
							 0,
							 0};
	uint16_t CRC_2 = update_crc(0, TxPacket, 12);
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	220c      	movs	r2, #12
 80011c6:	4619      	mov	r1, r3
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff fe7b 	bl	8000ec4 <update_crc>
 80011ce:	4603      	mov	r3, r0
 80011d0:	837b      	strh	r3, [r7, #26]
	TxPacket[12] = DXL_LOBYTE(CRC_2);
 80011d2:	8b7b      	ldrh	r3, [r7, #26]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	763b      	strb	r3, [r7, #24]
	TxPacket[13] = DXL_HIBYTE(CRC_2);
 80011d8:	8b7b      	ldrh	r3, [r7, #26]
 80011da:	0a1b      	lsrs	r3, r3, #8
 80011dc:	b29b      	uxth	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(m_huart, (uint8_t *) &TxPacket, 14, HAL_MAX_DELAY);
 80011e2:	f107 010c 	add.w	r1, r7, #12
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ea:	220e      	movs	r2, #14
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f007 fe77 	bl	8008ee0 <HAL_UART_Transmit>
}
 80011f2:	bf00      	nop
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08e      	sub	sp, #56	; 0x38
 8001200:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	4b80      	ldr	r3, [pc, #512]	; (8001414 <MX_GPIO_Init+0x218>)
 8001214:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001218:	4a7e      	ldr	r2, [pc, #504]	; (8001414 <MX_GPIO_Init+0x218>)
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001222:	4b7c      	ldr	r3, [pc, #496]	; (8001414 <MX_GPIO_Init+0x218>)
 8001224:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	623b      	str	r3, [r7, #32]
 800122e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001230:	4b78      	ldr	r3, [pc, #480]	; (8001414 <MX_GPIO_Init+0x218>)
 8001232:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001236:	4a77      	ldr	r2, [pc, #476]	; (8001414 <MX_GPIO_Init+0x218>)
 8001238:	f043 0320 	orr.w	r3, r3, #32
 800123c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001240:	4b74      	ldr	r3, [pc, #464]	; (8001414 <MX_GPIO_Init+0x218>)
 8001242:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001246:	f003 0320 	and.w	r3, r3, #32
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124e:	4b71      	ldr	r3, [pc, #452]	; (8001414 <MX_GPIO_Init+0x218>)
 8001250:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001254:	4a6f      	ldr	r2, [pc, #444]	; (8001414 <MX_GPIO_Init+0x218>)
 8001256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800125a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800125e:	4b6d      	ldr	r3, [pc, #436]	; (8001414 <MX_GPIO_Init+0x218>)
 8001260:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001268:	61bb      	str	r3, [r7, #24]
 800126a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b69      	ldr	r3, [pc, #420]	; (8001414 <MX_GPIO_Init+0x218>)
 800126e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001272:	4a68      	ldr	r2, [pc, #416]	; (8001414 <MX_GPIO_Init+0x218>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800127c:	4b65      	ldr	r3, [pc, #404]	; (8001414 <MX_GPIO_Init+0x218>)
 800127e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	4b62      	ldr	r3, [pc, #392]	; (8001414 <MX_GPIO_Init+0x218>)
 800128c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001290:	4a60      	ldr	r2, [pc, #384]	; (8001414 <MX_GPIO_Init+0x218>)
 8001292:	f043 0302 	orr.w	r3, r3, #2
 8001296:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800129a:	4b5e      	ldr	r3, [pc, #376]	; (8001414 <MX_GPIO_Init+0x218>)
 800129c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a8:	4b5a      	ldr	r3, [pc, #360]	; (8001414 <MX_GPIO_Init+0x218>)
 80012aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012ae:	4a59      	ldr	r2, [pc, #356]	; (8001414 <MX_GPIO_Init+0x218>)
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012b8:	4b56      	ldr	r3, [pc, #344]	; (8001414 <MX_GPIO_Init+0x218>)
 80012ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012c6:	4b53      	ldr	r3, [pc, #332]	; (8001414 <MX_GPIO_Init+0x218>)
 80012c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012cc:	4a51      	ldr	r2, [pc, #324]	; (8001414 <MX_GPIO_Init+0x218>)
 80012ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012d6:	4b4f      	ldr	r3, [pc, #316]	; (8001414 <MX_GPIO_Init+0x218>)
 80012d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012e4:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <MX_GPIO_Init+0x218>)
 80012e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012ea:	4a4a      	ldr	r2, [pc, #296]	; (8001414 <MX_GPIO_Init+0x218>)
 80012ec:	f043 0310 	orr.w	r3, r3, #16
 80012f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012f4:	4b47      	ldr	r3, [pc, #284]	; (8001414 <MX_GPIO_Init+0x218>)
 80012f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001308:	4843      	ldr	r0, [pc, #268]	; (8001418 <MX_GPIO_Init+0x21c>)
 800130a:	f003 fd09 	bl	8004d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f244 0101 	movw	r1, #16385	; 0x4001
 8001314:	4841      	ldr	r0, [pc, #260]	; (800141c <MX_GPIO_Init+0x220>)
 8001316:	f003 fd03 	bl	8004d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2102      	movs	r1, #2
 800131e:	4840      	ldr	r0, [pc, #256]	; (8001420 <MX_GPIO_Init+0x224>)
 8001320:	f003 fcfe 	bl	8004d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132a:	2300      	movs	r3, #0
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001336:	4619      	mov	r1, r3
 8001338:	483a      	ldr	r0, [pc, #232]	; (8001424 <MX_GPIO_Init+0x228>)
 800133a:	f003 fb41 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800133e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	2301      	movs	r3, #1
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001354:	4619      	mov	r1, r3
 8001356:	4830      	ldr	r0, [pc, #192]	; (8001418 <MX_GPIO_Init+0x21c>)
 8001358:	f003 fb32 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800135c:	f244 0301 	movw	r3, #16385	; 0x4001
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	4619      	mov	r1, r3
 8001374:	4829      	ldr	r0, [pc, #164]	; (800141c <MX_GPIO_Init+0x220>)
 8001376:	f003 fb23 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800137a:	2380      	movs	r3, #128	; 0x80
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800137e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138c:	4619      	mov	r1, r3
 800138e:	4826      	ldr	r0, [pc, #152]	; (8001428 <MX_GPIO_Init+0x22c>)
 8001390:	f003 fb16 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001394:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	4619      	mov	r1, r3
 80013a8:	4820      	ldr	r0, [pc, #128]	; (800142c <MX_GPIO_Init+0x230>)
 80013aa:	f003 fb09 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80013ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80013c0:	230a      	movs	r3, #10
 80013c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c8:	4619      	mov	r1, r3
 80013ca:	4818      	ldr	r0, [pc, #96]	; (800142c <MX_GPIO_Init+0x230>)
 80013cc:	f003 faf8 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80013d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e6:	4619      	mov	r1, r3
 80013e8:	4810      	ldr	r0, [pc, #64]	; (800142c <MX_GPIO_Init+0x230>)
 80013ea:	f003 fae9 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013ee:	2302      	movs	r3, #2
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001402:	4619      	mov	r1, r3
 8001404:	4806      	ldr	r0, [pc, #24]	; (8001420 <MX_GPIO_Init+0x224>)
 8001406:	f003 fadb 	bl	80049c0 <HAL_GPIO_Init>

}
 800140a:	bf00      	nop
 800140c:	3738      	adds	r7, #56	; 0x38
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	58024400 	.word	0x58024400
 8001418:	58021400 	.word	0x58021400
 800141c:	58020400 	.word	0x58020400
 8001420:	58021000 	.word	0x58021000
 8001424:	58020800 	.word	0x58020800
 8001428:	58021800 	.word	0x58021800
 800142c:	58020000 	.word	0x58020000

08001430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001434:	f000 fe6c 	bl	8002110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001438:	f000 f830 	bl	800149c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800143c:	f7ff fede 	bl	80011fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001440:	f7ff fd20 	bl	8000e84 <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 8001444:	f000 fe32 	bl	80020ac <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 8001448:	f000 fbb0 	bl	8001bac <MX_UART4_Init>
  MX_TIM2_Init();
 800144c:	f000 fa44 	bl	80018d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001450:	f000 fac4 	bl	80019dc <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001454:	f000 fc4c 	bl	8001cf0 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001458:	f000 fbfc 	bl	8001c54 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim3);
 800145c:	480a      	ldr	r0, [pc, #40]	; (8001488 <main+0x58>)
 800145e:	f006 fac9 	bl	80079f4 <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit(&huart3, (uint8_t *)"\nStarting...\r\n", 14, 10);
 8001462:	230a      	movs	r3, #10
 8001464:	220e      	movs	r2, #14
 8001466:	4909      	ldr	r1, [pc, #36]	; (800148c <main+0x5c>)
 8001468:	4809      	ldr	r0, [pc, #36]	; (8001490 <main+0x60>)
 800146a:	f007 fd39 	bl	8008ee0 <HAL_UART_Transmit>
	Process_Init();
 800146e:	f7ff fabb 	bl	80009e8 <Process_Init>
	RPICom_Init(&huart4, &huart3);
 8001472:	4907      	ldr	r1, [pc, #28]	; (8001490 <main+0x60>)
 8001474:	4807      	ldr	r0, [pc, #28]	; (8001494 <main+0x64>)
 8001476:	f7ff fbb5 	bl	8000be4 <RPICom_Init>
	HAL_UART_Transmit(&huart3, (uint8_t *)"Init Done\r\n", 11, 10);
 800147a:	230a      	movs	r3, #10
 800147c:	220b      	movs	r2, #11
 800147e:	4906      	ldr	r1, [pc, #24]	; (8001498 <main+0x68>)
 8001480:	4803      	ldr	r0, [pc, #12]	; (8001490 <main+0x60>)
 8001482:	f007 fd2d 	bl	8008ee0 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
 8001486:	e7fe      	b.n	8001486 <main+0x56>
 8001488:	24000530 	.word	0x24000530
 800148c:	0800d4d0 	.word	0x0800d4d0
 8001490:	240006a4 	.word	0x240006a4
 8001494:	2400057c 	.word	0x2400057c
 8001498:	0800d4e0 	.word	0x0800d4e0

0800149c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b09c      	sub	sp, #112	; 0x70
 80014a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	224c      	movs	r2, #76	; 0x4c
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f00a fc62 	bl	800bd74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2220      	movs	r2, #32
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00a fc5c 	bl	800bd74 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80014bc:	4b30      	ldr	r3, [pc, #192]	; (8001580 <SystemClock_Config+0xe4>)
 80014be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80014c6:	2004      	movs	r0, #4
 80014c8:	f003 fc44 	bl	8004d54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80014cc:	2300      	movs	r3, #0
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <SystemClock_Config+0xe8>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a2b      	ldr	r2, [pc, #172]	; (8001584 <SystemClock_Config+0xe8>)
 80014d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b29      	ldr	r3, [pc, #164]	; (8001584 <SystemClock_Config+0xe8>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014e8:	bf00      	nop
 80014ea:	4b26      	ldr	r3, [pc, #152]	; (8001584 <SystemClock_Config+0xe8>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014f6:	d1f8      	bne.n	80014ea <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80014f8:	2321      	movs	r3, #33	; 0x21
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001502:	2301      	movs	r3, #1
 8001504:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001506:	2302      	movs	r3, #2
 8001508:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800150a:	2302      	movs	r3, #2
 800150c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800150e:	2301      	movs	r3, #1
 8001510:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001512:	2318      	movs	r3, #24
 8001514:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001516:	2302      	movs	r3, #2
 8001518:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800151a:	2304      	movs	r3, #4
 800151c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800151e:	2302      	movs	r3, #2
 8001520:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001522:	230c      	movs	r3, #12
 8001524:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001526:	2300      	movs	r3, #0
 8001528:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001532:	4618      	mov	r0, r3
 8001534:	f003 fc68 	bl	8004e08 <HAL_RCC_OscConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800153e:	f000 f823 	bl	8001588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001542:	233f      	movs	r3, #63	; 0x3f
 8001544:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001546:	2303      	movs	r3, #3
 8001548:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2102      	movs	r1, #2
 8001566:	4618      	mov	r0, r3
 8001568:	f004 f880 	bl	800566c <HAL_RCC_ClockConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001572:	f000 f809 	bl	8001588 <Error_Handler>
  }
}
 8001576:	bf00      	nop
 8001578:	3770      	adds	r7, #112	; 0x70
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	58024400 	.word	0x58024400
 8001584:	58024800 	.word	0x58024800

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001590:	e7fe      	b.n	8001590 <Error_Handler+0x8>
	...

08001594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_MspInit+0x30>)
 800159c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80015a0:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <HAL_MspInit+0x30>)
 80015a2:	f043 0302 	orr.w	r3, r3, #2
 80015a6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_MspInit+0x30>)
 80015ac:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	58024400 	.word	0x58024400

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <NMI_Handler+0x4>

080015ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <MemManage_Handler+0x4>

080015da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001614:	f000 fdee 	bl	80021f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <DMA1_Stream0_IRQHandler+0x10>)
 8001622:	f002 f82f 	bl	8003684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	24000738 	.word	0x24000738

08001630 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	RPICom_SendBinaryMessage();
 8001634:	f7ff fbda 	bl	8000dec <RPICom_SendBinaryMessage>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <TIM3_IRQHandler+0x14>)
 800163a:	f006 fbc3 	bl	8007dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	24000530 	.word	0x24000530

08001648 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <UART4_IRQHandler+0x10>)
 800164e:	f007 fdb5 	bl	80091bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  /* USER CODE END UART4_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2400057c 	.word	0x2400057c

0800165c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return 1;
 8001660:	2301      	movs	r3, #1
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <_kill>:

int _kill(int pid, int sig)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001676:	f00a fb45 	bl	800bd04 <__errno>
 800167a:	4603      	mov	r3, r0
 800167c:	2216      	movs	r2, #22
 800167e:	601a      	str	r2, [r3, #0]
  return -1;
 8001680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <_exit>:

void _exit (int status)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001694:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ffe7 	bl	800166c <_kill>
  while (1) {}    /* Make sure we hang here */
 800169e:	e7fe      	b.n	800169e <_exit+0x12>

080016a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	e00a      	b.n	80016c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016b2:	f3af 8000 	nop.w
 80016b6:	4601      	mov	r1, r0
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	60ba      	str	r2, [r7, #8]
 80016be:	b2ca      	uxtb	r2, r1
 80016c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3301      	adds	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	dbf0      	blt.n	80016b2 <_read+0x12>
  }

  return len;
 80016d0:	687b      	ldr	r3, [r7, #4]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	e009      	b.n	8001700 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	60ba      	str	r2, [r7, #8]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	429a      	cmp	r2, r3
 8001706:	dbf1      	blt.n	80016ec <_write+0x12>
  }
  return len;
 8001708:	687b      	ldr	r3, [r7, #4]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <_close>:

int _close(int file)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800173a:	605a      	str	r2, [r3, #4]
  return 0;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <_isatty>:

int _isatty(int file)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001784:	4a14      	ldr	r2, [pc, #80]	; (80017d8 <_sbrk+0x5c>)
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <_sbrk+0x60>)
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <_sbrk+0x64>)
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <_sbrk+0x68>)
 800179c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d207      	bcs.n	80017bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ac:	f00a faaa 	bl	800bd04 <__errno>
 80017b0:	4603      	mov	r3, r0
 80017b2:	220c      	movs	r2, #12
 80017b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017ba:	e009      	b.n	80017d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c2:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <_sbrk+0x64>)
 80017cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	24100000 	.word	0x24100000
 80017dc:	00000400 	.word	0x00000400
 80017e0:	240004e0 	.word	0x240004e0
 80017e4:	240007c8 	.word	0x240007c8

080017e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017ec:	4b32      	ldr	r3, [pc, #200]	; (80018b8 <SystemInit+0xd0>)
 80017ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f2:	4a31      	ldr	r2, [pc, #196]	; (80018b8 <SystemInit+0xd0>)
 80017f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017fc:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <SystemInit+0xd4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 030f 	and.w	r3, r3, #15
 8001804:	2b02      	cmp	r3, #2
 8001806:	d807      	bhi.n	8001818 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001808:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <SystemInit+0xd4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f023 030f 	bic.w	r3, r3, #15
 8001810:	4a2a      	ldr	r2, [pc, #168]	; (80018bc <SystemInit+0xd4>)
 8001812:	f043 0303 	orr.w	r3, r3, #3
 8001816:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001818:	4b29      	ldr	r3, [pc, #164]	; (80018c0 <SystemInit+0xd8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a28      	ldr	r2, [pc, #160]	; (80018c0 <SystemInit+0xd8>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001824:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <SystemInit+0xd8>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800182a:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <SystemInit+0xd8>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4924      	ldr	r1, [pc, #144]	; (80018c0 <SystemInit+0xd8>)
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <SystemInit+0xdc>)
 8001832:	4013      	ands	r3, r2
 8001834:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001836:	4b21      	ldr	r3, [pc, #132]	; (80018bc <SystemInit+0xd4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b00      	cmp	r3, #0
 8001840:	d007      	beq.n	8001852 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <SystemInit+0xd4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 030f 	bic.w	r3, r3, #15
 800184a:	4a1c      	ldr	r2, [pc, #112]	; (80018bc <SystemInit+0xd4>)
 800184c:	f043 0303 	orr.w	r3, r3, #3
 8001850:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001852:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <SystemInit+0xd8>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001858:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <SystemInit+0xd8>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800185e:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <SystemInit+0xd8>)
 8001860:	2200      	movs	r2, #0
 8001862:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001864:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <SystemInit+0xd8>)
 8001866:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <SystemInit+0xe0>)
 8001868:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <SystemInit+0xd8>)
 800186c:	4a17      	ldr	r2, [pc, #92]	; (80018cc <SystemInit+0xe4>)
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <SystemInit+0xd8>)
 8001872:	4a17      	ldr	r2, [pc, #92]	; (80018d0 <SystemInit+0xe8>)
 8001874:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <SystemInit+0xd8>)
 8001878:	2200      	movs	r2, #0
 800187a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <SystemInit+0xd8>)
 800187e:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <SystemInit+0xe8>)
 8001880:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001882:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <SystemInit+0xd8>)
 8001884:	2200      	movs	r2, #0
 8001886:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <SystemInit+0xd8>)
 800188a:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <SystemInit+0xe8>)
 800188c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <SystemInit+0xd8>)
 8001890:	2200      	movs	r2, #0
 8001892:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <SystemInit+0xd8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <SystemInit+0xd8>)
 800189a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <SystemInit+0xd8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <SystemInit+0xec>)
 80018a8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80018ac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00
 80018bc:	52002000 	.word	0x52002000
 80018c0:	58024400 	.word	0x58024400
 80018c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80018c8:	02020200 	.word	0x02020200
 80018cc:	01ff0000 	.word	0x01ff0000
 80018d0:	01010280 	.word	0x01010280
 80018d4:	52004000 	.word	0x52004000

080018d8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08e      	sub	sp, #56	; 0x38
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f8:	463b      	mov	r3, r7
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]
 8001906:	615a      	str	r2, [r3, #20]
 8001908:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800190a:	4b33      	ldr	r3, [pc, #204]	; (80019d8 <MX_TIM2_Init+0x100>)
 800190c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001910:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1919;
 8001912:	4b31      	ldr	r3, [pc, #196]	; (80019d8 <MX_TIM2_Init+0x100>)
 8001914:	f240 727f 	movw	r2, #1919	; 0x77f
 8001918:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191a:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <MX_TIM2_Init+0x100>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001920:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <MX_TIM2_Init+0x100>)
 8001922:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001926:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001928:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <MX_TIM2_Init+0x100>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192e:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <MX_TIM2_Init+0x100>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001934:	4828      	ldr	r0, [pc, #160]	; (80019d8 <MX_TIM2_Init+0x100>)
 8001936:	f006 f805 	bl	8007944 <HAL_TIM_Base_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001940:	f7ff fe22 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800194a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800194e:	4619      	mov	r1, r3
 8001950:	4821      	ldr	r0, [pc, #132]	; (80019d8 <MX_TIM2_Init+0x100>)
 8001952:	f006 fc6b 	bl	800822c <HAL_TIM_ConfigClockSource>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800195c:	f7ff fe14 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001960:	481d      	ldr	r0, [pc, #116]	; (80019d8 <MX_TIM2_Init+0x100>)
 8001962:	f006 f8bf 	bl	8007ae4 <HAL_TIM_PWM_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800196c:	f7ff fe0c 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	4816      	ldr	r0, [pc, #88]	; (80019d8 <MX_TIM2_Init+0x100>)
 8001980:	f007 f9b2 	bl	8008ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800198a:	f7ff fdfd 	bl	8001588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198e:	2360      	movs	r3, #96	; 0x60
 8001990:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800199e:	463b      	mov	r3, r7
 80019a0:	2200      	movs	r2, #0
 80019a2:	4619      	mov	r1, r3
 80019a4:	480c      	ldr	r0, [pc, #48]	; (80019d8 <MX_TIM2_Init+0x100>)
 80019a6:	f006 fb2d 	bl	8008004 <HAL_TIM_PWM_ConfigChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80019b0:	f7ff fdea 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019b4:	463b      	mov	r3, r7
 80019b6:	2208      	movs	r2, #8
 80019b8:	4619      	mov	r1, r3
 80019ba:	4807      	ldr	r0, [pc, #28]	; (80019d8 <MX_TIM2_Init+0x100>)
 80019bc:	f006 fb22 	bl	8008004 <HAL_TIM_PWM_ConfigChannel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80019c6:	f7ff fddf 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019ca:	4803      	ldr	r0, [pc, #12]	; (80019d8 <MX_TIM2_Init+0x100>)
 80019cc:	f000 f894 	bl	8001af8 <HAL_TIM_MspPostInit>

}
 80019d0:	bf00      	nop
 80019d2:	3738      	adds	r7, #56	; 0x38
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	240004e4 	.word	0x240004e4

080019dc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e2:	f107 0310 	add.w	r3, r7, #16
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <MX_TIM3_Init+0x98>)
 80019fc:	4a1e      	ldr	r2, [pc, #120]	; (8001a78 <MX_TIM3_Init+0x9c>)
 80019fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9599;
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <MX_TIM3_Init+0x98>)
 8001a02:	f242 527f 	movw	r2, #9599	; 0x257f
 8001a06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <MX_TIM3_Init+0x98>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <MX_TIM3_Init+0x98>)
 8001a10:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001a14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <MX_TIM3_Init+0x98>)
 8001a18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <MX_TIM3_Init+0x98>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a24:	4813      	ldr	r0, [pc, #76]	; (8001a74 <MX_TIM3_Init+0x98>)
 8001a26:	f005 ff8d 	bl	8007944 <HAL_TIM_Base_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001a30:	f7ff fdaa 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a3a:	f107 0310 	add.w	r3, r7, #16
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <MX_TIM3_Init+0x98>)
 8001a42:	f006 fbf3 	bl	800822c <HAL_TIM_ConfigClockSource>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001a4c:	f7ff fd9c 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_TIM3_Init+0x98>)
 8001a5e:	f007 f943 	bl	8008ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001a68:	f7ff fd8e 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	24000530 	.word	0x24000530
 8001a78:	40000400 	.word	0x40000400

08001a7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a8c:	d10f      	bne.n	8001aae <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <HAL_TIM_Base_MspInit+0x74>)
 8001a90:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001a94:	4a16      	ldr	r2, [pc, #88]	; (8001af0 <HAL_TIM_Base_MspInit+0x74>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_TIM_Base_MspInit+0x74>)
 8001aa0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001aac:	e01b      	b.n	8001ae6 <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM3)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <HAL_TIM_Base_MspInit+0x78>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d116      	bne.n	8001ae6 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <HAL_TIM_Base_MspInit+0x74>)
 8001aba:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001abe:	4a0c      	ldr	r2, [pc, #48]	; (8001af0 <HAL_TIM_Base_MspInit+0x74>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_TIM_Base_MspInit+0x74>)
 8001aca:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	201d      	movs	r0, #29
 8001adc:	f000 fca9 	bl	8002432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ae0:	201d      	movs	r0, #29
 8001ae2:	f000 fcc0 	bl	8002466 <HAL_NVIC_EnableIRQ>
}
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	58024400 	.word	0x58024400
 8001af4:	40000400 	.word	0x40000400

08001af8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b18:	d13e      	bne.n	8001b98 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <HAL_TIM_MspPostInit+0xa8>)
 8001b1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b20:	4a1f      	ldr	r2, [pc, #124]	; (8001ba0 <HAL_TIM_MspPostInit+0xa8>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <HAL_TIM_MspPostInit+0xa8>)
 8001b2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <HAL_TIM_MspPostInit+0xa8>)
 8001b3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b3e:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <HAL_TIM_MspPostInit+0xa8>)
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_TIM_MspPostInit+0xa8>)
 8001b4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b56:	2320      	movs	r3, #32
 8001b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b66:	2301      	movs	r3, #1
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <HAL_TIM_MspPostInit+0xac>)
 8001b72:	f002 ff25 	bl	80049c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <HAL_TIM_MspPostInit+0xb0>)
 8001b94:	f002 ff14 	bl	80049c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b98:	bf00      	nop
 8001b9a:	3728      	adds	r7, #40	; 0x28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	58024400 	.word	0x58024400
 8001ba4:	58020000 	.word	0x58020000
 8001ba8:	58020400 	.word	0x58020400

08001bac <MX_UART4_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001bb0:	4b26      	ldr	r3, [pc, #152]	; (8001c4c <MX_UART4_Init+0xa0>)
 8001bb2:	4a27      	ldr	r2, [pc, #156]	; (8001c50 <MX_UART4_Init+0xa4>)
 8001bb4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001bb6:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <MX_UART4_Init+0xa0>)
 8001bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bbc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001bbe:	4b23      	ldr	r3, [pc, #140]	; (8001c4c <MX_UART4_Init+0xa0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <MX_UART4_Init+0xa0>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001bca:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <MX_UART4_Init+0xa0>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001bd0:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <MX_UART4_Init+0xa0>)
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <MX_UART4_Init+0xa0>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <MX_UART4_Init+0xa0>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001be2:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <MX_UART4_Init+0xa0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <MX_UART4_Init+0xa0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <MX_UART4_Init+0xa0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001bf4:	4815      	ldr	r0, [pc, #84]	; (8001c4c <MX_UART4_Init+0xa0>)
 8001bf6:	f007 f923 	bl	8008e40 <HAL_UART_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001c00:	f7ff fcc2 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c04:	2100      	movs	r1, #0
 8001c06:	4811      	ldr	r0, [pc, #68]	; (8001c4c <MX_UART4_Init+0xa0>)
 8001c08:	f009 ffb1 	bl	800bb6e <HAL_UARTEx_SetTxFifoThreshold>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001c12:	f7ff fcb9 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c16:	2100      	movs	r1, #0
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <MX_UART4_Init+0xa0>)
 8001c1a:	f009 ffe6 	bl	800bbea <HAL_UARTEx_SetRxFifoThreshold>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001c24:	f7ff fcb0 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001c28:	4808      	ldr	r0, [pc, #32]	; (8001c4c <MX_UART4_Init+0xa0>)
 8001c2a:	f009 ff67 	bl	800bafc <HAL_UARTEx_DisableFifoMode>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001c34:	f7ff fca8 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  // Activation de l'interruption de transmission de l'UART4
  HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	2034      	movs	r0, #52	; 0x34
 8001c3e:	f000 fbf8 	bl	8002432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c42:	2034      	movs	r0, #52	; 0x34
 8001c44:	f000 fc0f 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* USER CODE END UART4_Init 2 */

}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	2400057c 	.word	0x2400057c
 8001c50:	40004c00 	.word	0x40004c00

08001c54 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c58:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <MX_USART2_UART_Init+0x90>)
 8001c5a:	4a23      	ldr	r2, [pc, #140]	; (8001ce8 <MX_USART2_UART_Init+0x94>)
 8001c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001c5e:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <MX_USART2_UART_Init+0x90>)
 8001c60:	4a22      	ldr	r2, [pc, #136]	; (8001cec <MX_USART2_UART_Init+0x98>)
 8001c62:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c64:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <MX_USART2_UART_Init+0x90>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <MX_USART2_UART_Init+0x90>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c70:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <MX_USART2_UART_Init+0x90>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c76:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <MX_USART2_UART_Init+0x90>)
 8001c78:	220c      	movs	r2, #12
 8001c7a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <MX_USART2_UART_Init+0x90>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <MX_USART2_UART_Init+0x90>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c88:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <MX_USART2_UART_Init+0x90>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <MX_USART2_UART_Init+0x90>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <MX_USART2_UART_Init+0x90>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c9a:	4812      	ldr	r0, [pc, #72]	; (8001ce4 <MX_USART2_UART_Init+0x90>)
 8001c9c:	f007 f8d0 	bl	8008e40 <HAL_UART_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001ca6:	f7ff fc6f 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001caa:	2100      	movs	r1, #0
 8001cac:	480d      	ldr	r0, [pc, #52]	; (8001ce4 <MX_USART2_UART_Init+0x90>)
 8001cae:	f009 ff5e 	bl	800bb6e <HAL_UARTEx_SetTxFifoThreshold>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8001cb8:	f7ff fc66 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4809      	ldr	r0, [pc, #36]	; (8001ce4 <MX_USART2_UART_Init+0x90>)
 8001cc0:	f009 ff93 	bl	800bbea <HAL_UARTEx_SetRxFifoThreshold>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8001cca:	f7ff fc5d 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001cce:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_USART2_UART_Init+0x90>)
 8001cd0:	f009 ff14 	bl	800bafc <HAL_UARTEx_DisableFifoMode>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8001cda:	f7ff fc55 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	24000610 	.word	0x24000610
 8001ce8:	40004400 	.word	0x40004400
 8001cec:	000f4240 	.word	0x000f4240

08001cf0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cf4:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <MX_USART3_UART_Init+0x90>)
 8001cf6:	4a23      	ldr	r2, [pc, #140]	; (8001d84 <MX_USART3_UART_Init+0x94>)
 8001cf8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cfa:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <MX_USART3_UART_Init+0x90>)
 8001cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <MX_USART3_UART_Init+0x90>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d08:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <MX_USART3_UART_Init+0x90>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <MX_USART3_UART_Init+0x90>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <MX_USART3_UART_Init+0x90>)
 8001d16:	220c      	movs	r2, #12
 8001d18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1a:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <MX_USART3_UART_Init+0x90>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d20:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <MX_USART3_UART_Init+0x90>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <MX_USART3_UART_Init+0x90>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d2c:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <MX_USART3_UART_Init+0x90>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <MX_USART3_UART_Init+0x90>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d38:	4811      	ldr	r0, [pc, #68]	; (8001d80 <MX_USART3_UART_Init+0x90>)
 8001d3a:	f007 f881 	bl	8008e40 <HAL_UART_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001d44:	f7ff fc20 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d48:	2100      	movs	r1, #0
 8001d4a:	480d      	ldr	r0, [pc, #52]	; (8001d80 <MX_USART3_UART_Init+0x90>)
 8001d4c:	f009 ff0f 	bl	800bb6e <HAL_UARTEx_SetTxFifoThreshold>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001d56:	f7ff fc17 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4808      	ldr	r0, [pc, #32]	; (8001d80 <MX_USART3_UART_Init+0x90>)
 8001d5e:	f009 ff44 	bl	800bbea <HAL_UARTEx_SetRxFifoThreshold>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001d68:	f7ff fc0e 	bl	8001588 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001d6c:	4804      	ldr	r0, [pc, #16]	; (8001d80 <MX_USART3_UART_Init+0x90>)
 8001d6e:	f009 fec5 	bl	800bafc <HAL_UARTEx_DisableFifoMode>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001d78:	f7ff fc06 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	240006a4 	.word	0x240006a4
 8001d84:	40004800 	.word	0x40004800

08001d88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b0c0      	sub	sp, #256	; 0x100
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001da4:	22c0      	movs	r2, #192	; 0xc0
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f009 ffe3 	bl	800bd74 <memset>
  if(uartHandle->Instance==UART4)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4aab      	ldr	r2, [pc, #684]	; (8002060 <HAL_UART_MspInit+0x2d8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d172      	bne.n	8001e9e <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001db8:	f04f 0202 	mov.w	r2, #2
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f003 ffd8 	bl	8005d84 <HAL_RCCEx_PeriphCLKConfig>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001dda:	f7ff fbd5 	bl	8001588 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001dde:	4ba1      	ldr	r3, [pc, #644]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 8001de0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001de4:	4a9f      	ldr	r2, [pc, #636]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 8001de6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001dea:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001dee:	4b9d      	ldr	r3, [pc, #628]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 8001df0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001df4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfc:	4b99      	ldr	r3, [pc, #612]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 8001dfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e02:	4a98      	ldr	r2, [pc, #608]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001e0c:	4b95      	ldr	r3, [pc, #596]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 8001e0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	623b      	str	r3, [r7, #32]
 8001e18:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e1a:	4b92      	ldr	r3, [pc, #584]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 8001e1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e20:	4a90      	ldr	r2, [pc, #576]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001e2a:	4b8e      	ldr	r3, [pc, #568]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 8001e2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e50:	2308      	movs	r3, #8
 8001e52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4882      	ldr	r0, [pc, #520]	; (8002068 <HAL_UART_MspInit+0x2e0>)
 8001e5e:	f002 fdaf 	bl	80049c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e62:	2301      	movs	r3, #1
 8001e64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e7a:	2308      	movs	r3, #8
 8001e7c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e80:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e84:	4619      	mov	r1, r3
 8001e86:	4879      	ldr	r0, [pc, #484]	; (800206c <HAL_UART_MspInit+0x2e4>)
 8001e88:	f002 fd9a 	bl	80049c0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2100      	movs	r1, #0
 8001e90:	2034      	movs	r0, #52	; 0x34
 8001e92:	f000 face 	bl	8002432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001e96:	2034      	movs	r0, #52	; 0x34
 8001e98:	f000 fae5 	bl	8002466 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e9c:	e0db      	b.n	8002056 <HAL_UART_MspInit+0x2ce>
  else if(uartHandle->Instance==USART2)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a73      	ldr	r2, [pc, #460]	; (8002070 <HAL_UART_MspInit+0x2e8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	f040 808a 	bne.w	8001fbe <HAL_UART_MspInit+0x236>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001eaa:	f04f 0202 	mov.w	r2, #2
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ebc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f003 ff5f 	bl	8005d84 <HAL_RCCEx_PeriphCLKConfig>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_UART_MspInit+0x148>
      Error_Handler();
 8001ecc:	f7ff fb5c 	bl	8001588 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ed0:	4b64      	ldr	r3, [pc, #400]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 8001ed2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ed6:	4a63      	ldr	r2, [pc, #396]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001edc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001ee0:	4b60      	ldr	r3, [pc, #384]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 8001ee2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	61bb      	str	r3, [r7, #24]
 8001eec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eee:	4b5d      	ldr	r3, [pc, #372]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 8001ef0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ef4:	4a5b      	ldr	r2, [pc, #364]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001efe:	4b59      	ldr	r3, [pc, #356]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 8001f00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f24:	2307      	movs	r3, #7
 8001f26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f2e:	4619      	mov	r1, r3
 8001f30:	484d      	ldr	r0, [pc, #308]	; (8002068 <HAL_UART_MspInit+0x2e0>)
 8001f32:	f002 fd45 	bl	80049c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f36:	2308      	movs	r3, #8
 8001f38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f4e:	2307      	movs	r3, #7
 8001f50:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f54:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4843      	ldr	r0, [pc, #268]	; (8002068 <HAL_UART_MspInit+0x2e0>)
 8001f5c:	f002 fd30 	bl	80049c0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream0;
 8001f60:	4b44      	ldr	r3, [pc, #272]	; (8002074 <HAL_UART_MspInit+0x2ec>)
 8001f62:	4a45      	ldr	r2, [pc, #276]	; (8002078 <HAL_UART_MspInit+0x2f0>)
 8001f64:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001f66:	4b43      	ldr	r3, [pc, #268]	; (8002074 <HAL_UART_MspInit+0x2ec>)
 8001f68:	222b      	movs	r2, #43	; 0x2b
 8001f6a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f6c:	4b41      	ldr	r3, [pc, #260]	; (8002074 <HAL_UART_MspInit+0x2ec>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f72:	4b40      	ldr	r3, [pc, #256]	; (8002074 <HAL_UART_MspInit+0x2ec>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f78:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <HAL_UART_MspInit+0x2ec>)
 8001f7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f7e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f80:	4b3c      	ldr	r3, [pc, #240]	; (8002074 <HAL_UART_MspInit+0x2ec>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f86:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <HAL_UART_MspInit+0x2ec>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001f8c:	4b39      	ldr	r3, [pc, #228]	; (8002074 <HAL_UART_MspInit+0x2ec>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f92:	4b38      	ldr	r3, [pc, #224]	; (8002074 <HAL_UART_MspInit+0x2ec>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f98:	4b36      	ldr	r3, [pc, #216]	; (8002074 <HAL_UART_MspInit+0x2ec>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f9e:	4835      	ldr	r0, [pc, #212]	; (8002074 <HAL_UART_MspInit+0x2ec>)
 8001fa0:	f000 fa7c 	bl	800249c <HAL_DMA_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_UART_MspInit+0x226>
      Error_Handler();
 8001faa:	f7ff faed 	bl	8001588 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a30      	ldr	r2, [pc, #192]	; (8002074 <HAL_UART_MspInit+0x2ec>)
 8001fb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001fb6:	4a2f      	ldr	r2, [pc, #188]	; (8002074 <HAL_UART_MspInit+0x2ec>)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001fbc:	e04b      	b.n	8002056 <HAL_UART_MspInit+0x2ce>
  else if(uartHandle->Instance==USART3)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a2e      	ldr	r2, [pc, #184]	; (800207c <HAL_UART_MspInit+0x2f4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d146      	bne.n	8002056 <HAL_UART_MspInit+0x2ce>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fc8:	f04f 0202 	mov.w	r2, #2
 8001fcc:	f04f 0300 	mov.w	r3, #0
 8001fd0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f003 fed0 	bl	8005d84 <HAL_RCCEx_PeriphCLKConfig>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_UART_MspInit+0x266>
      Error_Handler();
 8001fea:	f7ff facd 	bl	8001588 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 8001ff0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ff4:	4a1b      	ldr	r2, [pc, #108]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 8001ff6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ffa:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 8002000:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800200c:	4b15      	ldr	r3, [pc, #84]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 800200e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002012:	4a14      	ldr	r2, [pc, #80]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 8002014:	f043 0308 	orr.w	r3, r3, #8
 8002018:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_UART_MspInit+0x2dc>)
 800201e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800202a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800202e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002044:	2307      	movs	r3, #7
 8002046:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800204a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800204e:	4619      	mov	r1, r3
 8002050:	4806      	ldr	r0, [pc, #24]	; (800206c <HAL_UART_MspInit+0x2e4>)
 8002052:	f002 fcb5 	bl	80049c0 <HAL_GPIO_Init>
}
 8002056:	bf00      	nop
 8002058:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40004c00 	.word	0x40004c00
 8002064:	58024400 	.word	0x58024400
 8002068:	58020000 	.word	0x58020000
 800206c:	58020c00 	.word	0x58020c00
 8002070:	40004400 	.word	0x40004400
 8002074:	24000738 	.word	0x24000738
 8002078:	40020010 	.word	0x40020010
 800207c:	40004800 	.word	0x40004800

08002080 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a05      	ldr	r2, [pc, #20]	; (80020a4 <HAL_UART_RxCpltCallback+0x24>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d104      	bne.n	800209c <HAL_UART_RxCpltCallback+0x1c>
	{
		RPICom_DecodeBinaryMessage();
 8002092:	f7fe fe13 	bl	8000cbc <RPICom_DecodeBinaryMessage>
		RPICom_UartActivate(&hRPICom);
 8002096:	4804      	ldr	r0, [pc, #16]	; (80020a8 <HAL_UART_RxCpltCallback+0x28>)
 8002098:	f7fe fdde 	bl	8000c58 <RPICom_UartActivate>
	}
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40004c00 	.word	0x40004c00
 80020a8:	240000b8 	.word	0x240000b8

080020ac <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80020c0:	f7ff fb92 	bl	80017e8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c4:	480c      	ldr	r0, [pc, #48]	; (80020f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020c6:	490d      	ldr	r1, [pc, #52]	; (80020fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020c8:	4a0d      	ldr	r2, [pc, #52]	; (8002100 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020cc:	e002      	b.n	80020d4 <LoopCopyDataInit>

080020ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d2:	3304      	adds	r3, #4

080020d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80020d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d8:	d3f9      	bcc.n	80020ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020dc:	4c0a      	ldr	r4, [pc, #40]	; (8002108 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e0:	e001      	b.n	80020e6 <LoopFillZerobss>

080020e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e4:	3204      	adds	r2, #4

080020e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e8:	d3fb      	bcc.n	80020e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80020ea:	f009 fe11 	bl	800bd10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ee:	f7ff f99f 	bl	8001430 <main>
  bx  lr
 80020f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020f4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80020f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80020fc:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 8002100:	0800d684 	.word	0x0800d684
  ldr r2, =_sbss
 8002104:	2400009c 	.word	0x2400009c
  ldr r4, =_ebss
 8002108:	240007c4 	.word	0x240007c4

0800210c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800210c:	e7fe      	b.n	800210c <ADC_IRQHandler>
	...

08002110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002116:	2003      	movs	r0, #3
 8002118:	f000 f980 	bl	800241c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800211c:	f003 fc5c 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <HAL_Init+0x68>)
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	0a1b      	lsrs	r3, r3, #8
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	4913      	ldr	r1, [pc, #76]	; (800217c <HAL_Init+0x6c>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	f003 031f 	and.w	r3, r3, #31
 8002134:	fa22 f303 	lsr.w	r3, r2, r3
 8002138:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <HAL_Init+0x68>)
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	4a0e      	ldr	r2, [pc, #56]	; (800217c <HAL_Init+0x6c>)
 8002144:	5cd3      	ldrb	r3, [r2, r3]
 8002146:	f003 031f 	and.w	r3, r3, #31
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	fa22 f303 	lsr.w	r3, r2, r3
 8002150:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <HAL_Init+0x70>)
 8002152:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002154:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <HAL_Init+0x74>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800215a:	2000      	movs	r0, #0
 800215c:	f000 f814 	bl	8002188 <HAL_InitTick>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e002      	b.n	8002170 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800216a:	f7ff fa13 	bl	8001594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	58024400 	.word	0x58024400
 800217c:	0800d4ec 	.word	0x0800d4ec
 8002180:	2400002c 	.word	0x2400002c
 8002184:	24000028 	.word	0x24000028

08002188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002190:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <HAL_InitTick+0x60>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e021      	b.n	80021e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <HAL_InitTick+0x64>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <HAL_InitTick+0x60>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f965 	bl	8002482 <HAL_SYSTICK_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e00e      	b.n	80021e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	d80a      	bhi.n	80021de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c8:	2200      	movs	r2, #0
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021d0:	f000 f92f 	bl	8002432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d4:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <HAL_InitTick+0x68>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e000      	b.n	80021e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	24000034 	.word	0x24000034
 80021ec:	24000028 	.word	0x24000028
 80021f0:	24000030 	.word	0x24000030

080021f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x20>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x24>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_IncTick+0x24>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	24000034 	.word	0x24000034
 8002218:	240007b0 	.word	0x240007b0

0800221c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_GetTick+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	240007b0 	.word	0x240007b0

08002234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff ffee 	bl	800221c <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800224c:	d005      	beq.n	800225a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_Delay+0x44>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800225a:	bf00      	nop
 800225c:	f7ff ffde 	bl	800221c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	429a      	cmp	r2, r3
 800226a:	d8f7      	bhi.n	800225c <HAL_Delay+0x28>
  {
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	24000034 	.word	0x24000034

0800227c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <__NVIC_SetPriorityGrouping+0x40>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002298:	4013      	ands	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022aa:	4a04      	ldr	r2, [pc, #16]	; (80022bc <__NVIC_SetPriorityGrouping+0x40>)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	60d3      	str	r3, [r2, #12]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00
 80022c0:	05fa0000 	.word	0x05fa0000

080022c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c8:	4b04      	ldr	r3, [pc, #16]	; (80022dc <__NVIC_GetPriorityGrouping+0x18>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	f003 0307 	and.w	r3, r3, #7
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	db0b      	blt.n	800230a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	4907      	ldr	r1, [pc, #28]	; (8002318 <__NVIC_EnableIRQ+0x38>)
 80022fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	2001      	movs	r0, #1
 8002302:	fa00 f202 	lsl.w	r2, r0, r2
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000e100 	.word	0xe000e100

0800231c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	6039      	str	r1, [r7, #0]
 8002326:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002328:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800232c:	2b00      	cmp	r3, #0
 800232e:	db0a      	blt.n	8002346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	b2da      	uxtb	r2, r3
 8002334:	490c      	ldr	r1, [pc, #48]	; (8002368 <__NVIC_SetPriority+0x4c>)
 8002336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800233a:	0112      	lsls	r2, r2, #4
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	440b      	add	r3, r1
 8002340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002344:	e00a      	b.n	800235c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4908      	ldr	r1, [pc, #32]	; (800236c <__NVIC_SetPriority+0x50>)
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	3b04      	subs	r3, #4
 8002354:	0112      	lsls	r2, r2, #4
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	440b      	add	r3, r1
 800235a:	761a      	strb	r2, [r3, #24]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000e100 	.word	0xe000e100
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002370:	b480      	push	{r7}
 8002372:	b089      	sub	sp, #36	; 0x24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f1c3 0307 	rsb	r3, r3, #7
 800238a:	2b04      	cmp	r3, #4
 800238c:	bf28      	it	cs
 800238e:	2304      	movcs	r3, #4
 8002390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3304      	adds	r3, #4
 8002396:	2b06      	cmp	r3, #6
 8002398:	d902      	bls.n	80023a0 <NVIC_EncodePriority+0x30>
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3b03      	subs	r3, #3
 800239e:	e000      	b.n	80023a2 <NVIC_EncodePriority+0x32>
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	401a      	ands	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	43d9      	mvns	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c8:	4313      	orrs	r3, r2
         );
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3724      	adds	r7, #36	; 0x24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e8:	d301      	bcc.n	80023ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ea:	2301      	movs	r3, #1
 80023ec:	e00f      	b.n	800240e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <SysTick_Config+0x40>)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f6:	210f      	movs	r1, #15
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023fc:	f7ff ff8e 	bl	800231c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <SysTick_Config+0x40>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002406:	4b04      	ldr	r3, [pc, #16]	; (8002418 <SysTick_Config+0x40>)
 8002408:	2207      	movs	r2, #7
 800240a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	e000e010 	.word	0xe000e010

0800241c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ff29 	bl	800227c <__NVIC_SetPriorityGrouping>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002440:	f7ff ff40 	bl	80022c4 <__NVIC_GetPriorityGrouping>
 8002444:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	6978      	ldr	r0, [r7, #20]
 800244c:	f7ff ff90 	bl	8002370 <NVIC_EncodePriority>
 8002450:	4602      	mov	r2, r0
 8002452:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff5f 	bl	800231c <__NVIC_SetPriority>
}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002470:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff33 	bl	80022e0 <__NVIC_EnableIRQ>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffa4 	bl	80023d8 <SysTick_Config>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80024a4:	f7ff feba 	bl	800221c <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e37f      	b.n	8002bb4 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a66      	ldr	r2, [pc, #408]	; (8002654 <HAL_DMA_Init+0x1b8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d04a      	beq.n	8002554 <HAL_DMA_Init+0xb8>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a65      	ldr	r2, [pc, #404]	; (8002658 <HAL_DMA_Init+0x1bc>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d045      	beq.n	8002554 <HAL_DMA_Init+0xb8>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a63      	ldr	r2, [pc, #396]	; (800265c <HAL_DMA_Init+0x1c0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d040      	beq.n	8002554 <HAL_DMA_Init+0xb8>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a62      	ldr	r2, [pc, #392]	; (8002660 <HAL_DMA_Init+0x1c4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d03b      	beq.n	8002554 <HAL_DMA_Init+0xb8>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a60      	ldr	r2, [pc, #384]	; (8002664 <HAL_DMA_Init+0x1c8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d036      	beq.n	8002554 <HAL_DMA_Init+0xb8>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a5f      	ldr	r2, [pc, #380]	; (8002668 <HAL_DMA_Init+0x1cc>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d031      	beq.n	8002554 <HAL_DMA_Init+0xb8>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a5d      	ldr	r2, [pc, #372]	; (800266c <HAL_DMA_Init+0x1d0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d02c      	beq.n	8002554 <HAL_DMA_Init+0xb8>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a5c      	ldr	r2, [pc, #368]	; (8002670 <HAL_DMA_Init+0x1d4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d027      	beq.n	8002554 <HAL_DMA_Init+0xb8>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a5a      	ldr	r2, [pc, #360]	; (8002674 <HAL_DMA_Init+0x1d8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d022      	beq.n	8002554 <HAL_DMA_Init+0xb8>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a59      	ldr	r2, [pc, #356]	; (8002678 <HAL_DMA_Init+0x1dc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d01d      	beq.n	8002554 <HAL_DMA_Init+0xb8>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a57      	ldr	r2, [pc, #348]	; (800267c <HAL_DMA_Init+0x1e0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d018      	beq.n	8002554 <HAL_DMA_Init+0xb8>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a56      	ldr	r2, [pc, #344]	; (8002680 <HAL_DMA_Init+0x1e4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d013      	beq.n	8002554 <HAL_DMA_Init+0xb8>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a54      	ldr	r2, [pc, #336]	; (8002684 <HAL_DMA_Init+0x1e8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d00e      	beq.n	8002554 <HAL_DMA_Init+0xb8>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a53      	ldr	r2, [pc, #332]	; (8002688 <HAL_DMA_Init+0x1ec>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d009      	beq.n	8002554 <HAL_DMA_Init+0xb8>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a51      	ldr	r2, [pc, #324]	; (800268c <HAL_DMA_Init+0x1f0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d004      	beq.n	8002554 <HAL_DMA_Init+0xb8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a50      	ldr	r2, [pc, #320]	; (8002690 <HAL_DMA_Init+0x1f4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d101      	bne.n	8002558 <HAL_DMA_Init+0xbc>
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <HAL_DMA_Init+0xbe>
 8002558:	2300      	movs	r3, #0
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 813c 	beq.w	80027d8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a37      	ldr	r2, [pc, #220]	; (8002654 <HAL_DMA_Init+0x1b8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d04a      	beq.n	8002610 <HAL_DMA_Init+0x174>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a36      	ldr	r2, [pc, #216]	; (8002658 <HAL_DMA_Init+0x1bc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d045      	beq.n	8002610 <HAL_DMA_Init+0x174>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a34      	ldr	r2, [pc, #208]	; (800265c <HAL_DMA_Init+0x1c0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d040      	beq.n	8002610 <HAL_DMA_Init+0x174>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a33      	ldr	r2, [pc, #204]	; (8002660 <HAL_DMA_Init+0x1c4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d03b      	beq.n	8002610 <HAL_DMA_Init+0x174>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a31      	ldr	r2, [pc, #196]	; (8002664 <HAL_DMA_Init+0x1c8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d036      	beq.n	8002610 <HAL_DMA_Init+0x174>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a30      	ldr	r2, [pc, #192]	; (8002668 <HAL_DMA_Init+0x1cc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d031      	beq.n	8002610 <HAL_DMA_Init+0x174>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a2e      	ldr	r2, [pc, #184]	; (800266c <HAL_DMA_Init+0x1d0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d02c      	beq.n	8002610 <HAL_DMA_Init+0x174>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a2d      	ldr	r2, [pc, #180]	; (8002670 <HAL_DMA_Init+0x1d4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d027      	beq.n	8002610 <HAL_DMA_Init+0x174>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a2b      	ldr	r2, [pc, #172]	; (8002674 <HAL_DMA_Init+0x1d8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d022      	beq.n	8002610 <HAL_DMA_Init+0x174>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a2a      	ldr	r2, [pc, #168]	; (8002678 <HAL_DMA_Init+0x1dc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d01d      	beq.n	8002610 <HAL_DMA_Init+0x174>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a28      	ldr	r2, [pc, #160]	; (800267c <HAL_DMA_Init+0x1e0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d018      	beq.n	8002610 <HAL_DMA_Init+0x174>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a27      	ldr	r2, [pc, #156]	; (8002680 <HAL_DMA_Init+0x1e4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d013      	beq.n	8002610 <HAL_DMA_Init+0x174>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a25      	ldr	r2, [pc, #148]	; (8002684 <HAL_DMA_Init+0x1e8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00e      	beq.n	8002610 <HAL_DMA_Init+0x174>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a24      	ldr	r2, [pc, #144]	; (8002688 <HAL_DMA_Init+0x1ec>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d009      	beq.n	8002610 <HAL_DMA_Init+0x174>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a22      	ldr	r2, [pc, #136]	; (800268c <HAL_DMA_Init+0x1f0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d004      	beq.n	8002610 <HAL_DMA_Init+0x174>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a21      	ldr	r2, [pc, #132]	; (8002690 <HAL_DMA_Init+0x1f4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d108      	bne.n	8002622 <HAL_DMA_Init+0x186>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0201 	bic.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e007      	b.n	8002632 <HAL_DMA_Init+0x196>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002632:	e02f      	b.n	8002694 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002634:	f7ff fdf2 	bl	800221c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b05      	cmp	r3, #5
 8002640:	d928      	bls.n	8002694 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2220      	movs	r2, #32
 8002646:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2203      	movs	r2, #3
 800264c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e2af      	b.n	8002bb4 <HAL_DMA_Init+0x718>
 8002654:	40020010 	.word	0x40020010
 8002658:	40020028 	.word	0x40020028
 800265c:	40020040 	.word	0x40020040
 8002660:	40020058 	.word	0x40020058
 8002664:	40020070 	.word	0x40020070
 8002668:	40020088 	.word	0x40020088
 800266c:	400200a0 	.word	0x400200a0
 8002670:	400200b8 	.word	0x400200b8
 8002674:	40020410 	.word	0x40020410
 8002678:	40020428 	.word	0x40020428
 800267c:	40020440 	.word	0x40020440
 8002680:	40020458 	.word	0x40020458
 8002684:	40020470 	.word	0x40020470
 8002688:	40020488 	.word	0x40020488
 800268c:	400204a0 	.word	0x400204a0
 8002690:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1c8      	bne.n	8002634 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4b73      	ldr	r3, [pc, #460]	; (800287c <HAL_DMA_Init+0x3e0>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80026ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d107      	bne.n	80026f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	4313      	orrs	r3, r2
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b28      	cmp	r3, #40	; 0x28
 80026fe:	d903      	bls.n	8002708 <HAL_DMA_Init+0x26c>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b2e      	cmp	r3, #46	; 0x2e
 8002706:	d91f      	bls.n	8002748 <HAL_DMA_Init+0x2ac>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b3e      	cmp	r3, #62	; 0x3e
 800270e:	d903      	bls.n	8002718 <HAL_DMA_Init+0x27c>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b42      	cmp	r3, #66	; 0x42
 8002716:	d917      	bls.n	8002748 <HAL_DMA_Init+0x2ac>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b46      	cmp	r3, #70	; 0x46
 800271e:	d903      	bls.n	8002728 <HAL_DMA_Init+0x28c>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b48      	cmp	r3, #72	; 0x48
 8002726:	d90f      	bls.n	8002748 <HAL_DMA_Init+0x2ac>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b4e      	cmp	r3, #78	; 0x4e
 800272e:	d903      	bls.n	8002738 <HAL_DMA_Init+0x29c>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b52      	cmp	r3, #82	; 0x52
 8002736:	d907      	bls.n	8002748 <HAL_DMA_Init+0x2ac>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b73      	cmp	r3, #115	; 0x73
 800273e:	d905      	bls.n	800274c <HAL_DMA_Init+0x2b0>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b77      	cmp	r3, #119	; 0x77
 8002746:	d801      	bhi.n	800274c <HAL_DMA_Init+0x2b0>
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <HAL_DMA_Init+0x2b2>
 800274c:	2300      	movs	r3, #0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002758:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f023 0307 	bic.w	r3, r3, #7
 8002770:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4313      	orrs	r3, r2
 800277a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	2b04      	cmp	r3, #4
 8002782:	d117      	bne.n	80027b4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	4313      	orrs	r3, r2
 800278c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00e      	beq.n	80027b4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f001 ff88 	bl	80046ac <DMA_CheckFifoParam>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d008      	beq.n	80027b4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2240      	movs	r2, #64	; 0x40
 80027a6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e1ff      	b.n	8002bb4 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f001 fec3 	bl	8004548 <DMA_CalcBaseAndBitshift>
 80027c2:	4603      	mov	r3, r0
 80027c4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	223f      	movs	r2, #63	; 0x3f
 80027d0:	409a      	lsls	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	e0fe      	b.n	80029d6 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a28      	ldr	r2, [pc, #160]	; (8002880 <HAL_DMA_Init+0x3e4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d04a      	beq.n	8002878 <HAL_DMA_Init+0x3dc>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a27      	ldr	r2, [pc, #156]	; (8002884 <HAL_DMA_Init+0x3e8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d045      	beq.n	8002878 <HAL_DMA_Init+0x3dc>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a25      	ldr	r2, [pc, #148]	; (8002888 <HAL_DMA_Init+0x3ec>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d040      	beq.n	8002878 <HAL_DMA_Init+0x3dc>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a24      	ldr	r2, [pc, #144]	; (800288c <HAL_DMA_Init+0x3f0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d03b      	beq.n	8002878 <HAL_DMA_Init+0x3dc>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a22      	ldr	r2, [pc, #136]	; (8002890 <HAL_DMA_Init+0x3f4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d036      	beq.n	8002878 <HAL_DMA_Init+0x3dc>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a21      	ldr	r2, [pc, #132]	; (8002894 <HAL_DMA_Init+0x3f8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d031      	beq.n	8002878 <HAL_DMA_Init+0x3dc>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <HAL_DMA_Init+0x3fc>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d02c      	beq.n	8002878 <HAL_DMA_Init+0x3dc>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1e      	ldr	r2, [pc, #120]	; (800289c <HAL_DMA_Init+0x400>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d027      	beq.n	8002878 <HAL_DMA_Init+0x3dc>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a1c      	ldr	r2, [pc, #112]	; (80028a0 <HAL_DMA_Init+0x404>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d022      	beq.n	8002878 <HAL_DMA_Init+0x3dc>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1b      	ldr	r2, [pc, #108]	; (80028a4 <HAL_DMA_Init+0x408>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d01d      	beq.n	8002878 <HAL_DMA_Init+0x3dc>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a19      	ldr	r2, [pc, #100]	; (80028a8 <HAL_DMA_Init+0x40c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d018      	beq.n	8002878 <HAL_DMA_Init+0x3dc>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a18      	ldr	r2, [pc, #96]	; (80028ac <HAL_DMA_Init+0x410>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d013      	beq.n	8002878 <HAL_DMA_Init+0x3dc>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a16      	ldr	r2, [pc, #88]	; (80028b0 <HAL_DMA_Init+0x414>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00e      	beq.n	8002878 <HAL_DMA_Init+0x3dc>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a15      	ldr	r2, [pc, #84]	; (80028b4 <HAL_DMA_Init+0x418>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d009      	beq.n	8002878 <HAL_DMA_Init+0x3dc>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <HAL_DMA_Init+0x41c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d004      	beq.n	8002878 <HAL_DMA_Init+0x3dc>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a12      	ldr	r2, [pc, #72]	; (80028bc <HAL_DMA_Init+0x420>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d123      	bne.n	80028c0 <HAL_DMA_Init+0x424>
 8002878:	2301      	movs	r3, #1
 800287a:	e022      	b.n	80028c2 <HAL_DMA_Init+0x426>
 800287c:	fe10803f 	.word	0xfe10803f
 8002880:	48022c08 	.word	0x48022c08
 8002884:	48022c1c 	.word	0x48022c1c
 8002888:	48022c30 	.word	0x48022c30
 800288c:	48022c44 	.word	0x48022c44
 8002890:	48022c58 	.word	0x48022c58
 8002894:	48022c6c 	.word	0x48022c6c
 8002898:	48022c80 	.word	0x48022c80
 800289c:	48022c94 	.word	0x48022c94
 80028a0:	58025408 	.word	0x58025408
 80028a4:	5802541c 	.word	0x5802541c
 80028a8:	58025430 	.word	0x58025430
 80028ac:	58025444 	.word	0x58025444
 80028b0:	58025458 	.word	0x58025458
 80028b4:	5802546c 	.word	0x5802546c
 80028b8:	58025480 	.word	0x58025480
 80028bc:	58025494 	.word	0x58025494
 80028c0:	2300      	movs	r3, #0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d07e      	beq.n	80029c4 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a80      	ldr	r2, [pc, #512]	; (8002acc <HAL_DMA_Init+0x630>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d021      	beq.n	8002914 <HAL_DMA_Init+0x478>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a7e      	ldr	r2, [pc, #504]	; (8002ad0 <HAL_DMA_Init+0x634>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d01c      	beq.n	8002914 <HAL_DMA_Init+0x478>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a7d      	ldr	r2, [pc, #500]	; (8002ad4 <HAL_DMA_Init+0x638>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d017      	beq.n	8002914 <HAL_DMA_Init+0x478>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a7b      	ldr	r2, [pc, #492]	; (8002ad8 <HAL_DMA_Init+0x63c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d012      	beq.n	8002914 <HAL_DMA_Init+0x478>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a7a      	ldr	r2, [pc, #488]	; (8002adc <HAL_DMA_Init+0x640>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d00d      	beq.n	8002914 <HAL_DMA_Init+0x478>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a78      	ldr	r2, [pc, #480]	; (8002ae0 <HAL_DMA_Init+0x644>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d008      	beq.n	8002914 <HAL_DMA_Init+0x478>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a77      	ldr	r2, [pc, #476]	; (8002ae4 <HAL_DMA_Init+0x648>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d003      	beq.n	8002914 <HAL_DMA_Init+0x478>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a75      	ldr	r2, [pc, #468]	; (8002ae8 <HAL_DMA_Init+0x64c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2202      	movs	r2, #2
 800291a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	4b6e      	ldr	r3, [pc, #440]	; (8002aec <HAL_DMA_Init+0x650>)
 8002932:	4013      	ands	r3, r2
 8002934:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b40      	cmp	r3, #64	; 0x40
 800293c:	d008      	beq.n	8002950 <HAL_DMA_Init+0x4b4>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b80      	cmp	r3, #128	; 0x80
 8002944:	d102      	bne.n	800294c <HAL_DMA_Init+0x4b0>
 8002946:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800294a:	e002      	b.n	8002952 <HAL_DMA_Init+0x4b6>
 800294c:	2300      	movs	r3, #0
 800294e:	e000      	b.n	8002952 <HAL_DMA_Init+0x4b6>
 8002950:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68d2      	ldr	r2, [r2, #12]
 8002956:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002958:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002960:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002968:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002970:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002978:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002980:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	4b56      	ldr	r3, [pc, #344]	; (8002af0 <HAL_DMA_Init+0x654>)
 8002998:	4413      	add	r3, r2
 800299a:	4a56      	ldr	r2, [pc, #344]	; (8002af4 <HAL_DMA_Init+0x658>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	009a      	lsls	r2, r3, #2
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f001 fdcd 	bl	8004548 <DMA_CalcBaseAndBitshift>
 80029ae:	4603      	mov	r3, r0
 80029b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b6:	f003 031f 	and.w	r3, r3, #31
 80029ba:	2201      	movs	r2, #1
 80029bc:	409a      	lsls	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	e008      	b.n	80029d6 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2240      	movs	r2, #64	; 0x40
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2203      	movs	r2, #3
 80029ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0ee      	b.n	8002bb4 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a47      	ldr	r2, [pc, #284]	; (8002af8 <HAL_DMA_Init+0x65c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d072      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a45      	ldr	r2, [pc, #276]	; (8002afc <HAL_DMA_Init+0x660>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d06d      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a44      	ldr	r2, [pc, #272]	; (8002b00 <HAL_DMA_Init+0x664>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d068      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a42      	ldr	r2, [pc, #264]	; (8002b04 <HAL_DMA_Init+0x668>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d063      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a41      	ldr	r2, [pc, #260]	; (8002b08 <HAL_DMA_Init+0x66c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d05e      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a3f      	ldr	r2, [pc, #252]	; (8002b0c <HAL_DMA_Init+0x670>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d059      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a3e      	ldr	r2, [pc, #248]	; (8002b10 <HAL_DMA_Init+0x674>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d054      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a3c      	ldr	r2, [pc, #240]	; (8002b14 <HAL_DMA_Init+0x678>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d04f      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a3b      	ldr	r2, [pc, #236]	; (8002b18 <HAL_DMA_Init+0x67c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d04a      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a39      	ldr	r2, [pc, #228]	; (8002b1c <HAL_DMA_Init+0x680>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d045      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a38      	ldr	r2, [pc, #224]	; (8002b20 <HAL_DMA_Init+0x684>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d040      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a36      	ldr	r2, [pc, #216]	; (8002b24 <HAL_DMA_Init+0x688>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d03b      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a35      	ldr	r2, [pc, #212]	; (8002b28 <HAL_DMA_Init+0x68c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d036      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a33      	ldr	r2, [pc, #204]	; (8002b2c <HAL_DMA_Init+0x690>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d031      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a32      	ldr	r2, [pc, #200]	; (8002b30 <HAL_DMA_Init+0x694>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d02c      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a30      	ldr	r2, [pc, #192]	; (8002b34 <HAL_DMA_Init+0x698>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d027      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a14      	ldr	r2, [pc, #80]	; (8002acc <HAL_DMA_Init+0x630>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d022      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <HAL_DMA_Init+0x634>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01d      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a11      	ldr	r2, [pc, #68]	; (8002ad4 <HAL_DMA_Init+0x638>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d018      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a0f      	ldr	r2, [pc, #60]	; (8002ad8 <HAL_DMA_Init+0x63c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a0e      	ldr	r2, [pc, #56]	; (8002adc <HAL_DMA_Init+0x640>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00e      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a0c      	ldr	r2, [pc, #48]	; (8002ae0 <HAL_DMA_Init+0x644>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d009      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a0b      	ldr	r2, [pc, #44]	; (8002ae4 <HAL_DMA_Init+0x648>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d004      	beq.n	8002ac6 <HAL_DMA_Init+0x62a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <HAL_DMA_Init+0x64c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d138      	bne.n	8002b38 <HAL_DMA_Init+0x69c>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e037      	b.n	8002b3a <HAL_DMA_Init+0x69e>
 8002aca:	bf00      	nop
 8002acc:	58025408 	.word	0x58025408
 8002ad0:	5802541c 	.word	0x5802541c
 8002ad4:	58025430 	.word	0x58025430
 8002ad8:	58025444 	.word	0x58025444
 8002adc:	58025458 	.word	0x58025458
 8002ae0:	5802546c 	.word	0x5802546c
 8002ae4:	58025480 	.word	0x58025480
 8002ae8:	58025494 	.word	0x58025494
 8002aec:	fffe000f 	.word	0xfffe000f
 8002af0:	a7fdabf8 	.word	0xa7fdabf8
 8002af4:	cccccccd 	.word	0xcccccccd
 8002af8:	40020010 	.word	0x40020010
 8002afc:	40020028 	.word	0x40020028
 8002b00:	40020040 	.word	0x40020040
 8002b04:	40020058 	.word	0x40020058
 8002b08:	40020070 	.word	0x40020070
 8002b0c:	40020088 	.word	0x40020088
 8002b10:	400200a0 	.word	0x400200a0
 8002b14:	400200b8 	.word	0x400200b8
 8002b18:	40020410 	.word	0x40020410
 8002b1c:	40020428 	.word	0x40020428
 8002b20:	40020440 	.word	0x40020440
 8002b24:	40020458 	.word	0x40020458
 8002b28:	40020470 	.word	0x40020470
 8002b2c:	40020488 	.word	0x40020488
 8002b30:	400204a0 	.word	0x400204a0
 8002b34:	400204b8 	.word	0x400204b8
 8002b38:	2300      	movs	r3, #0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d032      	beq.n	8002ba4 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f001 fe30 	bl	80047a4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b80      	cmp	r3, #128	; 0x80
 8002b4a:	d102      	bne.n	8002b52 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b66:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d010      	beq.n	8002b92 <HAL_DMA_Init+0x6f6>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d80c      	bhi.n	8002b92 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f001 fead 	bl	80048d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	e008      	b.n	8002ba4 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002bc4:	f7ff fb2a 	bl	800221c <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e2dc      	b.n	800318e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d008      	beq.n	8002bf2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2280      	movs	r2, #128	; 0x80
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e2cd      	b.n	800318e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a76      	ldr	r2, [pc, #472]	; (8002dd0 <HAL_DMA_Abort+0x214>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d04a      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a74      	ldr	r2, [pc, #464]	; (8002dd4 <HAL_DMA_Abort+0x218>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d045      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a73      	ldr	r2, [pc, #460]	; (8002dd8 <HAL_DMA_Abort+0x21c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d040      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a71      	ldr	r2, [pc, #452]	; (8002ddc <HAL_DMA_Abort+0x220>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d03b      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a70      	ldr	r2, [pc, #448]	; (8002de0 <HAL_DMA_Abort+0x224>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d036      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a6e      	ldr	r2, [pc, #440]	; (8002de4 <HAL_DMA_Abort+0x228>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d031      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a6d      	ldr	r2, [pc, #436]	; (8002de8 <HAL_DMA_Abort+0x22c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d02c      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a6b      	ldr	r2, [pc, #428]	; (8002dec <HAL_DMA_Abort+0x230>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d027      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a6a      	ldr	r2, [pc, #424]	; (8002df0 <HAL_DMA_Abort+0x234>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d022      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a68      	ldr	r2, [pc, #416]	; (8002df4 <HAL_DMA_Abort+0x238>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01d      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a67      	ldr	r2, [pc, #412]	; (8002df8 <HAL_DMA_Abort+0x23c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d018      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a65      	ldr	r2, [pc, #404]	; (8002dfc <HAL_DMA_Abort+0x240>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a64      	ldr	r2, [pc, #400]	; (8002e00 <HAL_DMA_Abort+0x244>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d00e      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a62      	ldr	r2, [pc, #392]	; (8002e04 <HAL_DMA_Abort+0x248>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d009      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a61      	ldr	r2, [pc, #388]	; (8002e08 <HAL_DMA_Abort+0x24c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d004      	beq.n	8002c92 <HAL_DMA_Abort+0xd6>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a5f      	ldr	r2, [pc, #380]	; (8002e0c <HAL_DMA_Abort+0x250>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d101      	bne.n	8002c96 <HAL_DMA_Abort+0xda>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <HAL_DMA_Abort+0xdc>
 8002c96:	2300      	movs	r3, #0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d013      	beq.n	8002cc4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 021e 	bic.w	r2, r2, #30
 8002caa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e00a      	b.n	8002cda <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 020e 	bic.w	r2, r2, #14
 8002cd2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a3c      	ldr	r2, [pc, #240]	; (8002dd0 <HAL_DMA_Abort+0x214>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d072      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a3a      	ldr	r2, [pc, #232]	; (8002dd4 <HAL_DMA_Abort+0x218>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d06d      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a39      	ldr	r2, [pc, #228]	; (8002dd8 <HAL_DMA_Abort+0x21c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d068      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a37      	ldr	r2, [pc, #220]	; (8002ddc <HAL_DMA_Abort+0x220>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d063      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a36      	ldr	r2, [pc, #216]	; (8002de0 <HAL_DMA_Abort+0x224>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d05e      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a34      	ldr	r2, [pc, #208]	; (8002de4 <HAL_DMA_Abort+0x228>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d059      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a33      	ldr	r2, [pc, #204]	; (8002de8 <HAL_DMA_Abort+0x22c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d054      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a31      	ldr	r2, [pc, #196]	; (8002dec <HAL_DMA_Abort+0x230>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d04f      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a30      	ldr	r2, [pc, #192]	; (8002df0 <HAL_DMA_Abort+0x234>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d04a      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a2e      	ldr	r2, [pc, #184]	; (8002df4 <HAL_DMA_Abort+0x238>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d045      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a2d      	ldr	r2, [pc, #180]	; (8002df8 <HAL_DMA_Abort+0x23c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d040      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a2b      	ldr	r2, [pc, #172]	; (8002dfc <HAL_DMA_Abort+0x240>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d03b      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a2a      	ldr	r2, [pc, #168]	; (8002e00 <HAL_DMA_Abort+0x244>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d036      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a28      	ldr	r2, [pc, #160]	; (8002e04 <HAL_DMA_Abort+0x248>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d031      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a27      	ldr	r2, [pc, #156]	; (8002e08 <HAL_DMA_Abort+0x24c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d02c      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a25      	ldr	r2, [pc, #148]	; (8002e0c <HAL_DMA_Abort+0x250>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d027      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a24      	ldr	r2, [pc, #144]	; (8002e10 <HAL_DMA_Abort+0x254>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d022      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a22      	ldr	r2, [pc, #136]	; (8002e14 <HAL_DMA_Abort+0x258>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01d      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a21      	ldr	r2, [pc, #132]	; (8002e18 <HAL_DMA_Abort+0x25c>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d018      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1f      	ldr	r2, [pc, #124]	; (8002e1c <HAL_DMA_Abort+0x260>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d013      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a1e      	ldr	r2, [pc, #120]	; (8002e20 <HAL_DMA_Abort+0x264>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00e      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a1c      	ldr	r2, [pc, #112]	; (8002e24 <HAL_DMA_Abort+0x268>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d009      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a1b      	ldr	r2, [pc, #108]	; (8002e28 <HAL_DMA_Abort+0x26c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d004      	beq.n	8002dca <HAL_DMA_Abort+0x20e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a19      	ldr	r2, [pc, #100]	; (8002e2c <HAL_DMA_Abort+0x270>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d132      	bne.n	8002e30 <HAL_DMA_Abort+0x274>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e031      	b.n	8002e32 <HAL_DMA_Abort+0x276>
 8002dce:	bf00      	nop
 8002dd0:	40020010 	.word	0x40020010
 8002dd4:	40020028 	.word	0x40020028
 8002dd8:	40020040 	.word	0x40020040
 8002ddc:	40020058 	.word	0x40020058
 8002de0:	40020070 	.word	0x40020070
 8002de4:	40020088 	.word	0x40020088
 8002de8:	400200a0 	.word	0x400200a0
 8002dec:	400200b8 	.word	0x400200b8
 8002df0:	40020410 	.word	0x40020410
 8002df4:	40020428 	.word	0x40020428
 8002df8:	40020440 	.word	0x40020440
 8002dfc:	40020458 	.word	0x40020458
 8002e00:	40020470 	.word	0x40020470
 8002e04:	40020488 	.word	0x40020488
 8002e08:	400204a0 	.word	0x400204a0
 8002e0c:	400204b8 	.word	0x400204b8
 8002e10:	58025408 	.word	0x58025408
 8002e14:	5802541c 	.word	0x5802541c
 8002e18:	58025430 	.word	0x58025430
 8002e1c:	58025444 	.word	0x58025444
 8002e20:	58025458 	.word	0x58025458
 8002e24:	5802546c 	.word	0x5802546c
 8002e28:	58025480 	.word	0x58025480
 8002e2c:	58025494 	.word	0x58025494
 8002e30:	2300      	movs	r3, #0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e44:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a6d      	ldr	r2, [pc, #436]	; (8003000 <HAL_DMA_Abort+0x444>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d04a      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a6b      	ldr	r2, [pc, #428]	; (8003004 <HAL_DMA_Abort+0x448>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d045      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a6a      	ldr	r2, [pc, #424]	; (8003008 <HAL_DMA_Abort+0x44c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d040      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a68      	ldr	r2, [pc, #416]	; (800300c <HAL_DMA_Abort+0x450>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d03b      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a67      	ldr	r2, [pc, #412]	; (8003010 <HAL_DMA_Abort+0x454>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d036      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a65      	ldr	r2, [pc, #404]	; (8003014 <HAL_DMA_Abort+0x458>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d031      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a64      	ldr	r2, [pc, #400]	; (8003018 <HAL_DMA_Abort+0x45c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d02c      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a62      	ldr	r2, [pc, #392]	; (800301c <HAL_DMA_Abort+0x460>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d027      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a61      	ldr	r2, [pc, #388]	; (8003020 <HAL_DMA_Abort+0x464>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d022      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a5f      	ldr	r2, [pc, #380]	; (8003024 <HAL_DMA_Abort+0x468>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d01d      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a5e      	ldr	r2, [pc, #376]	; (8003028 <HAL_DMA_Abort+0x46c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d018      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a5c      	ldr	r2, [pc, #368]	; (800302c <HAL_DMA_Abort+0x470>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a5b      	ldr	r2, [pc, #364]	; (8003030 <HAL_DMA_Abort+0x474>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00e      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a59      	ldr	r2, [pc, #356]	; (8003034 <HAL_DMA_Abort+0x478>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d009      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a58      	ldr	r2, [pc, #352]	; (8003038 <HAL_DMA_Abort+0x47c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d004      	beq.n	8002ee6 <HAL_DMA_Abort+0x32a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a56      	ldr	r2, [pc, #344]	; (800303c <HAL_DMA_Abort+0x480>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d108      	bne.n	8002ef8 <HAL_DMA_Abort+0x33c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0201 	bic.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	e007      	b.n	8002f08 <HAL_DMA_Abort+0x34c>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f08:	e013      	b.n	8002f32 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f0a:	f7ff f987 	bl	800221c <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b05      	cmp	r3, #5
 8002f16:	d90c      	bls.n	8002f32 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2203      	movs	r2, #3
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e12d      	b.n	800318e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1e5      	bne.n	8002f0a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a2f      	ldr	r2, [pc, #188]	; (8003000 <HAL_DMA_Abort+0x444>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d04a      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a2d      	ldr	r2, [pc, #180]	; (8003004 <HAL_DMA_Abort+0x448>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d045      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a2c      	ldr	r2, [pc, #176]	; (8003008 <HAL_DMA_Abort+0x44c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d040      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a2a      	ldr	r2, [pc, #168]	; (800300c <HAL_DMA_Abort+0x450>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d03b      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a29      	ldr	r2, [pc, #164]	; (8003010 <HAL_DMA_Abort+0x454>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d036      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a27      	ldr	r2, [pc, #156]	; (8003014 <HAL_DMA_Abort+0x458>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d031      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a26      	ldr	r2, [pc, #152]	; (8003018 <HAL_DMA_Abort+0x45c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d02c      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a24      	ldr	r2, [pc, #144]	; (800301c <HAL_DMA_Abort+0x460>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d027      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a23      	ldr	r2, [pc, #140]	; (8003020 <HAL_DMA_Abort+0x464>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d022      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a21      	ldr	r2, [pc, #132]	; (8003024 <HAL_DMA_Abort+0x468>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d01d      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a20      	ldr	r2, [pc, #128]	; (8003028 <HAL_DMA_Abort+0x46c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d018      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1e      	ldr	r2, [pc, #120]	; (800302c <HAL_DMA_Abort+0x470>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1d      	ldr	r2, [pc, #116]	; (8003030 <HAL_DMA_Abort+0x474>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00e      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1b      	ldr	r2, [pc, #108]	; (8003034 <HAL_DMA_Abort+0x478>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d009      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1a      	ldr	r2, [pc, #104]	; (8003038 <HAL_DMA_Abort+0x47c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_DMA_Abort+0x422>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a18      	ldr	r2, [pc, #96]	; (800303c <HAL_DMA_Abort+0x480>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d101      	bne.n	8002fe2 <HAL_DMA_Abort+0x426>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_DMA_Abort+0x428>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d02b      	beq.n	8003040 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	223f      	movs	r2, #63	; 0x3f
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	609a      	str	r2, [r3, #8]
 8002ffe:	e02a      	b.n	8003056 <HAL_DMA_Abort+0x49a>
 8003000:	40020010 	.word	0x40020010
 8003004:	40020028 	.word	0x40020028
 8003008:	40020040 	.word	0x40020040
 800300c:	40020058 	.word	0x40020058
 8003010:	40020070 	.word	0x40020070
 8003014:	40020088 	.word	0x40020088
 8003018:	400200a0 	.word	0x400200a0
 800301c:	400200b8 	.word	0x400200b8
 8003020:	40020410 	.word	0x40020410
 8003024:	40020428 	.word	0x40020428
 8003028:	40020440 	.word	0x40020440
 800302c:	40020458 	.word	0x40020458
 8003030:	40020470 	.word	0x40020470
 8003034:	40020488 	.word	0x40020488
 8003038:	400204a0 	.word	0x400204a0
 800303c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003044:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	2201      	movs	r2, #1
 8003050:	409a      	lsls	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a4f      	ldr	r2, [pc, #316]	; (8003198 <HAL_DMA_Abort+0x5dc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d072      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a4d      	ldr	r2, [pc, #308]	; (800319c <HAL_DMA_Abort+0x5e0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d06d      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a4c      	ldr	r2, [pc, #304]	; (80031a0 <HAL_DMA_Abort+0x5e4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d068      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a4a      	ldr	r2, [pc, #296]	; (80031a4 <HAL_DMA_Abort+0x5e8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d063      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a49      	ldr	r2, [pc, #292]	; (80031a8 <HAL_DMA_Abort+0x5ec>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d05e      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a47      	ldr	r2, [pc, #284]	; (80031ac <HAL_DMA_Abort+0x5f0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d059      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a46      	ldr	r2, [pc, #280]	; (80031b0 <HAL_DMA_Abort+0x5f4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d054      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a44      	ldr	r2, [pc, #272]	; (80031b4 <HAL_DMA_Abort+0x5f8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d04f      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a43      	ldr	r2, [pc, #268]	; (80031b8 <HAL_DMA_Abort+0x5fc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d04a      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a41      	ldr	r2, [pc, #260]	; (80031bc <HAL_DMA_Abort+0x600>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d045      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a40      	ldr	r2, [pc, #256]	; (80031c0 <HAL_DMA_Abort+0x604>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d040      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a3e      	ldr	r2, [pc, #248]	; (80031c4 <HAL_DMA_Abort+0x608>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d03b      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a3d      	ldr	r2, [pc, #244]	; (80031c8 <HAL_DMA_Abort+0x60c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d036      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a3b      	ldr	r2, [pc, #236]	; (80031cc <HAL_DMA_Abort+0x610>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d031      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a3a      	ldr	r2, [pc, #232]	; (80031d0 <HAL_DMA_Abort+0x614>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d02c      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a38      	ldr	r2, [pc, #224]	; (80031d4 <HAL_DMA_Abort+0x618>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d027      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a37      	ldr	r2, [pc, #220]	; (80031d8 <HAL_DMA_Abort+0x61c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d022      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a35      	ldr	r2, [pc, #212]	; (80031dc <HAL_DMA_Abort+0x620>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d01d      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a34      	ldr	r2, [pc, #208]	; (80031e0 <HAL_DMA_Abort+0x624>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d018      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a32      	ldr	r2, [pc, #200]	; (80031e4 <HAL_DMA_Abort+0x628>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a31      	ldr	r2, [pc, #196]	; (80031e8 <HAL_DMA_Abort+0x62c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00e      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a2f      	ldr	r2, [pc, #188]	; (80031ec <HAL_DMA_Abort+0x630>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d009      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a2e      	ldr	r2, [pc, #184]	; (80031f0 <HAL_DMA_Abort+0x634>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d004      	beq.n	8003146 <HAL_DMA_Abort+0x58a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a2c      	ldr	r2, [pc, #176]	; (80031f4 <HAL_DMA_Abort+0x638>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d101      	bne.n	800314a <HAL_DMA_Abort+0x58e>
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <HAL_DMA_Abort+0x590>
 800314a:	2300      	movs	r3, #0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d015      	beq.n	800317c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003158:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00c      	beq.n	800317c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800316c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003170:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800317a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40020010 	.word	0x40020010
 800319c:	40020028 	.word	0x40020028
 80031a0:	40020040 	.word	0x40020040
 80031a4:	40020058 	.word	0x40020058
 80031a8:	40020070 	.word	0x40020070
 80031ac:	40020088 	.word	0x40020088
 80031b0:	400200a0 	.word	0x400200a0
 80031b4:	400200b8 	.word	0x400200b8
 80031b8:	40020410 	.word	0x40020410
 80031bc:	40020428 	.word	0x40020428
 80031c0:	40020440 	.word	0x40020440
 80031c4:	40020458 	.word	0x40020458
 80031c8:	40020470 	.word	0x40020470
 80031cc:	40020488 	.word	0x40020488
 80031d0:	400204a0 	.word	0x400204a0
 80031d4:	400204b8 	.word	0x400204b8
 80031d8:	58025408 	.word	0x58025408
 80031dc:	5802541c 	.word	0x5802541c
 80031e0:	58025430 	.word	0x58025430
 80031e4:	58025444 	.word	0x58025444
 80031e8:	58025458 	.word	0x58025458
 80031ec:	5802546c 	.word	0x5802546c
 80031f0:	58025480 	.word	0x58025480
 80031f4:	58025494 	.word	0x58025494

080031f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e237      	b.n	800367a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d004      	beq.n	8003220 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2280      	movs	r2, #128	; 0x80
 800321a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e22c      	b.n	800367a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a5c      	ldr	r2, [pc, #368]	; (8003398 <HAL_DMA_Abort_IT+0x1a0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d04a      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a5b      	ldr	r2, [pc, #364]	; (800339c <HAL_DMA_Abort_IT+0x1a4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d045      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a59      	ldr	r2, [pc, #356]	; (80033a0 <HAL_DMA_Abort_IT+0x1a8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d040      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a58      	ldr	r2, [pc, #352]	; (80033a4 <HAL_DMA_Abort_IT+0x1ac>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d03b      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a56      	ldr	r2, [pc, #344]	; (80033a8 <HAL_DMA_Abort_IT+0x1b0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d036      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a55      	ldr	r2, [pc, #340]	; (80033ac <HAL_DMA_Abort_IT+0x1b4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d031      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a53      	ldr	r2, [pc, #332]	; (80033b0 <HAL_DMA_Abort_IT+0x1b8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d02c      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a52      	ldr	r2, [pc, #328]	; (80033b4 <HAL_DMA_Abort_IT+0x1bc>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d027      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a50      	ldr	r2, [pc, #320]	; (80033b8 <HAL_DMA_Abort_IT+0x1c0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d022      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a4f      	ldr	r2, [pc, #316]	; (80033bc <HAL_DMA_Abort_IT+0x1c4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d01d      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a4d      	ldr	r2, [pc, #308]	; (80033c0 <HAL_DMA_Abort_IT+0x1c8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d018      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a4c      	ldr	r2, [pc, #304]	; (80033c4 <HAL_DMA_Abort_IT+0x1cc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d013      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a4a      	ldr	r2, [pc, #296]	; (80033c8 <HAL_DMA_Abort_IT+0x1d0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00e      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a49      	ldr	r2, [pc, #292]	; (80033cc <HAL_DMA_Abort_IT+0x1d4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d009      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a47      	ldr	r2, [pc, #284]	; (80033d0 <HAL_DMA_Abort_IT+0x1d8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d004      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xc8>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a46      	ldr	r2, [pc, #280]	; (80033d4 <HAL_DMA_Abort_IT+0x1dc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d101      	bne.n	80032c4 <HAL_DMA_Abort_IT+0xcc>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <HAL_DMA_Abort_IT+0xce>
 80032c4:	2300      	movs	r3, #0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 8086 	beq.w	80033d8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2204      	movs	r2, #4
 80032d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a2f      	ldr	r2, [pc, #188]	; (8003398 <HAL_DMA_Abort_IT+0x1a0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d04a      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a2e      	ldr	r2, [pc, #184]	; (800339c <HAL_DMA_Abort_IT+0x1a4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d045      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2c      	ldr	r2, [pc, #176]	; (80033a0 <HAL_DMA_Abort_IT+0x1a8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d040      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2b      	ldr	r2, [pc, #172]	; (80033a4 <HAL_DMA_Abort_IT+0x1ac>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d03b      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a29      	ldr	r2, [pc, #164]	; (80033a8 <HAL_DMA_Abort_IT+0x1b0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d036      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a28      	ldr	r2, [pc, #160]	; (80033ac <HAL_DMA_Abort_IT+0x1b4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d031      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a26      	ldr	r2, [pc, #152]	; (80033b0 <HAL_DMA_Abort_IT+0x1b8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d02c      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a25      	ldr	r2, [pc, #148]	; (80033b4 <HAL_DMA_Abort_IT+0x1bc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d027      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a23      	ldr	r2, [pc, #140]	; (80033b8 <HAL_DMA_Abort_IT+0x1c0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d022      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a22      	ldr	r2, [pc, #136]	; (80033bc <HAL_DMA_Abort_IT+0x1c4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d01d      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a20      	ldr	r2, [pc, #128]	; (80033c0 <HAL_DMA_Abort_IT+0x1c8>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d018      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1f      	ldr	r2, [pc, #124]	; (80033c4 <HAL_DMA_Abort_IT+0x1cc>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d013      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1d      	ldr	r2, [pc, #116]	; (80033c8 <HAL_DMA_Abort_IT+0x1d0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00e      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <HAL_DMA_Abort_IT+0x1d4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1a      	ldr	r2, [pc, #104]	; (80033d0 <HAL_DMA_Abort_IT+0x1d8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_DMA_Abort_IT+0x17c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a19      	ldr	r2, [pc, #100]	; (80033d4 <HAL_DMA_Abort_IT+0x1dc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d108      	bne.n	8003386 <HAL_DMA_Abort_IT+0x18e>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	e178      	b.n	8003678 <HAL_DMA_Abort_IT+0x480>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e16f      	b.n	8003678 <HAL_DMA_Abort_IT+0x480>
 8003398:	40020010 	.word	0x40020010
 800339c:	40020028 	.word	0x40020028
 80033a0:	40020040 	.word	0x40020040
 80033a4:	40020058 	.word	0x40020058
 80033a8:	40020070 	.word	0x40020070
 80033ac:	40020088 	.word	0x40020088
 80033b0:	400200a0 	.word	0x400200a0
 80033b4:	400200b8 	.word	0x400200b8
 80033b8:	40020410 	.word	0x40020410
 80033bc:	40020428 	.word	0x40020428
 80033c0:	40020440 	.word	0x40020440
 80033c4:	40020458 	.word	0x40020458
 80033c8:	40020470 	.word	0x40020470
 80033cc:	40020488 	.word	0x40020488
 80033d0:	400204a0 	.word	0x400204a0
 80033d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 020e 	bic.w	r2, r2, #14
 80033e6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a6c      	ldr	r2, [pc, #432]	; (80035a0 <HAL_DMA_Abort_IT+0x3a8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d04a      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a6b      	ldr	r2, [pc, #428]	; (80035a4 <HAL_DMA_Abort_IT+0x3ac>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d045      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a69      	ldr	r2, [pc, #420]	; (80035a8 <HAL_DMA_Abort_IT+0x3b0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d040      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a68      	ldr	r2, [pc, #416]	; (80035ac <HAL_DMA_Abort_IT+0x3b4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d03b      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a66      	ldr	r2, [pc, #408]	; (80035b0 <HAL_DMA_Abort_IT+0x3b8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d036      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a65      	ldr	r2, [pc, #404]	; (80035b4 <HAL_DMA_Abort_IT+0x3bc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d031      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a63      	ldr	r2, [pc, #396]	; (80035b8 <HAL_DMA_Abort_IT+0x3c0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d02c      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a62      	ldr	r2, [pc, #392]	; (80035bc <HAL_DMA_Abort_IT+0x3c4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d027      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a60      	ldr	r2, [pc, #384]	; (80035c0 <HAL_DMA_Abort_IT+0x3c8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d022      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a5f      	ldr	r2, [pc, #380]	; (80035c4 <HAL_DMA_Abort_IT+0x3cc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d01d      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a5d      	ldr	r2, [pc, #372]	; (80035c8 <HAL_DMA_Abort_IT+0x3d0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d018      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a5c      	ldr	r2, [pc, #368]	; (80035cc <HAL_DMA_Abort_IT+0x3d4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d013      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a5a      	ldr	r2, [pc, #360]	; (80035d0 <HAL_DMA_Abort_IT+0x3d8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00e      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a59      	ldr	r2, [pc, #356]	; (80035d4 <HAL_DMA_Abort_IT+0x3dc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d009      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a57      	ldr	r2, [pc, #348]	; (80035d8 <HAL_DMA_Abort_IT+0x3e0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d004      	beq.n	8003488 <HAL_DMA_Abort_IT+0x290>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a56      	ldr	r2, [pc, #344]	; (80035dc <HAL_DMA_Abort_IT+0x3e4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d108      	bne.n	800349a <HAL_DMA_Abort_IT+0x2a2>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0201 	bic.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	e007      	b.n	80034aa <HAL_DMA_Abort_IT+0x2b2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a3c      	ldr	r2, [pc, #240]	; (80035a0 <HAL_DMA_Abort_IT+0x3a8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d072      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a3a      	ldr	r2, [pc, #232]	; (80035a4 <HAL_DMA_Abort_IT+0x3ac>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d06d      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a39      	ldr	r2, [pc, #228]	; (80035a8 <HAL_DMA_Abort_IT+0x3b0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d068      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a37      	ldr	r2, [pc, #220]	; (80035ac <HAL_DMA_Abort_IT+0x3b4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d063      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a36      	ldr	r2, [pc, #216]	; (80035b0 <HAL_DMA_Abort_IT+0x3b8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d05e      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a34      	ldr	r2, [pc, #208]	; (80035b4 <HAL_DMA_Abort_IT+0x3bc>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d059      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a33      	ldr	r2, [pc, #204]	; (80035b8 <HAL_DMA_Abort_IT+0x3c0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d054      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a31      	ldr	r2, [pc, #196]	; (80035bc <HAL_DMA_Abort_IT+0x3c4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d04f      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a30      	ldr	r2, [pc, #192]	; (80035c0 <HAL_DMA_Abort_IT+0x3c8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d04a      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a2e      	ldr	r2, [pc, #184]	; (80035c4 <HAL_DMA_Abort_IT+0x3cc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d045      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2d      	ldr	r2, [pc, #180]	; (80035c8 <HAL_DMA_Abort_IT+0x3d0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d040      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a2b      	ldr	r2, [pc, #172]	; (80035cc <HAL_DMA_Abort_IT+0x3d4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d03b      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a2a      	ldr	r2, [pc, #168]	; (80035d0 <HAL_DMA_Abort_IT+0x3d8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d036      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a28      	ldr	r2, [pc, #160]	; (80035d4 <HAL_DMA_Abort_IT+0x3dc>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d031      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a27      	ldr	r2, [pc, #156]	; (80035d8 <HAL_DMA_Abort_IT+0x3e0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d02c      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a25      	ldr	r2, [pc, #148]	; (80035dc <HAL_DMA_Abort_IT+0x3e4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d027      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a24      	ldr	r2, [pc, #144]	; (80035e0 <HAL_DMA_Abort_IT+0x3e8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d022      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a22      	ldr	r2, [pc, #136]	; (80035e4 <HAL_DMA_Abort_IT+0x3ec>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d01d      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a21      	ldr	r2, [pc, #132]	; (80035e8 <HAL_DMA_Abort_IT+0x3f0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d018      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1f      	ldr	r2, [pc, #124]	; (80035ec <HAL_DMA_Abort_IT+0x3f4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1e      	ldr	r2, [pc, #120]	; (80035f0 <HAL_DMA_Abort_IT+0x3f8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00e      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1c      	ldr	r2, [pc, #112]	; (80035f4 <HAL_DMA_Abort_IT+0x3fc>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d009      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1b      	ldr	r2, [pc, #108]	; (80035f8 <HAL_DMA_Abort_IT+0x400>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d004      	beq.n	800359a <HAL_DMA_Abort_IT+0x3a2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a19      	ldr	r2, [pc, #100]	; (80035fc <HAL_DMA_Abort_IT+0x404>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d132      	bne.n	8003600 <HAL_DMA_Abort_IT+0x408>
 800359a:	2301      	movs	r3, #1
 800359c:	e031      	b.n	8003602 <HAL_DMA_Abort_IT+0x40a>
 800359e:	bf00      	nop
 80035a0:	40020010 	.word	0x40020010
 80035a4:	40020028 	.word	0x40020028
 80035a8:	40020040 	.word	0x40020040
 80035ac:	40020058 	.word	0x40020058
 80035b0:	40020070 	.word	0x40020070
 80035b4:	40020088 	.word	0x40020088
 80035b8:	400200a0 	.word	0x400200a0
 80035bc:	400200b8 	.word	0x400200b8
 80035c0:	40020410 	.word	0x40020410
 80035c4:	40020428 	.word	0x40020428
 80035c8:	40020440 	.word	0x40020440
 80035cc:	40020458 	.word	0x40020458
 80035d0:	40020470 	.word	0x40020470
 80035d4:	40020488 	.word	0x40020488
 80035d8:	400204a0 	.word	0x400204a0
 80035dc:	400204b8 	.word	0x400204b8
 80035e0:	58025408 	.word	0x58025408
 80035e4:	5802541c 	.word	0x5802541c
 80035e8:	58025430 	.word	0x58025430
 80035ec:	58025444 	.word	0x58025444
 80035f0:	58025458 	.word	0x58025458
 80035f4:	5802546c 	.word	0x5802546c
 80035f8:	58025480 	.word	0x58025480
 80035fc:	58025494 	.word	0x58025494
 8003600:	2300      	movs	r3, #0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d028      	beq.n	8003658 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003610:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003614:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003620:	f003 031f 	and.w	r3, r3, #31
 8003624:	2201      	movs	r2, #1
 8003626:	409a      	lsls	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003634:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00c      	beq.n	8003658 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800364c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003656:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop

08003684 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	; 0x28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003690:	4b67      	ldr	r3, [pc, #412]	; (8003830 <HAL_DMA_IRQHandler+0x1ac>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a67      	ldr	r2, [pc, #412]	; (8003834 <HAL_DMA_IRQHandler+0x1b0>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	0a9b      	lsrs	r3, r3, #10
 800369c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a5f      	ldr	r2, [pc, #380]	; (8003838 <HAL_DMA_IRQHandler+0x1b4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d04a      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a5d      	ldr	r2, [pc, #372]	; (800383c <HAL_DMA_IRQHandler+0x1b8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d045      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a5c      	ldr	r2, [pc, #368]	; (8003840 <HAL_DMA_IRQHandler+0x1bc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d040      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a5a      	ldr	r2, [pc, #360]	; (8003844 <HAL_DMA_IRQHandler+0x1c0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d03b      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a59      	ldr	r2, [pc, #356]	; (8003848 <HAL_DMA_IRQHandler+0x1c4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d036      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a57      	ldr	r2, [pc, #348]	; (800384c <HAL_DMA_IRQHandler+0x1c8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d031      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a56      	ldr	r2, [pc, #344]	; (8003850 <HAL_DMA_IRQHandler+0x1cc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d02c      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a54      	ldr	r2, [pc, #336]	; (8003854 <HAL_DMA_IRQHandler+0x1d0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d027      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a53      	ldr	r2, [pc, #332]	; (8003858 <HAL_DMA_IRQHandler+0x1d4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d022      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a51      	ldr	r2, [pc, #324]	; (800385c <HAL_DMA_IRQHandler+0x1d8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01d      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a50      	ldr	r2, [pc, #320]	; (8003860 <HAL_DMA_IRQHandler+0x1dc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d018      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a4e      	ldr	r2, [pc, #312]	; (8003864 <HAL_DMA_IRQHandler+0x1e0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d013      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a4d      	ldr	r2, [pc, #308]	; (8003868 <HAL_DMA_IRQHandler+0x1e4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00e      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a4b      	ldr	r2, [pc, #300]	; (800386c <HAL_DMA_IRQHandler+0x1e8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d009      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a4a      	ldr	r2, [pc, #296]	; (8003870 <HAL_DMA_IRQHandler+0x1ec>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d004      	beq.n	8003756 <HAL_DMA_IRQHandler+0xd2>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a48      	ldr	r2, [pc, #288]	; (8003874 <HAL_DMA_IRQHandler+0x1f0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_DMA_IRQHandler+0xd6>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <HAL_DMA_IRQHandler+0xd8>
 800375a:	2300      	movs	r3, #0
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 842b 	beq.w	8003fb8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	2208      	movs	r2, #8
 800376c:	409a      	lsls	r2, r3
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 80a2 	beq.w	80038bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a2e      	ldr	r2, [pc, #184]	; (8003838 <HAL_DMA_IRQHandler+0x1b4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d04a      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a2d      	ldr	r2, [pc, #180]	; (800383c <HAL_DMA_IRQHandler+0x1b8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d045      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a2b      	ldr	r2, [pc, #172]	; (8003840 <HAL_DMA_IRQHandler+0x1bc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d040      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a2a      	ldr	r2, [pc, #168]	; (8003844 <HAL_DMA_IRQHandler+0x1c0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d03b      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a28      	ldr	r2, [pc, #160]	; (8003848 <HAL_DMA_IRQHandler+0x1c4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d036      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a27      	ldr	r2, [pc, #156]	; (800384c <HAL_DMA_IRQHandler+0x1c8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d031      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a25      	ldr	r2, [pc, #148]	; (8003850 <HAL_DMA_IRQHandler+0x1cc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d02c      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a24      	ldr	r2, [pc, #144]	; (8003854 <HAL_DMA_IRQHandler+0x1d0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d027      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a22      	ldr	r2, [pc, #136]	; (8003858 <HAL_DMA_IRQHandler+0x1d4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d022      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a21      	ldr	r2, [pc, #132]	; (800385c <HAL_DMA_IRQHandler+0x1d8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d01d      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1f      	ldr	r2, [pc, #124]	; (8003860 <HAL_DMA_IRQHandler+0x1dc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d018      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a1e      	ldr	r2, [pc, #120]	; (8003864 <HAL_DMA_IRQHandler+0x1e0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d013      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a1c      	ldr	r2, [pc, #112]	; (8003868 <HAL_DMA_IRQHandler+0x1e4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00e      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a1b      	ldr	r2, [pc, #108]	; (800386c <HAL_DMA_IRQHandler+0x1e8>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d009      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a19      	ldr	r2, [pc, #100]	; (8003870 <HAL_DMA_IRQHandler+0x1ec>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d004      	beq.n	8003818 <HAL_DMA_IRQHandler+0x194>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a18      	ldr	r2, [pc, #96]	; (8003874 <HAL_DMA_IRQHandler+0x1f0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d12f      	bne.n	8003878 <HAL_DMA_IRQHandler+0x1f4>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	bf14      	ite	ne
 8003826:	2301      	movne	r3, #1
 8003828:	2300      	moveq	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	e02e      	b.n	800388c <HAL_DMA_IRQHandler+0x208>
 800382e:	bf00      	nop
 8003830:	24000028 	.word	0x24000028
 8003834:	1b4e81b5 	.word	0x1b4e81b5
 8003838:	40020010 	.word	0x40020010
 800383c:	40020028 	.word	0x40020028
 8003840:	40020040 	.word	0x40020040
 8003844:	40020058 	.word	0x40020058
 8003848:	40020070 	.word	0x40020070
 800384c:	40020088 	.word	0x40020088
 8003850:	400200a0 	.word	0x400200a0
 8003854:	400200b8 	.word	0x400200b8
 8003858:	40020410 	.word	0x40020410
 800385c:	40020428 	.word	0x40020428
 8003860:	40020440 	.word	0x40020440
 8003864:	40020458 	.word	0x40020458
 8003868:	40020470 	.word	0x40020470
 800386c:	40020488 	.word	0x40020488
 8003870:	400204a0 	.word	0x400204a0
 8003874:	400204b8 	.word	0x400204b8
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	bf14      	ite	ne
 8003886:	2301      	movne	r3, #1
 8003888:	2300      	moveq	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d015      	beq.n	80038bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0204 	bic.w	r2, r2, #4
 800389e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a4:	f003 031f 	and.w	r3, r3, #31
 80038a8:	2208      	movs	r2, #8
 80038aa:	409a      	lsls	r2, r3
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b4:	f043 0201 	orr.w	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d06e      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a69      	ldr	r2, [pc, #420]	; (8003a7c <HAL_DMA_IRQHandler+0x3f8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d04a      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a67      	ldr	r2, [pc, #412]	; (8003a80 <HAL_DMA_IRQHandler+0x3fc>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d045      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a66      	ldr	r2, [pc, #408]	; (8003a84 <HAL_DMA_IRQHandler+0x400>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d040      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a64      	ldr	r2, [pc, #400]	; (8003a88 <HAL_DMA_IRQHandler+0x404>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d03b      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a63      	ldr	r2, [pc, #396]	; (8003a8c <HAL_DMA_IRQHandler+0x408>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d036      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a61      	ldr	r2, [pc, #388]	; (8003a90 <HAL_DMA_IRQHandler+0x40c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d031      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a60      	ldr	r2, [pc, #384]	; (8003a94 <HAL_DMA_IRQHandler+0x410>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d02c      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a5e      	ldr	r2, [pc, #376]	; (8003a98 <HAL_DMA_IRQHandler+0x414>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d027      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a5d      	ldr	r2, [pc, #372]	; (8003a9c <HAL_DMA_IRQHandler+0x418>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d022      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a5b      	ldr	r2, [pc, #364]	; (8003aa0 <HAL_DMA_IRQHandler+0x41c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d01d      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a5a      	ldr	r2, [pc, #360]	; (8003aa4 <HAL_DMA_IRQHandler+0x420>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d018      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a58      	ldr	r2, [pc, #352]	; (8003aa8 <HAL_DMA_IRQHandler+0x424>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d013      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a57      	ldr	r2, [pc, #348]	; (8003aac <HAL_DMA_IRQHandler+0x428>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00e      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a55      	ldr	r2, [pc, #340]	; (8003ab0 <HAL_DMA_IRQHandler+0x42c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d009      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a54      	ldr	r2, [pc, #336]	; (8003ab4 <HAL_DMA_IRQHandler+0x430>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d004      	beq.n	8003972 <HAL_DMA_IRQHandler+0x2ee>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a52      	ldr	r2, [pc, #328]	; (8003ab8 <HAL_DMA_IRQHandler+0x434>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d10a      	bne.n	8003988 <HAL_DMA_IRQHandler+0x304>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397c:	2b00      	cmp	r3, #0
 800397e:	bf14      	ite	ne
 8003980:	2301      	movne	r3, #1
 8003982:	2300      	moveq	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	e003      	b.n	8003990 <HAL_DMA_IRQHandler+0x30c>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2300      	movs	r3, #0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00d      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	2201      	movs	r2, #1
 800399e:	409a      	lsls	r2, r3
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	f043 0202 	orr.w	r2, r3, #2
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	2204      	movs	r2, #4
 80039ba:	409a      	lsls	r2, r3
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	4013      	ands	r3, r2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 808f 	beq.w	8003ae4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a2c      	ldr	r2, [pc, #176]	; (8003a7c <HAL_DMA_IRQHandler+0x3f8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d04a      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a2a      	ldr	r2, [pc, #168]	; (8003a80 <HAL_DMA_IRQHandler+0x3fc>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d045      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a29      	ldr	r2, [pc, #164]	; (8003a84 <HAL_DMA_IRQHandler+0x400>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d040      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a27      	ldr	r2, [pc, #156]	; (8003a88 <HAL_DMA_IRQHandler+0x404>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d03b      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a26      	ldr	r2, [pc, #152]	; (8003a8c <HAL_DMA_IRQHandler+0x408>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d036      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a24      	ldr	r2, [pc, #144]	; (8003a90 <HAL_DMA_IRQHandler+0x40c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d031      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a23      	ldr	r2, [pc, #140]	; (8003a94 <HAL_DMA_IRQHandler+0x410>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d02c      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a21      	ldr	r2, [pc, #132]	; (8003a98 <HAL_DMA_IRQHandler+0x414>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d027      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a20      	ldr	r2, [pc, #128]	; (8003a9c <HAL_DMA_IRQHandler+0x418>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d022      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1e      	ldr	r2, [pc, #120]	; (8003aa0 <HAL_DMA_IRQHandler+0x41c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d01d      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1d      	ldr	r2, [pc, #116]	; (8003aa4 <HAL_DMA_IRQHandler+0x420>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d018      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1b      	ldr	r2, [pc, #108]	; (8003aa8 <HAL_DMA_IRQHandler+0x424>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1a      	ldr	r2, [pc, #104]	; (8003aac <HAL_DMA_IRQHandler+0x428>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00e      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a18      	ldr	r2, [pc, #96]	; (8003ab0 <HAL_DMA_IRQHandler+0x42c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d009      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a17      	ldr	r2, [pc, #92]	; (8003ab4 <HAL_DMA_IRQHandler+0x430>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x3e2>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a15      	ldr	r2, [pc, #84]	; (8003ab8 <HAL_DMA_IRQHandler+0x434>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d12a      	bne.n	8003abc <HAL_DMA_IRQHandler+0x438>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bf14      	ite	ne
 8003a74:	2301      	movne	r3, #1
 8003a76:	2300      	moveq	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	e023      	b.n	8003ac4 <HAL_DMA_IRQHandler+0x440>
 8003a7c:	40020010 	.word	0x40020010
 8003a80:	40020028 	.word	0x40020028
 8003a84:	40020040 	.word	0x40020040
 8003a88:	40020058 	.word	0x40020058
 8003a8c:	40020070 	.word	0x40020070
 8003a90:	40020088 	.word	0x40020088
 8003a94:	400200a0 	.word	0x400200a0
 8003a98:	400200b8 	.word	0x400200b8
 8003a9c:	40020410 	.word	0x40020410
 8003aa0:	40020428 	.word	0x40020428
 8003aa4:	40020440 	.word	0x40020440
 8003aa8:	40020458 	.word	0x40020458
 8003aac:	40020470 	.word	0x40020470
 8003ab0:	40020488 	.word	0x40020488
 8003ab4:	400204a0 	.word	0x400204a0
 8003ab8:	400204b8 	.word	0x400204b8
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00d      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003adc:	f043 0204 	orr.w	r2, r3, #4
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	f003 031f 	and.w	r3, r3, #31
 8003aec:	2210      	movs	r2, #16
 8003aee:	409a      	lsls	r2, r3
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80a6 	beq.w	8003c46 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a85      	ldr	r2, [pc, #532]	; (8003d14 <HAL_DMA_IRQHandler+0x690>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d04a      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a83      	ldr	r2, [pc, #524]	; (8003d18 <HAL_DMA_IRQHandler+0x694>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d045      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a82      	ldr	r2, [pc, #520]	; (8003d1c <HAL_DMA_IRQHandler+0x698>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d040      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a80      	ldr	r2, [pc, #512]	; (8003d20 <HAL_DMA_IRQHandler+0x69c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d03b      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a7f      	ldr	r2, [pc, #508]	; (8003d24 <HAL_DMA_IRQHandler+0x6a0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d036      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a7d      	ldr	r2, [pc, #500]	; (8003d28 <HAL_DMA_IRQHandler+0x6a4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d031      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a7c      	ldr	r2, [pc, #496]	; (8003d2c <HAL_DMA_IRQHandler+0x6a8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d02c      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a7a      	ldr	r2, [pc, #488]	; (8003d30 <HAL_DMA_IRQHandler+0x6ac>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d027      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a79      	ldr	r2, [pc, #484]	; (8003d34 <HAL_DMA_IRQHandler+0x6b0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d022      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a77      	ldr	r2, [pc, #476]	; (8003d38 <HAL_DMA_IRQHandler+0x6b4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d01d      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a76      	ldr	r2, [pc, #472]	; (8003d3c <HAL_DMA_IRQHandler+0x6b8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d018      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a74      	ldr	r2, [pc, #464]	; (8003d40 <HAL_DMA_IRQHandler+0x6bc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d013      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a73      	ldr	r2, [pc, #460]	; (8003d44 <HAL_DMA_IRQHandler+0x6c0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00e      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a71      	ldr	r2, [pc, #452]	; (8003d48 <HAL_DMA_IRQHandler+0x6c4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d009      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a70      	ldr	r2, [pc, #448]	; (8003d4c <HAL_DMA_IRQHandler+0x6c8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d004      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x516>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a6e      	ldr	r2, [pc, #440]	; (8003d50 <HAL_DMA_IRQHandler+0x6cc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d10a      	bne.n	8003bb0 <HAL_DMA_IRQHandler+0x52c>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf14      	ite	ne
 8003ba8:	2301      	movne	r3, #1
 8003baa:	2300      	moveq	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	e009      	b.n	8003bc4 <HAL_DMA_IRQHandler+0x540>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	bf14      	ite	ne
 8003bbe:	2301      	movne	r3, #1
 8003bc0:	2300      	moveq	r3, #0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d03e      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	2210      	movs	r2, #16
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d018      	beq.n	8003c18 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d108      	bne.n	8003c06 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d024      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	4798      	blx	r3
 8003c04:	e01f      	b.n	8003c46 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01b      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	4798      	blx	r3
 8003c16:	e016      	b.n	8003c46 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d107      	bne.n	8003c36 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0208 	bic.w	r2, r2, #8
 8003c34:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4a:	f003 031f 	and.w	r3, r3, #31
 8003c4e:	2220      	movs	r2, #32
 8003c50:	409a      	lsls	r2, r3
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 8110 	beq.w	8003e7c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a2c      	ldr	r2, [pc, #176]	; (8003d14 <HAL_DMA_IRQHandler+0x690>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d04a      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a2b      	ldr	r2, [pc, #172]	; (8003d18 <HAL_DMA_IRQHandler+0x694>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d045      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a29      	ldr	r2, [pc, #164]	; (8003d1c <HAL_DMA_IRQHandler+0x698>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d040      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a28      	ldr	r2, [pc, #160]	; (8003d20 <HAL_DMA_IRQHandler+0x69c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d03b      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a26      	ldr	r2, [pc, #152]	; (8003d24 <HAL_DMA_IRQHandler+0x6a0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d036      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a25      	ldr	r2, [pc, #148]	; (8003d28 <HAL_DMA_IRQHandler+0x6a4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d031      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a23      	ldr	r2, [pc, #140]	; (8003d2c <HAL_DMA_IRQHandler+0x6a8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d02c      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a22      	ldr	r2, [pc, #136]	; (8003d30 <HAL_DMA_IRQHandler+0x6ac>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d027      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a20      	ldr	r2, [pc, #128]	; (8003d34 <HAL_DMA_IRQHandler+0x6b0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d022      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1f      	ldr	r2, [pc, #124]	; (8003d38 <HAL_DMA_IRQHandler+0x6b4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d01d      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a1d      	ldr	r2, [pc, #116]	; (8003d3c <HAL_DMA_IRQHandler+0x6b8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d018      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1c      	ldr	r2, [pc, #112]	; (8003d40 <HAL_DMA_IRQHandler+0x6bc>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d013      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1a      	ldr	r2, [pc, #104]	; (8003d44 <HAL_DMA_IRQHandler+0x6c0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00e      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a19      	ldr	r2, [pc, #100]	; (8003d48 <HAL_DMA_IRQHandler+0x6c4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d009      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a17      	ldr	r2, [pc, #92]	; (8003d4c <HAL_DMA_IRQHandler+0x6c8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d004      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x678>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a16      	ldr	r2, [pc, #88]	; (8003d50 <HAL_DMA_IRQHandler+0x6cc>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d12b      	bne.n	8003d54 <HAL_DMA_IRQHandler+0x6d0>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0310 	and.w	r3, r3, #16
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	bf14      	ite	ne
 8003d0a:	2301      	movne	r3, #1
 8003d0c:	2300      	moveq	r3, #0
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	e02a      	b.n	8003d68 <HAL_DMA_IRQHandler+0x6e4>
 8003d12:	bf00      	nop
 8003d14:	40020010 	.word	0x40020010
 8003d18:	40020028 	.word	0x40020028
 8003d1c:	40020040 	.word	0x40020040
 8003d20:	40020058 	.word	0x40020058
 8003d24:	40020070 	.word	0x40020070
 8003d28:	40020088 	.word	0x40020088
 8003d2c:	400200a0 	.word	0x400200a0
 8003d30:	400200b8 	.word	0x400200b8
 8003d34:	40020410 	.word	0x40020410
 8003d38:	40020428 	.word	0x40020428
 8003d3c:	40020440 	.word	0x40020440
 8003d40:	40020458 	.word	0x40020458
 8003d44:	40020470 	.word	0x40020470
 8003d48:	40020488 	.word	0x40020488
 8003d4c:	400204a0 	.word	0x400204a0
 8003d50:	400204b8 	.word	0x400204b8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	bf14      	ite	ne
 8003d62:	2301      	movne	r3, #1
 8003d64:	2300      	moveq	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8087 	beq.w	8003e7c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	2220      	movs	r2, #32
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d139      	bne.n	8003dfe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0216 	bic.w	r2, r2, #22
 8003d98:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695a      	ldr	r2, [r3, #20]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003da8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d103      	bne.n	8003dba <HAL_DMA_IRQHandler+0x736>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d007      	beq.n	8003dca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0208 	bic.w	r2, r2, #8
 8003dc8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dce:	f003 031f 	and.w	r3, r3, #31
 8003dd2:	223f      	movs	r2, #63	; 0x3f
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 8382 	beq.w	80044f8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	4798      	blx	r3
          }
          return;
 8003dfc:	e37c      	b.n	80044f8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d018      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d108      	bne.n	8003e2c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d02c      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
 8003e2a:	e027      	b.n	8003e7c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d023      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	4798      	blx	r3
 8003e3c:	e01e      	b.n	8003e7c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10f      	bne.n	8003e6c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0210 	bic.w	r2, r2, #16
 8003e5a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 833e 	beq.w	8004502 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 8088 	beq.w	8003fa4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2204      	movs	r2, #4
 8003e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a89      	ldr	r2, [pc, #548]	; (80040c8 <HAL_DMA_IRQHandler+0xa44>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d04a      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a88      	ldr	r2, [pc, #544]	; (80040cc <HAL_DMA_IRQHandler+0xa48>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d045      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a86      	ldr	r2, [pc, #536]	; (80040d0 <HAL_DMA_IRQHandler+0xa4c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d040      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a85      	ldr	r2, [pc, #532]	; (80040d4 <HAL_DMA_IRQHandler+0xa50>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d03b      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a83      	ldr	r2, [pc, #524]	; (80040d8 <HAL_DMA_IRQHandler+0xa54>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d036      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a82      	ldr	r2, [pc, #520]	; (80040dc <HAL_DMA_IRQHandler+0xa58>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d031      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a80      	ldr	r2, [pc, #512]	; (80040e0 <HAL_DMA_IRQHandler+0xa5c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d02c      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a7f      	ldr	r2, [pc, #508]	; (80040e4 <HAL_DMA_IRQHandler+0xa60>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d027      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a7d      	ldr	r2, [pc, #500]	; (80040e8 <HAL_DMA_IRQHandler+0xa64>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d022      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a7c      	ldr	r2, [pc, #496]	; (80040ec <HAL_DMA_IRQHandler+0xa68>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d01d      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a7a      	ldr	r2, [pc, #488]	; (80040f0 <HAL_DMA_IRQHandler+0xa6c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d018      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a79      	ldr	r2, [pc, #484]	; (80040f4 <HAL_DMA_IRQHandler+0xa70>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d013      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a77      	ldr	r2, [pc, #476]	; (80040f8 <HAL_DMA_IRQHandler+0xa74>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00e      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a76      	ldr	r2, [pc, #472]	; (80040fc <HAL_DMA_IRQHandler+0xa78>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d009      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a74      	ldr	r2, [pc, #464]	; (8004100 <HAL_DMA_IRQHandler+0xa7c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d004      	beq.n	8003f3c <HAL_DMA_IRQHandler+0x8b8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a73      	ldr	r2, [pc, #460]	; (8004104 <HAL_DMA_IRQHandler+0xa80>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d108      	bne.n	8003f4e <HAL_DMA_IRQHandler+0x8ca>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	e007      	b.n	8003f5e <HAL_DMA_IRQHandler+0x8da>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0201 	bic.w	r2, r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3301      	adds	r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d307      	bcc.n	8003f7a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f2      	bne.n	8003f5e <HAL_DMA_IRQHandler+0x8da>
 8003f78:	e000      	b.n	8003f7c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003f7a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d004      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003f92:	e003      	b.n	8003f9c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 82aa 	beq.w	8004502 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	4798      	blx	r3
 8003fb6:	e2a4      	b.n	8004502 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a52      	ldr	r2, [pc, #328]	; (8004108 <HAL_DMA_IRQHandler+0xa84>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d04a      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a51      	ldr	r2, [pc, #324]	; (800410c <HAL_DMA_IRQHandler+0xa88>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d045      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a4f      	ldr	r2, [pc, #316]	; (8004110 <HAL_DMA_IRQHandler+0xa8c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d040      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a4e      	ldr	r2, [pc, #312]	; (8004114 <HAL_DMA_IRQHandler+0xa90>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d03b      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a4c      	ldr	r2, [pc, #304]	; (8004118 <HAL_DMA_IRQHandler+0xa94>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d036      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a4b      	ldr	r2, [pc, #300]	; (800411c <HAL_DMA_IRQHandler+0xa98>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d031      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a49      	ldr	r2, [pc, #292]	; (8004120 <HAL_DMA_IRQHandler+0xa9c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d02c      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a48      	ldr	r2, [pc, #288]	; (8004124 <HAL_DMA_IRQHandler+0xaa0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d027      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a46      	ldr	r2, [pc, #280]	; (8004128 <HAL_DMA_IRQHandler+0xaa4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d022      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a45      	ldr	r2, [pc, #276]	; (800412c <HAL_DMA_IRQHandler+0xaa8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d01d      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a43      	ldr	r2, [pc, #268]	; (8004130 <HAL_DMA_IRQHandler+0xaac>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d018      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a42      	ldr	r2, [pc, #264]	; (8004134 <HAL_DMA_IRQHandler+0xab0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d013      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a40      	ldr	r2, [pc, #256]	; (8004138 <HAL_DMA_IRQHandler+0xab4>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00e      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a3f      	ldr	r2, [pc, #252]	; (800413c <HAL_DMA_IRQHandler+0xab8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d009      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a3d      	ldr	r2, [pc, #244]	; (8004140 <HAL_DMA_IRQHandler+0xabc>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d004      	beq.n	8004058 <HAL_DMA_IRQHandler+0x9d4>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a3c      	ldr	r2, [pc, #240]	; (8004144 <HAL_DMA_IRQHandler+0xac0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d101      	bne.n	800405c <HAL_DMA_IRQHandler+0x9d8>
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <HAL_DMA_IRQHandler+0x9da>
 800405c:	2300      	movs	r3, #0
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 824f 	beq.w	8004502 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	2204      	movs	r2, #4
 8004076:	409a      	lsls	r2, r3
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80dd 	beq.w	800423c <HAL_DMA_IRQHandler+0xbb8>
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80d7 	beq.w	800423c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004092:	f003 031f 	and.w	r3, r3, #31
 8004096:	2204      	movs	r2, #4
 8004098:	409a      	lsls	r2, r3
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d059      	beq.n	800415c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d14a      	bne.n	8004148 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 8220 	beq.w	80044fc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040c4:	e21a      	b.n	80044fc <HAL_DMA_IRQHandler+0xe78>
 80040c6:	bf00      	nop
 80040c8:	40020010 	.word	0x40020010
 80040cc:	40020028 	.word	0x40020028
 80040d0:	40020040 	.word	0x40020040
 80040d4:	40020058 	.word	0x40020058
 80040d8:	40020070 	.word	0x40020070
 80040dc:	40020088 	.word	0x40020088
 80040e0:	400200a0 	.word	0x400200a0
 80040e4:	400200b8 	.word	0x400200b8
 80040e8:	40020410 	.word	0x40020410
 80040ec:	40020428 	.word	0x40020428
 80040f0:	40020440 	.word	0x40020440
 80040f4:	40020458 	.word	0x40020458
 80040f8:	40020470 	.word	0x40020470
 80040fc:	40020488 	.word	0x40020488
 8004100:	400204a0 	.word	0x400204a0
 8004104:	400204b8 	.word	0x400204b8
 8004108:	48022c08 	.word	0x48022c08
 800410c:	48022c1c 	.word	0x48022c1c
 8004110:	48022c30 	.word	0x48022c30
 8004114:	48022c44 	.word	0x48022c44
 8004118:	48022c58 	.word	0x48022c58
 800411c:	48022c6c 	.word	0x48022c6c
 8004120:	48022c80 	.word	0x48022c80
 8004124:	48022c94 	.word	0x48022c94
 8004128:	58025408 	.word	0x58025408
 800412c:	5802541c 	.word	0x5802541c
 8004130:	58025430 	.word	0x58025430
 8004134:	58025444 	.word	0x58025444
 8004138:	58025458 	.word	0x58025458
 800413c:	5802546c 	.word	0x5802546c
 8004140:	58025480 	.word	0x58025480
 8004144:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 81d5 	beq.w	80044fc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800415a:	e1cf      	b.n	80044fc <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	2b00      	cmp	r3, #0
 8004164:	d160      	bne.n	8004228 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a7f      	ldr	r2, [pc, #508]	; (8004368 <HAL_DMA_IRQHandler+0xce4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d04a      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a7d      	ldr	r2, [pc, #500]	; (800436c <HAL_DMA_IRQHandler+0xce8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d045      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a7c      	ldr	r2, [pc, #496]	; (8004370 <HAL_DMA_IRQHandler+0xcec>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d040      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a7a      	ldr	r2, [pc, #488]	; (8004374 <HAL_DMA_IRQHandler+0xcf0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d03b      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a79      	ldr	r2, [pc, #484]	; (8004378 <HAL_DMA_IRQHandler+0xcf4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d036      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a77      	ldr	r2, [pc, #476]	; (800437c <HAL_DMA_IRQHandler+0xcf8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d031      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a76      	ldr	r2, [pc, #472]	; (8004380 <HAL_DMA_IRQHandler+0xcfc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d02c      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a74      	ldr	r2, [pc, #464]	; (8004384 <HAL_DMA_IRQHandler+0xd00>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d027      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a73      	ldr	r2, [pc, #460]	; (8004388 <HAL_DMA_IRQHandler+0xd04>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d022      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a71      	ldr	r2, [pc, #452]	; (800438c <HAL_DMA_IRQHandler+0xd08>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d01d      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a70      	ldr	r2, [pc, #448]	; (8004390 <HAL_DMA_IRQHandler+0xd0c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d018      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a6e      	ldr	r2, [pc, #440]	; (8004394 <HAL_DMA_IRQHandler+0xd10>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a6d      	ldr	r2, [pc, #436]	; (8004398 <HAL_DMA_IRQHandler+0xd14>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00e      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a6b      	ldr	r2, [pc, #428]	; (800439c <HAL_DMA_IRQHandler+0xd18>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d009      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a6a      	ldr	r2, [pc, #424]	; (80043a0 <HAL_DMA_IRQHandler+0xd1c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d004      	beq.n	8004206 <HAL_DMA_IRQHandler+0xb82>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a68      	ldr	r2, [pc, #416]	; (80043a4 <HAL_DMA_IRQHandler+0xd20>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d108      	bne.n	8004218 <HAL_DMA_IRQHandler+0xb94>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0208 	bic.w	r2, r2, #8
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e007      	b.n	8004228 <HAL_DMA_IRQHandler+0xba4>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0204 	bic.w	r2, r2, #4
 8004226:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8165 	beq.w	80044fc <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800423a:	e15f      	b.n	80044fc <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2202      	movs	r2, #2
 8004246:	409a      	lsls	r2, r3
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80c5 	beq.w	80043dc <HAL_DMA_IRQHandler+0xd58>
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80bf 	beq.w	80043dc <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	f003 031f 	and.w	r3, r3, #31
 8004266:	2202      	movs	r2, #2
 8004268:	409a      	lsls	r2, r3
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d018      	beq.n	80042aa <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 813a 	beq.w	8004500 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004294:	e134      	b.n	8004500 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 8130 	beq.w	8004500 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042a8:	e12a      	b.n	8004500 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f040 8089 	bne.w	80043c8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a2b      	ldr	r2, [pc, #172]	; (8004368 <HAL_DMA_IRQHandler+0xce4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d04a      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a29      	ldr	r2, [pc, #164]	; (800436c <HAL_DMA_IRQHandler+0xce8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d045      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a28      	ldr	r2, [pc, #160]	; (8004370 <HAL_DMA_IRQHandler+0xcec>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d040      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a26      	ldr	r2, [pc, #152]	; (8004374 <HAL_DMA_IRQHandler+0xcf0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d03b      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a25      	ldr	r2, [pc, #148]	; (8004378 <HAL_DMA_IRQHandler+0xcf4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d036      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a23      	ldr	r2, [pc, #140]	; (800437c <HAL_DMA_IRQHandler+0xcf8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d031      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a22      	ldr	r2, [pc, #136]	; (8004380 <HAL_DMA_IRQHandler+0xcfc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d02c      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a20      	ldr	r2, [pc, #128]	; (8004384 <HAL_DMA_IRQHandler+0xd00>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d027      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a1f      	ldr	r2, [pc, #124]	; (8004388 <HAL_DMA_IRQHandler+0xd04>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d022      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a1d      	ldr	r2, [pc, #116]	; (800438c <HAL_DMA_IRQHandler+0xd08>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01d      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a1c      	ldr	r2, [pc, #112]	; (8004390 <HAL_DMA_IRQHandler+0xd0c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d018      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1a      	ldr	r2, [pc, #104]	; (8004394 <HAL_DMA_IRQHandler+0xd10>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d013      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a19      	ldr	r2, [pc, #100]	; (8004398 <HAL_DMA_IRQHandler+0xd14>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00e      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a17      	ldr	r2, [pc, #92]	; (800439c <HAL_DMA_IRQHandler+0xd18>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d009      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a16      	ldr	r2, [pc, #88]	; (80043a0 <HAL_DMA_IRQHandler+0xd1c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d004      	beq.n	8004356 <HAL_DMA_IRQHandler+0xcd2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a14      	ldr	r2, [pc, #80]	; (80043a4 <HAL_DMA_IRQHandler+0xd20>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d128      	bne.n	80043a8 <HAL_DMA_IRQHandler+0xd24>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0214 	bic.w	r2, r2, #20
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	e027      	b.n	80043b8 <HAL_DMA_IRQHandler+0xd34>
 8004368:	40020010 	.word	0x40020010
 800436c:	40020028 	.word	0x40020028
 8004370:	40020040 	.word	0x40020040
 8004374:	40020058 	.word	0x40020058
 8004378:	40020070 	.word	0x40020070
 800437c:	40020088 	.word	0x40020088
 8004380:	400200a0 	.word	0x400200a0
 8004384:	400200b8 	.word	0x400200b8
 8004388:	40020410 	.word	0x40020410
 800438c:	40020428 	.word	0x40020428
 8004390:	40020440 	.word	0x40020440
 8004394:	40020458 	.word	0x40020458
 8004398:	40020470 	.word	0x40020470
 800439c:	40020488 	.word	0x40020488
 80043a0:	400204a0 	.word	0x400204a0
 80043a4:	400204b8 	.word	0x400204b8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 020a 	bic.w	r2, r2, #10
 80043b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8097 	beq.w	8004500 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043da:	e091      	b.n	8004500 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e0:	f003 031f 	and.w	r3, r3, #31
 80043e4:	2208      	movs	r2, #8
 80043e6:	409a      	lsls	r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8088 	beq.w	8004502 <HAL_DMA_IRQHandler+0xe7e>
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 8082 	beq.w	8004502 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a41      	ldr	r2, [pc, #260]	; (8004508 <HAL_DMA_IRQHandler+0xe84>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d04a      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a3f      	ldr	r2, [pc, #252]	; (800450c <HAL_DMA_IRQHandler+0xe88>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d045      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a3e      	ldr	r2, [pc, #248]	; (8004510 <HAL_DMA_IRQHandler+0xe8c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d040      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a3c      	ldr	r2, [pc, #240]	; (8004514 <HAL_DMA_IRQHandler+0xe90>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d03b      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a3b      	ldr	r2, [pc, #236]	; (8004518 <HAL_DMA_IRQHandler+0xe94>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d036      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a39      	ldr	r2, [pc, #228]	; (800451c <HAL_DMA_IRQHandler+0xe98>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d031      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a38      	ldr	r2, [pc, #224]	; (8004520 <HAL_DMA_IRQHandler+0xe9c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d02c      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a36      	ldr	r2, [pc, #216]	; (8004524 <HAL_DMA_IRQHandler+0xea0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d027      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a35      	ldr	r2, [pc, #212]	; (8004528 <HAL_DMA_IRQHandler+0xea4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d022      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a33      	ldr	r2, [pc, #204]	; (800452c <HAL_DMA_IRQHandler+0xea8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d01d      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a32      	ldr	r2, [pc, #200]	; (8004530 <HAL_DMA_IRQHandler+0xeac>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d018      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a30      	ldr	r2, [pc, #192]	; (8004534 <HAL_DMA_IRQHandler+0xeb0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d013      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a2f      	ldr	r2, [pc, #188]	; (8004538 <HAL_DMA_IRQHandler+0xeb4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00e      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a2d      	ldr	r2, [pc, #180]	; (800453c <HAL_DMA_IRQHandler+0xeb8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d009      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a2c      	ldr	r2, [pc, #176]	; (8004540 <HAL_DMA_IRQHandler+0xebc>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d004      	beq.n	800449e <HAL_DMA_IRQHandler+0xe1a>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a2a      	ldr	r2, [pc, #168]	; (8004544 <HAL_DMA_IRQHandler+0xec0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d108      	bne.n	80044b0 <HAL_DMA_IRQHandler+0xe2c>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 021c 	bic.w	r2, r2, #28
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	e007      	b.n	80044c0 <HAL_DMA_IRQHandler+0xe3c>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 020e 	bic.w	r2, r2, #14
 80044be:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	2201      	movs	r2, #1
 80044ca:	409a      	lsls	r2, r3
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d009      	beq.n	8004502 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	4798      	blx	r3
 80044f6:	e004      	b.n	8004502 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80044f8:	bf00      	nop
 80044fa:	e002      	b.n	8004502 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044fc:	bf00      	nop
 80044fe:	e000      	b.n	8004502 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004500:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004502:	3728      	adds	r7, #40	; 0x28
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40020010 	.word	0x40020010
 800450c:	40020028 	.word	0x40020028
 8004510:	40020040 	.word	0x40020040
 8004514:	40020058 	.word	0x40020058
 8004518:	40020070 	.word	0x40020070
 800451c:	40020088 	.word	0x40020088
 8004520:	400200a0 	.word	0x400200a0
 8004524:	400200b8 	.word	0x400200b8
 8004528:	40020410 	.word	0x40020410
 800452c:	40020428 	.word	0x40020428
 8004530:	40020440 	.word	0x40020440
 8004534:	40020458 	.word	0x40020458
 8004538:	40020470 	.word	0x40020470
 800453c:	40020488 	.word	0x40020488
 8004540:	400204a0 	.word	0x400204a0
 8004544:	400204b8 	.word	0x400204b8

08004548 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a42      	ldr	r2, [pc, #264]	; (8004660 <DMA_CalcBaseAndBitshift+0x118>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d04a      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a41      	ldr	r2, [pc, #260]	; (8004664 <DMA_CalcBaseAndBitshift+0x11c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d045      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a3f      	ldr	r2, [pc, #252]	; (8004668 <DMA_CalcBaseAndBitshift+0x120>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d040      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a3e      	ldr	r2, [pc, #248]	; (800466c <DMA_CalcBaseAndBitshift+0x124>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d03b      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a3c      	ldr	r2, [pc, #240]	; (8004670 <DMA_CalcBaseAndBitshift+0x128>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d036      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a3b      	ldr	r2, [pc, #236]	; (8004674 <DMA_CalcBaseAndBitshift+0x12c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d031      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a39      	ldr	r2, [pc, #228]	; (8004678 <DMA_CalcBaseAndBitshift+0x130>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d02c      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a38      	ldr	r2, [pc, #224]	; (800467c <DMA_CalcBaseAndBitshift+0x134>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d027      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a36      	ldr	r2, [pc, #216]	; (8004680 <DMA_CalcBaseAndBitshift+0x138>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d022      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a35      	ldr	r2, [pc, #212]	; (8004684 <DMA_CalcBaseAndBitshift+0x13c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d01d      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a33      	ldr	r2, [pc, #204]	; (8004688 <DMA_CalcBaseAndBitshift+0x140>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d018      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a32      	ldr	r2, [pc, #200]	; (800468c <DMA_CalcBaseAndBitshift+0x144>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d013      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a30      	ldr	r2, [pc, #192]	; (8004690 <DMA_CalcBaseAndBitshift+0x148>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00e      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a2f      	ldr	r2, [pc, #188]	; (8004694 <DMA_CalcBaseAndBitshift+0x14c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d009      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a2d      	ldr	r2, [pc, #180]	; (8004698 <DMA_CalcBaseAndBitshift+0x150>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d004      	beq.n	80045f0 <DMA_CalcBaseAndBitshift+0xa8>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a2c      	ldr	r2, [pc, #176]	; (800469c <DMA_CalcBaseAndBitshift+0x154>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d101      	bne.n	80045f4 <DMA_CalcBaseAndBitshift+0xac>
 80045f0:	2301      	movs	r3, #1
 80045f2:	e000      	b.n	80045f6 <DMA_CalcBaseAndBitshift+0xae>
 80045f4:	2300      	movs	r3, #0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d024      	beq.n	8004644 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	3b10      	subs	r3, #16
 8004602:	4a27      	ldr	r2, [pc, #156]	; (80046a0 <DMA_CalcBaseAndBitshift+0x158>)
 8004604:	fba2 2303 	umull	r2, r3, r2, r3
 8004608:	091b      	lsrs	r3, r3, #4
 800460a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	4a24      	ldr	r2, [pc, #144]	; (80046a4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004614:	5cd3      	ldrb	r3, [r2, r3]
 8004616:	461a      	mov	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b03      	cmp	r3, #3
 8004620:	d908      	bls.n	8004634 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	4b1f      	ldr	r3, [pc, #124]	; (80046a8 <DMA_CalcBaseAndBitshift+0x160>)
 800462a:	4013      	ands	r3, r2
 800462c:	1d1a      	adds	r2, r3, #4
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	659a      	str	r2, [r3, #88]	; 0x58
 8004632:	e00d      	b.n	8004650 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	4b1b      	ldr	r3, [pc, #108]	; (80046a8 <DMA_CalcBaseAndBitshift+0x160>)
 800463c:	4013      	ands	r3, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6593      	str	r3, [r2, #88]	; 0x58
 8004642:	e005      	b.n	8004650 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004654:	4618      	mov	r0, r3
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	40020010 	.word	0x40020010
 8004664:	40020028 	.word	0x40020028
 8004668:	40020040 	.word	0x40020040
 800466c:	40020058 	.word	0x40020058
 8004670:	40020070 	.word	0x40020070
 8004674:	40020088 	.word	0x40020088
 8004678:	400200a0 	.word	0x400200a0
 800467c:	400200b8 	.word	0x400200b8
 8004680:	40020410 	.word	0x40020410
 8004684:	40020428 	.word	0x40020428
 8004688:	40020440 	.word	0x40020440
 800468c:	40020458 	.word	0x40020458
 8004690:	40020470 	.word	0x40020470
 8004694:	40020488 	.word	0x40020488
 8004698:	400204a0 	.word	0x400204a0
 800469c:	400204b8 	.word	0x400204b8
 80046a0:	aaaaaaab 	.word	0xaaaaaaab
 80046a4:	0800d4fc 	.word	0x0800d4fc
 80046a8:	fffffc00 	.word	0xfffffc00

080046ac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d120      	bne.n	8004702 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d858      	bhi.n	800477a <DMA_CheckFifoParam+0xce>
 80046c8:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <DMA_CheckFifoParam+0x24>)
 80046ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ce:	bf00      	nop
 80046d0:	080046e1 	.word	0x080046e1
 80046d4:	080046f3 	.word	0x080046f3
 80046d8:	080046e1 	.word	0x080046e1
 80046dc:	0800477b 	.word	0x0800477b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d048      	beq.n	800477e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046f0:	e045      	b.n	800477e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046fa:	d142      	bne.n	8004782 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004700:	e03f      	b.n	8004782 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800470a:	d123      	bne.n	8004754 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	2b03      	cmp	r3, #3
 8004712:	d838      	bhi.n	8004786 <DMA_CheckFifoParam+0xda>
 8004714:	a201      	add	r2, pc, #4	; (adr r2, 800471c <DMA_CheckFifoParam+0x70>)
 8004716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471a:	bf00      	nop
 800471c:	0800472d 	.word	0x0800472d
 8004720:	08004733 	.word	0x08004733
 8004724:	0800472d 	.word	0x0800472d
 8004728:	08004745 	.word	0x08004745
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
        break;
 8004730:	e030      	b.n	8004794 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d025      	beq.n	800478a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004742:	e022      	b.n	800478a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800474c:	d11f      	bne.n	800478e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004752:	e01c      	b.n	800478e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	2b02      	cmp	r3, #2
 800475a:	d902      	bls.n	8004762 <DMA_CheckFifoParam+0xb6>
 800475c:	2b03      	cmp	r3, #3
 800475e:	d003      	beq.n	8004768 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004760:	e018      	b.n	8004794 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	73fb      	strb	r3, [r7, #15]
        break;
 8004766:	e015      	b.n	8004794 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00e      	beq.n	8004792 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	73fb      	strb	r3, [r7, #15]
    break;
 8004778:	e00b      	b.n	8004792 <DMA_CheckFifoParam+0xe6>
        break;
 800477a:	bf00      	nop
 800477c:	e00a      	b.n	8004794 <DMA_CheckFifoParam+0xe8>
        break;
 800477e:	bf00      	nop
 8004780:	e008      	b.n	8004794 <DMA_CheckFifoParam+0xe8>
        break;
 8004782:	bf00      	nop
 8004784:	e006      	b.n	8004794 <DMA_CheckFifoParam+0xe8>
        break;
 8004786:	bf00      	nop
 8004788:	e004      	b.n	8004794 <DMA_CheckFifoParam+0xe8>
        break;
 800478a:	bf00      	nop
 800478c:	e002      	b.n	8004794 <DMA_CheckFifoParam+0xe8>
        break;
 800478e:	bf00      	nop
 8004790:	e000      	b.n	8004794 <DMA_CheckFifoParam+0xe8>
    break;
 8004792:	bf00      	nop
    }
  }

  return status;
 8004794:	7bfb      	ldrb	r3, [r7, #15]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop

080047a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a38      	ldr	r2, [pc, #224]	; (8004898 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d022      	beq.n	8004802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a36      	ldr	r2, [pc, #216]	; (800489c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d01d      	beq.n	8004802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a35      	ldr	r2, [pc, #212]	; (80048a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d018      	beq.n	8004802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a33      	ldr	r2, [pc, #204]	; (80048a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a32      	ldr	r2, [pc, #200]	; (80048a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00e      	beq.n	8004802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a30      	ldr	r2, [pc, #192]	; (80048ac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d009      	beq.n	8004802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a2f      	ldr	r2, [pc, #188]	; (80048b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d004      	beq.n	8004802 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a2d      	ldr	r2, [pc, #180]	; (80048b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d101      	bne.n	8004806 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004806:	2300      	movs	r3, #0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01a      	beq.n	8004842 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	b2db      	uxtb	r3, r3
 8004812:	3b08      	subs	r3, #8
 8004814:	4a28      	ldr	r2, [pc, #160]	; (80048b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	091b      	lsrs	r3, r3, #4
 800481c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4b26      	ldr	r3, [pc, #152]	; (80048bc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	461a      	mov	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a24      	ldr	r2, [pc, #144]	; (80048c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004830:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	2201      	movs	r2, #1
 800483a:	409a      	lsls	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004840:	e024      	b.n	800488c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	b2db      	uxtb	r3, r3
 8004848:	3b10      	subs	r3, #16
 800484a:	4a1e      	ldr	r2, [pc, #120]	; (80048c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4a1c      	ldr	r2, [pc, #112]	; (80048c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d806      	bhi.n	800486a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4a1b      	ldr	r2, [pc, #108]	; (80048cc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d902      	bls.n	800486a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3308      	adds	r3, #8
 8004868:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	4b18      	ldr	r3, [pc, #96]	; (80048d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	461a      	mov	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a16      	ldr	r2, [pc, #88]	; (80048d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800487c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f003 031f 	and.w	r3, r3, #31
 8004884:	2201      	movs	r2, #1
 8004886:	409a      	lsls	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800488c:	bf00      	nop
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	58025408 	.word	0x58025408
 800489c:	5802541c 	.word	0x5802541c
 80048a0:	58025430 	.word	0x58025430
 80048a4:	58025444 	.word	0x58025444
 80048a8:	58025458 	.word	0x58025458
 80048ac:	5802546c 	.word	0x5802546c
 80048b0:	58025480 	.word	0x58025480
 80048b4:	58025494 	.word	0x58025494
 80048b8:	cccccccd 	.word	0xcccccccd
 80048bc:	16009600 	.word	0x16009600
 80048c0:	58025880 	.word	0x58025880
 80048c4:	aaaaaaab 	.word	0xaaaaaaab
 80048c8:	400204b8 	.word	0x400204b8
 80048cc:	4002040f 	.word	0x4002040f
 80048d0:	10008200 	.word	0x10008200
 80048d4:	40020880 	.word	0x40020880

080048d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d04a      	beq.n	8004984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d847      	bhi.n	8004984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a25      	ldr	r2, [pc, #148]	; (8004990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d022      	beq.n	8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a24      	ldr	r2, [pc, #144]	; (8004994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d01d      	beq.n	8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a22      	ldr	r2, [pc, #136]	; (8004998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d018      	beq.n	8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a21      	ldr	r2, [pc, #132]	; (800499c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d013      	beq.n	8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a1f      	ldr	r2, [pc, #124]	; (80049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00e      	beq.n	8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a1e      	ldr	r2, [pc, #120]	; (80049a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d009      	beq.n	8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a1c      	ldr	r2, [pc, #112]	; (80049a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d004      	beq.n	8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a1b      	ldr	r2, [pc, #108]	; (80049ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d101      	bne.n	8004948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004948:	2300      	movs	r3, #0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4b17      	ldr	r3, [pc, #92]	; (80049b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004952:	4413      	add	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	461a      	mov	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a15      	ldr	r2, [pc, #84]	; (80049b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004960:	671a      	str	r2, [r3, #112]	; 0x70
 8004962:	e009      	b.n	8004978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4b14      	ldr	r3, [pc, #80]	; (80049b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004968:	4413      	add	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	461a      	mov	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a11      	ldr	r2, [pc, #68]	; (80049bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004976:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3b01      	subs	r3, #1
 800497c:	2201      	movs	r2, #1
 800497e:	409a      	lsls	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004984:	bf00      	nop
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	58025408 	.word	0x58025408
 8004994:	5802541c 	.word	0x5802541c
 8004998:	58025430 	.word	0x58025430
 800499c:	58025444 	.word	0x58025444
 80049a0:	58025458 	.word	0x58025458
 80049a4:	5802546c 	.word	0x5802546c
 80049a8:	58025480 	.word	0x58025480
 80049ac:	58025494 	.word	0x58025494
 80049b0:	1600963f 	.word	0x1600963f
 80049b4:	58025940 	.word	0x58025940
 80049b8:	1000823f 	.word	0x1000823f
 80049bc:	40020940 	.word	0x40020940

080049c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b089      	sub	sp, #36	; 0x24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80049ce:	4b89      	ldr	r3, [pc, #548]	; (8004bf4 <HAL_GPIO_Init+0x234>)
 80049d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80049d2:	e194      	b.n	8004cfe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	2101      	movs	r1, #1
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	fa01 f303 	lsl.w	r3, r1, r3
 80049e0:	4013      	ands	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 8186 	beq.w	8004cf8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f003 0303 	and.w	r3, r3, #3
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d005      	beq.n	8004a04 <HAL_GPIO_Init+0x44>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f003 0303 	and.w	r3, r3, #3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d130      	bne.n	8004a66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	2203      	movs	r2, #3
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	43db      	mvns	r3, r3
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	43db      	mvns	r3, r3
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4013      	ands	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	091b      	lsrs	r3, r3, #4
 8004a50:	f003 0201 	and.w	r2, r3, #1
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d017      	beq.n	8004aa2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	2203      	movs	r2, #3
 8004a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a82:	43db      	mvns	r3, r3
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	4013      	ands	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d123      	bne.n	8004af6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	08da      	lsrs	r2, r3, #3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3208      	adds	r2, #8
 8004ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	220f      	movs	r2, #15
 8004ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aca:	43db      	mvns	r3, r3
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	691a      	ldr	r2, [r3, #16]
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	08da      	lsrs	r2, r3, #3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3208      	adds	r2, #8
 8004af0:	69b9      	ldr	r1, [r7, #24]
 8004af2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	2203      	movs	r2, #3
 8004b02:	fa02 f303 	lsl.w	r3, r2, r3
 8004b06:	43db      	mvns	r3, r3
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f003 0203 	and.w	r2, r3, #3
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 80e0 	beq.w	8004cf8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b38:	4b2f      	ldr	r3, [pc, #188]	; (8004bf8 <HAL_GPIO_Init+0x238>)
 8004b3a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004b3e:	4a2e      	ldr	r2, [pc, #184]	; (8004bf8 <HAL_GPIO_Init+0x238>)
 8004b40:	f043 0302 	orr.w	r3, r3, #2
 8004b44:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8004b48:	4b2b      	ldr	r3, [pc, #172]	; (8004bf8 <HAL_GPIO_Init+0x238>)
 8004b4a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b56:	4a29      	ldr	r2, [pc, #164]	; (8004bfc <HAL_GPIO_Init+0x23c>)
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	089b      	lsrs	r3, r3, #2
 8004b5c:	3302      	adds	r3, #2
 8004b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	220f      	movs	r2, #15
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	43db      	mvns	r3, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	4013      	ands	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a20      	ldr	r2, [pc, #128]	; (8004c00 <HAL_GPIO_Init+0x240>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d052      	beq.n	8004c28 <HAL_GPIO_Init+0x268>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a1f      	ldr	r2, [pc, #124]	; (8004c04 <HAL_GPIO_Init+0x244>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d031      	beq.n	8004bee <HAL_GPIO_Init+0x22e>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a1e      	ldr	r2, [pc, #120]	; (8004c08 <HAL_GPIO_Init+0x248>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d02b      	beq.n	8004bea <HAL_GPIO_Init+0x22a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a1d      	ldr	r2, [pc, #116]	; (8004c0c <HAL_GPIO_Init+0x24c>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d025      	beq.n	8004be6 <HAL_GPIO_Init+0x226>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a1c      	ldr	r2, [pc, #112]	; (8004c10 <HAL_GPIO_Init+0x250>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d01f      	beq.n	8004be2 <HAL_GPIO_Init+0x222>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a1b      	ldr	r2, [pc, #108]	; (8004c14 <HAL_GPIO_Init+0x254>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d019      	beq.n	8004bde <HAL_GPIO_Init+0x21e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a1a      	ldr	r2, [pc, #104]	; (8004c18 <HAL_GPIO_Init+0x258>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d013      	beq.n	8004bda <HAL_GPIO_Init+0x21a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a19      	ldr	r2, [pc, #100]	; (8004c1c <HAL_GPIO_Init+0x25c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00d      	beq.n	8004bd6 <HAL_GPIO_Init+0x216>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a18      	ldr	r2, [pc, #96]	; (8004c20 <HAL_GPIO_Init+0x260>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d007      	beq.n	8004bd2 <HAL_GPIO_Init+0x212>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a17      	ldr	r2, [pc, #92]	; (8004c24 <HAL_GPIO_Init+0x264>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d101      	bne.n	8004bce <HAL_GPIO_Init+0x20e>
 8004bca:	2309      	movs	r3, #9
 8004bcc:	e02d      	b.n	8004c2a <HAL_GPIO_Init+0x26a>
 8004bce:	230a      	movs	r3, #10
 8004bd0:	e02b      	b.n	8004c2a <HAL_GPIO_Init+0x26a>
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	e029      	b.n	8004c2a <HAL_GPIO_Init+0x26a>
 8004bd6:	2307      	movs	r3, #7
 8004bd8:	e027      	b.n	8004c2a <HAL_GPIO_Init+0x26a>
 8004bda:	2306      	movs	r3, #6
 8004bdc:	e025      	b.n	8004c2a <HAL_GPIO_Init+0x26a>
 8004bde:	2305      	movs	r3, #5
 8004be0:	e023      	b.n	8004c2a <HAL_GPIO_Init+0x26a>
 8004be2:	2304      	movs	r3, #4
 8004be4:	e021      	b.n	8004c2a <HAL_GPIO_Init+0x26a>
 8004be6:	2303      	movs	r3, #3
 8004be8:	e01f      	b.n	8004c2a <HAL_GPIO_Init+0x26a>
 8004bea:	2302      	movs	r3, #2
 8004bec:	e01d      	b.n	8004c2a <HAL_GPIO_Init+0x26a>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e01b      	b.n	8004c2a <HAL_GPIO_Init+0x26a>
 8004bf2:	bf00      	nop
 8004bf4:	58000080 	.word	0x58000080
 8004bf8:	58024400 	.word	0x58024400
 8004bfc:	58000400 	.word	0x58000400
 8004c00:	58020000 	.word	0x58020000
 8004c04:	58020400 	.word	0x58020400
 8004c08:	58020800 	.word	0x58020800
 8004c0c:	58020c00 	.word	0x58020c00
 8004c10:	58021000 	.word	0x58021000
 8004c14:	58021400 	.word	0x58021400
 8004c18:	58021800 	.word	0x58021800
 8004c1c:	58021c00 	.word	0x58021c00
 8004c20:	58022000 	.word	0x58022000
 8004c24:	58022400 	.word	0x58022400
 8004c28:	2300      	movs	r3, #0
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	f002 0203 	and.w	r2, r2, #3
 8004c30:	0092      	lsls	r2, r2, #2
 8004c32:	4093      	lsls	r3, r2
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c3a:	4938      	ldr	r1, [pc, #224]	; (8004d1c <HAL_GPIO_Init+0x35c>)
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	089b      	lsrs	r3, r3, #2
 8004c40:	3302      	adds	r3, #2
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	43db      	mvns	r3, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4013      	ands	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004c6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	43db      	mvns	r3, r3
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	4013      	ands	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004c9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	43db      	mvns	r3, r3
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f47f ae63 	bne.w	80049d4 <HAL_GPIO_Init+0x14>
  }
}
 8004d0e:	bf00      	nop
 8004d10:	bf00      	nop
 8004d12:	3724      	adds	r7, #36	; 0x24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	58000400 	.word	0x58000400

08004d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	807b      	strh	r3, [r7, #2]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d30:	787b      	ldrb	r3, [r7, #1]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d36:	887a      	ldrh	r2, [r7, #2]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004d3c:	e003      	b.n	8004d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004d3e:	887b      	ldrh	r3, [r7, #2]
 8004d40:	041a      	lsls	r2, r3, #16
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	619a      	str	r2, [r3, #24]
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
	...

08004d54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004d5c:	4b29      	ldr	r3, [pc, #164]	; (8004e04 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	2b06      	cmp	r3, #6
 8004d66:	d00a      	beq.n	8004d7e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004d68:	4b26      	ldr	r3, [pc, #152]	; (8004e04 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d001      	beq.n	8004d7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e040      	b.n	8004dfc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e03e      	b.n	8004dfc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004d7e:	4b21      	ldr	r3, [pc, #132]	; (8004e04 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004d86:	491f      	ldr	r1, [pc, #124]	; (8004e04 <HAL_PWREx_ConfigSupply+0xb0>)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004d8e:	f7fd fa45 	bl	800221c <HAL_GetTick>
 8004d92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d94:	e009      	b.n	8004daa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004d96:	f7fd fa41 	bl	800221c <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004da4:	d901      	bls.n	8004daa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e028      	b.n	8004dfc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004daa:	4b16      	ldr	r3, [pc, #88]	; (8004e04 <HAL_PWREx_ConfigSupply+0xb0>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db6:	d1ee      	bne.n	8004d96 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b1e      	cmp	r3, #30
 8004dbc:	d008      	beq.n	8004dd0 <HAL_PWREx_ConfigSupply+0x7c>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b2e      	cmp	r3, #46	; 0x2e
 8004dc2:	d005      	beq.n	8004dd0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b1d      	cmp	r3, #29
 8004dc8:	d002      	beq.n	8004dd0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b2d      	cmp	r3, #45	; 0x2d
 8004dce:	d114      	bne.n	8004dfa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004dd0:	f7fd fa24 	bl	800221c <HAL_GetTick>
 8004dd4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004dd6:	e009      	b.n	8004dec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004dd8:	f7fd fa20 	bl	800221c <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004de6:	d901      	bls.n	8004dec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e007      	b.n	8004dfc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004dec:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <HAL_PWREx_ConfigSupply+0xb0>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df8:	d1ee      	bne.n	8004dd8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	58024800 	.word	0x58024800

08004e08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08c      	sub	sp, #48	; 0x30
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d102      	bne.n	8004e1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f000 bc1f 	b.w	800565a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 80b3 	beq.w	8004f90 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e2a:	4b95      	ldr	r3, [pc, #596]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e34:	4b92      	ldr	r3, [pc, #584]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e38:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3c:	2b10      	cmp	r3, #16
 8004e3e:	d007      	beq.n	8004e50 <HAL_RCC_OscConfig+0x48>
 8004e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e42:	2b18      	cmp	r3, #24
 8004e44:	d112      	bne.n	8004e6c <HAL_RCC_OscConfig+0x64>
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	f003 0303 	and.w	r3, r3, #3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d10d      	bne.n	8004e6c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e50:	4b8b      	ldr	r3, [pc, #556]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 8098 	beq.w	8004f8e <HAL_RCC_OscConfig+0x186>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f040 8093 	bne.w	8004f8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e3f6      	b.n	800565a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e74:	d106      	bne.n	8004e84 <HAL_RCC_OscConfig+0x7c>
 8004e76:	4b82      	ldr	r3, [pc, #520]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a81      	ldr	r2, [pc, #516]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	e058      	b.n	8004f36 <HAL_RCC_OscConfig+0x12e>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d112      	bne.n	8004eb2 <HAL_RCC_OscConfig+0xaa>
 8004e8c:	4b7c      	ldr	r3, [pc, #496]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a7b      	ldr	r2, [pc, #492]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	4b79      	ldr	r3, [pc, #484]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a78      	ldr	r2, [pc, #480]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004e9e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	4b76      	ldr	r3, [pc, #472]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a75      	ldr	r2, [pc, #468]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	e041      	b.n	8004f36 <HAL_RCC_OscConfig+0x12e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004eba:	d112      	bne.n	8004ee2 <HAL_RCC_OscConfig+0xda>
 8004ebc:	4b70      	ldr	r3, [pc, #448]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a6f      	ldr	r2, [pc, #444]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004ec2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	4b6d      	ldr	r3, [pc, #436]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a6c      	ldr	r2, [pc, #432]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004ece:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	4b6a      	ldr	r3, [pc, #424]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a69      	ldr	r2, [pc, #420]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ede:	6013      	str	r3, [r2, #0]
 8004ee0:	e029      	b.n	8004f36 <HAL_RCC_OscConfig+0x12e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004eea:	d112      	bne.n	8004f12 <HAL_RCC_OscConfig+0x10a>
 8004eec:	4b64      	ldr	r3, [pc, #400]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a63      	ldr	r2, [pc, #396]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004ef2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	4b61      	ldr	r3, [pc, #388]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a60      	ldr	r2, [pc, #384]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	4b5e      	ldr	r3, [pc, #376]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a5d      	ldr	r2, [pc, #372]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	e011      	b.n	8004f36 <HAL_RCC_OscConfig+0x12e>
 8004f12:	4b5b      	ldr	r3, [pc, #364]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a5a      	ldr	r2, [pc, #360]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	4b58      	ldr	r3, [pc, #352]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a57      	ldr	r2, [pc, #348]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004f24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	4b55      	ldr	r3, [pc, #340]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a54      	ldr	r2, [pc, #336]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004f30:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004f34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d013      	beq.n	8004f66 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3e:	f7fd f96d 	bl	800221c <HAL_GetTick>
 8004f42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f46:	f7fd f969 	bl	800221c <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b64      	cmp	r3, #100	; 0x64
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e380      	b.n	800565a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f58:	4b49      	ldr	r3, [pc, #292]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0f0      	beq.n	8004f46 <HAL_RCC_OscConfig+0x13e>
 8004f64:	e014      	b.n	8004f90 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f66:	f7fd f959 	bl	800221c <HAL_GetTick>
 8004f6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f6e:	f7fd f955 	bl	800221c <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b64      	cmp	r3, #100	; 0x64
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e36c      	b.n	800565a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f80:	4b3f      	ldr	r3, [pc, #252]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1f0      	bne.n	8004f6e <HAL_RCC_OscConfig+0x166>
 8004f8c:	e000      	b.n	8004f90 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f8e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 808c 	beq.w	80050b6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f9e:	4b38      	ldr	r3, [pc, #224]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fa6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004fa8:	4b35      	ldr	r3, [pc, #212]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fac:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d007      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x1bc>
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	2b18      	cmp	r3, #24
 8004fb8:	d137      	bne.n	800502a <HAL_RCC_OscConfig+0x222>
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d132      	bne.n	800502a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fc4:	4b2e      	ldr	r3, [pc, #184]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_RCC_OscConfig+0x1d4>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e33e      	b.n	800565a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004fdc:	4b28      	ldr	r3, [pc, #160]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f023 0219 	bic.w	r2, r3, #25
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	4925      	ldr	r1, [pc, #148]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fee:	f7fd f915 	bl	800221c <HAL_GetTick>
 8004ff2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ff6:	f7fd f911 	bl	800221c <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e328      	b.n	800565a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005008:	4b1d      	ldr	r3, [pc, #116]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f0      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005014:	4b1a      	ldr	r3, [pc, #104]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	061b      	lsls	r3, r3, #24
 8005022:	4917      	ldr	r1, [pc, #92]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8005024:	4313      	orrs	r3, r2
 8005026:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005028:	e045      	b.n	80050b6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d028      	beq.n	8005084 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005032:	4b13      	ldr	r3, [pc, #76]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f023 0219 	bic.w	r2, r3, #25
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	4910      	ldr	r1, [pc, #64]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8005040:	4313      	orrs	r3, r2
 8005042:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005044:	f7fd f8ea 	bl	800221c <HAL_GetTick>
 8005048:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800504c:	f7fd f8e6 	bl	800221c <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e2fd      	b.n	800565a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800505e:	4b08      	ldr	r3, [pc, #32]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0304 	and.w	r3, r3, #4
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800506a:	4b05      	ldr	r3, [pc, #20]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	061b      	lsls	r3, r3, #24
 8005078:	4901      	ldr	r1, [pc, #4]	; (8005080 <HAL_RCC_OscConfig+0x278>)
 800507a:	4313      	orrs	r3, r2
 800507c:	604b      	str	r3, [r1, #4]
 800507e:	e01a      	b.n	80050b6 <HAL_RCC_OscConfig+0x2ae>
 8005080:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005084:	4b97      	ldr	r3, [pc, #604]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a96      	ldr	r2, [pc, #600]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 800508a:	f023 0301 	bic.w	r3, r3, #1
 800508e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005090:	f7fd f8c4 	bl	800221c <HAL_GetTick>
 8005094:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005098:	f7fd f8c0 	bl	800221c <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e2d7      	b.n	800565a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050aa:	4b8e      	ldr	r3, [pc, #568]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f0      	bne.n	8005098 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d06a      	beq.n	8005198 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050c2:	4b88      	ldr	r3, [pc, #544]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050cc:	4b85      	ldr	r3, [pc, #532]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d007      	beq.n	80050e8 <HAL_RCC_OscConfig+0x2e0>
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	2b18      	cmp	r3, #24
 80050dc:	d11b      	bne.n	8005116 <HAL_RCC_OscConfig+0x30e>
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f003 0303 	and.w	r3, r3, #3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d116      	bne.n	8005116 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050e8:	4b7e      	ldr	r3, [pc, #504]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <HAL_RCC_OscConfig+0x2f8>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	2b80      	cmp	r3, #128	; 0x80
 80050fa:	d001      	beq.n	8005100 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e2ac      	b.n	800565a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005100:	4b78      	ldr	r3, [pc, #480]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	061b      	lsls	r3, r3, #24
 800510e:	4975      	ldr	r1, [pc, #468]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 8005110:	4313      	orrs	r3, r2
 8005112:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005114:	e040      	b.n	8005198 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d023      	beq.n	8005166 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800511e:	4b71      	ldr	r3, [pc, #452]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a70      	ldr	r2, [pc, #448]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 8005124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512a:	f7fd f877 	bl	800221c <HAL_GetTick>
 800512e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005132:	f7fd f873 	bl	800221c <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e28a      	b.n	800565a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005144:	4b67      	ldr	r3, [pc, #412]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0f0      	beq.n	8005132 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005150:	4b64      	ldr	r3, [pc, #400]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	061b      	lsls	r3, r3, #24
 800515e:	4961      	ldr	r1, [pc, #388]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 8005160:	4313      	orrs	r3, r2
 8005162:	60cb      	str	r3, [r1, #12]
 8005164:	e018      	b.n	8005198 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005166:	4b5f      	ldr	r3, [pc, #380]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a5e      	ldr	r2, [pc, #376]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 800516c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005172:	f7fd f853 	bl	800221c <HAL_GetTick>
 8005176:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800517a:	f7fd f84f 	bl	800221c <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e266      	b.n	800565a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800518c:	4b55      	ldr	r3, [pc, #340]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1f0      	bne.n	800517a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d036      	beq.n	8005212 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d019      	beq.n	80051e0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ac:	4b4d      	ldr	r3, [pc, #308]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 80051ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b0:	4a4c      	ldr	r2, [pc, #304]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b8:	f7fd f830 	bl	800221c <HAL_GetTick>
 80051bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051c0:	f7fd f82c 	bl	800221c <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e243      	b.n	800565a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051d2:	4b44      	ldr	r3, [pc, #272]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 80051d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0f0      	beq.n	80051c0 <HAL_RCC_OscConfig+0x3b8>
 80051de:	e018      	b.n	8005212 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051e0:	4b40      	ldr	r3, [pc, #256]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 80051e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e4:	4a3f      	ldr	r2, [pc, #252]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 80051e6:	f023 0301 	bic.w	r3, r3, #1
 80051ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ec:	f7fd f816 	bl	800221c <HAL_GetTick>
 80051f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f4:	f7fd f812 	bl	800221c <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e229      	b.n	800565a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005206:	4b37      	ldr	r3, [pc, #220]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 8005208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f0      	bne.n	80051f4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0320 	and.w	r3, r3, #32
 800521a:	2b00      	cmp	r3, #0
 800521c:	d036      	beq.n	800528c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d019      	beq.n	800525a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005226:	4b2f      	ldr	r3, [pc, #188]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a2e      	ldr	r2, [pc, #184]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 800522c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005230:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005232:	f7fc fff3 	bl	800221c <HAL_GetTick>
 8005236:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800523a:	f7fc ffef 	bl	800221c <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e206      	b.n	800565a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800524c:	4b25      	ldr	r3, [pc, #148]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <HAL_RCC_OscConfig+0x432>
 8005258:	e018      	b.n	800528c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800525a:	4b22      	ldr	r3, [pc, #136]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a21      	ldr	r2, [pc, #132]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 8005260:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005264:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005266:	f7fc ffd9 	bl	800221c <HAL_GetTick>
 800526a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800526e:	f7fc ffd5 	bl	800221c <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e1ec      	b.n	800565a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005280:	4b18      	ldr	r3, [pc, #96]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1f0      	bne.n	800526e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 80af 	beq.w	80053f8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800529a:	4b13      	ldr	r3, [pc, #76]	; (80052e8 <HAL_RCC_OscConfig+0x4e0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a12      	ldr	r2, [pc, #72]	; (80052e8 <HAL_RCC_OscConfig+0x4e0>)
 80052a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052a6:	f7fc ffb9 	bl	800221c <HAL_GetTick>
 80052aa:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ae:	f7fc ffb5 	bl	800221c <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b64      	cmp	r3, #100	; 0x64
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e1cc      	b.n	800565a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052c0:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <HAL_RCC_OscConfig+0x4e0>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0f0      	beq.n	80052ae <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d10b      	bne.n	80052ec <HAL_RCC_OscConfig+0x4e4>
 80052d4:	4b03      	ldr	r3, [pc, #12]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 80052d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d8:	4a02      	ldr	r2, [pc, #8]	; (80052e4 <HAL_RCC_OscConfig+0x4dc>)
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	6713      	str	r3, [r2, #112]	; 0x70
 80052e0:	e05b      	b.n	800539a <HAL_RCC_OscConfig+0x592>
 80052e2:	bf00      	nop
 80052e4:	58024400 	.word	0x58024400
 80052e8:	58024800 	.word	0x58024800
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d112      	bne.n	800531a <HAL_RCC_OscConfig+0x512>
 80052f4:	4b9d      	ldr	r3, [pc, #628]	; (800556c <HAL_RCC_OscConfig+0x764>)
 80052f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f8:	4a9c      	ldr	r2, [pc, #624]	; (800556c <HAL_RCC_OscConfig+0x764>)
 80052fa:	f023 0301 	bic.w	r3, r3, #1
 80052fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005300:	4b9a      	ldr	r3, [pc, #616]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005304:	4a99      	ldr	r2, [pc, #612]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800530a:	6713      	str	r3, [r2, #112]	; 0x70
 800530c:	4b97      	ldr	r3, [pc, #604]	; (800556c <HAL_RCC_OscConfig+0x764>)
 800530e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005310:	4a96      	ldr	r2, [pc, #600]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005312:	f023 0304 	bic.w	r3, r3, #4
 8005316:	6713      	str	r3, [r2, #112]	; 0x70
 8005318:	e03f      	b.n	800539a <HAL_RCC_OscConfig+0x592>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2b05      	cmp	r3, #5
 8005320:	d112      	bne.n	8005348 <HAL_RCC_OscConfig+0x540>
 8005322:	4b92      	ldr	r3, [pc, #584]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005326:	4a91      	ldr	r2, [pc, #580]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005328:	f043 0304 	orr.w	r3, r3, #4
 800532c:	6713      	str	r3, [r2, #112]	; 0x70
 800532e:	4b8f      	ldr	r3, [pc, #572]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005332:	4a8e      	ldr	r2, [pc, #568]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005338:	6713      	str	r3, [r2, #112]	; 0x70
 800533a:	4b8c      	ldr	r3, [pc, #560]	; (800556c <HAL_RCC_OscConfig+0x764>)
 800533c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533e:	4a8b      	ldr	r2, [pc, #556]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005340:	f043 0301 	orr.w	r3, r3, #1
 8005344:	6713      	str	r3, [r2, #112]	; 0x70
 8005346:	e028      	b.n	800539a <HAL_RCC_OscConfig+0x592>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2b85      	cmp	r3, #133	; 0x85
 800534e:	d112      	bne.n	8005376 <HAL_RCC_OscConfig+0x56e>
 8005350:	4b86      	ldr	r3, [pc, #536]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005354:	4a85      	ldr	r2, [pc, #532]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005356:	f043 0304 	orr.w	r3, r3, #4
 800535a:	6713      	str	r3, [r2, #112]	; 0x70
 800535c:	4b83      	ldr	r3, [pc, #524]	; (800556c <HAL_RCC_OscConfig+0x764>)
 800535e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005360:	4a82      	ldr	r2, [pc, #520]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005366:	6713      	str	r3, [r2, #112]	; 0x70
 8005368:	4b80      	ldr	r3, [pc, #512]	; (800556c <HAL_RCC_OscConfig+0x764>)
 800536a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536c:	4a7f      	ldr	r2, [pc, #508]	; (800556c <HAL_RCC_OscConfig+0x764>)
 800536e:	f043 0301 	orr.w	r3, r3, #1
 8005372:	6713      	str	r3, [r2, #112]	; 0x70
 8005374:	e011      	b.n	800539a <HAL_RCC_OscConfig+0x592>
 8005376:	4b7d      	ldr	r3, [pc, #500]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537a:	4a7c      	ldr	r2, [pc, #496]	; (800556c <HAL_RCC_OscConfig+0x764>)
 800537c:	f023 0301 	bic.w	r3, r3, #1
 8005380:	6713      	str	r3, [r2, #112]	; 0x70
 8005382:	4b7a      	ldr	r3, [pc, #488]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005386:	4a79      	ldr	r2, [pc, #484]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005388:	f023 0304 	bic.w	r3, r3, #4
 800538c:	6713      	str	r3, [r2, #112]	; 0x70
 800538e:	4b77      	ldr	r3, [pc, #476]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005392:	4a76      	ldr	r2, [pc, #472]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005398:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d015      	beq.n	80053ce <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a2:	f7fc ff3b 	bl	800221c <HAL_GetTick>
 80053a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053a8:	e00a      	b.n	80053c0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053aa:	f7fc ff37 	bl	800221c <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e14c      	b.n	800565a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053c0:	4b6a      	ldr	r3, [pc, #424]	; (800556c <HAL_RCC_OscConfig+0x764>)
 80053c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0ee      	beq.n	80053aa <HAL_RCC_OscConfig+0x5a2>
 80053cc:	e014      	b.n	80053f8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ce:	f7fc ff25 	bl	800221c <HAL_GetTick>
 80053d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80053d4:	e00a      	b.n	80053ec <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d6:	f7fc ff21 	bl	800221c <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e136      	b.n	800565a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80053ec:	4b5f      	ldr	r3, [pc, #380]	; (800556c <HAL_RCC_OscConfig+0x764>)
 80053ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1ee      	bne.n	80053d6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 812b 	beq.w	8005658 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005402:	4b5a      	ldr	r3, [pc, #360]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800540a:	2b18      	cmp	r3, #24
 800540c:	f000 80bb 	beq.w	8005586 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	2b02      	cmp	r3, #2
 8005416:	f040 8095 	bne.w	8005544 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800541a:	4b54      	ldr	r3, [pc, #336]	; (800556c <HAL_RCC_OscConfig+0x764>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a53      	ldr	r2, [pc, #332]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005420:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005426:	f7fc fef9 	bl	800221c <HAL_GetTick>
 800542a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800542c:	e008      	b.n	8005440 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800542e:	f7fc fef5 	bl	800221c <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d901      	bls.n	8005440 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e10c      	b.n	800565a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005440:	4b4a      	ldr	r3, [pc, #296]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f0      	bne.n	800542e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800544c:	4b47      	ldr	r3, [pc, #284]	; (800556c <HAL_RCC_OscConfig+0x764>)
 800544e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005450:	4b47      	ldr	r3, [pc, #284]	; (8005570 <HAL_RCC_OscConfig+0x768>)
 8005452:	4013      	ands	r3, r2
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800545c:	0112      	lsls	r2, r2, #4
 800545e:	430a      	orrs	r2, r1
 8005460:	4942      	ldr	r1, [pc, #264]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005462:	4313      	orrs	r3, r2
 8005464:	628b      	str	r3, [r1, #40]	; 0x28
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	3b01      	subs	r3, #1
 800546c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005474:	3b01      	subs	r3, #1
 8005476:	025b      	lsls	r3, r3, #9
 8005478:	b29b      	uxth	r3, r3
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	3b01      	subs	r3, #1
 8005482:	041b      	lsls	r3, r3, #16
 8005484:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548e:	3b01      	subs	r3, #1
 8005490:	061b      	lsls	r3, r3, #24
 8005492:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005496:	4935      	ldr	r1, [pc, #212]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005498:	4313      	orrs	r3, r2
 800549a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800549c:	4b33      	ldr	r3, [pc, #204]	; (800556c <HAL_RCC_OscConfig+0x764>)
 800549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a0:	4a32      	ldr	r2, [pc, #200]	; (800556c <HAL_RCC_OscConfig+0x764>)
 80054a2:	f023 0301 	bic.w	r3, r3, #1
 80054a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80054a8:	4b30      	ldr	r3, [pc, #192]	; (800556c <HAL_RCC_OscConfig+0x764>)
 80054aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ac:	4b31      	ldr	r3, [pc, #196]	; (8005574 <HAL_RCC_OscConfig+0x76c>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80054b4:	00d2      	lsls	r2, r2, #3
 80054b6:	492d      	ldr	r1, [pc, #180]	; (800556c <HAL_RCC_OscConfig+0x764>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80054bc:	4b2b      	ldr	r3, [pc, #172]	; (800556c <HAL_RCC_OscConfig+0x764>)
 80054be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c0:	f023 020c 	bic.w	r2, r3, #12
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c8:	4928      	ldr	r1, [pc, #160]	; (800556c <HAL_RCC_OscConfig+0x764>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80054ce:	4b27      	ldr	r3, [pc, #156]	; (800556c <HAL_RCC_OscConfig+0x764>)
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	f023 0202 	bic.w	r2, r3, #2
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054da:	4924      	ldr	r1, [pc, #144]	; (800556c <HAL_RCC_OscConfig+0x764>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80054e0:	4b22      	ldr	r3, [pc, #136]	; (800556c <HAL_RCC_OscConfig+0x764>)
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	4a21      	ldr	r2, [pc, #132]	; (800556c <HAL_RCC_OscConfig+0x764>)
 80054e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ec:	4b1f      	ldr	r3, [pc, #124]	; (800556c <HAL_RCC_OscConfig+0x764>)
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	4a1e      	ldr	r2, [pc, #120]	; (800556c <HAL_RCC_OscConfig+0x764>)
 80054f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80054f8:	4b1c      	ldr	r3, [pc, #112]	; (800556c <HAL_RCC_OscConfig+0x764>)
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	4a1b      	ldr	r2, [pc, #108]	; (800556c <HAL_RCC_OscConfig+0x764>)
 80054fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005502:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005504:	4b19      	ldr	r3, [pc, #100]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	4a18      	ldr	r2, [pc, #96]	; (800556c <HAL_RCC_OscConfig+0x764>)
 800550a:	f043 0301 	orr.w	r3, r3, #1
 800550e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005510:	4b16      	ldr	r3, [pc, #88]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a15      	ldr	r2, [pc, #84]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800551a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551c:	f7fc fe7e 	bl	800221c <HAL_GetTick>
 8005520:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005524:	f7fc fe7a 	bl	800221c <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e091      	b.n	800565a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005536:	4b0d      	ldr	r3, [pc, #52]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0f0      	beq.n	8005524 <HAL_RCC_OscConfig+0x71c>
 8005542:	e089      	b.n	8005658 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005544:	4b09      	ldr	r3, [pc, #36]	; (800556c <HAL_RCC_OscConfig+0x764>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a08      	ldr	r2, [pc, #32]	; (800556c <HAL_RCC_OscConfig+0x764>)
 800554a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800554e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005550:	f7fc fe64 	bl	800221c <HAL_GetTick>
 8005554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005556:	e00f      	b.n	8005578 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005558:	f7fc fe60 	bl	800221c <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d908      	bls.n	8005578 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e077      	b.n	800565a <HAL_RCC_OscConfig+0x852>
 800556a:	bf00      	nop
 800556c:	58024400 	.word	0x58024400
 8005570:	fffffc0c 	.word	0xfffffc0c
 8005574:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005578:	4b3a      	ldr	r3, [pc, #232]	; (8005664 <HAL_RCC_OscConfig+0x85c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e9      	bne.n	8005558 <HAL_RCC_OscConfig+0x750>
 8005584:	e068      	b.n	8005658 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005586:	4b37      	ldr	r3, [pc, #220]	; (8005664 <HAL_RCC_OscConfig+0x85c>)
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800558c:	4b35      	ldr	r3, [pc, #212]	; (8005664 <HAL_RCC_OscConfig+0x85c>)
 800558e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005590:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	2b01      	cmp	r3, #1
 8005598:	d031      	beq.n	80055fe <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f003 0203 	and.w	r2, r3, #3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d12a      	bne.n	80055fe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	091b      	lsrs	r3, r3, #4
 80055ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d122      	bne.n	80055fe <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d11a      	bne.n	80055fe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	0a5b      	lsrs	r3, r3, #9
 80055cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d111      	bne.n	80055fe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	0c1b      	lsrs	r3, r3, #16
 80055de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d108      	bne.n	80055fe <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	0e1b      	lsrs	r3, r3, #24
 80055f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d001      	beq.n	8005602 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e02b      	b.n	800565a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005602:	4b18      	ldr	r3, [pc, #96]	; (8005664 <HAL_RCC_OscConfig+0x85c>)
 8005604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005606:	08db      	lsrs	r3, r3, #3
 8005608:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800560c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	429a      	cmp	r2, r3
 8005616:	d01f      	beq.n	8005658 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005618:	4b12      	ldr	r3, [pc, #72]	; (8005664 <HAL_RCC_OscConfig+0x85c>)
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	4a11      	ldr	r2, [pc, #68]	; (8005664 <HAL_RCC_OscConfig+0x85c>)
 800561e:	f023 0301 	bic.w	r3, r3, #1
 8005622:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005624:	f7fc fdfa 	bl	800221c <HAL_GetTick>
 8005628:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800562a:	bf00      	nop
 800562c:	f7fc fdf6 	bl	800221c <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	4293      	cmp	r3, r2
 8005636:	d0f9      	beq.n	800562c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005638:	4b0a      	ldr	r3, [pc, #40]	; (8005664 <HAL_RCC_OscConfig+0x85c>)
 800563a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800563c:	4b0a      	ldr	r3, [pc, #40]	; (8005668 <HAL_RCC_OscConfig+0x860>)
 800563e:	4013      	ands	r3, r2
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005644:	00d2      	lsls	r2, r2, #3
 8005646:	4907      	ldr	r1, [pc, #28]	; (8005664 <HAL_RCC_OscConfig+0x85c>)
 8005648:	4313      	orrs	r3, r2
 800564a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800564c:	4b05      	ldr	r3, [pc, #20]	; (8005664 <HAL_RCC_OscConfig+0x85c>)
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	4a04      	ldr	r2, [pc, #16]	; (8005664 <HAL_RCC_OscConfig+0x85c>)
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3730      	adds	r7, #48	; 0x30
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	58024400 	.word	0x58024400
 8005668:	ffff0007 	.word	0xffff0007

0800566c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e19c      	b.n	80059ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005680:	4b8a      	ldr	r3, [pc, #552]	; (80058ac <HAL_RCC_ClockConfig+0x240>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 030f 	and.w	r3, r3, #15
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d910      	bls.n	80056b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800568e:	4b87      	ldr	r3, [pc, #540]	; (80058ac <HAL_RCC_ClockConfig+0x240>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f023 020f 	bic.w	r2, r3, #15
 8005696:	4985      	ldr	r1, [pc, #532]	; (80058ac <HAL_RCC_ClockConfig+0x240>)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	4313      	orrs	r3, r2
 800569c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800569e:	4b83      	ldr	r3, [pc, #524]	; (80058ac <HAL_RCC_ClockConfig+0x240>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d001      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e184      	b.n	80059ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d010      	beq.n	80056de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	4b7b      	ldr	r3, [pc, #492]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d908      	bls.n	80056de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056cc:	4b78      	ldr	r3, [pc, #480]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	4975      	ldr	r1, [pc, #468]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d010      	beq.n	800570c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695a      	ldr	r2, [r3, #20]
 80056ee:	4b70      	ldr	r3, [pc, #448]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d908      	bls.n	800570c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056fa:	4b6d      	ldr	r3, [pc, #436]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	496a      	ldr	r1, [pc, #424]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 8005708:	4313      	orrs	r3, r2
 800570a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	2b00      	cmp	r3, #0
 8005716:	d010      	beq.n	800573a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699a      	ldr	r2, [r3, #24]
 800571c:	4b64      	ldr	r3, [pc, #400]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005724:	429a      	cmp	r2, r3
 8005726:	d908      	bls.n	800573a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005728:	4b61      	ldr	r3, [pc, #388]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	495e      	ldr	r1, [pc, #376]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 8005736:	4313      	orrs	r3, r2
 8005738:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0320 	and.w	r3, r3, #32
 8005742:	2b00      	cmp	r3, #0
 8005744:	d010      	beq.n	8005768 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	69da      	ldr	r2, [r3, #28]
 800574a:	4b59      	ldr	r3, [pc, #356]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005752:	429a      	cmp	r2, r3
 8005754:	d908      	bls.n	8005768 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005756:	4b56      	ldr	r3, [pc, #344]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	4953      	ldr	r1, [pc, #332]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 8005764:	4313      	orrs	r3, r2
 8005766:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d010      	beq.n	8005796 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	4b4d      	ldr	r3, [pc, #308]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	f003 030f 	and.w	r3, r3, #15
 8005780:	429a      	cmp	r2, r3
 8005782:	d908      	bls.n	8005796 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005784:	4b4a      	ldr	r3, [pc, #296]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	f023 020f 	bic.w	r2, r3, #15
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	4947      	ldr	r1, [pc, #284]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 8005792:	4313      	orrs	r3, r2
 8005794:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d055      	beq.n	800584e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80057a2:	4b43      	ldr	r3, [pc, #268]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	4940      	ldr	r1, [pc, #256]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d107      	bne.n	80057cc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057bc:	4b3c      	ldr	r3, [pc, #240]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d121      	bne.n	800580c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e0f6      	b.n	80059ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d107      	bne.n	80057e4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057d4:	4b36      	ldr	r3, [pc, #216]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d115      	bne.n	800580c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e0ea      	b.n	80059ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d107      	bne.n	80057fc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057ec:	4b30      	ldr	r3, [pc, #192]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d109      	bne.n	800580c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e0de      	b.n	80059ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057fc:	4b2c      	ldr	r3, [pc, #176]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e0d6      	b.n	80059ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800580c:	4b28      	ldr	r3, [pc, #160]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	f023 0207 	bic.w	r2, r3, #7
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	4925      	ldr	r1, [pc, #148]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 800581a:	4313      	orrs	r3, r2
 800581c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800581e:	f7fc fcfd 	bl	800221c <HAL_GetTick>
 8005822:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005824:	e00a      	b.n	800583c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005826:	f7fc fcf9 	bl	800221c <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	f241 3288 	movw	r2, #5000	; 0x1388
 8005834:	4293      	cmp	r3, r2
 8005836:	d901      	bls.n	800583c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e0be      	b.n	80059ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800583c:	4b1c      	ldr	r3, [pc, #112]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	429a      	cmp	r2, r3
 800584c:	d1eb      	bne.n	8005826 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d010      	beq.n	800587c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	4b14      	ldr	r3, [pc, #80]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	429a      	cmp	r2, r3
 8005868:	d208      	bcs.n	800587c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800586a:	4b11      	ldr	r3, [pc, #68]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	f023 020f 	bic.w	r2, r3, #15
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	490e      	ldr	r1, [pc, #56]	; (80058b0 <HAL_RCC_ClockConfig+0x244>)
 8005878:	4313      	orrs	r3, r2
 800587a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800587c:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <HAL_RCC_ClockConfig+0x240>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d214      	bcs.n	80058b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800588a:	4b08      	ldr	r3, [pc, #32]	; (80058ac <HAL_RCC_ClockConfig+0x240>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f023 020f 	bic.w	r2, r3, #15
 8005892:	4906      	ldr	r1, [pc, #24]	; (80058ac <HAL_RCC_ClockConfig+0x240>)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	4313      	orrs	r3, r2
 8005898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800589a:	4b04      	ldr	r3, [pc, #16]	; (80058ac <HAL_RCC_ClockConfig+0x240>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 030f 	and.w	r3, r3, #15
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d005      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e086      	b.n	80059ba <HAL_RCC_ClockConfig+0x34e>
 80058ac:	52002000 	.word	0x52002000
 80058b0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d010      	beq.n	80058e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691a      	ldr	r2, [r3, #16]
 80058c4:	4b3f      	ldr	r3, [pc, #252]	; (80059c4 <HAL_RCC_ClockConfig+0x358>)
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d208      	bcs.n	80058e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058d0:	4b3c      	ldr	r3, [pc, #240]	; (80059c4 <HAL_RCC_ClockConfig+0x358>)
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	4939      	ldr	r1, [pc, #228]	; (80059c4 <HAL_RCC_ClockConfig+0x358>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d010      	beq.n	8005910 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	695a      	ldr	r2, [r3, #20]
 80058f2:	4b34      	ldr	r3, [pc, #208]	; (80059c4 <HAL_RCC_ClockConfig+0x358>)
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d208      	bcs.n	8005910 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80058fe:	4b31      	ldr	r3, [pc, #196]	; (80059c4 <HAL_RCC_ClockConfig+0x358>)
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	492e      	ldr	r1, [pc, #184]	; (80059c4 <HAL_RCC_ClockConfig+0x358>)
 800590c:	4313      	orrs	r3, r2
 800590e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0310 	and.w	r3, r3, #16
 8005918:	2b00      	cmp	r3, #0
 800591a:	d010      	beq.n	800593e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	699a      	ldr	r2, [r3, #24]
 8005920:	4b28      	ldr	r3, [pc, #160]	; (80059c4 <HAL_RCC_ClockConfig+0x358>)
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005928:	429a      	cmp	r2, r3
 800592a:	d208      	bcs.n	800593e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800592c:	4b25      	ldr	r3, [pc, #148]	; (80059c4 <HAL_RCC_ClockConfig+0x358>)
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	4922      	ldr	r1, [pc, #136]	; (80059c4 <HAL_RCC_ClockConfig+0x358>)
 800593a:	4313      	orrs	r3, r2
 800593c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0320 	and.w	r3, r3, #32
 8005946:	2b00      	cmp	r3, #0
 8005948:	d010      	beq.n	800596c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69da      	ldr	r2, [r3, #28]
 800594e:	4b1d      	ldr	r3, [pc, #116]	; (80059c4 <HAL_RCC_ClockConfig+0x358>)
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005956:	429a      	cmp	r2, r3
 8005958:	d208      	bcs.n	800596c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800595a:	4b1a      	ldr	r3, [pc, #104]	; (80059c4 <HAL_RCC_ClockConfig+0x358>)
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	4917      	ldr	r1, [pc, #92]	; (80059c4 <HAL_RCC_ClockConfig+0x358>)
 8005968:	4313      	orrs	r3, r2
 800596a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800596c:	f000 f834 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 8005970:	4602      	mov	r2, r0
 8005972:	4b14      	ldr	r3, [pc, #80]	; (80059c4 <HAL_RCC_ClockConfig+0x358>)
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	0a1b      	lsrs	r3, r3, #8
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	4912      	ldr	r1, [pc, #72]	; (80059c8 <HAL_RCC_ClockConfig+0x35c>)
 800597e:	5ccb      	ldrb	r3, [r1, r3]
 8005980:	f003 031f 	and.w	r3, r3, #31
 8005984:	fa22 f303 	lsr.w	r3, r2, r3
 8005988:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800598a:	4b0e      	ldr	r3, [pc, #56]	; (80059c4 <HAL_RCC_ClockConfig+0x358>)
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	4a0d      	ldr	r2, [pc, #52]	; (80059c8 <HAL_RCC_ClockConfig+0x35c>)
 8005994:	5cd3      	ldrb	r3, [r2, r3]
 8005996:	f003 031f 	and.w	r3, r3, #31
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	fa22 f303 	lsr.w	r3, r2, r3
 80059a0:	4a0a      	ldr	r2, [pc, #40]	; (80059cc <HAL_RCC_ClockConfig+0x360>)
 80059a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059a4:	4a0a      	ldr	r2, [pc, #40]	; (80059d0 <HAL_RCC_ClockConfig+0x364>)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80059aa:	4b0a      	ldr	r3, [pc, #40]	; (80059d4 <HAL_RCC_ClockConfig+0x368>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fc fbea 	bl	8002188 <HAL_InitTick>
 80059b4:	4603      	mov	r3, r0
 80059b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	58024400 	.word	0x58024400
 80059c8:	0800d4ec 	.word	0x0800d4ec
 80059cc:	2400002c 	.word	0x2400002c
 80059d0:	24000028 	.word	0x24000028
 80059d4:	24000030 	.word	0x24000030

080059d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	b089      	sub	sp, #36	; 0x24
 80059dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059de:	4bb3      	ldr	r3, [pc, #716]	; (8005cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059e6:	2b18      	cmp	r3, #24
 80059e8:	f200 8155 	bhi.w	8005c96 <HAL_RCC_GetSysClockFreq+0x2be>
 80059ec:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80059ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f2:	bf00      	nop
 80059f4:	08005a59 	.word	0x08005a59
 80059f8:	08005c97 	.word	0x08005c97
 80059fc:	08005c97 	.word	0x08005c97
 8005a00:	08005c97 	.word	0x08005c97
 8005a04:	08005c97 	.word	0x08005c97
 8005a08:	08005c97 	.word	0x08005c97
 8005a0c:	08005c97 	.word	0x08005c97
 8005a10:	08005c97 	.word	0x08005c97
 8005a14:	08005a7f 	.word	0x08005a7f
 8005a18:	08005c97 	.word	0x08005c97
 8005a1c:	08005c97 	.word	0x08005c97
 8005a20:	08005c97 	.word	0x08005c97
 8005a24:	08005c97 	.word	0x08005c97
 8005a28:	08005c97 	.word	0x08005c97
 8005a2c:	08005c97 	.word	0x08005c97
 8005a30:	08005c97 	.word	0x08005c97
 8005a34:	08005a85 	.word	0x08005a85
 8005a38:	08005c97 	.word	0x08005c97
 8005a3c:	08005c97 	.word	0x08005c97
 8005a40:	08005c97 	.word	0x08005c97
 8005a44:	08005c97 	.word	0x08005c97
 8005a48:	08005c97 	.word	0x08005c97
 8005a4c:	08005c97 	.word	0x08005c97
 8005a50:	08005c97 	.word	0x08005c97
 8005a54:	08005a8b 	.word	0x08005a8b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a58:	4b94      	ldr	r3, [pc, #592]	; (8005cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d009      	beq.n	8005a78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a64:	4b91      	ldr	r3, [pc, #580]	; (8005cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	08db      	lsrs	r3, r3, #3
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	4a90      	ldr	r2, [pc, #576]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a70:	fa22 f303 	lsr.w	r3, r2, r3
 8005a74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005a76:	e111      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005a78:	4b8d      	ldr	r3, [pc, #564]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a7a:	61bb      	str	r3, [r7, #24]
      break;
 8005a7c:	e10e      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005a7e:	4b8d      	ldr	r3, [pc, #564]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a80:	61bb      	str	r3, [r7, #24]
      break;
 8005a82:	e10b      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005a84:	4b8c      	ldr	r3, [pc, #560]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005a86:	61bb      	str	r3, [r7, #24]
      break;
 8005a88:	e108      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a8a:	4b88      	ldr	r3, [pc, #544]	; (8005cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005a94:	4b85      	ldr	r3, [pc, #532]	; (8005cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a98:	091b      	lsrs	r3, r3, #4
 8005a9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a9e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005aa0:	4b82      	ldr	r3, [pc, #520]	; (8005cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005aaa:	4b80      	ldr	r3, [pc, #512]	; (8005cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aae:	08db      	lsrs	r3, r3, #3
 8005ab0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	fb02 f303 	mul.w	r3, r2, r3
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 80e1 	beq.w	8005c90 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	f000 8083 	beq.w	8005bdc <HAL_RCC_GetSysClockFreq+0x204>
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	f200 80a1 	bhi.w	8005c20 <HAL_RCC_GetSysClockFreq+0x248>
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <HAL_RCC_GetSysClockFreq+0x114>
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d056      	beq.n	8005b98 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005aea:	e099      	b.n	8005c20 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aec:	4b6f      	ldr	r3, [pc, #444]	; (8005cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d02d      	beq.n	8005b54 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005af8:	4b6c      	ldr	r3, [pc, #432]	; (8005cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	08db      	lsrs	r3, r3, #3
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	4a6b      	ldr	r2, [pc, #428]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b04:	fa22 f303 	lsr.w	r3, r2, r3
 8005b08:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	ee07 3a90 	vmov	s15, r3
 8005b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	ee07 3a90 	vmov	s15, r3
 8005b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b22:	4b62      	ldr	r3, [pc, #392]	; (8005cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b2a:	ee07 3a90 	vmov	s15, r3
 8005b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b32:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b36:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005cbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b4e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005b52:	e087      	b.n	8005c64 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	ee07 3a90 	vmov	s15, r3
 8005b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005cc0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b66:	4b51      	ldr	r3, [pc, #324]	; (8005cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b76:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b7a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005cbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b96:	e065      	b.n	8005c64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005cc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005baa:	4b40      	ldr	r3, [pc, #256]	; (8005cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bba:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bbe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005cbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bda:	e043      	b.n	8005c64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	ee07 3a90 	vmov	s15, r3
 8005be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005cc8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bee:	4b2f      	ldr	r3, [pc, #188]	; (8005cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c02:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005cbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c1e:	e021      	b.n	8005c64 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005cc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c32:	4b1e      	ldr	r3, [pc, #120]	; (8005cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c42:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c46:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005cbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c62:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005c64:	4b11      	ldr	r3, [pc, #68]	; (8005cac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c68:	0a5b      	lsrs	r3, r3, #9
 8005c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c6e:	3301      	adds	r3, #1
 8005c70:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	ee07 3a90 	vmov	s15, r3
 8005c78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c88:	ee17 3a90 	vmov	r3, s15
 8005c8c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005c8e:	e005      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005c90:	2300      	movs	r3, #0
 8005c92:	61bb      	str	r3, [r7, #24]
      break;
 8005c94:	e002      	b.n	8005c9c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005c96:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c98:	61bb      	str	r3, [r7, #24]
      break;
 8005c9a:	bf00      	nop
  }

  return sysclockfreq;
 8005c9c:	69bb      	ldr	r3, [r7, #24]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3724      	adds	r7, #36	; 0x24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	58024400 	.word	0x58024400
 8005cb0:	03d09000 	.word	0x03d09000
 8005cb4:	003d0900 	.word	0x003d0900
 8005cb8:	007a1200 	.word	0x007a1200
 8005cbc:	46000000 	.word	0x46000000
 8005cc0:	4c742400 	.word	0x4c742400
 8005cc4:	4a742400 	.word	0x4a742400
 8005cc8:	4af42400 	.word	0x4af42400

08005ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005cd2:	f7ff fe81 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	4b10      	ldr	r3, [pc, #64]	; (8005d1c <HAL_RCC_GetHCLKFreq+0x50>)
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	0a1b      	lsrs	r3, r3, #8
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	490f      	ldr	r1, [pc, #60]	; (8005d20 <HAL_RCC_GetHCLKFreq+0x54>)
 8005ce4:	5ccb      	ldrb	r3, [r1, r3]
 8005ce6:	f003 031f 	and.w	r3, r3, #31
 8005cea:	fa22 f303 	lsr.w	r3, r2, r3
 8005cee:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005cf0:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <HAL_RCC_GetHCLKFreq+0x50>)
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	f003 030f 	and.w	r3, r3, #15
 8005cf8:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <HAL_RCC_GetHCLKFreq+0x54>)
 8005cfa:	5cd3      	ldrb	r3, [r2, r3]
 8005cfc:	f003 031f 	and.w	r3, r3, #31
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	fa22 f303 	lsr.w	r3, r2, r3
 8005d06:	4a07      	ldr	r2, [pc, #28]	; (8005d24 <HAL_RCC_GetHCLKFreq+0x58>)
 8005d08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d0a:	4a07      	ldr	r2, [pc, #28]	; (8005d28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005d10:	4b04      	ldr	r3, [pc, #16]	; (8005d24 <HAL_RCC_GetHCLKFreq+0x58>)
 8005d12:	681b      	ldr	r3, [r3, #0]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	58024400 	.word	0x58024400
 8005d20:	0800d4ec 	.word	0x0800d4ec
 8005d24:	2400002c 	.word	0x2400002c
 8005d28:	24000028 	.word	0x24000028

08005d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005d30:	f7ff ffcc 	bl	8005ccc <HAL_RCC_GetHCLKFreq>
 8005d34:	4602      	mov	r2, r0
 8005d36:	4b06      	ldr	r3, [pc, #24]	; (8005d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	091b      	lsrs	r3, r3, #4
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	4904      	ldr	r1, [pc, #16]	; (8005d54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d42:	5ccb      	ldrb	r3, [r1, r3]
 8005d44:	f003 031f 	and.w	r3, r3, #31
 8005d48:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	58024400 	.word	0x58024400
 8005d54:	0800d4ec 	.word	0x0800d4ec

08005d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005d5c:	f7ff ffb6 	bl	8005ccc <HAL_RCC_GetHCLKFreq>
 8005d60:	4602      	mov	r2, r0
 8005d62:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	0a1b      	lsrs	r3, r3, #8
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	4904      	ldr	r1, [pc, #16]	; (8005d80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d6e:	5ccb      	ldrb	r3, [r1, r3]
 8005d70:	f003 031f 	and.w	r3, r3, #31
 8005d74:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	58024400 	.word	0x58024400
 8005d80:	0800d4ec 	.word	0x0800d4ec

08005d84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d88:	b0c8      	sub	sp, #288	; 0x120
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d90:	2300      	movs	r3, #0
 8005d92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d96:	2300      	movs	r3, #0
 8005d98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005da8:	2500      	movs	r5, #0
 8005daa:	ea54 0305 	orrs.w	r3, r4, r5
 8005dae:	d049      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dba:	d02f      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005dbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005dc0:	d828      	bhi.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005dc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dc6:	d01a      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005dc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dcc:	d822      	bhi.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dd6:	d007      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005dd8:	e01c      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dda:	4ba7      	ldr	r3, [pc, #668]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dde:	4aa6      	ldr	r2, [pc, #664]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005de4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005de6:	e01a      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dec:	3308      	adds	r3, #8
 8005dee:	2102      	movs	r1, #2
 8005df0:	4618      	mov	r0, r3
 8005df2:	f001 fc43 	bl	800767c <RCCEx_PLL2_Config>
 8005df6:	4603      	mov	r3, r0
 8005df8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005dfc:	e00f      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e02:	3328      	adds	r3, #40	; 0x28
 8005e04:	2102      	movs	r1, #2
 8005e06:	4618      	mov	r0, r3
 8005e08:	f001 fcea 	bl	80077e0 <RCCEx_PLL3_Config>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005e12:	e004      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005e1a:	e000      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e1e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10a      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005e26:	4b94      	ldr	r3, [pc, #592]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e2a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e34:	4a90      	ldr	r2, [pc, #576]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e36:	430b      	orrs	r3, r1
 8005e38:	6513      	str	r3, [r2, #80]	; 0x50
 8005e3a:	e003      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005e50:	f04f 0900 	mov.w	r9, #0
 8005e54:	ea58 0309 	orrs.w	r3, r8, r9
 8005e58:	d047      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d82a      	bhi.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005e64:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6a:	bf00      	nop
 8005e6c:	08005e81 	.word	0x08005e81
 8005e70:	08005e8f 	.word	0x08005e8f
 8005e74:	08005ea5 	.word	0x08005ea5
 8005e78:	08005ec3 	.word	0x08005ec3
 8005e7c:	08005ec3 	.word	0x08005ec3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e80:	4b7d      	ldr	r3, [pc, #500]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	4a7c      	ldr	r2, [pc, #496]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e8c:	e01a      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e92:	3308      	adds	r3, #8
 8005e94:	2100      	movs	r1, #0
 8005e96:	4618      	mov	r0, r3
 8005e98:	f001 fbf0 	bl	800767c <RCCEx_PLL2_Config>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ea2:	e00f      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ea8:	3328      	adds	r3, #40	; 0x28
 8005eaa:	2100      	movs	r1, #0
 8005eac:	4618      	mov	r0, r3
 8005eae:	f001 fc97 	bl	80077e0 <RCCEx_PLL3_Config>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005eb8:	e004      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005ec0:	e000      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ecc:	4b6a      	ldr	r3, [pc, #424]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed0:	f023 0107 	bic.w	r1, r3, #7
 8005ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eda:	4a67      	ldr	r2, [pc, #412]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005edc:	430b      	orrs	r3, r1
 8005ede:	6513      	str	r3, [r2, #80]	; 0x50
 8005ee0:	e003      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ee6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005ef6:	f04f 0b00 	mov.w	fp, #0
 8005efa:	ea5a 030b 	orrs.w	r3, sl, fp
 8005efe:	d054      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f06:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005f0a:	d036      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005f0c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005f10:	d82f      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f16:	d032      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f1c:	d829      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005f1e:	2bc0      	cmp	r3, #192	; 0xc0
 8005f20:	d02f      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8005f22:	2bc0      	cmp	r3, #192	; 0xc0
 8005f24:	d825      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005f26:	2b80      	cmp	r3, #128	; 0x80
 8005f28:	d018      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005f2a:	2b80      	cmp	r3, #128	; 0x80
 8005f2c:	d821      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005f32:	2b40      	cmp	r3, #64	; 0x40
 8005f34:	d007      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8005f36:	e01c      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f38:	4b4f      	ldr	r3, [pc, #316]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	4a4e      	ldr	r2, [pc, #312]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005f44:	e01e      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f4a:	3308      	adds	r3, #8
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f001 fb94 	bl	800767c <RCCEx_PLL2_Config>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005f5a:	e013      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f60:	3328      	adds	r3, #40	; 0x28
 8005f62:	2100      	movs	r1, #0
 8005f64:	4618      	mov	r0, r3
 8005f66:	f001 fc3b 	bl	80077e0 <RCCEx_PLL3_Config>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005f70:	e008      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005f78:	e004      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005f7a:	bf00      	nop
 8005f7c:	e002      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005f7e:	bf00      	nop
 8005f80:	e000      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10a      	bne.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005f8c:	4b3a      	ldr	r3, [pc, #232]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f90:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f9a:	4a37      	ldr	r2, [pc, #220]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f9c:	430b      	orrs	r3, r1
 8005f9e:	6513      	str	r3, [r2, #80]	; 0x50
 8005fa0:	e003      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fa6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005fb6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005fba:	2300      	movs	r3, #0
 8005fbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005fc0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	d05c      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005fd4:	d03b      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005fd6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005fda:	d834      	bhi.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fe0:	d037      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fe6:	d82e      	bhi.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005fe8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005fec:	d033      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005fee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005ff2:	d828      	bhi.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff8:	d01a      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ffe:	d822      	bhi.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006008:	d007      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800600a:	e01c      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800600c:	4b1a      	ldr	r3, [pc, #104]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	4a19      	ldr	r2, [pc, #100]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006016:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006018:	e01e      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800601a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800601e:	3308      	adds	r3, #8
 8006020:	2100      	movs	r1, #0
 8006022:	4618      	mov	r0, r3
 8006024:	f001 fb2a 	bl	800767c <RCCEx_PLL2_Config>
 8006028:	4603      	mov	r3, r0
 800602a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800602e:	e013      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006034:	3328      	adds	r3, #40	; 0x28
 8006036:	2100      	movs	r1, #0
 8006038:	4618      	mov	r0, r3
 800603a:	f001 fbd1 	bl	80077e0 <RCCEx_PLL3_Config>
 800603e:	4603      	mov	r3, r0
 8006040:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8006044:	e008      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800604c:	e004      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800604e:	bf00      	nop
 8006050:	e002      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006052:	bf00      	nop
 8006054:	e000      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8006056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006058:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10d      	bne.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006060:	4b05      	ldr	r3, [pc, #20]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006064:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8006068:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800606c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800606e:	4a02      	ldr	r2, [pc, #8]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006070:	430b      	orrs	r3, r1
 8006072:	6513      	str	r3, [r2, #80]	; 0x50
 8006074:	e006      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8006076:	bf00      	nop
 8006078:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800607c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006080:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006084:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006090:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006094:	2300      	movs	r3, #0
 8006096:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800609a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800609e:	460b      	mov	r3, r1
 80060a0:	4313      	orrs	r3, r2
 80060a2:	d03a      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80060a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060aa:	2b30      	cmp	r3, #48	; 0x30
 80060ac:	d01f      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80060ae:	2b30      	cmp	r3, #48	; 0x30
 80060b0:	d819      	bhi.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	d00c      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	d815      	bhi.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d019      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80060be:	2b10      	cmp	r3, #16
 80060c0:	d111      	bne.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c2:	4bae      	ldr	r3, [pc, #696]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	4aad      	ldr	r2, [pc, #692]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80060ce:	e011      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060d4:	3308      	adds	r3, #8
 80060d6:	2102      	movs	r1, #2
 80060d8:	4618      	mov	r0, r3
 80060da:	f001 facf 	bl	800767c <RCCEx_PLL2_Config>
 80060de:	4603      	mov	r3, r0
 80060e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80060e4:	e006      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80060ec:	e002      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80060ee:	bf00      	nop
 80060f0:	e000      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80060f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10a      	bne.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80060fc:	4b9f      	ldr	r3, [pc, #636]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006100:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800610a:	4a9c      	ldr	r2, [pc, #624]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800610c:	430b      	orrs	r3, r1
 800610e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006110:	e003      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006112:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006116:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800611a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006122:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006126:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800612a:	2300      	movs	r3, #0
 800612c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006130:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006134:	460b      	mov	r3, r1
 8006136:	4313      	orrs	r3, r2
 8006138:	d051      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800613a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800613e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006140:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006144:	d035      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006146:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800614a:	d82e      	bhi.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x426>
 800614c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006150:	d031      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8006152:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006156:	d828      	bhi.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800615c:	d01a      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800615e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006162:	d822      	bhi.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8006168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616c:	d007      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800616e:	e01c      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006170:	4b82      	ldr	r3, [pc, #520]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006174:	4a81      	ldr	r2, [pc, #516]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800617a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800617c:	e01c      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800617e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006182:	3308      	adds	r3, #8
 8006184:	2100      	movs	r1, #0
 8006186:	4618      	mov	r0, r3
 8006188:	f001 fa78 	bl	800767c <RCCEx_PLL2_Config>
 800618c:	4603      	mov	r3, r0
 800618e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006192:	e011      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006198:	3328      	adds	r3, #40	; 0x28
 800619a:	2100      	movs	r1, #0
 800619c:	4618      	mov	r0, r3
 800619e:	f001 fb1f 	bl	80077e0 <RCCEx_PLL3_Config>
 80061a2:	4603      	mov	r3, r0
 80061a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061a8:	e006      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80061b0:	e002      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80061b2:	bf00      	nop
 80061b4:	e000      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80061b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10a      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80061c0:	4b6e      	ldr	r3, [pc, #440]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80061c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061ce:	4a6b      	ldr	r2, [pc, #428]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061d0:	430b      	orrs	r3, r1
 80061d2:	6513      	str	r3, [r2, #80]	; 0x50
 80061d4:	e003      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80061de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80061ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061ee:	2300      	movs	r3, #0
 80061f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80061f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80061f8:	460b      	mov	r3, r1
 80061fa:	4313      	orrs	r3, r2
 80061fc:	d053      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80061fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006208:	d033      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800620a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800620e:	d82c      	bhi.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006210:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006214:	d02f      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8006216:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800621a:	d826      	bhi.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800621c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006220:	d02b      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006222:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006226:	d820      	bhi.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800622c:	d012      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800622e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006232:	d81a      	bhi.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006234:	2b00      	cmp	r3, #0
 8006236:	d022      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800623c:	d115      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800623e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006242:	3308      	adds	r3, #8
 8006244:	2101      	movs	r1, #1
 8006246:	4618      	mov	r0, r3
 8006248:	f001 fa18 	bl	800767c <RCCEx_PLL2_Config>
 800624c:	4603      	mov	r3, r0
 800624e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006252:	e015      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006258:	3328      	adds	r3, #40	; 0x28
 800625a:	2101      	movs	r1, #1
 800625c:	4618      	mov	r0, r3
 800625e:	f001 fabf 	bl	80077e0 <RCCEx_PLL3_Config>
 8006262:	4603      	mov	r3, r0
 8006264:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006268:	e00a      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006270:	e006      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006272:	bf00      	nop
 8006274:	e004      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8006276:	bf00      	nop
 8006278:	e002      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800627a:	bf00      	nop
 800627c:	e000      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800627e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006280:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10a      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006288:	4b3c      	ldr	r3, [pc, #240]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800628a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800628c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006296:	4a39      	ldr	r2, [pc, #228]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006298:	430b      	orrs	r3, r1
 800629a:	6513      	str	r3, [r2, #80]	; 0x50
 800629c:	e003      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80062a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80062a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ae:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80062b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062b6:	2300      	movs	r3, #0
 80062b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062bc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80062c0:	460b      	mov	r3, r1
 80062c2:	4313      	orrs	r3, r2
 80062c4:	d060      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80062c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062ce:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80062d2:	d039      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80062d4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80062d8:	d832      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80062da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062de:	d035      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80062e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062e4:	d82c      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80062e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ea:	d031      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80062ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f0:	d826      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80062f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062f6:	d02d      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80062f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062fc:	d820      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80062fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006302:	d012      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006308:	d81a      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800630a:	2b00      	cmp	r3, #0
 800630c:	d024      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800630e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006312:	d115      	bne.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006318:	3308      	adds	r3, #8
 800631a:	2101      	movs	r1, #1
 800631c:	4618      	mov	r0, r3
 800631e:	f001 f9ad 	bl	800767c <RCCEx_PLL2_Config>
 8006322:	4603      	mov	r3, r0
 8006324:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006328:	e017      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800632a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800632e:	3328      	adds	r3, #40	; 0x28
 8006330:	2101      	movs	r1, #1
 8006332:	4618      	mov	r0, r3
 8006334:	f001 fa54 	bl	80077e0 <RCCEx_PLL3_Config>
 8006338:	4603      	mov	r3, r0
 800633a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800633e:	e00c      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006346:	e008      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006348:	bf00      	nop
 800634a:	e006      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800634c:	bf00      	nop
 800634e:	e004      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006350:	bf00      	nop
 8006352:	e002      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006354:	bf00      	nop
 8006356:	e000      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800635a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10e      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006362:	4b06      	ldr	r3, [pc, #24]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006366:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800636a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800636e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006372:	4a02      	ldr	r2, [pc, #8]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006374:	430b      	orrs	r3, r1
 8006376:	6593      	str	r3, [r2, #88]	; 0x58
 8006378:	e006      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800637a:	bf00      	nop
 800637c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006380:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006384:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006394:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006398:	2300      	movs	r3, #0
 800639a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800639e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063a2:	460b      	mov	r3, r1
 80063a4:	4313      	orrs	r3, r2
 80063a6:	d037      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80063a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063b2:	d00e      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80063b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063b8:	d816      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d018      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80063be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063c2:	d111      	bne.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063c4:	4bc4      	ldr	r3, [pc, #784]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	4ac3      	ldr	r2, [pc, #780]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80063d0:	e00f      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063d6:	3308      	adds	r3, #8
 80063d8:	2101      	movs	r1, #1
 80063da:	4618      	mov	r0, r3
 80063dc:	f001 f94e 	bl	800767c <RCCEx_PLL2_Config>
 80063e0:	4603      	mov	r3, r0
 80063e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80063e6:	e004      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80063ee:	e000      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80063f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10a      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80063fa:	4bb7      	ldr	r3, [pc, #732]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063fe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006406:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006408:	4ab3      	ldr	r2, [pc, #716]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800640a:	430b      	orrs	r3, r1
 800640c:	6513      	str	r3, [r2, #80]	; 0x50
 800640e:	e003      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006410:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006414:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006424:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006428:	2300      	movs	r3, #0
 800642a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800642e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006432:	460b      	mov	r3, r1
 8006434:	4313      	orrs	r3, r2
 8006436:	d039      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006438:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800643c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800643e:	2b03      	cmp	r3, #3
 8006440:	d81c      	bhi.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006442:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006448:	08006485 	.word	0x08006485
 800644c:	08006459 	.word	0x08006459
 8006450:	08006467 	.word	0x08006467
 8006454:	08006485 	.word	0x08006485
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006458:	4b9f      	ldr	r3, [pc, #636]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	4a9e      	ldr	r2, [pc, #632]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800645e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006462:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006464:	e00f      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800646a:	3308      	adds	r3, #8
 800646c:	2102      	movs	r1, #2
 800646e:	4618      	mov	r0, r3
 8006470:	f001 f904 	bl	800767c <RCCEx_PLL2_Config>
 8006474:	4603      	mov	r3, r0
 8006476:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800647a:	e004      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006482:	e000      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006484:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006486:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10a      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800648e:	4b92      	ldr	r3, [pc, #584]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006492:	f023 0103 	bic.w	r1, r3, #3
 8006496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800649a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800649c:	4a8e      	ldr	r2, [pc, #568]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800649e:	430b      	orrs	r3, r1
 80064a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064a2:	e003      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80064a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80064b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064bc:	2300      	movs	r3, #0
 80064be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80064c6:	460b      	mov	r3, r1
 80064c8:	4313      	orrs	r3, r2
 80064ca:	f000 8099 	beq.w	8006600 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064ce:	4b83      	ldr	r3, [pc, #524]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a82      	ldr	r2, [pc, #520]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80064d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064da:	f7fb fe9f 	bl	800221c <HAL_GetTick>
 80064de:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064e2:	e00b      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064e4:	f7fb fe9a 	bl	800221c <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b64      	cmp	r3, #100	; 0x64
 80064f2:	d903      	bls.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80064fa:	e005      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064fc:	4b77      	ldr	r3, [pc, #476]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006504:	2b00      	cmp	r3, #0
 8006506:	d0ed      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006508:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800650c:	2b00      	cmp	r3, #0
 800650e:	d173      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006510:	4b71      	ldr	r3, [pc, #452]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006512:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006518:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800651c:	4053      	eors	r3, r2
 800651e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006522:	2b00      	cmp	r3, #0
 8006524:	d015      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006526:	4b6c      	ldr	r3, [pc, #432]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800652e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006532:	4b69      	ldr	r3, [pc, #420]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006536:	4a68      	ldr	r2, [pc, #416]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800653c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800653e:	4b66      	ldr	r3, [pc, #408]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006542:	4a65      	ldr	r2, [pc, #404]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006548:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800654a:	4a63      	ldr	r2, [pc, #396]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800654c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006550:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006556:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800655a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800655e:	d118      	bne.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006560:	f7fb fe5c 	bl	800221c <HAL_GetTick>
 8006564:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006568:	e00d      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800656a:	f7fb fe57 	bl	800221c <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006574:	1ad2      	subs	r2, r2, r3
 8006576:	f241 3388 	movw	r3, #5000	; 0x1388
 800657a:	429a      	cmp	r2, r3
 800657c:	d903      	bls.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8006584:	e005      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006586:	4b54      	ldr	r3, [pc, #336]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0eb      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006592:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006596:	2b00      	cmp	r3, #0
 8006598:	d129      	bne.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800659a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800659e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80065a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065aa:	d10e      	bne.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x846>
 80065ac:	4b4a      	ldr	r3, [pc, #296]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80065b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80065bc:	091a      	lsrs	r2, r3, #4
 80065be:	4b48      	ldr	r3, [pc, #288]	; (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	4a45      	ldr	r2, [pc, #276]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065c4:	430b      	orrs	r3, r1
 80065c6:	6113      	str	r3, [r2, #16]
 80065c8:	e005      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80065ca:	4b43      	ldr	r3, [pc, #268]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	4a42      	ldr	r2, [pc, #264]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80065d4:	6113      	str	r3, [r2, #16]
 80065d6:	4b40      	ldr	r3, [pc, #256]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80065da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80065e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065e6:	4a3c      	ldr	r2, [pc, #240]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80065e8:	430b      	orrs	r3, r1
 80065ea:	6713      	str	r3, [r2, #112]	; 0x70
 80065ec:	e008      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80065f6:	e003      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006608:	f002 0301 	and.w	r3, r2, #1
 800660c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006610:	2300      	movs	r3, #0
 8006612:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006616:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800661a:	460b      	mov	r3, r1
 800661c:	4313      	orrs	r3, r2
 800661e:	f000 8090 	beq.w	8006742 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800662a:	2b28      	cmp	r3, #40	; 0x28
 800662c:	d870      	bhi.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800662e:	a201      	add	r2, pc, #4	; (adr r2, 8006634 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006634:	08006719 	.word	0x08006719
 8006638:	08006711 	.word	0x08006711
 800663c:	08006711 	.word	0x08006711
 8006640:	08006711 	.word	0x08006711
 8006644:	08006711 	.word	0x08006711
 8006648:	08006711 	.word	0x08006711
 800664c:	08006711 	.word	0x08006711
 8006650:	08006711 	.word	0x08006711
 8006654:	080066e5 	.word	0x080066e5
 8006658:	08006711 	.word	0x08006711
 800665c:	08006711 	.word	0x08006711
 8006660:	08006711 	.word	0x08006711
 8006664:	08006711 	.word	0x08006711
 8006668:	08006711 	.word	0x08006711
 800666c:	08006711 	.word	0x08006711
 8006670:	08006711 	.word	0x08006711
 8006674:	080066fb 	.word	0x080066fb
 8006678:	08006711 	.word	0x08006711
 800667c:	08006711 	.word	0x08006711
 8006680:	08006711 	.word	0x08006711
 8006684:	08006711 	.word	0x08006711
 8006688:	08006711 	.word	0x08006711
 800668c:	08006711 	.word	0x08006711
 8006690:	08006711 	.word	0x08006711
 8006694:	08006719 	.word	0x08006719
 8006698:	08006711 	.word	0x08006711
 800669c:	08006711 	.word	0x08006711
 80066a0:	08006711 	.word	0x08006711
 80066a4:	08006711 	.word	0x08006711
 80066a8:	08006711 	.word	0x08006711
 80066ac:	08006711 	.word	0x08006711
 80066b0:	08006711 	.word	0x08006711
 80066b4:	08006719 	.word	0x08006719
 80066b8:	08006711 	.word	0x08006711
 80066bc:	08006711 	.word	0x08006711
 80066c0:	08006711 	.word	0x08006711
 80066c4:	08006711 	.word	0x08006711
 80066c8:	08006711 	.word	0x08006711
 80066cc:	08006711 	.word	0x08006711
 80066d0:	08006711 	.word	0x08006711
 80066d4:	08006719 	.word	0x08006719
 80066d8:	58024400 	.word	0x58024400
 80066dc:	58024800 	.word	0x58024800
 80066e0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066e8:	3308      	adds	r3, #8
 80066ea:	2101      	movs	r1, #1
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 ffc5 	bl	800767c <RCCEx_PLL2_Config>
 80066f2:	4603      	mov	r3, r0
 80066f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80066f8:	e00f      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066fe:	3328      	adds	r3, #40	; 0x28
 8006700:	2101      	movs	r1, #1
 8006702:	4618      	mov	r0, r3
 8006704:	f001 f86c 	bl	80077e0 <RCCEx_PLL3_Config>
 8006708:	4603      	mov	r3, r0
 800670a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800670e:	e004      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006716:	e000      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006718:	bf00      	nop
    }

    if (ret == HAL_OK)
 800671a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10b      	bne.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006722:	4bc0      	ldr	r3, [pc, #768]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006726:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800672a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800672e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006732:	4abc      	ldr	r2, [pc, #752]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006734:	430b      	orrs	r3, r1
 8006736:	6553      	str	r3, [r2, #84]	; 0x54
 8006738:	e003      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800673e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674a:	f002 0302 	and.w	r3, r2, #2
 800674e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006752:	2300      	movs	r3, #0
 8006754:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006758:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800675c:	460b      	mov	r3, r1
 800675e:	4313      	orrs	r3, r2
 8006760:	d043      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800676a:	2b05      	cmp	r3, #5
 800676c:	d824      	bhi.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800676e:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8006770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006774:	080067c1 	.word	0x080067c1
 8006778:	0800678d 	.word	0x0800678d
 800677c:	080067a3 	.word	0x080067a3
 8006780:	080067c1 	.word	0x080067c1
 8006784:	080067c1 	.word	0x080067c1
 8006788:	080067c1 	.word	0x080067c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800678c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006790:	3308      	adds	r3, #8
 8006792:	2101      	movs	r1, #1
 8006794:	4618      	mov	r0, r3
 8006796:	f000 ff71 	bl	800767c <RCCEx_PLL2_Config>
 800679a:	4603      	mov	r3, r0
 800679c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80067a0:	e00f      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067a6:	3328      	adds	r3, #40	; 0x28
 80067a8:	2101      	movs	r1, #1
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 f818 	bl	80077e0 <RCCEx_PLL3_Config>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80067b6:	e004      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80067be:	e000      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80067c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10b      	bne.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80067ca:	4b96      	ldr	r3, [pc, #600]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80067cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ce:	f023 0107 	bic.w	r1, r3, #7
 80067d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067da:	4a92      	ldr	r2, [pc, #584]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80067dc:	430b      	orrs	r3, r1
 80067de:	6553      	str	r3, [r2, #84]	; 0x54
 80067e0:	e003      	b.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80067e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f2:	f002 0304 	and.w	r3, r2, #4
 80067f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067fa:	2300      	movs	r3, #0
 80067fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006800:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006804:	460b      	mov	r3, r1
 8006806:	4313      	orrs	r3, r2
 8006808:	d043      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800680a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800680e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006812:	2b05      	cmp	r3, #5
 8006814:	d824      	bhi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006816:	a201      	add	r2, pc, #4	; (adr r2, 800681c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681c:	08006869 	.word	0x08006869
 8006820:	08006835 	.word	0x08006835
 8006824:	0800684b 	.word	0x0800684b
 8006828:	08006869 	.word	0x08006869
 800682c:	08006869 	.word	0x08006869
 8006830:	08006869 	.word	0x08006869
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006838:	3308      	adds	r3, #8
 800683a:	2101      	movs	r1, #1
 800683c:	4618      	mov	r0, r3
 800683e:	f000 ff1d 	bl	800767c <RCCEx_PLL2_Config>
 8006842:	4603      	mov	r3, r0
 8006844:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006848:	e00f      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800684a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800684e:	3328      	adds	r3, #40	; 0x28
 8006850:	2101      	movs	r1, #1
 8006852:	4618      	mov	r0, r3
 8006854:	f000 ffc4 	bl	80077e0 <RCCEx_PLL3_Config>
 8006858:	4603      	mov	r3, r0
 800685a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800685e:	e004      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006866:	e000      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800686a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10b      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006872:	4b6c      	ldr	r3, [pc, #432]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006876:	f023 0107 	bic.w	r1, r3, #7
 800687a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800687e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006882:	4a68      	ldr	r2, [pc, #416]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006884:	430b      	orrs	r3, r1
 8006886:	6593      	str	r3, [r2, #88]	; 0x58
 8006888:	e003      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800688a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800688e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	f002 0320 	and.w	r3, r2, #32
 800689e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068a2:	2300      	movs	r3, #0
 80068a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80068ac:	460b      	mov	r3, r1
 80068ae:	4313      	orrs	r3, r2
 80068b0:	d055      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80068b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068be:	d033      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80068c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068c4:	d82c      	bhi.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80068c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ca:	d02f      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80068cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d0:	d826      	bhi.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80068d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80068d6:	d02b      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80068d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80068dc:	d820      	bhi.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80068de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068e2:	d012      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80068e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068e8:	d81a      	bhi.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d022      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80068ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068f2:	d115      	bne.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068f8:	3308      	adds	r3, #8
 80068fa:	2100      	movs	r1, #0
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 febd 	bl	800767c <RCCEx_PLL2_Config>
 8006902:	4603      	mov	r3, r0
 8006904:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006908:	e015      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800690a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800690e:	3328      	adds	r3, #40	; 0x28
 8006910:	2102      	movs	r1, #2
 8006912:	4618      	mov	r0, r3
 8006914:	f000 ff64 	bl	80077e0 <RCCEx_PLL3_Config>
 8006918:	4603      	mov	r3, r0
 800691a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800691e:	e00a      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006926:	e006      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006928:	bf00      	nop
 800692a:	e004      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800692c:	bf00      	nop
 800692e:	e002      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006930:	bf00      	nop
 8006932:	e000      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006936:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10b      	bne.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800693e:	4b39      	ldr	r3, [pc, #228]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006942:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800694a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800694e:	4a35      	ldr	r2, [pc, #212]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006950:	430b      	orrs	r3, r1
 8006952:	6553      	str	r3, [r2, #84]	; 0x54
 8006954:	e003      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006956:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800695a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800695e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006966:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800696a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800696e:	2300      	movs	r3, #0
 8006970:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006974:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006978:	460b      	mov	r3, r1
 800697a:	4313      	orrs	r3, r2
 800697c:	d058      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800697e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006982:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006986:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800698a:	d033      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800698c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006990:	d82c      	bhi.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006996:	d02f      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800699c:	d826      	bhi.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800699e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069a2:	d02b      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80069a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069a8:	d820      	bhi.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80069aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ae:	d012      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80069b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069b4:	d81a      	bhi.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d022      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80069ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069be:	d115      	bne.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069c4:	3308      	adds	r3, #8
 80069c6:	2100      	movs	r1, #0
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 fe57 	bl	800767c <RCCEx_PLL2_Config>
 80069ce:	4603      	mov	r3, r0
 80069d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80069d4:	e015      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069da:	3328      	adds	r3, #40	; 0x28
 80069dc:	2102      	movs	r1, #2
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 fefe 	bl	80077e0 <RCCEx_PLL3_Config>
 80069e4:	4603      	mov	r3, r0
 80069e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80069ea:	e00a      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80069f2:	e006      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80069f4:	bf00      	nop
 80069f6:	e004      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80069f8:	bf00      	nop
 80069fa:	e002      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80069fc:	bf00      	nop
 80069fe:	e000      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006a00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10e      	bne.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a0a:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a0e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a1a:	4a02      	ldr	r2, [pc, #8]	; (8006a24 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006a1c:	430b      	orrs	r3, r1
 8006a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8006a20:	e006      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8006a22:	bf00      	nop
 8006a24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006a3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a40:	2300      	movs	r3, #0
 8006a42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a46:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	d055      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a58:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006a5c:	d033      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006a5e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006a62:	d82c      	bhi.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a68:	d02f      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a6e:	d826      	bhi.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006a70:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a74:	d02b      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006a76:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a7a:	d820      	bhi.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006a7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a80:	d012      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8006a82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a86:	d81a      	bhi.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d022      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a90:	d115      	bne.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a96:	3308      	adds	r3, #8
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fdee 	bl	800767c <RCCEx_PLL2_Config>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006aa6:	e015      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aac:	3328      	adds	r3, #40	; 0x28
 8006aae:	2102      	movs	r1, #2
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 fe95 	bl	80077e0 <RCCEx_PLL3_Config>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006abc:	e00a      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006ac4:	e006      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006ac6:	bf00      	nop
 8006ac8:	e004      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006aca:	bf00      	nop
 8006acc:	e002      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006ace:	bf00      	nop
 8006ad0:	e000      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006ad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ad4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10b      	bne.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006adc:	4ba1      	ldr	r3, [pc, #644]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ae8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006aec:	4a9d      	ldr	r2, [pc, #628]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006aee:	430b      	orrs	r3, r1
 8006af0:	6593      	str	r3, [r2, #88]	; 0x58
 8006af2:	e003      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006af8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b04:	f002 0308 	and.w	r3, r2, #8
 8006b08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006b16:	460b      	mov	r3, r1
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	d01e      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b28:	d10c      	bne.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b2e:	3328      	adds	r3, #40	; 0x28
 8006b30:	2102      	movs	r1, #2
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fe54 	bl	80077e0 <RCCEx_PLL3_Config>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006b44:	4b87      	ldr	r3, [pc, #540]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b54:	4a83      	ldr	r2, [pc, #524]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006b56:	430b      	orrs	r3, r1
 8006b58:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b62:	f002 0310 	and.w	r3, r2, #16
 8006b66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006b70:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006b74:	460b      	mov	r3, r1
 8006b76:	4313      	orrs	r3, r2
 8006b78:	d01e      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b86:	d10c      	bne.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b8c:	3328      	adds	r3, #40	; 0x28
 8006b8e:	2102      	movs	r1, #2
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 fe25 	bl	80077e0 <RCCEx_PLL3_Config>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ba2:	4b70      	ldr	r3, [pc, #448]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006bb2:	4a6c      	ldr	r2, [pc, #432]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006bb4:	430b      	orrs	r3, r1
 8006bb6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006bc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	d03e      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bdc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006be4:	d022      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006be6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bea:	d81b      	bhi.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bf4:	d00b      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8006bf6:	e015      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bfc:	3308      	adds	r3, #8
 8006bfe:	2100      	movs	r1, #0
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 fd3b 	bl	800767c <RCCEx_PLL2_Config>
 8006c06:	4603      	mov	r3, r0
 8006c08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c0c:	e00f      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c12:	3328      	adds	r3, #40	; 0x28
 8006c14:	2102      	movs	r1, #2
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 fde2 	bl	80077e0 <RCCEx_PLL3_Config>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c22:	e004      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006c2a:	e000      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10b      	bne.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c36:	4b4b      	ldr	r3, [pc, #300]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c46:	4a47      	ldr	r2, [pc, #284]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	6593      	str	r3, [r2, #88]	; 0x58
 8006c4c:	e003      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006c52:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006c62:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c64:	2300      	movs	r3, #0
 8006c66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c68:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	d03b      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c7e:	d01f      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8006c80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c84:	d818      	bhi.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c8a:	d003      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006c8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c90:	d007      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8006c92:	e011      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c94:	4b33      	ldr	r3, [pc, #204]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c98:	4a32      	ldr	r2, [pc, #200]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006ca0:	e00f      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ca6:	3328      	adds	r3, #40	; 0x28
 8006ca8:	2101      	movs	r1, #1
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 fd98 	bl	80077e0 <RCCEx_PLL3_Config>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006cb6:	e004      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006cbe:	e000      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8006cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cc2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10b      	bne.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cca:	4b26      	ldr	r3, [pc, #152]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cda:	4a22      	ldr	r2, [pc, #136]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006cdc:	430b      	orrs	r3, r1
 8006cde:	6553      	str	r3, [r2, #84]	; 0x54
 8006ce0:	e003      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ce6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006cf6:	673b      	str	r3, [r7, #112]	; 0x70
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	677b      	str	r3, [r7, #116]	; 0x74
 8006cfc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006d00:	460b      	mov	r3, r1
 8006d02:	4313      	orrs	r3, r2
 8006d04:	d034      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d003      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d14:	d007      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8006d16:	e011      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d18:	4b12      	ldr	r3, [pc, #72]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1c:	4a11      	ldr	r2, [pc, #68]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d24:	e00e      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d2a:	3308      	adds	r3, #8
 8006d2c:	2102      	movs	r1, #2
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 fca4 	bl	800767c <RCCEx_PLL2_Config>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d3a:	e003      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10d      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d4c:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d5a:	4a02      	ldr	r2, [pc, #8]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d60:	e006      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006d62:	bf00      	nop
 8006d64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006d6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d78:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006d7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d7e:	2300      	movs	r3, #0
 8006d80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d82:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006d86:	460b      	mov	r3, r1
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	d00c      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d90:	3328      	adds	r3, #40	; 0x28
 8006d92:	2102      	movs	r1, #2
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 fd23 	bl	80077e0 <RCCEx_PLL3_Config>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006db2:	663b      	str	r3, [r7, #96]	; 0x60
 8006db4:	2300      	movs	r3, #0
 8006db6:	667b      	str	r3, [r7, #100]	; 0x64
 8006db8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	d038      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dce:	d018      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006dd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dd4:	d811      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dda:	d014      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de0:	d80b      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d011      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dea:	d106      	bne.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dec:	4bc3      	ldr	r3, [pc, #780]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	4ac2      	ldr	r2, [pc, #776]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006df6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006df8:	e008      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006e00:	e004      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006e02:	bf00      	nop
 8006e04:	e002      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006e06:	bf00      	nop
 8006e08:	e000      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10b      	bne.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e14:	4bb9      	ldr	r3, [pc, #740]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e18:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e24:	4ab5      	ldr	r2, [pc, #724]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e26:	430b      	orrs	r3, r1
 8006e28:	6553      	str	r3, [r2, #84]	; 0x54
 8006e2a:	e003      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006e30:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006e40:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e42:	2300      	movs	r3, #0
 8006e44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e46:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	d009      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e50:	4baa      	ldr	r3, [pc, #680]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e54:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e5e:	4aa7      	ldr	r2, [pc, #668]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e60:	430b      	orrs	r3, r1
 8006e62:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006e70:	653b      	str	r3, [r7, #80]	; 0x50
 8006e72:	2300      	movs	r3, #0
 8006e74:	657b      	str	r3, [r7, #84]	; 0x54
 8006e76:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	d009      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e80:	4b9e      	ldr	r3, [pc, #632]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e84:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8e:	4a9b      	ldr	r2, [pc, #620]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006e90:	430b      	orrs	r3, r1
 8006e92:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006ea0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ea6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4313      	orrs	r3, r2
 8006eae:	d009      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006eb0:	4b92      	ldr	r3, [pc, #584]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb4:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8006eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ebe:	4a8f      	ldr	r2, [pc, #572]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ec0:	430b      	orrs	r3, r1
 8006ec2:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006ed0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ed6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006eda:	460b      	mov	r3, r1
 8006edc:	4313      	orrs	r3, r2
 8006ede:	d00e      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ee0:	4b86      	ldr	r3, [pc, #536]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	4a85      	ldr	r2, [pc, #532]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006ee6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006eea:	6113      	str	r3, [r2, #16]
 8006eec:	4b83      	ldr	r3, [pc, #524]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006eee:	6919      	ldr	r1, [r3, #16]
 8006ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ef4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006ef8:	4a80      	ldr	r2, [pc, #512]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006efa:	430b      	orrs	r3, r1
 8006efc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f06:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f10:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006f14:	460b      	mov	r3, r1
 8006f16:	4313      	orrs	r3, r2
 8006f18:	d009      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f1a:	4b78      	ldr	r3, [pc, #480]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f1e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f28:	4a74      	ldr	r2, [pc, #464]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006f2a:	430b      	orrs	r3, r1
 8006f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f36:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006f3a:	633b      	str	r3, [r7, #48]	; 0x30
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f40:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006f44:	460b      	mov	r3, r1
 8006f46:	4313      	orrs	r3, r2
 8006f48:	d00a      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f4a:	4b6c      	ldr	r3, [pc, #432]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f5a:	4a68      	ldr	r2, [pc, #416]	; (80070fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006f5c:	430b      	orrs	r3, r1
 8006f5e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	2100      	movs	r1, #0
 8006f6a:	62b9      	str	r1, [r7, #40]	; 0x28
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f72:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006f76:	460b      	mov	r3, r1
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	d011      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f80:	3308      	adds	r3, #8
 8006f82:	2100      	movs	r1, #0
 8006f84:	4618      	mov	r0, r3
 8006f86:	f000 fb79 	bl	800767c <RCCEx_PLL2_Config>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006f90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d003      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006f9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	2100      	movs	r1, #0
 8006faa:	6239      	str	r1, [r7, #32]
 8006fac:	f003 0302 	and.w	r3, r3, #2
 8006fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fb2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	d011      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fc0:	3308      	adds	r3, #8
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 fb59 	bl	800767c <RCCEx_PLL2_Config>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006fd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006fdc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe8:	2100      	movs	r1, #0
 8006fea:	61b9      	str	r1, [r7, #24]
 8006fec:	f003 0304 	and.w	r3, r3, #4
 8006ff0:	61fb      	str	r3, [r7, #28]
 8006ff2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	d011      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007000:	3308      	adds	r3, #8
 8007002:	2102      	movs	r1, #2
 8007004:	4618      	mov	r0, r3
 8007006:	f000 fb39 	bl	800767c <RCCEx_PLL2_Config>
 800700a:	4603      	mov	r3, r0
 800700c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007010:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007014:	2b00      	cmp	r3, #0
 8007016:	d003      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007018:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800701c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007020:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	2100      	movs	r1, #0
 800702a:	6139      	str	r1, [r7, #16]
 800702c:	f003 0308 	and.w	r3, r3, #8
 8007030:	617b      	str	r3, [r7, #20]
 8007032:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007036:	460b      	mov	r3, r1
 8007038:	4313      	orrs	r3, r2
 800703a:	d011      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800703c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007040:	3328      	adds	r3, #40	; 0x28
 8007042:	2100      	movs	r1, #0
 8007044:	4618      	mov	r0, r3
 8007046:	f000 fbcb 	bl	80077e0 <RCCEx_PLL3_Config>
 800704a:	4603      	mov	r3, r0
 800704c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8007050:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007054:	2b00      	cmp	r3, #0
 8007056:	d003      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007058:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800705c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007068:	2100      	movs	r1, #0
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	f003 0310 	and.w	r3, r3, #16
 8007070:	60fb      	str	r3, [r7, #12]
 8007072:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007076:	460b      	mov	r3, r1
 8007078:	4313      	orrs	r3, r2
 800707a:	d011      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800707c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007080:	3328      	adds	r3, #40	; 0x28
 8007082:	2101      	movs	r1, #1
 8007084:	4618      	mov	r0, r3
 8007086:	f000 fbab 	bl	80077e0 <RCCEx_PLL3_Config>
 800708a:	4603      	mov	r3, r0
 800708c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8007090:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007094:	2b00      	cmp	r3, #0
 8007096:	d003      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007098:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800709c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80070a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a8:	2100      	movs	r1, #0
 80070aa:	6039      	str	r1, [r7, #0]
 80070ac:	f003 0320 	and.w	r3, r3, #32
 80070b0:	607b      	str	r3, [r7, #4]
 80070b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80070b6:	460b      	mov	r3, r1
 80070b8:	4313      	orrs	r3, r2
 80070ba:	d011      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070c0:	3328      	adds	r3, #40	; 0x28
 80070c2:	2102      	movs	r1, #2
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 fb8b 	bl	80077e0 <RCCEx_PLL3_Config>
 80070ca:	4603      	mov	r3, r0
 80070cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80070d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80070dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80070e0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	e000      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80070f4:	46bd      	mov	sp, r7
 80070f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070fa:	bf00      	nop
 80070fc:	58024400 	.word	0x58024400

08007100 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007104:	f7fe fde2 	bl	8005ccc <HAL_RCC_GetHCLKFreq>
 8007108:	4602      	mov	r2, r0
 800710a:	4b06      	ldr	r3, [pc, #24]	; (8007124 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	091b      	lsrs	r3, r3, #4
 8007110:	f003 0307 	and.w	r3, r3, #7
 8007114:	4904      	ldr	r1, [pc, #16]	; (8007128 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007116:	5ccb      	ldrb	r3, [r1, r3]
 8007118:	f003 031f 	and.w	r3, r3, #31
 800711c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007120:	4618      	mov	r0, r3
 8007122:	bd80      	pop	{r7, pc}
 8007124:	58024400 	.word	0x58024400
 8007128:	0800d4ec 	.word	0x0800d4ec

0800712c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800712c:	b480      	push	{r7}
 800712e:	b089      	sub	sp, #36	; 0x24
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007134:	4ba1      	ldr	r3, [pc, #644]	; (80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007138:	f003 0303 	and.w	r3, r3, #3
 800713c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800713e:	4b9f      	ldr	r3, [pc, #636]	; (80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007142:	0b1b      	lsrs	r3, r3, #12
 8007144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007148:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800714a:	4b9c      	ldr	r3, [pc, #624]	; (80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800714c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714e:	091b      	lsrs	r3, r3, #4
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007156:	4b99      	ldr	r3, [pc, #612]	; (80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715a:	08db      	lsrs	r3, r3, #3
 800715c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	fb02 f303 	mul.w	r3, r2, r3
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 8111 	beq.w	800739c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	2b02      	cmp	r3, #2
 800717e:	f000 8083 	beq.w	8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	2b02      	cmp	r3, #2
 8007186:	f200 80a1 	bhi.w	80072cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d056      	beq.n	8007244 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007196:	e099      	b.n	80072cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007198:	4b88      	ldr	r3, [pc, #544]	; (80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0320 	and.w	r3, r3, #32
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d02d      	beq.n	8007200 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071a4:	4b85      	ldr	r3, [pc, #532]	; (80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	08db      	lsrs	r3, r3, #3
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	4a84      	ldr	r2, [pc, #528]	; (80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80071b0:	fa22 f303 	lsr.w	r3, r2, r3
 80071b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	ee07 3a90 	vmov	s15, r3
 80071bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ce:	4b7b      	ldr	r3, [pc, #492]	; (80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071de:	ed97 6a03 	vldr	s12, [r7, #12]
 80071e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80071fe:	e087      	b.n	8007310 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80073c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800720e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007212:	4b6a      	ldr	r3, [pc, #424]	; (80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007222:	ed97 6a03 	vldr	s12, [r7, #12]
 8007226:	eddf 5a67 	vldr	s11, [pc, #412]	; 80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800722a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800722e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800723a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800723e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007242:	e065      	b.n	8007310 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	ee07 3a90 	vmov	s15, r3
 800724a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007256:	4b59      	ldr	r3, [pc, #356]	; (80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007266:	ed97 6a03 	vldr	s12, [r7, #12]
 800726a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800726e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800727a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800727e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007282:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007286:	e043      	b.n	8007310 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007292:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800729a:	4b48      	ldr	r3, [pc, #288]	; (80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800729c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ca:	e021      	b.n	8007310 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072de:	4b37      	ldr	r3, [pc, #220]	; (80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80072f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800730e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007310:	4b2a      	ldr	r3, [pc, #168]	; (80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007314:	0a5b      	lsrs	r3, r3, #9
 8007316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731a:	ee07 3a90 	vmov	s15, r3
 800731e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007322:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007326:	ee37 7a87 	vadd.f32	s14, s15, s14
 800732a:	edd7 6a07 	vldr	s13, [r7, #28]
 800732e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007336:	ee17 2a90 	vmov	r2, s15
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800733e:	4b1f      	ldr	r3, [pc, #124]	; (80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007342:	0c1b      	lsrs	r3, r3, #16
 8007344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007348:	ee07 3a90 	vmov	s15, r3
 800734c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007350:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007354:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007358:	edd7 6a07 	vldr	s13, [r7, #28]
 800735c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007364:	ee17 2a90 	vmov	r2, s15
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800736c:	4b13      	ldr	r3, [pc, #76]	; (80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800736e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007370:	0e1b      	lsrs	r3, r3, #24
 8007372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007382:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007386:	edd7 6a07 	vldr	s13, [r7, #28]
 800738a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800738e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007392:	ee17 2a90 	vmov	r2, s15
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800739a:	e008      	b.n	80073ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	609a      	str	r2, [r3, #8]
}
 80073ae:	bf00      	nop
 80073b0:	3724      	adds	r7, #36	; 0x24
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	58024400 	.word	0x58024400
 80073c0:	03d09000 	.word	0x03d09000
 80073c4:	46000000 	.word	0x46000000
 80073c8:	4c742400 	.word	0x4c742400
 80073cc:	4a742400 	.word	0x4a742400
 80073d0:	4af42400 	.word	0x4af42400

080073d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b089      	sub	sp, #36	; 0x24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073dc:	4ba1      	ldr	r3, [pc, #644]	; (8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e0:	f003 0303 	and.w	r3, r3, #3
 80073e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80073e6:	4b9f      	ldr	r3, [pc, #636]	; (8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ea:	0d1b      	lsrs	r3, r3, #20
 80073ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80073f2:	4b9c      	ldr	r3, [pc, #624]	; (8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f6:	0a1b      	lsrs	r3, r3, #8
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80073fe:	4b99      	ldr	r3, [pc, #612]	; (8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007402:	08db      	lsrs	r3, r3, #3
 8007404:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	fb02 f303 	mul.w	r3, r2, r3
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007416:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 8111 	beq.w	8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	2b02      	cmp	r3, #2
 8007426:	f000 8083 	beq.w	8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	2b02      	cmp	r3, #2
 800742e:	f200 80a1 	bhi.w	8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d003      	beq.n	8007440 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d056      	beq.n	80074ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800743e:	e099      	b.n	8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007440:	4b88      	ldr	r3, [pc, #544]	; (8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0320 	and.w	r3, r3, #32
 8007448:	2b00      	cmp	r3, #0
 800744a:	d02d      	beq.n	80074a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800744c:	4b85      	ldr	r3, [pc, #532]	; (8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	08db      	lsrs	r3, r3, #3
 8007452:	f003 0303 	and.w	r3, r3, #3
 8007456:	4a84      	ldr	r2, [pc, #528]	; (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007458:	fa22 f303 	lsr.w	r3, r2, r3
 800745c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	ee07 3a90 	vmov	s15, r3
 8007464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	ee07 3a90 	vmov	s15, r3
 800746e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007476:	4b7b      	ldr	r3, [pc, #492]	; (8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007486:	ed97 6a03 	vldr	s12, [r7, #12]
 800748a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800766c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800748e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800749a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800749e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80074a6:	e087      	b.n	80075b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007670 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80074b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ba:	4b6a      	ldr	r3, [pc, #424]	; (8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800766c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074ea:	e065      	b.n	80075b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	ee07 3a90 	vmov	s15, r3
 80074f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074fe:	4b59      	ldr	r3, [pc, #356]	; (8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800750e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007512:	eddf 5a56 	vldr	s11, [pc, #344]	; 800766c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800751a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800751e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800752a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800752e:	e043      	b.n	80075b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800753e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007542:	4b48      	ldr	r3, [pc, #288]	; (8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007552:	ed97 6a03 	vldr	s12, [r7, #12]
 8007556:	eddf 5a45 	vldr	s11, [pc, #276]	; 800766c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800755a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800755e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800756a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007572:	e021      	b.n	80075b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	ee07 3a90 	vmov	s15, r3
 800757a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007586:	4b37      	ldr	r3, [pc, #220]	; (8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007596:	ed97 6a03 	vldr	s12, [r7, #12]
 800759a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800766c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800759e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80075b8:	4b2a      	ldr	r3, [pc, #168]	; (8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075bc:	0a5b      	lsrs	r3, r3, #9
 80075be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075c2:	ee07 3a90 	vmov	s15, r3
 80075c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80075d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075de:	ee17 2a90 	vmov	r2, s15
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80075e6:	4b1f      	ldr	r3, [pc, #124]	; (8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ea:	0c1b      	lsrs	r3, r3, #16
 80075ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075f0:	ee07 3a90 	vmov	s15, r3
 80075f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007600:	edd7 6a07 	vldr	s13, [r7, #28]
 8007604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800760c:	ee17 2a90 	vmov	r2, s15
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007614:	4b13      	ldr	r3, [pc, #76]	; (8007664 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	0e1b      	lsrs	r3, r3, #24
 800761a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800761e:	ee07 3a90 	vmov	s15, r3
 8007622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007626:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800762a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800762e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800763a:	ee17 2a90 	vmov	r2, s15
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007642:	e008      	b.n	8007656 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	609a      	str	r2, [r3, #8]
}
 8007656:	bf00      	nop
 8007658:	3724      	adds	r7, #36	; 0x24
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	58024400 	.word	0x58024400
 8007668:	03d09000 	.word	0x03d09000
 800766c:	46000000 	.word	0x46000000
 8007670:	4c742400 	.word	0x4c742400
 8007674:	4a742400 	.word	0x4a742400
 8007678:	4af42400 	.word	0x4af42400

0800767c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800768a:	4b53      	ldr	r3, [pc, #332]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 800768c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768e:	f003 0303 	and.w	r3, r3, #3
 8007692:	2b03      	cmp	r3, #3
 8007694:	d101      	bne.n	800769a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e099      	b.n	80077ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800769a:	4b4f      	ldr	r3, [pc, #316]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a4e      	ldr	r2, [pc, #312]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 80076a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076a6:	f7fa fdb9 	bl	800221c <HAL_GetTick>
 80076aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076ac:	e008      	b.n	80076c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076ae:	f7fa fdb5 	bl	800221c <HAL_GetTick>
 80076b2:	4602      	mov	r2, r0
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d901      	bls.n	80076c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e086      	b.n	80077ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076c0:	4b45      	ldr	r3, [pc, #276]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1f0      	bne.n	80076ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80076cc:	4b42      	ldr	r3, [pc, #264]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 80076ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	031b      	lsls	r3, r3, #12
 80076da:	493f      	ldr	r1, [pc, #252]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	628b      	str	r3, [r1, #40]	; 0x28
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	3b01      	subs	r3, #1
 80076f0:	025b      	lsls	r3, r3, #9
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	431a      	orrs	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	3b01      	subs	r3, #1
 80076fc:	041b      	lsls	r3, r3, #16
 80076fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007702:	431a      	orrs	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	3b01      	subs	r3, #1
 800770a:	061b      	lsls	r3, r3, #24
 800770c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007710:	4931      	ldr	r1, [pc, #196]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 8007712:	4313      	orrs	r3, r2
 8007714:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007716:	4b30      	ldr	r3, [pc, #192]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 8007718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	492d      	ldr	r1, [pc, #180]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 8007724:	4313      	orrs	r3, r2
 8007726:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007728:	4b2b      	ldr	r3, [pc, #172]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 800772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772c:	f023 0220 	bic.w	r2, r3, #32
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	4928      	ldr	r1, [pc, #160]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 8007736:	4313      	orrs	r3, r2
 8007738:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800773a:	4b27      	ldr	r3, [pc, #156]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 800773c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773e:	4a26      	ldr	r2, [pc, #152]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 8007740:	f023 0310 	bic.w	r3, r3, #16
 8007744:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007746:	4b24      	ldr	r3, [pc, #144]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 8007748:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800774a:	4b24      	ldr	r3, [pc, #144]	; (80077dc <RCCEx_PLL2_Config+0x160>)
 800774c:	4013      	ands	r3, r2
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	69d2      	ldr	r2, [r2, #28]
 8007752:	00d2      	lsls	r2, r2, #3
 8007754:	4920      	ldr	r1, [pc, #128]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 8007756:	4313      	orrs	r3, r2
 8007758:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800775a:	4b1f      	ldr	r3, [pc, #124]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 800775c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775e:	4a1e      	ldr	r2, [pc, #120]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 8007760:	f043 0310 	orr.w	r3, r3, #16
 8007764:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d106      	bne.n	800777a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800776c:	4b1a      	ldr	r3, [pc, #104]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	4a19      	ldr	r2, [pc, #100]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 8007772:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007776:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007778:	e00f      	b.n	800779a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d106      	bne.n	800778e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007780:	4b15      	ldr	r3, [pc, #84]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 8007782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007784:	4a14      	ldr	r2, [pc, #80]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 8007786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800778a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800778c:	e005      	b.n	800779a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800778e:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 8007790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007792:	4a11      	ldr	r2, [pc, #68]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 8007794:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007798:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800779a:	4b0f      	ldr	r3, [pc, #60]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a0e      	ldr	r2, [pc, #56]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 80077a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077a6:	f7fa fd39 	bl	800221c <HAL_GetTick>
 80077aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077ac:	e008      	b.n	80077c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077ae:	f7fa fd35 	bl	800221c <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d901      	bls.n	80077c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e006      	b.n	80077ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077c0:	4b05      	ldr	r3, [pc, #20]	; (80077d8 <RCCEx_PLL2_Config+0x15c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d0f0      	beq.n	80077ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	58024400 	.word	0x58024400
 80077dc:	ffff0007 	.word	0xffff0007

080077e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077ee:	4b53      	ldr	r3, [pc, #332]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 80077f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	d101      	bne.n	80077fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e099      	b.n	8007932 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80077fe:	4b4f      	ldr	r3, [pc, #316]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a4e      	ldr	r2, [pc, #312]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 8007804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007808:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800780a:	f7fa fd07 	bl	800221c <HAL_GetTick>
 800780e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007810:	e008      	b.n	8007824 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007812:	f7fa fd03 	bl	800221c <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	2b02      	cmp	r3, #2
 800781e:	d901      	bls.n	8007824 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e086      	b.n	8007932 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007824:	4b45      	ldr	r3, [pc, #276]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1f0      	bne.n	8007812 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007830:	4b42      	ldr	r3, [pc, #264]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 8007832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007834:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	051b      	lsls	r3, r3, #20
 800783e:	493f      	ldr	r1, [pc, #252]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 8007840:	4313      	orrs	r3, r2
 8007842:	628b      	str	r3, [r1, #40]	; 0x28
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	3b01      	subs	r3, #1
 800784a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	3b01      	subs	r3, #1
 8007854:	025b      	lsls	r3, r3, #9
 8007856:	b29b      	uxth	r3, r3
 8007858:	431a      	orrs	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	3b01      	subs	r3, #1
 8007860:	041b      	lsls	r3, r3, #16
 8007862:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007866:	431a      	orrs	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	3b01      	subs	r3, #1
 800786e:	061b      	lsls	r3, r3, #24
 8007870:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007874:	4931      	ldr	r1, [pc, #196]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 8007876:	4313      	orrs	r3, r2
 8007878:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800787a:	4b30      	ldr	r3, [pc, #192]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 800787c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	492d      	ldr	r1, [pc, #180]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 8007888:	4313      	orrs	r3, r2
 800788a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800788c:	4b2b      	ldr	r3, [pc, #172]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007890:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	4928      	ldr	r1, [pc, #160]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 800789a:	4313      	orrs	r3, r2
 800789c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800789e:	4b27      	ldr	r3, [pc, #156]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 80078a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a2:	4a26      	ldr	r2, [pc, #152]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 80078a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80078aa:	4b24      	ldr	r3, [pc, #144]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 80078ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078ae:	4b24      	ldr	r3, [pc, #144]	; (8007940 <RCCEx_PLL3_Config+0x160>)
 80078b0:	4013      	ands	r3, r2
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	69d2      	ldr	r2, [r2, #28]
 80078b6:	00d2      	lsls	r2, r2, #3
 80078b8:	4920      	ldr	r1, [pc, #128]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80078be:	4b1f      	ldr	r3, [pc, #124]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 80078c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c2:	4a1e      	ldr	r2, [pc, #120]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 80078c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d106      	bne.n	80078de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80078d0:	4b1a      	ldr	r3, [pc, #104]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 80078d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d4:	4a19      	ldr	r2, [pc, #100]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 80078d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80078da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078dc:	e00f      	b.n	80078fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d106      	bne.n	80078f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078e4:	4b15      	ldr	r3, [pc, #84]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	4a14      	ldr	r2, [pc, #80]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 80078ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078f0:	e005      	b.n	80078fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80078f2:	4b12      	ldr	r3, [pc, #72]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 80078f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f6:	4a11      	ldr	r2, [pc, #68]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 80078f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80078fe:	4b0f      	ldr	r3, [pc, #60]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a0e      	ldr	r2, [pc, #56]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 8007904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800790a:	f7fa fc87 	bl	800221c <HAL_GetTick>
 800790e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007910:	e008      	b.n	8007924 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007912:	f7fa fc83 	bl	800221c <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	2b02      	cmp	r3, #2
 800791e:	d901      	bls.n	8007924 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e006      	b.n	8007932 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007924:	4b05      	ldr	r3, [pc, #20]	; (800793c <RCCEx_PLL3_Config+0x15c>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d0f0      	beq.n	8007912 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007930:	7bfb      	ldrb	r3, [r7, #15]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	58024400 	.word	0x58024400
 8007940:	ffff0007 	.word	0xffff0007

08007944 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e049      	b.n	80079ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d106      	bne.n	8007970 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7fa f886 	bl	8001a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2202      	movs	r2, #2
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	3304      	adds	r3, #4
 8007980:	4619      	mov	r1, r3
 8007982:	4610      	mov	r0, r2
 8007984:	f000 fd7c 	bl	8008480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
	...

080079f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d001      	beq.n	8007a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e054      	b.n	8007ab6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68da      	ldr	r2, [r3, #12]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0201 	orr.w	r2, r2, #1
 8007a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a26      	ldr	r2, [pc, #152]	; (8007ac4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d022      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a36:	d01d      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a22      	ldr	r2, [pc, #136]	; (8007ac8 <HAL_TIM_Base_Start_IT+0xd4>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d018      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a21      	ldr	r2, [pc, #132]	; (8007acc <HAL_TIM_Base_Start_IT+0xd8>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d013      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a1f      	ldr	r2, [pc, #124]	; (8007ad0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00e      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a1e      	ldr	r2, [pc, #120]	; (8007ad4 <HAL_TIM_Base_Start_IT+0xe0>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d009      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a1c      	ldr	r2, [pc, #112]	; (8007ad8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d004      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x80>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a1b      	ldr	r2, [pc, #108]	; (8007adc <HAL_TIM_Base_Start_IT+0xe8>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d115      	bne.n	8007aa0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	689a      	ldr	r2, [r3, #8]
 8007a7a:	4b19      	ldr	r3, [pc, #100]	; (8007ae0 <HAL_TIM_Base_Start_IT+0xec>)
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b06      	cmp	r3, #6
 8007a84:	d015      	beq.n	8007ab2 <HAL_TIM_Base_Start_IT+0xbe>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a8c:	d011      	beq.n	8007ab2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f042 0201 	orr.w	r2, r2, #1
 8007a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a9e:	e008      	b.n	8007ab2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0201 	orr.w	r2, r2, #1
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	e000      	b.n	8007ab4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ab2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	40010000 	.word	0x40010000
 8007ac8:	40000400 	.word	0x40000400
 8007acc:	40000800 	.word	0x40000800
 8007ad0:	40000c00 	.word	0x40000c00
 8007ad4:	40010400 	.word	0x40010400
 8007ad8:	40001800 	.word	0x40001800
 8007adc:	40014000 	.word	0x40014000
 8007ae0:	00010007 	.word	0x00010007

08007ae4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d101      	bne.n	8007af6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e049      	b.n	8007b8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d106      	bne.n	8007b10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f841 	bl	8007b92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3304      	adds	r3, #4
 8007b20:	4619      	mov	r1, r3
 8007b22:	4610      	mov	r0, r2
 8007b24:	f000 fcac 	bl	8008480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
	...

08007ba8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d109      	bne.n	8007bcc <HAL_TIM_PWM_Start+0x24>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	bf14      	ite	ne
 8007bc4:	2301      	movne	r3, #1
 8007bc6:	2300      	moveq	r3, #0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	e03c      	b.n	8007c46 <HAL_TIM_PWM_Start+0x9e>
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	2b04      	cmp	r3, #4
 8007bd0:	d109      	bne.n	8007be6 <HAL_TIM_PWM_Start+0x3e>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	bf14      	ite	ne
 8007bde:	2301      	movne	r3, #1
 8007be0:	2300      	moveq	r3, #0
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	e02f      	b.n	8007c46 <HAL_TIM_PWM_Start+0x9e>
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2b08      	cmp	r3, #8
 8007bea:	d109      	bne.n	8007c00 <HAL_TIM_PWM_Start+0x58>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	bf14      	ite	ne
 8007bf8:	2301      	movne	r3, #1
 8007bfa:	2300      	moveq	r3, #0
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	e022      	b.n	8007c46 <HAL_TIM_PWM_Start+0x9e>
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	2b0c      	cmp	r3, #12
 8007c04:	d109      	bne.n	8007c1a <HAL_TIM_PWM_Start+0x72>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	bf14      	ite	ne
 8007c12:	2301      	movne	r3, #1
 8007c14:	2300      	moveq	r3, #0
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	e015      	b.n	8007c46 <HAL_TIM_PWM_Start+0x9e>
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2b10      	cmp	r3, #16
 8007c1e:	d109      	bne.n	8007c34 <HAL_TIM_PWM_Start+0x8c>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	bf14      	ite	ne
 8007c2c:	2301      	movne	r3, #1
 8007c2e:	2300      	moveq	r3, #0
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	e008      	b.n	8007c46 <HAL_TIM_PWM_Start+0x9e>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	bf14      	ite	ne
 8007c40:	2301      	movne	r3, #1
 8007c42:	2300      	moveq	r3, #0
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e0a1      	b.n	8007d92 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d104      	bne.n	8007c5e <HAL_TIM_PWM_Start+0xb6>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2202      	movs	r2, #2
 8007c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c5c:	e023      	b.n	8007ca6 <HAL_TIM_PWM_Start+0xfe>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b04      	cmp	r3, #4
 8007c62:	d104      	bne.n	8007c6e <HAL_TIM_PWM_Start+0xc6>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2202      	movs	r2, #2
 8007c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c6c:	e01b      	b.n	8007ca6 <HAL_TIM_PWM_Start+0xfe>
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	d104      	bne.n	8007c7e <HAL_TIM_PWM_Start+0xd6>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2202      	movs	r2, #2
 8007c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c7c:	e013      	b.n	8007ca6 <HAL_TIM_PWM_Start+0xfe>
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b0c      	cmp	r3, #12
 8007c82:	d104      	bne.n	8007c8e <HAL_TIM_PWM_Start+0xe6>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2202      	movs	r2, #2
 8007c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c8c:	e00b      	b.n	8007ca6 <HAL_TIM_PWM_Start+0xfe>
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b10      	cmp	r3, #16
 8007c92:	d104      	bne.n	8007c9e <HAL_TIM_PWM_Start+0xf6>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2202      	movs	r2, #2
 8007c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c9c:	e003      	b.n	8007ca6 <HAL_TIM_PWM_Start+0xfe>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2201      	movs	r2, #1
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f000 fff4 	bl	8008c9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a38      	ldr	r2, [pc, #224]	; (8007d9c <HAL_TIM_PWM_Start+0x1f4>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d013      	beq.n	8007ce6 <HAL_TIM_PWM_Start+0x13e>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a37      	ldr	r2, [pc, #220]	; (8007da0 <HAL_TIM_PWM_Start+0x1f8>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d00e      	beq.n	8007ce6 <HAL_TIM_PWM_Start+0x13e>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a35      	ldr	r2, [pc, #212]	; (8007da4 <HAL_TIM_PWM_Start+0x1fc>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d009      	beq.n	8007ce6 <HAL_TIM_PWM_Start+0x13e>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a34      	ldr	r2, [pc, #208]	; (8007da8 <HAL_TIM_PWM_Start+0x200>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d004      	beq.n	8007ce6 <HAL_TIM_PWM_Start+0x13e>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a32      	ldr	r2, [pc, #200]	; (8007dac <HAL_TIM_PWM_Start+0x204>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d101      	bne.n	8007cea <HAL_TIM_PWM_Start+0x142>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e000      	b.n	8007cec <HAL_TIM_PWM_Start+0x144>
 8007cea:	2300      	movs	r3, #0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d007      	beq.n	8007d00 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cfe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a25      	ldr	r2, [pc, #148]	; (8007d9c <HAL_TIM_PWM_Start+0x1f4>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d022      	beq.n	8007d50 <HAL_TIM_PWM_Start+0x1a8>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d12:	d01d      	beq.n	8007d50 <HAL_TIM_PWM_Start+0x1a8>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a25      	ldr	r2, [pc, #148]	; (8007db0 <HAL_TIM_PWM_Start+0x208>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d018      	beq.n	8007d50 <HAL_TIM_PWM_Start+0x1a8>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a24      	ldr	r2, [pc, #144]	; (8007db4 <HAL_TIM_PWM_Start+0x20c>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d013      	beq.n	8007d50 <HAL_TIM_PWM_Start+0x1a8>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a22      	ldr	r2, [pc, #136]	; (8007db8 <HAL_TIM_PWM_Start+0x210>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d00e      	beq.n	8007d50 <HAL_TIM_PWM_Start+0x1a8>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a1a      	ldr	r2, [pc, #104]	; (8007da0 <HAL_TIM_PWM_Start+0x1f8>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d009      	beq.n	8007d50 <HAL_TIM_PWM_Start+0x1a8>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a1e      	ldr	r2, [pc, #120]	; (8007dbc <HAL_TIM_PWM_Start+0x214>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d004      	beq.n	8007d50 <HAL_TIM_PWM_Start+0x1a8>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a16      	ldr	r2, [pc, #88]	; (8007da4 <HAL_TIM_PWM_Start+0x1fc>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d115      	bne.n	8007d7c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689a      	ldr	r2, [r3, #8]
 8007d56:	4b1a      	ldr	r3, [pc, #104]	; (8007dc0 <HAL_TIM_PWM_Start+0x218>)
 8007d58:	4013      	ands	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b06      	cmp	r3, #6
 8007d60:	d015      	beq.n	8007d8e <HAL_TIM_PWM_Start+0x1e6>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d68:	d011      	beq.n	8007d8e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f042 0201 	orr.w	r2, r2, #1
 8007d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d7a:	e008      	b.n	8007d8e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0201 	orr.w	r2, r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	e000      	b.n	8007d90 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	40010000 	.word	0x40010000
 8007da0:	40010400 	.word	0x40010400
 8007da4:	40014000 	.word	0x40014000
 8007da8:	40014400 	.word	0x40014400
 8007dac:	40014800 	.word	0x40014800
 8007db0:	40000400 	.word	0x40000400
 8007db4:	40000800 	.word	0x40000800
 8007db8:	40000c00 	.word	0x40000c00
 8007dbc:	40001800 	.word	0x40001800
 8007dc0:	00010007 	.word	0x00010007

08007dc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d122      	bne.n	8007e20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f003 0302 	and.w	r3, r3, #2
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d11b      	bne.n	8007e20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f06f 0202 	mvn.w	r2, #2
 8007df0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	f003 0303 	and.w	r3, r3, #3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d003      	beq.n	8007e0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fb1c 	bl	8008444 <HAL_TIM_IC_CaptureCallback>
 8007e0c:	e005      	b.n	8007e1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fb0e 	bl	8008430 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fb1f 	bl	8008458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	f003 0304 	and.w	r3, r3, #4
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d122      	bne.n	8007e74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f003 0304 	and.w	r3, r3, #4
 8007e38:	2b04      	cmp	r3, #4
 8007e3a:	d11b      	bne.n	8007e74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f06f 0204 	mvn.w	r2, #4
 8007e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2202      	movs	r2, #2
 8007e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 faf2 	bl	8008444 <HAL_TIM_IC_CaptureCallback>
 8007e60:	e005      	b.n	8007e6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fae4 	bl	8008430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 faf5 	bl	8008458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	f003 0308 	and.w	r3, r3, #8
 8007e7e:	2b08      	cmp	r3, #8
 8007e80:	d122      	bne.n	8007ec8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	f003 0308 	and.w	r3, r3, #8
 8007e8c:	2b08      	cmp	r3, #8
 8007e8e:	d11b      	bne.n	8007ec8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f06f 0208 	mvn.w	r2, #8
 8007e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2204      	movs	r2, #4
 8007e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	f003 0303 	and.w	r3, r3, #3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fac8 	bl	8008444 <HAL_TIM_IC_CaptureCallback>
 8007eb4:	e005      	b.n	8007ec2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 faba 	bl	8008430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 facb 	bl	8008458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f003 0310 	and.w	r3, r3, #16
 8007ed2:	2b10      	cmp	r3, #16
 8007ed4:	d122      	bne.n	8007f1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f003 0310 	and.w	r3, r3, #16
 8007ee0:	2b10      	cmp	r3, #16
 8007ee2:	d11b      	bne.n	8007f1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f06f 0210 	mvn.w	r2, #16
 8007eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2208      	movs	r2, #8
 8007ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	69db      	ldr	r3, [r3, #28]
 8007efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa9e 	bl	8008444 <HAL_TIM_IC_CaptureCallback>
 8007f08:	e005      	b.n	8007f16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fa90 	bl	8008430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 faa1 	bl	8008458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d10e      	bne.n	8007f48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	f003 0301 	and.w	r3, r3, #1
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d107      	bne.n	8007f48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f06f 0201 	mvn.w	r2, #1
 8007f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fa6a 	bl	800841c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f52:	2b80      	cmp	r3, #128	; 0x80
 8007f54:	d10e      	bne.n	8007f74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f60:	2b80      	cmp	r3, #128	; 0x80
 8007f62:	d107      	bne.n	8007f74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 ff52 	bl	8008e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f82:	d10e      	bne.n	8007fa2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f8e:	2b80      	cmp	r3, #128	; 0x80
 8007f90:	d107      	bne.n	8007fa2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 ff45 	bl	8008e2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fac:	2b40      	cmp	r3, #64	; 0x40
 8007fae:	d10e      	bne.n	8007fce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fba:	2b40      	cmp	r3, #64	; 0x40
 8007fbc:	d107      	bne.n	8007fce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fa4f 	bl	800846c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	f003 0320 	and.w	r3, r3, #32
 8007fd8:	2b20      	cmp	r3, #32
 8007fda:	d10e      	bne.n	8007ffa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	f003 0320 	and.w	r3, r3, #32
 8007fe6:	2b20      	cmp	r3, #32
 8007fe8:	d107      	bne.n	8007ffa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f06f 0220 	mvn.w	r2, #32
 8007ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 ff05 	bl	8008e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ffa:	bf00      	nop
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
	...

08008004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008010:	2300      	movs	r3, #0
 8008012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800801a:	2b01      	cmp	r3, #1
 800801c:	d101      	bne.n	8008022 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800801e:	2302      	movs	r3, #2
 8008020:	e0ff      	b.n	8008222 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b14      	cmp	r3, #20
 800802e:	f200 80f0 	bhi.w	8008212 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008032:	a201      	add	r2, pc, #4	; (adr r2, 8008038 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008038:	0800808d 	.word	0x0800808d
 800803c:	08008213 	.word	0x08008213
 8008040:	08008213 	.word	0x08008213
 8008044:	08008213 	.word	0x08008213
 8008048:	080080cd 	.word	0x080080cd
 800804c:	08008213 	.word	0x08008213
 8008050:	08008213 	.word	0x08008213
 8008054:	08008213 	.word	0x08008213
 8008058:	0800810f 	.word	0x0800810f
 800805c:	08008213 	.word	0x08008213
 8008060:	08008213 	.word	0x08008213
 8008064:	08008213 	.word	0x08008213
 8008068:	0800814f 	.word	0x0800814f
 800806c:	08008213 	.word	0x08008213
 8008070:	08008213 	.word	0x08008213
 8008074:	08008213 	.word	0x08008213
 8008078:	08008191 	.word	0x08008191
 800807c:	08008213 	.word	0x08008213
 8008080:	08008213 	.word	0x08008213
 8008084:	08008213 	.word	0x08008213
 8008088:	080081d1 	.word	0x080081d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68b9      	ldr	r1, [r7, #8]
 8008092:	4618      	mov	r0, r3
 8008094:	f000 fa8e 	bl	80085b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f042 0208 	orr.w	r2, r2, #8
 80080a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	699a      	ldr	r2, [r3, #24]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 0204 	bic.w	r2, r2, #4
 80080b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6999      	ldr	r1, [r3, #24]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	691a      	ldr	r2, [r3, #16]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	619a      	str	r2, [r3, #24]
      break;
 80080ca:	e0a5      	b.n	8008218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68b9      	ldr	r1, [r7, #8]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 fafe 	bl	80086d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	699a      	ldr	r2, [r3, #24]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	699a      	ldr	r2, [r3, #24]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6999      	ldr	r1, [r3, #24]
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	021a      	lsls	r2, r3, #8
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	619a      	str	r2, [r3, #24]
      break;
 800810c:	e084      	b.n	8008218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68b9      	ldr	r1, [r7, #8]
 8008114:	4618      	mov	r0, r3
 8008116:	f000 fb67 	bl	80087e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	69da      	ldr	r2, [r3, #28]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f042 0208 	orr.w	r2, r2, #8
 8008128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	69da      	ldr	r2, [r3, #28]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f022 0204 	bic.w	r2, r2, #4
 8008138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	69d9      	ldr	r1, [r3, #28]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	691a      	ldr	r2, [r3, #16]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	430a      	orrs	r2, r1
 800814a:	61da      	str	r2, [r3, #28]
      break;
 800814c:	e064      	b.n	8008218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68b9      	ldr	r1, [r7, #8]
 8008154:	4618      	mov	r0, r3
 8008156:	f000 fbcf 	bl	80088f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	69da      	ldr	r2, [r3, #28]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	69da      	ldr	r2, [r3, #28]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	69d9      	ldr	r1, [r3, #28]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	021a      	lsls	r2, r3, #8
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	61da      	str	r2, [r3, #28]
      break;
 800818e:	e043      	b.n	8008218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68b9      	ldr	r1, [r7, #8]
 8008196:	4618      	mov	r0, r3
 8008198:	f000 fc18 	bl	80089cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f042 0208 	orr.w	r2, r2, #8
 80081aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f022 0204 	bic.w	r2, r2, #4
 80081ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	691a      	ldr	r2, [r3, #16]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80081ce:	e023      	b.n	8008218 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68b9      	ldr	r1, [r7, #8]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 fc5c 	bl	8008a94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	021a      	lsls	r2, r3, #8
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	430a      	orrs	r2, r1
 800820e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008210:	e002      	b.n	8008218 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	75fb      	strb	r3, [r7, #23]
      break;
 8008216:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3718      	adds	r7, #24
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop

0800822c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008236:	2300      	movs	r3, #0
 8008238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008240:	2b01      	cmp	r3, #1
 8008242:	d101      	bne.n	8008248 <HAL_TIM_ConfigClockSource+0x1c>
 8008244:	2302      	movs	r3, #2
 8008246:	e0dc      	b.n	8008402 <HAL_TIM_ConfigClockSource+0x1d6>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008260:	68ba      	ldr	r2, [r7, #8]
 8008262:	4b6a      	ldr	r3, [pc, #424]	; (800840c <HAL_TIM_ConfigClockSource+0x1e0>)
 8008264:	4013      	ands	r3, r2
 8008266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800826e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a64      	ldr	r2, [pc, #400]	; (8008410 <HAL_TIM_ConfigClockSource+0x1e4>)
 800827e:	4293      	cmp	r3, r2
 8008280:	f000 80a9 	beq.w	80083d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008284:	4a62      	ldr	r2, [pc, #392]	; (8008410 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008286:	4293      	cmp	r3, r2
 8008288:	f200 80ae 	bhi.w	80083e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800828c:	4a61      	ldr	r2, [pc, #388]	; (8008414 <HAL_TIM_ConfigClockSource+0x1e8>)
 800828e:	4293      	cmp	r3, r2
 8008290:	f000 80a1 	beq.w	80083d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008294:	4a5f      	ldr	r2, [pc, #380]	; (8008414 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008296:	4293      	cmp	r3, r2
 8008298:	f200 80a6 	bhi.w	80083e8 <HAL_TIM_ConfigClockSource+0x1bc>
 800829c:	4a5e      	ldr	r2, [pc, #376]	; (8008418 <HAL_TIM_ConfigClockSource+0x1ec>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	f000 8099 	beq.w	80083d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80082a4:	4a5c      	ldr	r2, [pc, #368]	; (8008418 <HAL_TIM_ConfigClockSource+0x1ec>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	f200 809e 	bhi.w	80083e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80082ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80082b0:	f000 8091 	beq.w	80083d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80082b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80082b8:	f200 8096 	bhi.w	80083e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80082bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082c0:	f000 8089 	beq.w	80083d6 <HAL_TIM_ConfigClockSource+0x1aa>
 80082c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082c8:	f200 808e 	bhi.w	80083e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80082cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082d0:	d03e      	beq.n	8008350 <HAL_TIM_ConfigClockSource+0x124>
 80082d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082d6:	f200 8087 	bhi.w	80083e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80082da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082de:	f000 8086 	beq.w	80083ee <HAL_TIM_ConfigClockSource+0x1c2>
 80082e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082e6:	d87f      	bhi.n	80083e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80082e8:	2b70      	cmp	r3, #112	; 0x70
 80082ea:	d01a      	beq.n	8008322 <HAL_TIM_ConfigClockSource+0xf6>
 80082ec:	2b70      	cmp	r3, #112	; 0x70
 80082ee:	d87b      	bhi.n	80083e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80082f0:	2b60      	cmp	r3, #96	; 0x60
 80082f2:	d050      	beq.n	8008396 <HAL_TIM_ConfigClockSource+0x16a>
 80082f4:	2b60      	cmp	r3, #96	; 0x60
 80082f6:	d877      	bhi.n	80083e8 <HAL_TIM_ConfigClockSource+0x1bc>
 80082f8:	2b50      	cmp	r3, #80	; 0x50
 80082fa:	d03c      	beq.n	8008376 <HAL_TIM_ConfigClockSource+0x14a>
 80082fc:	2b50      	cmp	r3, #80	; 0x50
 80082fe:	d873      	bhi.n	80083e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008300:	2b40      	cmp	r3, #64	; 0x40
 8008302:	d058      	beq.n	80083b6 <HAL_TIM_ConfigClockSource+0x18a>
 8008304:	2b40      	cmp	r3, #64	; 0x40
 8008306:	d86f      	bhi.n	80083e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008308:	2b30      	cmp	r3, #48	; 0x30
 800830a:	d064      	beq.n	80083d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800830c:	2b30      	cmp	r3, #48	; 0x30
 800830e:	d86b      	bhi.n	80083e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008310:	2b20      	cmp	r3, #32
 8008312:	d060      	beq.n	80083d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008314:	2b20      	cmp	r3, #32
 8008316:	d867      	bhi.n	80083e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008318:	2b00      	cmp	r3, #0
 800831a:	d05c      	beq.n	80083d6 <HAL_TIM_ConfigClockSource+0x1aa>
 800831c:	2b10      	cmp	r3, #16
 800831e:	d05a      	beq.n	80083d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008320:	e062      	b.n	80083e8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6818      	ldr	r0, [r3, #0]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	6899      	ldr	r1, [r3, #8]
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	f000 fc93 	bl	8008c5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008344:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	609a      	str	r2, [r3, #8]
      break;
 800834e:	e04f      	b.n	80083f0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6818      	ldr	r0, [r3, #0]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	6899      	ldr	r1, [r3, #8]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f000 fc7c 	bl	8008c5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	689a      	ldr	r2, [r3, #8]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008372:	609a      	str	r2, [r3, #8]
      break;
 8008374:	e03c      	b.n	80083f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6818      	ldr	r0, [r3, #0]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	6859      	ldr	r1, [r3, #4]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	461a      	mov	r2, r3
 8008384:	f000 fbec 	bl	8008b60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2150      	movs	r1, #80	; 0x50
 800838e:	4618      	mov	r0, r3
 8008390:	f000 fc46 	bl	8008c20 <TIM_ITRx_SetConfig>
      break;
 8008394:	e02c      	b.n	80083f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6818      	ldr	r0, [r3, #0]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	6859      	ldr	r1, [r3, #4]
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	461a      	mov	r2, r3
 80083a4:	f000 fc0b 	bl	8008bbe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2160      	movs	r1, #96	; 0x60
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 fc36 	bl	8008c20 <TIM_ITRx_SetConfig>
      break;
 80083b4:	e01c      	b.n	80083f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	6859      	ldr	r1, [r3, #4]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	461a      	mov	r2, r3
 80083c4:	f000 fbcc 	bl	8008b60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2140      	movs	r1, #64	; 0x40
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 fc26 	bl	8008c20 <TIM_ITRx_SetConfig>
      break;
 80083d4:	e00c      	b.n	80083f0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4619      	mov	r1, r3
 80083e0:	4610      	mov	r0, r2
 80083e2:	f000 fc1d 	bl	8008c20 <TIM_ITRx_SetConfig>
      break;
 80083e6:	e003      	b.n	80083f0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	73fb      	strb	r3, [r7, #15]
      break;
 80083ec:	e000      	b.n	80083f0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80083ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008400:	7bfb      	ldrb	r3, [r7, #15]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	ffceff88 	.word	0xffceff88
 8008410:	00100040 	.word	0x00100040
 8008414:	00100030 	.word	0x00100030
 8008418:	00100020 	.word	0x00100020

0800841c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008474:	bf00      	nop
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a40      	ldr	r2, [pc, #256]	; (8008594 <TIM_Base_SetConfig+0x114>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d013      	beq.n	80084c0 <TIM_Base_SetConfig+0x40>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800849e:	d00f      	beq.n	80084c0 <TIM_Base_SetConfig+0x40>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a3d      	ldr	r2, [pc, #244]	; (8008598 <TIM_Base_SetConfig+0x118>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d00b      	beq.n	80084c0 <TIM_Base_SetConfig+0x40>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a3c      	ldr	r2, [pc, #240]	; (800859c <TIM_Base_SetConfig+0x11c>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d007      	beq.n	80084c0 <TIM_Base_SetConfig+0x40>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a3b      	ldr	r2, [pc, #236]	; (80085a0 <TIM_Base_SetConfig+0x120>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d003      	beq.n	80084c0 <TIM_Base_SetConfig+0x40>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a3a      	ldr	r2, [pc, #232]	; (80085a4 <TIM_Base_SetConfig+0x124>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d108      	bne.n	80084d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a2f      	ldr	r2, [pc, #188]	; (8008594 <TIM_Base_SetConfig+0x114>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d01f      	beq.n	800851a <TIM_Base_SetConfig+0x9a>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084e0:	d01b      	beq.n	800851a <TIM_Base_SetConfig+0x9a>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a2c      	ldr	r2, [pc, #176]	; (8008598 <TIM_Base_SetConfig+0x118>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d017      	beq.n	800851a <TIM_Base_SetConfig+0x9a>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a2b      	ldr	r2, [pc, #172]	; (800859c <TIM_Base_SetConfig+0x11c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d013      	beq.n	800851a <TIM_Base_SetConfig+0x9a>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a2a      	ldr	r2, [pc, #168]	; (80085a0 <TIM_Base_SetConfig+0x120>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d00f      	beq.n	800851a <TIM_Base_SetConfig+0x9a>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a29      	ldr	r2, [pc, #164]	; (80085a4 <TIM_Base_SetConfig+0x124>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d00b      	beq.n	800851a <TIM_Base_SetConfig+0x9a>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a28      	ldr	r2, [pc, #160]	; (80085a8 <TIM_Base_SetConfig+0x128>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d007      	beq.n	800851a <TIM_Base_SetConfig+0x9a>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a27      	ldr	r2, [pc, #156]	; (80085ac <TIM_Base_SetConfig+0x12c>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d003      	beq.n	800851a <TIM_Base_SetConfig+0x9a>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a26      	ldr	r2, [pc, #152]	; (80085b0 <TIM_Base_SetConfig+0x130>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d108      	bne.n	800852c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	4313      	orrs	r3, r2
 800852a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	4313      	orrs	r3, r2
 8008538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a10      	ldr	r2, [pc, #64]	; (8008594 <TIM_Base_SetConfig+0x114>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d00f      	beq.n	8008578 <TIM_Base_SetConfig+0xf8>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a12      	ldr	r2, [pc, #72]	; (80085a4 <TIM_Base_SetConfig+0x124>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d00b      	beq.n	8008578 <TIM_Base_SetConfig+0xf8>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a11      	ldr	r2, [pc, #68]	; (80085a8 <TIM_Base_SetConfig+0x128>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d007      	beq.n	8008578 <TIM_Base_SetConfig+0xf8>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a10      	ldr	r2, [pc, #64]	; (80085ac <TIM_Base_SetConfig+0x12c>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d003      	beq.n	8008578 <TIM_Base_SetConfig+0xf8>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a0f      	ldr	r2, [pc, #60]	; (80085b0 <TIM_Base_SetConfig+0x130>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d103      	bne.n	8008580 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	691a      	ldr	r2, [r3, #16]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	615a      	str	r2, [r3, #20]
}
 8008586:	bf00      	nop
 8008588:	3714      	adds	r7, #20
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	40010000 	.word	0x40010000
 8008598:	40000400 	.word	0x40000400
 800859c:	40000800 	.word	0x40000800
 80085a0:	40000c00 	.word	0x40000c00
 80085a4:	40010400 	.word	0x40010400
 80085a8:	40014000 	.word	0x40014000
 80085ac:	40014400 	.word	0x40014400
 80085b0:	40014800 	.word	0x40014800

080085b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	f023 0201 	bic.w	r2, r3, #1
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	4b37      	ldr	r3, [pc, #220]	; (80086bc <TIM_OC1_SetConfig+0x108>)
 80085e0:	4013      	ands	r3, r2
 80085e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f023 0303 	bic.w	r3, r3, #3
 80085ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f023 0302 	bic.w	r3, r3, #2
 80085fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	4313      	orrs	r3, r2
 8008606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a2d      	ldr	r2, [pc, #180]	; (80086c0 <TIM_OC1_SetConfig+0x10c>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d00f      	beq.n	8008630 <TIM_OC1_SetConfig+0x7c>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a2c      	ldr	r2, [pc, #176]	; (80086c4 <TIM_OC1_SetConfig+0x110>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d00b      	beq.n	8008630 <TIM_OC1_SetConfig+0x7c>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a2b      	ldr	r2, [pc, #172]	; (80086c8 <TIM_OC1_SetConfig+0x114>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d007      	beq.n	8008630 <TIM_OC1_SetConfig+0x7c>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a2a      	ldr	r2, [pc, #168]	; (80086cc <TIM_OC1_SetConfig+0x118>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d003      	beq.n	8008630 <TIM_OC1_SetConfig+0x7c>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a29      	ldr	r2, [pc, #164]	; (80086d0 <TIM_OC1_SetConfig+0x11c>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d10c      	bne.n	800864a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	f023 0308 	bic.w	r3, r3, #8
 8008636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	697a      	ldr	r2, [r7, #20]
 800863e:	4313      	orrs	r3, r2
 8008640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f023 0304 	bic.w	r3, r3, #4
 8008648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a1c      	ldr	r2, [pc, #112]	; (80086c0 <TIM_OC1_SetConfig+0x10c>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d00f      	beq.n	8008672 <TIM_OC1_SetConfig+0xbe>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a1b      	ldr	r2, [pc, #108]	; (80086c4 <TIM_OC1_SetConfig+0x110>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d00b      	beq.n	8008672 <TIM_OC1_SetConfig+0xbe>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a1a      	ldr	r2, [pc, #104]	; (80086c8 <TIM_OC1_SetConfig+0x114>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d007      	beq.n	8008672 <TIM_OC1_SetConfig+0xbe>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a19      	ldr	r2, [pc, #100]	; (80086cc <TIM_OC1_SetConfig+0x118>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d003      	beq.n	8008672 <TIM_OC1_SetConfig+0xbe>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a18      	ldr	r2, [pc, #96]	; (80086d0 <TIM_OC1_SetConfig+0x11c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d111      	bne.n	8008696 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	4313      	orrs	r3, r2
 800868a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	4313      	orrs	r3, r2
 8008694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	621a      	str	r2, [r3, #32]
}
 80086b0:	bf00      	nop
 80086b2:	371c      	adds	r7, #28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	fffeff8f 	.word	0xfffeff8f
 80086c0:	40010000 	.word	0x40010000
 80086c4:	40010400 	.word	0x40010400
 80086c8:	40014000 	.word	0x40014000
 80086cc:	40014400 	.word	0x40014400
 80086d0:	40014800 	.word	0x40014800

080086d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	f023 0210 	bic.w	r2, r3, #16
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	699b      	ldr	r3, [r3, #24]
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	4b34      	ldr	r3, [pc, #208]	; (80087d0 <TIM_OC2_SetConfig+0xfc>)
 8008700:	4013      	ands	r3, r2
 8008702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800870a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	021b      	lsls	r3, r3, #8
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	4313      	orrs	r3, r2
 8008716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f023 0320 	bic.w	r3, r3, #32
 800871e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	011b      	lsls	r3, r3, #4
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	4313      	orrs	r3, r2
 800872a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a29      	ldr	r2, [pc, #164]	; (80087d4 <TIM_OC2_SetConfig+0x100>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d003      	beq.n	800873c <TIM_OC2_SetConfig+0x68>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a28      	ldr	r2, [pc, #160]	; (80087d8 <TIM_OC2_SetConfig+0x104>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d10d      	bne.n	8008758 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	011b      	lsls	r3, r3, #4
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	4313      	orrs	r3, r2
 800874e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008756:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a1e      	ldr	r2, [pc, #120]	; (80087d4 <TIM_OC2_SetConfig+0x100>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d00f      	beq.n	8008780 <TIM_OC2_SetConfig+0xac>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a1d      	ldr	r2, [pc, #116]	; (80087d8 <TIM_OC2_SetConfig+0x104>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d00b      	beq.n	8008780 <TIM_OC2_SetConfig+0xac>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a1c      	ldr	r2, [pc, #112]	; (80087dc <TIM_OC2_SetConfig+0x108>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d007      	beq.n	8008780 <TIM_OC2_SetConfig+0xac>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a1b      	ldr	r2, [pc, #108]	; (80087e0 <TIM_OC2_SetConfig+0x10c>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d003      	beq.n	8008780 <TIM_OC2_SetConfig+0xac>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a1a      	ldr	r2, [pc, #104]	; (80087e4 <TIM_OC2_SetConfig+0x110>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d113      	bne.n	80087a8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008786:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800878e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	4313      	orrs	r3, r2
 800879a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	685a      	ldr	r2, [r3, #4]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	621a      	str	r2, [r3, #32]
}
 80087c2:	bf00      	nop
 80087c4:	371c      	adds	r7, #28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	feff8fff 	.word	0xfeff8fff
 80087d4:	40010000 	.word	0x40010000
 80087d8:	40010400 	.word	0x40010400
 80087dc:	40014000 	.word	0x40014000
 80087e0:	40014400 	.word	0x40014400
 80087e4:	40014800 	.word	0x40014800

080087e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b087      	sub	sp, #28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	69db      	ldr	r3, [r3, #28]
 800880e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	4b33      	ldr	r3, [pc, #204]	; (80088e0 <TIM_OC3_SetConfig+0xf8>)
 8008814:	4013      	ands	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f023 0303 	bic.w	r3, r3, #3
 800881e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	4313      	orrs	r3, r2
 8008828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	021b      	lsls	r3, r3, #8
 8008838:	697a      	ldr	r2, [r7, #20]
 800883a:	4313      	orrs	r3, r2
 800883c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a28      	ldr	r2, [pc, #160]	; (80088e4 <TIM_OC3_SetConfig+0xfc>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d003      	beq.n	800884e <TIM_OC3_SetConfig+0x66>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a27      	ldr	r2, [pc, #156]	; (80088e8 <TIM_OC3_SetConfig+0x100>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d10d      	bne.n	800886a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008854:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	021b      	lsls	r3, r3, #8
 800885c:	697a      	ldr	r2, [r7, #20]
 800885e:	4313      	orrs	r3, r2
 8008860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a1d      	ldr	r2, [pc, #116]	; (80088e4 <TIM_OC3_SetConfig+0xfc>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d00f      	beq.n	8008892 <TIM_OC3_SetConfig+0xaa>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a1c      	ldr	r2, [pc, #112]	; (80088e8 <TIM_OC3_SetConfig+0x100>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d00b      	beq.n	8008892 <TIM_OC3_SetConfig+0xaa>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a1b      	ldr	r2, [pc, #108]	; (80088ec <TIM_OC3_SetConfig+0x104>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d007      	beq.n	8008892 <TIM_OC3_SetConfig+0xaa>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a1a      	ldr	r2, [pc, #104]	; (80088f0 <TIM_OC3_SetConfig+0x108>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d003      	beq.n	8008892 <TIM_OC3_SetConfig+0xaa>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a19      	ldr	r2, [pc, #100]	; (80088f4 <TIM_OC3_SetConfig+0x10c>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d113      	bne.n	80088ba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	011b      	lsls	r3, r3, #4
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	011b      	lsls	r3, r3, #4
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	685a      	ldr	r2, [r3, #4]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	621a      	str	r2, [r3, #32]
}
 80088d4:	bf00      	nop
 80088d6:	371c      	adds	r7, #28
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr
 80088e0:	fffeff8f 	.word	0xfffeff8f
 80088e4:	40010000 	.word	0x40010000
 80088e8:	40010400 	.word	0x40010400
 80088ec:	40014000 	.word	0x40014000
 80088f0:	40014400 	.word	0x40014400
 80088f4:	40014800 	.word	0x40014800

080088f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	69db      	ldr	r3, [r3, #28]
 800891e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	4b24      	ldr	r3, [pc, #144]	; (80089b4 <TIM_OC4_SetConfig+0xbc>)
 8008924:	4013      	ands	r3, r2
 8008926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800892e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	021b      	lsls	r3, r3, #8
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	4313      	orrs	r3, r2
 800893a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	031b      	lsls	r3, r3, #12
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	4313      	orrs	r3, r2
 800894e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a19      	ldr	r2, [pc, #100]	; (80089b8 <TIM_OC4_SetConfig+0xc0>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d00f      	beq.n	8008978 <TIM_OC4_SetConfig+0x80>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a18      	ldr	r2, [pc, #96]	; (80089bc <TIM_OC4_SetConfig+0xc4>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d00b      	beq.n	8008978 <TIM_OC4_SetConfig+0x80>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a17      	ldr	r2, [pc, #92]	; (80089c0 <TIM_OC4_SetConfig+0xc8>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d007      	beq.n	8008978 <TIM_OC4_SetConfig+0x80>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a16      	ldr	r2, [pc, #88]	; (80089c4 <TIM_OC4_SetConfig+0xcc>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d003      	beq.n	8008978 <TIM_OC4_SetConfig+0x80>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a15      	ldr	r2, [pc, #84]	; (80089c8 <TIM_OC4_SetConfig+0xd0>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d109      	bne.n	800898c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800897e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	019b      	lsls	r3, r3, #6
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	4313      	orrs	r3, r2
 800898a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	685a      	ldr	r2, [r3, #4]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	621a      	str	r2, [r3, #32]
}
 80089a6:	bf00      	nop
 80089a8:	371c      	adds	r7, #28
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	feff8fff 	.word	0xfeff8fff
 80089b8:	40010000 	.word	0x40010000
 80089bc:	40010400 	.word	0x40010400
 80089c0:	40014000 	.word	0x40014000
 80089c4:	40014400 	.word	0x40014400
 80089c8:	40014800 	.word	0x40014800

080089cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b087      	sub	sp, #28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	4b21      	ldr	r3, [pc, #132]	; (8008a7c <TIM_OC5_SetConfig+0xb0>)
 80089f8:	4013      	ands	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008a0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	041b      	lsls	r3, r3, #16
 8008a14:	693a      	ldr	r2, [r7, #16]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a18      	ldr	r2, [pc, #96]	; (8008a80 <TIM_OC5_SetConfig+0xb4>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d00f      	beq.n	8008a42 <TIM_OC5_SetConfig+0x76>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a17      	ldr	r2, [pc, #92]	; (8008a84 <TIM_OC5_SetConfig+0xb8>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d00b      	beq.n	8008a42 <TIM_OC5_SetConfig+0x76>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a16      	ldr	r2, [pc, #88]	; (8008a88 <TIM_OC5_SetConfig+0xbc>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d007      	beq.n	8008a42 <TIM_OC5_SetConfig+0x76>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a15      	ldr	r2, [pc, #84]	; (8008a8c <TIM_OC5_SetConfig+0xc0>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d003      	beq.n	8008a42 <TIM_OC5_SetConfig+0x76>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a14      	ldr	r2, [pc, #80]	; (8008a90 <TIM_OC5_SetConfig+0xc4>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d109      	bne.n	8008a56 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	021b      	lsls	r3, r3, #8
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	685a      	ldr	r2, [r3, #4]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	693a      	ldr	r2, [r7, #16]
 8008a6e:	621a      	str	r2, [r3, #32]
}
 8008a70:	bf00      	nop
 8008a72:	371c      	adds	r7, #28
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	fffeff8f 	.word	0xfffeff8f
 8008a80:	40010000 	.word	0x40010000
 8008a84:	40010400 	.word	0x40010400
 8008a88:	40014000 	.word	0x40014000
 8008a8c:	40014400 	.word	0x40014400
 8008a90:	40014800 	.word	0x40014800

08008a94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b087      	sub	sp, #28
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	4b22      	ldr	r3, [pc, #136]	; (8008b48 <TIM_OC6_SetConfig+0xb4>)
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	021b      	lsls	r3, r3, #8
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	051b      	lsls	r3, r3, #20
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a19      	ldr	r2, [pc, #100]	; (8008b4c <TIM_OC6_SetConfig+0xb8>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d00f      	beq.n	8008b0c <TIM_OC6_SetConfig+0x78>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a18      	ldr	r2, [pc, #96]	; (8008b50 <TIM_OC6_SetConfig+0xbc>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d00b      	beq.n	8008b0c <TIM_OC6_SetConfig+0x78>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a17      	ldr	r2, [pc, #92]	; (8008b54 <TIM_OC6_SetConfig+0xc0>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d007      	beq.n	8008b0c <TIM_OC6_SetConfig+0x78>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a16      	ldr	r2, [pc, #88]	; (8008b58 <TIM_OC6_SetConfig+0xc4>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d003      	beq.n	8008b0c <TIM_OC6_SetConfig+0x78>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a15      	ldr	r2, [pc, #84]	; (8008b5c <TIM_OC6_SetConfig+0xc8>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d109      	bne.n	8008b20 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	695b      	ldr	r3, [r3, #20]
 8008b18:	029b      	lsls	r3, r3, #10
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	621a      	str	r2, [r3, #32]
}
 8008b3a:	bf00      	nop
 8008b3c:	371c      	adds	r7, #28
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	feff8fff 	.word	0xfeff8fff
 8008b4c:	40010000 	.word	0x40010000
 8008b50:	40010400 	.word	0x40010400
 8008b54:	40014000 	.word	0x40014000
 8008b58:	40014400 	.word	0x40014400
 8008b5c:	40014800 	.word	0x40014800

08008b60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b087      	sub	sp, #28
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6a1b      	ldr	r3, [r3, #32]
 8008b70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	f023 0201 	bic.w	r2, r3, #1
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	011b      	lsls	r3, r3, #4
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	f023 030a 	bic.w	r3, r3, #10
 8008b9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b9e:	697a      	ldr	r2, [r7, #20]
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	621a      	str	r2, [r3, #32]
}
 8008bb2:	bf00      	nop
 8008bb4:	371c      	adds	r7, #28
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b087      	sub	sp, #28
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	60f8      	str	r0, [r7, #12]
 8008bc6:	60b9      	str	r1, [r7, #8]
 8008bc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	f023 0210 	bic.w	r2, r3, #16
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008be8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	031b      	lsls	r3, r3, #12
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008bfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	011b      	lsls	r3, r3, #4
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	621a      	str	r2, [r3, #32]
}
 8008c12:	bf00      	nop
 8008c14:	371c      	adds	r7, #28
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
	...

08008c20 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	4b09      	ldr	r3, [pc, #36]	; (8008c58 <TIM_ITRx_SetConfig+0x38>)
 8008c34:	4013      	ands	r3, r2
 8008c36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c38:	683a      	ldr	r2, [r7, #0]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	f043 0307 	orr.w	r3, r3, #7
 8008c42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	609a      	str	r2, [r3, #8]
}
 8008c4a:	bf00      	nop
 8008c4c:	3714      	adds	r7, #20
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	ffcfff8f 	.word	0xffcfff8f

08008c5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b087      	sub	sp, #28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	607a      	str	r2, [r7, #4]
 8008c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	021a      	lsls	r2, r3, #8
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	431a      	orrs	r2, r3
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	697a      	ldr	r2, [r7, #20]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	697a      	ldr	r2, [r7, #20]
 8008c8e:	609a      	str	r2, [r3, #8]
}
 8008c90:	bf00      	nop
 8008c92:	371c      	adds	r7, #28
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b087      	sub	sp, #28
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	f003 031f 	and.w	r3, r3, #31
 8008cae:	2201      	movs	r2, #1
 8008cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6a1a      	ldr	r2, [r3, #32]
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	43db      	mvns	r3, r3
 8008cbe:	401a      	ands	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6a1a      	ldr	r2, [r3, #32]
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	f003 031f 	and.w	r3, r3, #31
 8008cce:	6879      	ldr	r1, [r7, #4]
 8008cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8008cd4:	431a      	orrs	r2, r3
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	621a      	str	r2, [r3, #32]
}
 8008cda:	bf00      	nop
 8008cdc:	371c      	adds	r7, #28
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
	...

08008ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d101      	bne.n	8008d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	e06d      	b.n	8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a30      	ldr	r2, [pc, #192]	; (8008de8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d004      	beq.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a2f      	ldr	r2, [pc, #188]	; (8008dec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d108      	bne.n	8008d46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a20      	ldr	r2, [pc, #128]	; (8008de8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d022      	beq.n	8008db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d72:	d01d      	beq.n	8008db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a1d      	ldr	r2, [pc, #116]	; (8008df0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d018      	beq.n	8008db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a1c      	ldr	r2, [pc, #112]	; (8008df4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d013      	beq.n	8008db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a1a      	ldr	r2, [pc, #104]	; (8008df8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d00e      	beq.n	8008db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a15      	ldr	r2, [pc, #84]	; (8008dec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d009      	beq.n	8008db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a16      	ldr	r2, [pc, #88]	; (8008dfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d004      	beq.n	8008db0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a15      	ldr	r2, [pc, #84]	; (8008e00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d10c      	bne.n	8008dca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008db6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68ba      	ldr	r2, [r7, #8]
 8008dc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	40010000 	.word	0x40010000
 8008dec:	40010400 	.word	0x40010400
 8008df0:	40000400 	.word	0x40000400
 8008df4:	40000800 	.word	0x40000800
 8008df8:	40000c00 	.word	0x40000c00
 8008dfc:	40001800 	.word	0x40001800
 8008e00:	40014000 	.word	0x40014000

08008e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e34:	bf00      	nop
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e042      	b.n	8008ed8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d106      	bne.n	8008e6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7f8 ff8f 	bl	8001d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2224      	movs	r2, #36	; 0x24
 8008e6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f022 0201 	bic.w	r2, r2, #1
 8008e80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fd74 	bl	8009970 <UART_SetConfig>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d101      	bne.n	8008e92 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e022      	b.n	8008ed8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d002      	beq.n	8008ea0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f001 fbd4 	bl	800a648 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	685a      	ldr	r2, [r3, #4]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008eae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	689a      	ldr	r2, [r3, #8]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ebe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f042 0201 	orr.w	r2, r2, #1
 8008ece:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f001 fc5b 	bl	800a78c <UART_CheckIdleState>
 8008ed6:	4603      	mov	r3, r0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b08a      	sub	sp, #40	; 0x28
 8008ee4:	af02      	add	r7, sp, #8
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	603b      	str	r3, [r7, #0]
 8008eec:	4613      	mov	r3, r2
 8008eee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ef6:	2b20      	cmp	r3, #32
 8008ef8:	d17b      	bne.n	8008ff2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d002      	beq.n	8008f06 <HAL_UART_Transmit+0x26>
 8008f00:	88fb      	ldrh	r3, [r7, #6]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e074      	b.n	8008ff4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2221      	movs	r2, #33	; 0x21
 8008f16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f1a:	f7f9 f97f 	bl	800221c <HAL_GetTick>
 8008f1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	88fa      	ldrh	r2, [r7, #6]
 8008f24:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	88fa      	ldrh	r2, [r7, #6]
 8008f2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f38:	d108      	bne.n	8008f4c <HAL_UART_Transmit+0x6c>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d104      	bne.n	8008f4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008f42:	2300      	movs	r3, #0
 8008f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	61bb      	str	r3, [r7, #24]
 8008f4a:	e003      	b.n	8008f54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f50:	2300      	movs	r3, #0
 8008f52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008f54:	e030      	b.n	8008fb8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	2180      	movs	r1, #128	; 0x80
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f001 fcbd 	bl	800a8e0 <UART_WaitOnFlagUntilTimeout>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d005      	beq.n	8008f78 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2220      	movs	r2, #32
 8008f70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008f74:	2303      	movs	r3, #3
 8008f76:	e03d      	b.n	8008ff4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10b      	bne.n	8008f96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	881b      	ldrh	r3, [r3, #0]
 8008f82:	461a      	mov	r2, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f8c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	3302      	adds	r3, #2
 8008f92:	61bb      	str	r3, [r7, #24]
 8008f94:	e007      	b.n	8008fa6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	781a      	ldrb	r2, [r3, #0]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1c8      	bne.n	8008f56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	2140      	movs	r1, #64	; 0x40
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f001 fc86 	bl	800a8e0 <UART_WaitOnFlagUntilTimeout>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d005      	beq.n	8008fe6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2220      	movs	r2, #32
 8008fde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e006      	b.n	8008ff4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2220      	movs	r2, #32
 8008fea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	e000      	b.n	8008ff4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008ff2:	2302      	movs	r3, #2
  }
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3720      	adds	r7, #32
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b091      	sub	sp, #68	; 0x44
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	4613      	mov	r3, r2
 8009008:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009010:	2b20      	cmp	r3, #32
 8009012:	d178      	bne.n	8009106 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d002      	beq.n	8009020 <HAL_UART_Transmit_IT+0x24>
 800901a:	88fb      	ldrh	r3, [r7, #6]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d101      	bne.n	8009024 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e071      	b.n	8009108 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	88fa      	ldrh	r2, [r7, #6]
 800902e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	88fa      	ldrh	r2, [r7, #6]
 8009036:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2221      	movs	r2, #33	; 0x21
 800904c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009058:	d12a      	bne.n	80090b0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009062:	d107      	bne.n	8009074 <HAL_UART_Transmit_IT+0x78>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d103      	bne.n	8009074 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	4a29      	ldr	r2, [pc, #164]	; (8009114 <HAL_UART_Transmit_IT+0x118>)
 8009070:	679a      	str	r2, [r3, #120]	; 0x78
 8009072:	e002      	b.n	800907a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4a28      	ldr	r2, [pc, #160]	; (8009118 <HAL_UART_Transmit_IT+0x11c>)
 8009078:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	3308      	adds	r3, #8
 8009080:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009084:	e853 3f00 	ldrex	r3, [r3]
 8009088:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009090:	63bb      	str	r3, [r7, #56]	; 0x38
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3308      	adds	r3, #8
 8009098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800909a:	637a      	str	r2, [r7, #52]	; 0x34
 800909c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1e5      	bne.n	800907a <HAL_UART_Transmit_IT+0x7e>
 80090ae:	e028      	b.n	8009102 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090b8:	d107      	bne.n	80090ca <HAL_UART_Transmit_IT+0xce>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d103      	bne.n	80090ca <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	4a15      	ldr	r2, [pc, #84]	; (800911c <HAL_UART_Transmit_IT+0x120>)
 80090c6:	679a      	str	r2, [r3, #120]	; 0x78
 80090c8:	e002      	b.n	80090d0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	4a14      	ldr	r2, [pc, #80]	; (8009120 <HAL_UART_Transmit_IT+0x124>)
 80090ce:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	e853 3f00 	ldrex	r3, [r3]
 80090dc:	613b      	str	r3, [r7, #16]
   return(result);
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ee:	623b      	str	r3, [r7, #32]
 80090f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f2:	69f9      	ldr	r1, [r7, #28]
 80090f4:	6a3a      	ldr	r2, [r7, #32]
 80090f6:	e841 2300 	strex	r3, r2, [r1]
 80090fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1e6      	bne.n	80090d0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	e000      	b.n	8009108 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8009106:	2302      	movs	r3, #2
  }
}
 8009108:	4618      	mov	r0, r3
 800910a:	3744      	adds	r7, #68	; 0x44
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr
 8009114:	0800af47 	.word	0x0800af47
 8009118:	0800ae67 	.word	0x0800ae67
 800911c:	0800ada5 	.word	0x0800ada5
 8009120:	0800aced 	.word	0x0800aced

08009124 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b08a      	sub	sp, #40	; 0x28
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	4613      	mov	r3, r2
 8009130:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009138:	2b20      	cmp	r3, #32
 800913a:	d137      	bne.n	80091ac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d002      	beq.n	8009148 <HAL_UART_Receive_IT+0x24>
 8009142:	88fb      	ldrh	r3, [r7, #6]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d101      	bne.n	800914c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e030      	b.n	80091ae <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2200      	movs	r2, #0
 8009150:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a18      	ldr	r2, [pc, #96]	; (80091b8 <HAL_UART_Receive_IT+0x94>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d01f      	beq.n	800919c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d018      	beq.n	800919c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	e853 3f00 	ldrex	r3, [r3]
 8009176:	613b      	str	r3, [r7, #16]
   return(result);
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800917e:	627b      	str	r3, [r7, #36]	; 0x24
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	461a      	mov	r2, r3
 8009186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009188:	623b      	str	r3, [r7, #32]
 800918a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918c:	69f9      	ldr	r1, [r7, #28]
 800918e:	6a3a      	ldr	r2, [r7, #32]
 8009190:	e841 2300 	strex	r3, r2, [r1]
 8009194:	61bb      	str	r3, [r7, #24]
   return(result);
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1e6      	bne.n	800916a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800919c:	88fb      	ldrh	r3, [r7, #6]
 800919e:	461a      	mov	r2, r3
 80091a0:	68b9      	ldr	r1, [r7, #8]
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f001 fc04 	bl	800a9b0 <UART_Start_Receive_IT>
 80091a8:	4603      	mov	r3, r0
 80091aa:	e000      	b.n	80091ae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80091ac:	2302      	movs	r3, #2
  }
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3728      	adds	r7, #40	; 0x28
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	58000c00 	.word	0x58000c00

080091bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b0ba      	sub	sp, #232	; 0xe8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	69db      	ldr	r3, [r3, #28]
 80091ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80091e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80091e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80091ea:	4013      	ands	r3, r2
 80091ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80091f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d11b      	bne.n	8009230 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80091f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091fc:	f003 0320 	and.w	r3, r3, #32
 8009200:	2b00      	cmp	r3, #0
 8009202:	d015      	beq.n	8009230 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009208:	f003 0320 	and.w	r3, r3, #32
 800920c:	2b00      	cmp	r3, #0
 800920e:	d105      	bne.n	800921c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d009      	beq.n	8009230 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009220:	2b00      	cmp	r3, #0
 8009222:	f000 8377 	beq.w	8009914 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	4798      	blx	r3
      }
      return;
 800922e:	e371      	b.n	8009914 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009234:	2b00      	cmp	r3, #0
 8009236:	f000 8123 	beq.w	8009480 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800923a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800923e:	4b8d      	ldr	r3, [pc, #564]	; (8009474 <HAL_UART_IRQHandler+0x2b8>)
 8009240:	4013      	ands	r3, r2
 8009242:	2b00      	cmp	r3, #0
 8009244:	d106      	bne.n	8009254 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009246:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800924a:	4b8b      	ldr	r3, [pc, #556]	; (8009478 <HAL_UART_IRQHandler+0x2bc>)
 800924c:	4013      	ands	r3, r2
 800924e:	2b00      	cmp	r3, #0
 8009250:	f000 8116 	beq.w	8009480 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	2b00      	cmp	r3, #0
 800925e:	d011      	beq.n	8009284 <HAL_UART_IRQHandler+0xc8>
 8009260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00b      	beq.n	8009284 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2201      	movs	r2, #1
 8009272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800927a:	f043 0201 	orr.w	r2, r3, #1
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009288:	f003 0302 	and.w	r3, r3, #2
 800928c:	2b00      	cmp	r3, #0
 800928e:	d011      	beq.n	80092b4 <HAL_UART_IRQHandler+0xf8>
 8009290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009294:	f003 0301 	and.w	r3, r3, #1
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00b      	beq.n	80092b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2202      	movs	r2, #2
 80092a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092aa:	f043 0204 	orr.w	r2, r3, #4
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092b8:	f003 0304 	and.w	r3, r3, #4
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d011      	beq.n	80092e4 <HAL_UART_IRQHandler+0x128>
 80092c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00b      	beq.n	80092e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2204      	movs	r2, #4
 80092d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092da:	f043 0202 	orr.w	r2, r3, #2
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80092e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092e8:	f003 0308 	and.w	r3, r3, #8
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d017      	beq.n	8009320 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80092f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092f4:	f003 0320 	and.w	r3, r3, #32
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d105      	bne.n	8009308 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80092fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009300:	4b5c      	ldr	r3, [pc, #368]	; (8009474 <HAL_UART_IRQHandler+0x2b8>)
 8009302:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00b      	beq.n	8009320 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2208      	movs	r2, #8
 800930e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009316:	f043 0208 	orr.w	r2, r3, #8
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009328:	2b00      	cmp	r3, #0
 800932a:	d012      	beq.n	8009352 <HAL_UART_IRQHandler+0x196>
 800932c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009330:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00c      	beq.n	8009352 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009340:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009348:	f043 0220 	orr.w	r2, r3, #32
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 82dd 	beq.w	8009918 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800935e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009362:	f003 0320 	and.w	r3, r3, #32
 8009366:	2b00      	cmp	r3, #0
 8009368:	d013      	beq.n	8009392 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800936a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800936e:	f003 0320 	and.w	r3, r3, #32
 8009372:	2b00      	cmp	r3, #0
 8009374:	d105      	bne.n	8009382 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800937a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800937e:	2b00      	cmp	r3, #0
 8009380:	d007      	beq.n	8009392 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009386:	2b00      	cmp	r3, #0
 8009388:	d003      	beq.n	8009392 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009398:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093a6:	2b40      	cmp	r3, #64	; 0x40
 80093a8:	d005      	beq.n	80093b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80093aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80093ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d054      	beq.n	8009460 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f001 fc1c 	bl	800abf4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093c6:	2b40      	cmp	r3, #64	; 0x40
 80093c8:	d146      	bne.n	8009458 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	3308      	adds	r3, #8
 80093d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80093d8:	e853 3f00 	ldrex	r3, [r3]
 80093dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80093e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	3308      	adds	r3, #8
 80093f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80093f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80093fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009402:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009406:	e841 2300 	strex	r3, r2, [r1]
 800940a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800940e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1d9      	bne.n	80093ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800941c:	2b00      	cmp	r3, #0
 800941e:	d017      	beq.n	8009450 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009426:	4a15      	ldr	r2, [pc, #84]	; (800947c <HAL_UART_IRQHandler+0x2c0>)
 8009428:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009430:	4618      	mov	r0, r3
 8009432:	f7f9 fee1 	bl	80031f8 <HAL_DMA_Abort_IT>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d019      	beq.n	8009470 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800944a:	4610      	mov	r0, r2
 800944c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800944e:	e00f      	b.n	8009470 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fa77 	bl	8009944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009456:	e00b      	b.n	8009470 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fa73 	bl	8009944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800945e:	e007      	b.n	8009470 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fa6f 	bl	8009944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800946e:	e253      	b.n	8009918 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009470:	bf00      	nop
    return;
 8009472:	e251      	b.n	8009918 <HAL_UART_IRQHandler+0x75c>
 8009474:	10000001 	.word	0x10000001
 8009478:	04000120 	.word	0x04000120
 800947c:	0800acc1 	.word	0x0800acc1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009484:	2b01      	cmp	r3, #1
 8009486:	f040 81e7 	bne.w	8009858 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800948a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800948e:	f003 0310 	and.w	r3, r3, #16
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 81e0 	beq.w	8009858 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800949c:	f003 0310 	and.w	r3, r3, #16
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f000 81d9 	beq.w	8009858 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2210      	movs	r2, #16
 80094ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b8:	2b40      	cmp	r3, #64	; 0x40
 80094ba:	f040 8151 	bne.w	8009760 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a96      	ldr	r2, [pc, #600]	; (8009720 <HAL_UART_IRQHandler+0x564>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d068      	beq.n	800959e <HAL_UART_IRQHandler+0x3e2>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a93      	ldr	r2, [pc, #588]	; (8009724 <HAL_UART_IRQHandler+0x568>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d061      	beq.n	800959e <HAL_UART_IRQHandler+0x3e2>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a91      	ldr	r2, [pc, #580]	; (8009728 <HAL_UART_IRQHandler+0x56c>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d05a      	beq.n	800959e <HAL_UART_IRQHandler+0x3e2>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a8e      	ldr	r2, [pc, #568]	; (800972c <HAL_UART_IRQHandler+0x570>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d053      	beq.n	800959e <HAL_UART_IRQHandler+0x3e2>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a8c      	ldr	r2, [pc, #560]	; (8009730 <HAL_UART_IRQHandler+0x574>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d04c      	beq.n	800959e <HAL_UART_IRQHandler+0x3e2>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a89      	ldr	r2, [pc, #548]	; (8009734 <HAL_UART_IRQHandler+0x578>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d045      	beq.n	800959e <HAL_UART_IRQHandler+0x3e2>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a87      	ldr	r2, [pc, #540]	; (8009738 <HAL_UART_IRQHandler+0x57c>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d03e      	beq.n	800959e <HAL_UART_IRQHandler+0x3e2>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a84      	ldr	r2, [pc, #528]	; (800973c <HAL_UART_IRQHandler+0x580>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d037      	beq.n	800959e <HAL_UART_IRQHandler+0x3e2>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a82      	ldr	r2, [pc, #520]	; (8009740 <HAL_UART_IRQHandler+0x584>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d030      	beq.n	800959e <HAL_UART_IRQHandler+0x3e2>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a7f      	ldr	r2, [pc, #508]	; (8009744 <HAL_UART_IRQHandler+0x588>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d029      	beq.n	800959e <HAL_UART_IRQHandler+0x3e2>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a7d      	ldr	r2, [pc, #500]	; (8009748 <HAL_UART_IRQHandler+0x58c>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d022      	beq.n	800959e <HAL_UART_IRQHandler+0x3e2>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a7a      	ldr	r2, [pc, #488]	; (800974c <HAL_UART_IRQHandler+0x590>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d01b      	beq.n	800959e <HAL_UART_IRQHandler+0x3e2>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a78      	ldr	r2, [pc, #480]	; (8009750 <HAL_UART_IRQHandler+0x594>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d014      	beq.n	800959e <HAL_UART_IRQHandler+0x3e2>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a75      	ldr	r2, [pc, #468]	; (8009754 <HAL_UART_IRQHandler+0x598>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d00d      	beq.n	800959e <HAL_UART_IRQHandler+0x3e2>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a73      	ldr	r2, [pc, #460]	; (8009758 <HAL_UART_IRQHandler+0x59c>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d006      	beq.n	800959e <HAL_UART_IRQHandler+0x3e2>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a70      	ldr	r2, [pc, #448]	; (800975c <HAL_UART_IRQHandler+0x5a0>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d106      	bne.n	80095ac <HAL_UART_IRQHandler+0x3f0>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	e005      	b.n	80095b8 <HAL_UART_IRQHandler+0x3fc>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f000 81ab 	beq.w	800991c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095d0:	429a      	cmp	r2, r3
 80095d2:	f080 81a3 	bcs.w	800991c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095e6:	69db      	ldr	r3, [r3, #28]
 80095e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ec:	f000 8087 	beq.w	80096fe <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009604:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800960c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	461a      	mov	r2, r3
 8009616:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800961a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800961e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009622:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009626:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800962a:	e841 2300 	strex	r3, r2, [r1]
 800962e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009632:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1da      	bne.n	80095f0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3308      	adds	r3, #8
 8009640:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009644:	e853 3f00 	ldrex	r3, [r3]
 8009648:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800964a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800964c:	f023 0301 	bic.w	r3, r3, #1
 8009650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	3308      	adds	r3, #8
 800965a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800965e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009662:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009664:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009666:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800966a:	e841 2300 	strex	r3, r2, [r1]
 800966e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1e1      	bne.n	800963a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3308      	adds	r3, #8
 800967c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009680:	e853 3f00 	ldrex	r3, [r3]
 8009684:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800968c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	3308      	adds	r3, #8
 8009696:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800969a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800969c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80096a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80096a2:	e841 2300 	strex	r3, r2, [r1]
 80096a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80096a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1e3      	bne.n	8009676 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2220      	movs	r2, #32
 80096b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096c4:	e853 3f00 	ldrex	r3, [r3]
 80096c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80096ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096cc:	f023 0310 	bic.w	r3, r3, #16
 80096d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	461a      	mov	r2, r3
 80096da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096de:	65bb      	str	r3, [r7, #88]	; 0x58
 80096e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80096e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096e6:	e841 2300 	strex	r3, r2, [r1]
 80096ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80096ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1e4      	bne.n	80096bc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7f9 fa5f 	bl	8002bbc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2202      	movs	r2, #2
 8009702:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009710:	b29b      	uxth	r3, r3
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	b29b      	uxth	r3, r3
 8009716:	4619      	mov	r1, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 f91d 	bl	8009958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800971e:	e0fd      	b.n	800991c <HAL_UART_IRQHandler+0x760>
 8009720:	40020010 	.word	0x40020010
 8009724:	40020028 	.word	0x40020028
 8009728:	40020040 	.word	0x40020040
 800972c:	40020058 	.word	0x40020058
 8009730:	40020070 	.word	0x40020070
 8009734:	40020088 	.word	0x40020088
 8009738:	400200a0 	.word	0x400200a0
 800973c:	400200b8 	.word	0x400200b8
 8009740:	40020410 	.word	0x40020410
 8009744:	40020428 	.word	0x40020428
 8009748:	40020440 	.word	0x40020440
 800974c:	40020458 	.word	0x40020458
 8009750:	40020470 	.word	0x40020470
 8009754:	40020488 	.word	0x40020488
 8009758:	400204a0 	.word	0x400204a0
 800975c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800976c:	b29b      	uxth	r3, r3
 800976e:	1ad3      	subs	r3, r2, r3
 8009770:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800977a:	b29b      	uxth	r3, r3
 800977c:	2b00      	cmp	r3, #0
 800977e:	f000 80cf 	beq.w	8009920 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009782:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 80ca 	beq.w	8009920 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009794:	e853 3f00 	ldrex	r3, [r3]
 8009798:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800979a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800979c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	461a      	mov	r2, r3
 80097aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80097ae:	647b      	str	r3, [r7, #68]	; 0x44
 80097b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097b6:	e841 2300 	strex	r3, r2, [r1]
 80097ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1e4      	bne.n	800978c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	3308      	adds	r3, #8
 80097c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097cc:	e853 3f00 	ldrex	r3, [r3]
 80097d0:	623b      	str	r3, [r7, #32]
   return(result);
 80097d2:	6a3a      	ldr	r2, [r7, #32]
 80097d4:	4b55      	ldr	r3, [pc, #340]	; (800992c <HAL_UART_IRQHandler+0x770>)
 80097d6:	4013      	ands	r3, r2
 80097d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	3308      	adds	r3, #8
 80097e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80097e6:	633a      	str	r2, [r7, #48]	; 0x30
 80097e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097ee:	e841 2300 	strex	r3, r2, [r1]
 80097f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1e3      	bne.n	80097c2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2220      	movs	r2, #32
 80097fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	e853 3f00 	ldrex	r3, [r3]
 800981a:	60fb      	str	r3, [r7, #12]
   return(result);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f023 0310 	bic.w	r3, r3, #16
 8009822:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	461a      	mov	r2, r3
 800982c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009830:	61fb      	str	r3, [r7, #28]
 8009832:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009834:	69b9      	ldr	r1, [r7, #24]
 8009836:	69fa      	ldr	r2, [r7, #28]
 8009838:	e841 2300 	strex	r3, r2, [r1]
 800983c:	617b      	str	r3, [r7, #20]
   return(result);
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d1e4      	bne.n	800980e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2202      	movs	r2, #2
 8009848:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800984a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800984e:	4619      	mov	r1, r3
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f881 	bl	8009958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009856:	e063      	b.n	8009920 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800985c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00e      	beq.n	8009882 <HAL_UART_IRQHandler+0x6c6>
 8009864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d008      	beq.n	8009882 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009878:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f002 f920 	bl	800bac0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009880:	e051      	b.n	8009926 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800988a:	2b00      	cmp	r3, #0
 800988c:	d014      	beq.n	80098b8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800988e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009896:	2b00      	cmp	r3, #0
 8009898:	d105      	bne.n	80098a6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800989a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800989e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d008      	beq.n	80098b8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d03a      	beq.n	8009924 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	4798      	blx	r3
    }
    return;
 80098b6:	e035      	b.n	8009924 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d009      	beq.n	80098d8 <HAL_UART_IRQHandler+0x71c>
 80098c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d003      	beq.n	80098d8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f001 fbad 	bl	800b030 <UART_EndTransmit_IT>
    return;
 80098d6:	e026      	b.n	8009926 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80098d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d009      	beq.n	80098f8 <HAL_UART_IRQHandler+0x73c>
 80098e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d003      	beq.n	80098f8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f002 f8f9 	bl	800bae8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098f6:	e016      	b.n	8009926 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80098f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009900:	2b00      	cmp	r3, #0
 8009902:	d010      	beq.n	8009926 <HAL_UART_IRQHandler+0x76a>
 8009904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009908:	2b00      	cmp	r3, #0
 800990a:	da0c      	bge.n	8009926 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f002 f8e1 	bl	800bad4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009912:	e008      	b.n	8009926 <HAL_UART_IRQHandler+0x76a>
      return;
 8009914:	bf00      	nop
 8009916:	e006      	b.n	8009926 <HAL_UART_IRQHandler+0x76a>
    return;
 8009918:	bf00      	nop
 800991a:	e004      	b.n	8009926 <HAL_UART_IRQHandler+0x76a>
      return;
 800991c:	bf00      	nop
 800991e:	e002      	b.n	8009926 <HAL_UART_IRQHandler+0x76a>
      return;
 8009920:	bf00      	nop
 8009922:	e000      	b.n	8009926 <HAL_UART_IRQHandler+0x76a>
    return;
 8009924:	bf00      	nop
  }
}
 8009926:	37e8      	adds	r7, #232	; 0xe8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	effffffe 	.word	0xeffffffe

08009930 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009938:	bf00      	nop
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	460b      	mov	r3, r1
 8009962:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009974:	b092      	sub	sp, #72	; 0x48
 8009976:	af00      	add	r7, sp, #0
 8009978:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800997a:	2300      	movs	r3, #0
 800997c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	689a      	ldr	r2, [r3, #8]
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	431a      	orrs	r2, r3
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	695b      	ldr	r3, [r3, #20]
 800998e:	431a      	orrs	r2, r3
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	69db      	ldr	r3, [r3, #28]
 8009994:	4313      	orrs	r3, r2
 8009996:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	4bbe      	ldr	r3, [pc, #760]	; (8009c98 <UART_SetConfig+0x328>)
 80099a0:	4013      	ands	r3, r2
 80099a2:	697a      	ldr	r2, [r7, #20]
 80099a4:	6812      	ldr	r2, [r2, #0]
 80099a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80099a8:	430b      	orrs	r3, r1
 80099aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	68da      	ldr	r2, [r3, #12]
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4ab3      	ldr	r2, [pc, #716]	; (8009c9c <UART_SetConfig+0x32c>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d004      	beq.n	80099dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099d8:	4313      	orrs	r3, r2
 80099da:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	689a      	ldr	r2, [r3, #8]
 80099e2:	4baf      	ldr	r3, [pc, #700]	; (8009ca0 <UART_SetConfig+0x330>)
 80099e4:	4013      	ands	r3, r2
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	6812      	ldr	r2, [r2, #0]
 80099ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80099ec:	430b      	orrs	r3, r1
 80099ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f6:	f023 010f 	bic.w	r1, r3, #15
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	430a      	orrs	r2, r1
 8009a04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4aa6      	ldr	r2, [pc, #664]	; (8009ca4 <UART_SetConfig+0x334>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d177      	bne.n	8009b00 <UART_SetConfig+0x190>
 8009a10:	4ba5      	ldr	r3, [pc, #660]	; (8009ca8 <UART_SetConfig+0x338>)
 8009a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a18:	2b28      	cmp	r3, #40	; 0x28
 8009a1a:	d86d      	bhi.n	8009af8 <UART_SetConfig+0x188>
 8009a1c:	a201      	add	r2, pc, #4	; (adr r2, 8009a24 <UART_SetConfig+0xb4>)
 8009a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a22:	bf00      	nop
 8009a24:	08009ac9 	.word	0x08009ac9
 8009a28:	08009af9 	.word	0x08009af9
 8009a2c:	08009af9 	.word	0x08009af9
 8009a30:	08009af9 	.word	0x08009af9
 8009a34:	08009af9 	.word	0x08009af9
 8009a38:	08009af9 	.word	0x08009af9
 8009a3c:	08009af9 	.word	0x08009af9
 8009a40:	08009af9 	.word	0x08009af9
 8009a44:	08009ad1 	.word	0x08009ad1
 8009a48:	08009af9 	.word	0x08009af9
 8009a4c:	08009af9 	.word	0x08009af9
 8009a50:	08009af9 	.word	0x08009af9
 8009a54:	08009af9 	.word	0x08009af9
 8009a58:	08009af9 	.word	0x08009af9
 8009a5c:	08009af9 	.word	0x08009af9
 8009a60:	08009af9 	.word	0x08009af9
 8009a64:	08009ad9 	.word	0x08009ad9
 8009a68:	08009af9 	.word	0x08009af9
 8009a6c:	08009af9 	.word	0x08009af9
 8009a70:	08009af9 	.word	0x08009af9
 8009a74:	08009af9 	.word	0x08009af9
 8009a78:	08009af9 	.word	0x08009af9
 8009a7c:	08009af9 	.word	0x08009af9
 8009a80:	08009af9 	.word	0x08009af9
 8009a84:	08009ae1 	.word	0x08009ae1
 8009a88:	08009af9 	.word	0x08009af9
 8009a8c:	08009af9 	.word	0x08009af9
 8009a90:	08009af9 	.word	0x08009af9
 8009a94:	08009af9 	.word	0x08009af9
 8009a98:	08009af9 	.word	0x08009af9
 8009a9c:	08009af9 	.word	0x08009af9
 8009aa0:	08009af9 	.word	0x08009af9
 8009aa4:	08009ae9 	.word	0x08009ae9
 8009aa8:	08009af9 	.word	0x08009af9
 8009aac:	08009af9 	.word	0x08009af9
 8009ab0:	08009af9 	.word	0x08009af9
 8009ab4:	08009af9 	.word	0x08009af9
 8009ab8:	08009af9 	.word	0x08009af9
 8009abc:	08009af9 	.word	0x08009af9
 8009ac0:	08009af9 	.word	0x08009af9
 8009ac4:	08009af1 	.word	0x08009af1
 8009ac8:	2301      	movs	r3, #1
 8009aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ace:	e326      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009ad0:	2304      	movs	r3, #4
 8009ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ad6:	e322      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009ad8:	2308      	movs	r3, #8
 8009ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ade:	e31e      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009ae0:	2310      	movs	r3, #16
 8009ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ae6:	e31a      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009ae8:	2320      	movs	r3, #32
 8009aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aee:	e316      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009af0:	2340      	movs	r3, #64	; 0x40
 8009af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009af6:	e312      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009af8:	2380      	movs	r3, #128	; 0x80
 8009afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009afe:	e30e      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a69      	ldr	r2, [pc, #420]	; (8009cac <UART_SetConfig+0x33c>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d130      	bne.n	8009b6c <UART_SetConfig+0x1fc>
 8009b0a:	4b67      	ldr	r3, [pc, #412]	; (8009ca8 <UART_SetConfig+0x338>)
 8009b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b0e:	f003 0307 	and.w	r3, r3, #7
 8009b12:	2b05      	cmp	r3, #5
 8009b14:	d826      	bhi.n	8009b64 <UART_SetConfig+0x1f4>
 8009b16:	a201      	add	r2, pc, #4	; (adr r2, 8009b1c <UART_SetConfig+0x1ac>)
 8009b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1c:	08009b35 	.word	0x08009b35
 8009b20:	08009b3d 	.word	0x08009b3d
 8009b24:	08009b45 	.word	0x08009b45
 8009b28:	08009b4d 	.word	0x08009b4d
 8009b2c:	08009b55 	.word	0x08009b55
 8009b30:	08009b5d 	.word	0x08009b5d
 8009b34:	2300      	movs	r3, #0
 8009b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b3a:	e2f0      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009b3c:	2304      	movs	r3, #4
 8009b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b42:	e2ec      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009b44:	2308      	movs	r3, #8
 8009b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b4a:	e2e8      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009b4c:	2310      	movs	r3, #16
 8009b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b52:	e2e4      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009b54:	2320      	movs	r3, #32
 8009b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b5a:	e2e0      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009b5c:	2340      	movs	r3, #64	; 0x40
 8009b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b62:	e2dc      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009b64:	2380      	movs	r3, #128	; 0x80
 8009b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b6a:	e2d8      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a4f      	ldr	r2, [pc, #316]	; (8009cb0 <UART_SetConfig+0x340>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d130      	bne.n	8009bd8 <UART_SetConfig+0x268>
 8009b76:	4b4c      	ldr	r3, [pc, #304]	; (8009ca8 <UART_SetConfig+0x338>)
 8009b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b7a:	f003 0307 	and.w	r3, r3, #7
 8009b7e:	2b05      	cmp	r3, #5
 8009b80:	d826      	bhi.n	8009bd0 <UART_SetConfig+0x260>
 8009b82:	a201      	add	r2, pc, #4	; (adr r2, 8009b88 <UART_SetConfig+0x218>)
 8009b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b88:	08009ba1 	.word	0x08009ba1
 8009b8c:	08009ba9 	.word	0x08009ba9
 8009b90:	08009bb1 	.word	0x08009bb1
 8009b94:	08009bb9 	.word	0x08009bb9
 8009b98:	08009bc1 	.word	0x08009bc1
 8009b9c:	08009bc9 	.word	0x08009bc9
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ba6:	e2ba      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009ba8:	2304      	movs	r3, #4
 8009baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bae:	e2b6      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009bb0:	2308      	movs	r3, #8
 8009bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bb6:	e2b2      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009bb8:	2310      	movs	r3, #16
 8009bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bbe:	e2ae      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009bc0:	2320      	movs	r3, #32
 8009bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bc6:	e2aa      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009bc8:	2340      	movs	r3, #64	; 0x40
 8009bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bce:	e2a6      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009bd0:	2380      	movs	r3, #128	; 0x80
 8009bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bd6:	e2a2      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a35      	ldr	r2, [pc, #212]	; (8009cb4 <UART_SetConfig+0x344>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d130      	bne.n	8009c44 <UART_SetConfig+0x2d4>
 8009be2:	4b31      	ldr	r3, [pc, #196]	; (8009ca8 <UART_SetConfig+0x338>)
 8009be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009be6:	f003 0307 	and.w	r3, r3, #7
 8009bea:	2b05      	cmp	r3, #5
 8009bec:	d826      	bhi.n	8009c3c <UART_SetConfig+0x2cc>
 8009bee:	a201      	add	r2, pc, #4	; (adr r2, 8009bf4 <UART_SetConfig+0x284>)
 8009bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf4:	08009c0d 	.word	0x08009c0d
 8009bf8:	08009c15 	.word	0x08009c15
 8009bfc:	08009c1d 	.word	0x08009c1d
 8009c00:	08009c25 	.word	0x08009c25
 8009c04:	08009c2d 	.word	0x08009c2d
 8009c08:	08009c35 	.word	0x08009c35
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c12:	e284      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009c14:	2304      	movs	r3, #4
 8009c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c1a:	e280      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009c1c:	2308      	movs	r3, #8
 8009c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c22:	e27c      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009c24:	2310      	movs	r3, #16
 8009c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c2a:	e278      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009c2c:	2320      	movs	r3, #32
 8009c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c32:	e274      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009c34:	2340      	movs	r3, #64	; 0x40
 8009c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c3a:	e270      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009c3c:	2380      	movs	r3, #128	; 0x80
 8009c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c42:	e26c      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a1b      	ldr	r2, [pc, #108]	; (8009cb8 <UART_SetConfig+0x348>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d142      	bne.n	8009cd4 <UART_SetConfig+0x364>
 8009c4e:	4b16      	ldr	r3, [pc, #88]	; (8009ca8 <UART_SetConfig+0x338>)
 8009c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c52:	f003 0307 	and.w	r3, r3, #7
 8009c56:	2b05      	cmp	r3, #5
 8009c58:	d838      	bhi.n	8009ccc <UART_SetConfig+0x35c>
 8009c5a:	a201      	add	r2, pc, #4	; (adr r2, 8009c60 <UART_SetConfig+0x2f0>)
 8009c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c60:	08009c79 	.word	0x08009c79
 8009c64:	08009c81 	.word	0x08009c81
 8009c68:	08009c89 	.word	0x08009c89
 8009c6c:	08009c91 	.word	0x08009c91
 8009c70:	08009cbd 	.word	0x08009cbd
 8009c74:	08009cc5 	.word	0x08009cc5
 8009c78:	2300      	movs	r3, #0
 8009c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c7e:	e24e      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009c80:	2304      	movs	r3, #4
 8009c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c86:	e24a      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009c88:	2308      	movs	r3, #8
 8009c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c8e:	e246      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009c90:	2310      	movs	r3, #16
 8009c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c96:	e242      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009c98:	cfff69f3 	.word	0xcfff69f3
 8009c9c:	58000c00 	.word	0x58000c00
 8009ca0:	11fff4ff 	.word	0x11fff4ff
 8009ca4:	40011000 	.word	0x40011000
 8009ca8:	58024400 	.word	0x58024400
 8009cac:	40004400 	.word	0x40004400
 8009cb0:	40004800 	.word	0x40004800
 8009cb4:	40004c00 	.word	0x40004c00
 8009cb8:	40005000 	.word	0x40005000
 8009cbc:	2320      	movs	r3, #32
 8009cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cc2:	e22c      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009cc4:	2340      	movs	r3, #64	; 0x40
 8009cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cca:	e228      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009ccc:	2380      	movs	r3, #128	; 0x80
 8009cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd2:	e224      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4ab1      	ldr	r2, [pc, #708]	; (8009fa0 <UART_SetConfig+0x630>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d176      	bne.n	8009dcc <UART_SetConfig+0x45c>
 8009cde:	4bb1      	ldr	r3, [pc, #708]	; (8009fa4 <UART_SetConfig+0x634>)
 8009ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ce6:	2b28      	cmp	r3, #40	; 0x28
 8009ce8:	d86c      	bhi.n	8009dc4 <UART_SetConfig+0x454>
 8009cea:	a201      	add	r2, pc, #4	; (adr r2, 8009cf0 <UART_SetConfig+0x380>)
 8009cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf0:	08009d95 	.word	0x08009d95
 8009cf4:	08009dc5 	.word	0x08009dc5
 8009cf8:	08009dc5 	.word	0x08009dc5
 8009cfc:	08009dc5 	.word	0x08009dc5
 8009d00:	08009dc5 	.word	0x08009dc5
 8009d04:	08009dc5 	.word	0x08009dc5
 8009d08:	08009dc5 	.word	0x08009dc5
 8009d0c:	08009dc5 	.word	0x08009dc5
 8009d10:	08009d9d 	.word	0x08009d9d
 8009d14:	08009dc5 	.word	0x08009dc5
 8009d18:	08009dc5 	.word	0x08009dc5
 8009d1c:	08009dc5 	.word	0x08009dc5
 8009d20:	08009dc5 	.word	0x08009dc5
 8009d24:	08009dc5 	.word	0x08009dc5
 8009d28:	08009dc5 	.word	0x08009dc5
 8009d2c:	08009dc5 	.word	0x08009dc5
 8009d30:	08009da5 	.word	0x08009da5
 8009d34:	08009dc5 	.word	0x08009dc5
 8009d38:	08009dc5 	.word	0x08009dc5
 8009d3c:	08009dc5 	.word	0x08009dc5
 8009d40:	08009dc5 	.word	0x08009dc5
 8009d44:	08009dc5 	.word	0x08009dc5
 8009d48:	08009dc5 	.word	0x08009dc5
 8009d4c:	08009dc5 	.word	0x08009dc5
 8009d50:	08009dad 	.word	0x08009dad
 8009d54:	08009dc5 	.word	0x08009dc5
 8009d58:	08009dc5 	.word	0x08009dc5
 8009d5c:	08009dc5 	.word	0x08009dc5
 8009d60:	08009dc5 	.word	0x08009dc5
 8009d64:	08009dc5 	.word	0x08009dc5
 8009d68:	08009dc5 	.word	0x08009dc5
 8009d6c:	08009dc5 	.word	0x08009dc5
 8009d70:	08009db5 	.word	0x08009db5
 8009d74:	08009dc5 	.word	0x08009dc5
 8009d78:	08009dc5 	.word	0x08009dc5
 8009d7c:	08009dc5 	.word	0x08009dc5
 8009d80:	08009dc5 	.word	0x08009dc5
 8009d84:	08009dc5 	.word	0x08009dc5
 8009d88:	08009dc5 	.word	0x08009dc5
 8009d8c:	08009dc5 	.word	0x08009dc5
 8009d90:	08009dbd 	.word	0x08009dbd
 8009d94:	2301      	movs	r3, #1
 8009d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d9a:	e1c0      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009d9c:	2304      	movs	r3, #4
 8009d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009da2:	e1bc      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009da4:	2308      	movs	r3, #8
 8009da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009daa:	e1b8      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009dac:	2310      	movs	r3, #16
 8009dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009db2:	e1b4      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009db4:	2320      	movs	r3, #32
 8009db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dba:	e1b0      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009dbc:	2340      	movs	r3, #64	; 0x40
 8009dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dc2:	e1ac      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009dc4:	2380      	movs	r3, #128	; 0x80
 8009dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dca:	e1a8      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a75      	ldr	r2, [pc, #468]	; (8009fa8 <UART_SetConfig+0x638>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d130      	bne.n	8009e38 <UART_SetConfig+0x4c8>
 8009dd6:	4b73      	ldr	r3, [pc, #460]	; (8009fa4 <UART_SetConfig+0x634>)
 8009dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dda:	f003 0307 	and.w	r3, r3, #7
 8009dde:	2b05      	cmp	r3, #5
 8009de0:	d826      	bhi.n	8009e30 <UART_SetConfig+0x4c0>
 8009de2:	a201      	add	r2, pc, #4	; (adr r2, 8009de8 <UART_SetConfig+0x478>)
 8009de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de8:	08009e01 	.word	0x08009e01
 8009dec:	08009e09 	.word	0x08009e09
 8009df0:	08009e11 	.word	0x08009e11
 8009df4:	08009e19 	.word	0x08009e19
 8009df8:	08009e21 	.word	0x08009e21
 8009dfc:	08009e29 	.word	0x08009e29
 8009e00:	2300      	movs	r3, #0
 8009e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e06:	e18a      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009e08:	2304      	movs	r3, #4
 8009e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e0e:	e186      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009e10:	2308      	movs	r3, #8
 8009e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e16:	e182      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009e18:	2310      	movs	r3, #16
 8009e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e1e:	e17e      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009e20:	2320      	movs	r3, #32
 8009e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e26:	e17a      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009e28:	2340      	movs	r3, #64	; 0x40
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e2e:	e176      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009e30:	2380      	movs	r3, #128	; 0x80
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e36:	e172      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a5b      	ldr	r2, [pc, #364]	; (8009fac <UART_SetConfig+0x63c>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d130      	bne.n	8009ea4 <UART_SetConfig+0x534>
 8009e42:	4b58      	ldr	r3, [pc, #352]	; (8009fa4 <UART_SetConfig+0x634>)
 8009e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e46:	f003 0307 	and.w	r3, r3, #7
 8009e4a:	2b05      	cmp	r3, #5
 8009e4c:	d826      	bhi.n	8009e9c <UART_SetConfig+0x52c>
 8009e4e:	a201      	add	r2, pc, #4	; (adr r2, 8009e54 <UART_SetConfig+0x4e4>)
 8009e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e54:	08009e6d 	.word	0x08009e6d
 8009e58:	08009e75 	.word	0x08009e75
 8009e5c:	08009e7d 	.word	0x08009e7d
 8009e60:	08009e85 	.word	0x08009e85
 8009e64:	08009e8d 	.word	0x08009e8d
 8009e68:	08009e95 	.word	0x08009e95
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e72:	e154      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009e74:	2304      	movs	r3, #4
 8009e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e7a:	e150      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009e7c:	2308      	movs	r3, #8
 8009e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e82:	e14c      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009e84:	2310      	movs	r3, #16
 8009e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e8a:	e148      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009e8c:	2320      	movs	r3, #32
 8009e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e92:	e144      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009e94:	2340      	movs	r3, #64	; 0x40
 8009e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e9a:	e140      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009e9c:	2380      	movs	r3, #128	; 0x80
 8009e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ea2:	e13c      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a41      	ldr	r2, [pc, #260]	; (8009fb0 <UART_SetConfig+0x640>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	f040 8082 	bne.w	8009fb4 <UART_SetConfig+0x644>
 8009eb0:	4b3c      	ldr	r3, [pc, #240]	; (8009fa4 <UART_SetConfig+0x634>)
 8009eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009eb8:	2b28      	cmp	r3, #40	; 0x28
 8009eba:	d86d      	bhi.n	8009f98 <UART_SetConfig+0x628>
 8009ebc:	a201      	add	r2, pc, #4	; (adr r2, 8009ec4 <UART_SetConfig+0x554>)
 8009ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec2:	bf00      	nop
 8009ec4:	08009f69 	.word	0x08009f69
 8009ec8:	08009f99 	.word	0x08009f99
 8009ecc:	08009f99 	.word	0x08009f99
 8009ed0:	08009f99 	.word	0x08009f99
 8009ed4:	08009f99 	.word	0x08009f99
 8009ed8:	08009f99 	.word	0x08009f99
 8009edc:	08009f99 	.word	0x08009f99
 8009ee0:	08009f99 	.word	0x08009f99
 8009ee4:	08009f71 	.word	0x08009f71
 8009ee8:	08009f99 	.word	0x08009f99
 8009eec:	08009f99 	.word	0x08009f99
 8009ef0:	08009f99 	.word	0x08009f99
 8009ef4:	08009f99 	.word	0x08009f99
 8009ef8:	08009f99 	.word	0x08009f99
 8009efc:	08009f99 	.word	0x08009f99
 8009f00:	08009f99 	.word	0x08009f99
 8009f04:	08009f79 	.word	0x08009f79
 8009f08:	08009f99 	.word	0x08009f99
 8009f0c:	08009f99 	.word	0x08009f99
 8009f10:	08009f99 	.word	0x08009f99
 8009f14:	08009f99 	.word	0x08009f99
 8009f18:	08009f99 	.word	0x08009f99
 8009f1c:	08009f99 	.word	0x08009f99
 8009f20:	08009f99 	.word	0x08009f99
 8009f24:	08009f81 	.word	0x08009f81
 8009f28:	08009f99 	.word	0x08009f99
 8009f2c:	08009f99 	.word	0x08009f99
 8009f30:	08009f99 	.word	0x08009f99
 8009f34:	08009f99 	.word	0x08009f99
 8009f38:	08009f99 	.word	0x08009f99
 8009f3c:	08009f99 	.word	0x08009f99
 8009f40:	08009f99 	.word	0x08009f99
 8009f44:	08009f89 	.word	0x08009f89
 8009f48:	08009f99 	.word	0x08009f99
 8009f4c:	08009f99 	.word	0x08009f99
 8009f50:	08009f99 	.word	0x08009f99
 8009f54:	08009f99 	.word	0x08009f99
 8009f58:	08009f99 	.word	0x08009f99
 8009f5c:	08009f99 	.word	0x08009f99
 8009f60:	08009f99 	.word	0x08009f99
 8009f64:	08009f91 	.word	0x08009f91
 8009f68:	2301      	movs	r3, #1
 8009f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f6e:	e0d6      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009f70:	2304      	movs	r3, #4
 8009f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f76:	e0d2      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009f78:	2308      	movs	r3, #8
 8009f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f7e:	e0ce      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009f80:	2310      	movs	r3, #16
 8009f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f86:	e0ca      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009f88:	2320      	movs	r3, #32
 8009f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f8e:	e0c6      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009f90:	2340      	movs	r3, #64	; 0x40
 8009f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f96:	e0c2      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009f98:	2380      	movs	r3, #128	; 0x80
 8009f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f9e:	e0be      	b.n	800a11e <UART_SetConfig+0x7ae>
 8009fa0:	40011400 	.word	0x40011400
 8009fa4:	58024400 	.word	0x58024400
 8009fa8:	40007800 	.word	0x40007800
 8009fac:	40007c00 	.word	0x40007c00
 8009fb0:	40011800 	.word	0x40011800
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4aad      	ldr	r2, [pc, #692]	; (800a270 <UART_SetConfig+0x900>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d176      	bne.n	800a0ac <UART_SetConfig+0x73c>
 8009fbe:	4bad      	ldr	r3, [pc, #692]	; (800a274 <UART_SetConfig+0x904>)
 8009fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fc6:	2b28      	cmp	r3, #40	; 0x28
 8009fc8:	d86c      	bhi.n	800a0a4 <UART_SetConfig+0x734>
 8009fca:	a201      	add	r2, pc, #4	; (adr r2, 8009fd0 <UART_SetConfig+0x660>)
 8009fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd0:	0800a075 	.word	0x0800a075
 8009fd4:	0800a0a5 	.word	0x0800a0a5
 8009fd8:	0800a0a5 	.word	0x0800a0a5
 8009fdc:	0800a0a5 	.word	0x0800a0a5
 8009fe0:	0800a0a5 	.word	0x0800a0a5
 8009fe4:	0800a0a5 	.word	0x0800a0a5
 8009fe8:	0800a0a5 	.word	0x0800a0a5
 8009fec:	0800a0a5 	.word	0x0800a0a5
 8009ff0:	0800a07d 	.word	0x0800a07d
 8009ff4:	0800a0a5 	.word	0x0800a0a5
 8009ff8:	0800a0a5 	.word	0x0800a0a5
 8009ffc:	0800a0a5 	.word	0x0800a0a5
 800a000:	0800a0a5 	.word	0x0800a0a5
 800a004:	0800a0a5 	.word	0x0800a0a5
 800a008:	0800a0a5 	.word	0x0800a0a5
 800a00c:	0800a0a5 	.word	0x0800a0a5
 800a010:	0800a085 	.word	0x0800a085
 800a014:	0800a0a5 	.word	0x0800a0a5
 800a018:	0800a0a5 	.word	0x0800a0a5
 800a01c:	0800a0a5 	.word	0x0800a0a5
 800a020:	0800a0a5 	.word	0x0800a0a5
 800a024:	0800a0a5 	.word	0x0800a0a5
 800a028:	0800a0a5 	.word	0x0800a0a5
 800a02c:	0800a0a5 	.word	0x0800a0a5
 800a030:	0800a08d 	.word	0x0800a08d
 800a034:	0800a0a5 	.word	0x0800a0a5
 800a038:	0800a0a5 	.word	0x0800a0a5
 800a03c:	0800a0a5 	.word	0x0800a0a5
 800a040:	0800a0a5 	.word	0x0800a0a5
 800a044:	0800a0a5 	.word	0x0800a0a5
 800a048:	0800a0a5 	.word	0x0800a0a5
 800a04c:	0800a0a5 	.word	0x0800a0a5
 800a050:	0800a095 	.word	0x0800a095
 800a054:	0800a0a5 	.word	0x0800a0a5
 800a058:	0800a0a5 	.word	0x0800a0a5
 800a05c:	0800a0a5 	.word	0x0800a0a5
 800a060:	0800a0a5 	.word	0x0800a0a5
 800a064:	0800a0a5 	.word	0x0800a0a5
 800a068:	0800a0a5 	.word	0x0800a0a5
 800a06c:	0800a0a5 	.word	0x0800a0a5
 800a070:	0800a09d 	.word	0x0800a09d
 800a074:	2301      	movs	r3, #1
 800a076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a07a:	e050      	b.n	800a11e <UART_SetConfig+0x7ae>
 800a07c:	2304      	movs	r3, #4
 800a07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a082:	e04c      	b.n	800a11e <UART_SetConfig+0x7ae>
 800a084:	2308      	movs	r3, #8
 800a086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a08a:	e048      	b.n	800a11e <UART_SetConfig+0x7ae>
 800a08c:	2310      	movs	r3, #16
 800a08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a092:	e044      	b.n	800a11e <UART_SetConfig+0x7ae>
 800a094:	2320      	movs	r3, #32
 800a096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a09a:	e040      	b.n	800a11e <UART_SetConfig+0x7ae>
 800a09c:	2340      	movs	r3, #64	; 0x40
 800a09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0a2:	e03c      	b.n	800a11e <UART_SetConfig+0x7ae>
 800a0a4:	2380      	movs	r3, #128	; 0x80
 800a0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0aa:	e038      	b.n	800a11e <UART_SetConfig+0x7ae>
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a71      	ldr	r2, [pc, #452]	; (800a278 <UART_SetConfig+0x908>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d130      	bne.n	800a118 <UART_SetConfig+0x7a8>
 800a0b6:	4b6f      	ldr	r3, [pc, #444]	; (800a274 <UART_SetConfig+0x904>)
 800a0b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ba:	f003 0307 	and.w	r3, r3, #7
 800a0be:	2b05      	cmp	r3, #5
 800a0c0:	d826      	bhi.n	800a110 <UART_SetConfig+0x7a0>
 800a0c2:	a201      	add	r2, pc, #4	; (adr r2, 800a0c8 <UART_SetConfig+0x758>)
 800a0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c8:	0800a0e1 	.word	0x0800a0e1
 800a0cc:	0800a0e9 	.word	0x0800a0e9
 800a0d0:	0800a0f1 	.word	0x0800a0f1
 800a0d4:	0800a0f9 	.word	0x0800a0f9
 800a0d8:	0800a101 	.word	0x0800a101
 800a0dc:	0800a109 	.word	0x0800a109
 800a0e0:	2302      	movs	r3, #2
 800a0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0e6:	e01a      	b.n	800a11e <UART_SetConfig+0x7ae>
 800a0e8:	2304      	movs	r3, #4
 800a0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0ee:	e016      	b.n	800a11e <UART_SetConfig+0x7ae>
 800a0f0:	2308      	movs	r3, #8
 800a0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0f6:	e012      	b.n	800a11e <UART_SetConfig+0x7ae>
 800a0f8:	2310      	movs	r3, #16
 800a0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0fe:	e00e      	b.n	800a11e <UART_SetConfig+0x7ae>
 800a100:	2320      	movs	r3, #32
 800a102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a106:	e00a      	b.n	800a11e <UART_SetConfig+0x7ae>
 800a108:	2340      	movs	r3, #64	; 0x40
 800a10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a10e:	e006      	b.n	800a11e <UART_SetConfig+0x7ae>
 800a110:	2380      	movs	r3, #128	; 0x80
 800a112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a116:	e002      	b.n	800a11e <UART_SetConfig+0x7ae>
 800a118:	2380      	movs	r3, #128	; 0x80
 800a11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a55      	ldr	r2, [pc, #340]	; (800a278 <UART_SetConfig+0x908>)
 800a124:	4293      	cmp	r3, r2
 800a126:	f040 80f8 	bne.w	800a31a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a12a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a12e:	2b20      	cmp	r3, #32
 800a130:	dc46      	bgt.n	800a1c0 <UART_SetConfig+0x850>
 800a132:	2b02      	cmp	r3, #2
 800a134:	db75      	blt.n	800a222 <UART_SetConfig+0x8b2>
 800a136:	3b02      	subs	r3, #2
 800a138:	2b1e      	cmp	r3, #30
 800a13a:	d872      	bhi.n	800a222 <UART_SetConfig+0x8b2>
 800a13c:	a201      	add	r2, pc, #4	; (adr r2, 800a144 <UART_SetConfig+0x7d4>)
 800a13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a142:	bf00      	nop
 800a144:	0800a1c7 	.word	0x0800a1c7
 800a148:	0800a223 	.word	0x0800a223
 800a14c:	0800a1cf 	.word	0x0800a1cf
 800a150:	0800a223 	.word	0x0800a223
 800a154:	0800a223 	.word	0x0800a223
 800a158:	0800a223 	.word	0x0800a223
 800a15c:	0800a1df 	.word	0x0800a1df
 800a160:	0800a223 	.word	0x0800a223
 800a164:	0800a223 	.word	0x0800a223
 800a168:	0800a223 	.word	0x0800a223
 800a16c:	0800a223 	.word	0x0800a223
 800a170:	0800a223 	.word	0x0800a223
 800a174:	0800a223 	.word	0x0800a223
 800a178:	0800a223 	.word	0x0800a223
 800a17c:	0800a1ef 	.word	0x0800a1ef
 800a180:	0800a223 	.word	0x0800a223
 800a184:	0800a223 	.word	0x0800a223
 800a188:	0800a223 	.word	0x0800a223
 800a18c:	0800a223 	.word	0x0800a223
 800a190:	0800a223 	.word	0x0800a223
 800a194:	0800a223 	.word	0x0800a223
 800a198:	0800a223 	.word	0x0800a223
 800a19c:	0800a223 	.word	0x0800a223
 800a1a0:	0800a223 	.word	0x0800a223
 800a1a4:	0800a223 	.word	0x0800a223
 800a1a8:	0800a223 	.word	0x0800a223
 800a1ac:	0800a223 	.word	0x0800a223
 800a1b0:	0800a223 	.word	0x0800a223
 800a1b4:	0800a223 	.word	0x0800a223
 800a1b8:	0800a223 	.word	0x0800a223
 800a1bc:	0800a215 	.word	0x0800a215
 800a1c0:	2b40      	cmp	r3, #64	; 0x40
 800a1c2:	d02a      	beq.n	800a21a <UART_SetConfig+0x8aa>
 800a1c4:	e02d      	b.n	800a222 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a1c6:	f7fc ff9b 	bl	8007100 <HAL_RCCEx_GetD3PCLK1Freq>
 800a1ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a1cc:	e02f      	b.n	800a22e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fc ffaa 	bl	800712c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1dc:	e027      	b.n	800a22e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1de:	f107 0318 	add.w	r3, r7, #24
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fd f8f6 	bl	80073d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1ec:	e01f      	b.n	800a22e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1ee:	4b21      	ldr	r3, [pc, #132]	; (800a274 <UART_SetConfig+0x904>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f003 0320 	and.w	r3, r3, #32
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d009      	beq.n	800a20e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a1fa:	4b1e      	ldr	r3, [pc, #120]	; (800a274 <UART_SetConfig+0x904>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	08db      	lsrs	r3, r3, #3
 800a200:	f003 0303 	and.w	r3, r3, #3
 800a204:	4a1d      	ldr	r2, [pc, #116]	; (800a27c <UART_SetConfig+0x90c>)
 800a206:	fa22 f303 	lsr.w	r3, r2, r3
 800a20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a20c:	e00f      	b.n	800a22e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a20e:	4b1b      	ldr	r3, [pc, #108]	; (800a27c <UART_SetConfig+0x90c>)
 800a210:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a212:	e00c      	b.n	800a22e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a214:	4b1a      	ldr	r3, [pc, #104]	; (800a280 <UART_SetConfig+0x910>)
 800a216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a218:	e009      	b.n	800a22e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a21a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a21e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a220:	e005      	b.n	800a22e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a222:	2300      	movs	r3, #0
 800a224:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a22c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a230:	2b00      	cmp	r3, #0
 800a232:	f000 81ee 	beq.w	800a612 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23a:	4a12      	ldr	r2, [pc, #72]	; (800a284 <UART_SetConfig+0x914>)
 800a23c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a240:	461a      	mov	r2, r3
 800a242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a244:	fbb3 f3f2 	udiv	r3, r3, r2
 800a248:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	685a      	ldr	r2, [r3, #4]
 800a24e:	4613      	mov	r3, r2
 800a250:	005b      	lsls	r3, r3, #1
 800a252:	4413      	add	r3, r2
 800a254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a256:	429a      	cmp	r2, r3
 800a258:	d305      	bcc.n	800a266 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a262:	429a      	cmp	r2, r3
 800a264:	d910      	bls.n	800a288 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a26c:	e1d1      	b.n	800a612 <UART_SetConfig+0xca2>
 800a26e:	bf00      	nop
 800a270:	40011c00 	.word	0x40011c00
 800a274:	58024400 	.word	0x58024400
 800a278:	58000c00 	.word	0x58000c00
 800a27c:	03d09000 	.word	0x03d09000
 800a280:	003d0900 	.word	0x003d0900
 800a284:	0800d504 	.word	0x0800d504
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a28a:	2200      	movs	r2, #0
 800a28c:	60bb      	str	r3, [r7, #8]
 800a28e:	60fa      	str	r2, [r7, #12]
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a294:	4ac0      	ldr	r2, [pc, #768]	; (800a598 <UART_SetConfig+0xc28>)
 800a296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	2200      	movs	r2, #0
 800a29e:	603b      	str	r3, [r7, #0]
 800a2a0:	607a      	str	r2, [r7, #4]
 800a2a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a2aa:	f7f6 f871 	bl	8000390 <__aeabi_uldivmod>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	4610      	mov	r0, r2
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	f04f 0200 	mov.w	r2, #0
 800a2ba:	f04f 0300 	mov.w	r3, #0
 800a2be:	020b      	lsls	r3, r1, #8
 800a2c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a2c4:	0202      	lsls	r2, r0, #8
 800a2c6:	6979      	ldr	r1, [r7, #20]
 800a2c8:	6849      	ldr	r1, [r1, #4]
 800a2ca:	0849      	lsrs	r1, r1, #1
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	460c      	mov	r4, r1
 800a2d0:	4605      	mov	r5, r0
 800a2d2:	eb12 0804 	adds.w	r8, r2, r4
 800a2d6:	eb43 0905 	adc.w	r9, r3, r5
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	469a      	mov	sl, r3
 800a2e2:	4693      	mov	fp, r2
 800a2e4:	4652      	mov	r2, sl
 800a2e6:	465b      	mov	r3, fp
 800a2e8:	4640      	mov	r0, r8
 800a2ea:	4649      	mov	r1, r9
 800a2ec:	f7f6 f850 	bl	8000390 <__aeabi_uldivmod>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2fe:	d308      	bcc.n	800a312 <UART_SetConfig+0x9a2>
 800a300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a306:	d204      	bcs.n	800a312 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a30e:	60da      	str	r2, [r3, #12]
 800a310:	e17f      	b.n	800a612 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a318:	e17b      	b.n	800a612 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	69db      	ldr	r3, [r3, #28]
 800a31e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a322:	f040 80bd 	bne.w	800a4a0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a326:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a32a:	2b20      	cmp	r3, #32
 800a32c:	dc48      	bgt.n	800a3c0 <UART_SetConfig+0xa50>
 800a32e:	2b00      	cmp	r3, #0
 800a330:	db7b      	blt.n	800a42a <UART_SetConfig+0xaba>
 800a332:	2b20      	cmp	r3, #32
 800a334:	d879      	bhi.n	800a42a <UART_SetConfig+0xaba>
 800a336:	a201      	add	r2, pc, #4	; (adr r2, 800a33c <UART_SetConfig+0x9cc>)
 800a338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33c:	0800a3c7 	.word	0x0800a3c7
 800a340:	0800a3cf 	.word	0x0800a3cf
 800a344:	0800a42b 	.word	0x0800a42b
 800a348:	0800a42b 	.word	0x0800a42b
 800a34c:	0800a3d7 	.word	0x0800a3d7
 800a350:	0800a42b 	.word	0x0800a42b
 800a354:	0800a42b 	.word	0x0800a42b
 800a358:	0800a42b 	.word	0x0800a42b
 800a35c:	0800a3e7 	.word	0x0800a3e7
 800a360:	0800a42b 	.word	0x0800a42b
 800a364:	0800a42b 	.word	0x0800a42b
 800a368:	0800a42b 	.word	0x0800a42b
 800a36c:	0800a42b 	.word	0x0800a42b
 800a370:	0800a42b 	.word	0x0800a42b
 800a374:	0800a42b 	.word	0x0800a42b
 800a378:	0800a42b 	.word	0x0800a42b
 800a37c:	0800a3f7 	.word	0x0800a3f7
 800a380:	0800a42b 	.word	0x0800a42b
 800a384:	0800a42b 	.word	0x0800a42b
 800a388:	0800a42b 	.word	0x0800a42b
 800a38c:	0800a42b 	.word	0x0800a42b
 800a390:	0800a42b 	.word	0x0800a42b
 800a394:	0800a42b 	.word	0x0800a42b
 800a398:	0800a42b 	.word	0x0800a42b
 800a39c:	0800a42b 	.word	0x0800a42b
 800a3a0:	0800a42b 	.word	0x0800a42b
 800a3a4:	0800a42b 	.word	0x0800a42b
 800a3a8:	0800a42b 	.word	0x0800a42b
 800a3ac:	0800a42b 	.word	0x0800a42b
 800a3b0:	0800a42b 	.word	0x0800a42b
 800a3b4:	0800a42b 	.word	0x0800a42b
 800a3b8:	0800a42b 	.word	0x0800a42b
 800a3bc:	0800a41d 	.word	0x0800a41d
 800a3c0:	2b40      	cmp	r3, #64	; 0x40
 800a3c2:	d02e      	beq.n	800a422 <UART_SetConfig+0xab2>
 800a3c4:	e031      	b.n	800a42a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3c6:	f7fb fcb1 	bl	8005d2c <HAL_RCC_GetPCLK1Freq>
 800a3ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a3cc:	e033      	b.n	800a436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3ce:	f7fb fcc3 	bl	8005d58 <HAL_RCC_GetPCLK2Freq>
 800a3d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a3d4:	e02f      	b.n	800a436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fc fea6 	bl	800712c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3e4:	e027      	b.n	800a436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3e6:	f107 0318 	add.w	r3, r7, #24
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fc fff2 	bl	80073d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3f4:	e01f      	b.n	800a436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3f6:	4b69      	ldr	r3, [pc, #420]	; (800a59c <UART_SetConfig+0xc2c>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f003 0320 	and.w	r3, r3, #32
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d009      	beq.n	800a416 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a402:	4b66      	ldr	r3, [pc, #408]	; (800a59c <UART_SetConfig+0xc2c>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	08db      	lsrs	r3, r3, #3
 800a408:	f003 0303 	and.w	r3, r3, #3
 800a40c:	4a64      	ldr	r2, [pc, #400]	; (800a5a0 <UART_SetConfig+0xc30>)
 800a40e:	fa22 f303 	lsr.w	r3, r2, r3
 800a412:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a414:	e00f      	b.n	800a436 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a416:	4b62      	ldr	r3, [pc, #392]	; (800a5a0 <UART_SetConfig+0xc30>)
 800a418:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a41a:	e00c      	b.n	800a436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a41c:	4b61      	ldr	r3, [pc, #388]	; (800a5a4 <UART_SetConfig+0xc34>)
 800a41e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a420:	e009      	b.n	800a436 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a428:	e005      	b.n	800a436 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a42a:	2300      	movs	r3, #0
 800a42c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a438:	2b00      	cmp	r3, #0
 800a43a:	f000 80ea 	beq.w	800a612 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a442:	4a55      	ldr	r2, [pc, #340]	; (800a598 <UART_SetConfig+0xc28>)
 800a444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a448:	461a      	mov	r2, r3
 800a44a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a44c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a450:	005a      	lsls	r2, r3, #1
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	085b      	lsrs	r3, r3, #1
 800a458:	441a      	add	r2, r3
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a462:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a466:	2b0f      	cmp	r3, #15
 800a468:	d916      	bls.n	800a498 <UART_SetConfig+0xb28>
 800a46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a470:	d212      	bcs.n	800a498 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a474:	b29b      	uxth	r3, r3
 800a476:	f023 030f 	bic.w	r3, r3, #15
 800a47a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47e:	085b      	lsrs	r3, r3, #1
 800a480:	b29b      	uxth	r3, r3
 800a482:	f003 0307 	and.w	r3, r3, #7
 800a486:	b29a      	uxth	r2, r3
 800a488:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a48a:	4313      	orrs	r3, r2
 800a48c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a494:	60da      	str	r2, [r3, #12]
 800a496:	e0bc      	b.n	800a612 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a49e:	e0b8      	b.n	800a612 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a4a0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a4a4:	2b20      	cmp	r3, #32
 800a4a6:	dc4b      	bgt.n	800a540 <UART_SetConfig+0xbd0>
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f2c0 8087 	blt.w	800a5bc <UART_SetConfig+0xc4c>
 800a4ae:	2b20      	cmp	r3, #32
 800a4b0:	f200 8084 	bhi.w	800a5bc <UART_SetConfig+0xc4c>
 800a4b4:	a201      	add	r2, pc, #4	; (adr r2, 800a4bc <UART_SetConfig+0xb4c>)
 800a4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ba:	bf00      	nop
 800a4bc:	0800a547 	.word	0x0800a547
 800a4c0:	0800a54f 	.word	0x0800a54f
 800a4c4:	0800a5bd 	.word	0x0800a5bd
 800a4c8:	0800a5bd 	.word	0x0800a5bd
 800a4cc:	0800a557 	.word	0x0800a557
 800a4d0:	0800a5bd 	.word	0x0800a5bd
 800a4d4:	0800a5bd 	.word	0x0800a5bd
 800a4d8:	0800a5bd 	.word	0x0800a5bd
 800a4dc:	0800a567 	.word	0x0800a567
 800a4e0:	0800a5bd 	.word	0x0800a5bd
 800a4e4:	0800a5bd 	.word	0x0800a5bd
 800a4e8:	0800a5bd 	.word	0x0800a5bd
 800a4ec:	0800a5bd 	.word	0x0800a5bd
 800a4f0:	0800a5bd 	.word	0x0800a5bd
 800a4f4:	0800a5bd 	.word	0x0800a5bd
 800a4f8:	0800a5bd 	.word	0x0800a5bd
 800a4fc:	0800a577 	.word	0x0800a577
 800a500:	0800a5bd 	.word	0x0800a5bd
 800a504:	0800a5bd 	.word	0x0800a5bd
 800a508:	0800a5bd 	.word	0x0800a5bd
 800a50c:	0800a5bd 	.word	0x0800a5bd
 800a510:	0800a5bd 	.word	0x0800a5bd
 800a514:	0800a5bd 	.word	0x0800a5bd
 800a518:	0800a5bd 	.word	0x0800a5bd
 800a51c:	0800a5bd 	.word	0x0800a5bd
 800a520:	0800a5bd 	.word	0x0800a5bd
 800a524:	0800a5bd 	.word	0x0800a5bd
 800a528:	0800a5bd 	.word	0x0800a5bd
 800a52c:	0800a5bd 	.word	0x0800a5bd
 800a530:	0800a5bd 	.word	0x0800a5bd
 800a534:	0800a5bd 	.word	0x0800a5bd
 800a538:	0800a5bd 	.word	0x0800a5bd
 800a53c:	0800a5af 	.word	0x0800a5af
 800a540:	2b40      	cmp	r3, #64	; 0x40
 800a542:	d037      	beq.n	800a5b4 <UART_SetConfig+0xc44>
 800a544:	e03a      	b.n	800a5bc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a546:	f7fb fbf1 	bl	8005d2c <HAL_RCC_GetPCLK1Freq>
 800a54a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a54c:	e03c      	b.n	800a5c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a54e:	f7fb fc03 	bl	8005d58 <HAL_RCC_GetPCLK2Freq>
 800a552:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a554:	e038      	b.n	800a5c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7fc fde6 	bl	800712c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a564:	e030      	b.n	800a5c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a566:	f107 0318 	add.w	r3, r7, #24
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fc ff32 	bl	80073d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a574:	e028      	b.n	800a5c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a576:	4b09      	ldr	r3, [pc, #36]	; (800a59c <UART_SetConfig+0xc2c>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 0320 	and.w	r3, r3, #32
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d012      	beq.n	800a5a8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a582:	4b06      	ldr	r3, [pc, #24]	; (800a59c <UART_SetConfig+0xc2c>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	08db      	lsrs	r3, r3, #3
 800a588:	f003 0303 	and.w	r3, r3, #3
 800a58c:	4a04      	ldr	r2, [pc, #16]	; (800a5a0 <UART_SetConfig+0xc30>)
 800a58e:	fa22 f303 	lsr.w	r3, r2, r3
 800a592:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a594:	e018      	b.n	800a5c8 <UART_SetConfig+0xc58>
 800a596:	bf00      	nop
 800a598:	0800d504 	.word	0x0800d504
 800a59c:	58024400 	.word	0x58024400
 800a5a0:	03d09000 	.word	0x03d09000
 800a5a4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a5a8:	4b24      	ldr	r3, [pc, #144]	; (800a63c <UART_SetConfig+0xccc>)
 800a5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5ac:	e00c      	b.n	800a5c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a5ae:	4b24      	ldr	r3, [pc, #144]	; (800a640 <UART_SetConfig+0xcd0>)
 800a5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5b2:	e009      	b.n	800a5c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5ba:	e005      	b.n	800a5c8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a5c6:	bf00      	nop
    }

    if (pclk != 0U)
 800a5c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d021      	beq.n	800a612 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d2:	4a1c      	ldr	r2, [pc, #112]	; (800a644 <UART_SetConfig+0xcd4>)
 800a5d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5d8:	461a      	mov	r2, r3
 800a5da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5dc:	fbb3 f2f2 	udiv	r2, r3, r2
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	085b      	lsrs	r3, r3, #1
 800a5e6:	441a      	add	r2, r3
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5f0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f4:	2b0f      	cmp	r3, #15
 800a5f6:	d909      	bls.n	800a60c <UART_SetConfig+0xc9c>
 800a5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5fe:	d205      	bcs.n	800a60c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a602:	b29a      	uxth	r2, r3
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	60da      	str	r2, [r3, #12]
 800a60a:	e002      	b.n	800a612 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	2201      	movs	r2, #1
 800a616:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	2201      	movs	r2, #1
 800a61e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	2200      	movs	r2, #0
 800a626:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	2200      	movs	r2, #0
 800a62c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a62e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a632:	4618      	mov	r0, r3
 800a634:	3748      	adds	r7, #72	; 0x48
 800a636:	46bd      	mov	sp, r7
 800a638:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a63c:	03d09000 	.word	0x03d09000
 800a640:	003d0900 	.word	0x003d0900
 800a644:	0800d504 	.word	0x0800d504

0800a648 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a654:	f003 0301 	and.w	r3, r3, #1
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d00a      	beq.n	800a672 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	430a      	orrs	r2, r1
 800a670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a676:	f003 0302 	and.w	r3, r3, #2
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00a      	beq.n	800a694 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	430a      	orrs	r2, r1
 800a692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a698:	f003 0304 	and.w	r3, r3, #4
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d00a      	beq.n	800a6b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	430a      	orrs	r2, r1
 800a6b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ba:	f003 0308 	and.w	r3, r3, #8
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00a      	beq.n	800a6d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	430a      	orrs	r2, r1
 800a6d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6dc:	f003 0310 	and.w	r3, r3, #16
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00a      	beq.n	800a6fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	430a      	orrs	r2, r1
 800a6f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6fe:	f003 0320 	and.w	r3, r3, #32
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00a      	beq.n	800a71c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	430a      	orrs	r2, r1
 800a71a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a724:	2b00      	cmp	r3, #0
 800a726:	d01a      	beq.n	800a75e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	430a      	orrs	r2, r1
 800a73c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a746:	d10a      	bne.n	800a75e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	430a      	orrs	r2, r1
 800a75c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00a      	beq.n	800a780 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	430a      	orrs	r2, r1
 800a77e:	605a      	str	r2, [r3, #4]
  }
}
 800a780:	bf00      	nop
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b098      	sub	sp, #96	; 0x60
 800a790:	af02      	add	r7, sp, #8
 800a792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a79c:	f7f7 fd3e 	bl	800221c <HAL_GetTick>
 800a7a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 0308 	and.w	r3, r3, #8
 800a7ac:	2b08      	cmp	r3, #8
 800a7ae:	d12f      	bne.n	800a810 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 f88e 	bl	800a8e0 <UART_WaitOnFlagUntilTimeout>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d022      	beq.n	800a810 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d2:	e853 3f00 	ldrex	r3, [r3]
 800a7d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a7d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7de:	653b      	str	r3, [r7, #80]	; 0x50
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7e8:	647b      	str	r3, [r7, #68]	; 0x44
 800a7ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a7ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7f0:	e841 2300 	strex	r3, r2, [r1]
 800a7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a7f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1e6      	bne.n	800a7ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2220      	movs	r2, #32
 800a800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a80c:	2303      	movs	r3, #3
 800a80e:	e063      	b.n	800a8d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 0304 	and.w	r3, r3, #4
 800a81a:	2b04      	cmp	r3, #4
 800a81c:	d149      	bne.n	800a8b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a81e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a822:	9300      	str	r3, [sp, #0]
 800a824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a826:	2200      	movs	r2, #0
 800a828:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f857 	bl	800a8e0 <UART_WaitOnFlagUntilTimeout>
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d03c      	beq.n	800a8b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a840:	e853 3f00 	ldrex	r3, [r3]
 800a844:	623b      	str	r3, [r7, #32]
   return(result);
 800a846:	6a3b      	ldr	r3, [r7, #32]
 800a848:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a84c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	461a      	mov	r2, r3
 800a854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a856:	633b      	str	r3, [r7, #48]	; 0x30
 800a858:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a85c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a85e:	e841 2300 	strex	r3, r2, [r1]
 800a862:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1e6      	bne.n	800a838 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	3308      	adds	r3, #8
 800a870:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	e853 3f00 	ldrex	r3, [r3]
 800a878:	60fb      	str	r3, [r7, #12]
   return(result);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f023 0301 	bic.w	r3, r3, #1
 800a880:	64bb      	str	r3, [r7, #72]	; 0x48
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	3308      	adds	r3, #8
 800a888:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a88a:	61fa      	str	r2, [r7, #28]
 800a88c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88e:	69b9      	ldr	r1, [r7, #24]
 800a890:	69fa      	ldr	r2, [r7, #28]
 800a892:	e841 2300 	strex	r3, r2, [r1]
 800a896:	617b      	str	r3, [r7, #20]
   return(result);
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1e5      	bne.n	800a86a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2220      	movs	r2, #32
 800a8a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	e012      	b.n	800a8d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2220      	movs	r2, #32
 800a8b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2220      	movs	r2, #32
 800a8be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3758      	adds	r7, #88	; 0x58
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	603b      	str	r3, [r7, #0]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8f0:	e049      	b.n	800a986 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8f8:	d045      	beq.n	800a986 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8fa:	f7f7 fc8f 	bl	800221c <HAL_GetTick>
 800a8fe:	4602      	mov	r2, r0
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	1ad3      	subs	r3, r2, r3
 800a904:	69ba      	ldr	r2, [r7, #24]
 800a906:	429a      	cmp	r2, r3
 800a908:	d302      	bcc.n	800a910 <UART_WaitOnFlagUntilTimeout+0x30>
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d101      	bne.n	800a914 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a910:	2303      	movs	r3, #3
 800a912:	e048      	b.n	800a9a6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 0304 	and.w	r3, r3, #4
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d031      	beq.n	800a986 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	69db      	ldr	r3, [r3, #28]
 800a928:	f003 0308 	and.w	r3, r3, #8
 800a92c:	2b08      	cmp	r3, #8
 800a92e:	d110      	bne.n	800a952 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2208      	movs	r2, #8
 800a936:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a938:	68f8      	ldr	r0, [r7, #12]
 800a93a:	f000 f95b 	bl	800abf4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2208      	movs	r2, #8
 800a942:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	e029      	b.n	800a9a6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	69db      	ldr	r3, [r3, #28]
 800a958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a95c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a960:	d111      	bne.n	800a986 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a96a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f000 f941 	bl	800abf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2220      	movs	r2, #32
 800a976:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a982:	2303      	movs	r3, #3
 800a984:	e00f      	b.n	800a9a6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	69da      	ldr	r2, [r3, #28]
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	4013      	ands	r3, r2
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	429a      	cmp	r2, r3
 800a994:	bf0c      	ite	eq
 800a996:	2301      	moveq	r3, #1
 800a998:	2300      	movne	r3, #0
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	461a      	mov	r2, r3
 800a99e:	79fb      	ldrb	r3, [r7, #7]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d0a6      	beq.n	800a8f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
	...

0800a9b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b0a3      	sub	sp, #140	; 0x8c
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	68ba      	ldr	r2, [r7, #8]
 800a9c2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	88fa      	ldrh	r2, [r7, #6]
 800a9c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	88fa      	ldrh	r2, [r7, #6]
 800a9d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9e2:	d10e      	bne.n	800aa02 <UART_Start_Receive_IT+0x52>
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	691b      	ldr	r3, [r3, #16]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d105      	bne.n	800a9f8 <UART_Start_Receive_IT+0x48>
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a9f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a9f6:	e02d      	b.n	800aa54 <UART_Start_Receive_IT+0xa4>
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	22ff      	movs	r2, #255	; 0xff
 800a9fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800aa00:	e028      	b.n	800aa54 <UART_Start_Receive_IT+0xa4>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d10d      	bne.n	800aa26 <UART_Start_Receive_IT+0x76>
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d104      	bne.n	800aa1c <UART_Start_Receive_IT+0x6c>
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	22ff      	movs	r2, #255	; 0xff
 800aa16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800aa1a:	e01b      	b.n	800aa54 <UART_Start_Receive_IT+0xa4>
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	227f      	movs	r2, #127	; 0x7f
 800aa20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800aa24:	e016      	b.n	800aa54 <UART_Start_Receive_IT+0xa4>
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa2e:	d10d      	bne.n	800aa4c <UART_Start_Receive_IT+0x9c>
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d104      	bne.n	800aa42 <UART_Start_Receive_IT+0x92>
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	227f      	movs	r2, #127	; 0x7f
 800aa3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800aa40:	e008      	b.n	800aa54 <UART_Start_Receive_IT+0xa4>
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	223f      	movs	r2, #63	; 0x3f
 800aa46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800aa4a:	e003      	b.n	800aa54 <UART_Start_Receive_IT+0xa4>
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2222      	movs	r2, #34	; 0x22
 800aa60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	3308      	adds	r3, #8
 800aa6a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa6e:	e853 3f00 	ldrex	r3, [r3]
 800aa72:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800aa74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa76:	f043 0301 	orr.w	r3, r3, #1
 800aa7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	3308      	adds	r3, #8
 800aa84:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800aa88:	673a      	str	r2, [r7, #112]	; 0x70
 800aa8a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800aa8e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800aa90:	e841 2300 	strex	r3, r2, [r1]
 800aa94:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800aa96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1e3      	bne.n	800aa64 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aaa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aaa4:	d14f      	bne.n	800ab46 <UART_Start_Receive_IT+0x196>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aaac:	88fa      	ldrh	r2, [r7, #6]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d349      	bcc.n	800ab46 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaba:	d107      	bne.n	800aacc <UART_Start_Receive_IT+0x11c>
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d103      	bne.n	800aacc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	4a47      	ldr	r2, [pc, #284]	; (800abe4 <UART_Start_Receive_IT+0x234>)
 800aac8:	675a      	str	r2, [r3, #116]	; 0x74
 800aaca:	e002      	b.n	800aad2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	4a46      	ldr	r2, [pc, #280]	; (800abe8 <UART_Start_Receive_IT+0x238>)
 800aad0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d01a      	beq.n	800ab10 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aae2:	e853 3f00 	ldrex	r3, [r3]
 800aae6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aaee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aafc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aafe:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab00:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab04:	e841 2300 	strex	r3, r2, [r1]
 800ab08:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ab0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d1e4      	bne.n	800aada <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	3308      	adds	r3, #8
 800ab16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab1a:	e853 3f00 	ldrex	r3, [r3]
 800ab1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab26:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	3308      	adds	r3, #8
 800ab2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ab30:	64ba      	str	r2, [r7, #72]	; 0x48
 800ab32:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab38:	e841 2300 	strex	r3, r2, [r1]
 800ab3c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ab3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1e5      	bne.n	800ab10 <UART_Start_Receive_IT+0x160>
 800ab44:	e046      	b.n	800abd4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab4e:	d107      	bne.n	800ab60 <UART_Start_Receive_IT+0x1b0>
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d103      	bne.n	800ab60 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	4a24      	ldr	r2, [pc, #144]	; (800abec <UART_Start_Receive_IT+0x23c>)
 800ab5c:	675a      	str	r2, [r3, #116]	; 0x74
 800ab5e:	e002      	b.n	800ab66 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	4a23      	ldr	r2, [pc, #140]	; (800abf0 <UART_Start_Receive_IT+0x240>)
 800ab64:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d019      	beq.n	800aba2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab76:	e853 3f00 	ldrex	r3, [r3]
 800ab7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ab82:	677b      	str	r3, [r7, #116]	; 0x74
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	461a      	mov	r2, r3
 800ab8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab8c:	637b      	str	r3, [r7, #52]	; 0x34
 800ab8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab94:	e841 2300 	strex	r3, r2, [r1]
 800ab98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1e6      	bne.n	800ab6e <UART_Start_Receive_IT+0x1be>
 800aba0:	e018      	b.n	800abd4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	e853 3f00 	ldrex	r3, [r3]
 800abae:	613b      	str	r3, [r7, #16]
   return(result);
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	f043 0320 	orr.w	r3, r3, #32
 800abb6:	67bb      	str	r3, [r7, #120]	; 0x78
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	461a      	mov	r2, r3
 800abbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abc0:	623b      	str	r3, [r7, #32]
 800abc2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc4:	69f9      	ldr	r1, [r7, #28]
 800abc6:	6a3a      	ldr	r2, [r7, #32]
 800abc8:	e841 2300 	strex	r3, r2, [r1]
 800abcc:	61bb      	str	r3, [r7, #24]
   return(result);
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1e6      	bne.n	800aba2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800abd4:	2300      	movs	r3, #0
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	378c      	adds	r7, #140	; 0x8c
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	0800b759 	.word	0x0800b759
 800abe8:	0800b3f9 	.word	0x0800b3f9
 800abec:	0800b241 	.word	0x0800b241
 800abf0:	0800b089 	.word	0x0800b089

0800abf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b095      	sub	sp, #84	; 0x54
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac04:	e853 3f00 	ldrex	r3, [r3]
 800ac08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac10:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	461a      	mov	r2, r3
 800ac18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac1a:	643b      	str	r3, [r7, #64]	; 0x40
 800ac1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac22:	e841 2300 	strex	r3, r2, [r1]
 800ac26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d1e6      	bne.n	800abfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	3308      	adds	r3, #8
 800ac34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac36:	6a3b      	ldr	r3, [r7, #32]
 800ac38:	e853 3f00 	ldrex	r3, [r3]
 800ac3c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac3e:	69fa      	ldr	r2, [r7, #28]
 800ac40:	4b1e      	ldr	r3, [pc, #120]	; (800acbc <UART_EndRxTransfer+0xc8>)
 800ac42:	4013      	ands	r3, r2
 800ac44:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	3308      	adds	r3, #8
 800ac4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac56:	e841 2300 	strex	r3, r2, [r1]
 800ac5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d1e5      	bne.n	800ac2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d118      	bne.n	800ac9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	e853 3f00 	ldrex	r3, [r3]
 800ac76:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	f023 0310 	bic.w	r3, r3, #16
 800ac7e:	647b      	str	r3, [r7, #68]	; 0x44
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	461a      	mov	r2, r3
 800ac86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac88:	61bb      	str	r3, [r7, #24]
 800ac8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8c:	6979      	ldr	r1, [r7, #20]
 800ac8e:	69ba      	ldr	r2, [r7, #24]
 800ac90:	e841 2300 	strex	r3, r2, [r1]
 800ac94:	613b      	str	r3, [r7, #16]
   return(result);
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1e6      	bne.n	800ac6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2220      	movs	r2, #32
 800aca0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	675a      	str	r2, [r3, #116]	; 0x74
}
 800acb0:	bf00      	nop
 800acb2:	3754      	adds	r7, #84	; 0x54
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr
 800acbc:	effffffe 	.word	0xeffffffe

0800acc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800accc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2200      	movs	r2, #0
 800acda:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f7fe fe30 	bl	8009944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ace4:	bf00      	nop
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800acec:	b480      	push	{r7}
 800acee:	b08f      	sub	sp, #60	; 0x3c
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acfa:	2b21      	cmp	r3, #33	; 0x21
 800acfc:	d14c      	bne.n	800ad98 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d132      	bne.n	800ad70 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad10:	6a3b      	ldr	r3, [r7, #32]
 800ad12:	e853 3f00 	ldrex	r3, [r3]
 800ad16:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad1e:	637b      	str	r3, [r7, #52]	; 0x34
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	461a      	mov	r2, r3
 800ad26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad2a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad30:	e841 2300 	strex	r3, r2, [r1]
 800ad34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d1e6      	bne.n	800ad0a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	e853 3f00 	ldrex	r3, [r3]
 800ad48:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad50:	633b      	str	r3, [r7, #48]	; 0x30
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	461a      	mov	r2, r3
 800ad58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5a:	61bb      	str	r3, [r7, #24]
 800ad5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5e:	6979      	ldr	r1, [r7, #20]
 800ad60:	69ba      	ldr	r2, [r7, #24]
 800ad62:	e841 2300 	strex	r3, r2, [r1]
 800ad66:	613b      	str	r3, [r7, #16]
   return(result);
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1e6      	bne.n	800ad3c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800ad6e:	e013      	b.n	800ad98 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad74:	781a      	ldrb	r2, [r3, #0]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad80:	1c5a      	adds	r2, r3, #1
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	b29a      	uxth	r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800ad98:	bf00      	nop
 800ad9a:	373c      	adds	r7, #60	; 0x3c
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b091      	sub	sp, #68	; 0x44
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adb2:	2b21      	cmp	r3, #33	; 0x21
 800adb4:	d151      	bne.n	800ae5a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d132      	bne.n	800ae28 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adca:	e853 3f00 	ldrex	r3, [r3]
 800adce:	623b      	str	r3, [r7, #32]
   return(result);
 800add0:	6a3b      	ldr	r3, [r7, #32]
 800add2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800add6:	63bb      	str	r3, [r7, #56]	; 0x38
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	461a      	mov	r2, r3
 800adde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade0:	633b      	str	r3, [r7, #48]	; 0x30
 800ade2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ade6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ade8:	e841 2300 	strex	r3, r2, [r1]
 800adec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800adee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d1e6      	bne.n	800adc2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	e853 3f00 	ldrex	r3, [r3]
 800ae00:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae08:	637b      	str	r3, [r7, #52]	; 0x34
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae12:	61fb      	str	r3, [r7, #28]
 800ae14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae16:	69b9      	ldr	r1, [r7, #24]
 800ae18:	69fa      	ldr	r2, [r7, #28]
 800ae1a:	e841 2300 	strex	r3, r2, [r1]
 800ae1e:	617b      	str	r3, [r7, #20]
   return(result);
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1e6      	bne.n	800adf4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800ae26:	e018      	b.n	800ae5a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae2c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ae2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae30:	881b      	ldrh	r3, [r3, #0]
 800ae32:	461a      	mov	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae3c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae42:	1c9a      	adds	r2, r3, #2
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	3b01      	subs	r3, #1
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800ae5a:	bf00      	nop
 800ae5c:	3744      	adds	r7, #68	; 0x44
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ae66:	b480      	push	{r7}
 800ae68:	b091      	sub	sp, #68	; 0x44
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae74:	2b21      	cmp	r3, #33	; 0x21
 800ae76:	d160      	bne.n	800af3a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae7e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ae80:	e057      	b.n	800af32 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d133      	bne.n	800aef6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	3308      	adds	r3, #8
 800ae94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae98:	e853 3f00 	ldrex	r3, [r3]
 800ae9c:	623b      	str	r3, [r7, #32]
   return(result);
 800ae9e:	6a3b      	ldr	r3, [r7, #32]
 800aea0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800aea4:	63bb      	str	r3, [r7, #56]	; 0x38
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	3308      	adds	r3, #8
 800aeac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aeae:	633a      	str	r2, [r7, #48]	; 0x30
 800aeb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aeb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeb6:	e841 2300 	strex	r3, r2, [r1]
 800aeba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1e5      	bne.n	800ae8e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	e853 3f00 	ldrex	r3, [r3]
 800aece:	60fb      	str	r3, [r7, #12]
   return(result);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aed6:	637b      	str	r3, [r7, #52]	; 0x34
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	461a      	mov	r2, r3
 800aede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aee0:	61fb      	str	r3, [r7, #28]
 800aee2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee4:	69b9      	ldr	r1, [r7, #24]
 800aee6:	69fa      	ldr	r2, [r7, #28]
 800aee8:	e841 2300 	strex	r3, r2, [r1]
 800aeec:	617b      	str	r3, [r7, #20]
   return(result);
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d1e6      	bne.n	800aec2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800aef4:	e021      	b.n	800af3a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	69db      	ldr	r3, [r3, #28]
 800aefc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af00:	2b00      	cmp	r3, #0
 800af02:	d013      	beq.n	800af2c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af08:	781a      	ldrb	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af14:	1c5a      	adds	r2, r3, #1
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800af20:	b29b      	uxth	r3, r3
 800af22:	3b01      	subs	r3, #1
 800af24:	b29a      	uxth	r2, r3
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800af2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800af2e:	3b01      	subs	r3, #1
 800af30:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800af32:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800af34:	2b00      	cmp	r3, #0
 800af36:	d1a4      	bne.n	800ae82 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800af38:	e7ff      	b.n	800af3a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800af3a:	bf00      	nop
 800af3c:	3744      	adds	r7, #68	; 0x44
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800af46:	b480      	push	{r7}
 800af48:	b091      	sub	sp, #68	; 0x44
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af54:	2b21      	cmp	r3, #33	; 0x21
 800af56:	d165      	bne.n	800b024 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800af5e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800af60:	e05c      	b.n	800b01c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800af68:	b29b      	uxth	r3, r3
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d133      	bne.n	800afd6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	3308      	adds	r3, #8
 800af74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af76:	6a3b      	ldr	r3, [r7, #32]
 800af78:	e853 3f00 	ldrex	r3, [r3]
 800af7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800af84:	637b      	str	r3, [r7, #52]	; 0x34
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	3308      	adds	r3, #8
 800af8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af96:	e841 2300 	strex	r3, r2, [r1]
 800af9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d1e5      	bne.n	800af6e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	e853 3f00 	ldrex	r3, [r3]
 800afae:	60bb      	str	r3, [r7, #8]
   return(result);
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afb6:	633b      	str	r3, [r7, #48]	; 0x30
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	461a      	mov	r2, r3
 800afbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc0:	61bb      	str	r3, [r7, #24]
 800afc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc4:	6979      	ldr	r1, [r7, #20]
 800afc6:	69ba      	ldr	r2, [r7, #24]
 800afc8:	e841 2300 	strex	r3, r2, [r1]
 800afcc:	613b      	str	r3, [r7, #16]
   return(result);
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d1e6      	bne.n	800afa2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800afd4:	e026      	b.n	800b024 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	69db      	ldr	r3, [r3, #28]
 800afdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d018      	beq.n	800b016 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afe8:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800afea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afec:	881b      	ldrh	r3, [r3, #0]
 800afee:	461a      	mov	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aff8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800affe:	1c9a      	adds	r2, r3, #2
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	3b01      	subs	r3, #1
 800b00e:	b29a      	uxth	r2, r3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b016:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b018:	3b01      	subs	r3, #1
 800b01a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b01c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d19f      	bne.n	800af62 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b022:	e7ff      	b.n	800b024 <UART_TxISR_16BIT_FIFOEN+0xde>
 800b024:	bf00      	nop
 800b026:	3744      	adds	r7, #68	; 0x44
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b088      	sub	sp, #32
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	e853 3f00 	ldrex	r3, [r3]
 800b044:	60bb      	str	r3, [r7, #8]
   return(result);
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b04c:	61fb      	str	r3, [r7, #28]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	461a      	mov	r2, r3
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	61bb      	str	r3, [r7, #24]
 800b058:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b05a:	6979      	ldr	r1, [r7, #20]
 800b05c:	69ba      	ldr	r2, [r7, #24]
 800b05e:	e841 2300 	strex	r3, r2, [r1]
 800b062:	613b      	str	r3, [r7, #16]
   return(result);
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1e6      	bne.n	800b038 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2220      	movs	r2, #32
 800b06e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f7fe fc59 	bl	8009930 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b07e:	bf00      	nop
 800b080:	3720      	adds	r7, #32
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
	...

0800b088 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b09c      	sub	sp, #112	; 0x70
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b096:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0a0:	2b22      	cmp	r3, #34	; 0x22
 800b0a2:	f040 80be 	bne.w	800b222 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b0b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b0b4:	b2d9      	uxtb	r1, r3
 800b0b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b0ba:	b2da      	uxtb	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0c0:	400a      	ands	r2, r1
 800b0c2:	b2d2      	uxtb	r2, r2
 800b0c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0ca:	1c5a      	adds	r2, r3, #1
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	b29a      	uxth	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	f040 80a1 	bne.w	800b232 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0f8:	e853 3f00 	ldrex	r3, [r3]
 800b0fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b0fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b100:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b104:	66bb      	str	r3, [r7, #104]	; 0x68
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	461a      	mov	r2, r3
 800b10c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b10e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b110:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b112:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b114:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b116:	e841 2300 	strex	r3, r2, [r1]
 800b11a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b11c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1e6      	bne.n	800b0f0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	3308      	adds	r3, #8
 800b128:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12c:	e853 3f00 	ldrex	r3, [r3]
 800b130:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b134:	f023 0301 	bic.w	r3, r3, #1
 800b138:	667b      	str	r3, [r7, #100]	; 0x64
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	3308      	adds	r3, #8
 800b140:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b142:	647a      	str	r2, [r7, #68]	; 0x44
 800b144:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b146:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b14a:	e841 2300 	strex	r3, r2, [r1]
 800b14e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b152:	2b00      	cmp	r3, #0
 800b154:	d1e5      	bne.n	800b122 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2220      	movs	r2, #32
 800b15a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4a33      	ldr	r2, [pc, #204]	; (800b23c <UART_RxISR_8BIT+0x1b4>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d01f      	beq.n	800b1b4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d018      	beq.n	800b1b4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18a:	e853 3f00 	ldrex	r3, [r3]
 800b18e:	623b      	str	r3, [r7, #32]
   return(result);
 800b190:	6a3b      	ldr	r3, [r7, #32]
 800b192:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b196:	663b      	str	r3, [r7, #96]	; 0x60
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	461a      	mov	r2, r3
 800b19e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1a0:	633b      	str	r3, [r7, #48]	; 0x30
 800b1a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1a8:	e841 2300 	strex	r3, r2, [r1]
 800b1ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d1e6      	bne.n	800b182 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d12e      	bne.n	800b21a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	e853 3f00 	ldrex	r3, [r3]
 800b1ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f023 0310 	bic.w	r3, r3, #16
 800b1d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	461a      	mov	r2, r3
 800b1de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1e0:	61fb      	str	r3, [r7, #28]
 800b1e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e4:	69b9      	ldr	r1, [r7, #24]
 800b1e6:	69fa      	ldr	r2, [r7, #28]
 800b1e8:	e841 2300 	strex	r3, r2, [r1]
 800b1ec:	617b      	str	r3, [r7, #20]
   return(result);
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1e6      	bne.n	800b1c2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	69db      	ldr	r3, [r3, #28]
 800b1fa:	f003 0310 	and.w	r3, r3, #16
 800b1fe:	2b10      	cmp	r3, #16
 800b200:	d103      	bne.n	800b20a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2210      	movs	r2, #16
 800b208:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b210:	4619      	mov	r1, r3
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7fe fba0 	bl	8009958 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b218:	e00b      	b.n	800b232 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f7f6 ff30 	bl	8002080 <HAL_UART_RxCpltCallback>
}
 800b220:	e007      	b.n	800b232 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	699a      	ldr	r2, [r3, #24]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f042 0208 	orr.w	r2, r2, #8
 800b230:	619a      	str	r2, [r3, #24]
}
 800b232:	bf00      	nop
 800b234:	3770      	adds	r7, #112	; 0x70
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	58000c00 	.word	0x58000c00

0800b240 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b09c      	sub	sp, #112	; 0x70
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b24e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b258:	2b22      	cmp	r3, #34	; 0x22
 800b25a:	f040 80be 	bne.w	800b3da <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b264:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b26c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b26e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800b272:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b276:	4013      	ands	r3, r2
 800b278:	b29a      	uxth	r2, r3
 800b27a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b27c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b282:	1c9a      	adds	r2, r3, #2
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b28e:	b29b      	uxth	r3, r3
 800b290:	3b01      	subs	r3, #1
 800b292:	b29a      	uxth	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f040 80a1 	bne.w	800b3ea <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2b0:	e853 3f00 	ldrex	r3, [r3]
 800b2b4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b2b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b2bc:	667b      	str	r3, [r7, #100]	; 0x64
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2c6:	657b      	str	r3, [r7, #84]	; 0x54
 800b2c8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b2cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b2ce:	e841 2300 	strex	r3, r2, [r1]
 800b2d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b2d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1e6      	bne.n	800b2a8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	3308      	adds	r3, #8
 800b2e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2e4:	e853 3f00 	ldrex	r3, [r3]
 800b2e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ec:	f023 0301 	bic.w	r3, r3, #1
 800b2f0:	663b      	str	r3, [r7, #96]	; 0x60
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	3308      	adds	r3, #8
 800b2f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b2fa:	643a      	str	r2, [r7, #64]	; 0x40
 800b2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b300:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b302:	e841 2300 	strex	r3, r2, [r1]
 800b306:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1e5      	bne.n	800b2da <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2220      	movs	r2, #32
 800b312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a33      	ldr	r2, [pc, #204]	; (800b3f4 <UART_RxISR_16BIT+0x1b4>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d01f      	beq.n	800b36c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b336:	2b00      	cmp	r3, #0
 800b338:	d018      	beq.n	800b36c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b340:	6a3b      	ldr	r3, [r7, #32]
 800b342:	e853 3f00 	ldrex	r3, [r3]
 800b346:	61fb      	str	r3, [r7, #28]
   return(result);
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b34e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	461a      	mov	r2, r3
 800b356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b35a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b35e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b360:	e841 2300 	strex	r3, r2, [r1]
 800b364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d1e6      	bne.n	800b33a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b370:	2b01      	cmp	r3, #1
 800b372:	d12e      	bne.n	800b3d2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	e853 3f00 	ldrex	r3, [r3]
 800b386:	60bb      	str	r3, [r7, #8]
   return(result);
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	f023 0310 	bic.w	r3, r3, #16
 800b38e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	461a      	mov	r2, r3
 800b396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b398:	61bb      	str	r3, [r7, #24]
 800b39a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39c:	6979      	ldr	r1, [r7, #20]
 800b39e:	69ba      	ldr	r2, [r7, #24]
 800b3a0:	e841 2300 	strex	r3, r2, [r1]
 800b3a4:	613b      	str	r3, [r7, #16]
   return(result);
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d1e6      	bne.n	800b37a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	69db      	ldr	r3, [r3, #28]
 800b3b2:	f003 0310 	and.w	r3, r3, #16
 800b3b6:	2b10      	cmp	r3, #16
 800b3b8:	d103      	bne.n	800b3c2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2210      	movs	r2, #16
 800b3c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f7fe fac4 	bl	8009958 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b3d0:	e00b      	b.n	800b3ea <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f7f6 fe54 	bl	8002080 <HAL_UART_RxCpltCallback>
}
 800b3d8:	e007      	b.n	800b3ea <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	699a      	ldr	r2, [r3, #24]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f042 0208 	orr.w	r2, r2, #8
 800b3e8:	619a      	str	r2, [r3, #24]
}
 800b3ea:	bf00      	nop
 800b3ec:	3770      	adds	r7, #112	; 0x70
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	58000c00 	.word	0x58000c00

0800b3f8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b0ac      	sub	sp, #176	; 0xb0
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b406:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	69db      	ldr	r3, [r3, #28]
 800b410:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b42e:	2b22      	cmp	r3, #34	; 0x22
 800b430:	f040 8180 	bne.w	800b734 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b43a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b43e:	e123      	b.n	800b688 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b446:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b44a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b44e:	b2d9      	uxtb	r1, r3
 800b450:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b454:	b2da      	uxtb	r2, r3
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b45a:	400a      	ands	r2, r1
 800b45c:	b2d2      	uxtb	r2, r2
 800b45e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b464:	1c5a      	adds	r2, r3, #1
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b470:	b29b      	uxth	r3, r3
 800b472:	3b01      	subs	r3, #1
 800b474:	b29a      	uxth	r2, r3
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	69db      	ldr	r3, [r3, #28]
 800b482:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b48a:	f003 0307 	and.w	r3, r3, #7
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d053      	beq.n	800b53a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b496:	f003 0301 	and.w	r3, r3, #1
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d011      	beq.n	800b4c2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800b49e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b4a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00b      	beq.n	800b4c2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4b8:	f043 0201 	orr.w	r2, r3, #1
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b4c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4c6:	f003 0302 	and.w	r3, r3, #2
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d011      	beq.n	800b4f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b4ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b4d2:	f003 0301 	and.w	r3, r3, #1
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00b      	beq.n	800b4f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2202      	movs	r2, #2
 800b4e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4e8:	f043 0204 	orr.w	r2, r3, #4
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b4f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4f6:	f003 0304 	and.w	r3, r3, #4
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d011      	beq.n	800b522 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b4fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b502:	f003 0301 	and.w	r3, r3, #1
 800b506:	2b00      	cmp	r3, #0
 800b508:	d00b      	beq.n	800b522 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	2204      	movs	r2, #4
 800b510:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b518:	f043 0202 	orr.w	r2, r3, #2
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d006      	beq.n	800b53a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f7fe fa09 	bl	8009944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b540:	b29b      	uxth	r3, r3
 800b542:	2b00      	cmp	r3, #0
 800b544:	f040 80a0 	bne.w	800b688 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b550:	e853 3f00 	ldrex	r3, [r3]
 800b554:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800b556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b55c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	461a      	mov	r2, r3
 800b566:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b56a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b56c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b570:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b572:	e841 2300 	strex	r3, r2, [r1]
 800b576:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800b578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1e4      	bne.n	800b548 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	3308      	adds	r3, #8
 800b584:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b588:	e853 3f00 	ldrex	r3, [r3]
 800b58c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b58e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b590:	4b6e      	ldr	r3, [pc, #440]	; (800b74c <UART_RxISR_8BIT_FIFOEN+0x354>)
 800b592:	4013      	ands	r3, r2
 800b594:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	3308      	adds	r3, #8
 800b59e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b5a2:	66ba      	str	r2, [r7, #104]	; 0x68
 800b5a4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b5a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b5aa:	e841 2300 	strex	r3, r2, [r1]
 800b5ae:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b5b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d1e3      	bne.n	800b57e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2220      	movs	r2, #32
 800b5ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a60      	ldr	r2, [pc, #384]	; (800b750 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d021      	beq.n	800b618 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d01a      	beq.n	800b618 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5ea:	e853 3f00 	ldrex	r3, [r3]
 800b5ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b5f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b5f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	461a      	mov	r2, r3
 800b600:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b604:	657b      	str	r3, [r7, #84]	; 0x54
 800b606:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b608:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b60a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b60c:	e841 2300 	strex	r3, r2, [r1]
 800b610:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b614:	2b00      	cmp	r3, #0
 800b616:	d1e4      	bne.n	800b5e2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d130      	bne.n	800b682 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b62e:	e853 3f00 	ldrex	r3, [r3]
 800b632:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b636:	f023 0310 	bic.w	r3, r3, #16
 800b63a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	461a      	mov	r2, r3
 800b644:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b648:	643b      	str	r3, [r7, #64]	; 0x40
 800b64a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b64c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b64e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b650:	e841 2300 	strex	r3, r2, [r1]
 800b654:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d1e4      	bne.n	800b626 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	69db      	ldr	r3, [r3, #28]
 800b662:	f003 0310 	and.w	r3, r3, #16
 800b666:	2b10      	cmp	r3, #16
 800b668:	d103      	bne.n	800b672 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2210      	movs	r2, #16
 800b670:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7fe f96c 	bl	8009958 <HAL_UARTEx_RxEventCallback>
 800b680:	e002      	b.n	800b688 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f7f6 fcfc 	bl	8002080 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b688:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d006      	beq.n	800b69e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800b690:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b694:	f003 0320 	and.w	r3, r3, #32
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f47f aed1 	bne.w	800b440 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b6a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b6a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d049      	beq.n	800b744 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b6b6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d242      	bcs.n	800b744 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	3308      	adds	r3, #8
 800b6c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c6:	6a3b      	ldr	r3, [r7, #32]
 800b6c8:	e853 3f00 	ldrex	r3, [r3]
 800b6cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	3308      	adds	r3, #8
 800b6de:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b6e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6ea:	e841 2300 	strex	r3, r2, [r1]
 800b6ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d1e3      	bne.n	800b6be <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4a16      	ldr	r2, [pc, #88]	; (800b754 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b6fa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	e853 3f00 	ldrex	r3, [r3]
 800b708:	60bb      	str	r3, [r7, #8]
   return(result);
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	f043 0320 	orr.w	r3, r3, #32
 800b710:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	461a      	mov	r2, r3
 800b71a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b71e:	61bb      	str	r3, [r7, #24]
 800b720:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b722:	6979      	ldr	r1, [r7, #20]
 800b724:	69ba      	ldr	r2, [r7, #24]
 800b726:	e841 2300 	strex	r3, r2, [r1]
 800b72a:	613b      	str	r3, [r7, #16]
   return(result);
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d1e4      	bne.n	800b6fc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b732:	e007      	b.n	800b744 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	699a      	ldr	r2, [r3, #24]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f042 0208 	orr.w	r2, r2, #8
 800b742:	619a      	str	r2, [r3, #24]
}
 800b744:	bf00      	nop
 800b746:	37b0      	adds	r7, #176	; 0xb0
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	effffffe 	.word	0xeffffffe
 800b750:	58000c00 	.word	0x58000c00
 800b754:	0800b089 	.word	0x0800b089

0800b758 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b0ae      	sub	sp, #184	; 0xb8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b766:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	69db      	ldr	r3, [r3, #28]
 800b770:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b78e:	2b22      	cmp	r3, #34	; 0x22
 800b790:	f040 8184 	bne.w	800ba9c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b79a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b79e:	e127      	b.n	800b9f0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b7b2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800b7b6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800b7ba:	4013      	ands	r3, r2
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b7c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7c8:	1c9a      	adds	r2, r3, #2
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	69db      	ldr	r3, [r3, #28]
 800b7e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b7ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b7ee:	f003 0307 	and.w	r3, r3, #7
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d053      	beq.n	800b89e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b7f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b7fa:	f003 0301 	and.w	r3, r3, #1
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d011      	beq.n	800b826 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00b      	beq.n	800b826 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	2201      	movs	r2, #1
 800b814:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b81c:	f043 0201 	orr.w	r2, r3, #1
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b826:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b82a:	f003 0302 	and.w	r3, r3, #2
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d011      	beq.n	800b856 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b832:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b836:	f003 0301 	and.w	r3, r3, #1
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00b      	beq.n	800b856 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2202      	movs	r2, #2
 800b844:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b84c:	f043 0204 	orr.w	r2, r3, #4
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b856:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b85a:	f003 0304 	and.w	r3, r3, #4
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d011      	beq.n	800b886 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b862:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b866:	f003 0301 	and.w	r3, r3, #1
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00b      	beq.n	800b886 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2204      	movs	r2, #4
 800b874:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b87c:	f043 0202 	orr.w	r2, r3, #2
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d006      	beq.n	800b89e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f7fe f857 	bl	8009944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	f040 80a2 	bne.w	800b9f0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b8b4:	e853 3f00 	ldrex	r3, [r3]
 800b8b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b8ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b8ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b8d2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b8d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b8da:	e841 2300 	strex	r3, r2, [r1]
 800b8de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b8e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d1e2      	bne.n	800b8ac <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	3308      	adds	r3, #8
 800b8ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8f0:	e853 3f00 	ldrex	r3, [r3]
 800b8f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b8f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b8f8:	4b6e      	ldr	r3, [pc, #440]	; (800bab4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800b8fa:	4013      	ands	r3, r2
 800b8fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	3308      	adds	r3, #8
 800b906:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b90a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b90c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b910:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b912:	e841 2300 	strex	r3, r2, [r1]
 800b916:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1e3      	bne.n	800b8e6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2220      	movs	r2, #32
 800b922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a60      	ldr	r2, [pc, #384]	; (800bab8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d021      	beq.n	800b980 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b946:	2b00      	cmp	r3, #0
 800b948:	d01a      	beq.n	800b980 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b952:	e853 3f00 	ldrex	r3, [r3]
 800b956:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b95a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b95e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	461a      	mov	r2, r3
 800b968:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b96c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b96e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b970:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b972:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b974:	e841 2300 	strex	r3, r2, [r1]
 800b978:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b97a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d1e4      	bne.n	800b94a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b984:	2b01      	cmp	r3, #1
 800b986:	d130      	bne.n	800b9ea <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b996:	e853 3f00 	ldrex	r3, [r3]
 800b99a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b99e:	f023 0310 	bic.w	r3, r3, #16
 800b9a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9b0:	647b      	str	r3, [r7, #68]	; 0x44
 800b9b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9b8:	e841 2300 	strex	r3, r2, [r1]
 800b9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b9be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d1e4      	bne.n	800b98e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	69db      	ldr	r3, [r3, #28]
 800b9ca:	f003 0310 	and.w	r3, r3, #16
 800b9ce:	2b10      	cmp	r3, #16
 800b9d0:	d103      	bne.n	800b9da <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2210      	movs	r2, #16
 800b9d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f7fd ffb8 	bl	8009958 <HAL_UARTEx_RxEventCallback>
 800b9e8:	e002      	b.n	800b9f0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f7f6 fb48 	bl	8002080 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b9f0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d006      	beq.n	800ba06 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800b9f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b9fc:	f003 0320 	and.w	r3, r3, #32
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f47f aecd 	bne.w	800b7a0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba0c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ba10:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d049      	beq.n	800baac <UART_RxISR_16BIT_FIFOEN+0x354>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ba1e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d242      	bcs.n	800baac <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	3308      	adds	r3, #8
 800ba2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba30:	e853 3f00 	ldrex	r3, [r3]
 800ba34:	623b      	str	r3, [r7, #32]
   return(result);
 800ba36:	6a3b      	ldr	r3, [r7, #32]
 800ba38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	3308      	adds	r3, #8
 800ba46:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ba4a:	633a      	str	r2, [r7, #48]	; 0x30
 800ba4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba52:	e841 2300 	strex	r3, r2, [r1]
 800ba56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1e3      	bne.n	800ba26 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4a16      	ldr	r2, [pc, #88]	; (800babc <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ba62:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	e853 3f00 	ldrex	r3, [r3]
 800ba70:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f043 0320 	orr.w	r3, r3, #32
 800ba78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	461a      	mov	r2, r3
 800ba82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba86:	61fb      	str	r3, [r7, #28]
 800ba88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba8a:	69b9      	ldr	r1, [r7, #24]
 800ba8c:	69fa      	ldr	r2, [r7, #28]
 800ba8e:	e841 2300 	strex	r3, r2, [r1]
 800ba92:	617b      	str	r3, [r7, #20]
   return(result);
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d1e4      	bne.n	800ba64 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ba9a:	e007      	b.n	800baac <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	699a      	ldr	r2, [r3, #24]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f042 0208 	orr.w	r2, r2, #8
 800baaa:	619a      	str	r2, [r3, #24]
}
 800baac:	bf00      	nop
 800baae:	37b8      	adds	r7, #184	; 0xb8
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	effffffe 	.word	0xeffffffe
 800bab8:	58000c00 	.word	0x58000c00
 800babc:	0800b241 	.word	0x0800b241

0800bac0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bac8:	bf00      	nop
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800badc:	bf00      	nop
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800baf0:	bf00      	nop
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b085      	sub	sp, #20
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d101      	bne.n	800bb12 <HAL_UARTEx_DisableFifoMode+0x16>
 800bb0e:	2302      	movs	r3, #2
 800bb10:	e027      	b.n	800bb62 <HAL_UARTEx_DisableFifoMode+0x66>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2201      	movs	r2, #1
 800bb16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2224      	movs	r2, #36	; 0x24
 800bb1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f022 0201 	bic.w	r2, r2, #1
 800bb38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bb40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2220      	movs	r2, #32
 800bb54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bb60:	2300      	movs	r3, #0
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3714      	adds	r7, #20
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr

0800bb6e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb6e:	b580      	push	{r7, lr}
 800bb70:	b084      	sub	sp, #16
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
 800bb76:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d101      	bne.n	800bb86 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb82:	2302      	movs	r3, #2
 800bb84:	e02d      	b.n	800bbe2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2201      	movs	r2, #1
 800bb8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2224      	movs	r2, #36	; 0x24
 800bb92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f022 0201 	bic.w	r2, r2, #1
 800bbac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	683a      	ldr	r2, [r7, #0]
 800bbbe:	430a      	orrs	r2, r1
 800bbc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f850 	bl	800bc68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2220      	movs	r2, #32
 800bbd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bbe0:	2300      	movs	r3, #0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b084      	sub	sp, #16
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
 800bbf2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d101      	bne.n	800bc02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bbfe:	2302      	movs	r3, #2
 800bc00:	e02d      	b.n	800bc5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2201      	movs	r2, #1
 800bc06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2224      	movs	r2, #36	; 0x24
 800bc0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f022 0201 	bic.w	r2, r2, #1
 800bc28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	683a      	ldr	r2, [r7, #0]
 800bc3a:	430a      	orrs	r2, r1
 800bc3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 f812 	bl	800bc68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2220      	movs	r2, #32
 800bc50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2200      	movs	r2, #0
 800bc58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
	...

0800bc68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d108      	bne.n	800bc8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2201      	movs	r2, #1
 800bc84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc88:	e031      	b.n	800bcee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc8a:	2310      	movs	r3, #16
 800bc8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc8e:	2310      	movs	r3, #16
 800bc90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	689b      	ldr	r3, [r3, #8]
 800bc98:	0e5b      	lsrs	r3, r3, #25
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	f003 0307 	and.w	r3, r3, #7
 800bca0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	0f5b      	lsrs	r3, r3, #29
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	f003 0307 	and.w	r3, r3, #7
 800bcb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcb2:	7bbb      	ldrb	r3, [r7, #14]
 800bcb4:	7b3a      	ldrb	r2, [r7, #12]
 800bcb6:	4911      	ldr	r1, [pc, #68]	; (800bcfc <UARTEx_SetNbDataToProcess+0x94>)
 800bcb8:	5c8a      	ldrb	r2, [r1, r2]
 800bcba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bcbe:	7b3a      	ldrb	r2, [r7, #12]
 800bcc0:	490f      	ldr	r1, [pc, #60]	; (800bd00 <UARTEx_SetNbDataToProcess+0x98>)
 800bcc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcc4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcc8:	b29a      	uxth	r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bcd0:	7bfb      	ldrb	r3, [r7, #15]
 800bcd2:	7b7a      	ldrb	r2, [r7, #13]
 800bcd4:	4909      	ldr	r1, [pc, #36]	; (800bcfc <UARTEx_SetNbDataToProcess+0x94>)
 800bcd6:	5c8a      	ldrb	r2, [r1, r2]
 800bcd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bcdc:	7b7a      	ldrb	r2, [r7, #13]
 800bcde:	4908      	ldr	r1, [pc, #32]	; (800bd00 <UARTEx_SetNbDataToProcess+0x98>)
 800bce0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bce2:	fb93 f3f2 	sdiv	r3, r3, r2
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bcee:	bf00      	nop
 800bcf0:	3714      	adds	r7, #20
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	0800d51c 	.word	0x0800d51c
 800bd00:	0800d524 	.word	0x0800d524

0800bd04 <__errno>:
 800bd04:	4b01      	ldr	r3, [pc, #4]	; (800bd0c <__errno+0x8>)
 800bd06:	6818      	ldr	r0, [r3, #0]
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	24000038 	.word	0x24000038

0800bd10 <__libc_init_array>:
 800bd10:	b570      	push	{r4, r5, r6, lr}
 800bd12:	4d0d      	ldr	r5, [pc, #52]	; (800bd48 <__libc_init_array+0x38>)
 800bd14:	4c0d      	ldr	r4, [pc, #52]	; (800bd4c <__libc_init_array+0x3c>)
 800bd16:	1b64      	subs	r4, r4, r5
 800bd18:	10a4      	asrs	r4, r4, #2
 800bd1a:	2600      	movs	r6, #0
 800bd1c:	42a6      	cmp	r6, r4
 800bd1e:	d109      	bne.n	800bd34 <__libc_init_array+0x24>
 800bd20:	4d0b      	ldr	r5, [pc, #44]	; (800bd50 <__libc_init_array+0x40>)
 800bd22:	4c0c      	ldr	r4, [pc, #48]	; (800bd54 <__libc_init_array+0x44>)
 800bd24:	f001 faaa 	bl	800d27c <_init>
 800bd28:	1b64      	subs	r4, r4, r5
 800bd2a:	10a4      	asrs	r4, r4, #2
 800bd2c:	2600      	movs	r6, #0
 800bd2e:	42a6      	cmp	r6, r4
 800bd30:	d105      	bne.n	800bd3e <__libc_init_array+0x2e>
 800bd32:	bd70      	pop	{r4, r5, r6, pc}
 800bd34:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd38:	4798      	blx	r3
 800bd3a:	3601      	adds	r6, #1
 800bd3c:	e7ee      	b.n	800bd1c <__libc_init_array+0xc>
 800bd3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd42:	4798      	blx	r3
 800bd44:	3601      	adds	r6, #1
 800bd46:	e7f2      	b.n	800bd2e <__libc_init_array+0x1e>
 800bd48:	0800d67c 	.word	0x0800d67c
 800bd4c:	0800d67c 	.word	0x0800d67c
 800bd50:	0800d67c 	.word	0x0800d67c
 800bd54:	0800d680 	.word	0x0800d680

0800bd58 <memcpy>:
 800bd58:	440a      	add	r2, r1
 800bd5a:	4291      	cmp	r1, r2
 800bd5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bd60:	d100      	bne.n	800bd64 <memcpy+0xc>
 800bd62:	4770      	bx	lr
 800bd64:	b510      	push	{r4, lr}
 800bd66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd6e:	4291      	cmp	r1, r2
 800bd70:	d1f9      	bne.n	800bd66 <memcpy+0xe>
 800bd72:	bd10      	pop	{r4, pc}

0800bd74 <memset>:
 800bd74:	4402      	add	r2, r0
 800bd76:	4603      	mov	r3, r0
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d100      	bne.n	800bd7e <memset+0xa>
 800bd7c:	4770      	bx	lr
 800bd7e:	f803 1b01 	strb.w	r1, [r3], #1
 800bd82:	e7f9      	b.n	800bd78 <memset+0x4>

0800bd84 <srand>:
 800bd84:	b538      	push	{r3, r4, r5, lr}
 800bd86:	4b10      	ldr	r3, [pc, #64]	; (800bdc8 <srand+0x44>)
 800bd88:	681d      	ldr	r5, [r3, #0]
 800bd8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	b9b3      	cbnz	r3, 800bdbe <srand+0x3a>
 800bd90:	2018      	movs	r0, #24
 800bd92:	f000 f8f3 	bl	800bf7c <malloc>
 800bd96:	4602      	mov	r2, r0
 800bd98:	63a8      	str	r0, [r5, #56]	; 0x38
 800bd9a:	b920      	cbnz	r0, 800bda6 <srand+0x22>
 800bd9c:	4b0b      	ldr	r3, [pc, #44]	; (800bdcc <srand+0x48>)
 800bd9e:	480c      	ldr	r0, [pc, #48]	; (800bdd0 <srand+0x4c>)
 800bda0:	2142      	movs	r1, #66	; 0x42
 800bda2:	f000 f8a9 	bl	800bef8 <__assert_func>
 800bda6:	490b      	ldr	r1, [pc, #44]	; (800bdd4 <srand+0x50>)
 800bda8:	4b0b      	ldr	r3, [pc, #44]	; (800bdd8 <srand+0x54>)
 800bdaa:	e9c0 1300 	strd	r1, r3, [r0]
 800bdae:	4b0b      	ldr	r3, [pc, #44]	; (800bddc <srand+0x58>)
 800bdb0:	6083      	str	r3, [r0, #8]
 800bdb2:	230b      	movs	r3, #11
 800bdb4:	8183      	strh	r3, [r0, #12]
 800bdb6:	2100      	movs	r1, #0
 800bdb8:	2001      	movs	r0, #1
 800bdba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800bdbe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	611c      	str	r4, [r3, #16]
 800bdc4:	615a      	str	r2, [r3, #20]
 800bdc6:	bd38      	pop	{r3, r4, r5, pc}
 800bdc8:	24000038 	.word	0x24000038
 800bdcc:	0800d530 	.word	0x0800d530
 800bdd0:	0800d547 	.word	0x0800d547
 800bdd4:	abcd330e 	.word	0xabcd330e
 800bdd8:	e66d1234 	.word	0xe66d1234
 800bddc:	0005deec 	.word	0x0005deec

0800bde0 <rand>:
 800bde0:	4b16      	ldr	r3, [pc, #88]	; (800be3c <rand+0x5c>)
 800bde2:	b510      	push	{r4, lr}
 800bde4:	681c      	ldr	r4, [r3, #0]
 800bde6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bde8:	b9b3      	cbnz	r3, 800be18 <rand+0x38>
 800bdea:	2018      	movs	r0, #24
 800bdec:	f000 f8c6 	bl	800bf7c <malloc>
 800bdf0:	63a0      	str	r0, [r4, #56]	; 0x38
 800bdf2:	b928      	cbnz	r0, 800be00 <rand+0x20>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	4b12      	ldr	r3, [pc, #72]	; (800be40 <rand+0x60>)
 800bdf8:	4812      	ldr	r0, [pc, #72]	; (800be44 <rand+0x64>)
 800bdfa:	214e      	movs	r1, #78	; 0x4e
 800bdfc:	f000 f87c 	bl	800bef8 <__assert_func>
 800be00:	4a11      	ldr	r2, [pc, #68]	; (800be48 <rand+0x68>)
 800be02:	4b12      	ldr	r3, [pc, #72]	; (800be4c <rand+0x6c>)
 800be04:	e9c0 2300 	strd	r2, r3, [r0]
 800be08:	4b11      	ldr	r3, [pc, #68]	; (800be50 <rand+0x70>)
 800be0a:	6083      	str	r3, [r0, #8]
 800be0c:	230b      	movs	r3, #11
 800be0e:	8183      	strh	r3, [r0, #12]
 800be10:	2201      	movs	r2, #1
 800be12:	2300      	movs	r3, #0
 800be14:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800be18:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800be1a:	4a0e      	ldr	r2, [pc, #56]	; (800be54 <rand+0x74>)
 800be1c:	6920      	ldr	r0, [r4, #16]
 800be1e:	6963      	ldr	r3, [r4, #20]
 800be20:	490d      	ldr	r1, [pc, #52]	; (800be58 <rand+0x78>)
 800be22:	4342      	muls	r2, r0
 800be24:	fb01 2203 	mla	r2, r1, r3, r2
 800be28:	fba0 0101 	umull	r0, r1, r0, r1
 800be2c:	1c43      	adds	r3, r0, #1
 800be2e:	eb42 0001 	adc.w	r0, r2, r1
 800be32:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800be36:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800be3a:	bd10      	pop	{r4, pc}
 800be3c:	24000038 	.word	0x24000038
 800be40:	0800d530 	.word	0x0800d530
 800be44:	0800d547 	.word	0x0800d547
 800be48:	abcd330e 	.word	0xabcd330e
 800be4c:	e66d1234 	.word	0xe66d1234
 800be50:	0005deec 	.word	0x0005deec
 800be54:	5851f42d 	.word	0x5851f42d
 800be58:	4c957f2d 	.word	0x4c957f2d

0800be5c <sniprintf>:
 800be5c:	b40c      	push	{r2, r3}
 800be5e:	b530      	push	{r4, r5, lr}
 800be60:	4b17      	ldr	r3, [pc, #92]	; (800bec0 <sniprintf+0x64>)
 800be62:	1e0c      	subs	r4, r1, #0
 800be64:	681d      	ldr	r5, [r3, #0]
 800be66:	b09d      	sub	sp, #116	; 0x74
 800be68:	da08      	bge.n	800be7c <sniprintf+0x20>
 800be6a:	238b      	movs	r3, #139	; 0x8b
 800be6c:	602b      	str	r3, [r5, #0]
 800be6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be72:	b01d      	add	sp, #116	; 0x74
 800be74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be78:	b002      	add	sp, #8
 800be7a:	4770      	bx	lr
 800be7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800be80:	f8ad 3014 	strh.w	r3, [sp, #20]
 800be84:	bf14      	ite	ne
 800be86:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800be8a:	4623      	moveq	r3, r4
 800be8c:	9304      	str	r3, [sp, #16]
 800be8e:	9307      	str	r3, [sp, #28]
 800be90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be94:	9002      	str	r0, [sp, #8]
 800be96:	9006      	str	r0, [sp, #24]
 800be98:	f8ad 3016 	strh.w	r3, [sp, #22]
 800be9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800be9e:	ab21      	add	r3, sp, #132	; 0x84
 800bea0:	a902      	add	r1, sp, #8
 800bea2:	4628      	mov	r0, r5
 800bea4:	9301      	str	r3, [sp, #4]
 800bea6:	f000 f9ad 	bl	800c204 <_svfiprintf_r>
 800beaa:	1c43      	adds	r3, r0, #1
 800beac:	bfbc      	itt	lt
 800beae:	238b      	movlt	r3, #139	; 0x8b
 800beb0:	602b      	strlt	r3, [r5, #0]
 800beb2:	2c00      	cmp	r4, #0
 800beb4:	d0dd      	beq.n	800be72 <sniprintf+0x16>
 800beb6:	9b02      	ldr	r3, [sp, #8]
 800beb8:	2200      	movs	r2, #0
 800beba:	701a      	strb	r2, [r3, #0]
 800bebc:	e7d9      	b.n	800be72 <sniprintf+0x16>
 800bebe:	bf00      	nop
 800bec0:	24000038 	.word	0x24000038

0800bec4 <time>:
 800bec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bec6:	4b0b      	ldr	r3, [pc, #44]	; (800bef4 <time+0x30>)
 800bec8:	2200      	movs	r2, #0
 800beca:	4669      	mov	r1, sp
 800becc:	4604      	mov	r4, r0
 800bece:	6818      	ldr	r0, [r3, #0]
 800bed0:	f000 f842 	bl	800bf58 <_gettimeofday_r>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	bfbe      	ittt	lt
 800bed8:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800bedc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bee0:	e9cd 2300 	strdlt	r2, r3, [sp]
 800bee4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bee8:	b10c      	cbz	r4, 800beee <time+0x2a>
 800beea:	e9c4 0100 	strd	r0, r1, [r4]
 800beee:	b004      	add	sp, #16
 800bef0:	bd10      	pop	{r4, pc}
 800bef2:	bf00      	nop
 800bef4:	24000038 	.word	0x24000038

0800bef8 <__assert_func>:
 800bef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800befa:	4614      	mov	r4, r2
 800befc:	461a      	mov	r2, r3
 800befe:	4b09      	ldr	r3, [pc, #36]	; (800bf24 <__assert_func+0x2c>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4605      	mov	r5, r0
 800bf04:	68d8      	ldr	r0, [r3, #12]
 800bf06:	b14c      	cbz	r4, 800bf1c <__assert_func+0x24>
 800bf08:	4b07      	ldr	r3, [pc, #28]	; (800bf28 <__assert_func+0x30>)
 800bf0a:	9100      	str	r1, [sp, #0]
 800bf0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf10:	4906      	ldr	r1, [pc, #24]	; (800bf2c <__assert_func+0x34>)
 800bf12:	462b      	mov	r3, r5
 800bf14:	f000 f80e 	bl	800bf34 <fiprintf>
 800bf18:	f000 fe32 	bl	800cb80 <abort>
 800bf1c:	4b04      	ldr	r3, [pc, #16]	; (800bf30 <__assert_func+0x38>)
 800bf1e:	461c      	mov	r4, r3
 800bf20:	e7f3      	b.n	800bf0a <__assert_func+0x12>
 800bf22:	bf00      	nop
 800bf24:	24000038 	.word	0x24000038
 800bf28:	0800d5a2 	.word	0x0800d5a2
 800bf2c:	0800d5af 	.word	0x0800d5af
 800bf30:	0800d5dd 	.word	0x0800d5dd

0800bf34 <fiprintf>:
 800bf34:	b40e      	push	{r1, r2, r3}
 800bf36:	b503      	push	{r0, r1, lr}
 800bf38:	4601      	mov	r1, r0
 800bf3a:	ab03      	add	r3, sp, #12
 800bf3c:	4805      	ldr	r0, [pc, #20]	; (800bf54 <fiprintf+0x20>)
 800bf3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf42:	6800      	ldr	r0, [r0, #0]
 800bf44:	9301      	str	r3, [sp, #4]
 800bf46:	f000 fa87 	bl	800c458 <_vfiprintf_r>
 800bf4a:	b002      	add	sp, #8
 800bf4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf50:	b003      	add	sp, #12
 800bf52:	4770      	bx	lr
 800bf54:	24000038 	.word	0x24000038

0800bf58 <_gettimeofday_r>:
 800bf58:	b538      	push	{r3, r4, r5, lr}
 800bf5a:	4d07      	ldr	r5, [pc, #28]	; (800bf78 <_gettimeofday_r+0x20>)
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	4604      	mov	r4, r0
 800bf60:	4608      	mov	r0, r1
 800bf62:	4611      	mov	r1, r2
 800bf64:	602b      	str	r3, [r5, #0]
 800bf66:	f001 f981 	bl	800d26c <_gettimeofday>
 800bf6a:	1c43      	adds	r3, r0, #1
 800bf6c:	d102      	bne.n	800bf74 <_gettimeofday_r+0x1c>
 800bf6e:	682b      	ldr	r3, [r5, #0]
 800bf70:	b103      	cbz	r3, 800bf74 <_gettimeofday_r+0x1c>
 800bf72:	6023      	str	r3, [r4, #0]
 800bf74:	bd38      	pop	{r3, r4, r5, pc}
 800bf76:	bf00      	nop
 800bf78:	240007bc 	.word	0x240007bc

0800bf7c <malloc>:
 800bf7c:	4b02      	ldr	r3, [pc, #8]	; (800bf88 <malloc+0xc>)
 800bf7e:	4601      	mov	r1, r0
 800bf80:	6818      	ldr	r0, [r3, #0]
 800bf82:	f000 b86f 	b.w	800c064 <_malloc_r>
 800bf86:	bf00      	nop
 800bf88:	24000038 	.word	0x24000038

0800bf8c <_free_r>:
 800bf8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf8e:	2900      	cmp	r1, #0
 800bf90:	d044      	beq.n	800c01c <_free_r+0x90>
 800bf92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf96:	9001      	str	r0, [sp, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	f1a1 0404 	sub.w	r4, r1, #4
 800bf9e:	bfb8      	it	lt
 800bfa0:	18e4      	addlt	r4, r4, r3
 800bfa2:	f001 f82f 	bl	800d004 <__malloc_lock>
 800bfa6:	4a1e      	ldr	r2, [pc, #120]	; (800c020 <_free_r+0x94>)
 800bfa8:	9801      	ldr	r0, [sp, #4]
 800bfaa:	6813      	ldr	r3, [r2, #0]
 800bfac:	b933      	cbnz	r3, 800bfbc <_free_r+0x30>
 800bfae:	6063      	str	r3, [r4, #4]
 800bfb0:	6014      	str	r4, [r2, #0]
 800bfb2:	b003      	add	sp, #12
 800bfb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfb8:	f001 b82a 	b.w	800d010 <__malloc_unlock>
 800bfbc:	42a3      	cmp	r3, r4
 800bfbe:	d908      	bls.n	800bfd2 <_free_r+0x46>
 800bfc0:	6825      	ldr	r5, [r4, #0]
 800bfc2:	1961      	adds	r1, r4, r5
 800bfc4:	428b      	cmp	r3, r1
 800bfc6:	bf01      	itttt	eq
 800bfc8:	6819      	ldreq	r1, [r3, #0]
 800bfca:	685b      	ldreq	r3, [r3, #4]
 800bfcc:	1949      	addeq	r1, r1, r5
 800bfce:	6021      	streq	r1, [r4, #0]
 800bfd0:	e7ed      	b.n	800bfae <_free_r+0x22>
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	b10b      	cbz	r3, 800bfdc <_free_r+0x50>
 800bfd8:	42a3      	cmp	r3, r4
 800bfda:	d9fa      	bls.n	800bfd2 <_free_r+0x46>
 800bfdc:	6811      	ldr	r1, [r2, #0]
 800bfde:	1855      	adds	r5, r2, r1
 800bfe0:	42a5      	cmp	r5, r4
 800bfe2:	d10b      	bne.n	800bffc <_free_r+0x70>
 800bfe4:	6824      	ldr	r4, [r4, #0]
 800bfe6:	4421      	add	r1, r4
 800bfe8:	1854      	adds	r4, r2, r1
 800bfea:	42a3      	cmp	r3, r4
 800bfec:	6011      	str	r1, [r2, #0]
 800bfee:	d1e0      	bne.n	800bfb2 <_free_r+0x26>
 800bff0:	681c      	ldr	r4, [r3, #0]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	6053      	str	r3, [r2, #4]
 800bff6:	4421      	add	r1, r4
 800bff8:	6011      	str	r1, [r2, #0]
 800bffa:	e7da      	b.n	800bfb2 <_free_r+0x26>
 800bffc:	d902      	bls.n	800c004 <_free_r+0x78>
 800bffe:	230c      	movs	r3, #12
 800c000:	6003      	str	r3, [r0, #0]
 800c002:	e7d6      	b.n	800bfb2 <_free_r+0x26>
 800c004:	6825      	ldr	r5, [r4, #0]
 800c006:	1961      	adds	r1, r4, r5
 800c008:	428b      	cmp	r3, r1
 800c00a:	bf04      	itt	eq
 800c00c:	6819      	ldreq	r1, [r3, #0]
 800c00e:	685b      	ldreq	r3, [r3, #4]
 800c010:	6063      	str	r3, [r4, #4]
 800c012:	bf04      	itt	eq
 800c014:	1949      	addeq	r1, r1, r5
 800c016:	6021      	streq	r1, [r4, #0]
 800c018:	6054      	str	r4, [r2, #4]
 800c01a:	e7ca      	b.n	800bfb2 <_free_r+0x26>
 800c01c:	b003      	add	sp, #12
 800c01e:	bd30      	pop	{r4, r5, pc}
 800c020:	240007b4 	.word	0x240007b4

0800c024 <sbrk_aligned>:
 800c024:	b570      	push	{r4, r5, r6, lr}
 800c026:	4e0e      	ldr	r6, [pc, #56]	; (800c060 <sbrk_aligned+0x3c>)
 800c028:	460c      	mov	r4, r1
 800c02a:	6831      	ldr	r1, [r6, #0]
 800c02c:	4605      	mov	r5, r0
 800c02e:	b911      	cbnz	r1, 800c036 <sbrk_aligned+0x12>
 800c030:	f000 fcd6 	bl	800c9e0 <_sbrk_r>
 800c034:	6030      	str	r0, [r6, #0]
 800c036:	4621      	mov	r1, r4
 800c038:	4628      	mov	r0, r5
 800c03a:	f000 fcd1 	bl	800c9e0 <_sbrk_r>
 800c03e:	1c43      	adds	r3, r0, #1
 800c040:	d00a      	beq.n	800c058 <sbrk_aligned+0x34>
 800c042:	1cc4      	adds	r4, r0, #3
 800c044:	f024 0403 	bic.w	r4, r4, #3
 800c048:	42a0      	cmp	r0, r4
 800c04a:	d007      	beq.n	800c05c <sbrk_aligned+0x38>
 800c04c:	1a21      	subs	r1, r4, r0
 800c04e:	4628      	mov	r0, r5
 800c050:	f000 fcc6 	bl	800c9e0 <_sbrk_r>
 800c054:	3001      	adds	r0, #1
 800c056:	d101      	bne.n	800c05c <sbrk_aligned+0x38>
 800c058:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c05c:	4620      	mov	r0, r4
 800c05e:	bd70      	pop	{r4, r5, r6, pc}
 800c060:	240007b8 	.word	0x240007b8

0800c064 <_malloc_r>:
 800c064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c068:	1ccd      	adds	r5, r1, #3
 800c06a:	f025 0503 	bic.w	r5, r5, #3
 800c06e:	3508      	adds	r5, #8
 800c070:	2d0c      	cmp	r5, #12
 800c072:	bf38      	it	cc
 800c074:	250c      	movcc	r5, #12
 800c076:	2d00      	cmp	r5, #0
 800c078:	4607      	mov	r7, r0
 800c07a:	db01      	blt.n	800c080 <_malloc_r+0x1c>
 800c07c:	42a9      	cmp	r1, r5
 800c07e:	d905      	bls.n	800c08c <_malloc_r+0x28>
 800c080:	230c      	movs	r3, #12
 800c082:	603b      	str	r3, [r7, #0]
 800c084:	2600      	movs	r6, #0
 800c086:	4630      	mov	r0, r6
 800c088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c08c:	4e2e      	ldr	r6, [pc, #184]	; (800c148 <_malloc_r+0xe4>)
 800c08e:	f000 ffb9 	bl	800d004 <__malloc_lock>
 800c092:	6833      	ldr	r3, [r6, #0]
 800c094:	461c      	mov	r4, r3
 800c096:	bb34      	cbnz	r4, 800c0e6 <_malloc_r+0x82>
 800c098:	4629      	mov	r1, r5
 800c09a:	4638      	mov	r0, r7
 800c09c:	f7ff ffc2 	bl	800c024 <sbrk_aligned>
 800c0a0:	1c43      	adds	r3, r0, #1
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	d14d      	bne.n	800c142 <_malloc_r+0xde>
 800c0a6:	6834      	ldr	r4, [r6, #0]
 800c0a8:	4626      	mov	r6, r4
 800c0aa:	2e00      	cmp	r6, #0
 800c0ac:	d140      	bne.n	800c130 <_malloc_r+0xcc>
 800c0ae:	6823      	ldr	r3, [r4, #0]
 800c0b0:	4631      	mov	r1, r6
 800c0b2:	4638      	mov	r0, r7
 800c0b4:	eb04 0803 	add.w	r8, r4, r3
 800c0b8:	f000 fc92 	bl	800c9e0 <_sbrk_r>
 800c0bc:	4580      	cmp	r8, r0
 800c0be:	d13a      	bne.n	800c136 <_malloc_r+0xd2>
 800c0c0:	6821      	ldr	r1, [r4, #0]
 800c0c2:	3503      	adds	r5, #3
 800c0c4:	1a6d      	subs	r5, r5, r1
 800c0c6:	f025 0503 	bic.w	r5, r5, #3
 800c0ca:	3508      	adds	r5, #8
 800c0cc:	2d0c      	cmp	r5, #12
 800c0ce:	bf38      	it	cc
 800c0d0:	250c      	movcc	r5, #12
 800c0d2:	4629      	mov	r1, r5
 800c0d4:	4638      	mov	r0, r7
 800c0d6:	f7ff ffa5 	bl	800c024 <sbrk_aligned>
 800c0da:	3001      	adds	r0, #1
 800c0dc:	d02b      	beq.n	800c136 <_malloc_r+0xd2>
 800c0de:	6823      	ldr	r3, [r4, #0]
 800c0e0:	442b      	add	r3, r5
 800c0e2:	6023      	str	r3, [r4, #0]
 800c0e4:	e00e      	b.n	800c104 <_malloc_r+0xa0>
 800c0e6:	6822      	ldr	r2, [r4, #0]
 800c0e8:	1b52      	subs	r2, r2, r5
 800c0ea:	d41e      	bmi.n	800c12a <_malloc_r+0xc6>
 800c0ec:	2a0b      	cmp	r2, #11
 800c0ee:	d916      	bls.n	800c11e <_malloc_r+0xba>
 800c0f0:	1961      	adds	r1, r4, r5
 800c0f2:	42a3      	cmp	r3, r4
 800c0f4:	6025      	str	r5, [r4, #0]
 800c0f6:	bf18      	it	ne
 800c0f8:	6059      	strne	r1, [r3, #4]
 800c0fa:	6863      	ldr	r3, [r4, #4]
 800c0fc:	bf08      	it	eq
 800c0fe:	6031      	streq	r1, [r6, #0]
 800c100:	5162      	str	r2, [r4, r5]
 800c102:	604b      	str	r3, [r1, #4]
 800c104:	4638      	mov	r0, r7
 800c106:	f104 060b 	add.w	r6, r4, #11
 800c10a:	f000 ff81 	bl	800d010 <__malloc_unlock>
 800c10e:	f026 0607 	bic.w	r6, r6, #7
 800c112:	1d23      	adds	r3, r4, #4
 800c114:	1af2      	subs	r2, r6, r3
 800c116:	d0b6      	beq.n	800c086 <_malloc_r+0x22>
 800c118:	1b9b      	subs	r3, r3, r6
 800c11a:	50a3      	str	r3, [r4, r2]
 800c11c:	e7b3      	b.n	800c086 <_malloc_r+0x22>
 800c11e:	6862      	ldr	r2, [r4, #4]
 800c120:	42a3      	cmp	r3, r4
 800c122:	bf0c      	ite	eq
 800c124:	6032      	streq	r2, [r6, #0]
 800c126:	605a      	strne	r2, [r3, #4]
 800c128:	e7ec      	b.n	800c104 <_malloc_r+0xa0>
 800c12a:	4623      	mov	r3, r4
 800c12c:	6864      	ldr	r4, [r4, #4]
 800c12e:	e7b2      	b.n	800c096 <_malloc_r+0x32>
 800c130:	4634      	mov	r4, r6
 800c132:	6876      	ldr	r6, [r6, #4]
 800c134:	e7b9      	b.n	800c0aa <_malloc_r+0x46>
 800c136:	230c      	movs	r3, #12
 800c138:	603b      	str	r3, [r7, #0]
 800c13a:	4638      	mov	r0, r7
 800c13c:	f000 ff68 	bl	800d010 <__malloc_unlock>
 800c140:	e7a1      	b.n	800c086 <_malloc_r+0x22>
 800c142:	6025      	str	r5, [r4, #0]
 800c144:	e7de      	b.n	800c104 <_malloc_r+0xa0>
 800c146:	bf00      	nop
 800c148:	240007b4 	.word	0x240007b4

0800c14c <__ssputs_r>:
 800c14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c150:	688e      	ldr	r6, [r1, #8]
 800c152:	429e      	cmp	r6, r3
 800c154:	4682      	mov	sl, r0
 800c156:	460c      	mov	r4, r1
 800c158:	4690      	mov	r8, r2
 800c15a:	461f      	mov	r7, r3
 800c15c:	d838      	bhi.n	800c1d0 <__ssputs_r+0x84>
 800c15e:	898a      	ldrh	r2, [r1, #12]
 800c160:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c164:	d032      	beq.n	800c1cc <__ssputs_r+0x80>
 800c166:	6825      	ldr	r5, [r4, #0]
 800c168:	6909      	ldr	r1, [r1, #16]
 800c16a:	eba5 0901 	sub.w	r9, r5, r1
 800c16e:	6965      	ldr	r5, [r4, #20]
 800c170:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c174:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c178:	3301      	adds	r3, #1
 800c17a:	444b      	add	r3, r9
 800c17c:	106d      	asrs	r5, r5, #1
 800c17e:	429d      	cmp	r5, r3
 800c180:	bf38      	it	cc
 800c182:	461d      	movcc	r5, r3
 800c184:	0553      	lsls	r3, r2, #21
 800c186:	d531      	bpl.n	800c1ec <__ssputs_r+0xa0>
 800c188:	4629      	mov	r1, r5
 800c18a:	f7ff ff6b 	bl	800c064 <_malloc_r>
 800c18e:	4606      	mov	r6, r0
 800c190:	b950      	cbnz	r0, 800c1a8 <__ssputs_r+0x5c>
 800c192:	230c      	movs	r3, #12
 800c194:	f8ca 3000 	str.w	r3, [sl]
 800c198:	89a3      	ldrh	r3, [r4, #12]
 800c19a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c19e:	81a3      	strh	r3, [r4, #12]
 800c1a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1a8:	6921      	ldr	r1, [r4, #16]
 800c1aa:	464a      	mov	r2, r9
 800c1ac:	f7ff fdd4 	bl	800bd58 <memcpy>
 800c1b0:	89a3      	ldrh	r3, [r4, #12]
 800c1b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c1b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1ba:	81a3      	strh	r3, [r4, #12]
 800c1bc:	6126      	str	r6, [r4, #16]
 800c1be:	6165      	str	r5, [r4, #20]
 800c1c0:	444e      	add	r6, r9
 800c1c2:	eba5 0509 	sub.w	r5, r5, r9
 800c1c6:	6026      	str	r6, [r4, #0]
 800c1c8:	60a5      	str	r5, [r4, #8]
 800c1ca:	463e      	mov	r6, r7
 800c1cc:	42be      	cmp	r6, r7
 800c1ce:	d900      	bls.n	800c1d2 <__ssputs_r+0x86>
 800c1d0:	463e      	mov	r6, r7
 800c1d2:	6820      	ldr	r0, [r4, #0]
 800c1d4:	4632      	mov	r2, r6
 800c1d6:	4641      	mov	r1, r8
 800c1d8:	f000 fefa 	bl	800cfd0 <memmove>
 800c1dc:	68a3      	ldr	r3, [r4, #8]
 800c1de:	1b9b      	subs	r3, r3, r6
 800c1e0:	60a3      	str	r3, [r4, #8]
 800c1e2:	6823      	ldr	r3, [r4, #0]
 800c1e4:	4433      	add	r3, r6
 800c1e6:	6023      	str	r3, [r4, #0]
 800c1e8:	2000      	movs	r0, #0
 800c1ea:	e7db      	b.n	800c1a4 <__ssputs_r+0x58>
 800c1ec:	462a      	mov	r2, r5
 800c1ee:	f000 ff15 	bl	800d01c <_realloc_r>
 800c1f2:	4606      	mov	r6, r0
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d1e1      	bne.n	800c1bc <__ssputs_r+0x70>
 800c1f8:	6921      	ldr	r1, [r4, #16]
 800c1fa:	4650      	mov	r0, sl
 800c1fc:	f7ff fec6 	bl	800bf8c <_free_r>
 800c200:	e7c7      	b.n	800c192 <__ssputs_r+0x46>
	...

0800c204 <_svfiprintf_r>:
 800c204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c208:	4698      	mov	r8, r3
 800c20a:	898b      	ldrh	r3, [r1, #12]
 800c20c:	061b      	lsls	r3, r3, #24
 800c20e:	b09d      	sub	sp, #116	; 0x74
 800c210:	4607      	mov	r7, r0
 800c212:	460d      	mov	r5, r1
 800c214:	4614      	mov	r4, r2
 800c216:	d50e      	bpl.n	800c236 <_svfiprintf_r+0x32>
 800c218:	690b      	ldr	r3, [r1, #16]
 800c21a:	b963      	cbnz	r3, 800c236 <_svfiprintf_r+0x32>
 800c21c:	2140      	movs	r1, #64	; 0x40
 800c21e:	f7ff ff21 	bl	800c064 <_malloc_r>
 800c222:	6028      	str	r0, [r5, #0]
 800c224:	6128      	str	r0, [r5, #16]
 800c226:	b920      	cbnz	r0, 800c232 <_svfiprintf_r+0x2e>
 800c228:	230c      	movs	r3, #12
 800c22a:	603b      	str	r3, [r7, #0]
 800c22c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c230:	e0d1      	b.n	800c3d6 <_svfiprintf_r+0x1d2>
 800c232:	2340      	movs	r3, #64	; 0x40
 800c234:	616b      	str	r3, [r5, #20]
 800c236:	2300      	movs	r3, #0
 800c238:	9309      	str	r3, [sp, #36]	; 0x24
 800c23a:	2320      	movs	r3, #32
 800c23c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c240:	f8cd 800c 	str.w	r8, [sp, #12]
 800c244:	2330      	movs	r3, #48	; 0x30
 800c246:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c3f0 <_svfiprintf_r+0x1ec>
 800c24a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c24e:	f04f 0901 	mov.w	r9, #1
 800c252:	4623      	mov	r3, r4
 800c254:	469a      	mov	sl, r3
 800c256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c25a:	b10a      	cbz	r2, 800c260 <_svfiprintf_r+0x5c>
 800c25c:	2a25      	cmp	r2, #37	; 0x25
 800c25e:	d1f9      	bne.n	800c254 <_svfiprintf_r+0x50>
 800c260:	ebba 0b04 	subs.w	fp, sl, r4
 800c264:	d00b      	beq.n	800c27e <_svfiprintf_r+0x7a>
 800c266:	465b      	mov	r3, fp
 800c268:	4622      	mov	r2, r4
 800c26a:	4629      	mov	r1, r5
 800c26c:	4638      	mov	r0, r7
 800c26e:	f7ff ff6d 	bl	800c14c <__ssputs_r>
 800c272:	3001      	adds	r0, #1
 800c274:	f000 80aa 	beq.w	800c3cc <_svfiprintf_r+0x1c8>
 800c278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c27a:	445a      	add	r2, fp
 800c27c:	9209      	str	r2, [sp, #36]	; 0x24
 800c27e:	f89a 3000 	ldrb.w	r3, [sl]
 800c282:	2b00      	cmp	r3, #0
 800c284:	f000 80a2 	beq.w	800c3cc <_svfiprintf_r+0x1c8>
 800c288:	2300      	movs	r3, #0
 800c28a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c28e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c292:	f10a 0a01 	add.w	sl, sl, #1
 800c296:	9304      	str	r3, [sp, #16]
 800c298:	9307      	str	r3, [sp, #28]
 800c29a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c29e:	931a      	str	r3, [sp, #104]	; 0x68
 800c2a0:	4654      	mov	r4, sl
 800c2a2:	2205      	movs	r2, #5
 800c2a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2a8:	4851      	ldr	r0, [pc, #324]	; (800c3f0 <_svfiprintf_r+0x1ec>)
 800c2aa:	f7f4 f821 	bl	80002f0 <memchr>
 800c2ae:	9a04      	ldr	r2, [sp, #16]
 800c2b0:	b9d8      	cbnz	r0, 800c2ea <_svfiprintf_r+0xe6>
 800c2b2:	06d0      	lsls	r0, r2, #27
 800c2b4:	bf44      	itt	mi
 800c2b6:	2320      	movmi	r3, #32
 800c2b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2bc:	0711      	lsls	r1, r2, #28
 800c2be:	bf44      	itt	mi
 800c2c0:	232b      	movmi	r3, #43	; 0x2b
 800c2c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2c6:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ca:	2b2a      	cmp	r3, #42	; 0x2a
 800c2cc:	d015      	beq.n	800c2fa <_svfiprintf_r+0xf6>
 800c2ce:	9a07      	ldr	r2, [sp, #28]
 800c2d0:	4654      	mov	r4, sl
 800c2d2:	2000      	movs	r0, #0
 800c2d4:	f04f 0c0a 	mov.w	ip, #10
 800c2d8:	4621      	mov	r1, r4
 800c2da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2de:	3b30      	subs	r3, #48	; 0x30
 800c2e0:	2b09      	cmp	r3, #9
 800c2e2:	d94e      	bls.n	800c382 <_svfiprintf_r+0x17e>
 800c2e4:	b1b0      	cbz	r0, 800c314 <_svfiprintf_r+0x110>
 800c2e6:	9207      	str	r2, [sp, #28]
 800c2e8:	e014      	b.n	800c314 <_svfiprintf_r+0x110>
 800c2ea:	eba0 0308 	sub.w	r3, r0, r8
 800c2ee:	fa09 f303 	lsl.w	r3, r9, r3
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	9304      	str	r3, [sp, #16]
 800c2f6:	46a2      	mov	sl, r4
 800c2f8:	e7d2      	b.n	800c2a0 <_svfiprintf_r+0x9c>
 800c2fa:	9b03      	ldr	r3, [sp, #12]
 800c2fc:	1d19      	adds	r1, r3, #4
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	9103      	str	r1, [sp, #12]
 800c302:	2b00      	cmp	r3, #0
 800c304:	bfbb      	ittet	lt
 800c306:	425b      	neglt	r3, r3
 800c308:	f042 0202 	orrlt.w	r2, r2, #2
 800c30c:	9307      	strge	r3, [sp, #28]
 800c30e:	9307      	strlt	r3, [sp, #28]
 800c310:	bfb8      	it	lt
 800c312:	9204      	strlt	r2, [sp, #16]
 800c314:	7823      	ldrb	r3, [r4, #0]
 800c316:	2b2e      	cmp	r3, #46	; 0x2e
 800c318:	d10c      	bne.n	800c334 <_svfiprintf_r+0x130>
 800c31a:	7863      	ldrb	r3, [r4, #1]
 800c31c:	2b2a      	cmp	r3, #42	; 0x2a
 800c31e:	d135      	bne.n	800c38c <_svfiprintf_r+0x188>
 800c320:	9b03      	ldr	r3, [sp, #12]
 800c322:	1d1a      	adds	r2, r3, #4
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	9203      	str	r2, [sp, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	bfb8      	it	lt
 800c32c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c330:	3402      	adds	r4, #2
 800c332:	9305      	str	r3, [sp, #20]
 800c334:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c400 <_svfiprintf_r+0x1fc>
 800c338:	7821      	ldrb	r1, [r4, #0]
 800c33a:	2203      	movs	r2, #3
 800c33c:	4650      	mov	r0, sl
 800c33e:	f7f3 ffd7 	bl	80002f0 <memchr>
 800c342:	b140      	cbz	r0, 800c356 <_svfiprintf_r+0x152>
 800c344:	2340      	movs	r3, #64	; 0x40
 800c346:	eba0 000a 	sub.w	r0, r0, sl
 800c34a:	fa03 f000 	lsl.w	r0, r3, r0
 800c34e:	9b04      	ldr	r3, [sp, #16]
 800c350:	4303      	orrs	r3, r0
 800c352:	3401      	adds	r4, #1
 800c354:	9304      	str	r3, [sp, #16]
 800c356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c35a:	4826      	ldr	r0, [pc, #152]	; (800c3f4 <_svfiprintf_r+0x1f0>)
 800c35c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c360:	2206      	movs	r2, #6
 800c362:	f7f3 ffc5 	bl	80002f0 <memchr>
 800c366:	2800      	cmp	r0, #0
 800c368:	d038      	beq.n	800c3dc <_svfiprintf_r+0x1d8>
 800c36a:	4b23      	ldr	r3, [pc, #140]	; (800c3f8 <_svfiprintf_r+0x1f4>)
 800c36c:	bb1b      	cbnz	r3, 800c3b6 <_svfiprintf_r+0x1b2>
 800c36e:	9b03      	ldr	r3, [sp, #12]
 800c370:	3307      	adds	r3, #7
 800c372:	f023 0307 	bic.w	r3, r3, #7
 800c376:	3308      	adds	r3, #8
 800c378:	9303      	str	r3, [sp, #12]
 800c37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c37c:	4433      	add	r3, r6
 800c37e:	9309      	str	r3, [sp, #36]	; 0x24
 800c380:	e767      	b.n	800c252 <_svfiprintf_r+0x4e>
 800c382:	fb0c 3202 	mla	r2, ip, r2, r3
 800c386:	460c      	mov	r4, r1
 800c388:	2001      	movs	r0, #1
 800c38a:	e7a5      	b.n	800c2d8 <_svfiprintf_r+0xd4>
 800c38c:	2300      	movs	r3, #0
 800c38e:	3401      	adds	r4, #1
 800c390:	9305      	str	r3, [sp, #20]
 800c392:	4619      	mov	r1, r3
 800c394:	f04f 0c0a 	mov.w	ip, #10
 800c398:	4620      	mov	r0, r4
 800c39a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c39e:	3a30      	subs	r2, #48	; 0x30
 800c3a0:	2a09      	cmp	r2, #9
 800c3a2:	d903      	bls.n	800c3ac <_svfiprintf_r+0x1a8>
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d0c5      	beq.n	800c334 <_svfiprintf_r+0x130>
 800c3a8:	9105      	str	r1, [sp, #20]
 800c3aa:	e7c3      	b.n	800c334 <_svfiprintf_r+0x130>
 800c3ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3b0:	4604      	mov	r4, r0
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	e7f0      	b.n	800c398 <_svfiprintf_r+0x194>
 800c3b6:	ab03      	add	r3, sp, #12
 800c3b8:	9300      	str	r3, [sp, #0]
 800c3ba:	462a      	mov	r2, r5
 800c3bc:	4b0f      	ldr	r3, [pc, #60]	; (800c3fc <_svfiprintf_r+0x1f8>)
 800c3be:	a904      	add	r1, sp, #16
 800c3c0:	4638      	mov	r0, r7
 800c3c2:	f3af 8000 	nop.w
 800c3c6:	1c42      	adds	r2, r0, #1
 800c3c8:	4606      	mov	r6, r0
 800c3ca:	d1d6      	bne.n	800c37a <_svfiprintf_r+0x176>
 800c3cc:	89ab      	ldrh	r3, [r5, #12]
 800c3ce:	065b      	lsls	r3, r3, #25
 800c3d0:	f53f af2c 	bmi.w	800c22c <_svfiprintf_r+0x28>
 800c3d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3d6:	b01d      	add	sp, #116	; 0x74
 800c3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3dc:	ab03      	add	r3, sp, #12
 800c3de:	9300      	str	r3, [sp, #0]
 800c3e0:	462a      	mov	r2, r5
 800c3e2:	4b06      	ldr	r3, [pc, #24]	; (800c3fc <_svfiprintf_r+0x1f8>)
 800c3e4:	a904      	add	r1, sp, #16
 800c3e6:	4638      	mov	r0, r7
 800c3e8:	f000 f9d4 	bl	800c794 <_printf_i>
 800c3ec:	e7eb      	b.n	800c3c6 <_svfiprintf_r+0x1c2>
 800c3ee:	bf00      	nop
 800c3f0:	0800d5de 	.word	0x0800d5de
 800c3f4:	0800d5e8 	.word	0x0800d5e8
 800c3f8:	00000000 	.word	0x00000000
 800c3fc:	0800c14d 	.word	0x0800c14d
 800c400:	0800d5e4 	.word	0x0800d5e4

0800c404 <__sfputc_r>:
 800c404:	6893      	ldr	r3, [r2, #8]
 800c406:	3b01      	subs	r3, #1
 800c408:	2b00      	cmp	r3, #0
 800c40a:	b410      	push	{r4}
 800c40c:	6093      	str	r3, [r2, #8]
 800c40e:	da08      	bge.n	800c422 <__sfputc_r+0x1e>
 800c410:	6994      	ldr	r4, [r2, #24]
 800c412:	42a3      	cmp	r3, r4
 800c414:	db01      	blt.n	800c41a <__sfputc_r+0x16>
 800c416:	290a      	cmp	r1, #10
 800c418:	d103      	bne.n	800c422 <__sfputc_r+0x1e>
 800c41a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c41e:	f000 baef 	b.w	800ca00 <__swbuf_r>
 800c422:	6813      	ldr	r3, [r2, #0]
 800c424:	1c58      	adds	r0, r3, #1
 800c426:	6010      	str	r0, [r2, #0]
 800c428:	7019      	strb	r1, [r3, #0]
 800c42a:	4608      	mov	r0, r1
 800c42c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c430:	4770      	bx	lr

0800c432 <__sfputs_r>:
 800c432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c434:	4606      	mov	r6, r0
 800c436:	460f      	mov	r7, r1
 800c438:	4614      	mov	r4, r2
 800c43a:	18d5      	adds	r5, r2, r3
 800c43c:	42ac      	cmp	r4, r5
 800c43e:	d101      	bne.n	800c444 <__sfputs_r+0x12>
 800c440:	2000      	movs	r0, #0
 800c442:	e007      	b.n	800c454 <__sfputs_r+0x22>
 800c444:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c448:	463a      	mov	r2, r7
 800c44a:	4630      	mov	r0, r6
 800c44c:	f7ff ffda 	bl	800c404 <__sfputc_r>
 800c450:	1c43      	adds	r3, r0, #1
 800c452:	d1f3      	bne.n	800c43c <__sfputs_r+0xa>
 800c454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c458 <_vfiprintf_r>:
 800c458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c45c:	460d      	mov	r5, r1
 800c45e:	b09d      	sub	sp, #116	; 0x74
 800c460:	4614      	mov	r4, r2
 800c462:	4698      	mov	r8, r3
 800c464:	4606      	mov	r6, r0
 800c466:	b118      	cbz	r0, 800c470 <_vfiprintf_r+0x18>
 800c468:	6983      	ldr	r3, [r0, #24]
 800c46a:	b90b      	cbnz	r3, 800c470 <_vfiprintf_r+0x18>
 800c46c:	f000 fcaa 	bl	800cdc4 <__sinit>
 800c470:	4b89      	ldr	r3, [pc, #548]	; (800c698 <_vfiprintf_r+0x240>)
 800c472:	429d      	cmp	r5, r3
 800c474:	d11b      	bne.n	800c4ae <_vfiprintf_r+0x56>
 800c476:	6875      	ldr	r5, [r6, #4]
 800c478:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c47a:	07d9      	lsls	r1, r3, #31
 800c47c:	d405      	bmi.n	800c48a <_vfiprintf_r+0x32>
 800c47e:	89ab      	ldrh	r3, [r5, #12]
 800c480:	059a      	lsls	r2, r3, #22
 800c482:	d402      	bmi.n	800c48a <_vfiprintf_r+0x32>
 800c484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c486:	f000 fd3b 	bl	800cf00 <__retarget_lock_acquire_recursive>
 800c48a:	89ab      	ldrh	r3, [r5, #12]
 800c48c:	071b      	lsls	r3, r3, #28
 800c48e:	d501      	bpl.n	800c494 <_vfiprintf_r+0x3c>
 800c490:	692b      	ldr	r3, [r5, #16]
 800c492:	b9eb      	cbnz	r3, 800c4d0 <_vfiprintf_r+0x78>
 800c494:	4629      	mov	r1, r5
 800c496:	4630      	mov	r0, r6
 800c498:	f000 fb04 	bl	800caa4 <__swsetup_r>
 800c49c:	b1c0      	cbz	r0, 800c4d0 <_vfiprintf_r+0x78>
 800c49e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4a0:	07dc      	lsls	r4, r3, #31
 800c4a2:	d50e      	bpl.n	800c4c2 <_vfiprintf_r+0x6a>
 800c4a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4a8:	b01d      	add	sp, #116	; 0x74
 800c4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ae:	4b7b      	ldr	r3, [pc, #492]	; (800c69c <_vfiprintf_r+0x244>)
 800c4b0:	429d      	cmp	r5, r3
 800c4b2:	d101      	bne.n	800c4b8 <_vfiprintf_r+0x60>
 800c4b4:	68b5      	ldr	r5, [r6, #8]
 800c4b6:	e7df      	b.n	800c478 <_vfiprintf_r+0x20>
 800c4b8:	4b79      	ldr	r3, [pc, #484]	; (800c6a0 <_vfiprintf_r+0x248>)
 800c4ba:	429d      	cmp	r5, r3
 800c4bc:	bf08      	it	eq
 800c4be:	68f5      	ldreq	r5, [r6, #12]
 800c4c0:	e7da      	b.n	800c478 <_vfiprintf_r+0x20>
 800c4c2:	89ab      	ldrh	r3, [r5, #12]
 800c4c4:	0598      	lsls	r0, r3, #22
 800c4c6:	d4ed      	bmi.n	800c4a4 <_vfiprintf_r+0x4c>
 800c4c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4ca:	f000 fd1a 	bl	800cf02 <__retarget_lock_release_recursive>
 800c4ce:	e7e9      	b.n	800c4a4 <_vfiprintf_r+0x4c>
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c4d4:	2320      	movs	r3, #32
 800c4d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4da:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4de:	2330      	movs	r3, #48	; 0x30
 800c4e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c6a4 <_vfiprintf_r+0x24c>
 800c4e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4e8:	f04f 0901 	mov.w	r9, #1
 800c4ec:	4623      	mov	r3, r4
 800c4ee:	469a      	mov	sl, r3
 800c4f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4f4:	b10a      	cbz	r2, 800c4fa <_vfiprintf_r+0xa2>
 800c4f6:	2a25      	cmp	r2, #37	; 0x25
 800c4f8:	d1f9      	bne.n	800c4ee <_vfiprintf_r+0x96>
 800c4fa:	ebba 0b04 	subs.w	fp, sl, r4
 800c4fe:	d00b      	beq.n	800c518 <_vfiprintf_r+0xc0>
 800c500:	465b      	mov	r3, fp
 800c502:	4622      	mov	r2, r4
 800c504:	4629      	mov	r1, r5
 800c506:	4630      	mov	r0, r6
 800c508:	f7ff ff93 	bl	800c432 <__sfputs_r>
 800c50c:	3001      	adds	r0, #1
 800c50e:	f000 80aa 	beq.w	800c666 <_vfiprintf_r+0x20e>
 800c512:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c514:	445a      	add	r2, fp
 800c516:	9209      	str	r2, [sp, #36]	; 0x24
 800c518:	f89a 3000 	ldrb.w	r3, [sl]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f000 80a2 	beq.w	800c666 <_vfiprintf_r+0x20e>
 800c522:	2300      	movs	r3, #0
 800c524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c52c:	f10a 0a01 	add.w	sl, sl, #1
 800c530:	9304      	str	r3, [sp, #16]
 800c532:	9307      	str	r3, [sp, #28]
 800c534:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c538:	931a      	str	r3, [sp, #104]	; 0x68
 800c53a:	4654      	mov	r4, sl
 800c53c:	2205      	movs	r2, #5
 800c53e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c542:	4858      	ldr	r0, [pc, #352]	; (800c6a4 <_vfiprintf_r+0x24c>)
 800c544:	f7f3 fed4 	bl	80002f0 <memchr>
 800c548:	9a04      	ldr	r2, [sp, #16]
 800c54a:	b9d8      	cbnz	r0, 800c584 <_vfiprintf_r+0x12c>
 800c54c:	06d1      	lsls	r1, r2, #27
 800c54e:	bf44      	itt	mi
 800c550:	2320      	movmi	r3, #32
 800c552:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c556:	0713      	lsls	r3, r2, #28
 800c558:	bf44      	itt	mi
 800c55a:	232b      	movmi	r3, #43	; 0x2b
 800c55c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c560:	f89a 3000 	ldrb.w	r3, [sl]
 800c564:	2b2a      	cmp	r3, #42	; 0x2a
 800c566:	d015      	beq.n	800c594 <_vfiprintf_r+0x13c>
 800c568:	9a07      	ldr	r2, [sp, #28]
 800c56a:	4654      	mov	r4, sl
 800c56c:	2000      	movs	r0, #0
 800c56e:	f04f 0c0a 	mov.w	ip, #10
 800c572:	4621      	mov	r1, r4
 800c574:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c578:	3b30      	subs	r3, #48	; 0x30
 800c57a:	2b09      	cmp	r3, #9
 800c57c:	d94e      	bls.n	800c61c <_vfiprintf_r+0x1c4>
 800c57e:	b1b0      	cbz	r0, 800c5ae <_vfiprintf_r+0x156>
 800c580:	9207      	str	r2, [sp, #28]
 800c582:	e014      	b.n	800c5ae <_vfiprintf_r+0x156>
 800c584:	eba0 0308 	sub.w	r3, r0, r8
 800c588:	fa09 f303 	lsl.w	r3, r9, r3
 800c58c:	4313      	orrs	r3, r2
 800c58e:	9304      	str	r3, [sp, #16]
 800c590:	46a2      	mov	sl, r4
 800c592:	e7d2      	b.n	800c53a <_vfiprintf_r+0xe2>
 800c594:	9b03      	ldr	r3, [sp, #12]
 800c596:	1d19      	adds	r1, r3, #4
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	9103      	str	r1, [sp, #12]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	bfbb      	ittet	lt
 800c5a0:	425b      	neglt	r3, r3
 800c5a2:	f042 0202 	orrlt.w	r2, r2, #2
 800c5a6:	9307      	strge	r3, [sp, #28]
 800c5a8:	9307      	strlt	r3, [sp, #28]
 800c5aa:	bfb8      	it	lt
 800c5ac:	9204      	strlt	r2, [sp, #16]
 800c5ae:	7823      	ldrb	r3, [r4, #0]
 800c5b0:	2b2e      	cmp	r3, #46	; 0x2e
 800c5b2:	d10c      	bne.n	800c5ce <_vfiprintf_r+0x176>
 800c5b4:	7863      	ldrb	r3, [r4, #1]
 800c5b6:	2b2a      	cmp	r3, #42	; 0x2a
 800c5b8:	d135      	bne.n	800c626 <_vfiprintf_r+0x1ce>
 800c5ba:	9b03      	ldr	r3, [sp, #12]
 800c5bc:	1d1a      	adds	r2, r3, #4
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	9203      	str	r2, [sp, #12]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	bfb8      	it	lt
 800c5c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c5ca:	3402      	adds	r4, #2
 800c5cc:	9305      	str	r3, [sp, #20]
 800c5ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c6b4 <_vfiprintf_r+0x25c>
 800c5d2:	7821      	ldrb	r1, [r4, #0]
 800c5d4:	2203      	movs	r2, #3
 800c5d6:	4650      	mov	r0, sl
 800c5d8:	f7f3 fe8a 	bl	80002f0 <memchr>
 800c5dc:	b140      	cbz	r0, 800c5f0 <_vfiprintf_r+0x198>
 800c5de:	2340      	movs	r3, #64	; 0x40
 800c5e0:	eba0 000a 	sub.w	r0, r0, sl
 800c5e4:	fa03 f000 	lsl.w	r0, r3, r0
 800c5e8:	9b04      	ldr	r3, [sp, #16]
 800c5ea:	4303      	orrs	r3, r0
 800c5ec:	3401      	adds	r4, #1
 800c5ee:	9304      	str	r3, [sp, #16]
 800c5f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5f4:	482c      	ldr	r0, [pc, #176]	; (800c6a8 <_vfiprintf_r+0x250>)
 800c5f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5fa:	2206      	movs	r2, #6
 800c5fc:	f7f3 fe78 	bl	80002f0 <memchr>
 800c600:	2800      	cmp	r0, #0
 800c602:	d03f      	beq.n	800c684 <_vfiprintf_r+0x22c>
 800c604:	4b29      	ldr	r3, [pc, #164]	; (800c6ac <_vfiprintf_r+0x254>)
 800c606:	bb1b      	cbnz	r3, 800c650 <_vfiprintf_r+0x1f8>
 800c608:	9b03      	ldr	r3, [sp, #12]
 800c60a:	3307      	adds	r3, #7
 800c60c:	f023 0307 	bic.w	r3, r3, #7
 800c610:	3308      	adds	r3, #8
 800c612:	9303      	str	r3, [sp, #12]
 800c614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c616:	443b      	add	r3, r7
 800c618:	9309      	str	r3, [sp, #36]	; 0x24
 800c61a:	e767      	b.n	800c4ec <_vfiprintf_r+0x94>
 800c61c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c620:	460c      	mov	r4, r1
 800c622:	2001      	movs	r0, #1
 800c624:	e7a5      	b.n	800c572 <_vfiprintf_r+0x11a>
 800c626:	2300      	movs	r3, #0
 800c628:	3401      	adds	r4, #1
 800c62a:	9305      	str	r3, [sp, #20]
 800c62c:	4619      	mov	r1, r3
 800c62e:	f04f 0c0a 	mov.w	ip, #10
 800c632:	4620      	mov	r0, r4
 800c634:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c638:	3a30      	subs	r2, #48	; 0x30
 800c63a:	2a09      	cmp	r2, #9
 800c63c:	d903      	bls.n	800c646 <_vfiprintf_r+0x1ee>
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d0c5      	beq.n	800c5ce <_vfiprintf_r+0x176>
 800c642:	9105      	str	r1, [sp, #20]
 800c644:	e7c3      	b.n	800c5ce <_vfiprintf_r+0x176>
 800c646:	fb0c 2101 	mla	r1, ip, r1, r2
 800c64a:	4604      	mov	r4, r0
 800c64c:	2301      	movs	r3, #1
 800c64e:	e7f0      	b.n	800c632 <_vfiprintf_r+0x1da>
 800c650:	ab03      	add	r3, sp, #12
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	462a      	mov	r2, r5
 800c656:	4b16      	ldr	r3, [pc, #88]	; (800c6b0 <_vfiprintf_r+0x258>)
 800c658:	a904      	add	r1, sp, #16
 800c65a:	4630      	mov	r0, r6
 800c65c:	f3af 8000 	nop.w
 800c660:	4607      	mov	r7, r0
 800c662:	1c78      	adds	r0, r7, #1
 800c664:	d1d6      	bne.n	800c614 <_vfiprintf_r+0x1bc>
 800c666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c668:	07d9      	lsls	r1, r3, #31
 800c66a:	d405      	bmi.n	800c678 <_vfiprintf_r+0x220>
 800c66c:	89ab      	ldrh	r3, [r5, #12]
 800c66e:	059a      	lsls	r2, r3, #22
 800c670:	d402      	bmi.n	800c678 <_vfiprintf_r+0x220>
 800c672:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c674:	f000 fc45 	bl	800cf02 <__retarget_lock_release_recursive>
 800c678:	89ab      	ldrh	r3, [r5, #12]
 800c67a:	065b      	lsls	r3, r3, #25
 800c67c:	f53f af12 	bmi.w	800c4a4 <_vfiprintf_r+0x4c>
 800c680:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c682:	e711      	b.n	800c4a8 <_vfiprintf_r+0x50>
 800c684:	ab03      	add	r3, sp, #12
 800c686:	9300      	str	r3, [sp, #0]
 800c688:	462a      	mov	r2, r5
 800c68a:	4b09      	ldr	r3, [pc, #36]	; (800c6b0 <_vfiprintf_r+0x258>)
 800c68c:	a904      	add	r1, sp, #16
 800c68e:	4630      	mov	r0, r6
 800c690:	f000 f880 	bl	800c794 <_printf_i>
 800c694:	e7e4      	b.n	800c660 <_vfiprintf_r+0x208>
 800c696:	bf00      	nop
 800c698:	0800d634 	.word	0x0800d634
 800c69c:	0800d654 	.word	0x0800d654
 800c6a0:	0800d614 	.word	0x0800d614
 800c6a4:	0800d5de 	.word	0x0800d5de
 800c6a8:	0800d5e8 	.word	0x0800d5e8
 800c6ac:	00000000 	.word	0x00000000
 800c6b0:	0800c433 	.word	0x0800c433
 800c6b4:	0800d5e4 	.word	0x0800d5e4

0800c6b8 <_printf_common>:
 800c6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6bc:	4616      	mov	r6, r2
 800c6be:	4699      	mov	r9, r3
 800c6c0:	688a      	ldr	r2, [r1, #8]
 800c6c2:	690b      	ldr	r3, [r1, #16]
 800c6c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	bfb8      	it	lt
 800c6cc:	4613      	movlt	r3, r2
 800c6ce:	6033      	str	r3, [r6, #0]
 800c6d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c6d4:	4607      	mov	r7, r0
 800c6d6:	460c      	mov	r4, r1
 800c6d8:	b10a      	cbz	r2, 800c6de <_printf_common+0x26>
 800c6da:	3301      	adds	r3, #1
 800c6dc:	6033      	str	r3, [r6, #0]
 800c6de:	6823      	ldr	r3, [r4, #0]
 800c6e0:	0699      	lsls	r1, r3, #26
 800c6e2:	bf42      	ittt	mi
 800c6e4:	6833      	ldrmi	r3, [r6, #0]
 800c6e6:	3302      	addmi	r3, #2
 800c6e8:	6033      	strmi	r3, [r6, #0]
 800c6ea:	6825      	ldr	r5, [r4, #0]
 800c6ec:	f015 0506 	ands.w	r5, r5, #6
 800c6f0:	d106      	bne.n	800c700 <_printf_common+0x48>
 800c6f2:	f104 0a19 	add.w	sl, r4, #25
 800c6f6:	68e3      	ldr	r3, [r4, #12]
 800c6f8:	6832      	ldr	r2, [r6, #0]
 800c6fa:	1a9b      	subs	r3, r3, r2
 800c6fc:	42ab      	cmp	r3, r5
 800c6fe:	dc26      	bgt.n	800c74e <_printf_common+0x96>
 800c700:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c704:	1e13      	subs	r3, r2, #0
 800c706:	6822      	ldr	r2, [r4, #0]
 800c708:	bf18      	it	ne
 800c70a:	2301      	movne	r3, #1
 800c70c:	0692      	lsls	r2, r2, #26
 800c70e:	d42b      	bmi.n	800c768 <_printf_common+0xb0>
 800c710:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c714:	4649      	mov	r1, r9
 800c716:	4638      	mov	r0, r7
 800c718:	47c0      	blx	r8
 800c71a:	3001      	adds	r0, #1
 800c71c:	d01e      	beq.n	800c75c <_printf_common+0xa4>
 800c71e:	6823      	ldr	r3, [r4, #0]
 800c720:	68e5      	ldr	r5, [r4, #12]
 800c722:	6832      	ldr	r2, [r6, #0]
 800c724:	f003 0306 	and.w	r3, r3, #6
 800c728:	2b04      	cmp	r3, #4
 800c72a:	bf08      	it	eq
 800c72c:	1aad      	subeq	r5, r5, r2
 800c72e:	68a3      	ldr	r3, [r4, #8]
 800c730:	6922      	ldr	r2, [r4, #16]
 800c732:	bf0c      	ite	eq
 800c734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c738:	2500      	movne	r5, #0
 800c73a:	4293      	cmp	r3, r2
 800c73c:	bfc4      	itt	gt
 800c73e:	1a9b      	subgt	r3, r3, r2
 800c740:	18ed      	addgt	r5, r5, r3
 800c742:	2600      	movs	r6, #0
 800c744:	341a      	adds	r4, #26
 800c746:	42b5      	cmp	r5, r6
 800c748:	d11a      	bne.n	800c780 <_printf_common+0xc8>
 800c74a:	2000      	movs	r0, #0
 800c74c:	e008      	b.n	800c760 <_printf_common+0xa8>
 800c74e:	2301      	movs	r3, #1
 800c750:	4652      	mov	r2, sl
 800c752:	4649      	mov	r1, r9
 800c754:	4638      	mov	r0, r7
 800c756:	47c0      	blx	r8
 800c758:	3001      	adds	r0, #1
 800c75a:	d103      	bne.n	800c764 <_printf_common+0xac>
 800c75c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c764:	3501      	adds	r5, #1
 800c766:	e7c6      	b.n	800c6f6 <_printf_common+0x3e>
 800c768:	18e1      	adds	r1, r4, r3
 800c76a:	1c5a      	adds	r2, r3, #1
 800c76c:	2030      	movs	r0, #48	; 0x30
 800c76e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c772:	4422      	add	r2, r4
 800c774:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c778:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c77c:	3302      	adds	r3, #2
 800c77e:	e7c7      	b.n	800c710 <_printf_common+0x58>
 800c780:	2301      	movs	r3, #1
 800c782:	4622      	mov	r2, r4
 800c784:	4649      	mov	r1, r9
 800c786:	4638      	mov	r0, r7
 800c788:	47c0      	blx	r8
 800c78a:	3001      	adds	r0, #1
 800c78c:	d0e6      	beq.n	800c75c <_printf_common+0xa4>
 800c78e:	3601      	adds	r6, #1
 800c790:	e7d9      	b.n	800c746 <_printf_common+0x8e>
	...

0800c794 <_printf_i>:
 800c794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c798:	7e0f      	ldrb	r7, [r1, #24]
 800c79a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c79c:	2f78      	cmp	r7, #120	; 0x78
 800c79e:	4691      	mov	r9, r2
 800c7a0:	4680      	mov	r8, r0
 800c7a2:	460c      	mov	r4, r1
 800c7a4:	469a      	mov	sl, r3
 800c7a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c7aa:	d807      	bhi.n	800c7bc <_printf_i+0x28>
 800c7ac:	2f62      	cmp	r7, #98	; 0x62
 800c7ae:	d80a      	bhi.n	800c7c6 <_printf_i+0x32>
 800c7b0:	2f00      	cmp	r7, #0
 800c7b2:	f000 80d8 	beq.w	800c966 <_printf_i+0x1d2>
 800c7b6:	2f58      	cmp	r7, #88	; 0x58
 800c7b8:	f000 80a3 	beq.w	800c902 <_printf_i+0x16e>
 800c7bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c7c4:	e03a      	b.n	800c83c <_printf_i+0xa8>
 800c7c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c7ca:	2b15      	cmp	r3, #21
 800c7cc:	d8f6      	bhi.n	800c7bc <_printf_i+0x28>
 800c7ce:	a101      	add	r1, pc, #4	; (adr r1, 800c7d4 <_printf_i+0x40>)
 800c7d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c7d4:	0800c82d 	.word	0x0800c82d
 800c7d8:	0800c841 	.word	0x0800c841
 800c7dc:	0800c7bd 	.word	0x0800c7bd
 800c7e0:	0800c7bd 	.word	0x0800c7bd
 800c7e4:	0800c7bd 	.word	0x0800c7bd
 800c7e8:	0800c7bd 	.word	0x0800c7bd
 800c7ec:	0800c841 	.word	0x0800c841
 800c7f0:	0800c7bd 	.word	0x0800c7bd
 800c7f4:	0800c7bd 	.word	0x0800c7bd
 800c7f8:	0800c7bd 	.word	0x0800c7bd
 800c7fc:	0800c7bd 	.word	0x0800c7bd
 800c800:	0800c94d 	.word	0x0800c94d
 800c804:	0800c871 	.word	0x0800c871
 800c808:	0800c92f 	.word	0x0800c92f
 800c80c:	0800c7bd 	.word	0x0800c7bd
 800c810:	0800c7bd 	.word	0x0800c7bd
 800c814:	0800c96f 	.word	0x0800c96f
 800c818:	0800c7bd 	.word	0x0800c7bd
 800c81c:	0800c871 	.word	0x0800c871
 800c820:	0800c7bd 	.word	0x0800c7bd
 800c824:	0800c7bd 	.word	0x0800c7bd
 800c828:	0800c937 	.word	0x0800c937
 800c82c:	682b      	ldr	r3, [r5, #0]
 800c82e:	1d1a      	adds	r2, r3, #4
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	602a      	str	r2, [r5, #0]
 800c834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c83c:	2301      	movs	r3, #1
 800c83e:	e0a3      	b.n	800c988 <_printf_i+0x1f4>
 800c840:	6820      	ldr	r0, [r4, #0]
 800c842:	6829      	ldr	r1, [r5, #0]
 800c844:	0606      	lsls	r6, r0, #24
 800c846:	f101 0304 	add.w	r3, r1, #4
 800c84a:	d50a      	bpl.n	800c862 <_printf_i+0xce>
 800c84c:	680e      	ldr	r6, [r1, #0]
 800c84e:	602b      	str	r3, [r5, #0]
 800c850:	2e00      	cmp	r6, #0
 800c852:	da03      	bge.n	800c85c <_printf_i+0xc8>
 800c854:	232d      	movs	r3, #45	; 0x2d
 800c856:	4276      	negs	r6, r6
 800c858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c85c:	485e      	ldr	r0, [pc, #376]	; (800c9d8 <_printf_i+0x244>)
 800c85e:	230a      	movs	r3, #10
 800c860:	e019      	b.n	800c896 <_printf_i+0x102>
 800c862:	680e      	ldr	r6, [r1, #0]
 800c864:	602b      	str	r3, [r5, #0]
 800c866:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c86a:	bf18      	it	ne
 800c86c:	b236      	sxthne	r6, r6
 800c86e:	e7ef      	b.n	800c850 <_printf_i+0xbc>
 800c870:	682b      	ldr	r3, [r5, #0]
 800c872:	6820      	ldr	r0, [r4, #0]
 800c874:	1d19      	adds	r1, r3, #4
 800c876:	6029      	str	r1, [r5, #0]
 800c878:	0601      	lsls	r1, r0, #24
 800c87a:	d501      	bpl.n	800c880 <_printf_i+0xec>
 800c87c:	681e      	ldr	r6, [r3, #0]
 800c87e:	e002      	b.n	800c886 <_printf_i+0xf2>
 800c880:	0646      	lsls	r6, r0, #25
 800c882:	d5fb      	bpl.n	800c87c <_printf_i+0xe8>
 800c884:	881e      	ldrh	r6, [r3, #0]
 800c886:	4854      	ldr	r0, [pc, #336]	; (800c9d8 <_printf_i+0x244>)
 800c888:	2f6f      	cmp	r7, #111	; 0x6f
 800c88a:	bf0c      	ite	eq
 800c88c:	2308      	moveq	r3, #8
 800c88e:	230a      	movne	r3, #10
 800c890:	2100      	movs	r1, #0
 800c892:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c896:	6865      	ldr	r5, [r4, #4]
 800c898:	60a5      	str	r5, [r4, #8]
 800c89a:	2d00      	cmp	r5, #0
 800c89c:	bfa2      	ittt	ge
 800c89e:	6821      	ldrge	r1, [r4, #0]
 800c8a0:	f021 0104 	bicge.w	r1, r1, #4
 800c8a4:	6021      	strge	r1, [r4, #0]
 800c8a6:	b90e      	cbnz	r6, 800c8ac <_printf_i+0x118>
 800c8a8:	2d00      	cmp	r5, #0
 800c8aa:	d04d      	beq.n	800c948 <_printf_i+0x1b4>
 800c8ac:	4615      	mov	r5, r2
 800c8ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800c8b2:	fb03 6711 	mls	r7, r3, r1, r6
 800c8b6:	5dc7      	ldrb	r7, [r0, r7]
 800c8b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c8bc:	4637      	mov	r7, r6
 800c8be:	42bb      	cmp	r3, r7
 800c8c0:	460e      	mov	r6, r1
 800c8c2:	d9f4      	bls.n	800c8ae <_printf_i+0x11a>
 800c8c4:	2b08      	cmp	r3, #8
 800c8c6:	d10b      	bne.n	800c8e0 <_printf_i+0x14c>
 800c8c8:	6823      	ldr	r3, [r4, #0]
 800c8ca:	07de      	lsls	r6, r3, #31
 800c8cc:	d508      	bpl.n	800c8e0 <_printf_i+0x14c>
 800c8ce:	6923      	ldr	r3, [r4, #16]
 800c8d0:	6861      	ldr	r1, [r4, #4]
 800c8d2:	4299      	cmp	r1, r3
 800c8d4:	bfde      	ittt	le
 800c8d6:	2330      	movle	r3, #48	; 0x30
 800c8d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c8dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c8e0:	1b52      	subs	r2, r2, r5
 800c8e2:	6122      	str	r2, [r4, #16]
 800c8e4:	f8cd a000 	str.w	sl, [sp]
 800c8e8:	464b      	mov	r3, r9
 800c8ea:	aa03      	add	r2, sp, #12
 800c8ec:	4621      	mov	r1, r4
 800c8ee:	4640      	mov	r0, r8
 800c8f0:	f7ff fee2 	bl	800c6b8 <_printf_common>
 800c8f4:	3001      	adds	r0, #1
 800c8f6:	d14c      	bne.n	800c992 <_printf_i+0x1fe>
 800c8f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8fc:	b004      	add	sp, #16
 800c8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c902:	4835      	ldr	r0, [pc, #212]	; (800c9d8 <_printf_i+0x244>)
 800c904:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c908:	6829      	ldr	r1, [r5, #0]
 800c90a:	6823      	ldr	r3, [r4, #0]
 800c90c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c910:	6029      	str	r1, [r5, #0]
 800c912:	061d      	lsls	r5, r3, #24
 800c914:	d514      	bpl.n	800c940 <_printf_i+0x1ac>
 800c916:	07df      	lsls	r7, r3, #31
 800c918:	bf44      	itt	mi
 800c91a:	f043 0320 	orrmi.w	r3, r3, #32
 800c91e:	6023      	strmi	r3, [r4, #0]
 800c920:	b91e      	cbnz	r6, 800c92a <_printf_i+0x196>
 800c922:	6823      	ldr	r3, [r4, #0]
 800c924:	f023 0320 	bic.w	r3, r3, #32
 800c928:	6023      	str	r3, [r4, #0]
 800c92a:	2310      	movs	r3, #16
 800c92c:	e7b0      	b.n	800c890 <_printf_i+0xfc>
 800c92e:	6823      	ldr	r3, [r4, #0]
 800c930:	f043 0320 	orr.w	r3, r3, #32
 800c934:	6023      	str	r3, [r4, #0]
 800c936:	2378      	movs	r3, #120	; 0x78
 800c938:	4828      	ldr	r0, [pc, #160]	; (800c9dc <_printf_i+0x248>)
 800c93a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c93e:	e7e3      	b.n	800c908 <_printf_i+0x174>
 800c940:	0659      	lsls	r1, r3, #25
 800c942:	bf48      	it	mi
 800c944:	b2b6      	uxthmi	r6, r6
 800c946:	e7e6      	b.n	800c916 <_printf_i+0x182>
 800c948:	4615      	mov	r5, r2
 800c94a:	e7bb      	b.n	800c8c4 <_printf_i+0x130>
 800c94c:	682b      	ldr	r3, [r5, #0]
 800c94e:	6826      	ldr	r6, [r4, #0]
 800c950:	6961      	ldr	r1, [r4, #20]
 800c952:	1d18      	adds	r0, r3, #4
 800c954:	6028      	str	r0, [r5, #0]
 800c956:	0635      	lsls	r5, r6, #24
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	d501      	bpl.n	800c960 <_printf_i+0x1cc>
 800c95c:	6019      	str	r1, [r3, #0]
 800c95e:	e002      	b.n	800c966 <_printf_i+0x1d2>
 800c960:	0670      	lsls	r0, r6, #25
 800c962:	d5fb      	bpl.n	800c95c <_printf_i+0x1c8>
 800c964:	8019      	strh	r1, [r3, #0]
 800c966:	2300      	movs	r3, #0
 800c968:	6123      	str	r3, [r4, #16]
 800c96a:	4615      	mov	r5, r2
 800c96c:	e7ba      	b.n	800c8e4 <_printf_i+0x150>
 800c96e:	682b      	ldr	r3, [r5, #0]
 800c970:	1d1a      	adds	r2, r3, #4
 800c972:	602a      	str	r2, [r5, #0]
 800c974:	681d      	ldr	r5, [r3, #0]
 800c976:	6862      	ldr	r2, [r4, #4]
 800c978:	2100      	movs	r1, #0
 800c97a:	4628      	mov	r0, r5
 800c97c:	f7f3 fcb8 	bl	80002f0 <memchr>
 800c980:	b108      	cbz	r0, 800c986 <_printf_i+0x1f2>
 800c982:	1b40      	subs	r0, r0, r5
 800c984:	6060      	str	r0, [r4, #4]
 800c986:	6863      	ldr	r3, [r4, #4]
 800c988:	6123      	str	r3, [r4, #16]
 800c98a:	2300      	movs	r3, #0
 800c98c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c990:	e7a8      	b.n	800c8e4 <_printf_i+0x150>
 800c992:	6923      	ldr	r3, [r4, #16]
 800c994:	462a      	mov	r2, r5
 800c996:	4649      	mov	r1, r9
 800c998:	4640      	mov	r0, r8
 800c99a:	47d0      	blx	sl
 800c99c:	3001      	adds	r0, #1
 800c99e:	d0ab      	beq.n	800c8f8 <_printf_i+0x164>
 800c9a0:	6823      	ldr	r3, [r4, #0]
 800c9a2:	079b      	lsls	r3, r3, #30
 800c9a4:	d413      	bmi.n	800c9ce <_printf_i+0x23a>
 800c9a6:	68e0      	ldr	r0, [r4, #12]
 800c9a8:	9b03      	ldr	r3, [sp, #12]
 800c9aa:	4298      	cmp	r0, r3
 800c9ac:	bfb8      	it	lt
 800c9ae:	4618      	movlt	r0, r3
 800c9b0:	e7a4      	b.n	800c8fc <_printf_i+0x168>
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	4632      	mov	r2, r6
 800c9b6:	4649      	mov	r1, r9
 800c9b8:	4640      	mov	r0, r8
 800c9ba:	47d0      	blx	sl
 800c9bc:	3001      	adds	r0, #1
 800c9be:	d09b      	beq.n	800c8f8 <_printf_i+0x164>
 800c9c0:	3501      	adds	r5, #1
 800c9c2:	68e3      	ldr	r3, [r4, #12]
 800c9c4:	9903      	ldr	r1, [sp, #12]
 800c9c6:	1a5b      	subs	r3, r3, r1
 800c9c8:	42ab      	cmp	r3, r5
 800c9ca:	dcf2      	bgt.n	800c9b2 <_printf_i+0x21e>
 800c9cc:	e7eb      	b.n	800c9a6 <_printf_i+0x212>
 800c9ce:	2500      	movs	r5, #0
 800c9d0:	f104 0619 	add.w	r6, r4, #25
 800c9d4:	e7f5      	b.n	800c9c2 <_printf_i+0x22e>
 800c9d6:	bf00      	nop
 800c9d8:	0800d5ef 	.word	0x0800d5ef
 800c9dc:	0800d600 	.word	0x0800d600

0800c9e0 <_sbrk_r>:
 800c9e0:	b538      	push	{r3, r4, r5, lr}
 800c9e2:	4d06      	ldr	r5, [pc, #24]	; (800c9fc <_sbrk_r+0x1c>)
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	4608      	mov	r0, r1
 800c9ea:	602b      	str	r3, [r5, #0]
 800c9ec:	f7f4 fec6 	bl	800177c <_sbrk>
 800c9f0:	1c43      	adds	r3, r0, #1
 800c9f2:	d102      	bne.n	800c9fa <_sbrk_r+0x1a>
 800c9f4:	682b      	ldr	r3, [r5, #0]
 800c9f6:	b103      	cbz	r3, 800c9fa <_sbrk_r+0x1a>
 800c9f8:	6023      	str	r3, [r4, #0]
 800c9fa:	bd38      	pop	{r3, r4, r5, pc}
 800c9fc:	240007bc 	.word	0x240007bc

0800ca00 <__swbuf_r>:
 800ca00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca02:	460e      	mov	r6, r1
 800ca04:	4614      	mov	r4, r2
 800ca06:	4605      	mov	r5, r0
 800ca08:	b118      	cbz	r0, 800ca12 <__swbuf_r+0x12>
 800ca0a:	6983      	ldr	r3, [r0, #24]
 800ca0c:	b90b      	cbnz	r3, 800ca12 <__swbuf_r+0x12>
 800ca0e:	f000 f9d9 	bl	800cdc4 <__sinit>
 800ca12:	4b21      	ldr	r3, [pc, #132]	; (800ca98 <__swbuf_r+0x98>)
 800ca14:	429c      	cmp	r4, r3
 800ca16:	d12b      	bne.n	800ca70 <__swbuf_r+0x70>
 800ca18:	686c      	ldr	r4, [r5, #4]
 800ca1a:	69a3      	ldr	r3, [r4, #24]
 800ca1c:	60a3      	str	r3, [r4, #8]
 800ca1e:	89a3      	ldrh	r3, [r4, #12]
 800ca20:	071a      	lsls	r2, r3, #28
 800ca22:	d52f      	bpl.n	800ca84 <__swbuf_r+0x84>
 800ca24:	6923      	ldr	r3, [r4, #16]
 800ca26:	b36b      	cbz	r3, 800ca84 <__swbuf_r+0x84>
 800ca28:	6923      	ldr	r3, [r4, #16]
 800ca2a:	6820      	ldr	r0, [r4, #0]
 800ca2c:	1ac0      	subs	r0, r0, r3
 800ca2e:	6963      	ldr	r3, [r4, #20]
 800ca30:	b2f6      	uxtb	r6, r6
 800ca32:	4283      	cmp	r3, r0
 800ca34:	4637      	mov	r7, r6
 800ca36:	dc04      	bgt.n	800ca42 <__swbuf_r+0x42>
 800ca38:	4621      	mov	r1, r4
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	f000 f92e 	bl	800cc9c <_fflush_r>
 800ca40:	bb30      	cbnz	r0, 800ca90 <__swbuf_r+0x90>
 800ca42:	68a3      	ldr	r3, [r4, #8]
 800ca44:	3b01      	subs	r3, #1
 800ca46:	60a3      	str	r3, [r4, #8]
 800ca48:	6823      	ldr	r3, [r4, #0]
 800ca4a:	1c5a      	adds	r2, r3, #1
 800ca4c:	6022      	str	r2, [r4, #0]
 800ca4e:	701e      	strb	r6, [r3, #0]
 800ca50:	6963      	ldr	r3, [r4, #20]
 800ca52:	3001      	adds	r0, #1
 800ca54:	4283      	cmp	r3, r0
 800ca56:	d004      	beq.n	800ca62 <__swbuf_r+0x62>
 800ca58:	89a3      	ldrh	r3, [r4, #12]
 800ca5a:	07db      	lsls	r3, r3, #31
 800ca5c:	d506      	bpl.n	800ca6c <__swbuf_r+0x6c>
 800ca5e:	2e0a      	cmp	r6, #10
 800ca60:	d104      	bne.n	800ca6c <__swbuf_r+0x6c>
 800ca62:	4621      	mov	r1, r4
 800ca64:	4628      	mov	r0, r5
 800ca66:	f000 f919 	bl	800cc9c <_fflush_r>
 800ca6a:	b988      	cbnz	r0, 800ca90 <__swbuf_r+0x90>
 800ca6c:	4638      	mov	r0, r7
 800ca6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca70:	4b0a      	ldr	r3, [pc, #40]	; (800ca9c <__swbuf_r+0x9c>)
 800ca72:	429c      	cmp	r4, r3
 800ca74:	d101      	bne.n	800ca7a <__swbuf_r+0x7a>
 800ca76:	68ac      	ldr	r4, [r5, #8]
 800ca78:	e7cf      	b.n	800ca1a <__swbuf_r+0x1a>
 800ca7a:	4b09      	ldr	r3, [pc, #36]	; (800caa0 <__swbuf_r+0xa0>)
 800ca7c:	429c      	cmp	r4, r3
 800ca7e:	bf08      	it	eq
 800ca80:	68ec      	ldreq	r4, [r5, #12]
 800ca82:	e7ca      	b.n	800ca1a <__swbuf_r+0x1a>
 800ca84:	4621      	mov	r1, r4
 800ca86:	4628      	mov	r0, r5
 800ca88:	f000 f80c 	bl	800caa4 <__swsetup_r>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d0cb      	beq.n	800ca28 <__swbuf_r+0x28>
 800ca90:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ca94:	e7ea      	b.n	800ca6c <__swbuf_r+0x6c>
 800ca96:	bf00      	nop
 800ca98:	0800d634 	.word	0x0800d634
 800ca9c:	0800d654 	.word	0x0800d654
 800caa0:	0800d614 	.word	0x0800d614

0800caa4 <__swsetup_r>:
 800caa4:	4b32      	ldr	r3, [pc, #200]	; (800cb70 <__swsetup_r+0xcc>)
 800caa6:	b570      	push	{r4, r5, r6, lr}
 800caa8:	681d      	ldr	r5, [r3, #0]
 800caaa:	4606      	mov	r6, r0
 800caac:	460c      	mov	r4, r1
 800caae:	b125      	cbz	r5, 800caba <__swsetup_r+0x16>
 800cab0:	69ab      	ldr	r3, [r5, #24]
 800cab2:	b913      	cbnz	r3, 800caba <__swsetup_r+0x16>
 800cab4:	4628      	mov	r0, r5
 800cab6:	f000 f985 	bl	800cdc4 <__sinit>
 800caba:	4b2e      	ldr	r3, [pc, #184]	; (800cb74 <__swsetup_r+0xd0>)
 800cabc:	429c      	cmp	r4, r3
 800cabe:	d10f      	bne.n	800cae0 <__swsetup_r+0x3c>
 800cac0:	686c      	ldr	r4, [r5, #4]
 800cac2:	89a3      	ldrh	r3, [r4, #12]
 800cac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cac8:	0719      	lsls	r1, r3, #28
 800caca:	d42c      	bmi.n	800cb26 <__swsetup_r+0x82>
 800cacc:	06dd      	lsls	r5, r3, #27
 800cace:	d411      	bmi.n	800caf4 <__swsetup_r+0x50>
 800cad0:	2309      	movs	r3, #9
 800cad2:	6033      	str	r3, [r6, #0]
 800cad4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cad8:	81a3      	strh	r3, [r4, #12]
 800cada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cade:	e03e      	b.n	800cb5e <__swsetup_r+0xba>
 800cae0:	4b25      	ldr	r3, [pc, #148]	; (800cb78 <__swsetup_r+0xd4>)
 800cae2:	429c      	cmp	r4, r3
 800cae4:	d101      	bne.n	800caea <__swsetup_r+0x46>
 800cae6:	68ac      	ldr	r4, [r5, #8]
 800cae8:	e7eb      	b.n	800cac2 <__swsetup_r+0x1e>
 800caea:	4b24      	ldr	r3, [pc, #144]	; (800cb7c <__swsetup_r+0xd8>)
 800caec:	429c      	cmp	r4, r3
 800caee:	bf08      	it	eq
 800caf0:	68ec      	ldreq	r4, [r5, #12]
 800caf2:	e7e6      	b.n	800cac2 <__swsetup_r+0x1e>
 800caf4:	0758      	lsls	r0, r3, #29
 800caf6:	d512      	bpl.n	800cb1e <__swsetup_r+0x7a>
 800caf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cafa:	b141      	cbz	r1, 800cb0e <__swsetup_r+0x6a>
 800cafc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb00:	4299      	cmp	r1, r3
 800cb02:	d002      	beq.n	800cb0a <__swsetup_r+0x66>
 800cb04:	4630      	mov	r0, r6
 800cb06:	f7ff fa41 	bl	800bf8c <_free_r>
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	6363      	str	r3, [r4, #52]	; 0x34
 800cb0e:	89a3      	ldrh	r3, [r4, #12]
 800cb10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb14:	81a3      	strh	r3, [r4, #12]
 800cb16:	2300      	movs	r3, #0
 800cb18:	6063      	str	r3, [r4, #4]
 800cb1a:	6923      	ldr	r3, [r4, #16]
 800cb1c:	6023      	str	r3, [r4, #0]
 800cb1e:	89a3      	ldrh	r3, [r4, #12]
 800cb20:	f043 0308 	orr.w	r3, r3, #8
 800cb24:	81a3      	strh	r3, [r4, #12]
 800cb26:	6923      	ldr	r3, [r4, #16]
 800cb28:	b94b      	cbnz	r3, 800cb3e <__swsetup_r+0x9a>
 800cb2a:	89a3      	ldrh	r3, [r4, #12]
 800cb2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb34:	d003      	beq.n	800cb3e <__swsetup_r+0x9a>
 800cb36:	4621      	mov	r1, r4
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f000 fa09 	bl	800cf50 <__smakebuf_r>
 800cb3e:	89a0      	ldrh	r0, [r4, #12]
 800cb40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb44:	f010 0301 	ands.w	r3, r0, #1
 800cb48:	d00a      	beq.n	800cb60 <__swsetup_r+0xbc>
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	60a3      	str	r3, [r4, #8]
 800cb4e:	6963      	ldr	r3, [r4, #20]
 800cb50:	425b      	negs	r3, r3
 800cb52:	61a3      	str	r3, [r4, #24]
 800cb54:	6923      	ldr	r3, [r4, #16]
 800cb56:	b943      	cbnz	r3, 800cb6a <__swsetup_r+0xc6>
 800cb58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb5c:	d1ba      	bne.n	800cad4 <__swsetup_r+0x30>
 800cb5e:	bd70      	pop	{r4, r5, r6, pc}
 800cb60:	0781      	lsls	r1, r0, #30
 800cb62:	bf58      	it	pl
 800cb64:	6963      	ldrpl	r3, [r4, #20]
 800cb66:	60a3      	str	r3, [r4, #8]
 800cb68:	e7f4      	b.n	800cb54 <__swsetup_r+0xb0>
 800cb6a:	2000      	movs	r0, #0
 800cb6c:	e7f7      	b.n	800cb5e <__swsetup_r+0xba>
 800cb6e:	bf00      	nop
 800cb70:	24000038 	.word	0x24000038
 800cb74:	0800d634 	.word	0x0800d634
 800cb78:	0800d654 	.word	0x0800d654
 800cb7c:	0800d614 	.word	0x0800d614

0800cb80 <abort>:
 800cb80:	b508      	push	{r3, lr}
 800cb82:	2006      	movs	r0, #6
 800cb84:	f000 faa2 	bl	800d0cc <raise>
 800cb88:	2001      	movs	r0, #1
 800cb8a:	f7f4 fd7f 	bl	800168c <_exit>
	...

0800cb90 <__sflush_r>:
 800cb90:	898a      	ldrh	r2, [r1, #12]
 800cb92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb96:	4605      	mov	r5, r0
 800cb98:	0710      	lsls	r0, r2, #28
 800cb9a:	460c      	mov	r4, r1
 800cb9c:	d458      	bmi.n	800cc50 <__sflush_r+0xc0>
 800cb9e:	684b      	ldr	r3, [r1, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	dc05      	bgt.n	800cbb0 <__sflush_r+0x20>
 800cba4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	dc02      	bgt.n	800cbb0 <__sflush_r+0x20>
 800cbaa:	2000      	movs	r0, #0
 800cbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbb2:	2e00      	cmp	r6, #0
 800cbb4:	d0f9      	beq.n	800cbaa <__sflush_r+0x1a>
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cbbc:	682f      	ldr	r7, [r5, #0]
 800cbbe:	602b      	str	r3, [r5, #0]
 800cbc0:	d032      	beq.n	800cc28 <__sflush_r+0x98>
 800cbc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cbc4:	89a3      	ldrh	r3, [r4, #12]
 800cbc6:	075a      	lsls	r2, r3, #29
 800cbc8:	d505      	bpl.n	800cbd6 <__sflush_r+0x46>
 800cbca:	6863      	ldr	r3, [r4, #4]
 800cbcc:	1ac0      	subs	r0, r0, r3
 800cbce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cbd0:	b10b      	cbz	r3, 800cbd6 <__sflush_r+0x46>
 800cbd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cbd4:	1ac0      	subs	r0, r0, r3
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	4602      	mov	r2, r0
 800cbda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbdc:	6a21      	ldr	r1, [r4, #32]
 800cbde:	4628      	mov	r0, r5
 800cbe0:	47b0      	blx	r6
 800cbe2:	1c43      	adds	r3, r0, #1
 800cbe4:	89a3      	ldrh	r3, [r4, #12]
 800cbe6:	d106      	bne.n	800cbf6 <__sflush_r+0x66>
 800cbe8:	6829      	ldr	r1, [r5, #0]
 800cbea:	291d      	cmp	r1, #29
 800cbec:	d82c      	bhi.n	800cc48 <__sflush_r+0xb8>
 800cbee:	4a2a      	ldr	r2, [pc, #168]	; (800cc98 <__sflush_r+0x108>)
 800cbf0:	40ca      	lsrs	r2, r1
 800cbf2:	07d6      	lsls	r6, r2, #31
 800cbf4:	d528      	bpl.n	800cc48 <__sflush_r+0xb8>
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	6062      	str	r2, [r4, #4]
 800cbfa:	04d9      	lsls	r1, r3, #19
 800cbfc:	6922      	ldr	r2, [r4, #16]
 800cbfe:	6022      	str	r2, [r4, #0]
 800cc00:	d504      	bpl.n	800cc0c <__sflush_r+0x7c>
 800cc02:	1c42      	adds	r2, r0, #1
 800cc04:	d101      	bne.n	800cc0a <__sflush_r+0x7a>
 800cc06:	682b      	ldr	r3, [r5, #0]
 800cc08:	b903      	cbnz	r3, 800cc0c <__sflush_r+0x7c>
 800cc0a:	6560      	str	r0, [r4, #84]	; 0x54
 800cc0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc0e:	602f      	str	r7, [r5, #0]
 800cc10:	2900      	cmp	r1, #0
 800cc12:	d0ca      	beq.n	800cbaa <__sflush_r+0x1a>
 800cc14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc18:	4299      	cmp	r1, r3
 800cc1a:	d002      	beq.n	800cc22 <__sflush_r+0x92>
 800cc1c:	4628      	mov	r0, r5
 800cc1e:	f7ff f9b5 	bl	800bf8c <_free_r>
 800cc22:	2000      	movs	r0, #0
 800cc24:	6360      	str	r0, [r4, #52]	; 0x34
 800cc26:	e7c1      	b.n	800cbac <__sflush_r+0x1c>
 800cc28:	6a21      	ldr	r1, [r4, #32]
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	4628      	mov	r0, r5
 800cc2e:	47b0      	blx	r6
 800cc30:	1c41      	adds	r1, r0, #1
 800cc32:	d1c7      	bne.n	800cbc4 <__sflush_r+0x34>
 800cc34:	682b      	ldr	r3, [r5, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d0c4      	beq.n	800cbc4 <__sflush_r+0x34>
 800cc3a:	2b1d      	cmp	r3, #29
 800cc3c:	d001      	beq.n	800cc42 <__sflush_r+0xb2>
 800cc3e:	2b16      	cmp	r3, #22
 800cc40:	d101      	bne.n	800cc46 <__sflush_r+0xb6>
 800cc42:	602f      	str	r7, [r5, #0]
 800cc44:	e7b1      	b.n	800cbaa <__sflush_r+0x1a>
 800cc46:	89a3      	ldrh	r3, [r4, #12]
 800cc48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc4c:	81a3      	strh	r3, [r4, #12]
 800cc4e:	e7ad      	b.n	800cbac <__sflush_r+0x1c>
 800cc50:	690f      	ldr	r7, [r1, #16]
 800cc52:	2f00      	cmp	r7, #0
 800cc54:	d0a9      	beq.n	800cbaa <__sflush_r+0x1a>
 800cc56:	0793      	lsls	r3, r2, #30
 800cc58:	680e      	ldr	r6, [r1, #0]
 800cc5a:	bf08      	it	eq
 800cc5c:	694b      	ldreq	r3, [r1, #20]
 800cc5e:	600f      	str	r7, [r1, #0]
 800cc60:	bf18      	it	ne
 800cc62:	2300      	movne	r3, #0
 800cc64:	eba6 0807 	sub.w	r8, r6, r7
 800cc68:	608b      	str	r3, [r1, #8]
 800cc6a:	f1b8 0f00 	cmp.w	r8, #0
 800cc6e:	dd9c      	ble.n	800cbaa <__sflush_r+0x1a>
 800cc70:	6a21      	ldr	r1, [r4, #32]
 800cc72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc74:	4643      	mov	r3, r8
 800cc76:	463a      	mov	r2, r7
 800cc78:	4628      	mov	r0, r5
 800cc7a:	47b0      	blx	r6
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	dc06      	bgt.n	800cc8e <__sflush_r+0xfe>
 800cc80:	89a3      	ldrh	r3, [r4, #12]
 800cc82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc86:	81a3      	strh	r3, [r4, #12]
 800cc88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc8c:	e78e      	b.n	800cbac <__sflush_r+0x1c>
 800cc8e:	4407      	add	r7, r0
 800cc90:	eba8 0800 	sub.w	r8, r8, r0
 800cc94:	e7e9      	b.n	800cc6a <__sflush_r+0xda>
 800cc96:	bf00      	nop
 800cc98:	20400001 	.word	0x20400001

0800cc9c <_fflush_r>:
 800cc9c:	b538      	push	{r3, r4, r5, lr}
 800cc9e:	690b      	ldr	r3, [r1, #16]
 800cca0:	4605      	mov	r5, r0
 800cca2:	460c      	mov	r4, r1
 800cca4:	b913      	cbnz	r3, 800ccac <_fflush_r+0x10>
 800cca6:	2500      	movs	r5, #0
 800cca8:	4628      	mov	r0, r5
 800ccaa:	bd38      	pop	{r3, r4, r5, pc}
 800ccac:	b118      	cbz	r0, 800ccb6 <_fflush_r+0x1a>
 800ccae:	6983      	ldr	r3, [r0, #24]
 800ccb0:	b90b      	cbnz	r3, 800ccb6 <_fflush_r+0x1a>
 800ccb2:	f000 f887 	bl	800cdc4 <__sinit>
 800ccb6:	4b14      	ldr	r3, [pc, #80]	; (800cd08 <_fflush_r+0x6c>)
 800ccb8:	429c      	cmp	r4, r3
 800ccba:	d11b      	bne.n	800ccf4 <_fflush_r+0x58>
 800ccbc:	686c      	ldr	r4, [r5, #4]
 800ccbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d0ef      	beq.n	800cca6 <_fflush_r+0xa>
 800ccc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ccc8:	07d0      	lsls	r0, r2, #31
 800ccca:	d404      	bmi.n	800ccd6 <_fflush_r+0x3a>
 800cccc:	0599      	lsls	r1, r3, #22
 800ccce:	d402      	bmi.n	800ccd6 <_fflush_r+0x3a>
 800ccd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccd2:	f000 f915 	bl	800cf00 <__retarget_lock_acquire_recursive>
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	4621      	mov	r1, r4
 800ccda:	f7ff ff59 	bl	800cb90 <__sflush_r>
 800ccde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cce0:	07da      	lsls	r2, r3, #31
 800cce2:	4605      	mov	r5, r0
 800cce4:	d4e0      	bmi.n	800cca8 <_fflush_r+0xc>
 800cce6:	89a3      	ldrh	r3, [r4, #12]
 800cce8:	059b      	lsls	r3, r3, #22
 800ccea:	d4dd      	bmi.n	800cca8 <_fflush_r+0xc>
 800ccec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccee:	f000 f908 	bl	800cf02 <__retarget_lock_release_recursive>
 800ccf2:	e7d9      	b.n	800cca8 <_fflush_r+0xc>
 800ccf4:	4b05      	ldr	r3, [pc, #20]	; (800cd0c <_fflush_r+0x70>)
 800ccf6:	429c      	cmp	r4, r3
 800ccf8:	d101      	bne.n	800ccfe <_fflush_r+0x62>
 800ccfa:	68ac      	ldr	r4, [r5, #8]
 800ccfc:	e7df      	b.n	800ccbe <_fflush_r+0x22>
 800ccfe:	4b04      	ldr	r3, [pc, #16]	; (800cd10 <_fflush_r+0x74>)
 800cd00:	429c      	cmp	r4, r3
 800cd02:	bf08      	it	eq
 800cd04:	68ec      	ldreq	r4, [r5, #12]
 800cd06:	e7da      	b.n	800ccbe <_fflush_r+0x22>
 800cd08:	0800d634 	.word	0x0800d634
 800cd0c:	0800d654 	.word	0x0800d654
 800cd10:	0800d614 	.word	0x0800d614

0800cd14 <std>:
 800cd14:	2300      	movs	r3, #0
 800cd16:	b510      	push	{r4, lr}
 800cd18:	4604      	mov	r4, r0
 800cd1a:	e9c0 3300 	strd	r3, r3, [r0]
 800cd1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd22:	6083      	str	r3, [r0, #8]
 800cd24:	8181      	strh	r1, [r0, #12]
 800cd26:	6643      	str	r3, [r0, #100]	; 0x64
 800cd28:	81c2      	strh	r2, [r0, #14]
 800cd2a:	6183      	str	r3, [r0, #24]
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	2208      	movs	r2, #8
 800cd30:	305c      	adds	r0, #92	; 0x5c
 800cd32:	f7ff f81f 	bl	800bd74 <memset>
 800cd36:	4b05      	ldr	r3, [pc, #20]	; (800cd4c <std+0x38>)
 800cd38:	6263      	str	r3, [r4, #36]	; 0x24
 800cd3a:	4b05      	ldr	r3, [pc, #20]	; (800cd50 <std+0x3c>)
 800cd3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd3e:	4b05      	ldr	r3, [pc, #20]	; (800cd54 <std+0x40>)
 800cd40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd42:	4b05      	ldr	r3, [pc, #20]	; (800cd58 <std+0x44>)
 800cd44:	6224      	str	r4, [r4, #32]
 800cd46:	6323      	str	r3, [r4, #48]	; 0x30
 800cd48:	bd10      	pop	{r4, pc}
 800cd4a:	bf00      	nop
 800cd4c:	0800d105 	.word	0x0800d105
 800cd50:	0800d127 	.word	0x0800d127
 800cd54:	0800d15f 	.word	0x0800d15f
 800cd58:	0800d183 	.word	0x0800d183

0800cd5c <_cleanup_r>:
 800cd5c:	4901      	ldr	r1, [pc, #4]	; (800cd64 <_cleanup_r+0x8>)
 800cd5e:	f000 b8af 	b.w	800cec0 <_fwalk_reent>
 800cd62:	bf00      	nop
 800cd64:	0800cc9d 	.word	0x0800cc9d

0800cd68 <__sfmoreglue>:
 800cd68:	b570      	push	{r4, r5, r6, lr}
 800cd6a:	2268      	movs	r2, #104	; 0x68
 800cd6c:	1e4d      	subs	r5, r1, #1
 800cd6e:	4355      	muls	r5, r2
 800cd70:	460e      	mov	r6, r1
 800cd72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cd76:	f7ff f975 	bl	800c064 <_malloc_r>
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	b140      	cbz	r0, 800cd90 <__sfmoreglue+0x28>
 800cd7e:	2100      	movs	r1, #0
 800cd80:	e9c0 1600 	strd	r1, r6, [r0]
 800cd84:	300c      	adds	r0, #12
 800cd86:	60a0      	str	r0, [r4, #8]
 800cd88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cd8c:	f7fe fff2 	bl	800bd74 <memset>
 800cd90:	4620      	mov	r0, r4
 800cd92:	bd70      	pop	{r4, r5, r6, pc}

0800cd94 <__sfp_lock_acquire>:
 800cd94:	4801      	ldr	r0, [pc, #4]	; (800cd9c <__sfp_lock_acquire+0x8>)
 800cd96:	f000 b8b3 	b.w	800cf00 <__retarget_lock_acquire_recursive>
 800cd9a:	bf00      	nop
 800cd9c:	240007c1 	.word	0x240007c1

0800cda0 <__sfp_lock_release>:
 800cda0:	4801      	ldr	r0, [pc, #4]	; (800cda8 <__sfp_lock_release+0x8>)
 800cda2:	f000 b8ae 	b.w	800cf02 <__retarget_lock_release_recursive>
 800cda6:	bf00      	nop
 800cda8:	240007c1 	.word	0x240007c1

0800cdac <__sinit_lock_acquire>:
 800cdac:	4801      	ldr	r0, [pc, #4]	; (800cdb4 <__sinit_lock_acquire+0x8>)
 800cdae:	f000 b8a7 	b.w	800cf00 <__retarget_lock_acquire_recursive>
 800cdb2:	bf00      	nop
 800cdb4:	240007c2 	.word	0x240007c2

0800cdb8 <__sinit_lock_release>:
 800cdb8:	4801      	ldr	r0, [pc, #4]	; (800cdc0 <__sinit_lock_release+0x8>)
 800cdba:	f000 b8a2 	b.w	800cf02 <__retarget_lock_release_recursive>
 800cdbe:	bf00      	nop
 800cdc0:	240007c2 	.word	0x240007c2

0800cdc4 <__sinit>:
 800cdc4:	b510      	push	{r4, lr}
 800cdc6:	4604      	mov	r4, r0
 800cdc8:	f7ff fff0 	bl	800cdac <__sinit_lock_acquire>
 800cdcc:	69a3      	ldr	r3, [r4, #24]
 800cdce:	b11b      	cbz	r3, 800cdd8 <__sinit+0x14>
 800cdd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdd4:	f7ff bff0 	b.w	800cdb8 <__sinit_lock_release>
 800cdd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cddc:	6523      	str	r3, [r4, #80]	; 0x50
 800cdde:	4b13      	ldr	r3, [pc, #76]	; (800ce2c <__sinit+0x68>)
 800cde0:	4a13      	ldr	r2, [pc, #76]	; (800ce30 <__sinit+0x6c>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	62a2      	str	r2, [r4, #40]	; 0x28
 800cde6:	42a3      	cmp	r3, r4
 800cde8:	bf04      	itt	eq
 800cdea:	2301      	moveq	r3, #1
 800cdec:	61a3      	streq	r3, [r4, #24]
 800cdee:	4620      	mov	r0, r4
 800cdf0:	f000 f820 	bl	800ce34 <__sfp>
 800cdf4:	6060      	str	r0, [r4, #4]
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	f000 f81c 	bl	800ce34 <__sfp>
 800cdfc:	60a0      	str	r0, [r4, #8]
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f000 f818 	bl	800ce34 <__sfp>
 800ce04:	2200      	movs	r2, #0
 800ce06:	60e0      	str	r0, [r4, #12]
 800ce08:	2104      	movs	r1, #4
 800ce0a:	6860      	ldr	r0, [r4, #4]
 800ce0c:	f7ff ff82 	bl	800cd14 <std>
 800ce10:	68a0      	ldr	r0, [r4, #8]
 800ce12:	2201      	movs	r2, #1
 800ce14:	2109      	movs	r1, #9
 800ce16:	f7ff ff7d 	bl	800cd14 <std>
 800ce1a:	68e0      	ldr	r0, [r4, #12]
 800ce1c:	2202      	movs	r2, #2
 800ce1e:	2112      	movs	r1, #18
 800ce20:	f7ff ff78 	bl	800cd14 <std>
 800ce24:	2301      	movs	r3, #1
 800ce26:	61a3      	str	r3, [r4, #24]
 800ce28:	e7d2      	b.n	800cdd0 <__sinit+0xc>
 800ce2a:	bf00      	nop
 800ce2c:	0800d52c 	.word	0x0800d52c
 800ce30:	0800cd5d 	.word	0x0800cd5d

0800ce34 <__sfp>:
 800ce34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce36:	4607      	mov	r7, r0
 800ce38:	f7ff ffac 	bl	800cd94 <__sfp_lock_acquire>
 800ce3c:	4b1e      	ldr	r3, [pc, #120]	; (800ceb8 <__sfp+0x84>)
 800ce3e:	681e      	ldr	r6, [r3, #0]
 800ce40:	69b3      	ldr	r3, [r6, #24]
 800ce42:	b913      	cbnz	r3, 800ce4a <__sfp+0x16>
 800ce44:	4630      	mov	r0, r6
 800ce46:	f7ff ffbd 	bl	800cdc4 <__sinit>
 800ce4a:	3648      	adds	r6, #72	; 0x48
 800ce4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ce50:	3b01      	subs	r3, #1
 800ce52:	d503      	bpl.n	800ce5c <__sfp+0x28>
 800ce54:	6833      	ldr	r3, [r6, #0]
 800ce56:	b30b      	cbz	r3, 800ce9c <__sfp+0x68>
 800ce58:	6836      	ldr	r6, [r6, #0]
 800ce5a:	e7f7      	b.n	800ce4c <__sfp+0x18>
 800ce5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ce60:	b9d5      	cbnz	r5, 800ce98 <__sfp+0x64>
 800ce62:	4b16      	ldr	r3, [pc, #88]	; (800cebc <__sfp+0x88>)
 800ce64:	60e3      	str	r3, [r4, #12]
 800ce66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ce6a:	6665      	str	r5, [r4, #100]	; 0x64
 800ce6c:	f000 f847 	bl	800cefe <__retarget_lock_init_recursive>
 800ce70:	f7ff ff96 	bl	800cda0 <__sfp_lock_release>
 800ce74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ce78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ce7c:	6025      	str	r5, [r4, #0]
 800ce7e:	61a5      	str	r5, [r4, #24]
 800ce80:	2208      	movs	r2, #8
 800ce82:	4629      	mov	r1, r5
 800ce84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ce88:	f7fe ff74 	bl	800bd74 <memset>
 800ce8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ce90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ce94:	4620      	mov	r0, r4
 800ce96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce98:	3468      	adds	r4, #104	; 0x68
 800ce9a:	e7d9      	b.n	800ce50 <__sfp+0x1c>
 800ce9c:	2104      	movs	r1, #4
 800ce9e:	4638      	mov	r0, r7
 800cea0:	f7ff ff62 	bl	800cd68 <__sfmoreglue>
 800cea4:	4604      	mov	r4, r0
 800cea6:	6030      	str	r0, [r6, #0]
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d1d5      	bne.n	800ce58 <__sfp+0x24>
 800ceac:	f7ff ff78 	bl	800cda0 <__sfp_lock_release>
 800ceb0:	230c      	movs	r3, #12
 800ceb2:	603b      	str	r3, [r7, #0]
 800ceb4:	e7ee      	b.n	800ce94 <__sfp+0x60>
 800ceb6:	bf00      	nop
 800ceb8:	0800d52c 	.word	0x0800d52c
 800cebc:	ffff0001 	.word	0xffff0001

0800cec0 <_fwalk_reent>:
 800cec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cec4:	4606      	mov	r6, r0
 800cec6:	4688      	mov	r8, r1
 800cec8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cecc:	2700      	movs	r7, #0
 800cece:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ced2:	f1b9 0901 	subs.w	r9, r9, #1
 800ced6:	d505      	bpl.n	800cee4 <_fwalk_reent+0x24>
 800ced8:	6824      	ldr	r4, [r4, #0]
 800ceda:	2c00      	cmp	r4, #0
 800cedc:	d1f7      	bne.n	800cece <_fwalk_reent+0xe>
 800cede:	4638      	mov	r0, r7
 800cee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cee4:	89ab      	ldrh	r3, [r5, #12]
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d907      	bls.n	800cefa <_fwalk_reent+0x3a>
 800ceea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ceee:	3301      	adds	r3, #1
 800cef0:	d003      	beq.n	800cefa <_fwalk_reent+0x3a>
 800cef2:	4629      	mov	r1, r5
 800cef4:	4630      	mov	r0, r6
 800cef6:	47c0      	blx	r8
 800cef8:	4307      	orrs	r7, r0
 800cefa:	3568      	adds	r5, #104	; 0x68
 800cefc:	e7e9      	b.n	800ced2 <_fwalk_reent+0x12>

0800cefe <__retarget_lock_init_recursive>:
 800cefe:	4770      	bx	lr

0800cf00 <__retarget_lock_acquire_recursive>:
 800cf00:	4770      	bx	lr

0800cf02 <__retarget_lock_release_recursive>:
 800cf02:	4770      	bx	lr

0800cf04 <__swhatbuf_r>:
 800cf04:	b570      	push	{r4, r5, r6, lr}
 800cf06:	460e      	mov	r6, r1
 800cf08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf0c:	2900      	cmp	r1, #0
 800cf0e:	b096      	sub	sp, #88	; 0x58
 800cf10:	4614      	mov	r4, r2
 800cf12:	461d      	mov	r5, r3
 800cf14:	da08      	bge.n	800cf28 <__swhatbuf_r+0x24>
 800cf16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	602a      	str	r2, [r5, #0]
 800cf1e:	061a      	lsls	r2, r3, #24
 800cf20:	d410      	bmi.n	800cf44 <__swhatbuf_r+0x40>
 800cf22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf26:	e00e      	b.n	800cf46 <__swhatbuf_r+0x42>
 800cf28:	466a      	mov	r2, sp
 800cf2a:	f000 f951 	bl	800d1d0 <_fstat_r>
 800cf2e:	2800      	cmp	r0, #0
 800cf30:	dbf1      	blt.n	800cf16 <__swhatbuf_r+0x12>
 800cf32:	9a01      	ldr	r2, [sp, #4]
 800cf34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cf38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cf3c:	425a      	negs	r2, r3
 800cf3e:	415a      	adcs	r2, r3
 800cf40:	602a      	str	r2, [r5, #0]
 800cf42:	e7ee      	b.n	800cf22 <__swhatbuf_r+0x1e>
 800cf44:	2340      	movs	r3, #64	; 0x40
 800cf46:	2000      	movs	r0, #0
 800cf48:	6023      	str	r3, [r4, #0]
 800cf4a:	b016      	add	sp, #88	; 0x58
 800cf4c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cf50 <__smakebuf_r>:
 800cf50:	898b      	ldrh	r3, [r1, #12]
 800cf52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf54:	079d      	lsls	r5, r3, #30
 800cf56:	4606      	mov	r6, r0
 800cf58:	460c      	mov	r4, r1
 800cf5a:	d507      	bpl.n	800cf6c <__smakebuf_r+0x1c>
 800cf5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf60:	6023      	str	r3, [r4, #0]
 800cf62:	6123      	str	r3, [r4, #16]
 800cf64:	2301      	movs	r3, #1
 800cf66:	6163      	str	r3, [r4, #20]
 800cf68:	b002      	add	sp, #8
 800cf6a:	bd70      	pop	{r4, r5, r6, pc}
 800cf6c:	ab01      	add	r3, sp, #4
 800cf6e:	466a      	mov	r2, sp
 800cf70:	f7ff ffc8 	bl	800cf04 <__swhatbuf_r>
 800cf74:	9900      	ldr	r1, [sp, #0]
 800cf76:	4605      	mov	r5, r0
 800cf78:	4630      	mov	r0, r6
 800cf7a:	f7ff f873 	bl	800c064 <_malloc_r>
 800cf7e:	b948      	cbnz	r0, 800cf94 <__smakebuf_r+0x44>
 800cf80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf84:	059a      	lsls	r2, r3, #22
 800cf86:	d4ef      	bmi.n	800cf68 <__smakebuf_r+0x18>
 800cf88:	f023 0303 	bic.w	r3, r3, #3
 800cf8c:	f043 0302 	orr.w	r3, r3, #2
 800cf90:	81a3      	strh	r3, [r4, #12]
 800cf92:	e7e3      	b.n	800cf5c <__smakebuf_r+0xc>
 800cf94:	4b0d      	ldr	r3, [pc, #52]	; (800cfcc <__smakebuf_r+0x7c>)
 800cf96:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf98:	89a3      	ldrh	r3, [r4, #12]
 800cf9a:	6020      	str	r0, [r4, #0]
 800cf9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfa0:	81a3      	strh	r3, [r4, #12]
 800cfa2:	9b00      	ldr	r3, [sp, #0]
 800cfa4:	6163      	str	r3, [r4, #20]
 800cfa6:	9b01      	ldr	r3, [sp, #4]
 800cfa8:	6120      	str	r0, [r4, #16]
 800cfaa:	b15b      	cbz	r3, 800cfc4 <__smakebuf_r+0x74>
 800cfac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	f000 f91f 	bl	800d1f4 <_isatty_r>
 800cfb6:	b128      	cbz	r0, 800cfc4 <__smakebuf_r+0x74>
 800cfb8:	89a3      	ldrh	r3, [r4, #12]
 800cfba:	f023 0303 	bic.w	r3, r3, #3
 800cfbe:	f043 0301 	orr.w	r3, r3, #1
 800cfc2:	81a3      	strh	r3, [r4, #12]
 800cfc4:	89a0      	ldrh	r0, [r4, #12]
 800cfc6:	4305      	orrs	r5, r0
 800cfc8:	81a5      	strh	r5, [r4, #12]
 800cfca:	e7cd      	b.n	800cf68 <__smakebuf_r+0x18>
 800cfcc:	0800cd5d 	.word	0x0800cd5d

0800cfd0 <memmove>:
 800cfd0:	4288      	cmp	r0, r1
 800cfd2:	b510      	push	{r4, lr}
 800cfd4:	eb01 0402 	add.w	r4, r1, r2
 800cfd8:	d902      	bls.n	800cfe0 <memmove+0x10>
 800cfda:	4284      	cmp	r4, r0
 800cfdc:	4623      	mov	r3, r4
 800cfde:	d807      	bhi.n	800cff0 <memmove+0x20>
 800cfe0:	1e43      	subs	r3, r0, #1
 800cfe2:	42a1      	cmp	r1, r4
 800cfe4:	d008      	beq.n	800cff8 <memmove+0x28>
 800cfe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfee:	e7f8      	b.n	800cfe2 <memmove+0x12>
 800cff0:	4402      	add	r2, r0
 800cff2:	4601      	mov	r1, r0
 800cff4:	428a      	cmp	r2, r1
 800cff6:	d100      	bne.n	800cffa <memmove+0x2a>
 800cff8:	bd10      	pop	{r4, pc}
 800cffa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cffe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d002:	e7f7      	b.n	800cff4 <memmove+0x24>

0800d004 <__malloc_lock>:
 800d004:	4801      	ldr	r0, [pc, #4]	; (800d00c <__malloc_lock+0x8>)
 800d006:	f7ff bf7b 	b.w	800cf00 <__retarget_lock_acquire_recursive>
 800d00a:	bf00      	nop
 800d00c:	240007c0 	.word	0x240007c0

0800d010 <__malloc_unlock>:
 800d010:	4801      	ldr	r0, [pc, #4]	; (800d018 <__malloc_unlock+0x8>)
 800d012:	f7ff bf76 	b.w	800cf02 <__retarget_lock_release_recursive>
 800d016:	bf00      	nop
 800d018:	240007c0 	.word	0x240007c0

0800d01c <_realloc_r>:
 800d01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d020:	4680      	mov	r8, r0
 800d022:	4614      	mov	r4, r2
 800d024:	460e      	mov	r6, r1
 800d026:	b921      	cbnz	r1, 800d032 <_realloc_r+0x16>
 800d028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d02c:	4611      	mov	r1, r2
 800d02e:	f7ff b819 	b.w	800c064 <_malloc_r>
 800d032:	b92a      	cbnz	r2, 800d040 <_realloc_r+0x24>
 800d034:	f7fe ffaa 	bl	800bf8c <_free_r>
 800d038:	4625      	mov	r5, r4
 800d03a:	4628      	mov	r0, r5
 800d03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d040:	f000 f8fa 	bl	800d238 <_malloc_usable_size_r>
 800d044:	4284      	cmp	r4, r0
 800d046:	4607      	mov	r7, r0
 800d048:	d802      	bhi.n	800d050 <_realloc_r+0x34>
 800d04a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d04e:	d812      	bhi.n	800d076 <_realloc_r+0x5a>
 800d050:	4621      	mov	r1, r4
 800d052:	4640      	mov	r0, r8
 800d054:	f7ff f806 	bl	800c064 <_malloc_r>
 800d058:	4605      	mov	r5, r0
 800d05a:	2800      	cmp	r0, #0
 800d05c:	d0ed      	beq.n	800d03a <_realloc_r+0x1e>
 800d05e:	42bc      	cmp	r4, r7
 800d060:	4622      	mov	r2, r4
 800d062:	4631      	mov	r1, r6
 800d064:	bf28      	it	cs
 800d066:	463a      	movcs	r2, r7
 800d068:	f7fe fe76 	bl	800bd58 <memcpy>
 800d06c:	4631      	mov	r1, r6
 800d06e:	4640      	mov	r0, r8
 800d070:	f7fe ff8c 	bl	800bf8c <_free_r>
 800d074:	e7e1      	b.n	800d03a <_realloc_r+0x1e>
 800d076:	4635      	mov	r5, r6
 800d078:	e7df      	b.n	800d03a <_realloc_r+0x1e>

0800d07a <_raise_r>:
 800d07a:	291f      	cmp	r1, #31
 800d07c:	b538      	push	{r3, r4, r5, lr}
 800d07e:	4604      	mov	r4, r0
 800d080:	460d      	mov	r5, r1
 800d082:	d904      	bls.n	800d08e <_raise_r+0x14>
 800d084:	2316      	movs	r3, #22
 800d086:	6003      	str	r3, [r0, #0]
 800d088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d08c:	bd38      	pop	{r3, r4, r5, pc}
 800d08e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d090:	b112      	cbz	r2, 800d098 <_raise_r+0x1e>
 800d092:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d096:	b94b      	cbnz	r3, 800d0ac <_raise_r+0x32>
 800d098:	4620      	mov	r0, r4
 800d09a:	f000 f831 	bl	800d100 <_getpid_r>
 800d09e:	462a      	mov	r2, r5
 800d0a0:	4601      	mov	r1, r0
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0a8:	f000 b818 	b.w	800d0dc <_kill_r>
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d00a      	beq.n	800d0c6 <_raise_r+0x4c>
 800d0b0:	1c59      	adds	r1, r3, #1
 800d0b2:	d103      	bne.n	800d0bc <_raise_r+0x42>
 800d0b4:	2316      	movs	r3, #22
 800d0b6:	6003      	str	r3, [r0, #0]
 800d0b8:	2001      	movs	r0, #1
 800d0ba:	e7e7      	b.n	800d08c <_raise_r+0x12>
 800d0bc:	2400      	movs	r4, #0
 800d0be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0c2:	4628      	mov	r0, r5
 800d0c4:	4798      	blx	r3
 800d0c6:	2000      	movs	r0, #0
 800d0c8:	e7e0      	b.n	800d08c <_raise_r+0x12>
	...

0800d0cc <raise>:
 800d0cc:	4b02      	ldr	r3, [pc, #8]	; (800d0d8 <raise+0xc>)
 800d0ce:	4601      	mov	r1, r0
 800d0d0:	6818      	ldr	r0, [r3, #0]
 800d0d2:	f7ff bfd2 	b.w	800d07a <_raise_r>
 800d0d6:	bf00      	nop
 800d0d8:	24000038 	.word	0x24000038

0800d0dc <_kill_r>:
 800d0dc:	b538      	push	{r3, r4, r5, lr}
 800d0de:	4d07      	ldr	r5, [pc, #28]	; (800d0fc <_kill_r+0x20>)
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	4608      	mov	r0, r1
 800d0e6:	4611      	mov	r1, r2
 800d0e8:	602b      	str	r3, [r5, #0]
 800d0ea:	f7f4 fabf 	bl	800166c <_kill>
 800d0ee:	1c43      	adds	r3, r0, #1
 800d0f0:	d102      	bne.n	800d0f8 <_kill_r+0x1c>
 800d0f2:	682b      	ldr	r3, [r5, #0]
 800d0f4:	b103      	cbz	r3, 800d0f8 <_kill_r+0x1c>
 800d0f6:	6023      	str	r3, [r4, #0]
 800d0f8:	bd38      	pop	{r3, r4, r5, pc}
 800d0fa:	bf00      	nop
 800d0fc:	240007bc 	.word	0x240007bc

0800d100 <_getpid_r>:
 800d100:	f7f4 baac 	b.w	800165c <_getpid>

0800d104 <__sread>:
 800d104:	b510      	push	{r4, lr}
 800d106:	460c      	mov	r4, r1
 800d108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d10c:	f000 f89c 	bl	800d248 <_read_r>
 800d110:	2800      	cmp	r0, #0
 800d112:	bfab      	itete	ge
 800d114:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d116:	89a3      	ldrhlt	r3, [r4, #12]
 800d118:	181b      	addge	r3, r3, r0
 800d11a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d11e:	bfac      	ite	ge
 800d120:	6563      	strge	r3, [r4, #84]	; 0x54
 800d122:	81a3      	strhlt	r3, [r4, #12]
 800d124:	bd10      	pop	{r4, pc}

0800d126 <__swrite>:
 800d126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d12a:	461f      	mov	r7, r3
 800d12c:	898b      	ldrh	r3, [r1, #12]
 800d12e:	05db      	lsls	r3, r3, #23
 800d130:	4605      	mov	r5, r0
 800d132:	460c      	mov	r4, r1
 800d134:	4616      	mov	r6, r2
 800d136:	d505      	bpl.n	800d144 <__swrite+0x1e>
 800d138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d13c:	2302      	movs	r3, #2
 800d13e:	2200      	movs	r2, #0
 800d140:	f000 f868 	bl	800d214 <_lseek_r>
 800d144:	89a3      	ldrh	r3, [r4, #12]
 800d146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d14a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d14e:	81a3      	strh	r3, [r4, #12]
 800d150:	4632      	mov	r2, r6
 800d152:	463b      	mov	r3, r7
 800d154:	4628      	mov	r0, r5
 800d156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d15a:	f000 b817 	b.w	800d18c <_write_r>

0800d15e <__sseek>:
 800d15e:	b510      	push	{r4, lr}
 800d160:	460c      	mov	r4, r1
 800d162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d166:	f000 f855 	bl	800d214 <_lseek_r>
 800d16a:	1c43      	adds	r3, r0, #1
 800d16c:	89a3      	ldrh	r3, [r4, #12]
 800d16e:	bf15      	itete	ne
 800d170:	6560      	strne	r0, [r4, #84]	; 0x54
 800d172:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d176:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d17a:	81a3      	strheq	r3, [r4, #12]
 800d17c:	bf18      	it	ne
 800d17e:	81a3      	strhne	r3, [r4, #12]
 800d180:	bd10      	pop	{r4, pc}

0800d182 <__sclose>:
 800d182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d186:	f000 b813 	b.w	800d1b0 <_close_r>
	...

0800d18c <_write_r>:
 800d18c:	b538      	push	{r3, r4, r5, lr}
 800d18e:	4d07      	ldr	r5, [pc, #28]	; (800d1ac <_write_r+0x20>)
 800d190:	4604      	mov	r4, r0
 800d192:	4608      	mov	r0, r1
 800d194:	4611      	mov	r1, r2
 800d196:	2200      	movs	r2, #0
 800d198:	602a      	str	r2, [r5, #0]
 800d19a:	461a      	mov	r2, r3
 800d19c:	f7f4 fa9d 	bl	80016da <_write>
 800d1a0:	1c43      	adds	r3, r0, #1
 800d1a2:	d102      	bne.n	800d1aa <_write_r+0x1e>
 800d1a4:	682b      	ldr	r3, [r5, #0]
 800d1a6:	b103      	cbz	r3, 800d1aa <_write_r+0x1e>
 800d1a8:	6023      	str	r3, [r4, #0]
 800d1aa:	bd38      	pop	{r3, r4, r5, pc}
 800d1ac:	240007bc 	.word	0x240007bc

0800d1b0 <_close_r>:
 800d1b0:	b538      	push	{r3, r4, r5, lr}
 800d1b2:	4d06      	ldr	r5, [pc, #24]	; (800d1cc <_close_r+0x1c>)
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	4604      	mov	r4, r0
 800d1b8:	4608      	mov	r0, r1
 800d1ba:	602b      	str	r3, [r5, #0]
 800d1bc:	f7f4 faa9 	bl	8001712 <_close>
 800d1c0:	1c43      	adds	r3, r0, #1
 800d1c2:	d102      	bne.n	800d1ca <_close_r+0x1a>
 800d1c4:	682b      	ldr	r3, [r5, #0]
 800d1c6:	b103      	cbz	r3, 800d1ca <_close_r+0x1a>
 800d1c8:	6023      	str	r3, [r4, #0]
 800d1ca:	bd38      	pop	{r3, r4, r5, pc}
 800d1cc:	240007bc 	.word	0x240007bc

0800d1d0 <_fstat_r>:
 800d1d0:	b538      	push	{r3, r4, r5, lr}
 800d1d2:	4d07      	ldr	r5, [pc, #28]	; (800d1f0 <_fstat_r+0x20>)
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	4604      	mov	r4, r0
 800d1d8:	4608      	mov	r0, r1
 800d1da:	4611      	mov	r1, r2
 800d1dc:	602b      	str	r3, [r5, #0]
 800d1de:	f7f4 faa4 	bl	800172a <_fstat>
 800d1e2:	1c43      	adds	r3, r0, #1
 800d1e4:	d102      	bne.n	800d1ec <_fstat_r+0x1c>
 800d1e6:	682b      	ldr	r3, [r5, #0]
 800d1e8:	b103      	cbz	r3, 800d1ec <_fstat_r+0x1c>
 800d1ea:	6023      	str	r3, [r4, #0]
 800d1ec:	bd38      	pop	{r3, r4, r5, pc}
 800d1ee:	bf00      	nop
 800d1f0:	240007bc 	.word	0x240007bc

0800d1f4 <_isatty_r>:
 800d1f4:	b538      	push	{r3, r4, r5, lr}
 800d1f6:	4d06      	ldr	r5, [pc, #24]	; (800d210 <_isatty_r+0x1c>)
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	4604      	mov	r4, r0
 800d1fc:	4608      	mov	r0, r1
 800d1fe:	602b      	str	r3, [r5, #0]
 800d200:	f7f4 faa3 	bl	800174a <_isatty>
 800d204:	1c43      	adds	r3, r0, #1
 800d206:	d102      	bne.n	800d20e <_isatty_r+0x1a>
 800d208:	682b      	ldr	r3, [r5, #0]
 800d20a:	b103      	cbz	r3, 800d20e <_isatty_r+0x1a>
 800d20c:	6023      	str	r3, [r4, #0]
 800d20e:	bd38      	pop	{r3, r4, r5, pc}
 800d210:	240007bc 	.word	0x240007bc

0800d214 <_lseek_r>:
 800d214:	b538      	push	{r3, r4, r5, lr}
 800d216:	4d07      	ldr	r5, [pc, #28]	; (800d234 <_lseek_r+0x20>)
 800d218:	4604      	mov	r4, r0
 800d21a:	4608      	mov	r0, r1
 800d21c:	4611      	mov	r1, r2
 800d21e:	2200      	movs	r2, #0
 800d220:	602a      	str	r2, [r5, #0]
 800d222:	461a      	mov	r2, r3
 800d224:	f7f4 fa9c 	bl	8001760 <_lseek>
 800d228:	1c43      	adds	r3, r0, #1
 800d22a:	d102      	bne.n	800d232 <_lseek_r+0x1e>
 800d22c:	682b      	ldr	r3, [r5, #0]
 800d22e:	b103      	cbz	r3, 800d232 <_lseek_r+0x1e>
 800d230:	6023      	str	r3, [r4, #0]
 800d232:	bd38      	pop	{r3, r4, r5, pc}
 800d234:	240007bc 	.word	0x240007bc

0800d238 <_malloc_usable_size_r>:
 800d238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d23c:	1f18      	subs	r0, r3, #4
 800d23e:	2b00      	cmp	r3, #0
 800d240:	bfbc      	itt	lt
 800d242:	580b      	ldrlt	r3, [r1, r0]
 800d244:	18c0      	addlt	r0, r0, r3
 800d246:	4770      	bx	lr

0800d248 <_read_r>:
 800d248:	b538      	push	{r3, r4, r5, lr}
 800d24a:	4d07      	ldr	r5, [pc, #28]	; (800d268 <_read_r+0x20>)
 800d24c:	4604      	mov	r4, r0
 800d24e:	4608      	mov	r0, r1
 800d250:	4611      	mov	r1, r2
 800d252:	2200      	movs	r2, #0
 800d254:	602a      	str	r2, [r5, #0]
 800d256:	461a      	mov	r2, r3
 800d258:	f7f4 fa22 	bl	80016a0 <_read>
 800d25c:	1c43      	adds	r3, r0, #1
 800d25e:	d102      	bne.n	800d266 <_read_r+0x1e>
 800d260:	682b      	ldr	r3, [r5, #0]
 800d262:	b103      	cbz	r3, 800d266 <_read_r+0x1e>
 800d264:	6023      	str	r3, [r4, #0]
 800d266:	bd38      	pop	{r3, r4, r5, pc}
 800d268:	240007bc 	.word	0x240007bc

0800d26c <_gettimeofday>:
 800d26c:	4b02      	ldr	r3, [pc, #8]	; (800d278 <_gettimeofday+0xc>)
 800d26e:	2258      	movs	r2, #88	; 0x58
 800d270:	601a      	str	r2, [r3, #0]
 800d272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d276:	4770      	bx	lr
 800d278:	240007bc 	.word	0x240007bc

0800d27c <_init>:
 800d27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d27e:	bf00      	nop
 800d280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d282:	bc08      	pop	{r3}
 800d284:	469e      	mov	lr, r3
 800d286:	4770      	bx	lr

0800d288 <_fini>:
 800d288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d28a:	bf00      	nop
 800d28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d28e:	bc08      	pop	{r3}
 800d290:	469e      	mov	lr, r3
 800d292:	4770      	bx	lr
