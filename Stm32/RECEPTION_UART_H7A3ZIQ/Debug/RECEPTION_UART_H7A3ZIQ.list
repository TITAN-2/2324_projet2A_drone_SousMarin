
RECEPTION_UART_H7A3ZIQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a25c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800a50c  0800a50c  0001a50c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a620  0800a620  0001a620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a628  0800a628  0001a628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a62c  0800a62c  0001a62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  24000000  0800a630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000061c  24000084  0800a6b4  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240006a0  0800a6b4  000206a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   000191aa  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002df7  00000000  00000000  0003925c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001198  00000000  00000000  0003c058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001060  00000000  00000000  0003d1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032222  00000000  00000000  0003e250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ab50  00000000  00000000  00070472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00140414  00000000  00000000  0008afc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001cb3d6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d04  00000000  00000000  001cb428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000084 	.word	0x24000084
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a4f4 	.word	0x0800a4f4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000088 	.word	0x24000088
 80002ec:	0800a4f4 	.word	0x0800a4f4

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <Thrust_Init>:
 *      Author: romingo
 */

#include "Process.h"

void Thrust_Init(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL);
 8000698:	4b85      	ldr	r3, [pc, #532]	; (80008b0 <Thrust_Init+0x21c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a84      	ldr	r2, [pc, #528]	; (80008b0 <Thrust_Init+0x21c>)
 800069e:	6852      	ldr	r2, [r2, #4]
 80006a0:	4611      	mov	r1, r2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f005 f9c4 	bl	8005a30 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL);
 80006a8:	4b82      	ldr	r3, [pc, #520]	; (80008b4 <Thrust_Init+0x220>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a81      	ldr	r2, [pc, #516]	; (80008b4 <Thrust_Init+0x220>)
 80006ae:	6852      	ldr	r2, [r2, #4]
 80006b0:	4611      	mov	r1, r2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 f9bc 	bl	8005a30 <HAL_TIM_PWM_Start>
	HAL_Delay(1000);
 80006b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006bc:	f001 fa12 	bl	8001ae4 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MIN_Thrust);
 80006c0:	4b7b      	ldr	r3, [pc, #492]	; (80008b0 <Thrust_Init+0x21c>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d105      	bne.n	80006d4 <Thrust_Init+0x40>
 80006c8:	4b79      	ldr	r3, [pc, #484]	; (80008b0 <Thrust_Init+0x21c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2264      	movs	r2, #100	; 0x64
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
 80006d2:	e02c      	b.n	800072e <Thrust_Init+0x9a>
 80006d4:	4b76      	ldr	r3, [pc, #472]	; (80008b0 <Thrust_Init+0x21c>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	2b04      	cmp	r3, #4
 80006da:	d105      	bne.n	80006e8 <Thrust_Init+0x54>
 80006dc:	4b74      	ldr	r3, [pc, #464]	; (80008b0 <Thrust_Init+0x21c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	2364      	movs	r3, #100	; 0x64
 80006e4:	6393      	str	r3, [r2, #56]	; 0x38
 80006e6:	e022      	b.n	800072e <Thrust_Init+0x9a>
 80006e8:	4b71      	ldr	r3, [pc, #452]	; (80008b0 <Thrust_Init+0x21c>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	2b08      	cmp	r3, #8
 80006ee:	d105      	bne.n	80006fc <Thrust_Init+0x68>
 80006f0:	4b6f      	ldr	r3, [pc, #444]	; (80008b0 <Thrust_Init+0x21c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006fa:	e018      	b.n	800072e <Thrust_Init+0x9a>
 80006fc:	4b6c      	ldr	r3, [pc, #432]	; (80008b0 <Thrust_Init+0x21c>)
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	2b0c      	cmp	r3, #12
 8000702:	d105      	bne.n	8000710 <Thrust_Init+0x7c>
 8000704:	4b6a      	ldr	r3, [pc, #424]	; (80008b0 <Thrust_Init+0x21c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	2364      	movs	r3, #100	; 0x64
 800070c:	6413      	str	r3, [r2, #64]	; 0x40
 800070e:	e00e      	b.n	800072e <Thrust_Init+0x9a>
 8000710:	4b67      	ldr	r3, [pc, #412]	; (80008b0 <Thrust_Init+0x21c>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	2b10      	cmp	r3, #16
 8000716:	d105      	bne.n	8000724 <Thrust_Init+0x90>
 8000718:	4b65      	ldr	r3, [pc, #404]	; (80008b0 <Thrust_Init+0x21c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	2364      	movs	r3, #100	; 0x64
 8000720:	6593      	str	r3, [r2, #88]	; 0x58
 8000722:	e004      	b.n	800072e <Thrust_Init+0x9a>
 8000724:	4b62      	ldr	r3, [pc, #392]	; (80008b0 <Thrust_Init+0x21c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MIN_Thrust);
 800072e:	4b61      	ldr	r3, [pc, #388]	; (80008b4 <Thrust_Init+0x220>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d105      	bne.n	8000742 <Thrust_Init+0xae>
 8000736:	4b5f      	ldr	r3, [pc, #380]	; (80008b4 <Thrust_Init+0x220>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2264      	movs	r2, #100	; 0x64
 800073e:	635a      	str	r2, [r3, #52]	; 0x34
 8000740:	e02c      	b.n	800079c <Thrust_Init+0x108>
 8000742:	4b5c      	ldr	r3, [pc, #368]	; (80008b4 <Thrust_Init+0x220>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	2b04      	cmp	r3, #4
 8000748:	d105      	bne.n	8000756 <Thrust_Init+0xc2>
 800074a:	4b5a      	ldr	r3, [pc, #360]	; (80008b4 <Thrust_Init+0x220>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	6393      	str	r3, [r2, #56]	; 0x38
 8000754:	e022      	b.n	800079c <Thrust_Init+0x108>
 8000756:	4b57      	ldr	r3, [pc, #348]	; (80008b4 <Thrust_Init+0x220>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	2b08      	cmp	r3, #8
 800075c:	d105      	bne.n	800076a <Thrust_Init+0xd6>
 800075e:	4b55      	ldr	r3, [pc, #340]	; (80008b4 <Thrust_Init+0x220>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000768:	e018      	b.n	800079c <Thrust_Init+0x108>
 800076a:	4b52      	ldr	r3, [pc, #328]	; (80008b4 <Thrust_Init+0x220>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	2b0c      	cmp	r3, #12
 8000770:	d105      	bne.n	800077e <Thrust_Init+0xea>
 8000772:	4b50      	ldr	r3, [pc, #320]	; (80008b4 <Thrust_Init+0x220>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	2364      	movs	r3, #100	; 0x64
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
 800077c:	e00e      	b.n	800079c <Thrust_Init+0x108>
 800077e:	4b4d      	ldr	r3, [pc, #308]	; (80008b4 <Thrust_Init+0x220>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	2b10      	cmp	r3, #16
 8000784:	d105      	bne.n	8000792 <Thrust_Init+0xfe>
 8000786:	4b4b      	ldr	r3, [pc, #300]	; (80008b4 <Thrust_Init+0x220>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	6593      	str	r3, [r2, #88]	; 0x58
 8000790:	e004      	b.n	800079c <Thrust_Init+0x108>
 8000792:	4b48      	ldr	r3, [pc, #288]	; (80008b4 <Thrust_Init+0x220>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	2364      	movs	r3, #100	; 0x64
 800079a:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(1000);
 800079c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a0:	f001 f9a0 	bl	8001ae4 <HAL_Delay>

	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MAX_Thrust);
 80007a4:	4b42      	ldr	r3, [pc, #264]	; (80008b0 <Thrust_Init+0x21c>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d105      	bne.n	80007b8 <Thrust_Init+0x124>
 80007ac:	4b40      	ldr	r3, [pc, #256]	; (80008b0 <Thrust_Init+0x21c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2232      	movs	r2, #50	; 0x32
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
 80007b6:	e02c      	b.n	8000812 <Thrust_Init+0x17e>
 80007b8:	4b3d      	ldr	r3, [pc, #244]	; (80008b0 <Thrust_Init+0x21c>)
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	2b04      	cmp	r3, #4
 80007be:	d105      	bne.n	80007cc <Thrust_Init+0x138>
 80007c0:	4b3b      	ldr	r3, [pc, #236]	; (80008b0 <Thrust_Init+0x21c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	2332      	movs	r3, #50	; 0x32
 80007c8:	6393      	str	r3, [r2, #56]	; 0x38
 80007ca:	e022      	b.n	8000812 <Thrust_Init+0x17e>
 80007cc:	4b38      	ldr	r3, [pc, #224]	; (80008b0 <Thrust_Init+0x21c>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	2b08      	cmp	r3, #8
 80007d2:	d105      	bne.n	80007e0 <Thrust_Init+0x14c>
 80007d4:	4b36      	ldr	r3, [pc, #216]	; (80008b0 <Thrust_Init+0x21c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	2332      	movs	r3, #50	; 0x32
 80007dc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80007de:	e018      	b.n	8000812 <Thrust_Init+0x17e>
 80007e0:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <Thrust_Init+0x21c>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	2b0c      	cmp	r3, #12
 80007e6:	d105      	bne.n	80007f4 <Thrust_Init+0x160>
 80007e8:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <Thrust_Init+0x21c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	2332      	movs	r3, #50	; 0x32
 80007f0:	6413      	str	r3, [r2, #64]	; 0x40
 80007f2:	e00e      	b.n	8000812 <Thrust_Init+0x17e>
 80007f4:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <Thrust_Init+0x21c>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	2b10      	cmp	r3, #16
 80007fa:	d105      	bne.n	8000808 <Thrust_Init+0x174>
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <Thrust_Init+0x21c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	2332      	movs	r3, #50	; 0x32
 8000804:	6593      	str	r3, [r2, #88]	; 0x58
 8000806:	e004      	b.n	8000812 <Thrust_Init+0x17e>
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <Thrust_Init+0x21c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	2332      	movs	r3, #50	; 0x32
 8000810:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MAX_Thrust);
 8000812:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <Thrust_Init+0x220>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d105      	bne.n	8000826 <Thrust_Init+0x192>
 800081a:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <Thrust_Init+0x220>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2232      	movs	r2, #50	; 0x32
 8000822:	635a      	str	r2, [r3, #52]	; 0x34
 8000824:	e02c      	b.n	8000880 <Thrust_Init+0x1ec>
 8000826:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <Thrust_Init+0x220>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b04      	cmp	r3, #4
 800082c:	d105      	bne.n	800083a <Thrust_Init+0x1a6>
 800082e:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <Thrust_Init+0x220>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	2332      	movs	r3, #50	; 0x32
 8000836:	6393      	str	r3, [r2, #56]	; 0x38
 8000838:	e022      	b.n	8000880 <Thrust_Init+0x1ec>
 800083a:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <Thrust_Init+0x220>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2b08      	cmp	r3, #8
 8000840:	d105      	bne.n	800084e <Thrust_Init+0x1ba>
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <Thrust_Init+0x220>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	2332      	movs	r3, #50	; 0x32
 800084a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800084c:	e018      	b.n	8000880 <Thrust_Init+0x1ec>
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <Thrust_Init+0x220>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b0c      	cmp	r3, #12
 8000854:	d105      	bne.n	8000862 <Thrust_Init+0x1ce>
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <Thrust_Init+0x220>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	2332      	movs	r3, #50	; 0x32
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
 8000860:	e00e      	b.n	8000880 <Thrust_Init+0x1ec>
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <Thrust_Init+0x220>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2b10      	cmp	r3, #16
 8000868:	d105      	bne.n	8000876 <Thrust_Init+0x1e2>
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <Thrust_Init+0x220>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	2332      	movs	r3, #50	; 0x32
 8000872:	6593      	str	r3, [r2, #88]	; 0x58
 8000874:	e004      	b.n	8000880 <Thrust_Init+0x1ec>
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <Thrust_Init+0x220>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	2332      	movs	r3, #50	; 0x32
 800087e:	65d3      	str	r3, [r2, #92]	; 0x5c

	HAL_Delay(1000);
 8000880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000884:	f001 f92e 	bl	8001ae4 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(TIM_PROP_G.TIM, TIM_PROP_G.CHANNEL, MIN_Thrust);
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <Thrust_Init+0x21c>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d105      	bne.n	800089c <Thrust_Init+0x208>
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <Thrust_Init+0x21c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2264      	movs	r2, #100	; 0x64
 8000898:	635a      	str	r2, [r3, #52]	; 0x34
 800089a:	e030      	b.n	80008fe <Thrust_Init+0x26a>
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <Thrust_Init+0x21c>)
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d109      	bne.n	80008b8 <Thrust_Init+0x224>
 80008a4:	4b02      	ldr	r3, [pc, #8]	; (80008b0 <Thrust_Init+0x21c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	2364      	movs	r3, #100	; 0x64
 80008ac:	6393      	str	r3, [r2, #56]	; 0x38
 80008ae:	e026      	b.n	80008fe <Thrust_Init+0x26a>
 80008b0:	24000000 	.word	0x24000000
 80008b4:	24000008 	.word	0x24000008
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <Thrust_Init+0x2e4>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b08      	cmp	r3, #8
 80008be:	d105      	bne.n	80008cc <Thrust_Init+0x238>
 80008c0:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <Thrust_Init+0x2e4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	2364      	movs	r3, #100	; 0x64
 80008c8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80008ca:	e018      	b.n	80008fe <Thrust_Init+0x26a>
 80008cc:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <Thrust_Init+0x2e4>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2b0c      	cmp	r3, #12
 80008d2:	d105      	bne.n	80008e0 <Thrust_Init+0x24c>
 80008d4:	4b28      	ldr	r3, [pc, #160]	; (8000978 <Thrust_Init+0x2e4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	2364      	movs	r3, #100	; 0x64
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	e00e      	b.n	80008fe <Thrust_Init+0x26a>
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <Thrust_Init+0x2e4>)
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2b10      	cmp	r3, #16
 80008e6:	d105      	bne.n	80008f4 <Thrust_Init+0x260>
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <Thrust_Init+0x2e4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	2364      	movs	r3, #100	; 0x64
 80008f0:	6593      	str	r3, [r2, #88]	; 0x58
 80008f2:	e004      	b.n	80008fe <Thrust_Init+0x26a>
 80008f4:	4b20      	ldr	r3, [pc, #128]	; (8000978 <Thrust_Init+0x2e4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	2364      	movs	r3, #100	; 0x64
 80008fc:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(TIM_PROP_D.TIM, TIM_PROP_D.CHANNEL, MIN_Thrust);
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <Thrust_Init+0x2e8>)
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d105      	bne.n	8000912 <Thrust_Init+0x27e>
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <Thrust_Init+0x2e8>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2264      	movs	r2, #100	; 0x64
 800090e:	635a      	str	r2, [r3, #52]	; 0x34
 8000910:	e02c      	b.n	800096c <Thrust_Init+0x2d8>
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <Thrust_Init+0x2e8>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	2b04      	cmp	r3, #4
 8000918:	d105      	bne.n	8000926 <Thrust_Init+0x292>
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <Thrust_Init+0x2e8>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	2364      	movs	r3, #100	; 0x64
 8000922:	6393      	str	r3, [r2, #56]	; 0x38
 8000924:	e022      	b.n	800096c <Thrust_Init+0x2d8>
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <Thrust_Init+0x2e8>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b08      	cmp	r3, #8
 800092c:	d105      	bne.n	800093a <Thrust_Init+0x2a6>
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <Thrust_Init+0x2e8>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	2364      	movs	r3, #100	; 0x64
 8000936:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000938:	e018      	b.n	800096c <Thrust_Init+0x2d8>
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <Thrust_Init+0x2e8>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b0c      	cmp	r3, #12
 8000940:	d105      	bne.n	800094e <Thrust_Init+0x2ba>
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <Thrust_Init+0x2e8>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	2364      	movs	r3, #100	; 0x64
 800094a:	6413      	str	r3, [r2, #64]	; 0x40
 800094c:	e00e      	b.n	800096c <Thrust_Init+0x2d8>
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <Thrust_Init+0x2e8>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	2b10      	cmp	r3, #16
 8000954:	d105      	bne.n	8000962 <Thrust_Init+0x2ce>
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <Thrust_Init+0x2e8>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	2364      	movs	r3, #100	; 0x64
 800095e:	6593      	str	r3, [r2, #88]	; 0x58
 8000960:	e004      	b.n	800096c <Thrust_Init+0x2d8>
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <Thrust_Init+0x2e8>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	2364      	movs	r3, #100	; 0x64
 800096a:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_Delay(1000);
 800096c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000970:	f001 f8b8 	bl	8001ae4 <HAL_Delay>
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	24000000 	.word	0x24000000
 800097c:	24000008 	.word	0x24000008

08000980 <Process_Init>:
void Process_Init(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	Thrust_Init();
 8000984:	f7ff fe86 	bl	8000694 <Thrust_Init>
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <Process>:

void Process(receiveMsg* message) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
    AdjustThrust(&TIM_PROP_G, message->thrust);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <Process+0x3c>)
 800099c:	f000 f818 	bl	80009d0 <AdjustThrust>
    AdjustThrust(&TIM_PROP_D, message->thrust);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	4809      	ldr	r0, [pc, #36]	; (80009cc <Process+0x40>)
 80009a8:	f000 f812 	bl	80009d0 <AdjustThrust>
    AdjustAngle(message->thrust,message->angle);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	781a      	ldrb	r2, [r3, #0]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80009b6:	4619      	mov	r1, r3
 80009b8:	4610      	mov	r0, r2
 80009ba:	f000 f885 	bl	8000ac8 <AdjustAngle>
    //ActivationMoteur(message->depth)
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	24000000 	.word	0x24000000
 80009cc:	24000008 	.word	0x24000008

080009d0 <AdjustThrust>:

void AdjustThrust(struct TIM_PROP* tim_prop, uint8_t thrust) {
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]
	float thrust_ms = 1-(thrust * ((float)(MIN_Thrust - MAX_Thrust) / 100.0)) + MIN_Thrust;
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	ee07 3a90 	vmov	s15, r3
 80009e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009e6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80009ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009ee:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80009f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80009f6:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8000ac0 <AdjustThrust+0xf0>
 80009fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a02:	edc7 7a03 	vstr	s15, [r7, #12]
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d10a      	bne.n	8000a24 <AdjustThrust+0x54>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a1c:	ee17 2a90 	vmov	r2, s15
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a22:	e045      	b.n	8000ab0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	d10a      	bne.n	8000a42 <AdjustThrust+0x72>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a3a:	ee17 3a90 	vmov	r3, s15
 8000a3e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000a40:	e036      	b.n	8000ab0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2b08      	cmp	r3, #8
 8000a48:	d10a      	bne.n	8000a60 <AdjustThrust+0x90>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a58:	ee17 3a90 	vmov	r3, s15
 8000a5c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000a5e:	e027      	b.n	8000ab0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b0c      	cmp	r3, #12
 8000a66:	d10a      	bne.n	8000a7e <AdjustThrust+0xae>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a76:	ee17 3a90 	vmov	r3, s15
 8000a7a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a7c:	e018      	b.n	8000ab0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	2b10      	cmp	r3, #16
 8000a84:	d10a      	bne.n	8000a9c <AdjustThrust+0xcc>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a94:	ee17 3a90 	vmov	r3, s15
 8000a98:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000a9a:	e009      	b.n	8000ab0 <AdjustThrust+0xe0>
    __HAL_TIM_SET_COMPARE(tim_prop->TIM, tim_prop->CHANNEL,thrust_ms);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aaa:	ee17 3a90 	vmov	r3, s15
 8000aae:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	f3af 8000 	nop.w
 8000ac0:	00000000 	.word	0x00000000
 8000ac4:	40590000 	.word	0x40590000

08000ac8 <AdjustAngle>:

void AdjustAngle(uint8_t thrust,int8_t angle){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	71bb      	strb	r3, [r7, #6]
	uint8_t thrust_G = thrust;
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	73fb      	strb	r3, [r7, #15]
	uint8_t thrust_D = thrust;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	73bb      	strb	r3, [r7, #14]

	if (angle<50){//On tourne a gauche
 8000ae0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ae4:	2b31      	cmp	r3, #49	; 0x31
 8000ae6:	dc03      	bgt.n	8000af0 <AdjustAngle+0x28>
		thrust_G = thrust;
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	73fb      	strb	r3, [r7, #15]
		thrust_D = 0; // Ajouter une diminution progressive des pousses moteurs
 8000aec:	2300      	movs	r3, #0
 8000aee:	73bb      	strb	r3, [r7, #14]
	}
	if (angle>50){//On tourne a droite
 8000af0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000af4:	2b32      	cmp	r3, #50	; 0x32
 8000af6:	dd03      	ble.n	8000b00 <AdjustAngle+0x38>
		thrust_G = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	73fb      	strb	r3, [r7, #15]
		thrust_D = thrust;
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	73bb      	strb	r3, [r7, #14]
	}
	AdjustThrust(&TIM_PROP_G, thrust_G);
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <AdjustAngle+0x54>)
 8000b06:	f7ff ff63 	bl	80009d0 <AdjustThrust>
	AdjustThrust(&TIM_PROP_D, thrust_D);
 8000b0a:	7bbb      	ldrb	r3, [r7, #14]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4804      	ldr	r0, [pc, #16]	; (8000b20 <AdjustAngle+0x58>)
 8000b10:	f7ff ff5e 	bl	80009d0 <AdjustThrust>
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	24000000 	.word	0x24000000
 8000b20:	24000008 	.word	0x24000008

08000b24 <RPICom_Init>:
#include <RPICom.h>

RPICom_HandleTypeDef hRPICom;
void RPICom_Init(UART_HandleTypeDef* huart, UART_HandleTypeDef* huartDebug){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
	hRPICom.huart = huart;
 8000b2e:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <RPICom_Init+0x70>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6013      	str	r3, [r2, #0]
	hRPICom.huartDebug = huartDebug;
 8000b34:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <RPICom_Init+0x70>)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	6053      	str	r3, [r2, #4]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	681b      	ldr	r3, [r3, #0]
	memcpy(&(hRPICom.binaryMessage), NULL, sizeof(receiveMsg));
 8000b3e:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <RPICom_Init+0x70>)
 8000b40:	6093      	str	r3, [r2, #8]
	hRPICom.errorNumberRx = 0;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <RPICom_Init+0x70>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	749a      	strb	r2, [r3, #18]
	memcpy(hRPICom.RxBuffer, NULL, UART_RPI_RX_BUFFER_SIZE);
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <RPICom_Init+0x70>)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f103 0213 	add.w	r2, r3, #19
 8000b50:	460b      	mov	r3, r1
 8000b52:	cb03      	ldmia	r3!, {r0, r1}
 8000b54:	6010      	str	r0, [r2, #0]
 8000b56:	6051      	str	r1, [r2, #4]
	memcpy(hRPICom.TxBuffer, NULL, UART_RPI_TX_BUFFER_SIZE);
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <RPICom_Init+0x70>)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f103 021b 	add.w	r2, r3, #27
 8000b60:	460b      	mov	r3, r1
 8000b62:	cb03      	ldmia	r3!, {r0, r1}
 8000b64:	6010      	str	r0, [r2, #0]
 8000b66:	6051      	str	r1, [r2, #4]
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	8113      	strh	r3, [r2, #8]
	memcpy(hRPICom.DebugBuffer, NULL, UART_RPI_DEBUG_BUFFER_SIZE);
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <RPICom_Init+0x70>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	3325      	adds	r3, #37	; 0x25
 8000b72:	4611      	mov	r1, r2
 8000b74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f009 f831 	bl	8009be0 <memcpy>
	hRPICom.sendMessage.paquetNumber = 0;
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <RPICom_Init+0x70>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	745a      	strb	r2, [r3, #17]

	RPICom_UartActivate(&hRPICom);
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <RPICom_Init+0x70>)
 8000b86:	f000 f807 	bl	8000b98 <RPICom_UartActivate>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	240000a0 	.word	0x240000a0

08000b98 <RPICom_UartActivate>:

void RPICom_UartActivate(RPICom_HandleTypeDef* hRPI){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(hRPI->huart, hRPI->RxBuffer, UART_RPI_RX_BUFFER_SIZE);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6818      	ldr	r0, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3313      	adds	r3, #19
 8000ba8:	2208      	movs	r2, #8
 8000baa:	4619      	mov	r1, r3
 8000bac:	f006 f9fe 	bl	8006fac <HAL_UART_Receive_IT>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <checkSum>:

uint8_t checkSum(uint8_t buffer[],uint8_t buffer_size){
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	70fb      	strb	r3, [r7, #3]
	uint8_t checkSum = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < buffer_size; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	e009      	b.n	8000be2 <checkSum+0x2a>
		checkSum ^= buffer[i];
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	781a      	ldrb	r2, [r3, #0]
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	4053      	eors	r3, r2
 8000bda:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < buffer_size; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	3301      	adds	r3, #1
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	78fb      	ldrb	r3, [r7, #3]
 8000be4:	68ba      	ldr	r2, [r7, #8]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	dbf1      	blt.n	8000bce <checkSum+0x16>
	}
	return checkSum;
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <RPICom_DecodeBinaryMessage>:

void RPICom_DecodeBinaryMessage(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af04      	add	r7, sp, #16
	hRPICom.errorNumberRx = '0';
 8000bfe:	4b32      	ldr	r3, [pc, #200]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c00:	2230      	movs	r2, #48	; 0x30
 8000c02:	749a      	strb	r2, [r3, #18]
	// Check Header
	if (HEADER_CheckValue1 != hRPICom.RxBuffer[0] || HEADER_CheckValue2 != hRPICom.RxBuffer[1]){//On envoie une erreur à la raspberry
 8000c04:	4b30      	ldr	r3, [pc, #192]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c06:	7cdb      	ldrb	r3, [r3, #19]
 8000c08:	2bff      	cmp	r3, #255	; 0xff
 8000c0a:	d103      	bne.n	8000c14 <RPICom_DecodeBinaryMessage+0x1c>
 8000c0c:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c0e:	7d1b      	ldrb	r3, [r3, #20]
 8000c10:	2bfe      	cmp	r3, #254	; 0xfe
 8000c12:	d002      	beq.n	8000c1a <RPICom_DecodeBinaryMessage+0x22>
		hRPICom.errorNumberRx ='1';
 8000c14:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c16:	2231      	movs	r2, #49	; 0x31
 8000c18:	749a      	strb	r2, [r3, #18]
	}
	// Check Length
	if (UART_RPI_RX_BUFFER_SIZE != hRPICom.RxBuffer[2]){// Il nous manque des informations
 8000c1a:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c1c:	7d5b      	ldrb	r3, [r3, #21]
 8000c1e:	2b08      	cmp	r3, #8
 8000c20:	d002      	beq.n	8000c28 <RPICom_DecodeBinaryMessage+0x30>
		hRPICom.errorNumberRx='2';
 8000c22:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c24:	2232      	movs	r2, #50	; 0x32
 8000c26:	749a      	strb	r2, [r3, #18]
	}
	hRPICom.binaryMessage.thrust = hRPICom.RxBuffer[3];
 8000c28:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c2a:	7d9a      	ldrb	r2, [r3, #22]
 8000c2c:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c2e:	721a      	strb	r2, [r3, #8]
	hRPICom.binaryMessage.angle = hRPICom.RxBuffer[4];
 8000c30:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c32:	7ddb      	ldrb	r3, [r3, #23]
 8000c34:	b25a      	sxtb	r2, r3
 8000c36:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c38:	725a      	strb	r2, [r3, #9]
	hRPICom.binaryMessage.depth = hRPICom.RxBuffer[5];
 8000c3a:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c3c:	7e1a      	ldrb	r2, [r3, #24]
 8000c3e:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c40:	729a      	strb	r2, [r3, #10]
	hRPICom.binaryMessage.paquetNumber = hRPICom.RxBuffer[6];
 8000c42:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c44:	7e5a      	ldrb	r2, [r3, #25]
 8000c46:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c48:	72da      	strb	r2, [r3, #11]

	//Checksum
	if(checkSum(hRPICom.RxBuffer,UART_RPI_RX_BUFFER_SIZE) !=  hRPICom.RxBuffer[7]){
 8000c4a:	2108      	movs	r1, #8
 8000c4c:	481f      	ldr	r0, [pc, #124]	; (8000ccc <RPICom_DecodeBinaryMessage+0xd4>)
 8000c4e:	f7ff ffb3 	bl	8000bb8 <checkSum>
 8000c52:	4603      	mov	r3, r0
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c58:	7e9b      	ldrb	r3, [r3, #26]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d002      	beq.n	8000c64 <RPICom_DecodeBinaryMessage+0x6c>
		hRPICom.errorNumberRx='3';
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c60:	2233      	movs	r2, #51	; 0x33
 8000c62:	749a      	strb	r2, [r3, #18]
	}

	//Response RPI
	uint8_t stringLength = snprintf((char *)hRPICom.DebugBuffer, UART_RPI_DEBUG_BUFFER_SIZE, "[RECEPTION]\nPaquet: %u\r\nThrust: %u\nAngle: %u\r\nStatut: %c\r\n", hRPICom.binaryMessage.paquetNumber,hRPICom.binaryMessage.thrust,hRPICom.binaryMessage.angle,hRPICom.errorNumberRx);
 8000c64:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c66:	7adb      	ldrb	r3, [r3, #11]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c6c:	7a1b      	ldrb	r3, [r3, #8]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c72:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8000c76:	4619      	mov	r1, r3
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c7a:	7c9b      	ldrb	r3, [r3, #18]
 8000c7c:	9302      	str	r3, [sp, #8]
 8000c7e:	9101      	str	r1, [sp, #4]
 8000c80:	9200      	str	r2, [sp, #0]
 8000c82:	4603      	mov	r3, r0
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <RPICom_DecodeBinaryMessage+0xd8>)
 8000c86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8a:	4812      	ldr	r0, [pc, #72]	; (8000cd4 <RPICom_DecodeBinaryMessage+0xdc>)
 8000c8c:	f008 ffbe 	bl	8009c0c <sniprintf>
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
	hRPICom.DebugBuffer[UART_RPI_DEBUG_BUFFER_SIZE-1] = 0; //Securité de print
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
	HAL_UART_Transmit(hRPICom.huartDebug, hRPICom.DebugBuffer, stringLength, 10);
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000c9e:	6858      	ldr	r0, [r3, #4]
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	230a      	movs	r3, #10
 8000ca6:	490b      	ldr	r1, [pc, #44]	; (8000cd4 <RPICom_DecodeBinaryMessage+0xdc>)
 8000ca8:	f006 f85e 	bl	8006d68 <HAL_UART_Transmit>


	// Vous avez maintenant un message complet dans la structure BinaryMessage
	// Vous pouvez faire quelque chose avec ces données, par exemple, appeler une fonction de traitement

	if (hRPICom.errorNumberRx =='0'){
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000cae:	7c9b      	ldrb	r3, [r3, #18]
 8000cb0:	2b30      	cmp	r3, #48	; 0x30
 8000cb2:	d102      	bne.n	8000cba <RPICom_DecodeBinaryMessage+0xc2>
		Process(&hRPICom.binaryMessage);
 8000cb4:	4808      	ldr	r0, [pc, #32]	; (8000cd8 <RPICom_DecodeBinaryMessage+0xe0>)
 8000cb6:	f7ff fe69 	bl	800098c <Process>
	}
	RPICom_UartActivate(&hRPICom);
 8000cba:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <RPICom_DecodeBinaryMessage+0xd0>)
 8000cbc:	f7ff ff6c 	bl	8000b98 <RPICom_UartActivate>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	240000a0 	.word	0x240000a0
 8000ccc:	240000b3 	.word	0x240000b3
 8000cd0:	0800a50c 	.word	0x0800a50c
 8000cd4:	240000c5 	.word	0x240000c5
 8000cd8:	240000a8 	.word	0x240000a8

08000cdc <acquireData>:
void acquireData(void){ //Factoriser surement dans un fichier AcquireData
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
	//interroge inertielle
	 hRPICom.sendMessage.posX = 10;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <acquireData+0x38>)
 8000ce2:	220a      	movs	r2, #10
 8000ce4:	731a      	strb	r2, [r3, #12]
	 hRPICom.sendMessage.posY = 20;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <acquireData+0x38>)
 8000ce8:	2214      	movs	r2, #20
 8000cea:	735a      	strb	r2, [r3, #13]
	 hRPICom.sendMessage.angleDelta = 1;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <acquireData+0x38>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	739a      	strb	r2, [r3, #14]
	//interroge capteur temp
	 hRPICom.sendMessage.temp = 25;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <acquireData+0x38>)
 8000cf4:	2219      	movs	r2, #25
 8000cf6:	73da      	strb	r2, [r3, #15]
	//interroge batterie
	 hRPICom.sendMessage.batteryPower = 90;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <acquireData+0x38>)
 8000cfa:	225a      	movs	r2, #90	; 0x5a
 8000cfc:	741a      	strb	r2, [r3, #16]
	 hRPICom.sendMessage.paquetNumber+=1;
 8000cfe:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <acquireData+0x38>)
 8000d00:	7c5b      	ldrb	r3, [r3, #17]
 8000d02:	3301      	adds	r3, #1
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <acquireData+0x38>)
 8000d08:	745a      	strb	r2, [r3, #17]

}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	240000a0 	.word	0x240000a0

08000d18 <RPICom_SendBinaryMessage>:
void RPICom_SendBinaryMessage(void){ //Declencher par TIM3_IT ttes les 1s
 8000d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d1a:	b08b      	sub	sp, #44	; 0x2c
 8000d1c:	af06      	add	r7, sp, #24
	acquireData();
 8000d1e:	f7ff ffdd 	bl	8000cdc <acquireData>
	hRPICom.TxBuffer[0]=HEADER_CheckValue1;
 8000d22:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d24:	22ff      	movs	r2, #255	; 0xff
 8000d26:	76da      	strb	r2, [r3, #27]
	hRPICom.TxBuffer[1]=HEADER_CheckValue2;
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d2a:	22fe      	movs	r2, #254	; 0xfe
 8000d2c:	771a      	strb	r2, [r3, #28]
	hRPICom.TxBuffer[2]=UART_RPI_TX_BUFFER_SIZE;
 8000d2e:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d30:	220a      	movs	r2, #10
 8000d32:	775a      	strb	r2, [r3, #29]

	memcpy(hRPICom.TxBuffer + 3, &hRPICom.sendMessage, sizeof(hRPICom.sendMessage));
 8000d34:	4a26      	ldr	r2, [pc, #152]	; (8000dd0 <RPICom_SendBinaryMessage+0xb8>)
 8000d36:	4b25      	ldr	r3, [pc, #148]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d38:	330c      	adds	r3, #12
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	6010      	str	r0, [r2, #0]
 8000d3e:	889b      	ldrh	r3, [r3, #4]
 8000d40:	8093      	strh	r3, [r2, #4]

	hRPICom.TxBuffer[9]=checkSum(hRPICom.TxBuffer,sizeof(hRPICom.sendMessage)+3);
 8000d42:	2109      	movs	r1, #9
 8000d44:	4823      	ldr	r0, [pc, #140]	; (8000dd4 <RPICom_SendBinaryMessage+0xbc>)
 8000d46:	f7ff ff37 	bl	8000bb8 <checkSum>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	HAL_UART_Transmit_IT(hRPICom.huart, hRPICom.TxBuffer, UART_RPI_TX_BUFFER_SIZE);
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	220a      	movs	r2, #10
 8000d5a:	491e      	ldr	r1, [pc, #120]	; (8000dd4 <RPICom_SendBinaryMessage+0xbc>)
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f006 f891 	bl	8006e84 <HAL_UART_Transmit_IT>
	//Response RPI
	uint8_t stringLength = snprintf((char *)hRPICom.DebugBuffer, UART_RPI_DEBUG_BUFFER_SIZE, "[SEND]\nPaquet: %u\r\nBatteryPower: %u\nPosition: %u-%u-%u°\r\nMessage transmis: %x\n", hRPICom.sendMessage.paquetNumber,hRPICom.sendMessage.batteryPower,hRPICom.sendMessage.posX,hRPICom.sendMessage.posY,hRPICom.sendMessage.angleDelta,hRPICom.sendMessage);
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d64:	7c5b      	ldrb	r3, [r3, #17]
 8000d66:	469c      	mov	ip, r3
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d6a:	7c1b      	ldrb	r3, [r3, #16]
 8000d6c:	461c      	mov	r4, r3
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d70:	7b1b      	ldrb	r3, [r3, #12]
 8000d72:	461d      	mov	r5, r3
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d76:	7b5b      	ldrb	r3, [r3, #13]
 8000d78:	461e      	mov	r6, r3
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d7c:	7b9b      	ldrb	r3, [r3, #14]
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000d82:	ab04      	add	r3, sp, #16
 8000d84:	320c      	adds	r2, #12
 8000d86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d8a:	6018      	str	r0, [r3, #0]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	8019      	strh	r1, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	9303      	str	r3, [sp, #12]
 8000d94:	9602      	str	r6, [sp, #8]
 8000d96:	9501      	str	r5, [sp, #4]
 8000d98:	9400      	str	r4, [sp, #0]
 8000d9a:	4663      	mov	r3, ip
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <RPICom_SendBinaryMessage+0xc0>)
 8000d9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da2:	480e      	ldr	r0, [pc, #56]	; (8000ddc <RPICom_SendBinaryMessage+0xc4>)
 8000da4:	f008 ff32 	bl	8009c0c <sniprintf>
 8000da8:	4603      	mov	r3, r0
 8000daa:	73fb      	strb	r3, [r7, #15]
	hRPICom.DebugBuffer[UART_RPI_DEBUG_BUFFER_SIZE-1] = 0; //Securité de print
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
	HAL_UART_Transmit(hRPICom.huartDebug, hRPICom.DebugBuffer, stringLength, 10);
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <RPICom_SendBinaryMessage+0xb4>)
 8000db6:	6858      	ldr	r0, [r3, #4]
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	230a      	movs	r3, #10
 8000dbe:	4907      	ldr	r1, [pc, #28]	; (8000ddc <RPICom_SendBinaryMessage+0xc4>)
 8000dc0:	f005 ffd2 	bl	8006d68 <HAL_UART_Transmit>
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dcc:	240000a0 	.word	0x240000a0
 8000dd0:	240000be 	.word	0x240000be
 8000dd4:	240000bb 	.word	0x240000bb
 8000dd8:	0800a548 	.word	0x0800a548
 8000ddc:	240000c5 	.word	0x240000c5

08000de0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08e      	sub	sp, #56	; 0x38
 8000de4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	4b80      	ldr	r3, [pc, #512]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000df8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dfc:	4a7e      	ldr	r2, [pc, #504]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e06:	4b7c      	ldr	r3, [pc, #496]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	623b      	str	r3, [r7, #32]
 8000e12:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e14:	4b78      	ldr	r3, [pc, #480]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e1a:	4a77      	ldr	r2, [pc, #476]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e1c:	f043 0320 	orr.w	r3, r3, #32
 8000e20:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e24:	4b74      	ldr	r3, [pc, #464]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e2a:	f003 0320 	and.w	r3, r3, #32
 8000e2e:	61fb      	str	r3, [r7, #28]
 8000e30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e32:	4b71      	ldr	r3, [pc, #452]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e38:	4a6f      	ldr	r2, [pc, #444]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e3e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e42:	4b6d      	ldr	r3, [pc, #436]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e4c:	61bb      	str	r3, [r7, #24]
 8000e4e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b69      	ldr	r3, [pc, #420]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e56:	4a68      	ldr	r2, [pc, #416]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e60:	4b65      	ldr	r3, [pc, #404]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b62      	ldr	r3, [pc, #392]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e74:	4a60      	ldr	r2, [pc, #384]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e7e:	4b5e      	ldr	r3, [pc, #376]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8c:	4b5a      	ldr	r3, [pc, #360]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e92:	4a59      	ldr	r2, [pc, #356]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e94:	f043 0308 	orr.w	r3, r3, #8
 8000e98:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e9c:	4b56      	ldr	r3, [pc, #344]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000e9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ea2:	f003 0308 	and.w	r3, r3, #8
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eaa:	4b53      	ldr	r3, [pc, #332]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000eac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eb0:	4a51      	ldr	r2, [pc, #324]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eba:	4b4f      	ldr	r3, [pc, #316]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000ebc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec8:	4b4b      	ldr	r3, [pc, #300]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000eca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ece:	4a4a      	ldr	r2, [pc, #296]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000ed0:	f043 0310 	orr.w	r3, r3, #16
 8000ed4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ed8:	4b47      	ldr	r3, [pc, #284]	; (8000ff8 <MX_GPIO_Init+0x218>)
 8000eda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eec:	4843      	ldr	r0, [pc, #268]	; (8000ffc <MX_GPIO_Init+0x21c>)
 8000eee:	f001 fe41 	bl	8002b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ef8:	4841      	ldr	r0, [pc, #260]	; (8001000 <MX_GPIO_Init+0x220>)
 8000efa:	f001 fe3b 	bl	8002b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2102      	movs	r1, #2
 8000f02:	4840      	ldr	r0, [pc, #256]	; (8001004 <MX_GPIO_Init+0x224>)
 8000f04:	f001 fe36 	bl	8002b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	483a      	ldr	r0, [pc, #232]	; (8001008 <MX_GPIO_Init+0x228>)
 8000f1e:	f001 fc79 	bl	8002814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4830      	ldr	r0, [pc, #192]	; (8000ffc <MX_GPIO_Init+0x21c>)
 8000f3c:	f001 fc6a 	bl	8002814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000f40:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	4619      	mov	r1, r3
 8000f58:	4829      	ldr	r0, [pc, #164]	; (8001000 <MX_GPIO_Init+0x220>)
 8000f5a:	f001 fc5b 	bl	8002814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	4826      	ldr	r0, [pc, #152]	; (800100c <MX_GPIO_Init+0x22c>)
 8000f74:	f001 fc4e 	bl	8002814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4820      	ldr	r0, [pc, #128]	; (8001010 <MX_GPIO_Init+0x230>)
 8000f8e:	f001 fc41 	bl	8002814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fac:	4619      	mov	r1, r3
 8000fae:	4818      	ldr	r0, [pc, #96]	; (8001010 <MX_GPIO_Init+0x230>)
 8000fb0:	f001 fc30 	bl	8002814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000fb4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4810      	ldr	r0, [pc, #64]	; (8001010 <MX_GPIO_Init+0x230>)
 8000fce:	f001 fc21 	bl	8002814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4806      	ldr	r0, [pc, #24]	; (8001004 <MX_GPIO_Init+0x224>)
 8000fea:	f001 fc13 	bl	8002814 <HAL_GPIO_Init>

}
 8000fee:	bf00      	nop
 8000ff0:	3738      	adds	r7, #56	; 0x38
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	58024400 	.word	0x58024400
 8000ffc:	58021400 	.word	0x58021400
 8001000:	58020400 	.word	0x58020400
 8001004:	58021000 	.word	0x58021000
 8001008:	58020800 	.word	0x58020800
 800100c:	58021800 	.word	0x58021800
 8001010:	58020000 	.word	0x58020000

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001018:	f000 fcd2 	bl	80019c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101c:	f000 f836 	bl	800108c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001020:	f7ff fede 	bl	8000de0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001024:	f000 fb52 	bl	80016cc <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8001028:	f000 fc98 	bl	800195c <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 800102c:	f000 fafa 	bl	8001624 <MX_UART4_Init>
  MX_TIM2_Init();
 8001030:	f000 f9b0 	bl	8001394 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001034:	f000 fa30 	bl	8001498 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  	  HAL_TIM_Base_Start_IT(&htim3);
 8001038:	480e      	ldr	r0, [pc, #56]	; (8001074 <main+0x60>)
 800103a:	f004 fc1f 	bl	800587c <HAL_TIM_Base_Start_IT>

	HAL_UART_Transmit(&huart3, (uint8_t *)"\nStarting...\r\n", 14, 10);
 800103e:	230a      	movs	r3, #10
 8001040:	220e      	movs	r2, #14
 8001042:	490d      	ldr	r1, [pc, #52]	; (8001078 <main+0x64>)
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <main+0x68>)
 8001046:	f005 fe8f 	bl	8006d68 <HAL_UART_Transmit>
	Process_Init();
 800104a:	f7ff fc99 	bl	8000980 <Process_Init>
	RPICom_Init(&huart4, &huart3);
 800104e:	490b      	ldr	r1, [pc, #44]	; (800107c <main+0x68>)
 8001050:	480b      	ldr	r0, [pc, #44]	; (8001080 <main+0x6c>)
 8001052:	f7ff fd67 	bl	8000b24 <RPICom_Init>
	HAL_UART_Transmit(&huart3, (uint8_t *)"Init Done\r\n", 11, 10);
 8001056:	230a      	movs	r3, #10
 8001058:	220b      	movs	r2, #11
 800105a:	490a      	ldr	r1, [pc, #40]	; (8001084 <main+0x70>)
 800105c:	4807      	ldr	r0, [pc, #28]	; (800107c <main+0x68>)
 800105e:	f005 fe83 	bl	8006d68 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); //toggle the user led Green which is connected to GPIO PA5
 8001062:	2101      	movs	r1, #1
 8001064:	4808      	ldr	r0, [pc, #32]	; (8001088 <main+0x74>)
 8001066:	f001 fd9e 	bl	8002ba6 <HAL_GPIO_TogglePin>
		HAL_Delay(500); //delay 500 millisecond
 800106a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800106e:	f000 fd39 	bl	8001ae4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); //toggle the user led Green which is connected to GPIO PA5
 8001072:	e7f6      	b.n	8001062 <main+0x4e>
 8001074:	24000518 	.word	0x24000518
 8001078:	0800a598 	.word	0x0800a598
 800107c:	240005f8 	.word	0x240005f8
 8001080:	24000564 	.word	0x24000564
 8001084:	0800a5a8 	.word	0x0800a5a8
 8001088:	58020400 	.word	0x58020400

0800108c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b09c      	sub	sp, #112	; 0x70
 8001090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	224c      	movs	r2, #76	; 0x4c
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f008 fdae 	bl	8009bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2220      	movs	r2, #32
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f008 fda8 	bl	8009bfc <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80010ac:	4b30      	ldr	r3, [pc, #192]	; (8001170 <SystemClock_Config+0xe4>)
 80010ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80010b6:	2004      	movs	r0, #4
 80010b8:	f001 fd90 	bl	8002bdc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80010bc:	2300      	movs	r3, #0
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <SystemClock_Config+0xe8>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a2b      	ldr	r2, [pc, #172]	; (8001174 <SystemClock_Config+0xe8>)
 80010c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b29      	ldr	r3, [pc, #164]	; (8001174 <SystemClock_Config+0xe8>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010d8:	bf00      	nop
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <SystemClock_Config+0xe8>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010e6:	d1f8      	bne.n	80010da <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80010e8:	2321      	movs	r3, #33	; 0x21
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010f2:	2301      	movs	r3, #1
 80010f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f6:	2302      	movs	r3, #2
 80010f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fa:	2302      	movs	r3, #2
 80010fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010fe:	2301      	movs	r3, #1
 8001100:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001102:	2318      	movs	r3, #24
 8001104:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001106:	2302      	movs	r3, #2
 8001108:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800110a:	2304      	movs	r3, #4
 800110c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800110e:	2302      	movs	r3, #2
 8001110:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001112:	230c      	movs	r3, #12
 8001114:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001116:	2300      	movs	r3, #0
 8001118:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001122:	4618      	mov	r0, r3
 8001124:	f001 fdb4 	bl	8002c90 <HAL_RCC_OscConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800112e:	f000 f823 	bl	8001178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001132:	233f      	movs	r3, #63	; 0x3f
 8001134:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001136:	2303      	movs	r3, #3
 8001138:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2102      	movs	r1, #2
 8001156:	4618      	mov	r0, r3
 8001158:	f002 f9cc 	bl	80034f4 <HAL_RCC_ClockConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001162:	f000 f809 	bl	8001178 <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	3770      	adds	r7, #112	; 0x70
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	58024400 	.word	0x58024400
 8001174:	58024800 	.word	0x58024800

08001178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001180:	e7fe      	b.n	8001180 <Error_Handler+0x8>
	...

08001184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_MspInit+0x30>)
 800118c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001190:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <HAL_MspInit+0x30>)
 8001192:	f043 0302 	orr.w	r3, r3, #2
 8001196:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_MspInit+0x30>)
 800119c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	58024400 	.word	0x58024400

080011b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <NMI_Handler+0x4>

080011be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <HardFault_Handler+0x4>

080011c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <MemManage_Handler+0x4>

080011ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <BusFault_Handler+0x4>

080011d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <UsageFault_Handler+0x4>

080011d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001204:	f000 fc4e 	bl	8001aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	RPICom_SendBinaryMessage();
 8001210:	f7ff fd82 	bl	8000d18 <RPICom_SendBinaryMessage>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <TIM3_IRQHandler+0x14>)
 8001216:	f004 fd19 	bl	8005c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	24000518 	.word	0x24000518

08001224 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <UART4_IRQHandler+0x10>)
 800122a:	f005 ff0b 	bl	8007044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  /* USER CODE END UART4_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	24000564 	.word	0x24000564

08001238 <_sbrk>:
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	4a14      	ldr	r2, [pc, #80]	; (8001294 <_sbrk+0x5c>)
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <_sbrk+0x60>)
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <_sbrk+0x22>
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <_sbrk+0x64>)
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <_sbrk+0x68>)
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	429a      	cmp	r2, r3
 8001266:	d207      	bcs.n	8001278 <_sbrk+0x40>
 8001268:	f008 fc90 	bl	8009b8c <__errno>
 800126c:	4603      	mov	r3, r0
 800126e:	220c      	movs	r2, #12
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001276:	e009      	b.n	800128c <_sbrk+0x54>
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <_sbrk+0x64>)
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	24100000 	.word	0x24100000
 8001298:	00000400 	.word	0x00000400
 800129c:	240004c8 	.word	0x240004c8
 80012a0:	240006a0 	.word	0x240006a0

080012a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012a8:	4b32      	ldr	r3, [pc, #200]	; (8001374 <SystemInit+0xd0>)
 80012aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ae:	4a31      	ldr	r2, [pc, #196]	; (8001374 <SystemInit+0xd0>)
 80012b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012b8:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <SystemInit+0xd4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 030f 	and.w	r3, r3, #15
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d807      	bhi.n	80012d4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012c4:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <SystemInit+0xd4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f023 030f 	bic.w	r3, r3, #15
 80012cc:	4a2a      	ldr	r2, [pc, #168]	; (8001378 <SystemInit+0xd4>)
 80012ce:	f043 0303 	orr.w	r3, r3, #3
 80012d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012d4:	4b29      	ldr	r3, [pc, #164]	; (800137c <SystemInit+0xd8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a28      	ldr	r2, [pc, #160]	; (800137c <SystemInit+0xd8>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012e0:	4b26      	ldr	r3, [pc, #152]	; (800137c <SystemInit+0xd8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012e6:	4b25      	ldr	r3, [pc, #148]	; (800137c <SystemInit+0xd8>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4924      	ldr	r1, [pc, #144]	; (800137c <SystemInit+0xd8>)
 80012ec:	4b24      	ldr	r3, [pc, #144]	; (8001380 <SystemInit+0xdc>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012f2:	4b21      	ldr	r3, [pc, #132]	; (8001378 <SystemInit+0xd4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 030c 	and.w	r3, r3, #12
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d007      	beq.n	800130e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012fe:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <SystemInit+0xd4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f023 030f 	bic.w	r3, r3, #15
 8001306:	4a1c      	ldr	r2, [pc, #112]	; (8001378 <SystemInit+0xd4>)
 8001308:	f043 0303 	orr.w	r3, r3, #3
 800130c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800130e:	4b1b      	ldr	r3, [pc, #108]	; (800137c <SystemInit+0xd8>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <SystemInit+0xd8>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <SystemInit+0xd8>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <SystemInit+0xd8>)
 8001322:	4a18      	ldr	r2, [pc, #96]	; (8001384 <SystemInit+0xe0>)
 8001324:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <SystemInit+0xd8>)
 8001328:	4a17      	ldr	r2, [pc, #92]	; (8001388 <SystemInit+0xe4>)
 800132a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <SystemInit+0xd8>)
 800132e:	4a17      	ldr	r2, [pc, #92]	; (800138c <SystemInit+0xe8>)
 8001330:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <SystemInit+0xd8>)
 8001334:	2200      	movs	r2, #0
 8001336:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001338:	4b10      	ldr	r3, [pc, #64]	; (800137c <SystemInit+0xd8>)
 800133a:	4a14      	ldr	r2, [pc, #80]	; (800138c <SystemInit+0xe8>)
 800133c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <SystemInit+0xd8>)
 8001340:	2200      	movs	r2, #0
 8001342:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001344:	4b0d      	ldr	r3, [pc, #52]	; (800137c <SystemInit+0xd8>)
 8001346:	4a11      	ldr	r2, [pc, #68]	; (800138c <SystemInit+0xe8>)
 8001348:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <SystemInit+0xd8>)
 800134c:	2200      	movs	r2, #0
 800134e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <SystemInit+0xd8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a09      	ldr	r2, [pc, #36]	; (800137c <SystemInit+0xd8>)
 8001356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800135a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <SystemInit+0xd8>)
 800135e:	2200      	movs	r2, #0
 8001360:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <SystemInit+0xec>)
 8001364:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001368:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00
 8001378:	52002000 	.word	0x52002000
 800137c:	58024400 	.word	0x58024400
 8001380:	eaf6ed7f 	.word	0xeaf6ed7f
 8001384:	02020200 	.word	0x02020200
 8001388:	01ff0000 	.word	0x01ff0000
 800138c:	01010280 	.word	0x01010280
 8001390:	52004000 	.word	0x52004000

08001394 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08e      	sub	sp, #56	; 0x38
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b4:	463b      	mov	r3, r7
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]
 80013c2:	615a      	str	r2, [r3, #20]
 80013c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013c6:	4b33      	ldr	r3, [pc, #204]	; (8001494 <MX_TIM2_Init+0x100>)
 80013c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1919;
 80013ce:	4b31      	ldr	r3, [pc, #196]	; (8001494 <MX_TIM2_Init+0x100>)
 80013d0:	f240 727f 	movw	r2, #1919	; 0x77f
 80013d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d6:	4b2f      	ldr	r3, [pc, #188]	; (8001494 <MX_TIM2_Init+0x100>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80013dc:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <MX_TIM2_Init+0x100>)
 80013de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <MX_TIM2_Init+0x100>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ea:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <MX_TIM2_Init+0x100>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013f0:	4828      	ldr	r0, [pc, #160]	; (8001494 <MX_TIM2_Init+0x100>)
 80013f2:	f004 f9eb 	bl	80057cc <HAL_TIM_Base_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80013fc:	f7ff febc 	bl	8001178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140a:	4619      	mov	r1, r3
 800140c:	4821      	ldr	r0, [pc, #132]	; (8001494 <MX_TIM2_Init+0x100>)
 800140e:	f004 fe51 	bl	80060b4 <HAL_TIM_ConfigClockSource>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001418:	f7ff feae 	bl	8001178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800141c:	481d      	ldr	r0, [pc, #116]	; (8001494 <MX_TIM2_Init+0x100>)
 800141e:	f004 faa5 	bl	800596c <HAL_TIM_PWM_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001428:	f7ff fea6 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4619      	mov	r1, r3
 800143a:	4816      	ldr	r0, [pc, #88]	; (8001494 <MX_TIM2_Init+0x100>)
 800143c:	f005 fb98 	bl	8006b70 <HAL_TIMEx_MasterConfigSynchronization>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001446:	f7ff fe97 	bl	8001178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800144a:	2360      	movs	r3, #96	; 0x60
 800144c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800145a:	463b      	mov	r3, r7
 800145c:	2200      	movs	r2, #0
 800145e:	4619      	mov	r1, r3
 8001460:	480c      	ldr	r0, [pc, #48]	; (8001494 <MX_TIM2_Init+0x100>)
 8001462:	f004 fd13 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800146c:	f7ff fe84 	bl	8001178 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001470:	463b      	mov	r3, r7
 8001472:	2204      	movs	r2, #4
 8001474:	4619      	mov	r1, r3
 8001476:	4807      	ldr	r0, [pc, #28]	; (8001494 <MX_TIM2_Init+0x100>)
 8001478:	f004 fd08 	bl	8005e8c <HAL_TIM_PWM_ConfigChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001482:	f7ff fe79 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001486:	4803      	ldr	r0, [pc, #12]	; (8001494 <MX_TIM2_Init+0x100>)
 8001488:	f000 f894 	bl	80015b4 <HAL_TIM_MspPostInit>

}
 800148c:	bf00      	nop
 800148e:	3738      	adds	r7, #56	; 0x38
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	240004cc 	.word	0x240004cc

08001498 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014b6:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <MX_TIM3_Init+0x98>)
 80014b8:	4a1e      	ldr	r2, [pc, #120]	; (8001534 <MX_TIM3_Init+0x9c>)
 80014ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9599;
 80014bc:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <MX_TIM3_Init+0x98>)
 80014be:	f242 527f 	movw	r2, #9599	; 0x257f
 80014c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c4:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <MX_TIM3_Init+0x98>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <MX_TIM3_Init+0x98>)
 80014cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80014d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <MX_TIM3_Init+0x98>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_TIM3_Init+0x98>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014de:	4814      	ldr	r0, [pc, #80]	; (8001530 <MX_TIM3_Init+0x98>)
 80014e0:	f004 f974 	bl	80057cc <HAL_TIM_Base_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80014ea:	f7ff fe45 	bl	8001178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	4619      	mov	r1, r3
 80014fa:	480d      	ldr	r0, [pc, #52]	; (8001530 <MX_TIM3_Init+0x98>)
 80014fc:	f004 fdda 	bl	80060b4 <HAL_TIM_ConfigClockSource>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001506:	f7ff fe37 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	4619      	mov	r1, r3
 8001516:	4806      	ldr	r0, [pc, #24]	; (8001530 <MX_TIM3_Init+0x98>)
 8001518:	f005 fb2a 	bl	8006b70 <HAL_TIMEx_MasterConfigSynchronization>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001522:	f7ff fe29 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	24000518 	.word	0x24000518
 8001534:	40000400 	.word	0x40000400

08001538 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001548:	d10f      	bne.n	800156a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <HAL_TIM_Base_MspInit+0x74>)
 800154c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001550:	4a16      	ldr	r2, [pc, #88]	; (80015ac <HAL_TIM_Base_MspInit+0x74>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800155a:	4b14      	ldr	r3, [pc, #80]	; (80015ac <HAL_TIM_Base_MspInit+0x74>)
 800155c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001568:	e01b      	b.n	80015a2 <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM3)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <HAL_TIM_Base_MspInit+0x78>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d116      	bne.n	80015a2 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_TIM_Base_MspInit+0x74>)
 8001576:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800157a:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <HAL_TIM_Base_MspInit+0x74>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_TIM_Base_MspInit+0x74>)
 8001586:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	201d      	movs	r0, #29
 8001598:	f000 fba3 	bl	8001ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800159c:	201d      	movs	r0, #29
 800159e:	f000 fbba 	bl	8001d16 <HAL_NVIC_EnableIRQ>
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	58024400 	.word	0x58024400
 80015b0:	40000400 	.word	0x40000400

080015b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d4:	d11e      	bne.n	8001614 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_TIM_MspPostInit+0x68>)
 80015d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015dc:	4a0f      	ldr	r2, [pc, #60]	; (800161c <HAL_TIM_MspPostInit+0x68>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <HAL_TIM_MspPostInit+0x68>)
 80015e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80015f4:	2322      	movs	r3, #34	; 0x22
 80015f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001604:	2301      	movs	r3, #1
 8001606:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	4619      	mov	r1, r3
 800160e:	4804      	ldr	r0, [pc, #16]	; (8001620 <HAL_TIM_MspPostInit+0x6c>)
 8001610:	f001 f900 	bl	8002814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	3720      	adds	r7, #32
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	58024400 	.word	0x58024400
 8001620:	58020000 	.word	0x58020000

08001624 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001628:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <MX_UART4_Init+0xa0>)
 800162a:	4a27      	ldr	r2, [pc, #156]	; (80016c8 <MX_UART4_Init+0xa4>)
 800162c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800162e:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <MX_UART4_Init+0xa0>)
 8001630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001634:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <MX_UART4_Init+0xa0>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <MX_UART4_Init+0xa0>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001642:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <MX_UART4_Init+0xa0>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <MX_UART4_Init+0xa0>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <MX_UART4_Init+0xa0>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <MX_UART4_Init+0xa0>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800165a:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <MX_UART4_Init+0xa0>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <MX_UART4_Init+0xa0>)
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <MX_UART4_Init+0xa0>)
 8001668:	2200      	movs	r2, #0
 800166a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800166c:	4815      	ldr	r0, [pc, #84]	; (80016c4 <MX_UART4_Init+0xa0>)
 800166e:	f005 fb2b 	bl	8006cc8 <HAL_UART_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001678:	f7ff fd7e 	bl	8001178 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800167c:	2100      	movs	r1, #0
 800167e:	4811      	ldr	r0, [pc, #68]	; (80016c4 <MX_UART4_Init+0xa0>)
 8001680:	f008 f9b9 	bl	80099f6 <HAL_UARTEx_SetTxFifoThreshold>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800168a:	f7ff fd75 	bl	8001178 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800168e:	2100      	movs	r1, #0
 8001690:	480c      	ldr	r0, [pc, #48]	; (80016c4 <MX_UART4_Init+0xa0>)
 8001692:	f008 f9ee 	bl	8009a72 <HAL_UARTEx_SetRxFifoThreshold>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800169c:	f7ff fd6c 	bl	8001178 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80016a0:	4808      	ldr	r0, [pc, #32]	; (80016c4 <MX_UART4_Init+0xa0>)
 80016a2:	f008 f96f 	bl	8009984 <HAL_UARTEx_DisableFifoMode>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80016ac:	f7ff fd64 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  // Activation de l'interruption de transmission de l'UART4
  HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2100      	movs	r1, #0
 80016b4:	2034      	movs	r0, #52	; 0x34
 80016b6:	f000 fb14 	bl	8001ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 80016ba:	2034      	movs	r0, #52	; 0x34
 80016bc:	f000 fb2b 	bl	8001d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE END UART4_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	24000564 	.word	0x24000564
 80016c8:	40004c00 	.word	0x40004c00

080016cc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <MX_USART3_UART_Init+0x90>)
 80016d2:	4a23      	ldr	r2, [pc, #140]	; (8001760 <MX_USART3_UART_Init+0x94>)
 80016d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016d6:	4b21      	ldr	r3, [pc, #132]	; (800175c <MX_USART3_UART_Init+0x90>)
 80016d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016de:	4b1f      	ldr	r3, [pc, #124]	; (800175c <MX_USART3_UART_Init+0x90>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016e4:	4b1d      	ldr	r3, [pc, #116]	; (800175c <MX_USART3_UART_Init+0x90>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016ea:	4b1c      	ldr	r3, [pc, #112]	; (800175c <MX_USART3_UART_Init+0x90>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <MX_USART3_UART_Init+0x90>)
 80016f2:	220c      	movs	r2, #12
 80016f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <MX_USART3_UART_Init+0x90>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_USART3_UART_Init+0x90>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001702:	4b16      	ldr	r3, [pc, #88]	; (800175c <MX_USART3_UART_Init+0x90>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_USART3_UART_Init+0x90>)
 800170a:	2200      	movs	r2, #0
 800170c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800170e:	4b13      	ldr	r3, [pc, #76]	; (800175c <MX_USART3_UART_Init+0x90>)
 8001710:	2200      	movs	r2, #0
 8001712:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001714:	4811      	ldr	r0, [pc, #68]	; (800175c <MX_USART3_UART_Init+0x90>)
 8001716:	f005 fad7 	bl	8006cc8 <HAL_UART_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001720:	f7ff fd2a 	bl	8001178 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001724:	2100      	movs	r1, #0
 8001726:	480d      	ldr	r0, [pc, #52]	; (800175c <MX_USART3_UART_Init+0x90>)
 8001728:	f008 f965 	bl	80099f6 <HAL_UARTEx_SetTxFifoThreshold>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001732:	f7ff fd21 	bl	8001178 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001736:	2100      	movs	r1, #0
 8001738:	4808      	ldr	r0, [pc, #32]	; (800175c <MX_USART3_UART_Init+0x90>)
 800173a:	f008 f99a 	bl	8009a72 <HAL_UARTEx_SetRxFifoThreshold>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001744:	f7ff fd18 	bl	8001178 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <MX_USART3_UART_Init+0x90>)
 800174a:	f008 f91b 	bl	8009984 <HAL_UARTEx_DisableFifoMode>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001754:	f7ff fd10 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	240005f8 	.word	0x240005f8
 8001760:	40004800 	.word	0x40004800

08001764 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b0be      	sub	sp, #248	; 0xf8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800177c:	f107 0320 	add.w	r3, r7, #32
 8001780:	22c0      	movs	r2, #192	; 0xc0
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f008 fa39 	bl	8009bfc <memset>
  if(uartHandle->Instance==UART4)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a63      	ldr	r2, [pc, #396]	; (800191c <HAL_UART_MspInit+0x1b8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d172      	bne.n	800187a <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001794:	f04f 0202 	mov.w	r2, #2
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017a6:	f107 0320 	add.w	r3, r7, #32
 80017aa:	4618      	mov	r0, r3
 80017ac:	f002 fa2e 	bl	8003c0c <HAL_RCCEx_PeriphCLKConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80017b6:	f7ff fcdf 	bl	8001178 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017ba:	4b59      	ldr	r3, [pc, #356]	; (8001920 <HAL_UART_MspInit+0x1bc>)
 80017bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017c0:	4a57      	ldr	r2, [pc, #348]	; (8001920 <HAL_UART_MspInit+0x1bc>)
 80017c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017c6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80017ca:	4b55      	ldr	r3, [pc, #340]	; (8001920 <HAL_UART_MspInit+0x1bc>)
 80017cc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d8:	4b51      	ldr	r3, [pc, #324]	; (8001920 <HAL_UART_MspInit+0x1bc>)
 80017da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017de:	4a50      	ldr	r2, [pc, #320]	; (8001920 <HAL_UART_MspInit+0x1bc>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80017e8:	4b4d      	ldr	r3, [pc, #308]	; (8001920 <HAL_UART_MspInit+0x1bc>)
 80017ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	61bb      	str	r3, [r7, #24]
 80017f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f6:	4b4a      	ldr	r3, [pc, #296]	; (8001920 <HAL_UART_MspInit+0x1bc>)
 80017f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017fc:	4a48      	ldr	r2, [pc, #288]	; (8001920 <HAL_UART_MspInit+0x1bc>)
 80017fe:	f043 0308 	orr.w	r3, r3, #8
 8001802:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001806:	4b46      	ldr	r3, [pc, #280]	; (8001920 <HAL_UART_MspInit+0x1bc>)
 8001808:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001814:	2301      	movs	r3, #1
 8001816:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800182c:	2308      	movs	r3, #8
 800182e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001836:	4619      	mov	r1, r3
 8001838:	483a      	ldr	r0, [pc, #232]	; (8001924 <HAL_UART_MspInit+0x1c0>)
 800183a:	f000 ffeb 	bl	8002814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800183e:	2301      	movs	r3, #1
 8001840:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001856:	2308      	movs	r3, #8
 8001858:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800185c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001860:	4619      	mov	r1, r3
 8001862:	4831      	ldr	r0, [pc, #196]	; (8001928 <HAL_UART_MspInit+0x1c4>)
 8001864:	f000 ffd6 	bl	8002814 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	2034      	movs	r0, #52	; 0x34
 800186e:	f000 fa38 	bl	8001ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001872:	2034      	movs	r0, #52	; 0x34
 8001874:	f000 fa4f 	bl	8001d16 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001878:	e04b      	b.n	8001912 <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART3)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a2b      	ldr	r2, [pc, #172]	; (800192c <HAL_UART_MspInit+0x1c8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d146      	bne.n	8001912 <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001884:	f04f 0202 	mov.w	r2, #2
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001896:	f107 0320 	add.w	r3, r7, #32
 800189a:	4618      	mov	r0, r3
 800189c:	f002 f9b6 	bl	8003c0c <HAL_RCCEx_PeriphCLKConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_UART_MspInit+0x146>
      Error_Handler();
 80018a6:	f7ff fc67 	bl	8001178 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_UART_MspInit+0x1bc>)
 80018ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80018b0:	4a1b      	ldr	r2, [pc, #108]	; (8001920 <HAL_UART_MspInit+0x1bc>)
 80018b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80018ba:	4b19      	ldr	r3, [pc, #100]	; (8001920 <HAL_UART_MspInit+0x1bc>)
 80018bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80018c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c8:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_UART_MspInit+0x1bc>)
 80018ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018ce:	4a14      	ldr	r2, [pc, #80]	; (8001920 <HAL_UART_MspInit+0x1bc>)
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_UART_MspInit+0x1bc>)
 80018da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80018e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001900:	2307      	movs	r3, #7
 8001902:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001906:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800190a:	4619      	mov	r1, r3
 800190c:	4806      	ldr	r0, [pc, #24]	; (8001928 <HAL_UART_MspInit+0x1c4>)
 800190e:	f000 ff81 	bl	8002814 <HAL_GPIO_Init>
}
 8001912:	bf00      	nop
 8001914:	37f8      	adds	r7, #248	; 0xf8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40004c00 	.word	0x40004c00
 8001920:	58024400 	.word	0x58024400
 8001924:	58020000 	.word	0x58020000
 8001928:	58020c00 	.word	0x58020c00
 800192c:	40004800 	.word	0x40004800

08001930 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a05      	ldr	r2, [pc, #20]	; (8001954 <HAL_UART_RxCpltCallback+0x24>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d104      	bne.n	800194c <HAL_UART_RxCpltCallback+0x1c>
	{
		RPICom_DecodeBinaryMessage();
 8001942:	f7ff f959 	bl	8000bf8 <RPICom_DecodeBinaryMessage>
		RPICom_UartActivate(&hRPICom);
 8001946:	4804      	ldr	r0, [pc, #16]	; (8001958 <HAL_UART_RxCpltCallback+0x28>)
 8001948:	f7ff f926 	bl	8000b98 <RPICom_UartActivate>
	}
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40004c00 	.word	0x40004c00
 8001958:	240000a0 	.word	0x240000a0

0800195c <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800196c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001970:	f7ff fc98 	bl	80012a4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001976:	490d      	ldr	r1, [pc, #52]	; (80019ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001978:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800197c:	e002      	b.n	8001984 <LoopCopyDataInit>

0800197e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001982:	3304      	adds	r3, #4

08001984 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001988:	d3f9      	bcc.n	800197e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800198c:	4c0a      	ldr	r4, [pc, #40]	; (80019b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001990:	e001      	b.n	8001996 <LoopFillZerobss>

08001992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001994:	3204      	adds	r2, #4

08001996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001998:	d3fb      	bcc.n	8001992 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800199a:	f008 f8fd 	bl	8009b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800199e:	f7ff fb39 	bl	8001014 <main>
  bx  lr
 80019a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019a4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80019a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019ac:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 80019b0:	0800a630 	.word	0x0800a630
  ldr r2, =_sbss
 80019b4:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 80019b8:	240006a0 	.word	0x240006a0

080019bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019bc:	e7fe      	b.n	80019bc <ADC_IRQHandler>
	...

080019c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c6:	2003      	movs	r0, #3
 80019c8:	f000 f980 	bl	8001ccc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80019cc:	f001 ff48 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_Init+0x68>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	0a1b      	lsrs	r3, r3, #8
 80019d8:	f003 030f 	and.w	r3, r3, #15
 80019dc:	4913      	ldr	r1, [pc, #76]	; (8001a2c <HAL_Init+0x6c>)
 80019de:	5ccb      	ldrb	r3, [r1, r3]
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	fa22 f303 	lsr.w	r3, r2, r3
 80019e8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_Init+0x68>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	4a0e      	ldr	r2, [pc, #56]	; (8001a2c <HAL_Init+0x6c>)
 80019f4:	5cd3      	ldrb	r3, [r2, r3]
 80019f6:	f003 031f 	and.w	r3, r3, #31
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001a00:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <HAL_Init+0x70>)
 8001a02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a04:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <HAL_Init+0x74>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f000 f814 	bl	8001a38 <HAL_InitTick>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e002      	b.n	8001a20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1a:	f7ff fbb3 	bl	8001184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	58024400 	.word	0x58024400
 8001a2c:	0800a5b4 	.word	0x0800a5b4
 8001a30:	24000014 	.word	0x24000014
 8001a34:	24000010 	.word	0x24000010

08001a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a40:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_InitTick+0x60>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e021      	b.n	8001a90 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <HAL_InitTick+0x64>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <HAL_InitTick+0x60>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4619      	mov	r1, r3
 8001a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f965 	bl	8001d32 <HAL_SYSTICK_Config>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00e      	b.n	8001a90 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b0f      	cmp	r3, #15
 8001a76:	d80a      	bhi.n	8001a8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a80:	f000 f92f 	bl	8001ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a84:	4a06      	ldr	r2, [pc, #24]	; (8001aa0 <HAL_InitTick+0x68>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e000      	b.n	8001a90 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2400001c 	.word	0x2400001c
 8001a9c:	24000010 	.word	0x24000010
 8001aa0:	24000018 	.word	0x24000018

08001aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_IncTick+0x20>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x24>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <HAL_IncTick+0x24>)
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	2400001c 	.word	0x2400001c
 8001ac8:	2400068c 	.word	0x2400068c

08001acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_GetTick+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	2400068c 	.word	0x2400068c

08001ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aec:	f7ff ffee 	bl	8001acc <HAL_GetTick>
 8001af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001afc:	d005      	beq.n	8001b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_Delay+0x44>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b0a:	bf00      	nop
 8001b0c:	f7ff ffde 	bl	8001acc <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d8f7      	bhi.n	8001b0c <HAL_Delay+0x28>
  {
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2400001c 	.word	0x2400001c

08001b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <__NVIC_SetPriorityGrouping+0x40>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <__NVIC_SetPriorityGrouping+0x40>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00
 8001b70:	05fa0000 	.word	0x05fa0000

08001b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <__NVIC_GetPriorityGrouping+0x18>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0307 	and.w	r3, r3, #7
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	db0b      	blt.n	8001bba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	f003 021f 	and.w	r2, r3, #31
 8001ba8:	4907      	ldr	r1, [pc, #28]	; (8001bc8 <__NVIC_EnableIRQ+0x38>)
 8001baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000e100 	.word	0xe000e100

08001bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6039      	str	r1, [r7, #0]
 8001bd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	db0a      	blt.n	8001bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	490c      	ldr	r1, [pc, #48]	; (8001c18 <__NVIC_SetPriority+0x4c>)
 8001be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bea:	0112      	lsls	r2, r2, #4
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	440b      	add	r3, r1
 8001bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf4:	e00a      	b.n	8001c0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4908      	ldr	r1, [pc, #32]	; (8001c1c <__NVIC_SetPriority+0x50>)
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	3b04      	subs	r3, #4
 8001c04:	0112      	lsls	r2, r2, #4
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	440b      	add	r3, r1
 8001c0a:	761a      	strb	r2, [r3, #24]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000e100 	.word	0xe000e100
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	; 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f1c3 0307 	rsb	r3, r3, #7
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	bf28      	it	cs
 8001c3e:	2304      	movcs	r3, #4
 8001c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3304      	adds	r3, #4
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d902      	bls.n	8001c50 <NVIC_EncodePriority+0x30>
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3b03      	subs	r3, #3
 8001c4e:	e000      	b.n	8001c52 <NVIC_EncodePriority+0x32>
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	401a      	ands	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	43d9      	mvns	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	4313      	orrs	r3, r2
         );
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3724      	adds	r7, #36	; 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c98:	d301      	bcc.n	8001c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e00f      	b.n	8001cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <SysTick_Config+0x40>)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cac:	f7ff ff8e 	bl	8001bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <SysTick_Config+0x40>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <SysTick_Config+0x40>)
 8001cb8:	2207      	movs	r2, #7
 8001cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	e000e010 	.word	0xe000e010

08001ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ff29 	bl	8001b2c <__NVIC_SetPriorityGrouping>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf0:	f7ff ff40 	bl	8001b74 <__NVIC_GetPriorityGrouping>
 8001cf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	6978      	ldr	r0, [r7, #20]
 8001cfc:	f7ff ff90 	bl	8001c20 <NVIC_EncodePriority>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff5f 	bl	8001bcc <__NVIC_SetPriority>
}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff33 	bl	8001b90 <__NVIC_EnableIRQ>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ffa4 	bl	8001c88 <SysTick_Config>
 8001d40:	4603      	mov	r3, r0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001d54:	f7ff feba 	bl	8001acc <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e2dc      	b.n	800231e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d008      	beq.n	8001d82 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e2cd      	b.n	800231e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a76      	ldr	r2, [pc, #472]	; (8001f60 <HAL_DMA_Abort+0x214>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d04a      	beq.n	8001e22 <HAL_DMA_Abort+0xd6>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a74      	ldr	r2, [pc, #464]	; (8001f64 <HAL_DMA_Abort+0x218>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d045      	beq.n	8001e22 <HAL_DMA_Abort+0xd6>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a73      	ldr	r2, [pc, #460]	; (8001f68 <HAL_DMA_Abort+0x21c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d040      	beq.n	8001e22 <HAL_DMA_Abort+0xd6>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a71      	ldr	r2, [pc, #452]	; (8001f6c <HAL_DMA_Abort+0x220>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d03b      	beq.n	8001e22 <HAL_DMA_Abort+0xd6>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a70      	ldr	r2, [pc, #448]	; (8001f70 <HAL_DMA_Abort+0x224>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d036      	beq.n	8001e22 <HAL_DMA_Abort+0xd6>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a6e      	ldr	r2, [pc, #440]	; (8001f74 <HAL_DMA_Abort+0x228>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d031      	beq.n	8001e22 <HAL_DMA_Abort+0xd6>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a6d      	ldr	r2, [pc, #436]	; (8001f78 <HAL_DMA_Abort+0x22c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d02c      	beq.n	8001e22 <HAL_DMA_Abort+0xd6>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a6b      	ldr	r2, [pc, #428]	; (8001f7c <HAL_DMA_Abort+0x230>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d027      	beq.n	8001e22 <HAL_DMA_Abort+0xd6>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a6a      	ldr	r2, [pc, #424]	; (8001f80 <HAL_DMA_Abort+0x234>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d022      	beq.n	8001e22 <HAL_DMA_Abort+0xd6>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a68      	ldr	r2, [pc, #416]	; (8001f84 <HAL_DMA_Abort+0x238>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d01d      	beq.n	8001e22 <HAL_DMA_Abort+0xd6>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a67      	ldr	r2, [pc, #412]	; (8001f88 <HAL_DMA_Abort+0x23c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d018      	beq.n	8001e22 <HAL_DMA_Abort+0xd6>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a65      	ldr	r2, [pc, #404]	; (8001f8c <HAL_DMA_Abort+0x240>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_DMA_Abort+0xd6>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a64      	ldr	r2, [pc, #400]	; (8001f90 <HAL_DMA_Abort+0x244>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d00e      	beq.n	8001e22 <HAL_DMA_Abort+0xd6>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a62      	ldr	r2, [pc, #392]	; (8001f94 <HAL_DMA_Abort+0x248>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d009      	beq.n	8001e22 <HAL_DMA_Abort+0xd6>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a61      	ldr	r2, [pc, #388]	; (8001f98 <HAL_DMA_Abort+0x24c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d004      	beq.n	8001e22 <HAL_DMA_Abort+0xd6>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a5f      	ldr	r2, [pc, #380]	; (8001f9c <HAL_DMA_Abort+0x250>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_DMA_Abort+0xda>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <HAL_DMA_Abort+0xdc>
 8001e26:	2300      	movs	r3, #0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d013      	beq.n	8001e54 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 021e 	bic.w	r2, r2, #30
 8001e3a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	695a      	ldr	r2, [r3, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e4a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	e00a      	b.n	8001e6a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 020e 	bic.w	r2, r2, #14
 8001e62:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a3c      	ldr	r2, [pc, #240]	; (8001f60 <HAL_DMA_Abort+0x214>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d072      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a3a      	ldr	r2, [pc, #232]	; (8001f64 <HAL_DMA_Abort+0x218>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d06d      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a39      	ldr	r2, [pc, #228]	; (8001f68 <HAL_DMA_Abort+0x21c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d068      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a37      	ldr	r2, [pc, #220]	; (8001f6c <HAL_DMA_Abort+0x220>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d063      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a36      	ldr	r2, [pc, #216]	; (8001f70 <HAL_DMA_Abort+0x224>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d05e      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a34      	ldr	r2, [pc, #208]	; (8001f74 <HAL_DMA_Abort+0x228>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d059      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a33      	ldr	r2, [pc, #204]	; (8001f78 <HAL_DMA_Abort+0x22c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d054      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a31      	ldr	r2, [pc, #196]	; (8001f7c <HAL_DMA_Abort+0x230>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d04f      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a30      	ldr	r2, [pc, #192]	; (8001f80 <HAL_DMA_Abort+0x234>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d04a      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a2e      	ldr	r2, [pc, #184]	; (8001f84 <HAL_DMA_Abort+0x238>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d045      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a2d      	ldr	r2, [pc, #180]	; (8001f88 <HAL_DMA_Abort+0x23c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d040      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a2b      	ldr	r2, [pc, #172]	; (8001f8c <HAL_DMA_Abort+0x240>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d03b      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a2a      	ldr	r2, [pc, #168]	; (8001f90 <HAL_DMA_Abort+0x244>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d036      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a28      	ldr	r2, [pc, #160]	; (8001f94 <HAL_DMA_Abort+0x248>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d031      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a27      	ldr	r2, [pc, #156]	; (8001f98 <HAL_DMA_Abort+0x24c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d02c      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a25      	ldr	r2, [pc, #148]	; (8001f9c <HAL_DMA_Abort+0x250>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d027      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a24      	ldr	r2, [pc, #144]	; (8001fa0 <HAL_DMA_Abort+0x254>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d022      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a22      	ldr	r2, [pc, #136]	; (8001fa4 <HAL_DMA_Abort+0x258>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d01d      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a21      	ldr	r2, [pc, #132]	; (8001fa8 <HAL_DMA_Abort+0x25c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d018      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a1f      	ldr	r2, [pc, #124]	; (8001fac <HAL_DMA_Abort+0x260>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d013      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a1e      	ldr	r2, [pc, #120]	; (8001fb0 <HAL_DMA_Abort+0x264>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d00e      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a1c      	ldr	r2, [pc, #112]	; (8001fb4 <HAL_DMA_Abort+0x268>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d009      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1b      	ldr	r2, [pc, #108]	; (8001fb8 <HAL_DMA_Abort+0x26c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d004      	beq.n	8001f5a <HAL_DMA_Abort+0x20e>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a19      	ldr	r2, [pc, #100]	; (8001fbc <HAL_DMA_Abort+0x270>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d132      	bne.n	8001fc0 <HAL_DMA_Abort+0x274>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e031      	b.n	8001fc2 <HAL_DMA_Abort+0x276>
 8001f5e:	bf00      	nop
 8001f60:	40020010 	.word	0x40020010
 8001f64:	40020028 	.word	0x40020028
 8001f68:	40020040 	.word	0x40020040
 8001f6c:	40020058 	.word	0x40020058
 8001f70:	40020070 	.word	0x40020070
 8001f74:	40020088 	.word	0x40020088
 8001f78:	400200a0 	.word	0x400200a0
 8001f7c:	400200b8 	.word	0x400200b8
 8001f80:	40020410 	.word	0x40020410
 8001f84:	40020428 	.word	0x40020428
 8001f88:	40020440 	.word	0x40020440
 8001f8c:	40020458 	.word	0x40020458
 8001f90:	40020470 	.word	0x40020470
 8001f94:	40020488 	.word	0x40020488
 8001f98:	400204a0 	.word	0x400204a0
 8001f9c:	400204b8 	.word	0x400204b8
 8001fa0:	58025408 	.word	0x58025408
 8001fa4:	5802541c 	.word	0x5802541c
 8001fa8:	58025430 	.word	0x58025430
 8001fac:	58025444 	.word	0x58025444
 8001fb0:	58025458 	.word	0x58025458
 8001fb4:	5802546c 	.word	0x5802546c
 8001fb8:	58025480 	.word	0x58025480
 8001fbc:	58025494 	.word	0x58025494
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d007      	beq.n	8001fd6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a6d      	ldr	r2, [pc, #436]	; (8002190 <HAL_DMA_Abort+0x444>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d04a      	beq.n	8002076 <HAL_DMA_Abort+0x32a>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a6b      	ldr	r2, [pc, #428]	; (8002194 <HAL_DMA_Abort+0x448>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d045      	beq.n	8002076 <HAL_DMA_Abort+0x32a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a6a      	ldr	r2, [pc, #424]	; (8002198 <HAL_DMA_Abort+0x44c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d040      	beq.n	8002076 <HAL_DMA_Abort+0x32a>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a68      	ldr	r2, [pc, #416]	; (800219c <HAL_DMA_Abort+0x450>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d03b      	beq.n	8002076 <HAL_DMA_Abort+0x32a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a67      	ldr	r2, [pc, #412]	; (80021a0 <HAL_DMA_Abort+0x454>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d036      	beq.n	8002076 <HAL_DMA_Abort+0x32a>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a65      	ldr	r2, [pc, #404]	; (80021a4 <HAL_DMA_Abort+0x458>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d031      	beq.n	8002076 <HAL_DMA_Abort+0x32a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a64      	ldr	r2, [pc, #400]	; (80021a8 <HAL_DMA_Abort+0x45c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d02c      	beq.n	8002076 <HAL_DMA_Abort+0x32a>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a62      	ldr	r2, [pc, #392]	; (80021ac <HAL_DMA_Abort+0x460>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d027      	beq.n	8002076 <HAL_DMA_Abort+0x32a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a61      	ldr	r2, [pc, #388]	; (80021b0 <HAL_DMA_Abort+0x464>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d022      	beq.n	8002076 <HAL_DMA_Abort+0x32a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a5f      	ldr	r2, [pc, #380]	; (80021b4 <HAL_DMA_Abort+0x468>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01d      	beq.n	8002076 <HAL_DMA_Abort+0x32a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a5e      	ldr	r2, [pc, #376]	; (80021b8 <HAL_DMA_Abort+0x46c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d018      	beq.n	8002076 <HAL_DMA_Abort+0x32a>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a5c      	ldr	r2, [pc, #368]	; (80021bc <HAL_DMA_Abort+0x470>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d013      	beq.n	8002076 <HAL_DMA_Abort+0x32a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a5b      	ldr	r2, [pc, #364]	; (80021c0 <HAL_DMA_Abort+0x474>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d00e      	beq.n	8002076 <HAL_DMA_Abort+0x32a>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a59      	ldr	r2, [pc, #356]	; (80021c4 <HAL_DMA_Abort+0x478>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d009      	beq.n	8002076 <HAL_DMA_Abort+0x32a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a58      	ldr	r2, [pc, #352]	; (80021c8 <HAL_DMA_Abort+0x47c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d004      	beq.n	8002076 <HAL_DMA_Abort+0x32a>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a56      	ldr	r2, [pc, #344]	; (80021cc <HAL_DMA_Abort+0x480>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d108      	bne.n	8002088 <HAL_DMA_Abort+0x33c>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0201 	bic.w	r2, r2, #1
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	e007      	b.n	8002098 <HAL_DMA_Abort+0x34c>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0201 	bic.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002098:	e013      	b.n	80020c2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800209a:	f7ff fd17 	bl	8001acc <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b05      	cmp	r3, #5
 80020a6:	d90c      	bls.n	80020c2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2220      	movs	r2, #32
 80020ac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2203      	movs	r2, #3
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e12d      	b.n	800231e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1e5      	bne.n	800209a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a2f      	ldr	r2, [pc, #188]	; (8002190 <HAL_DMA_Abort+0x444>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d04a      	beq.n	800216e <HAL_DMA_Abort+0x422>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a2d      	ldr	r2, [pc, #180]	; (8002194 <HAL_DMA_Abort+0x448>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d045      	beq.n	800216e <HAL_DMA_Abort+0x422>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a2c      	ldr	r2, [pc, #176]	; (8002198 <HAL_DMA_Abort+0x44c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d040      	beq.n	800216e <HAL_DMA_Abort+0x422>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a2a      	ldr	r2, [pc, #168]	; (800219c <HAL_DMA_Abort+0x450>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d03b      	beq.n	800216e <HAL_DMA_Abort+0x422>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a29      	ldr	r2, [pc, #164]	; (80021a0 <HAL_DMA_Abort+0x454>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d036      	beq.n	800216e <HAL_DMA_Abort+0x422>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a27      	ldr	r2, [pc, #156]	; (80021a4 <HAL_DMA_Abort+0x458>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d031      	beq.n	800216e <HAL_DMA_Abort+0x422>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a26      	ldr	r2, [pc, #152]	; (80021a8 <HAL_DMA_Abort+0x45c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d02c      	beq.n	800216e <HAL_DMA_Abort+0x422>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a24      	ldr	r2, [pc, #144]	; (80021ac <HAL_DMA_Abort+0x460>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d027      	beq.n	800216e <HAL_DMA_Abort+0x422>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a23      	ldr	r2, [pc, #140]	; (80021b0 <HAL_DMA_Abort+0x464>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d022      	beq.n	800216e <HAL_DMA_Abort+0x422>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a21      	ldr	r2, [pc, #132]	; (80021b4 <HAL_DMA_Abort+0x468>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01d      	beq.n	800216e <HAL_DMA_Abort+0x422>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a20      	ldr	r2, [pc, #128]	; (80021b8 <HAL_DMA_Abort+0x46c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d018      	beq.n	800216e <HAL_DMA_Abort+0x422>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <HAL_DMA_Abort+0x470>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <HAL_DMA_Abort+0x422>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a1d      	ldr	r2, [pc, #116]	; (80021c0 <HAL_DMA_Abort+0x474>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00e      	beq.n	800216e <HAL_DMA_Abort+0x422>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1b      	ldr	r2, [pc, #108]	; (80021c4 <HAL_DMA_Abort+0x478>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d009      	beq.n	800216e <HAL_DMA_Abort+0x422>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1a      	ldr	r2, [pc, #104]	; (80021c8 <HAL_DMA_Abort+0x47c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d004      	beq.n	800216e <HAL_DMA_Abort+0x422>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a18      	ldr	r2, [pc, #96]	; (80021cc <HAL_DMA_Abort+0x480>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d101      	bne.n	8002172 <HAL_DMA_Abort+0x426>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_DMA_Abort+0x428>
 8002172:	2300      	movs	r3, #0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d02b      	beq.n	80021d0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	f003 031f 	and.w	r3, r3, #31
 8002186:	223f      	movs	r2, #63	; 0x3f
 8002188:	409a      	lsls	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	e02a      	b.n	80021e6 <HAL_DMA_Abort+0x49a>
 8002190:	40020010 	.word	0x40020010
 8002194:	40020028 	.word	0x40020028
 8002198:	40020040 	.word	0x40020040
 800219c:	40020058 	.word	0x40020058
 80021a0:	40020070 	.word	0x40020070
 80021a4:	40020088 	.word	0x40020088
 80021a8:	400200a0 	.word	0x400200a0
 80021ac:	400200b8 	.word	0x400200b8
 80021b0:	40020410 	.word	0x40020410
 80021b4:	40020428 	.word	0x40020428
 80021b8:	40020440 	.word	0x40020440
 80021bc:	40020458 	.word	0x40020458
 80021c0:	40020470 	.word	0x40020470
 80021c4:	40020488 	.word	0x40020488
 80021c8:	400204a0 	.word	0x400204a0
 80021cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	2201      	movs	r2, #1
 80021e0:	409a      	lsls	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a4f      	ldr	r2, [pc, #316]	; (8002328 <HAL_DMA_Abort+0x5dc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d072      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a4d      	ldr	r2, [pc, #308]	; (800232c <HAL_DMA_Abort+0x5e0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d06d      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a4c      	ldr	r2, [pc, #304]	; (8002330 <HAL_DMA_Abort+0x5e4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d068      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a4a      	ldr	r2, [pc, #296]	; (8002334 <HAL_DMA_Abort+0x5e8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d063      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a49      	ldr	r2, [pc, #292]	; (8002338 <HAL_DMA_Abort+0x5ec>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d05e      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a47      	ldr	r2, [pc, #284]	; (800233c <HAL_DMA_Abort+0x5f0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d059      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a46      	ldr	r2, [pc, #280]	; (8002340 <HAL_DMA_Abort+0x5f4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d054      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a44      	ldr	r2, [pc, #272]	; (8002344 <HAL_DMA_Abort+0x5f8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d04f      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a43      	ldr	r2, [pc, #268]	; (8002348 <HAL_DMA_Abort+0x5fc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d04a      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a41      	ldr	r2, [pc, #260]	; (800234c <HAL_DMA_Abort+0x600>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d045      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a40      	ldr	r2, [pc, #256]	; (8002350 <HAL_DMA_Abort+0x604>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d040      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a3e      	ldr	r2, [pc, #248]	; (8002354 <HAL_DMA_Abort+0x608>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d03b      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a3d      	ldr	r2, [pc, #244]	; (8002358 <HAL_DMA_Abort+0x60c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d036      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a3b      	ldr	r2, [pc, #236]	; (800235c <HAL_DMA_Abort+0x610>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d031      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a3a      	ldr	r2, [pc, #232]	; (8002360 <HAL_DMA_Abort+0x614>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d02c      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a38      	ldr	r2, [pc, #224]	; (8002364 <HAL_DMA_Abort+0x618>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d027      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a37      	ldr	r2, [pc, #220]	; (8002368 <HAL_DMA_Abort+0x61c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d022      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a35      	ldr	r2, [pc, #212]	; (800236c <HAL_DMA_Abort+0x620>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d01d      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a34      	ldr	r2, [pc, #208]	; (8002370 <HAL_DMA_Abort+0x624>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d018      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a32      	ldr	r2, [pc, #200]	; (8002374 <HAL_DMA_Abort+0x628>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d013      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a31      	ldr	r2, [pc, #196]	; (8002378 <HAL_DMA_Abort+0x62c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00e      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a2f      	ldr	r2, [pc, #188]	; (800237c <HAL_DMA_Abort+0x630>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d009      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a2e      	ldr	r2, [pc, #184]	; (8002380 <HAL_DMA_Abort+0x634>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d004      	beq.n	80022d6 <HAL_DMA_Abort+0x58a>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a2c      	ldr	r2, [pc, #176]	; (8002384 <HAL_DMA_Abort+0x638>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d101      	bne.n	80022da <HAL_DMA_Abort+0x58e>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_DMA_Abort+0x590>
 80022da:	2300      	movs	r3, #0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d015      	beq.n	800230c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80022e8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00c      	beq.n	800230c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002300:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800230a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40020010 	.word	0x40020010
 800232c:	40020028 	.word	0x40020028
 8002330:	40020040 	.word	0x40020040
 8002334:	40020058 	.word	0x40020058
 8002338:	40020070 	.word	0x40020070
 800233c:	40020088 	.word	0x40020088
 8002340:	400200a0 	.word	0x400200a0
 8002344:	400200b8 	.word	0x400200b8
 8002348:	40020410 	.word	0x40020410
 800234c:	40020428 	.word	0x40020428
 8002350:	40020440 	.word	0x40020440
 8002354:	40020458 	.word	0x40020458
 8002358:	40020470 	.word	0x40020470
 800235c:	40020488 	.word	0x40020488
 8002360:	400204a0 	.word	0x400204a0
 8002364:	400204b8 	.word	0x400204b8
 8002368:	58025408 	.word	0x58025408
 800236c:	5802541c 	.word	0x5802541c
 8002370:	58025430 	.word	0x58025430
 8002374:	58025444 	.word	0x58025444
 8002378:	58025458 	.word	0x58025458
 800237c:	5802546c 	.word	0x5802546c
 8002380:	58025480 	.word	0x58025480
 8002384:	58025494 	.word	0x58025494

08002388 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e237      	b.n	800280a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d004      	beq.n	80023b0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2280      	movs	r2, #128	; 0x80
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e22c      	b.n	800280a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a5c      	ldr	r2, [pc, #368]	; (8002528 <HAL_DMA_Abort_IT+0x1a0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d04a      	beq.n	8002450 <HAL_DMA_Abort_IT+0xc8>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a5b      	ldr	r2, [pc, #364]	; (800252c <HAL_DMA_Abort_IT+0x1a4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d045      	beq.n	8002450 <HAL_DMA_Abort_IT+0xc8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a59      	ldr	r2, [pc, #356]	; (8002530 <HAL_DMA_Abort_IT+0x1a8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d040      	beq.n	8002450 <HAL_DMA_Abort_IT+0xc8>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a58      	ldr	r2, [pc, #352]	; (8002534 <HAL_DMA_Abort_IT+0x1ac>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d03b      	beq.n	8002450 <HAL_DMA_Abort_IT+0xc8>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a56      	ldr	r2, [pc, #344]	; (8002538 <HAL_DMA_Abort_IT+0x1b0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d036      	beq.n	8002450 <HAL_DMA_Abort_IT+0xc8>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a55      	ldr	r2, [pc, #340]	; (800253c <HAL_DMA_Abort_IT+0x1b4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d031      	beq.n	8002450 <HAL_DMA_Abort_IT+0xc8>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a53      	ldr	r2, [pc, #332]	; (8002540 <HAL_DMA_Abort_IT+0x1b8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d02c      	beq.n	8002450 <HAL_DMA_Abort_IT+0xc8>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a52      	ldr	r2, [pc, #328]	; (8002544 <HAL_DMA_Abort_IT+0x1bc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d027      	beq.n	8002450 <HAL_DMA_Abort_IT+0xc8>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a50      	ldr	r2, [pc, #320]	; (8002548 <HAL_DMA_Abort_IT+0x1c0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d022      	beq.n	8002450 <HAL_DMA_Abort_IT+0xc8>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a4f      	ldr	r2, [pc, #316]	; (800254c <HAL_DMA_Abort_IT+0x1c4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d01d      	beq.n	8002450 <HAL_DMA_Abort_IT+0xc8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a4d      	ldr	r2, [pc, #308]	; (8002550 <HAL_DMA_Abort_IT+0x1c8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d018      	beq.n	8002450 <HAL_DMA_Abort_IT+0xc8>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a4c      	ldr	r2, [pc, #304]	; (8002554 <HAL_DMA_Abort_IT+0x1cc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d013      	beq.n	8002450 <HAL_DMA_Abort_IT+0xc8>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a4a      	ldr	r2, [pc, #296]	; (8002558 <HAL_DMA_Abort_IT+0x1d0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00e      	beq.n	8002450 <HAL_DMA_Abort_IT+0xc8>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a49      	ldr	r2, [pc, #292]	; (800255c <HAL_DMA_Abort_IT+0x1d4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d009      	beq.n	8002450 <HAL_DMA_Abort_IT+0xc8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a47      	ldr	r2, [pc, #284]	; (8002560 <HAL_DMA_Abort_IT+0x1d8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d004      	beq.n	8002450 <HAL_DMA_Abort_IT+0xc8>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a46      	ldr	r2, [pc, #280]	; (8002564 <HAL_DMA_Abort_IT+0x1dc>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d101      	bne.n	8002454 <HAL_DMA_Abort_IT+0xcc>
 8002450:	2301      	movs	r3, #1
 8002452:	e000      	b.n	8002456 <HAL_DMA_Abort_IT+0xce>
 8002454:	2300      	movs	r3, #0
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 8086 	beq.w	8002568 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2204      	movs	r2, #4
 8002460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a2f      	ldr	r2, [pc, #188]	; (8002528 <HAL_DMA_Abort_IT+0x1a0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d04a      	beq.n	8002504 <HAL_DMA_Abort_IT+0x17c>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a2e      	ldr	r2, [pc, #184]	; (800252c <HAL_DMA_Abort_IT+0x1a4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d045      	beq.n	8002504 <HAL_DMA_Abort_IT+0x17c>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a2c      	ldr	r2, [pc, #176]	; (8002530 <HAL_DMA_Abort_IT+0x1a8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d040      	beq.n	8002504 <HAL_DMA_Abort_IT+0x17c>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a2b      	ldr	r2, [pc, #172]	; (8002534 <HAL_DMA_Abort_IT+0x1ac>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d03b      	beq.n	8002504 <HAL_DMA_Abort_IT+0x17c>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a29      	ldr	r2, [pc, #164]	; (8002538 <HAL_DMA_Abort_IT+0x1b0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d036      	beq.n	8002504 <HAL_DMA_Abort_IT+0x17c>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a28      	ldr	r2, [pc, #160]	; (800253c <HAL_DMA_Abort_IT+0x1b4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d031      	beq.n	8002504 <HAL_DMA_Abort_IT+0x17c>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a26      	ldr	r2, [pc, #152]	; (8002540 <HAL_DMA_Abort_IT+0x1b8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d02c      	beq.n	8002504 <HAL_DMA_Abort_IT+0x17c>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a25      	ldr	r2, [pc, #148]	; (8002544 <HAL_DMA_Abort_IT+0x1bc>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d027      	beq.n	8002504 <HAL_DMA_Abort_IT+0x17c>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a23      	ldr	r2, [pc, #140]	; (8002548 <HAL_DMA_Abort_IT+0x1c0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d022      	beq.n	8002504 <HAL_DMA_Abort_IT+0x17c>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a22      	ldr	r2, [pc, #136]	; (800254c <HAL_DMA_Abort_IT+0x1c4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d01d      	beq.n	8002504 <HAL_DMA_Abort_IT+0x17c>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a20      	ldr	r2, [pc, #128]	; (8002550 <HAL_DMA_Abort_IT+0x1c8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d018      	beq.n	8002504 <HAL_DMA_Abort_IT+0x17c>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a1f      	ldr	r2, [pc, #124]	; (8002554 <HAL_DMA_Abort_IT+0x1cc>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d013      	beq.n	8002504 <HAL_DMA_Abort_IT+0x17c>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <HAL_DMA_Abort_IT+0x1d0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00e      	beq.n	8002504 <HAL_DMA_Abort_IT+0x17c>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a1c      	ldr	r2, [pc, #112]	; (800255c <HAL_DMA_Abort_IT+0x1d4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d009      	beq.n	8002504 <HAL_DMA_Abort_IT+0x17c>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a1a      	ldr	r2, [pc, #104]	; (8002560 <HAL_DMA_Abort_IT+0x1d8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d004      	beq.n	8002504 <HAL_DMA_Abort_IT+0x17c>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a19      	ldr	r2, [pc, #100]	; (8002564 <HAL_DMA_Abort_IT+0x1dc>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d108      	bne.n	8002516 <HAL_DMA_Abort_IT+0x18e>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0201 	bic.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e178      	b.n	8002808 <HAL_DMA_Abort_IT+0x480>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0201 	bic.w	r2, r2, #1
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	e16f      	b.n	8002808 <HAL_DMA_Abort_IT+0x480>
 8002528:	40020010 	.word	0x40020010
 800252c:	40020028 	.word	0x40020028
 8002530:	40020040 	.word	0x40020040
 8002534:	40020058 	.word	0x40020058
 8002538:	40020070 	.word	0x40020070
 800253c:	40020088 	.word	0x40020088
 8002540:	400200a0 	.word	0x400200a0
 8002544:	400200b8 	.word	0x400200b8
 8002548:	40020410 	.word	0x40020410
 800254c:	40020428 	.word	0x40020428
 8002550:	40020440 	.word	0x40020440
 8002554:	40020458 	.word	0x40020458
 8002558:	40020470 	.word	0x40020470
 800255c:	40020488 	.word	0x40020488
 8002560:	400204a0 	.word	0x400204a0
 8002564:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 020e 	bic.w	r2, r2, #14
 8002576:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a6c      	ldr	r2, [pc, #432]	; (8002730 <HAL_DMA_Abort_IT+0x3a8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d04a      	beq.n	8002618 <HAL_DMA_Abort_IT+0x290>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a6b      	ldr	r2, [pc, #428]	; (8002734 <HAL_DMA_Abort_IT+0x3ac>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d045      	beq.n	8002618 <HAL_DMA_Abort_IT+0x290>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a69      	ldr	r2, [pc, #420]	; (8002738 <HAL_DMA_Abort_IT+0x3b0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d040      	beq.n	8002618 <HAL_DMA_Abort_IT+0x290>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a68      	ldr	r2, [pc, #416]	; (800273c <HAL_DMA_Abort_IT+0x3b4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d03b      	beq.n	8002618 <HAL_DMA_Abort_IT+0x290>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a66      	ldr	r2, [pc, #408]	; (8002740 <HAL_DMA_Abort_IT+0x3b8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d036      	beq.n	8002618 <HAL_DMA_Abort_IT+0x290>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a65      	ldr	r2, [pc, #404]	; (8002744 <HAL_DMA_Abort_IT+0x3bc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d031      	beq.n	8002618 <HAL_DMA_Abort_IT+0x290>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a63      	ldr	r2, [pc, #396]	; (8002748 <HAL_DMA_Abort_IT+0x3c0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d02c      	beq.n	8002618 <HAL_DMA_Abort_IT+0x290>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a62      	ldr	r2, [pc, #392]	; (800274c <HAL_DMA_Abort_IT+0x3c4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d027      	beq.n	8002618 <HAL_DMA_Abort_IT+0x290>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a60      	ldr	r2, [pc, #384]	; (8002750 <HAL_DMA_Abort_IT+0x3c8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d022      	beq.n	8002618 <HAL_DMA_Abort_IT+0x290>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a5f      	ldr	r2, [pc, #380]	; (8002754 <HAL_DMA_Abort_IT+0x3cc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d01d      	beq.n	8002618 <HAL_DMA_Abort_IT+0x290>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a5d      	ldr	r2, [pc, #372]	; (8002758 <HAL_DMA_Abort_IT+0x3d0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d018      	beq.n	8002618 <HAL_DMA_Abort_IT+0x290>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a5c      	ldr	r2, [pc, #368]	; (800275c <HAL_DMA_Abort_IT+0x3d4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d013      	beq.n	8002618 <HAL_DMA_Abort_IT+0x290>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a5a      	ldr	r2, [pc, #360]	; (8002760 <HAL_DMA_Abort_IT+0x3d8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00e      	beq.n	8002618 <HAL_DMA_Abort_IT+0x290>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a59      	ldr	r2, [pc, #356]	; (8002764 <HAL_DMA_Abort_IT+0x3dc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d009      	beq.n	8002618 <HAL_DMA_Abort_IT+0x290>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a57      	ldr	r2, [pc, #348]	; (8002768 <HAL_DMA_Abort_IT+0x3e0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d004      	beq.n	8002618 <HAL_DMA_Abort_IT+0x290>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a56      	ldr	r2, [pc, #344]	; (800276c <HAL_DMA_Abort_IT+0x3e4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d108      	bne.n	800262a <HAL_DMA_Abort_IT+0x2a2>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0201 	bic.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e007      	b.n	800263a <HAL_DMA_Abort_IT+0x2b2>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0201 	bic.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a3c      	ldr	r2, [pc, #240]	; (8002730 <HAL_DMA_Abort_IT+0x3a8>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d072      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a3a      	ldr	r2, [pc, #232]	; (8002734 <HAL_DMA_Abort_IT+0x3ac>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d06d      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a39      	ldr	r2, [pc, #228]	; (8002738 <HAL_DMA_Abort_IT+0x3b0>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d068      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a37      	ldr	r2, [pc, #220]	; (800273c <HAL_DMA_Abort_IT+0x3b4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d063      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a36      	ldr	r2, [pc, #216]	; (8002740 <HAL_DMA_Abort_IT+0x3b8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d05e      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a34      	ldr	r2, [pc, #208]	; (8002744 <HAL_DMA_Abort_IT+0x3bc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d059      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a33      	ldr	r2, [pc, #204]	; (8002748 <HAL_DMA_Abort_IT+0x3c0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d054      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a31      	ldr	r2, [pc, #196]	; (800274c <HAL_DMA_Abort_IT+0x3c4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d04f      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a30      	ldr	r2, [pc, #192]	; (8002750 <HAL_DMA_Abort_IT+0x3c8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d04a      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a2e      	ldr	r2, [pc, #184]	; (8002754 <HAL_DMA_Abort_IT+0x3cc>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d045      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a2d      	ldr	r2, [pc, #180]	; (8002758 <HAL_DMA_Abort_IT+0x3d0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d040      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a2b      	ldr	r2, [pc, #172]	; (800275c <HAL_DMA_Abort_IT+0x3d4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d03b      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a2a      	ldr	r2, [pc, #168]	; (8002760 <HAL_DMA_Abort_IT+0x3d8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d036      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a28      	ldr	r2, [pc, #160]	; (8002764 <HAL_DMA_Abort_IT+0x3dc>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d031      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a27      	ldr	r2, [pc, #156]	; (8002768 <HAL_DMA_Abort_IT+0x3e0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d02c      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a25      	ldr	r2, [pc, #148]	; (800276c <HAL_DMA_Abort_IT+0x3e4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d027      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a24      	ldr	r2, [pc, #144]	; (8002770 <HAL_DMA_Abort_IT+0x3e8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d022      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a22      	ldr	r2, [pc, #136]	; (8002774 <HAL_DMA_Abort_IT+0x3ec>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01d      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a21      	ldr	r2, [pc, #132]	; (8002778 <HAL_DMA_Abort_IT+0x3f0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d018      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a1f      	ldr	r2, [pc, #124]	; (800277c <HAL_DMA_Abort_IT+0x3f4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d013      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1e      	ldr	r2, [pc, #120]	; (8002780 <HAL_DMA_Abort_IT+0x3f8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00e      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1c      	ldr	r2, [pc, #112]	; (8002784 <HAL_DMA_Abort_IT+0x3fc>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d009      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1b      	ldr	r2, [pc, #108]	; (8002788 <HAL_DMA_Abort_IT+0x400>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d004      	beq.n	800272a <HAL_DMA_Abort_IT+0x3a2>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a19      	ldr	r2, [pc, #100]	; (800278c <HAL_DMA_Abort_IT+0x404>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d132      	bne.n	8002790 <HAL_DMA_Abort_IT+0x408>
 800272a:	2301      	movs	r3, #1
 800272c:	e031      	b.n	8002792 <HAL_DMA_Abort_IT+0x40a>
 800272e:	bf00      	nop
 8002730:	40020010 	.word	0x40020010
 8002734:	40020028 	.word	0x40020028
 8002738:	40020040 	.word	0x40020040
 800273c:	40020058 	.word	0x40020058
 8002740:	40020070 	.word	0x40020070
 8002744:	40020088 	.word	0x40020088
 8002748:	400200a0 	.word	0x400200a0
 800274c:	400200b8 	.word	0x400200b8
 8002750:	40020410 	.word	0x40020410
 8002754:	40020428 	.word	0x40020428
 8002758:	40020440 	.word	0x40020440
 800275c:	40020458 	.word	0x40020458
 8002760:	40020470 	.word	0x40020470
 8002764:	40020488 	.word	0x40020488
 8002768:	400204a0 	.word	0x400204a0
 800276c:	400204b8 	.word	0x400204b8
 8002770:	58025408 	.word	0x58025408
 8002774:	5802541c 	.word	0x5802541c
 8002778:	58025430 	.word	0x58025430
 800277c:	58025444 	.word	0x58025444
 8002780:	58025458 	.word	0x58025458
 8002784:	5802546c 	.word	0x5802546c
 8002788:	58025480 	.word	0x58025480
 800278c:	58025494 	.word	0x58025494
 8002790:	2300      	movs	r3, #0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d028      	beq.n	80027e8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027a4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027aa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	2201      	movs	r2, #1
 80027b6:	409a      	lsls	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80027c4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00c      	beq.n	80027e8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027dc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80027e6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop

08002814 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002814:	b480      	push	{r7}
 8002816:	b089      	sub	sp, #36	; 0x24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002822:	4b89      	ldr	r3, [pc, #548]	; (8002a48 <HAL_GPIO_Init+0x234>)
 8002824:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002826:	e194      	b.n	8002b52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	2101      	movs	r1, #1
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 8186 	beq.w	8002b4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	2b01      	cmp	r3, #1
 800284a:	d005      	beq.n	8002858 <HAL_GPIO_Init+0x44>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d130      	bne.n	80028ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	2203      	movs	r2, #3
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800288e:	2201      	movs	r2, #1
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	091b      	lsrs	r3, r3, #4
 80028a4:	f003 0201 	and.w	r2, r3, #1
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d017      	beq.n	80028f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	2203      	movs	r2, #3
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d123      	bne.n	800294a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	08da      	lsrs	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3208      	adds	r2, #8
 800290a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	220f      	movs	r2, #15
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	08da      	lsrs	r2, r3, #3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3208      	adds	r2, #8
 8002944:	69b9      	ldr	r1, [r7, #24]
 8002946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	2203      	movs	r2, #3
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4013      	ands	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 0203 	and.w	r2, r3, #3
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80e0 	beq.w	8002b4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298c:	4b2f      	ldr	r3, [pc, #188]	; (8002a4c <HAL_GPIO_Init+0x238>)
 800298e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002992:	4a2e      	ldr	r2, [pc, #184]	; (8002a4c <HAL_GPIO_Init+0x238>)
 8002994:	f043 0302 	orr.w	r3, r3, #2
 8002998:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800299c:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <HAL_GPIO_Init+0x238>)
 800299e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029aa:	4a29      	ldr	r2, [pc, #164]	; (8002a50 <HAL_GPIO_Init+0x23c>)
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	089b      	lsrs	r3, r3, #2
 80029b0:	3302      	adds	r3, #2
 80029b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	220f      	movs	r2, #15
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4013      	ands	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a20      	ldr	r2, [pc, #128]	; (8002a54 <HAL_GPIO_Init+0x240>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d052      	beq.n	8002a7c <HAL_GPIO_Init+0x268>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a1f      	ldr	r2, [pc, #124]	; (8002a58 <HAL_GPIO_Init+0x244>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d031      	beq.n	8002a42 <HAL_GPIO_Init+0x22e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a1e      	ldr	r2, [pc, #120]	; (8002a5c <HAL_GPIO_Init+0x248>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d02b      	beq.n	8002a3e <HAL_GPIO_Init+0x22a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a1d      	ldr	r2, [pc, #116]	; (8002a60 <HAL_GPIO_Init+0x24c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d025      	beq.n	8002a3a <HAL_GPIO_Init+0x226>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <HAL_GPIO_Init+0x250>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d01f      	beq.n	8002a36 <HAL_GPIO_Init+0x222>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a1b      	ldr	r2, [pc, #108]	; (8002a68 <HAL_GPIO_Init+0x254>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d019      	beq.n	8002a32 <HAL_GPIO_Init+0x21e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a1a      	ldr	r2, [pc, #104]	; (8002a6c <HAL_GPIO_Init+0x258>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <HAL_GPIO_Init+0x21a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a19      	ldr	r2, [pc, #100]	; (8002a70 <HAL_GPIO_Init+0x25c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00d      	beq.n	8002a2a <HAL_GPIO_Init+0x216>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a18      	ldr	r2, [pc, #96]	; (8002a74 <HAL_GPIO_Init+0x260>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d007      	beq.n	8002a26 <HAL_GPIO_Init+0x212>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <HAL_GPIO_Init+0x264>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d101      	bne.n	8002a22 <HAL_GPIO_Init+0x20e>
 8002a1e:	2309      	movs	r3, #9
 8002a20:	e02d      	b.n	8002a7e <HAL_GPIO_Init+0x26a>
 8002a22:	230a      	movs	r3, #10
 8002a24:	e02b      	b.n	8002a7e <HAL_GPIO_Init+0x26a>
 8002a26:	2308      	movs	r3, #8
 8002a28:	e029      	b.n	8002a7e <HAL_GPIO_Init+0x26a>
 8002a2a:	2307      	movs	r3, #7
 8002a2c:	e027      	b.n	8002a7e <HAL_GPIO_Init+0x26a>
 8002a2e:	2306      	movs	r3, #6
 8002a30:	e025      	b.n	8002a7e <HAL_GPIO_Init+0x26a>
 8002a32:	2305      	movs	r3, #5
 8002a34:	e023      	b.n	8002a7e <HAL_GPIO_Init+0x26a>
 8002a36:	2304      	movs	r3, #4
 8002a38:	e021      	b.n	8002a7e <HAL_GPIO_Init+0x26a>
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e01f      	b.n	8002a7e <HAL_GPIO_Init+0x26a>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e01d      	b.n	8002a7e <HAL_GPIO_Init+0x26a>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e01b      	b.n	8002a7e <HAL_GPIO_Init+0x26a>
 8002a46:	bf00      	nop
 8002a48:	58000080 	.word	0x58000080
 8002a4c:	58024400 	.word	0x58024400
 8002a50:	58000400 	.word	0x58000400
 8002a54:	58020000 	.word	0x58020000
 8002a58:	58020400 	.word	0x58020400
 8002a5c:	58020800 	.word	0x58020800
 8002a60:	58020c00 	.word	0x58020c00
 8002a64:	58021000 	.word	0x58021000
 8002a68:	58021400 	.word	0x58021400
 8002a6c:	58021800 	.word	0x58021800
 8002a70:	58021c00 	.word	0x58021c00
 8002a74:	58022000 	.word	0x58022000
 8002a78:	58022400 	.word	0x58022400
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	f002 0203 	and.w	r2, r2, #3
 8002a84:	0092      	lsls	r2, r2, #2
 8002a86:	4093      	lsls	r3, r2
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a8e:	4938      	ldr	r1, [pc, #224]	; (8002b70 <HAL_GPIO_Init+0x35c>)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	089b      	lsrs	r3, r3, #2
 8002a94:	3302      	adds	r3, #2
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002ac2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002af0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f47f ae63 	bne.w	8002828 <HAL_GPIO_Init+0x14>
  }
}
 8002b62:	bf00      	nop
 8002b64:	bf00      	nop
 8002b66:	3724      	adds	r7, #36	; 0x24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	58000400 	.word	0x58000400

08002b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	807b      	strh	r3, [r7, #2]
 8002b80:	4613      	mov	r3, r2
 8002b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b84:	787b      	ldrb	r3, [r7, #1]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b90:	e003      	b.n	8002b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b92:	887b      	ldrh	r3, [r7, #2]
 8002b94:	041a      	lsls	r2, r3, #16
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	619a      	str	r2, [r3, #24]
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b085      	sub	sp, #20
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bb8:	887a      	ldrh	r2, [r7, #2]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	041a      	lsls	r2, r3, #16
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	43d9      	mvns	r1, r3
 8002bc4:	887b      	ldrh	r3, [r7, #2]
 8002bc6:	400b      	ands	r3, r1
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	619a      	str	r2, [r3, #24]
}
 8002bce:	bf00      	nop
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002be4:	4b29      	ldr	r3, [pc, #164]	; (8002c8c <HAL_PWREx_ConfigSupply+0xb0>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	2b06      	cmp	r3, #6
 8002bee:	d00a      	beq.n	8002c06 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002bf0:	4b26      	ldr	r3, [pc, #152]	; (8002c8c <HAL_PWREx_ConfigSupply+0xb0>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d001      	beq.n	8002c02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e040      	b.n	8002c84 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e03e      	b.n	8002c84 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c06:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <HAL_PWREx_ConfigSupply+0xb0>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002c0e:	491f      	ldr	r1, [pc, #124]	; (8002c8c <HAL_PWREx_ConfigSupply+0xb0>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c16:	f7fe ff59 	bl	8001acc <HAL_GetTick>
 8002c1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c1c:	e009      	b.n	8002c32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c1e:	f7fe ff55 	bl	8001acc <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c2c:	d901      	bls.n	8002c32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e028      	b.n	8002c84 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c32:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <HAL_PWREx_ConfigSupply+0xb0>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3e:	d1ee      	bne.n	8002c1e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b1e      	cmp	r3, #30
 8002c44:	d008      	beq.n	8002c58 <HAL_PWREx_ConfigSupply+0x7c>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b2e      	cmp	r3, #46	; 0x2e
 8002c4a:	d005      	beq.n	8002c58 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b1d      	cmp	r3, #29
 8002c50:	d002      	beq.n	8002c58 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b2d      	cmp	r3, #45	; 0x2d
 8002c56:	d114      	bne.n	8002c82 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002c58:	f7fe ff38 	bl	8001acc <HAL_GetTick>
 8002c5c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002c5e:	e009      	b.n	8002c74 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c60:	f7fe ff34 	bl	8001acc <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c6e:	d901      	bls.n	8002c74 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e007      	b.n	8002c84 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_PWREx_ConfigSupply+0xb0>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c80:	d1ee      	bne.n	8002c60 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	58024800 	.word	0x58024800

08002c90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08c      	sub	sp, #48	; 0x30
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d102      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	f000 bc1f 	b.w	80034e2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80b3 	beq.w	8002e18 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb2:	4b95      	ldr	r3, [pc, #596]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cbc:	4b92      	ldr	r3, [pc, #584]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc4:	2b10      	cmp	r3, #16
 8002cc6:	d007      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x48>
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	2b18      	cmp	r3, #24
 8002ccc:	d112      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x64>
 8002cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd0:	f003 0303 	and.w	r3, r3, #3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d10d      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	4b8b      	ldr	r3, [pc, #556]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 8098 	beq.w	8002e16 <HAL_RCC_OscConfig+0x186>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f040 8093 	bne.w	8002e16 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e3f6      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfc:	d106      	bne.n	8002d0c <HAL_RCC_OscConfig+0x7c>
 8002cfe:	4b82      	ldr	r3, [pc, #520]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a81      	ldr	r2, [pc, #516]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e058      	b.n	8002dbe <HAL_RCC_OscConfig+0x12e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d112      	bne.n	8002d3a <HAL_RCC_OscConfig+0xaa>
 8002d14:	4b7c      	ldr	r3, [pc, #496]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a7b      	ldr	r2, [pc, #492]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	4b79      	ldr	r3, [pc, #484]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a78      	ldr	r2, [pc, #480]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4b76      	ldr	r3, [pc, #472]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a75      	ldr	r2, [pc, #468]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	e041      	b.n	8002dbe <HAL_RCC_OscConfig+0x12e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d42:	d112      	bne.n	8002d6a <HAL_RCC_OscConfig+0xda>
 8002d44:	4b70      	ldr	r3, [pc, #448]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a6f      	ldr	r2, [pc, #444]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	4b6d      	ldr	r3, [pc, #436]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a6c      	ldr	r2, [pc, #432]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	4b6a      	ldr	r3, [pc, #424]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a69      	ldr	r2, [pc, #420]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	e029      	b.n	8002dbe <HAL_RCC_OscConfig+0x12e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002d72:	d112      	bne.n	8002d9a <HAL_RCC_OscConfig+0x10a>
 8002d74:	4b64      	ldr	r3, [pc, #400]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a63      	ldr	r2, [pc, #396]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	4b61      	ldr	r3, [pc, #388]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a60      	ldr	r2, [pc, #384]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4b5e      	ldr	r3, [pc, #376]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a5d      	ldr	r2, [pc, #372]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	e011      	b.n	8002dbe <HAL_RCC_OscConfig+0x12e>
 8002d9a:	4b5b      	ldr	r3, [pc, #364]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a5a      	ldr	r2, [pc, #360]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	4b58      	ldr	r3, [pc, #352]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a57      	ldr	r2, [pc, #348]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002dac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4b55      	ldr	r3, [pc, #340]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a54      	ldr	r2, [pc, #336]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002db8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002dbc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d013      	beq.n	8002dee <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc6:	f7fe fe81 	bl	8001acc <HAL_GetTick>
 8002dca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dce:	f7fe fe7d 	bl	8001acc <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b64      	cmp	r3, #100	; 0x64
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e380      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002de0:	4b49      	ldr	r3, [pc, #292]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x13e>
 8002dec:	e014      	b.n	8002e18 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dee:	f7fe fe6d 	bl	8001acc <HAL_GetTick>
 8002df2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df6:	f7fe fe69 	bl	8001acc <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b64      	cmp	r3, #100	; 0x64
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e36c      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e08:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f0      	bne.n	8002df6 <HAL_RCC_OscConfig+0x166>
 8002e14:	e000      	b.n	8002e18 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e16:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 808c 	beq.w	8002f3e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e26:	4b38      	ldr	r3, [pc, #224]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e2e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e30:	4b35      	ldr	r3, [pc, #212]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <HAL_RCC_OscConfig+0x1bc>
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	2b18      	cmp	r3, #24
 8002e40:	d137      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x222>
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d132      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e4c:	4b2e      	ldr	r3, [pc, #184]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_OscConfig+0x1d4>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e33e      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e64:	4b28      	ldr	r3, [pc, #160]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 0219 	bic.w	r2, r3, #25
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	4925      	ldr	r1, [pc, #148]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7fe fe29 	bl	8001acc <HAL_GetTick>
 8002e7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7e:	f7fe fe25 	bl	8001acc <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e328      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e90:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9c:	4b1a      	ldr	r3, [pc, #104]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	061b      	lsls	r3, r3, #24
 8002eaa:	4917      	ldr	r1, [pc, #92]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb0:	e045      	b.n	8002f3e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d028      	beq.n	8002f0c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002eba:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 0219 	bic.w	r2, r3, #25
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	4910      	ldr	r1, [pc, #64]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fe fdfe 	bl	8001acc <HAL_GetTick>
 8002ed0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed4:	f7fe fdfa 	bl	8001acc <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e2fd      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ee6:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	061b      	lsls	r3, r3, #24
 8002f00:	4901      	ldr	r1, [pc, #4]	; (8002f08 <HAL_RCC_OscConfig+0x278>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
 8002f06:	e01a      	b.n	8002f3e <HAL_RCC_OscConfig+0x2ae>
 8002f08:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0c:	4b97      	ldr	r3, [pc, #604]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a96      	ldr	r2, [pc, #600]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fe fdd8 	bl	8001acc <HAL_GetTick>
 8002f1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f20:	f7fe fdd4 	bl	8001acc <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e2d7      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f32:	4b8e      	ldr	r3, [pc, #568]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d06a      	beq.n	8003020 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f4a:	4b88      	ldr	r3, [pc, #544]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f52:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f54:	4b85      	ldr	r3, [pc, #532]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d007      	beq.n	8002f70 <HAL_RCC_OscConfig+0x2e0>
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b18      	cmp	r3, #24
 8002f64:	d11b      	bne.n	8002f9e <HAL_RCC_OscConfig+0x30e>
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d116      	bne.n	8002f9e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f70:	4b7e      	ldr	r3, [pc, #504]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_OscConfig+0x2f8>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	2b80      	cmp	r3, #128	; 0x80
 8002f82:	d001      	beq.n	8002f88 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e2ac      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f88:	4b78      	ldr	r3, [pc, #480]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	061b      	lsls	r3, r3, #24
 8002f96:	4975      	ldr	r1, [pc, #468]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f9c:	e040      	b.n	8003020 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d023      	beq.n	8002fee <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002fa6:	4b71      	ldr	r3, [pc, #452]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a70      	ldr	r2, [pc, #448]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb2:	f7fe fd8b 	bl	8001acc <HAL_GetTick>
 8002fb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002fba:	f7fe fd87 	bl	8001acc <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e28a      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fcc:	4b67      	ldr	r3, [pc, #412]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fd8:	4b64      	ldr	r3, [pc, #400]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	061b      	lsls	r3, r3, #24
 8002fe6:	4961      	ldr	r1, [pc, #388]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60cb      	str	r3, [r1, #12]
 8002fec:	e018      	b.n	8003020 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002fee:	4b5f      	ldr	r3, [pc, #380]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a5e      	ldr	r2, [pc, #376]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 8002ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fd67 	bl	8001acc <HAL_GetTick>
 8002ffe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003002:	f7fe fd63 	bl	8001acc <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e266      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003014:	4b55      	ldr	r3, [pc, #340]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f0      	bne.n	8003002 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d036      	beq.n	800309a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d019      	beq.n	8003068 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003034:	4b4d      	ldr	r3, [pc, #308]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 8003036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003038:	4a4c      	ldr	r2, [pc, #304]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003040:	f7fe fd44 	bl	8001acc <HAL_GetTick>
 8003044:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003048:	f7fe fd40 	bl	8001acc <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e243      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800305a:	4b44      	ldr	r3, [pc, #272]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 800305c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x3b8>
 8003066:	e018      	b.n	800309a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003068:	4b40      	ldr	r3, [pc, #256]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 800306a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306c:	4a3f      	ldr	r2, [pc, #252]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7fe fd2a 	bl	8001acc <HAL_GetTick>
 8003078:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307c:	f7fe fd26 	bl	8001acc <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e229      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800308e:	4b37      	ldr	r3, [pc, #220]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 8003090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d036      	beq.n	8003114 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d019      	beq.n	80030e2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030ae:	4b2f      	ldr	r3, [pc, #188]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a2e      	ldr	r2, [pc, #184]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 80030b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030ba:	f7fe fd07 	bl	8001acc <HAL_GetTick>
 80030be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030c2:	f7fe fd03 	bl	8001acc <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e206      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030d4:	4b25      	ldr	r3, [pc, #148]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x432>
 80030e0:	e018      	b.n	8003114 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030e2:	4b22      	ldr	r3, [pc, #136]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a21      	ldr	r2, [pc, #132]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 80030e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030ee:	f7fe fced 	bl	8001acc <HAL_GetTick>
 80030f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030f6:	f7fe fce9 	bl	8001acc <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e1ec      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003108:	4b18      	ldr	r3, [pc, #96]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f0      	bne.n	80030f6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 80af 	beq.w	8003280 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003122:	4b13      	ldr	r3, [pc, #76]	; (8003170 <HAL_RCC_OscConfig+0x4e0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <HAL_RCC_OscConfig+0x4e0>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800312e:	f7fe fccd 	bl	8001acc <HAL_GetTick>
 8003132:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7fe fcc9 	bl	8001acc <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b64      	cmp	r3, #100	; 0x64
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e1cc      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003148:	4b09      	ldr	r3, [pc, #36]	; (8003170 <HAL_RCC_OscConfig+0x4e0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d10b      	bne.n	8003174 <HAL_RCC_OscConfig+0x4e4>
 800315c:	4b03      	ldr	r3, [pc, #12]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 800315e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003160:	4a02      	ldr	r2, [pc, #8]	; (800316c <HAL_RCC_OscConfig+0x4dc>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6713      	str	r3, [r2, #112]	; 0x70
 8003168:	e05b      	b.n	8003222 <HAL_RCC_OscConfig+0x592>
 800316a:	bf00      	nop
 800316c:	58024400 	.word	0x58024400
 8003170:	58024800 	.word	0x58024800
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d112      	bne.n	80031a2 <HAL_RCC_OscConfig+0x512>
 800317c:	4b9d      	ldr	r3, [pc, #628]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003180:	4a9c      	ldr	r2, [pc, #624]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	6713      	str	r3, [r2, #112]	; 0x70
 8003188:	4b9a      	ldr	r3, [pc, #616]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	4a99      	ldr	r2, [pc, #612]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 800318e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003192:	6713      	str	r3, [r2, #112]	; 0x70
 8003194:	4b97      	ldr	r3, [pc, #604]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003198:	4a96      	ldr	r2, [pc, #600]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 800319a:	f023 0304 	bic.w	r3, r3, #4
 800319e:	6713      	str	r3, [r2, #112]	; 0x70
 80031a0:	e03f      	b.n	8003222 <HAL_RCC_OscConfig+0x592>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b05      	cmp	r3, #5
 80031a8:	d112      	bne.n	80031d0 <HAL_RCC_OscConfig+0x540>
 80031aa:	4b92      	ldr	r3, [pc, #584]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	4a91      	ldr	r2, [pc, #580]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031b0:	f043 0304 	orr.w	r3, r3, #4
 80031b4:	6713      	str	r3, [r2, #112]	; 0x70
 80031b6:	4b8f      	ldr	r3, [pc, #572]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	4a8e      	ldr	r2, [pc, #568]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c0:	6713      	str	r3, [r2, #112]	; 0x70
 80031c2:	4b8c      	ldr	r3, [pc, #560]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	4a8b      	ldr	r2, [pc, #556]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6713      	str	r3, [r2, #112]	; 0x70
 80031ce:	e028      	b.n	8003222 <HAL_RCC_OscConfig+0x592>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b85      	cmp	r3, #133	; 0x85
 80031d6:	d112      	bne.n	80031fe <HAL_RCC_OscConfig+0x56e>
 80031d8:	4b86      	ldr	r3, [pc, #536]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031dc:	4a85      	ldr	r2, [pc, #532]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031de:	f043 0304 	orr.w	r3, r3, #4
 80031e2:	6713      	str	r3, [r2, #112]	; 0x70
 80031e4:	4b83      	ldr	r3, [pc, #524]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e8:	4a82      	ldr	r2, [pc, #520]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ee:	6713      	str	r3, [r2, #112]	; 0x70
 80031f0:	4b80      	ldr	r3, [pc, #512]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	4a7f      	ldr	r2, [pc, #508]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6713      	str	r3, [r2, #112]	; 0x70
 80031fc:	e011      	b.n	8003222 <HAL_RCC_OscConfig+0x592>
 80031fe:	4b7d      	ldr	r3, [pc, #500]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	4a7c      	ldr	r2, [pc, #496]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	6713      	str	r3, [r2, #112]	; 0x70
 800320a:	4b7a      	ldr	r3, [pc, #488]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320e:	4a79      	ldr	r2, [pc, #484]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003210:	f023 0304 	bic.w	r3, r3, #4
 8003214:	6713      	str	r3, [r2, #112]	; 0x70
 8003216:	4b77      	ldr	r3, [pc, #476]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	4a76      	ldr	r2, [pc, #472]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 800321c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003220:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d015      	beq.n	8003256 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322a:	f7fe fc4f 	bl	8001acc <HAL_GetTick>
 800322e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003230:	e00a      	b.n	8003248 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fe fc4b 	bl	8001acc <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e14c      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003248:	4b6a      	ldr	r3, [pc, #424]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0ee      	beq.n	8003232 <HAL_RCC_OscConfig+0x5a2>
 8003254:	e014      	b.n	8003280 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003256:	f7fe fc39 	bl	8001acc <HAL_GetTick>
 800325a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800325c:	e00a      	b.n	8003274 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325e:	f7fe fc35 	bl	8001acc <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f241 3288 	movw	r2, #5000	; 0x1388
 800326c:	4293      	cmp	r3, r2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e136      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003274:	4b5f      	ldr	r3, [pc, #380]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1ee      	bne.n	800325e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 812b 	beq.w	80034e0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800328a:	4b5a      	ldr	r3, [pc, #360]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003292:	2b18      	cmp	r3, #24
 8003294:	f000 80bb 	beq.w	800340e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	2b02      	cmp	r3, #2
 800329e:	f040 8095 	bne.w	80033cc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a2:	4b54      	ldr	r3, [pc, #336]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a53      	ldr	r2, [pc, #332]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 80032a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ae:	f7fe fc0d 	bl	8001acc <HAL_GetTick>
 80032b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b6:	f7fe fc09 	bl	8001acc <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e10c      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032c8:	4b4a      	ldr	r3, [pc, #296]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f0      	bne.n	80032b6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d4:	4b47      	ldr	r3, [pc, #284]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 80032d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032d8:	4b47      	ldr	r3, [pc, #284]	; (80033f8 <HAL_RCC_OscConfig+0x768>)
 80032da:	4013      	ands	r3, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032e4:	0112      	lsls	r2, r2, #4
 80032e6:	430a      	orrs	r2, r1
 80032e8:	4942      	ldr	r1, [pc, #264]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	628b      	str	r3, [r1, #40]	; 0x28
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	3b01      	subs	r3, #1
 80032f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fc:	3b01      	subs	r3, #1
 80032fe:	025b      	lsls	r3, r3, #9
 8003300:	b29b      	uxth	r3, r3
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	3b01      	subs	r3, #1
 800330a:	041b      	lsls	r3, r3, #16
 800330c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003316:	3b01      	subs	r3, #1
 8003318:	061b      	lsls	r3, r3, #24
 800331a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800331e:	4935      	ldr	r1, [pc, #212]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003320:	4313      	orrs	r3, r2
 8003322:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003324:	4b33      	ldr	r3, [pc, #204]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	4a32      	ldr	r2, [pc, #200]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003330:	4b30      	ldr	r3, [pc, #192]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003334:	4b31      	ldr	r3, [pc, #196]	; (80033fc <HAL_RCC_OscConfig+0x76c>)
 8003336:	4013      	ands	r3, r2
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800333c:	00d2      	lsls	r2, r2, #3
 800333e:	492d      	ldr	r1, [pc, #180]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003340:	4313      	orrs	r3, r2
 8003342:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003344:	4b2b      	ldr	r3, [pc, #172]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	f023 020c 	bic.w	r2, r3, #12
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	4928      	ldr	r1, [pc, #160]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003352:	4313      	orrs	r3, r2
 8003354:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003356:	4b27      	ldr	r3, [pc, #156]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	f023 0202 	bic.w	r2, r3, #2
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	4924      	ldr	r1, [pc, #144]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003364:	4313      	orrs	r3, r2
 8003366:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003368:	4b22      	ldr	r3, [pc, #136]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	4a21      	ldr	r2, [pc, #132]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 800336e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003372:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003374:	4b1f      	ldr	r3, [pc, #124]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	4a1e      	ldr	r2, [pc, #120]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 800337a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800337e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003380:	4b1c      	ldr	r3, [pc, #112]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	4a1b      	ldr	r2, [pc, #108]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003386:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800338a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800338c:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003398:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a15      	ldr	r2, [pc, #84]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 800339e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fe fb92 	bl	8001acc <HAL_GetTick>
 80033a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ac:	f7fe fb8e 	bl	8001acc <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e091      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033be:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0x71c>
 80033ca:	e089      	b.n	80034e0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a08      	ldr	r2, [pc, #32]	; (80033f4 <HAL_RCC_OscConfig+0x764>)
 80033d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fe fb78 	bl	8001acc <HAL_GetTick>
 80033dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033de:	e00f      	b.n	8003400 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e0:	f7fe fb74 	bl	8001acc <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d908      	bls.n	8003400 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e077      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
 80033f2:	bf00      	nop
 80033f4:	58024400 	.word	0x58024400
 80033f8:	fffffc0c 	.word	0xfffffc0c
 80033fc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003400:	4b3a      	ldr	r3, [pc, #232]	; (80034ec <HAL_RCC_OscConfig+0x85c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1e9      	bne.n	80033e0 <HAL_RCC_OscConfig+0x750>
 800340c:	e068      	b.n	80034e0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800340e:	4b37      	ldr	r3, [pc, #220]	; (80034ec <HAL_RCC_OscConfig+0x85c>)
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003414:	4b35      	ldr	r3, [pc, #212]	; (80034ec <HAL_RCC_OscConfig+0x85c>)
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	2b01      	cmp	r3, #1
 8003420:	d031      	beq.n	8003486 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f003 0203 	and.w	r2, r3, #3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342c:	429a      	cmp	r2, r3
 800342e:	d12a      	bne.n	8003486 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d122      	bne.n	8003486 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800344c:	429a      	cmp	r2, r3
 800344e:	d11a      	bne.n	8003486 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	0a5b      	lsrs	r3, r3, #9
 8003454:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800345e:	429a      	cmp	r2, r3
 8003460:	d111      	bne.n	8003486 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	0c1b      	lsrs	r3, r3, #16
 8003466:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d108      	bne.n	8003486 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	0e1b      	lsrs	r3, r3, #24
 8003478:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003480:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003482:	429a      	cmp	r2, r3
 8003484:	d001      	beq.n	800348a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e02b      	b.n	80034e2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800348a:	4b18      	ldr	r3, [pc, #96]	; (80034ec <HAL_RCC_OscConfig+0x85c>)
 800348c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348e:	08db      	lsrs	r3, r3, #3
 8003490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003494:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	429a      	cmp	r2, r3
 800349e:	d01f      	beq.n	80034e0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80034a0:	4b12      	ldr	r3, [pc, #72]	; (80034ec <HAL_RCC_OscConfig+0x85c>)
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	4a11      	ldr	r2, [pc, #68]	; (80034ec <HAL_RCC_OscConfig+0x85c>)
 80034a6:	f023 0301 	bic.w	r3, r3, #1
 80034aa:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034ac:	f7fe fb0e 	bl	8001acc <HAL_GetTick>
 80034b0:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80034b2:	bf00      	nop
 80034b4:	f7fe fb0a 	bl	8001acc <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	4293      	cmp	r3, r2
 80034be:	d0f9      	beq.n	80034b4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034c0:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <HAL_RCC_OscConfig+0x85c>)
 80034c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034c4:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <HAL_RCC_OscConfig+0x860>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034cc:	00d2      	lsls	r2, r2, #3
 80034ce:	4907      	ldr	r1, [pc, #28]	; (80034ec <HAL_RCC_OscConfig+0x85c>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_RCC_OscConfig+0x85c>)
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	4a04      	ldr	r2, [pc, #16]	; (80034ec <HAL_RCC_OscConfig+0x85c>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3730      	adds	r7, #48	; 0x30
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	58024400 	.word	0x58024400
 80034f0:	ffff0007 	.word	0xffff0007

080034f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e19c      	b.n	8003842 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003508:	4b8a      	ldr	r3, [pc, #552]	; (8003734 <HAL_RCC_ClockConfig+0x240>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d910      	bls.n	8003538 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	4b87      	ldr	r3, [pc, #540]	; (8003734 <HAL_RCC_ClockConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 020f 	bic.w	r2, r3, #15
 800351e:	4985      	ldr	r1, [pc, #532]	; (8003734 <HAL_RCC_ClockConfig+0x240>)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b83      	ldr	r3, [pc, #524]	; (8003734 <HAL_RCC_ClockConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e184      	b.n	8003842 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d010      	beq.n	8003566 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	4b7b      	ldr	r3, [pc, #492]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003550:	429a      	cmp	r2, r3
 8003552:	d908      	bls.n	8003566 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003554:	4b78      	ldr	r3, [pc, #480]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	4975      	ldr	r1, [pc, #468]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003562:	4313      	orrs	r3, r2
 8003564:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d010      	beq.n	8003594 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	4b70      	ldr	r3, [pc, #448]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800357e:	429a      	cmp	r2, r3
 8003580:	d908      	bls.n	8003594 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003582:	4b6d      	ldr	r3, [pc, #436]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	496a      	ldr	r1, [pc, #424]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003590:	4313      	orrs	r3, r2
 8003592:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b00      	cmp	r3, #0
 800359e:	d010      	beq.n	80035c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699a      	ldr	r2, [r3, #24]
 80035a4:	4b64      	ldr	r3, [pc, #400]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d908      	bls.n	80035c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035b0:	4b61      	ldr	r3, [pc, #388]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	495e      	ldr	r1, [pc, #376]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d010      	beq.n	80035f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69da      	ldr	r2, [r3, #28]
 80035d2:	4b59      	ldr	r3, [pc, #356]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035da:	429a      	cmp	r2, r3
 80035dc:	d908      	bls.n	80035f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035de:	4b56      	ldr	r3, [pc, #344]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	4953      	ldr	r1, [pc, #332]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d010      	beq.n	800361e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	4b4d      	ldr	r3, [pc, #308]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	429a      	cmp	r2, r3
 800360a:	d908      	bls.n	800361e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800360c:	4b4a      	ldr	r3, [pc, #296]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f023 020f 	bic.w	r2, r3, #15
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4947      	ldr	r1, [pc, #284]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 800361a:	4313      	orrs	r3, r2
 800361c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d055      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800362a:	4b43      	ldr	r3, [pc, #268]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	4940      	ldr	r1, [pc, #256]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003638:	4313      	orrs	r3, r2
 800363a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d107      	bne.n	8003654 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003644:	4b3c      	ldr	r3, [pc, #240]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d121      	bne.n	8003694 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0f6      	b.n	8003842 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b03      	cmp	r3, #3
 800365a:	d107      	bne.n	800366c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800365c:	4b36      	ldr	r3, [pc, #216]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d115      	bne.n	8003694 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0ea      	b.n	8003842 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d107      	bne.n	8003684 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003674:	4b30      	ldr	r3, [pc, #192]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d109      	bne.n	8003694 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0de      	b.n	8003842 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003684:	4b2c      	ldr	r3, [pc, #176]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0d6      	b.n	8003842 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003694:	4b28      	ldr	r3, [pc, #160]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f023 0207 	bic.w	r2, r3, #7
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4925      	ldr	r1, [pc, #148]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a6:	f7fe fa11 	bl	8001acc <HAL_GetTick>
 80036aa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ac:	e00a      	b.n	80036c4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ae:	f7fe fa0d 	bl	8001acc <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036bc:	4293      	cmp	r3, r2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e0be      	b.n	8003842 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c4:	4b1c      	ldr	r3, [pc, #112]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d1eb      	bne.n	80036ae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d010      	beq.n	8003704 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	4b14      	ldr	r3, [pc, #80]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d208      	bcs.n	8003704 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	f023 020f 	bic.w	r2, r3, #15
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	490e      	ldr	r1, [pc, #56]	; (8003738 <HAL_RCC_ClockConfig+0x244>)
 8003700:	4313      	orrs	r3, r2
 8003702:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_RCC_ClockConfig+0x240>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d214      	bcs.n	800373c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003712:	4b08      	ldr	r3, [pc, #32]	; (8003734 <HAL_RCC_ClockConfig+0x240>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f023 020f 	bic.w	r2, r3, #15
 800371a:	4906      	ldr	r1, [pc, #24]	; (8003734 <HAL_RCC_ClockConfig+0x240>)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	4313      	orrs	r3, r2
 8003720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003722:	4b04      	ldr	r3, [pc, #16]	; (8003734 <HAL_RCC_ClockConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d005      	beq.n	800373c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e086      	b.n	8003842 <HAL_RCC_ClockConfig+0x34e>
 8003734:	52002000 	.word	0x52002000
 8003738:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d010      	beq.n	800376a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	4b3f      	ldr	r3, [pc, #252]	; (800384c <HAL_RCC_ClockConfig+0x358>)
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003754:	429a      	cmp	r2, r3
 8003756:	d208      	bcs.n	800376a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003758:	4b3c      	ldr	r3, [pc, #240]	; (800384c <HAL_RCC_ClockConfig+0x358>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	4939      	ldr	r1, [pc, #228]	; (800384c <HAL_RCC_ClockConfig+0x358>)
 8003766:	4313      	orrs	r3, r2
 8003768:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d010      	beq.n	8003798 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	4b34      	ldr	r3, [pc, #208]	; (800384c <HAL_RCC_ClockConfig+0x358>)
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003782:	429a      	cmp	r2, r3
 8003784:	d208      	bcs.n	8003798 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003786:	4b31      	ldr	r3, [pc, #196]	; (800384c <HAL_RCC_ClockConfig+0x358>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	492e      	ldr	r1, [pc, #184]	; (800384c <HAL_RCC_ClockConfig+0x358>)
 8003794:	4313      	orrs	r3, r2
 8003796:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d010      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699a      	ldr	r2, [r3, #24]
 80037a8:	4b28      	ldr	r3, [pc, #160]	; (800384c <HAL_RCC_ClockConfig+0x358>)
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d208      	bcs.n	80037c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037b4:	4b25      	ldr	r3, [pc, #148]	; (800384c <HAL_RCC_ClockConfig+0x358>)
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	4922      	ldr	r1, [pc, #136]	; (800384c <HAL_RCC_ClockConfig+0x358>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0320 	and.w	r3, r3, #32
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d010      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	4b1d      	ldr	r3, [pc, #116]	; (800384c <HAL_RCC_ClockConfig+0x358>)
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037de:	429a      	cmp	r2, r3
 80037e0:	d208      	bcs.n	80037f4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037e2:	4b1a      	ldr	r3, [pc, #104]	; (800384c <HAL_RCC_ClockConfig+0x358>)
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	4917      	ldr	r1, [pc, #92]	; (800384c <HAL_RCC_ClockConfig+0x358>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80037f4:	f000 f834 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 80037f8:	4602      	mov	r2, r0
 80037fa:	4b14      	ldr	r3, [pc, #80]	; (800384c <HAL_RCC_ClockConfig+0x358>)
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	0a1b      	lsrs	r3, r3, #8
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	4912      	ldr	r1, [pc, #72]	; (8003850 <HAL_RCC_ClockConfig+0x35c>)
 8003806:	5ccb      	ldrb	r3, [r1, r3]
 8003808:	f003 031f 	and.w	r3, r3, #31
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
 8003810:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003812:	4b0e      	ldr	r3, [pc, #56]	; (800384c <HAL_RCC_ClockConfig+0x358>)
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	4a0d      	ldr	r2, [pc, #52]	; (8003850 <HAL_RCC_ClockConfig+0x35c>)
 800381c:	5cd3      	ldrb	r3, [r2, r3]
 800381e:	f003 031f 	and.w	r3, r3, #31
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
 8003828:	4a0a      	ldr	r2, [pc, #40]	; (8003854 <HAL_RCC_ClockConfig+0x360>)
 800382a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800382c:	4a0a      	ldr	r2, [pc, #40]	; (8003858 <HAL_RCC_ClockConfig+0x364>)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <HAL_RCC_ClockConfig+0x368>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe f8fe 	bl	8001a38 <HAL_InitTick>
 800383c:	4603      	mov	r3, r0
 800383e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003840:	7bfb      	ldrb	r3, [r7, #15]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	58024400 	.word	0x58024400
 8003850:	0800a5b4 	.word	0x0800a5b4
 8003854:	24000014 	.word	0x24000014
 8003858:	24000010 	.word	0x24000010
 800385c:	24000018 	.word	0x24000018

08003860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003860:	b480      	push	{r7}
 8003862:	b089      	sub	sp, #36	; 0x24
 8003864:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003866:	4bb3      	ldr	r3, [pc, #716]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800386e:	2b18      	cmp	r3, #24
 8003870:	f200 8155 	bhi.w	8003b1e <HAL_RCC_GetSysClockFreq+0x2be>
 8003874:	a201      	add	r2, pc, #4	; (adr r2, 800387c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387a:	bf00      	nop
 800387c:	080038e1 	.word	0x080038e1
 8003880:	08003b1f 	.word	0x08003b1f
 8003884:	08003b1f 	.word	0x08003b1f
 8003888:	08003b1f 	.word	0x08003b1f
 800388c:	08003b1f 	.word	0x08003b1f
 8003890:	08003b1f 	.word	0x08003b1f
 8003894:	08003b1f 	.word	0x08003b1f
 8003898:	08003b1f 	.word	0x08003b1f
 800389c:	08003907 	.word	0x08003907
 80038a0:	08003b1f 	.word	0x08003b1f
 80038a4:	08003b1f 	.word	0x08003b1f
 80038a8:	08003b1f 	.word	0x08003b1f
 80038ac:	08003b1f 	.word	0x08003b1f
 80038b0:	08003b1f 	.word	0x08003b1f
 80038b4:	08003b1f 	.word	0x08003b1f
 80038b8:	08003b1f 	.word	0x08003b1f
 80038bc:	0800390d 	.word	0x0800390d
 80038c0:	08003b1f 	.word	0x08003b1f
 80038c4:	08003b1f 	.word	0x08003b1f
 80038c8:	08003b1f 	.word	0x08003b1f
 80038cc:	08003b1f 	.word	0x08003b1f
 80038d0:	08003b1f 	.word	0x08003b1f
 80038d4:	08003b1f 	.word	0x08003b1f
 80038d8:	08003b1f 	.word	0x08003b1f
 80038dc:	08003913 	.word	0x08003913
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038e0:	4b94      	ldr	r3, [pc, #592]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d009      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038ec:	4b91      	ldr	r3, [pc, #580]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	08db      	lsrs	r3, r3, #3
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	4a90      	ldr	r2, [pc, #576]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038f8:	fa22 f303 	lsr.w	r3, r2, r3
 80038fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80038fe:	e111      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003900:	4b8d      	ldr	r3, [pc, #564]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003902:	61bb      	str	r3, [r7, #24]
      break;
 8003904:	e10e      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003906:	4b8d      	ldr	r3, [pc, #564]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003908:	61bb      	str	r3, [r7, #24]
      break;
 800390a:	e10b      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800390c:	4b8c      	ldr	r3, [pc, #560]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800390e:	61bb      	str	r3, [r7, #24]
      break;
 8003910:	e108      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003912:	4b88      	ldr	r3, [pc, #544]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800391c:	4b85      	ldr	r3, [pc, #532]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003926:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003928:	4b82      	ldr	r3, [pc, #520]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003932:	4b80      	ldr	r3, [pc, #512]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003936:	08db      	lsrs	r3, r3, #3
 8003938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	fb02 f303 	mul.w	r3, r2, r3
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80e1 	beq.w	8003b18 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b02      	cmp	r3, #2
 800395a:	f000 8083 	beq.w	8003a64 <HAL_RCC_GetSysClockFreq+0x204>
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2b02      	cmp	r3, #2
 8003962:	f200 80a1 	bhi.w	8003aa8 <HAL_RCC_GetSysClockFreq+0x248>
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_RCC_GetSysClockFreq+0x114>
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d056      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003972:	e099      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003974:	4b6f      	ldr	r3, [pc, #444]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b00      	cmp	r3, #0
 800397e:	d02d      	beq.n	80039dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003980:	4b6c      	ldr	r3, [pc, #432]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	08db      	lsrs	r3, r3, #3
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	4a6b      	ldr	r2, [pc, #428]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
 8003990:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	ee07 3a90 	vmov	s15, r3
 8003998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	ee07 3a90 	vmov	s15, r3
 80039a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039aa:	4b62      	ldr	r3, [pc, #392]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b2:	ee07 3a90 	vmov	s15, r3
 80039b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80039be:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003b44 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80039da:	e087      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003b48 <HAL_RCC_GetSysClockFreq+0x2e8>
 80039ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ee:	4b51      	ldr	r3, [pc, #324]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a02:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003b44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a1e:	e065      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003b4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a32:	4b40      	ldr	r3, [pc, #256]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a46:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003b44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a62:	e043      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003b50 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a76:	4b2f      	ldr	r3, [pc, #188]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a8a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003b44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003aa6:	e021      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003b4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aba:	4b1e      	ldr	r3, [pc, #120]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ace:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003b44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003aea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003aec:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	0a5b      	lsrs	r3, r3, #9
 8003af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003af6:	3301      	adds	r3, #1
 8003af8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	ee07 3a90 	vmov	s15, r3
 8003b00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b04:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b10:	ee17 3a90 	vmov	r3, s15
 8003b14:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003b16:	e005      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61bb      	str	r3, [r7, #24]
      break;
 8003b1c:	e002      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003b1e:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b20:	61bb      	str	r3, [r7, #24]
      break;
 8003b22:	bf00      	nop
  }

  return sysclockfreq;
 8003b24:	69bb      	ldr	r3, [r7, #24]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3724      	adds	r7, #36	; 0x24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	58024400 	.word	0x58024400
 8003b38:	03d09000 	.word	0x03d09000
 8003b3c:	003d0900 	.word	0x003d0900
 8003b40:	007a1200 	.word	0x007a1200
 8003b44:	46000000 	.word	0x46000000
 8003b48:	4c742400 	.word	0x4c742400
 8003b4c:	4a742400 	.word	0x4a742400
 8003b50:	4af42400 	.word	0x4af42400

08003b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003b5a:	f7ff fe81 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	0a1b      	lsrs	r3, r3, #8
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	490f      	ldr	r1, [pc, #60]	; (8003ba8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b6c:	5ccb      	ldrb	r3, [r1, r3]
 8003b6e:	f003 031f 	and.w	r3, r3, #31
 8003b72:	fa22 f303 	lsr.w	r3, r2, r3
 8003b76:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003b78:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	4a09      	ldr	r2, [pc, #36]	; (8003ba8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b82:	5cd3      	ldrb	r3, [r2, r3]
 8003b84:	f003 031f 	and.w	r3, r3, #31
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8e:	4a07      	ldr	r2, [pc, #28]	; (8003bac <HAL_RCC_GetHCLKFreq+0x58>)
 8003b90:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b92:	4a07      	ldr	r2, [pc, #28]	; (8003bb0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b98:	4b04      	ldr	r3, [pc, #16]	; (8003bac <HAL_RCC_GetHCLKFreq+0x58>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	58024400 	.word	0x58024400
 8003ba8:	0800a5b4 	.word	0x0800a5b4
 8003bac:	24000014 	.word	0x24000014
 8003bb0:	24000010 	.word	0x24000010

08003bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003bb8:	f7ff ffcc 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	091b      	lsrs	r3, r3, #4
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4904      	ldr	r1, [pc, #16]	; (8003bdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	58024400 	.word	0x58024400
 8003bdc:	0800a5b4 	.word	0x0800a5b4

08003be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003be4:	f7ff ffb6 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	0a1b      	lsrs	r3, r3, #8
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	4904      	ldr	r1, [pc, #16]	; (8003c08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bf6:	5ccb      	ldrb	r3, [r1, r3]
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	58024400 	.word	0x58024400
 8003c08:	0800a5b4 	.word	0x0800a5b4

08003c0c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c10:	b0c8      	sub	sp, #288	; 0x120
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003c30:	2500      	movs	r5, #0
 8003c32:	ea54 0305 	orrs.w	r3, r4, r5
 8003c36:	d049      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c42:	d02f      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003c44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c48:	d828      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c4e:	d01a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c54:	d822      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c5e:	d007      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c60:	e01c      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c62:	4ba7      	ldr	r3, [pc, #668]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c66:	4aa6      	ldr	r2, [pc, #664]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c6e:	e01a      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c74:	3308      	adds	r3, #8
 8003c76:	2102      	movs	r1, #2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f001 fc43 	bl	8005504 <RCCEx_PLL2_Config>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c84:	e00f      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c8a:	3328      	adds	r3, #40	; 0x28
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f001 fcea 	bl	8005668 <RCCEx_PLL3_Config>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c9a:	e004      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10a      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003cae:	4b94      	ldr	r3, [pc, #592]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cbc:	4a90      	ldr	r2, [pc, #576]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cbe:	430b      	orrs	r3, r1
 8003cc0:	6513      	str	r3, [r2, #80]	; 0x50
 8003cc2:	e003      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cc8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003cd8:	f04f 0900 	mov.w	r9, #0
 8003cdc:	ea58 0309 	orrs.w	r3, r8, r9
 8003ce0:	d047      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d82a      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003cec:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf2:	bf00      	nop
 8003cf4:	08003d09 	.word	0x08003d09
 8003cf8:	08003d17 	.word	0x08003d17
 8003cfc:	08003d2d 	.word	0x08003d2d
 8003d00:	08003d4b 	.word	0x08003d4b
 8003d04:	08003d4b 	.word	0x08003d4b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d08:	4b7d      	ldr	r3, [pc, #500]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	4a7c      	ldr	r2, [pc, #496]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d14:	e01a      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f001 fbf0 	bl	8005504 <RCCEx_PLL2_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d2a:	e00f      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d30:	3328      	adds	r3, #40	; 0x28
 8003d32:	2100      	movs	r1, #0
 8003d34:	4618      	mov	r0, r3
 8003d36:	f001 fc97 	bl	8005668 <RCCEx_PLL3_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d40:	e004      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d48:	e000      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d54:	4b6a      	ldr	r3, [pc, #424]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d58:	f023 0107 	bic.w	r1, r3, #7
 8003d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d62:	4a67      	ldr	r2, [pc, #412]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d64:	430b      	orrs	r3, r1
 8003d66:	6513      	str	r3, [r2, #80]	; 0x50
 8003d68:	e003      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d6e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003d7e:	f04f 0b00 	mov.w	fp, #0
 8003d82:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d86:	d054      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d92:	d036      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003d94:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d98:	d82f      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d9e:	d032      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003da4:	d829      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003da6:	2bc0      	cmp	r3, #192	; 0xc0
 8003da8:	d02f      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003daa:	2bc0      	cmp	r3, #192	; 0xc0
 8003dac:	d825      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003dae:	2b80      	cmp	r3, #128	; 0x80
 8003db0:	d018      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003db2:	2b80      	cmp	r3, #128	; 0x80
 8003db4:	d821      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003dba:	2b40      	cmp	r3, #64	; 0x40
 8003dbc:	d007      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003dbe:	e01c      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc0:	4b4f      	ldr	r3, [pc, #316]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	4a4e      	ldr	r2, [pc, #312]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003dcc:	e01e      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dd2:	3308      	adds	r3, #8
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f001 fb94 	bl	8005504 <RCCEx_PLL2_Config>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003de2:	e013      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de8:	3328      	adds	r3, #40	; 0x28
 8003dea:	2100      	movs	r1, #0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f001 fc3b 	bl	8005668 <RCCEx_PLL3_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003df8:	e008      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e00:	e004      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003e02:	bf00      	nop
 8003e04:	e002      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003e06:	bf00      	nop
 8003e08:	e000      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10a      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003e14:	4b3a      	ldr	r3, [pc, #232]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e18:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e22:	4a37      	ldr	r2, [pc, #220]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e24:	430b      	orrs	r3, r1
 8003e26:	6513      	str	r3, [r2, #80]	; 0x50
 8003e28:	e003      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e2e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003e3e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e42:	2300      	movs	r3, #0
 8003e44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e48:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	d05c      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e58:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003e5c:	d03b      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e5e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003e62:	d834      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e68:	d037      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e6e:	d82e      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e74:	d033      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003e76:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e7a:	d828      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e80:	d01a      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e86:	d822      	bhi.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e90:	d007      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003e92:	e01c      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e94:	4b1a      	ldr	r3, [pc, #104]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	4a19      	ldr	r2, [pc, #100]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003ea0:	e01e      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea6:	3308      	adds	r3, #8
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f001 fb2a 	bl	8005504 <RCCEx_PLL2_Config>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003eb6:	e013      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ebc:	3328      	adds	r3, #40	; 0x28
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f001 fbd1 	bl	8005668 <RCCEx_PLL3_Config>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ed4:	e004      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003ed6:	bf00      	nop
 8003ed8:	e002      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003eda:	bf00      	nop
 8003edc:	e000      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ee0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10d      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003ee8:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eec:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef6:	4a02      	ldr	r2, [pc, #8]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	6513      	str	r3, [r2, #80]	; 0x50
 8003efc:	e006      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003efe:	bf00      	nop
 8003f00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f08:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003f18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003f22:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003f26:	460b      	mov	r3, r1
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	d03a      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f32:	2b30      	cmp	r3, #48	; 0x30
 8003f34:	d01f      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003f36:	2b30      	cmp	r3, #48	; 0x30
 8003f38:	d819      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d00c      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	d815      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d019      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003f46:	2b10      	cmp	r3, #16
 8003f48:	d111      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f4a:	4bae      	ldr	r3, [pc, #696]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	4aad      	ldr	r2, [pc, #692]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f56:	e011      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	2102      	movs	r1, #2
 8003f60:	4618      	mov	r0, r3
 8003f62:	f001 facf 	bl	8005504 <RCCEx_PLL2_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f6c:	e006      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f74:	e002      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003f76:	bf00      	nop
 8003f78:	e000      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003f7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10a      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003f84:	4b9f      	ldr	r3, [pc, #636]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f88:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f92:	4a9c      	ldr	r2, [pc, #624]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f94:	430b      	orrs	r3, r1
 8003f96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f98:	e003      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f9e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003faa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003fae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fb8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	d051      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fcc:	d035      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003fce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd2:	d82e      	bhi.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003fd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fd8:	d031      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003fda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fde:	d828      	bhi.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe4:	d01a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fea:	d822      	bhi.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff4:	d007      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003ff6:	e01c      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff8:	4b82      	ldr	r3, [pc, #520]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	4a81      	ldr	r2, [pc, #516]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004002:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004004:	e01c      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800400a:	3308      	adds	r3, #8
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f001 fa78 	bl	8005504 <RCCEx_PLL2_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800401a:	e011      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800401c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004020:	3328      	adds	r3, #40	; 0x28
 8004022:	2100      	movs	r1, #0
 8004024:	4618      	mov	r0, r3
 8004026:	f001 fb1f 	bl	8005668 <RCCEx_PLL3_Config>
 800402a:	4603      	mov	r3, r0
 800402c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004030:	e006      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004038:	e002      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800403a:	bf00      	nop
 800403c:	e000      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800403e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004040:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10a      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004048:	4b6e      	ldr	r3, [pc, #440]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800404a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004056:	4a6b      	ldr	r2, [pc, #428]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004058:	430b      	orrs	r3, r1
 800405a:	6513      	str	r3, [r2, #80]	; 0x50
 800405c:	e003      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004062:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004072:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004076:	2300      	movs	r3, #0
 8004078:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800407c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004080:	460b      	mov	r3, r1
 8004082:	4313      	orrs	r3, r2
 8004084:	d053      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800408a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800408c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004090:	d033      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004092:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004096:	d82c      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004098:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800409c:	d02f      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800409e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040a2:	d826      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80040a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040a8:	d02b      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80040aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040ae:	d820      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80040b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040b4:	d012      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80040b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ba:	d81a      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d022      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80040c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c4:	d115      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ca:	3308      	adds	r3, #8
 80040cc:	2101      	movs	r1, #1
 80040ce:	4618      	mov	r0, r3
 80040d0:	f001 fa18 	bl	8005504 <RCCEx_PLL2_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040da:	e015      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e0:	3328      	adds	r3, #40	; 0x28
 80040e2:	2101      	movs	r1, #1
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 fabf 	bl	8005668 <RCCEx_PLL3_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040f0:	e00a      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040f8:	e006      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040fa:	bf00      	nop
 80040fc:	e004      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040fe:	bf00      	nop
 8004100:	e002      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004102:	bf00      	nop
 8004104:	e000      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004106:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004108:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004110:	4b3c      	ldr	r3, [pc, #240]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004114:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800411c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800411e:	4a39      	ldr	r2, [pc, #228]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004120:	430b      	orrs	r3, r1
 8004122:	6513      	str	r3, [r2, #80]	; 0x50
 8004124:	e003      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004126:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800412a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800412e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004136:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800413a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800413e:	2300      	movs	r3, #0
 8004140:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004144:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004148:	460b      	mov	r3, r1
 800414a:	4313      	orrs	r3, r2
 800414c:	d060      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800414e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004152:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004156:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800415a:	d039      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800415c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004160:	d832      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004162:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004166:	d035      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800416c:	d82c      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800416e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004172:	d031      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004178:	d826      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800417a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800417e:	d02d      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004180:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004184:	d820      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800418a:	d012      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800418c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004190:	d81a      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d024      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800419a:	d115      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800419c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a0:	3308      	adds	r3, #8
 80041a2:	2101      	movs	r1, #1
 80041a4:	4618      	mov	r0, r3
 80041a6:	f001 f9ad 	bl	8005504 <RCCEx_PLL2_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041b0:	e017      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b6:	3328      	adds	r3, #40	; 0x28
 80041b8:	2101      	movs	r1, #1
 80041ba:	4618      	mov	r0, r3
 80041bc:	f001 fa54 	bl	8005668 <RCCEx_PLL3_Config>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041c6:	e00c      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041ce:	e008      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041d0:	bf00      	nop
 80041d2:	e006      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041d4:	bf00      	nop
 80041d6:	e004      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041d8:	bf00      	nop
 80041da:	e002      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041dc:	bf00      	nop
 80041de:	e000      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10e      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80041ea:	4b06      	ldr	r3, [pc, #24]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ee:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80041f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041fa:	4a02      	ldr	r2, [pc, #8]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004200:	e006      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004202:	bf00      	nop
 8004204:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004208:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800420c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800421c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004220:	2300      	movs	r3, #0
 8004222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004226:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800422a:	460b      	mov	r3, r1
 800422c:	4313      	orrs	r3, r2
 800422e:	d037      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800423a:	d00e      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800423c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004240:	d816      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004242:	2b00      	cmp	r3, #0
 8004244:	d018      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004246:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800424a:	d111      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800424c:	4bc4      	ldr	r3, [pc, #784]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	4ac3      	ldr	r2, [pc, #780]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004256:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004258:	e00f      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800425a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800425e:	3308      	adds	r3, #8
 8004260:	2101      	movs	r1, #1
 8004262:	4618      	mov	r0, r3
 8004264:	f001 f94e 	bl	8005504 <RCCEx_PLL2_Config>
 8004268:	4603      	mov	r3, r0
 800426a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800426e:	e004      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004276:	e000      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800427a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10a      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004282:	4bb7      	ldr	r3, [pc, #732]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004286:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800428a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800428e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004290:	4ab3      	ldr	r2, [pc, #716]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004292:	430b      	orrs	r3, r1
 8004294:	6513      	str	r3, [r2, #80]	; 0x50
 8004296:	e003      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004298:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800429c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80042a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80042ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042b0:	2300      	movs	r3, #0
 80042b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80042b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4313      	orrs	r3, r2
 80042be:	d039      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80042c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d81c      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80042ca:	a201      	add	r2, pc, #4	; (adr r2, 80042d0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80042cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d0:	0800430d 	.word	0x0800430d
 80042d4:	080042e1 	.word	0x080042e1
 80042d8:	080042ef 	.word	0x080042ef
 80042dc:	0800430d 	.word	0x0800430d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e0:	4b9f      	ldr	r3, [pc, #636]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	4a9e      	ldr	r2, [pc, #632]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042ec:	e00f      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042f2:	3308      	adds	r3, #8
 80042f4:	2102      	movs	r1, #2
 80042f6:	4618      	mov	r0, r3
 80042f8:	f001 f904 	bl	8005504 <RCCEx_PLL2_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004302:	e004      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800430a:	e000      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800430c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10a      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004316:	4b92      	ldr	r3, [pc, #584]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431a:	f023 0103 	bic.w	r1, r3, #3
 800431e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004324:	4a8e      	ldr	r2, [pc, #568]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004326:	430b      	orrs	r3, r1
 8004328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800432a:	e003      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004330:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004334:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004340:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004344:	2300      	movs	r3, #0
 8004346:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800434a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800434e:	460b      	mov	r3, r1
 8004350:	4313      	orrs	r3, r2
 8004352:	f000 8099 	beq.w	8004488 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004356:	4b83      	ldr	r3, [pc, #524]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a82      	ldr	r2, [pc, #520]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800435c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004360:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004362:	f7fd fbb3 	bl	8001acc <HAL_GetTick>
 8004366:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800436a:	e00b      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800436c:	f7fd fbae 	bl	8001acc <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b64      	cmp	r3, #100	; 0x64
 800437a:	d903      	bls.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004382:	e005      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004384:	4b77      	ldr	r3, [pc, #476]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0ed      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004390:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004394:	2b00      	cmp	r3, #0
 8004396:	d173      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004398:	4b71      	ldr	r3, [pc, #452]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800439a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800439c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043a4:	4053      	eors	r3, r2
 80043a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d015      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043ae:	4b6c      	ldr	r3, [pc, #432]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043ba:	4b69      	ldr	r3, [pc, #420]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043be:	4a68      	ldr	r2, [pc, #416]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043c6:	4b66      	ldr	r3, [pc, #408]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	4a65      	ldr	r2, [pc, #404]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80043d2:	4a63      	ldr	r2, [pc, #396]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e6:	d118      	bne.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fd fb70 	bl	8001acc <HAL_GetTick>
 80043ec:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043f0:	e00d      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f2:	f7fd fb6b 	bl	8001acc <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80043fc:	1ad2      	subs	r2, r2, r3
 80043fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8004402:	429a      	cmp	r2, r3
 8004404:	d903      	bls.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800440c:	e005      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800440e:	4b54      	ldr	r3, [pc, #336]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0eb      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800441a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800441e:	2b00      	cmp	r3, #0
 8004420:	d129      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004422:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004426:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800442a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004432:	d10e      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004434:	4b4a      	ldr	r3, [pc, #296]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800443c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004440:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004444:	091a      	lsrs	r2, r3, #4
 8004446:	4b48      	ldr	r3, [pc, #288]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004448:	4013      	ands	r3, r2
 800444a:	4a45      	ldr	r2, [pc, #276]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800444c:	430b      	orrs	r3, r1
 800444e:	6113      	str	r3, [r2, #16]
 8004450:	e005      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004452:	4b43      	ldr	r3, [pc, #268]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	4a42      	ldr	r2, [pc, #264]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004458:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800445c:	6113      	str	r3, [r2, #16]
 800445e:	4b40      	ldr	r3, [pc, #256]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004460:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004466:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800446a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446e:	4a3c      	ldr	r2, [pc, #240]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004470:	430b      	orrs	r3, r1
 8004472:	6713      	str	r3, [r2, #112]	; 0x70
 8004474:	e008      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004476:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800447a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800447e:	e003      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004480:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004484:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004488:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004490:	f002 0301 	and.w	r3, r2, #1
 8004494:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004498:	2300      	movs	r3, #0
 800449a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800449e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f000 8090 	beq.w	80045ca <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80044aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044b2:	2b28      	cmp	r3, #40	; 0x28
 80044b4:	d870      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80044b6:	a201      	add	r2, pc, #4	; (adr r2, 80044bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80044b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044bc:	080045a1 	.word	0x080045a1
 80044c0:	08004599 	.word	0x08004599
 80044c4:	08004599 	.word	0x08004599
 80044c8:	08004599 	.word	0x08004599
 80044cc:	08004599 	.word	0x08004599
 80044d0:	08004599 	.word	0x08004599
 80044d4:	08004599 	.word	0x08004599
 80044d8:	08004599 	.word	0x08004599
 80044dc:	0800456d 	.word	0x0800456d
 80044e0:	08004599 	.word	0x08004599
 80044e4:	08004599 	.word	0x08004599
 80044e8:	08004599 	.word	0x08004599
 80044ec:	08004599 	.word	0x08004599
 80044f0:	08004599 	.word	0x08004599
 80044f4:	08004599 	.word	0x08004599
 80044f8:	08004599 	.word	0x08004599
 80044fc:	08004583 	.word	0x08004583
 8004500:	08004599 	.word	0x08004599
 8004504:	08004599 	.word	0x08004599
 8004508:	08004599 	.word	0x08004599
 800450c:	08004599 	.word	0x08004599
 8004510:	08004599 	.word	0x08004599
 8004514:	08004599 	.word	0x08004599
 8004518:	08004599 	.word	0x08004599
 800451c:	080045a1 	.word	0x080045a1
 8004520:	08004599 	.word	0x08004599
 8004524:	08004599 	.word	0x08004599
 8004528:	08004599 	.word	0x08004599
 800452c:	08004599 	.word	0x08004599
 8004530:	08004599 	.word	0x08004599
 8004534:	08004599 	.word	0x08004599
 8004538:	08004599 	.word	0x08004599
 800453c:	080045a1 	.word	0x080045a1
 8004540:	08004599 	.word	0x08004599
 8004544:	08004599 	.word	0x08004599
 8004548:	08004599 	.word	0x08004599
 800454c:	08004599 	.word	0x08004599
 8004550:	08004599 	.word	0x08004599
 8004554:	08004599 	.word	0x08004599
 8004558:	08004599 	.word	0x08004599
 800455c:	080045a1 	.word	0x080045a1
 8004560:	58024400 	.word	0x58024400
 8004564:	58024800 	.word	0x58024800
 8004568:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800456c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004570:	3308      	adds	r3, #8
 8004572:	2101      	movs	r1, #1
 8004574:	4618      	mov	r0, r3
 8004576:	f000 ffc5 	bl	8005504 <RCCEx_PLL2_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004580:	e00f      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004586:	3328      	adds	r3, #40	; 0x28
 8004588:	2101      	movs	r1, #1
 800458a:	4618      	mov	r0, r3
 800458c:	f001 f86c 	bl	8005668 <RCCEx_PLL3_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004596:	e004      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800459e:	e000      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80045a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10b      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045aa:	4bc0      	ldr	r3, [pc, #768]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ae:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80045b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ba:	4abc      	ldr	r2, [pc, #752]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045bc:	430b      	orrs	r3, r1
 80045be:	6553      	str	r3, [r2, #84]	; 0x54
 80045c0:	e003      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045c6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80045ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d2:	f002 0302 	and.w	r3, r2, #2
 80045d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045da:	2300      	movs	r3, #0
 80045dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80045e0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80045e4:	460b      	mov	r3, r1
 80045e6:	4313      	orrs	r3, r2
 80045e8:	d043      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80045ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045f2:	2b05      	cmp	r3, #5
 80045f4:	d824      	bhi.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80045f6:	a201      	add	r2, pc, #4	; (adr r2, 80045fc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80045f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fc:	08004649 	.word	0x08004649
 8004600:	08004615 	.word	0x08004615
 8004604:	0800462b 	.word	0x0800462b
 8004608:	08004649 	.word	0x08004649
 800460c:	08004649 	.word	0x08004649
 8004610:	08004649 	.word	0x08004649
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004618:	3308      	adds	r3, #8
 800461a:	2101      	movs	r1, #1
 800461c:	4618      	mov	r0, r3
 800461e:	f000 ff71 	bl	8005504 <RCCEx_PLL2_Config>
 8004622:	4603      	mov	r3, r0
 8004624:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004628:	e00f      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800462a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800462e:	3328      	adds	r3, #40	; 0x28
 8004630:	2101      	movs	r1, #1
 8004632:	4618      	mov	r0, r3
 8004634:	f001 f818 	bl	8005668 <RCCEx_PLL3_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800463e:	e004      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004646:	e000      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800464a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10b      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004652:	4b96      	ldr	r3, [pc, #600]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004656:	f023 0107 	bic.w	r1, r3, #7
 800465a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800465e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004662:	4a92      	ldr	r2, [pc, #584]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004664:	430b      	orrs	r3, r1
 8004666:	6553      	str	r3, [r2, #84]	; 0x54
 8004668:	e003      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800466e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004672:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467a:	f002 0304 	and.w	r3, r2, #4
 800467e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004682:	2300      	movs	r3, #0
 8004684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004688:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800468c:	460b      	mov	r3, r1
 800468e:	4313      	orrs	r3, r2
 8004690:	d043      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004692:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004696:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800469a:	2b05      	cmp	r3, #5
 800469c:	d824      	bhi.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800469e:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80046a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a4:	080046f1 	.word	0x080046f1
 80046a8:	080046bd 	.word	0x080046bd
 80046ac:	080046d3 	.word	0x080046d3
 80046b0:	080046f1 	.word	0x080046f1
 80046b4:	080046f1 	.word	0x080046f1
 80046b8:	080046f1 	.word	0x080046f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046c0:	3308      	adds	r3, #8
 80046c2:	2101      	movs	r1, #1
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 ff1d 	bl	8005504 <RCCEx_PLL2_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046d0:	e00f      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046d6:	3328      	adds	r3, #40	; 0x28
 80046d8:	2101      	movs	r1, #1
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 ffc4 	bl	8005668 <RCCEx_PLL3_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046e6:	e004      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80046ee:	e000      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80046f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10b      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046fa:	4b6c      	ldr	r3, [pc, #432]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fe:	f023 0107 	bic.w	r1, r3, #7
 8004702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004706:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800470a:	4a68      	ldr	r2, [pc, #416]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800470c:	430b      	orrs	r3, r1
 800470e:	6593      	str	r3, [r2, #88]	; 0x58
 8004710:	e003      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004712:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004716:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800471a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	f002 0320 	and.w	r3, r2, #32
 8004726:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800472a:	2300      	movs	r3, #0
 800472c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004730:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004734:	460b      	mov	r3, r1
 8004736:	4313      	orrs	r3, r2
 8004738:	d055      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800473a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800473e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004742:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004746:	d033      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004748:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800474c:	d82c      	bhi.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800474e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004752:	d02f      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004758:	d826      	bhi.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800475a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800475e:	d02b      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004760:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004764:	d820      	bhi.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800476a:	d012      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800476c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004770:	d81a      	bhi.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004772:	2b00      	cmp	r3, #0
 8004774:	d022      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004776:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800477a:	d115      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800477c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004780:	3308      	adds	r3, #8
 8004782:	2100      	movs	r1, #0
 8004784:	4618      	mov	r0, r3
 8004786:	f000 febd 	bl	8005504 <RCCEx_PLL2_Config>
 800478a:	4603      	mov	r3, r0
 800478c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004790:	e015      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004796:	3328      	adds	r3, #40	; 0x28
 8004798:	2102      	movs	r1, #2
 800479a:	4618      	mov	r0, r3
 800479c:	f000 ff64 	bl	8005668 <RCCEx_PLL3_Config>
 80047a0:	4603      	mov	r3, r0
 80047a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047a6:	e00a      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80047ae:	e006      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80047b0:	bf00      	nop
 80047b2:	e004      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80047b4:	bf00      	nop
 80047b6:	e002      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80047b8:	bf00      	nop
 80047ba:	e000      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80047bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10b      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047c6:	4b39      	ldr	r3, [pc, #228]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ca:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80047ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047d6:	4a35      	ldr	r2, [pc, #212]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047d8:	430b      	orrs	r3, r1
 80047da:	6553      	str	r3, [r2, #84]	; 0x54
 80047dc:	e003      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80047e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80047f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047f6:	2300      	movs	r3, #0
 80047f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80047fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004800:	460b      	mov	r3, r1
 8004802:	4313      	orrs	r3, r2
 8004804:	d058      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800480a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800480e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004812:	d033      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004814:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004818:	d82c      	bhi.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800481a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481e:	d02f      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004824:	d826      	bhi.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004826:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800482a:	d02b      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800482c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004830:	d820      	bhi.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004836:	d012      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800483c:	d81a      	bhi.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800483e:	2b00      	cmp	r3, #0
 8004840:	d022      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004846:	d115      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800484c:	3308      	adds	r3, #8
 800484e:	2100      	movs	r1, #0
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fe57 	bl	8005504 <RCCEx_PLL2_Config>
 8004856:	4603      	mov	r3, r0
 8004858:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800485c:	e015      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800485e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004862:	3328      	adds	r3, #40	; 0x28
 8004864:	2102      	movs	r1, #2
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fefe 	bl	8005668 <RCCEx_PLL3_Config>
 800486c:	4603      	mov	r3, r0
 800486e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004872:	e00a      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800487a:	e006      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800487c:	bf00      	nop
 800487e:	e004      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004880:	bf00      	nop
 8004882:	e002      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004884:	bf00      	nop
 8004886:	e000      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800488a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10e      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004892:	4b06      	ldr	r3, [pc, #24]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004896:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800489a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800489e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048a2:	4a02      	ldr	r2, [pc, #8]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6593      	str	r3, [r2, #88]	; 0x58
 80048a8:	e006      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80048aa:	bf00      	nop
 80048ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80048b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80048c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048c8:	2300      	movs	r3, #0
 80048ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80048d2:	460b      	mov	r3, r1
 80048d4:	4313      	orrs	r3, r2
 80048d6:	d055      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80048d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048e4:	d033      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80048e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048ea:	d82c      	bhi.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80048ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f0:	d02f      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80048f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f6:	d826      	bhi.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80048f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048fc:	d02b      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80048fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004902:	d820      	bhi.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004904:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004908:	d012      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800490a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800490e:	d81a      	bhi.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004910:	2b00      	cmp	r3, #0
 8004912:	d022      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004918:	d115      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800491a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800491e:	3308      	adds	r3, #8
 8004920:	2100      	movs	r1, #0
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fdee 	bl	8005504 <RCCEx_PLL2_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800492e:	e015      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004934:	3328      	adds	r3, #40	; 0x28
 8004936:	2102      	movs	r1, #2
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fe95 	bl	8005668 <RCCEx_PLL3_Config>
 800493e:	4603      	mov	r3, r0
 8004940:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004944:	e00a      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800494c:	e006      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800494e:	bf00      	nop
 8004950:	e004      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004952:	bf00      	nop
 8004954:	e002      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004956:	bf00      	nop
 8004958:	e000      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800495a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800495c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10b      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004964:	4ba1      	ldr	r3, [pc, #644]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004968:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800496c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004970:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004974:	4a9d      	ldr	r2, [pc, #628]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004976:	430b      	orrs	r3, r1
 8004978:	6593      	str	r3, [r2, #88]	; 0x58
 800497a:	e003      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004980:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498c:	f002 0308 	and.w	r3, r2, #8
 8004990:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004994:	2300      	movs	r3, #0
 8004996:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800499a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800499e:	460b      	mov	r3, r1
 80049a0:	4313      	orrs	r3, r2
 80049a2:	d01e      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80049a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b0:	d10c      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049b6:	3328      	adds	r3, #40	; 0x28
 80049b8:	2102      	movs	r1, #2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fe54 	bl	8005668 <RCCEx_PLL3_Config>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80049cc:	4b87      	ldr	r3, [pc, #540]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049dc:	4a83      	ldr	r2, [pc, #524]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049de:	430b      	orrs	r3, r1
 80049e0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	f002 0310 	and.w	r3, r2, #16
 80049ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049f2:	2300      	movs	r3, #0
 80049f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80049f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80049fc:	460b      	mov	r3, r1
 80049fe:	4313      	orrs	r3, r2
 8004a00:	d01e      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a0e:	d10c      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a14:	3328      	adds	r3, #40	; 0x28
 8004a16:	2102      	movs	r1, #2
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fe25 	bl	8005668 <RCCEx_PLL3_Config>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a2a:	4b70      	ldr	r3, [pc, #448]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a3a:	4a6c      	ldr	r2, [pc, #432]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a48:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004a4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a50:	2300      	movs	r3, #0
 8004a52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a56:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	d03e      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a6c:	d022      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004a6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a72:	d81b      	bhi.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a7c:	d00b      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004a7e:	e015      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a84:	3308      	adds	r3, #8
 8004a86:	2100      	movs	r1, #0
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fd3b 	bl	8005504 <RCCEx_PLL2_Config>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a94:	e00f      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a9a:	3328      	adds	r3, #40	; 0x28
 8004a9c:	2102      	movs	r1, #2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fde2 	bl	8005668 <RCCEx_PLL3_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004aaa:	e004      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ab6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10b      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004abe:	4b4b      	ldr	r3, [pc, #300]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ace:	4a47      	ldr	r2, [pc, #284]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ad4:	e003      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ada:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004aea:	67bb      	str	r3, [r7, #120]	; 0x78
 8004aec:	2300      	movs	r3, #0
 8004aee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004af0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004af4:	460b      	mov	r3, r1
 8004af6:	4313      	orrs	r3, r2
 8004af8:	d03b      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b06:	d01f      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004b08:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b0c:	d818      	bhi.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b12:	d003      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004b14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b18:	d007      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004b1a:	e011      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b1c:	4b33      	ldr	r3, [pc, #204]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	4a32      	ldr	r2, [pc, #200]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b28:	e00f      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b2e:	3328      	adds	r3, #40	; 0x28
 8004b30:	2101      	movs	r1, #1
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fd98 	bl	8005668 <RCCEx_PLL3_Config>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b3e:	e004      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b46:	e000      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10b      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b52:	4b26      	ldr	r3, [pc, #152]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b56:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b62:	4a22      	ldr	r2, [pc, #136]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b64:	430b      	orrs	r3, r1
 8004b66:	6553      	str	r3, [r2, #84]	; 0x54
 8004b68:	e003      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b6e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004b7e:	673b      	str	r3, [r7, #112]	; 0x70
 8004b80:	2300      	movs	r3, #0
 8004b82:	677b      	str	r3, [r7, #116]	; 0x74
 8004b84:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	d034      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9c:	d007      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004b9e:	e011      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba0:	4b12      	ldr	r3, [pc, #72]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	4a11      	ldr	r2, [pc, #68]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004baa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bac:	e00e      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb2:	3308      	adds	r3, #8
 8004bb4:	2102      	movs	r1, #2
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fca4 	bl	8005504 <RCCEx_PLL2_Config>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bc2:	e003      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bcc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10d      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004bd4:	4b05      	ldr	r3, [pc, #20]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be2:	4a02      	ldr	r2, [pc, #8]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004be4:	430b      	orrs	r3, r1
 8004be6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004be8:	e006      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004bea:	bf00      	nop
 8004bec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bf4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c00:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004c04:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c06:	2300      	movs	r3, #0
 8004c08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c0a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4313      	orrs	r3, r2
 8004c12:	d00c      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c18:	3328      	adds	r3, #40	; 0x28
 8004c1a:	2102      	movs	r1, #2
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fd23 	bl	8005668 <RCCEx_PLL3_Config>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c36:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004c3a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	667b      	str	r3, [r7, #100]	; 0x64
 8004c40:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004c44:	460b      	mov	r3, r1
 8004c46:	4313      	orrs	r3, r2
 8004c48:	d038      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c56:	d018      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004c58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c5c:	d811      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c62:	d014      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c68:	d80b      	bhi.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d011      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c72:	d106      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c74:	4bc3      	ldr	r3, [pc, #780]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	4ac2      	ldr	r2, [pc, #776]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c80:	e008      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c88:	e004      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004c8a:	bf00      	nop
 8004c8c:	e002      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004c8e:	bf00      	nop
 8004c90:	e000      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10b      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c9c:	4bb9      	ldr	r3, [pc, #740]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cac:	4ab5      	ldr	r2, [pc, #724]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	6553      	str	r3, [r2, #84]	; 0x54
 8004cb2:	e003      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cb8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004cc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cca:	2300      	movs	r3, #0
 8004ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	d009      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cd8:	4baa      	ldr	r3, [pc, #680]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cdc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ce6:	4aa7      	ldr	r2, [pc, #668]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ce8:	430b      	orrs	r3, r1
 8004cea:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004cf8:	653b      	str	r3, [r7, #80]	; 0x50
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	657b      	str	r3, [r7, #84]	; 0x54
 8004cfe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004d02:	460b      	mov	r3, r1
 8004d04:	4313      	orrs	r3, r2
 8004d06:	d009      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d08:	4b9e      	ldr	r3, [pc, #632]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d16:	4a9b      	ldr	r2, [pc, #620]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004d28:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d2e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004d32:	460b      	mov	r3, r1
 8004d34:	4313      	orrs	r3, r2
 8004d36:	d009      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004d38:	4b92      	ldr	r3, [pc, #584]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d46:	4a8f      	ldr	r2, [pc, #572]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d54:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004d58:	643b      	str	r3, [r7, #64]	; 0x40
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d5e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004d62:	460b      	mov	r3, r1
 8004d64:	4313      	orrs	r3, r2
 8004d66:	d00e      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d68:	4b86      	ldr	r3, [pc, #536]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	4a85      	ldr	r2, [pc, #532]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d72:	6113      	str	r3, [r2, #16]
 8004d74:	4b83      	ldr	r3, [pc, #524]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d76:	6919      	ldr	r1, [r3, #16]
 8004d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004d80:	4a80      	ldr	r2, [pc, #512]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d82:	430b      	orrs	r3, r1
 8004d84:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d94:	2300      	movs	r3, #0
 8004d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d98:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	d009      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004da2:	4b78      	ldr	r3, [pc, #480]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db0:	4a74      	ldr	r2, [pc, #464]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004db2:	430b      	orrs	r3, r1
 8004db4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004dc2:	633b      	str	r3, [r7, #48]	; 0x30
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	d00a      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dd2:	4b6c      	ldr	r3, [pc, #432]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004de2:	4a68      	ldr	r2, [pc, #416]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004de4:	430b      	orrs	r3, r1
 8004de6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df0:	2100      	movs	r1, #0
 8004df2:	62b9      	str	r1, [r7, #40]	; 0x28
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dfa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4313      	orrs	r3, r2
 8004e02:	d011      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e08:	3308      	adds	r3, #8
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fb79 	bl	8005504 <RCCEx_PLL2_Config>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004e18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e24:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	2100      	movs	r1, #0
 8004e32:	6239      	str	r1, [r7, #32]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4313      	orrs	r3, r2
 8004e42:	d011      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e48:	3308      	adds	r3, #8
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fb59 	bl	8005504 <RCCEx_PLL2_Config>
 8004e52:	4603      	mov	r3, r0
 8004e54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004e58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e64:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	2100      	movs	r1, #0
 8004e72:	61b9      	str	r1, [r7, #24]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	61fb      	str	r3, [r7, #28]
 8004e7a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4313      	orrs	r3, r2
 8004e82:	d011      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e88:	3308      	adds	r3, #8
 8004e8a:	2102      	movs	r1, #2
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 fb39 	bl	8005504 <RCCEx_PLL2_Config>
 8004e92:	4603      	mov	r3, r0
 8004e94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004e98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ea4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	6139      	str	r1, [r7, #16]
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	d011      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec8:	3328      	adds	r3, #40	; 0x28
 8004eca:	2100      	movs	r1, #0
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 fbcb 	bl	8005668 <RCCEx_PLL3_Config>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004ed8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ee4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	f003 0310 	and.w	r3, r3, #16
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004efe:	460b      	mov	r3, r1
 8004f00:	4313      	orrs	r3, r2
 8004f02:	d011      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f08:	3328      	adds	r3, #40	; 0x28
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 fbab 	bl	8005668 <RCCEx_PLL3_Config>
 8004f12:	4603      	mov	r3, r0
 8004f14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004f18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f24:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f30:	2100      	movs	r1, #0
 8004f32:	6039      	str	r1, [r7, #0]
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	607b      	str	r3, [r7, #4]
 8004f3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4313      	orrs	r3, r2
 8004f42:	d011      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f48:	3328      	adds	r3, #40	; 0x28
 8004f4a:	2102      	movs	r1, #2
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fb8b 	bl	8005668 <RCCEx_PLL3_Config>
 8004f52:	4603      	mov	r3, r0
 8004f54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004f58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f64:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004f68:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	e000      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f82:	bf00      	nop
 8004f84:	58024400 	.word	0x58024400

08004f88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004f8c:	f7fe fde2 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8004f90:	4602      	mov	r2, r0
 8004f92:	4b06      	ldr	r3, [pc, #24]	; (8004fac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	091b      	lsrs	r3, r3, #4
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	4904      	ldr	r1, [pc, #16]	; (8004fb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004f9e:	5ccb      	ldrb	r3, [r1, r3]
 8004fa0:	f003 031f 	and.w	r3, r3, #31
 8004fa4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	58024400 	.word	0x58024400
 8004fb0:	0800a5b4 	.word	0x0800a5b4

08004fb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b089      	sub	sp, #36	; 0x24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fbc:	4ba1      	ldr	r3, [pc, #644]	; (8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc0:	f003 0303 	and.w	r3, r3, #3
 8004fc4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004fc6:	4b9f      	ldr	r3, [pc, #636]	; (8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fca:	0b1b      	lsrs	r3, r3, #12
 8004fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fd0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004fd2:	4b9c      	ldr	r3, [pc, #624]	; (8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	091b      	lsrs	r3, r3, #4
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004fde:	4b99      	ldr	r3, [pc, #612]	; (8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	08db      	lsrs	r3, r3, #3
 8004fe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	fb02 f303 	mul.w	r3, r2, r3
 8004fee:	ee07 3a90 	vmov	s15, r3
 8004ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 8111 	beq.w	8005224 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	2b02      	cmp	r3, #2
 8005006:	f000 8083 	beq.w	8005110 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	2b02      	cmp	r3, #2
 800500e:	f200 80a1 	bhi.w	8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d056      	beq.n	80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800501e:	e099      	b.n	8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005020:	4b88      	ldr	r3, [pc, #544]	; (8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b00      	cmp	r3, #0
 800502a:	d02d      	beq.n	8005088 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800502c:	4b85      	ldr	r3, [pc, #532]	; (8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	08db      	lsrs	r3, r3, #3
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	4a84      	ldr	r2, [pc, #528]	; (8005248 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005038:	fa22 f303 	lsr.w	r3, r2, r3
 800503c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	ee07 3a90 	vmov	s15, r3
 8005044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005056:	4b7b      	ldr	r3, [pc, #492]	; (8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005066:	ed97 6a03 	vldr	s12, [r7, #12]
 800506a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800524c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800506e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800507a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800507e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005082:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005086:	e087      	b.n	8005198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005092:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005250 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509a:	4b6a      	ldr	r3, [pc, #424]	; (8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800509c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800524c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050ca:	e065      	b.n	8005198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005254 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050de:	4b59      	ldr	r3, [pc, #356]	; (8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80050f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800524c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800510e:	e043      	b.n	8005198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005258 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800511e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005122:	4b48      	ldr	r3, [pc, #288]	; (8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005132:	ed97 6a03 	vldr	s12, [r7, #12]
 8005136:	eddf 5a45 	vldr	s11, [pc, #276]	; 800524c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800513a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800514a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005152:	e021      	b.n	8005198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005254 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005166:	4b37      	ldr	r3, [pc, #220]	; (8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005176:	ed97 6a03 	vldr	s12, [r7, #12]
 800517a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800524c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800517e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800518a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005196:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005198:	4b2a      	ldr	r3, [pc, #168]	; (8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	0a5b      	lsrs	r3, r3, #9
 800519e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80051b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051be:	ee17 2a90 	vmov	r2, s15
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80051c6:	4b1f      	ldr	r3, [pc, #124]	; (8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	0c1b      	lsrs	r3, r3, #16
 80051cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051d0:	ee07 3a90 	vmov	s15, r3
 80051d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80051e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051ec:	ee17 2a90 	vmov	r2, s15
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80051f4:	4b13      	ldr	r3, [pc, #76]	; (8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f8:	0e1b      	lsrs	r3, r3, #24
 80051fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800520a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800520e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800521a:	ee17 2a90 	vmov	r2, s15
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005222:	e008      	b.n	8005236 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	609a      	str	r2, [r3, #8]
}
 8005236:	bf00      	nop
 8005238:	3724      	adds	r7, #36	; 0x24
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	58024400 	.word	0x58024400
 8005248:	03d09000 	.word	0x03d09000
 800524c:	46000000 	.word	0x46000000
 8005250:	4c742400 	.word	0x4c742400
 8005254:	4a742400 	.word	0x4a742400
 8005258:	4af42400 	.word	0x4af42400

0800525c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800525c:	b480      	push	{r7}
 800525e:	b089      	sub	sp, #36	; 0x24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005264:	4ba1      	ldr	r3, [pc, #644]	; (80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005268:	f003 0303 	and.w	r3, r3, #3
 800526c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800526e:	4b9f      	ldr	r3, [pc, #636]	; (80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005272:	0d1b      	lsrs	r3, r3, #20
 8005274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005278:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800527a:	4b9c      	ldr	r3, [pc, #624]	; (80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527e:	0a1b      	lsrs	r3, r3, #8
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005286:	4b99      	ldr	r3, [pc, #612]	; (80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528a:	08db      	lsrs	r3, r3, #3
 800528c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	fb02 f303 	mul.w	r3, r2, r3
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 8111 	beq.w	80054cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	f000 8083 	beq.w	80053b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	f200 80a1 	bhi.w	80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d056      	beq.n	8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80052c6:	e099      	b.n	80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052c8:	4b88      	ldr	r3, [pc, #544]	; (80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d02d      	beq.n	8005330 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052d4:	4b85      	ldr	r3, [pc, #532]	; (80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	08db      	lsrs	r3, r3, #3
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	4a84      	ldr	r2, [pc, #528]	; (80054f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80052e0:	fa22 f303 	lsr.w	r3, r2, r3
 80052e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	ee07 3a90 	vmov	s15, r3
 80052ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052fe:	4b7b      	ldr	r3, [pc, #492]	; (80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005306:	ee07 3a90 	vmov	s15, r3
 800530a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800530e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005312:	eddf 5a78 	vldr	s11, [pc, #480]	; 80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800531a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800531e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800532a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800532e:	e087      	b.n	8005440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	ee07 3a90 	vmov	s15, r3
 8005336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80054f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800533e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005342:	4b6a      	ldr	r3, [pc, #424]	; (80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534a:	ee07 3a90 	vmov	s15, r3
 800534e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005352:	ed97 6a03 	vldr	s12, [r7, #12]
 8005356:	eddf 5a67 	vldr	s11, [pc, #412]	; 80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800535a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800535e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800536a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005372:	e065      	b.n	8005440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80054fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005386:	4b59      	ldr	r3, [pc, #356]	; (80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538e:	ee07 3a90 	vmov	s15, r3
 8005392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005396:	ed97 6a03 	vldr	s12, [r7, #12]
 800539a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800539e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053b6:	e043      	b.n	8005440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005500 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80053c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ca:	4b48      	ldr	r3, [pc, #288]	; (80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d2:	ee07 3a90 	vmov	s15, r3
 80053d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053da:	ed97 6a03 	vldr	s12, [r7, #12]
 80053de:	eddf 5a45 	vldr	s11, [pc, #276]	; 80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053fa:	e021      	b.n	8005440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005406:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80054fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800540a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800540e:	4b37      	ldr	r3, [pc, #220]	; (80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005416:	ee07 3a90 	vmov	s15, r3
 800541a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800541e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005422:	eddf 5a34 	vldr	s11, [pc, #208]	; 80054f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800542a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800542e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800543e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005440:	4b2a      	ldr	r3, [pc, #168]	; (80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	0a5b      	lsrs	r3, r3, #9
 8005446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005452:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005456:	ee37 7a87 	vadd.f32	s14, s15, s14
 800545a:	edd7 6a07 	vldr	s13, [r7, #28]
 800545e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005466:	ee17 2a90 	vmov	r2, s15
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800546e:	4b1f      	ldr	r3, [pc, #124]	; (80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	0c1b      	lsrs	r3, r3, #16
 8005474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005478:	ee07 3a90 	vmov	s15, r3
 800547c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005480:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005484:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005488:	edd7 6a07 	vldr	s13, [r7, #28]
 800548c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005494:	ee17 2a90 	vmov	r2, s15
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800549c:	4b13      	ldr	r3, [pc, #76]	; (80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800549e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a0:	0e1b      	lsrs	r3, r3, #24
 80054a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054a6:	ee07 3a90 	vmov	s15, r3
 80054aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80054ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054c2:	ee17 2a90 	vmov	r2, s15
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80054ca:	e008      	b.n	80054de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	609a      	str	r2, [r3, #8]
}
 80054de:	bf00      	nop
 80054e0:	3724      	adds	r7, #36	; 0x24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	58024400 	.word	0x58024400
 80054f0:	03d09000 	.word	0x03d09000
 80054f4:	46000000 	.word	0x46000000
 80054f8:	4c742400 	.word	0x4c742400
 80054fc:	4a742400 	.word	0x4a742400
 8005500:	4af42400 	.word	0x4af42400

08005504 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005512:	4b53      	ldr	r3, [pc, #332]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	2b03      	cmp	r3, #3
 800551c:	d101      	bne.n	8005522 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e099      	b.n	8005656 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005522:	4b4f      	ldr	r3, [pc, #316]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a4e      	ldr	r2, [pc, #312]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 8005528:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800552c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800552e:	f7fc facd 	bl	8001acc <HAL_GetTick>
 8005532:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005534:	e008      	b.n	8005548 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005536:	f7fc fac9 	bl	8001acc <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e086      	b.n	8005656 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005548:	4b45      	ldr	r3, [pc, #276]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1f0      	bne.n	8005536 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005554:	4b42      	ldr	r3, [pc, #264]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	031b      	lsls	r3, r3, #12
 8005562:	493f      	ldr	r1, [pc, #252]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 8005564:	4313      	orrs	r3, r2
 8005566:	628b      	str	r3, [r1, #40]	; 0x28
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	3b01      	subs	r3, #1
 800556e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	3b01      	subs	r3, #1
 8005578:	025b      	lsls	r3, r3, #9
 800557a:	b29b      	uxth	r3, r3
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	3b01      	subs	r3, #1
 8005584:	041b      	lsls	r3, r3, #16
 8005586:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	3b01      	subs	r3, #1
 8005592:	061b      	lsls	r3, r3, #24
 8005594:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005598:	4931      	ldr	r1, [pc, #196]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 800559a:	4313      	orrs	r3, r2
 800559c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800559e:	4b30      	ldr	r3, [pc, #192]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 80055a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	492d      	ldr	r1, [pc, #180]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80055b0:	4b2b      	ldr	r3, [pc, #172]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	f023 0220 	bic.w	r2, r3, #32
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	4928      	ldr	r1, [pc, #160]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80055c2:	4b27      	ldr	r3, [pc, #156]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 80055c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c6:	4a26      	ldr	r2, [pc, #152]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 80055c8:	f023 0310 	bic.w	r3, r3, #16
 80055cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80055ce:	4b24      	ldr	r3, [pc, #144]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 80055d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055d2:	4b24      	ldr	r3, [pc, #144]	; (8005664 <RCCEx_PLL2_Config+0x160>)
 80055d4:	4013      	ands	r3, r2
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	69d2      	ldr	r2, [r2, #28]
 80055da:	00d2      	lsls	r2, r2, #3
 80055dc:	4920      	ldr	r1, [pc, #128]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80055e2:	4b1f      	ldr	r3, [pc, #124]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 80055e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e6:	4a1e      	ldr	r2, [pc, #120]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 80055e8:	f043 0310 	orr.w	r3, r3, #16
 80055ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d106      	bne.n	8005602 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80055f4:	4b1a      	ldr	r3, [pc, #104]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	4a19      	ldr	r2, [pc, #100]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 80055fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005600:	e00f      	b.n	8005622 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d106      	bne.n	8005616 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005608:	4b15      	ldr	r3, [pc, #84]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	4a14      	ldr	r2, [pc, #80]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 800560e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005612:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005614:	e005      	b.n	8005622 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005616:	4b12      	ldr	r3, [pc, #72]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 8005618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561a:	4a11      	ldr	r2, [pc, #68]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 800561c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005620:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005622:	4b0f      	ldr	r3, [pc, #60]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a0e      	ldr	r2, [pc, #56]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 8005628:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800562c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800562e:	f7fc fa4d 	bl	8001acc <HAL_GetTick>
 8005632:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005634:	e008      	b.n	8005648 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005636:	f7fc fa49 	bl	8001acc <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d901      	bls.n	8005648 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e006      	b.n	8005656 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005648:	4b05      	ldr	r3, [pc, #20]	; (8005660 <RCCEx_PLL2_Config+0x15c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0f0      	beq.n	8005636 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005654:	7bfb      	ldrb	r3, [r7, #15]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	58024400 	.word	0x58024400
 8005664:	ffff0007 	.word	0xffff0007

08005668 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005676:	4b53      	ldr	r3, [pc, #332]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 8005678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	2b03      	cmp	r3, #3
 8005680:	d101      	bne.n	8005686 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e099      	b.n	80057ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005686:	4b4f      	ldr	r3, [pc, #316]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a4e      	ldr	r2, [pc, #312]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 800568c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005692:	f7fc fa1b 	bl	8001acc <HAL_GetTick>
 8005696:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005698:	e008      	b.n	80056ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800569a:	f7fc fa17 	bl	8001acc <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d901      	bls.n	80056ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e086      	b.n	80057ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056ac:	4b45      	ldr	r3, [pc, #276]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1f0      	bne.n	800569a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80056b8:	4b42      	ldr	r3, [pc, #264]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 80056ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	051b      	lsls	r3, r3, #20
 80056c6:	493f      	ldr	r1, [pc, #252]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	628b      	str	r3, [r1, #40]	; 0x28
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	3b01      	subs	r3, #1
 80056dc:	025b      	lsls	r3, r3, #9
 80056de:	b29b      	uxth	r3, r3
 80056e0:	431a      	orrs	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	041b      	lsls	r3, r3, #16
 80056ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	3b01      	subs	r3, #1
 80056f6:	061b      	lsls	r3, r3, #24
 80056f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80056fc:	4931      	ldr	r1, [pc, #196]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005702:	4b30      	ldr	r3, [pc, #192]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 8005704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005706:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	492d      	ldr	r1, [pc, #180]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 8005710:	4313      	orrs	r3, r2
 8005712:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005714:	4b2b      	ldr	r3, [pc, #172]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	4928      	ldr	r1, [pc, #160]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 8005722:	4313      	orrs	r3, r2
 8005724:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005726:	4b27      	ldr	r3, [pc, #156]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 8005728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572a:	4a26      	ldr	r2, [pc, #152]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 800572c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005730:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005732:	4b24      	ldr	r3, [pc, #144]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 8005734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005736:	4b24      	ldr	r3, [pc, #144]	; (80057c8 <RCCEx_PLL3_Config+0x160>)
 8005738:	4013      	ands	r3, r2
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	69d2      	ldr	r2, [r2, #28]
 800573e:	00d2      	lsls	r2, r2, #3
 8005740:	4920      	ldr	r1, [pc, #128]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 8005742:	4313      	orrs	r3, r2
 8005744:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005746:	4b1f      	ldr	r3, [pc, #124]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	4a1e      	ldr	r2, [pc, #120]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 800574c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005750:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d106      	bne.n	8005766 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005758:	4b1a      	ldr	r3, [pc, #104]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	4a19      	ldr	r2, [pc, #100]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 800575e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005762:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005764:	e00f      	b.n	8005786 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d106      	bne.n	800577a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800576c:	4b15      	ldr	r3, [pc, #84]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	4a14      	ldr	r2, [pc, #80]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 8005772:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005776:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005778:	e005      	b.n	8005786 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800577a:	4b12      	ldr	r3, [pc, #72]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 800577c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577e:	4a11      	ldr	r2, [pc, #68]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 8005780:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005784:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005786:	4b0f      	ldr	r3, [pc, #60]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a0e      	ldr	r2, [pc, #56]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 800578c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005792:	f7fc f99b 	bl	8001acc <HAL_GetTick>
 8005796:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005798:	e008      	b.n	80057ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800579a:	f7fc f997 	bl	8001acc <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d901      	bls.n	80057ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e006      	b.n	80057ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057ac:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <RCCEx_PLL3_Config+0x15c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0f0      	beq.n	800579a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	58024400 	.word	0x58024400
 80057c8:	ffff0007 	.word	0xffff0007

080057cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e049      	b.n	8005872 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fb fea0 	bl	8001538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3304      	adds	r3, #4
 8005808:	4619      	mov	r1, r3
 800580a:	4610      	mov	r0, r2
 800580c:	f000 fd7c 	bl	8006308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b01      	cmp	r3, #1
 800588e:	d001      	beq.n	8005894 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e054      	b.n	800593e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0201 	orr.w	r2, r2, #1
 80058aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a26      	ldr	r2, [pc, #152]	; (800594c <HAL_TIM_Base_Start_IT+0xd0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d022      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x80>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058be:	d01d      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x80>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a22      	ldr	r2, [pc, #136]	; (8005950 <HAL_TIM_Base_Start_IT+0xd4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d018      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x80>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a21      	ldr	r2, [pc, #132]	; (8005954 <HAL_TIM_Base_Start_IT+0xd8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d013      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x80>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a1f      	ldr	r2, [pc, #124]	; (8005958 <HAL_TIM_Base_Start_IT+0xdc>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00e      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x80>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a1e      	ldr	r2, [pc, #120]	; (800595c <HAL_TIM_Base_Start_IT+0xe0>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d009      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x80>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a1c      	ldr	r2, [pc, #112]	; (8005960 <HAL_TIM_Base_Start_IT+0xe4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d004      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x80>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a1b      	ldr	r2, [pc, #108]	; (8005964 <HAL_TIM_Base_Start_IT+0xe8>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d115      	bne.n	8005928 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	4b19      	ldr	r3, [pc, #100]	; (8005968 <HAL_TIM_Base_Start_IT+0xec>)
 8005904:	4013      	ands	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b06      	cmp	r3, #6
 800590c:	d015      	beq.n	800593a <HAL_TIM_Base_Start_IT+0xbe>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005914:	d011      	beq.n	800593a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f042 0201 	orr.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005926:	e008      	b.n	800593a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0201 	orr.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	e000      	b.n	800593c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40010000 	.word	0x40010000
 8005950:	40000400 	.word	0x40000400
 8005954:	40000800 	.word	0x40000800
 8005958:	40000c00 	.word	0x40000c00
 800595c:	40010400 	.word	0x40010400
 8005960:	40001800 	.word	0x40001800
 8005964:	40014000 	.word	0x40014000
 8005968:	00010007 	.word	0x00010007

0800596c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e049      	b.n	8005a12 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d106      	bne.n	8005998 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f841 	bl	8005a1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3304      	adds	r3, #4
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f000 fcac 	bl	8006308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
	...

08005a30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d109      	bne.n	8005a54 <HAL_TIM_PWM_Start+0x24>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	bf14      	ite	ne
 8005a4c:	2301      	movne	r3, #1
 8005a4e:	2300      	moveq	r3, #0
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	e03c      	b.n	8005ace <HAL_TIM_PWM_Start+0x9e>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d109      	bne.n	8005a6e <HAL_TIM_PWM_Start+0x3e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	bf14      	ite	ne
 8005a66:	2301      	movne	r3, #1
 8005a68:	2300      	moveq	r3, #0
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	e02f      	b.n	8005ace <HAL_TIM_PWM_Start+0x9e>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d109      	bne.n	8005a88 <HAL_TIM_PWM_Start+0x58>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	bf14      	ite	ne
 8005a80:	2301      	movne	r3, #1
 8005a82:	2300      	moveq	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	e022      	b.n	8005ace <HAL_TIM_PWM_Start+0x9e>
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b0c      	cmp	r3, #12
 8005a8c:	d109      	bne.n	8005aa2 <HAL_TIM_PWM_Start+0x72>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	bf14      	ite	ne
 8005a9a:	2301      	movne	r3, #1
 8005a9c:	2300      	moveq	r3, #0
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	e015      	b.n	8005ace <HAL_TIM_PWM_Start+0x9e>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b10      	cmp	r3, #16
 8005aa6:	d109      	bne.n	8005abc <HAL_TIM_PWM_Start+0x8c>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	bf14      	ite	ne
 8005ab4:	2301      	movne	r3, #1
 8005ab6:	2300      	moveq	r3, #0
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	e008      	b.n	8005ace <HAL_TIM_PWM_Start+0x9e>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	bf14      	ite	ne
 8005ac8:	2301      	movne	r3, #1
 8005aca:	2300      	moveq	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e0a1      	b.n	8005c1a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <HAL_TIM_PWM_Start+0xb6>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ae4:	e023      	b.n	8005b2e <HAL_TIM_PWM_Start+0xfe>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d104      	bne.n	8005af6 <HAL_TIM_PWM_Start+0xc6>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005af4:	e01b      	b.n	8005b2e <HAL_TIM_PWM_Start+0xfe>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d104      	bne.n	8005b06 <HAL_TIM_PWM_Start+0xd6>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b04:	e013      	b.n	8005b2e <HAL_TIM_PWM_Start+0xfe>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b0c      	cmp	r3, #12
 8005b0a:	d104      	bne.n	8005b16 <HAL_TIM_PWM_Start+0xe6>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b14:	e00b      	b.n	8005b2e <HAL_TIM_PWM_Start+0xfe>
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2b10      	cmp	r3, #16
 8005b1a:	d104      	bne.n	8005b26 <HAL_TIM_PWM_Start+0xf6>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b24:	e003      	b.n	8005b2e <HAL_TIM_PWM_Start+0xfe>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2201      	movs	r2, #1
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 fff4 	bl	8006b24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a38      	ldr	r2, [pc, #224]	; (8005c24 <HAL_TIM_PWM_Start+0x1f4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d013      	beq.n	8005b6e <HAL_TIM_PWM_Start+0x13e>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a37      	ldr	r2, [pc, #220]	; (8005c28 <HAL_TIM_PWM_Start+0x1f8>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00e      	beq.n	8005b6e <HAL_TIM_PWM_Start+0x13e>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a35      	ldr	r2, [pc, #212]	; (8005c2c <HAL_TIM_PWM_Start+0x1fc>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d009      	beq.n	8005b6e <HAL_TIM_PWM_Start+0x13e>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a34      	ldr	r2, [pc, #208]	; (8005c30 <HAL_TIM_PWM_Start+0x200>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d004      	beq.n	8005b6e <HAL_TIM_PWM_Start+0x13e>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a32      	ldr	r2, [pc, #200]	; (8005c34 <HAL_TIM_PWM_Start+0x204>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d101      	bne.n	8005b72 <HAL_TIM_PWM_Start+0x142>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <HAL_TIM_PWM_Start+0x144>
 8005b72:	2300      	movs	r3, #0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d007      	beq.n	8005b88 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b86:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a25      	ldr	r2, [pc, #148]	; (8005c24 <HAL_TIM_PWM_Start+0x1f4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d022      	beq.n	8005bd8 <HAL_TIM_PWM_Start+0x1a8>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b9a:	d01d      	beq.n	8005bd8 <HAL_TIM_PWM_Start+0x1a8>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a25      	ldr	r2, [pc, #148]	; (8005c38 <HAL_TIM_PWM_Start+0x208>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d018      	beq.n	8005bd8 <HAL_TIM_PWM_Start+0x1a8>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a24      	ldr	r2, [pc, #144]	; (8005c3c <HAL_TIM_PWM_Start+0x20c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d013      	beq.n	8005bd8 <HAL_TIM_PWM_Start+0x1a8>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a22      	ldr	r2, [pc, #136]	; (8005c40 <HAL_TIM_PWM_Start+0x210>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d00e      	beq.n	8005bd8 <HAL_TIM_PWM_Start+0x1a8>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a1a      	ldr	r2, [pc, #104]	; (8005c28 <HAL_TIM_PWM_Start+0x1f8>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d009      	beq.n	8005bd8 <HAL_TIM_PWM_Start+0x1a8>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1e      	ldr	r2, [pc, #120]	; (8005c44 <HAL_TIM_PWM_Start+0x214>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d004      	beq.n	8005bd8 <HAL_TIM_PWM_Start+0x1a8>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a16      	ldr	r2, [pc, #88]	; (8005c2c <HAL_TIM_PWM_Start+0x1fc>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d115      	bne.n	8005c04 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689a      	ldr	r2, [r3, #8]
 8005bde:	4b1a      	ldr	r3, [pc, #104]	; (8005c48 <HAL_TIM_PWM_Start+0x218>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b06      	cmp	r3, #6
 8005be8:	d015      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x1e6>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf0:	d011      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 0201 	orr.w	r2, r2, #1
 8005c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c02:	e008      	b.n	8005c16 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	e000      	b.n	8005c18 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	40010000 	.word	0x40010000
 8005c28:	40010400 	.word	0x40010400
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	40014400 	.word	0x40014400
 8005c34:	40014800 	.word	0x40014800
 8005c38:	40000400 	.word	0x40000400
 8005c3c:	40000800 	.word	0x40000800
 8005c40:	40000c00 	.word	0x40000c00
 8005c44:	40001800 	.word	0x40001800
 8005c48:	00010007 	.word	0x00010007

08005c4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d122      	bne.n	8005ca8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d11b      	bne.n	8005ca8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0202 	mvn.w	r2, #2
 8005c78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fb1c 	bl	80062cc <HAL_TIM_IC_CaptureCallback>
 8005c94:	e005      	b.n	8005ca2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fb0e 	bl	80062b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fb1f 	bl	80062e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f003 0304 	and.w	r3, r3, #4
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d122      	bne.n	8005cfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d11b      	bne.n	8005cfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f06f 0204 	mvn.w	r2, #4
 8005ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 faf2 	bl	80062cc <HAL_TIM_IC_CaptureCallback>
 8005ce8:	e005      	b.n	8005cf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fae4 	bl	80062b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 faf5 	bl	80062e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b08      	cmp	r3, #8
 8005d08:	d122      	bne.n	8005d50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f003 0308 	and.w	r3, r3, #8
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d11b      	bne.n	8005d50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f06f 0208 	mvn.w	r2, #8
 8005d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2204      	movs	r2, #4
 8005d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fac8 	bl	80062cc <HAL_TIM_IC_CaptureCallback>
 8005d3c:	e005      	b.n	8005d4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 faba 	bl	80062b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 facb 	bl	80062e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	f003 0310 	and.w	r3, r3, #16
 8005d5a:	2b10      	cmp	r3, #16
 8005d5c:	d122      	bne.n	8005da4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	2b10      	cmp	r3, #16
 8005d6a:	d11b      	bne.n	8005da4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f06f 0210 	mvn.w	r2, #16
 8005d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2208      	movs	r2, #8
 8005d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fa9e 	bl	80062cc <HAL_TIM_IC_CaptureCallback>
 8005d90:	e005      	b.n	8005d9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fa90 	bl	80062b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 faa1 	bl	80062e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d10e      	bne.n	8005dd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d107      	bne.n	8005dd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f06f 0201 	mvn.w	r2, #1
 8005dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fa6a 	bl	80062a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dda:	2b80      	cmp	r3, #128	; 0x80
 8005ddc:	d10e      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de8:	2b80      	cmp	r3, #128	; 0x80
 8005dea:	d107      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 ff52 	bl	8006ca0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e0a:	d10e      	bne.n	8005e2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e16:	2b80      	cmp	r3, #128	; 0x80
 8005e18:	d107      	bne.n	8005e2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 ff45 	bl	8006cb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e34:	2b40      	cmp	r3, #64	; 0x40
 8005e36:	d10e      	bne.n	8005e56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e42:	2b40      	cmp	r3, #64	; 0x40
 8005e44:	d107      	bne.n	8005e56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fa4f 	bl	80062f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d10e      	bne.n	8005e82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	d107      	bne.n	8005e82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f06f 0220 	mvn.w	r2, #32
 8005e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 ff05 	bl	8006c8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e82:	bf00      	nop
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e0ff      	b.n	80060aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b14      	cmp	r3, #20
 8005eb6:	f200 80f0 	bhi.w	800609a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005eba:	a201      	add	r2, pc, #4	; (adr r2, 8005ec0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec0:	08005f15 	.word	0x08005f15
 8005ec4:	0800609b 	.word	0x0800609b
 8005ec8:	0800609b 	.word	0x0800609b
 8005ecc:	0800609b 	.word	0x0800609b
 8005ed0:	08005f55 	.word	0x08005f55
 8005ed4:	0800609b 	.word	0x0800609b
 8005ed8:	0800609b 	.word	0x0800609b
 8005edc:	0800609b 	.word	0x0800609b
 8005ee0:	08005f97 	.word	0x08005f97
 8005ee4:	0800609b 	.word	0x0800609b
 8005ee8:	0800609b 	.word	0x0800609b
 8005eec:	0800609b 	.word	0x0800609b
 8005ef0:	08005fd7 	.word	0x08005fd7
 8005ef4:	0800609b 	.word	0x0800609b
 8005ef8:	0800609b 	.word	0x0800609b
 8005efc:	0800609b 	.word	0x0800609b
 8005f00:	08006019 	.word	0x08006019
 8005f04:	0800609b 	.word	0x0800609b
 8005f08:	0800609b 	.word	0x0800609b
 8005f0c:	0800609b 	.word	0x0800609b
 8005f10:	08006059 	.word	0x08006059
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68b9      	ldr	r1, [r7, #8]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fa8e 	bl	800643c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0208 	orr.w	r2, r2, #8
 8005f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0204 	bic.w	r2, r2, #4
 8005f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6999      	ldr	r1, [r3, #24]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	619a      	str	r2, [r3, #24]
      break;
 8005f52:	e0a5      	b.n	80060a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68b9      	ldr	r1, [r7, #8]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 fafe 	bl	800655c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	699a      	ldr	r2, [r3, #24]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699a      	ldr	r2, [r3, #24]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6999      	ldr	r1, [r3, #24]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	021a      	lsls	r2, r3, #8
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	619a      	str	r2, [r3, #24]
      break;
 8005f94:	e084      	b.n	80060a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68b9      	ldr	r1, [r7, #8]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 fb67 	bl	8006670 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69da      	ldr	r2, [r3, #28]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f042 0208 	orr.w	r2, r2, #8
 8005fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69da      	ldr	r2, [r3, #28]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0204 	bic.w	r2, r2, #4
 8005fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69d9      	ldr	r1, [r3, #28]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	691a      	ldr	r2, [r3, #16]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	61da      	str	r2, [r3, #28]
      break;
 8005fd4:	e064      	b.n	80060a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68b9      	ldr	r1, [r7, #8]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 fbcf 	bl	8006780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	69da      	ldr	r2, [r3, #28]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69da      	ldr	r2, [r3, #28]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69d9      	ldr	r1, [r3, #28]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	021a      	lsls	r2, r3, #8
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	61da      	str	r2, [r3, #28]
      break;
 8006016:	e043      	b.n	80060a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fc18 	bl	8006854 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0208 	orr.w	r2, r2, #8
 8006032:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0204 	bic.w	r2, r2, #4
 8006042:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	691a      	ldr	r2, [r3, #16]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006056:	e023      	b.n	80060a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68b9      	ldr	r1, [r7, #8]
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fc5c 	bl	800691c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006072:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006082:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	021a      	lsls	r2, r3, #8
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006098:	e002      	b.n	80060a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	75fb      	strb	r3, [r7, #23]
      break;
 800609e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop

080060b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_TIM_ConfigClockSource+0x1c>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e0dc      	b.n	800628a <HAL_TIM_ConfigClockSource+0x1d6>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	4b6a      	ldr	r3, [pc, #424]	; (8006294 <HAL_TIM_ConfigClockSource+0x1e0>)
 80060ec:	4013      	ands	r3, r2
 80060ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a64      	ldr	r2, [pc, #400]	; (8006298 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006106:	4293      	cmp	r3, r2
 8006108:	f000 80a9 	beq.w	800625e <HAL_TIM_ConfigClockSource+0x1aa>
 800610c:	4a62      	ldr	r2, [pc, #392]	; (8006298 <HAL_TIM_ConfigClockSource+0x1e4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	f200 80ae 	bhi.w	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006114:	4a61      	ldr	r2, [pc, #388]	; (800629c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	f000 80a1 	beq.w	800625e <HAL_TIM_ConfigClockSource+0x1aa>
 800611c:	4a5f      	ldr	r2, [pc, #380]	; (800629c <HAL_TIM_ConfigClockSource+0x1e8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	f200 80a6 	bhi.w	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006124:	4a5e      	ldr	r2, [pc, #376]	; (80062a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006126:	4293      	cmp	r3, r2
 8006128:	f000 8099 	beq.w	800625e <HAL_TIM_ConfigClockSource+0x1aa>
 800612c:	4a5c      	ldr	r2, [pc, #368]	; (80062a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800612e:	4293      	cmp	r3, r2
 8006130:	f200 809e 	bhi.w	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006134:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006138:	f000 8091 	beq.w	800625e <HAL_TIM_ConfigClockSource+0x1aa>
 800613c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006140:	f200 8096 	bhi.w	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006148:	f000 8089 	beq.w	800625e <HAL_TIM_ConfigClockSource+0x1aa>
 800614c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006150:	f200 808e 	bhi.w	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006158:	d03e      	beq.n	80061d8 <HAL_TIM_ConfigClockSource+0x124>
 800615a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800615e:	f200 8087 	bhi.w	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006166:	f000 8086 	beq.w	8006276 <HAL_TIM_ConfigClockSource+0x1c2>
 800616a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616e:	d87f      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006170:	2b70      	cmp	r3, #112	; 0x70
 8006172:	d01a      	beq.n	80061aa <HAL_TIM_ConfigClockSource+0xf6>
 8006174:	2b70      	cmp	r3, #112	; 0x70
 8006176:	d87b      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006178:	2b60      	cmp	r3, #96	; 0x60
 800617a:	d050      	beq.n	800621e <HAL_TIM_ConfigClockSource+0x16a>
 800617c:	2b60      	cmp	r3, #96	; 0x60
 800617e:	d877      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006180:	2b50      	cmp	r3, #80	; 0x50
 8006182:	d03c      	beq.n	80061fe <HAL_TIM_ConfigClockSource+0x14a>
 8006184:	2b50      	cmp	r3, #80	; 0x50
 8006186:	d873      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006188:	2b40      	cmp	r3, #64	; 0x40
 800618a:	d058      	beq.n	800623e <HAL_TIM_ConfigClockSource+0x18a>
 800618c:	2b40      	cmp	r3, #64	; 0x40
 800618e:	d86f      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006190:	2b30      	cmp	r3, #48	; 0x30
 8006192:	d064      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x1aa>
 8006194:	2b30      	cmp	r3, #48	; 0x30
 8006196:	d86b      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 8006198:	2b20      	cmp	r3, #32
 800619a:	d060      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x1aa>
 800619c:	2b20      	cmp	r3, #32
 800619e:	d867      	bhi.n	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d05c      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x1aa>
 80061a4:	2b10      	cmp	r3, #16
 80061a6:	d05a      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x1aa>
 80061a8:	e062      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6899      	ldr	r1, [r3, #8]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f000 fc93 	bl	8006ae4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	609a      	str	r2, [r3, #8]
      break;
 80061d6:	e04f      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	6899      	ldr	r1, [r3, #8]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f000 fc7c 	bl	8006ae4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689a      	ldr	r2, [r3, #8]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061fa:	609a      	str	r2, [r3, #8]
      break;
 80061fc:	e03c      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	6859      	ldr	r1, [r3, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	461a      	mov	r2, r3
 800620c:	f000 fbec 	bl	80069e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2150      	movs	r1, #80	; 0x50
 8006216:	4618      	mov	r0, r3
 8006218:	f000 fc46 	bl	8006aa8 <TIM_ITRx_SetConfig>
      break;
 800621c:	e02c      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	6859      	ldr	r1, [r3, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	461a      	mov	r2, r3
 800622c:	f000 fc0b 	bl	8006a46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2160      	movs	r1, #96	; 0x60
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fc36 	bl	8006aa8 <TIM_ITRx_SetConfig>
      break;
 800623c:	e01c      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	6859      	ldr	r1, [r3, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	461a      	mov	r2, r3
 800624c:	f000 fbcc 	bl	80069e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2140      	movs	r1, #64	; 0x40
 8006256:	4618      	mov	r0, r3
 8006258:	f000 fc26 	bl	8006aa8 <TIM_ITRx_SetConfig>
      break;
 800625c:	e00c      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4619      	mov	r1, r3
 8006268:	4610      	mov	r0, r2
 800626a:	f000 fc1d 	bl	8006aa8 <TIM_ITRx_SetConfig>
      break;
 800626e:	e003      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	73fb      	strb	r3, [r7, #15]
      break;
 8006274:	e000      	b.n	8006278 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006276:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006288:	7bfb      	ldrb	r3, [r7, #15]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	ffceff88 	.word	0xffceff88
 8006298:	00100040 	.word	0x00100040
 800629c:	00100030 	.word	0x00100030
 80062a0:	00100020 	.word	0x00100020

080062a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a40      	ldr	r2, [pc, #256]	; (800641c <TIM_Base_SetConfig+0x114>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d013      	beq.n	8006348 <TIM_Base_SetConfig+0x40>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006326:	d00f      	beq.n	8006348 <TIM_Base_SetConfig+0x40>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a3d      	ldr	r2, [pc, #244]	; (8006420 <TIM_Base_SetConfig+0x118>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d00b      	beq.n	8006348 <TIM_Base_SetConfig+0x40>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a3c      	ldr	r2, [pc, #240]	; (8006424 <TIM_Base_SetConfig+0x11c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d007      	beq.n	8006348 <TIM_Base_SetConfig+0x40>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a3b      	ldr	r2, [pc, #236]	; (8006428 <TIM_Base_SetConfig+0x120>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d003      	beq.n	8006348 <TIM_Base_SetConfig+0x40>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a3a      	ldr	r2, [pc, #232]	; (800642c <TIM_Base_SetConfig+0x124>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d108      	bne.n	800635a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a2f      	ldr	r2, [pc, #188]	; (800641c <TIM_Base_SetConfig+0x114>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d01f      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006368:	d01b      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a2c      	ldr	r2, [pc, #176]	; (8006420 <TIM_Base_SetConfig+0x118>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d017      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a2b      	ldr	r2, [pc, #172]	; (8006424 <TIM_Base_SetConfig+0x11c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d013      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a2a      	ldr	r2, [pc, #168]	; (8006428 <TIM_Base_SetConfig+0x120>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00f      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a29      	ldr	r2, [pc, #164]	; (800642c <TIM_Base_SetConfig+0x124>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00b      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a28      	ldr	r2, [pc, #160]	; (8006430 <TIM_Base_SetConfig+0x128>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d007      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a27      	ldr	r2, [pc, #156]	; (8006434 <TIM_Base_SetConfig+0x12c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d003      	beq.n	80063a2 <TIM_Base_SetConfig+0x9a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a26      	ldr	r2, [pc, #152]	; (8006438 <TIM_Base_SetConfig+0x130>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d108      	bne.n	80063b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a10      	ldr	r2, [pc, #64]	; (800641c <TIM_Base_SetConfig+0x114>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00f      	beq.n	8006400 <TIM_Base_SetConfig+0xf8>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a12      	ldr	r2, [pc, #72]	; (800642c <TIM_Base_SetConfig+0x124>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00b      	beq.n	8006400 <TIM_Base_SetConfig+0xf8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a11      	ldr	r2, [pc, #68]	; (8006430 <TIM_Base_SetConfig+0x128>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d007      	beq.n	8006400 <TIM_Base_SetConfig+0xf8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a10      	ldr	r2, [pc, #64]	; (8006434 <TIM_Base_SetConfig+0x12c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_Base_SetConfig+0xf8>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a0f      	ldr	r2, [pc, #60]	; (8006438 <TIM_Base_SetConfig+0x130>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d103      	bne.n	8006408 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	691a      	ldr	r2, [r3, #16]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	615a      	str	r2, [r3, #20]
}
 800640e:	bf00      	nop
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	40010000 	.word	0x40010000
 8006420:	40000400 	.word	0x40000400
 8006424:	40000800 	.word	0x40000800
 8006428:	40000c00 	.word	0x40000c00
 800642c:	40010400 	.word	0x40010400
 8006430:	40014000 	.word	0x40014000
 8006434:	40014400 	.word	0x40014400
 8006438:	40014800 	.word	0x40014800

0800643c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	f023 0201 	bic.w	r2, r3, #1
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4b37      	ldr	r3, [pc, #220]	; (8006544 <TIM_OC1_SetConfig+0x108>)
 8006468:	4013      	ands	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 0303 	bic.w	r3, r3, #3
 8006472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	4313      	orrs	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f023 0302 	bic.w	r3, r3, #2
 8006484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	4313      	orrs	r3, r2
 800648e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a2d      	ldr	r2, [pc, #180]	; (8006548 <TIM_OC1_SetConfig+0x10c>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00f      	beq.n	80064b8 <TIM_OC1_SetConfig+0x7c>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a2c      	ldr	r2, [pc, #176]	; (800654c <TIM_OC1_SetConfig+0x110>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00b      	beq.n	80064b8 <TIM_OC1_SetConfig+0x7c>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a2b      	ldr	r2, [pc, #172]	; (8006550 <TIM_OC1_SetConfig+0x114>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d007      	beq.n	80064b8 <TIM_OC1_SetConfig+0x7c>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a2a      	ldr	r2, [pc, #168]	; (8006554 <TIM_OC1_SetConfig+0x118>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d003      	beq.n	80064b8 <TIM_OC1_SetConfig+0x7c>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a29      	ldr	r2, [pc, #164]	; (8006558 <TIM_OC1_SetConfig+0x11c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d10c      	bne.n	80064d2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f023 0308 	bic.w	r3, r3, #8
 80064be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f023 0304 	bic.w	r3, r3, #4
 80064d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a1c      	ldr	r2, [pc, #112]	; (8006548 <TIM_OC1_SetConfig+0x10c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d00f      	beq.n	80064fa <TIM_OC1_SetConfig+0xbe>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a1b      	ldr	r2, [pc, #108]	; (800654c <TIM_OC1_SetConfig+0x110>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00b      	beq.n	80064fa <TIM_OC1_SetConfig+0xbe>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a1a      	ldr	r2, [pc, #104]	; (8006550 <TIM_OC1_SetConfig+0x114>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d007      	beq.n	80064fa <TIM_OC1_SetConfig+0xbe>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a19      	ldr	r2, [pc, #100]	; (8006554 <TIM_OC1_SetConfig+0x118>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d003      	beq.n	80064fa <TIM_OC1_SetConfig+0xbe>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a18      	ldr	r2, [pc, #96]	; (8006558 <TIM_OC1_SetConfig+0x11c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d111      	bne.n	800651e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	621a      	str	r2, [r3, #32]
}
 8006538:	bf00      	nop
 800653a:	371c      	adds	r7, #28
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	fffeff8f 	.word	0xfffeff8f
 8006548:	40010000 	.word	0x40010000
 800654c:	40010400 	.word	0x40010400
 8006550:	40014000 	.word	0x40014000
 8006554:	40014400 	.word	0x40014400
 8006558:	40014800 	.word	0x40014800

0800655c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	f023 0210 	bic.w	r2, r3, #16
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4b34      	ldr	r3, [pc, #208]	; (8006658 <TIM_OC2_SetConfig+0xfc>)
 8006588:	4013      	ands	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	021b      	lsls	r3, r3, #8
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	4313      	orrs	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f023 0320 	bic.w	r3, r3, #32
 80065a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	011b      	lsls	r3, r3, #4
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a29      	ldr	r2, [pc, #164]	; (800665c <TIM_OC2_SetConfig+0x100>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <TIM_OC2_SetConfig+0x68>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a28      	ldr	r2, [pc, #160]	; (8006660 <TIM_OC2_SetConfig+0x104>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d10d      	bne.n	80065e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	011b      	lsls	r3, r3, #4
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a1e      	ldr	r2, [pc, #120]	; (800665c <TIM_OC2_SetConfig+0x100>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00f      	beq.n	8006608 <TIM_OC2_SetConfig+0xac>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a1d      	ldr	r2, [pc, #116]	; (8006660 <TIM_OC2_SetConfig+0x104>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00b      	beq.n	8006608 <TIM_OC2_SetConfig+0xac>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a1c      	ldr	r2, [pc, #112]	; (8006664 <TIM_OC2_SetConfig+0x108>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d007      	beq.n	8006608 <TIM_OC2_SetConfig+0xac>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a1b      	ldr	r2, [pc, #108]	; (8006668 <TIM_OC2_SetConfig+0x10c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d003      	beq.n	8006608 <TIM_OC2_SetConfig+0xac>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a1a      	ldr	r2, [pc, #104]	; (800666c <TIM_OC2_SetConfig+0x110>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d113      	bne.n	8006630 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800660e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006616:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	4313      	orrs	r3, r2
 8006622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	4313      	orrs	r3, r2
 800662e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	621a      	str	r2, [r3, #32]
}
 800664a:	bf00      	nop
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	feff8fff 	.word	0xfeff8fff
 800665c:	40010000 	.word	0x40010000
 8006660:	40010400 	.word	0x40010400
 8006664:	40014000 	.word	0x40014000
 8006668:	40014400 	.word	0x40014400
 800666c:	40014800 	.word	0x40014800

08006670 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	4b33      	ldr	r3, [pc, #204]	; (8006768 <TIM_OC3_SetConfig+0xf8>)
 800669c:	4013      	ands	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0303 	bic.w	r3, r3, #3
 80066a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	021b      	lsls	r3, r3, #8
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a28      	ldr	r2, [pc, #160]	; (800676c <TIM_OC3_SetConfig+0xfc>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d003      	beq.n	80066d6 <TIM_OC3_SetConfig+0x66>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a27      	ldr	r2, [pc, #156]	; (8006770 <TIM_OC3_SetConfig+0x100>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d10d      	bne.n	80066f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	021b      	lsls	r3, r3, #8
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a1d      	ldr	r2, [pc, #116]	; (800676c <TIM_OC3_SetConfig+0xfc>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d00f      	beq.n	800671a <TIM_OC3_SetConfig+0xaa>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a1c      	ldr	r2, [pc, #112]	; (8006770 <TIM_OC3_SetConfig+0x100>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d00b      	beq.n	800671a <TIM_OC3_SetConfig+0xaa>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a1b      	ldr	r2, [pc, #108]	; (8006774 <TIM_OC3_SetConfig+0x104>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d007      	beq.n	800671a <TIM_OC3_SetConfig+0xaa>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a1a      	ldr	r2, [pc, #104]	; (8006778 <TIM_OC3_SetConfig+0x108>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d003      	beq.n	800671a <TIM_OC3_SetConfig+0xaa>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a19      	ldr	r2, [pc, #100]	; (800677c <TIM_OC3_SetConfig+0x10c>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d113      	bne.n	8006742 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4313      	orrs	r3, r2
 8006734:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	011b      	lsls	r3, r3, #4
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	4313      	orrs	r3, r2
 8006740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	621a      	str	r2, [r3, #32]
}
 800675c:	bf00      	nop
 800675e:	371c      	adds	r7, #28
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	fffeff8f 	.word	0xfffeff8f
 800676c:	40010000 	.word	0x40010000
 8006770:	40010400 	.word	0x40010400
 8006774:	40014000 	.word	0x40014000
 8006778:	40014400 	.word	0x40014400
 800677c:	40014800 	.word	0x40014800

08006780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	4b24      	ldr	r3, [pc, #144]	; (800683c <TIM_OC4_SetConfig+0xbc>)
 80067ac:	4013      	ands	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	021b      	lsls	r3, r3, #8
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	031b      	lsls	r3, r3, #12
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a19      	ldr	r2, [pc, #100]	; (8006840 <TIM_OC4_SetConfig+0xc0>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00f      	beq.n	8006800 <TIM_OC4_SetConfig+0x80>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a18      	ldr	r2, [pc, #96]	; (8006844 <TIM_OC4_SetConfig+0xc4>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00b      	beq.n	8006800 <TIM_OC4_SetConfig+0x80>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a17      	ldr	r2, [pc, #92]	; (8006848 <TIM_OC4_SetConfig+0xc8>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d007      	beq.n	8006800 <TIM_OC4_SetConfig+0x80>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a16      	ldr	r2, [pc, #88]	; (800684c <TIM_OC4_SetConfig+0xcc>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_OC4_SetConfig+0x80>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a15      	ldr	r2, [pc, #84]	; (8006850 <TIM_OC4_SetConfig+0xd0>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d109      	bne.n	8006814 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	019b      	lsls	r3, r3, #6
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4313      	orrs	r3, r2
 8006812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	621a      	str	r2, [r3, #32]
}
 800682e:	bf00      	nop
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	feff8fff 	.word	0xfeff8fff
 8006840:	40010000 	.word	0x40010000
 8006844:	40010400 	.word	0x40010400
 8006848:	40014000 	.word	0x40014000
 800684c:	40014400 	.word	0x40014400
 8006850:	40014800 	.word	0x40014800

08006854 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	4b21      	ldr	r3, [pc, #132]	; (8006904 <TIM_OC5_SetConfig+0xb0>)
 8006880:	4013      	ands	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	4313      	orrs	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006894:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	041b      	lsls	r3, r3, #16
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4313      	orrs	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a18      	ldr	r2, [pc, #96]	; (8006908 <TIM_OC5_SetConfig+0xb4>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d00f      	beq.n	80068ca <TIM_OC5_SetConfig+0x76>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a17      	ldr	r2, [pc, #92]	; (800690c <TIM_OC5_SetConfig+0xb8>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00b      	beq.n	80068ca <TIM_OC5_SetConfig+0x76>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a16      	ldr	r2, [pc, #88]	; (8006910 <TIM_OC5_SetConfig+0xbc>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d007      	beq.n	80068ca <TIM_OC5_SetConfig+0x76>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a15      	ldr	r2, [pc, #84]	; (8006914 <TIM_OC5_SetConfig+0xc0>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d003      	beq.n	80068ca <TIM_OC5_SetConfig+0x76>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a14      	ldr	r2, [pc, #80]	; (8006918 <TIM_OC5_SetConfig+0xc4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d109      	bne.n	80068de <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	4313      	orrs	r3, r2
 80068dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	621a      	str	r2, [r3, #32]
}
 80068f8:	bf00      	nop
 80068fa:	371c      	adds	r7, #28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	fffeff8f 	.word	0xfffeff8f
 8006908:	40010000 	.word	0x40010000
 800690c:	40010400 	.word	0x40010400
 8006910:	40014000 	.word	0x40014000
 8006914:	40014400 	.word	0x40014400
 8006918:	40014800 	.word	0x40014800

0800691c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4b22      	ldr	r3, [pc, #136]	; (80069d0 <TIM_OC6_SetConfig+0xb4>)
 8006948:	4013      	ands	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	021b      	lsls	r3, r3, #8
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4313      	orrs	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800695e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	051b      	lsls	r3, r3, #20
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	4313      	orrs	r3, r2
 800696a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a19      	ldr	r2, [pc, #100]	; (80069d4 <TIM_OC6_SetConfig+0xb8>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d00f      	beq.n	8006994 <TIM_OC6_SetConfig+0x78>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a18      	ldr	r2, [pc, #96]	; (80069d8 <TIM_OC6_SetConfig+0xbc>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d00b      	beq.n	8006994 <TIM_OC6_SetConfig+0x78>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a17      	ldr	r2, [pc, #92]	; (80069dc <TIM_OC6_SetConfig+0xc0>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d007      	beq.n	8006994 <TIM_OC6_SetConfig+0x78>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <TIM_OC6_SetConfig+0xc4>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d003      	beq.n	8006994 <TIM_OC6_SetConfig+0x78>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a15      	ldr	r2, [pc, #84]	; (80069e4 <TIM_OC6_SetConfig+0xc8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d109      	bne.n	80069a8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800699a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	029b      	lsls	r3, r3, #10
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	621a      	str	r2, [r3, #32]
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	feff8fff 	.word	0xfeff8fff
 80069d4:	40010000 	.word	0x40010000
 80069d8:	40010400 	.word	0x40010400
 80069dc:	40014000 	.word	0x40014000
 80069e0:	40014400 	.word	0x40014400
 80069e4:	40014800 	.word	0x40014800

080069e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	f023 0201 	bic.w	r2, r3, #1
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	011b      	lsls	r3, r3, #4
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f023 030a 	bic.w	r3, r3, #10
 8006a24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	621a      	str	r2, [r3, #32]
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b087      	sub	sp, #28
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	f023 0210 	bic.w	r2, r3, #16
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	031b      	lsls	r3, r3, #12
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	621a      	str	r2, [r3, #32]
}
 8006a9a:	bf00      	nop
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
	...

08006aa8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4b09      	ldr	r3, [pc, #36]	; (8006ae0 <TIM_ITRx_SetConfig+0x38>)
 8006abc:	4013      	ands	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	f043 0307 	orr.w	r3, r3, #7
 8006aca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	609a      	str	r2, [r3, #8]
}
 8006ad2:	bf00      	nop
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	ffcfff8f 	.word	0xffcfff8f

08006ae4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006afe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	021a      	lsls	r2, r3, #8
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	431a      	orrs	r2, r3
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	609a      	str	r2, [r3, #8]
}
 8006b18:	bf00      	nop
 8006b1a:	371c      	adds	r7, #28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f003 031f 	and.w	r3, r3, #31
 8006b36:	2201      	movs	r2, #1
 8006b38:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6a1a      	ldr	r2, [r3, #32]
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	43db      	mvns	r3, r3
 8006b46:	401a      	ands	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a1a      	ldr	r2, [r3, #32]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	f003 031f 	and.w	r3, r3, #31
 8006b56:	6879      	ldr	r1, [r7, #4]
 8006b58:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	621a      	str	r2, [r3, #32]
}
 8006b62:	bf00      	nop
 8006b64:	371c      	adds	r7, #28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
	...

08006b70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d101      	bne.n	8006b88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b84:	2302      	movs	r3, #2
 8006b86:	e06d      	b.n	8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a30      	ldr	r2, [pc, #192]	; (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d004      	beq.n	8006bbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a2f      	ldr	r2, [pc, #188]	; (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d108      	bne.n	8006bce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a20      	ldr	r2, [pc, #128]	; (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d022      	beq.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bfa:	d01d      	beq.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a1d      	ldr	r2, [pc, #116]	; (8006c78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d018      	beq.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a1c      	ldr	r2, [pc, #112]	; (8006c7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d013      	beq.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a1a      	ldr	r2, [pc, #104]	; (8006c80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d00e      	beq.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a15      	ldr	r2, [pc, #84]	; (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d009      	beq.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a16      	ldr	r2, [pc, #88]	; (8006c84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d004      	beq.n	8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a15      	ldr	r2, [pc, #84]	; (8006c88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d10c      	bne.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	40010000 	.word	0x40010000
 8006c74:	40010400 	.word	0x40010400
 8006c78:	40000400 	.word	0x40000400
 8006c7c:	40000800 	.word	0x40000800
 8006c80:	40000c00 	.word	0x40000c00
 8006c84:	40001800 	.word	0x40001800
 8006c88:	40014000 	.word	0x40014000

08006c8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e042      	b.n	8006d60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d106      	bne.n	8006cf2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7fa fd39 	bl	8001764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2224      	movs	r2, #36	; 0x24
 8006cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 0201 	bic.w	r2, r2, #1
 8006d08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fd74 	bl	80077f8 <UART_SetConfig>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d101      	bne.n	8006d1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e022      	b.n	8006d60 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d002      	beq.n	8006d28 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f001 fbd4 	bl	80084d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f042 0201 	orr.w	r2, r2, #1
 8006d56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f001 fc5b 	bl	8008614 <UART_CheckIdleState>
 8006d5e:	4603      	mov	r3, r0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08a      	sub	sp, #40	; 0x28
 8006d6c:	af02      	add	r7, sp, #8
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	603b      	str	r3, [r7, #0]
 8006d74:	4613      	mov	r3, r2
 8006d76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d7e:	2b20      	cmp	r3, #32
 8006d80:	d17b      	bne.n	8006e7a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <HAL_UART_Transmit+0x26>
 8006d88:	88fb      	ldrh	r3, [r7, #6]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e074      	b.n	8006e7c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2221      	movs	r2, #33	; 0x21
 8006d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006da2:	f7fa fe93 	bl	8001acc <HAL_GetTick>
 8006da6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	88fa      	ldrh	r2, [r7, #6]
 8006dac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	88fa      	ldrh	r2, [r7, #6]
 8006db4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc0:	d108      	bne.n	8006dd4 <HAL_UART_Transmit+0x6c>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d104      	bne.n	8006dd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	e003      	b.n	8006ddc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ddc:	e030      	b.n	8006e40 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2200      	movs	r2, #0
 8006de6:	2180      	movs	r1, #128	; 0x80
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f001 fcbd 	bl	8008768 <UART_WaitOnFlagUntilTimeout>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d005      	beq.n	8006e00 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e03d      	b.n	8006e7c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10b      	bne.n	8006e1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	881b      	ldrh	r3, [r3, #0]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	3302      	adds	r3, #2
 8006e1a:	61bb      	str	r3, [r7, #24]
 8006e1c:	e007      	b.n	8006e2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	781a      	ldrb	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	3b01      	subs	r3, #1
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1c8      	bne.n	8006dde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	2200      	movs	r2, #0
 8006e54:	2140      	movs	r1, #64	; 0x40
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f001 fc86 	bl	8008768 <UART_WaitOnFlagUntilTimeout>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d005      	beq.n	8006e6e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2220      	movs	r2, #32
 8006e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e006      	b.n	8006e7c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	e000      	b.n	8006e7c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006e7a:	2302      	movs	r3, #2
  }
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3720      	adds	r7, #32
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b091      	sub	sp, #68	; 0x44
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	d178      	bne.n	8006f8e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <HAL_UART_Transmit_IT+0x24>
 8006ea2:	88fb      	ldrh	r3, [r7, #6]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e071      	b.n	8006f90 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	88fa      	ldrh	r2, [r7, #6]
 8006eb6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	88fa      	ldrh	r2, [r7, #6]
 8006ebe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2221      	movs	r2, #33	; 0x21
 8006ed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ee0:	d12a      	bne.n	8006f38 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eea:	d107      	bne.n	8006efc <HAL_UART_Transmit_IT+0x78>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d103      	bne.n	8006efc <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4a29      	ldr	r2, [pc, #164]	; (8006f9c <HAL_UART_Transmit_IT+0x118>)
 8006ef8:	679a      	str	r2, [r3, #120]	; 0x78
 8006efa:	e002      	b.n	8006f02 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4a28      	ldr	r2, [pc, #160]	; (8006fa0 <HAL_UART_Transmit_IT+0x11c>)
 8006f00:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3308      	adds	r3, #8
 8006f08:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f18:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3308      	adds	r3, #8
 8006f20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f22:	637a      	str	r2, [r7, #52]	; 0x34
 8006f24:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f2a:	e841 2300 	strex	r3, r2, [r1]
 8006f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1e5      	bne.n	8006f02 <HAL_UART_Transmit_IT+0x7e>
 8006f36:	e028      	b.n	8006f8a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f40:	d107      	bne.n	8006f52 <HAL_UART_Transmit_IT+0xce>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d103      	bne.n	8006f52 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	4a15      	ldr	r2, [pc, #84]	; (8006fa4 <HAL_UART_Transmit_IT+0x120>)
 8006f4e:	679a      	str	r2, [r3, #120]	; 0x78
 8006f50:	e002      	b.n	8006f58 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	4a14      	ldr	r2, [pc, #80]	; (8006fa8 <HAL_UART_Transmit_IT+0x124>)
 8006f56:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	e853 3f00 	ldrex	r3, [r3]
 8006f64:	613b      	str	r3, [r7, #16]
   return(result);
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	461a      	mov	r2, r3
 8006f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f76:	623b      	str	r3, [r7, #32]
 8006f78:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	69f9      	ldr	r1, [r7, #28]
 8006f7c:	6a3a      	ldr	r2, [r7, #32]
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e6      	bne.n	8006f58 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	e000      	b.n	8006f90 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006f8e:	2302      	movs	r3, #2
  }
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3744      	adds	r7, #68	; 0x44
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	08008dcf 	.word	0x08008dcf
 8006fa0:	08008cef 	.word	0x08008cef
 8006fa4:	08008c2d 	.word	0x08008c2d
 8006fa8:	08008b75 	.word	0x08008b75

08006fac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08a      	sub	sp, #40	; 0x28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fc0:	2b20      	cmp	r3, #32
 8006fc2:	d137      	bne.n	8007034 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d002      	beq.n	8006fd0 <HAL_UART_Receive_IT+0x24>
 8006fca:	88fb      	ldrh	r3, [r7, #6]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e030      	b.n	8007036 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a18      	ldr	r2, [pc, #96]	; (8007040 <HAL_UART_Receive_IT+0x94>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d01f      	beq.n	8007024 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d018      	beq.n	8007024 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	e853 3f00 	ldrex	r3, [r3]
 8006ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007006:	627b      	str	r3, [r7, #36]	; 0x24
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	461a      	mov	r2, r3
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	623b      	str	r3, [r7, #32]
 8007012:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007014:	69f9      	ldr	r1, [r7, #28]
 8007016:	6a3a      	ldr	r2, [r7, #32]
 8007018:	e841 2300 	strex	r3, r2, [r1]
 800701c:	61bb      	str	r3, [r7, #24]
   return(result);
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1e6      	bne.n	8006ff2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007024:	88fb      	ldrh	r3, [r7, #6]
 8007026:	461a      	mov	r2, r3
 8007028:	68b9      	ldr	r1, [r7, #8]
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f001 fc04 	bl	8008838 <UART_Start_Receive_IT>
 8007030:	4603      	mov	r3, r0
 8007032:	e000      	b.n	8007036 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007034:	2302      	movs	r3, #2
  }
}
 8007036:	4618      	mov	r0, r3
 8007038:	3728      	adds	r7, #40	; 0x28
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	58000c00 	.word	0x58000c00

08007044 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b0ba      	sub	sp, #232	; 0xe8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800706a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800706e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007072:	4013      	ands	r3, r2
 8007074:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800707c:	2b00      	cmp	r3, #0
 800707e:	d11b      	bne.n	80070b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007084:	f003 0320 	and.w	r3, r3, #32
 8007088:	2b00      	cmp	r3, #0
 800708a:	d015      	beq.n	80070b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800708c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007090:	f003 0320 	and.w	r3, r3, #32
 8007094:	2b00      	cmp	r3, #0
 8007096:	d105      	bne.n	80070a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800709c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d009      	beq.n	80070b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 8377 	beq.w	800779c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	4798      	blx	r3
      }
      return;
 80070b6:	e371      	b.n	800779c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80070b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 8123 	beq.w	8007308 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80070c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80070c6:	4b8d      	ldr	r3, [pc, #564]	; (80072fc <HAL_UART_IRQHandler+0x2b8>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d106      	bne.n	80070dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80070ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80070d2:	4b8b      	ldr	r3, [pc, #556]	; (8007300 <HAL_UART_IRQHandler+0x2bc>)
 80070d4:	4013      	ands	r3, r2
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 8116 	beq.w	8007308 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d011      	beq.n	800710c <HAL_UART_IRQHandler+0xc8>
 80070e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00b      	beq.n	800710c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2201      	movs	r2, #1
 80070fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007102:	f043 0201 	orr.w	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800710c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d011      	beq.n	800713c <HAL_UART_IRQHandler+0xf8>
 8007118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00b      	beq.n	800713c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2202      	movs	r2, #2
 800712a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007132:	f043 0204 	orr.w	r2, r3, #4
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800713c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007140:	f003 0304 	and.w	r3, r3, #4
 8007144:	2b00      	cmp	r3, #0
 8007146:	d011      	beq.n	800716c <HAL_UART_IRQHandler+0x128>
 8007148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00b      	beq.n	800716c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2204      	movs	r2, #4
 800715a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007162:	f043 0202 	orr.w	r2, r3, #2
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800716c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007170:	f003 0308 	and.w	r3, r3, #8
 8007174:	2b00      	cmp	r3, #0
 8007176:	d017      	beq.n	80071a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800717c:	f003 0320 	and.w	r3, r3, #32
 8007180:	2b00      	cmp	r3, #0
 8007182:	d105      	bne.n	8007190 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007184:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007188:	4b5c      	ldr	r3, [pc, #368]	; (80072fc <HAL_UART_IRQHandler+0x2b8>)
 800718a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00b      	beq.n	80071a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2208      	movs	r2, #8
 8007196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800719e:	f043 0208 	orr.w	r2, r3, #8
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d012      	beq.n	80071da <HAL_UART_IRQHandler+0x196>
 80071b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00c      	beq.n	80071da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d0:	f043 0220 	orr.w	r2, r3, #32
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 82dd 	beq.w	80077a0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80071e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ea:	f003 0320 	and.w	r3, r3, #32
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d013      	beq.n	800721a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f6:	f003 0320 	and.w	r3, r3, #32
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d105      	bne.n	800720a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d007      	beq.n	800721a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800720e:	2b00      	cmp	r3, #0
 8007210:	d003      	beq.n	800721a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007220:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722e:	2b40      	cmp	r3, #64	; 0x40
 8007230:	d005      	beq.n	800723e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007236:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800723a:	2b00      	cmp	r3, #0
 800723c:	d054      	beq.n	80072e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 fc1c 	bl	8008a7c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724e:	2b40      	cmp	r3, #64	; 0x40
 8007250:	d146      	bne.n	80072e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3308      	adds	r3, #8
 8007258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800726c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3308      	adds	r3, #8
 800727a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800727e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007286:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800728a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1d9      	bne.n	8007252 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d017      	beq.n	80072d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072ae:	4a15      	ldr	r2, [pc, #84]	; (8007304 <HAL_UART_IRQHandler+0x2c0>)
 80072b0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fb f865 	bl	8002388 <HAL_DMA_Abort_IT>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d019      	beq.n	80072f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80072d2:	4610      	mov	r0, r2
 80072d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d6:	e00f      	b.n	80072f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fa77 	bl	80077cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072de:	e00b      	b.n	80072f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fa73 	bl	80077cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e6:	e007      	b.n	80072f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fa6f 	bl	80077cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80072f6:	e253      	b.n	80077a0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f8:	bf00      	nop
    return;
 80072fa:	e251      	b.n	80077a0 <HAL_UART_IRQHandler+0x75c>
 80072fc:	10000001 	.word	0x10000001
 8007300:	04000120 	.word	0x04000120
 8007304:	08008b49 	.word	0x08008b49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800730c:	2b01      	cmp	r3, #1
 800730e:	f040 81e7 	bne.w	80076e0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007316:	f003 0310 	and.w	r3, r3, #16
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 81e0 	beq.w	80076e0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007324:	f003 0310 	and.w	r3, r3, #16
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 81d9 	beq.w	80076e0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2210      	movs	r2, #16
 8007334:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007340:	2b40      	cmp	r3, #64	; 0x40
 8007342:	f040 8151 	bne.w	80075e8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a96      	ldr	r2, [pc, #600]	; (80075a8 <HAL_UART_IRQHandler+0x564>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d068      	beq.n	8007426 <HAL_UART_IRQHandler+0x3e2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a93      	ldr	r2, [pc, #588]	; (80075ac <HAL_UART_IRQHandler+0x568>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d061      	beq.n	8007426 <HAL_UART_IRQHandler+0x3e2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a91      	ldr	r2, [pc, #580]	; (80075b0 <HAL_UART_IRQHandler+0x56c>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d05a      	beq.n	8007426 <HAL_UART_IRQHandler+0x3e2>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a8e      	ldr	r2, [pc, #568]	; (80075b4 <HAL_UART_IRQHandler+0x570>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d053      	beq.n	8007426 <HAL_UART_IRQHandler+0x3e2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a8c      	ldr	r2, [pc, #560]	; (80075b8 <HAL_UART_IRQHandler+0x574>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d04c      	beq.n	8007426 <HAL_UART_IRQHandler+0x3e2>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a89      	ldr	r2, [pc, #548]	; (80075bc <HAL_UART_IRQHandler+0x578>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d045      	beq.n	8007426 <HAL_UART_IRQHandler+0x3e2>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a87      	ldr	r2, [pc, #540]	; (80075c0 <HAL_UART_IRQHandler+0x57c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d03e      	beq.n	8007426 <HAL_UART_IRQHandler+0x3e2>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a84      	ldr	r2, [pc, #528]	; (80075c4 <HAL_UART_IRQHandler+0x580>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d037      	beq.n	8007426 <HAL_UART_IRQHandler+0x3e2>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a82      	ldr	r2, [pc, #520]	; (80075c8 <HAL_UART_IRQHandler+0x584>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d030      	beq.n	8007426 <HAL_UART_IRQHandler+0x3e2>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a7f      	ldr	r2, [pc, #508]	; (80075cc <HAL_UART_IRQHandler+0x588>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d029      	beq.n	8007426 <HAL_UART_IRQHandler+0x3e2>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a7d      	ldr	r2, [pc, #500]	; (80075d0 <HAL_UART_IRQHandler+0x58c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d022      	beq.n	8007426 <HAL_UART_IRQHandler+0x3e2>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a7a      	ldr	r2, [pc, #488]	; (80075d4 <HAL_UART_IRQHandler+0x590>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d01b      	beq.n	8007426 <HAL_UART_IRQHandler+0x3e2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a78      	ldr	r2, [pc, #480]	; (80075d8 <HAL_UART_IRQHandler+0x594>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d014      	beq.n	8007426 <HAL_UART_IRQHandler+0x3e2>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a75      	ldr	r2, [pc, #468]	; (80075dc <HAL_UART_IRQHandler+0x598>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d00d      	beq.n	8007426 <HAL_UART_IRQHandler+0x3e2>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a73      	ldr	r2, [pc, #460]	; (80075e0 <HAL_UART_IRQHandler+0x59c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d006      	beq.n	8007426 <HAL_UART_IRQHandler+0x3e2>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a70      	ldr	r2, [pc, #448]	; (80075e4 <HAL_UART_IRQHandler+0x5a0>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d106      	bne.n	8007434 <HAL_UART_IRQHandler+0x3f0>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	b29b      	uxth	r3, r3
 8007432:	e005      	b.n	8007440 <HAL_UART_IRQHandler+0x3fc>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	b29b      	uxth	r3, r3
 8007440:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007444:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 81ab 	beq.w	80077a4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007454:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007458:	429a      	cmp	r2, r3
 800745a:	f080 81a3 	bcs.w	80077a4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007464:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007474:	f000 8087 	beq.w	8007586 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007480:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007484:	e853 3f00 	ldrex	r3, [r3]
 8007488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800748c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007494:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	461a      	mov	r2, r3
 800749e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80074a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80074b2:	e841 2300 	strex	r3, r2, [r1]
 80074b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80074ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1da      	bne.n	8007478 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3308      	adds	r3, #8
 80074c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80074d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074d4:	f023 0301 	bic.w	r3, r3, #1
 80074d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3308      	adds	r3, #8
 80074e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074f2:	e841 2300 	strex	r3, r2, [r1]
 80074f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1e1      	bne.n	80074c2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3308      	adds	r3, #8
 8007504:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007508:	e853 3f00 	ldrex	r3, [r3]
 800750c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800750e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007514:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3308      	adds	r3, #8
 800751e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007522:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007524:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007526:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007528:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800752a:	e841 2300 	strex	r3, r2, [r1]
 800752e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1e3      	bne.n	80074fe <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2220      	movs	r2, #32
 800753a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800754c:	e853 3f00 	ldrex	r3, [r3]
 8007550:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007554:	f023 0310 	bic.w	r3, r3, #16
 8007558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	461a      	mov	r2, r3
 8007562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007566:	65bb      	str	r3, [r7, #88]	; 0x58
 8007568:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800756c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800756e:	e841 2300 	strex	r3, r2, [r1]
 8007572:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e4      	bne.n	8007544 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007580:	4618      	mov	r0, r3
 8007582:	f7fa fbe3 	bl	8001d4c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2202      	movs	r2, #2
 800758a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007598:	b29b      	uxth	r3, r3
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	b29b      	uxth	r3, r3
 800759e:	4619      	mov	r1, r3
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f91d 	bl	80077e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075a6:	e0fd      	b.n	80077a4 <HAL_UART_IRQHandler+0x760>
 80075a8:	40020010 	.word	0x40020010
 80075ac:	40020028 	.word	0x40020028
 80075b0:	40020040 	.word	0x40020040
 80075b4:	40020058 	.word	0x40020058
 80075b8:	40020070 	.word	0x40020070
 80075bc:	40020088 	.word	0x40020088
 80075c0:	400200a0 	.word	0x400200a0
 80075c4:	400200b8 	.word	0x400200b8
 80075c8:	40020410 	.word	0x40020410
 80075cc:	40020428 	.word	0x40020428
 80075d0:	40020440 	.word	0x40020440
 80075d4:	40020458 	.word	0x40020458
 80075d8:	40020470 	.word	0x40020470
 80075dc:	40020488 	.word	0x40020488
 80075e0:	400204a0 	.word	0x400204a0
 80075e4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 80cf 	beq.w	80077a8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800760a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 80ca 	beq.w	80077a8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007628:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	461a      	mov	r2, r3
 8007632:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007636:	647b      	str	r3, [r7, #68]	; 0x44
 8007638:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800763c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e4      	bne.n	8007614 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3308      	adds	r3, #8
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	623b      	str	r3, [r7, #32]
   return(result);
 800765a:	6a3a      	ldr	r2, [r7, #32]
 800765c:	4b55      	ldr	r3, [pc, #340]	; (80077b4 <HAL_UART_IRQHandler+0x770>)
 800765e:	4013      	ands	r3, r2
 8007660:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3308      	adds	r3, #8
 800766a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800766e:	633a      	str	r2, [r7, #48]	; 0x30
 8007670:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007676:	e841 2300 	strex	r3, r2, [r1]
 800767a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1e3      	bne.n	800764a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2220      	movs	r2, #32
 8007686:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	e853 3f00 	ldrex	r3, [r3]
 80076a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f023 0310 	bic.w	r3, r3, #16
 80076aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076b8:	61fb      	str	r3, [r7, #28]
 80076ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076bc:	69b9      	ldr	r1, [r7, #24]
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	e841 2300 	strex	r3, r2, [r1]
 80076c4:	617b      	str	r3, [r7, #20]
   return(result);
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1e4      	bne.n	8007696 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076d6:	4619      	mov	r1, r3
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f881 	bl	80077e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076de:	e063      	b.n	80077a8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80076e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00e      	beq.n	800770a <HAL_UART_IRQHandler+0x6c6>
 80076ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d008      	beq.n	800770a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007700:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f002 f920 	bl	8009948 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007708:	e051      	b.n	80077ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800770a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800770e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007712:	2b00      	cmp	r3, #0
 8007714:	d014      	beq.n	8007740 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800771a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800771e:	2b00      	cmp	r3, #0
 8007720:	d105      	bne.n	800772e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007726:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d008      	beq.n	8007740 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007732:	2b00      	cmp	r3, #0
 8007734:	d03a      	beq.n	80077ac <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	4798      	blx	r3
    }
    return;
 800773e:	e035      	b.n	80077ac <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007748:	2b00      	cmp	r3, #0
 800774a:	d009      	beq.n	8007760 <HAL_UART_IRQHandler+0x71c>
 800774c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 fbad 	bl	8008eb8 <UART_EndTransmit_IT>
    return;
 800775e:	e026      	b.n	80077ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007764:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d009      	beq.n	8007780 <HAL_UART_IRQHandler+0x73c>
 800776c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007770:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d003      	beq.n	8007780 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f002 f8f9 	bl	8009970 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800777e:	e016      	b.n	80077ae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d010      	beq.n	80077ae <HAL_UART_IRQHandler+0x76a>
 800778c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007790:	2b00      	cmp	r3, #0
 8007792:	da0c      	bge.n	80077ae <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f002 f8e1 	bl	800995c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800779a:	e008      	b.n	80077ae <HAL_UART_IRQHandler+0x76a>
      return;
 800779c:	bf00      	nop
 800779e:	e006      	b.n	80077ae <HAL_UART_IRQHandler+0x76a>
    return;
 80077a0:	bf00      	nop
 80077a2:	e004      	b.n	80077ae <HAL_UART_IRQHandler+0x76a>
      return;
 80077a4:	bf00      	nop
 80077a6:	e002      	b.n	80077ae <HAL_UART_IRQHandler+0x76a>
      return;
 80077a8:	bf00      	nop
 80077aa:	e000      	b.n	80077ae <HAL_UART_IRQHandler+0x76a>
    return;
 80077ac:	bf00      	nop
  }
}
 80077ae:	37e8      	adds	r7, #232	; 0xe8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	effffffe 	.word	0xeffffffe

080077b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077fc:	b092      	sub	sp, #72	; 0x48
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	689a      	ldr	r2, [r3, #8]
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	431a      	orrs	r2, r3
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	431a      	orrs	r2, r3
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	4313      	orrs	r3, r2
 800781e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	4bbe      	ldr	r3, [pc, #760]	; (8007b20 <UART_SetConfig+0x328>)
 8007828:	4013      	ands	r3, r2
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	6812      	ldr	r2, [r2, #0]
 800782e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007830:	430b      	orrs	r3, r1
 8007832:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	68da      	ldr	r2, [r3, #12]
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	430a      	orrs	r2, r1
 8007848:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4ab3      	ldr	r2, [pc, #716]	; (8007b24 <UART_SetConfig+0x32c>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d004      	beq.n	8007864 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007860:	4313      	orrs	r3, r2
 8007862:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689a      	ldr	r2, [r3, #8]
 800786a:	4baf      	ldr	r3, [pc, #700]	; (8007b28 <UART_SetConfig+0x330>)
 800786c:	4013      	ands	r3, r2
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	6812      	ldr	r2, [r2, #0]
 8007872:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007874:	430b      	orrs	r3, r1
 8007876:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787e:	f023 010f 	bic.w	r1, r3, #15
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4aa6      	ldr	r2, [pc, #664]	; (8007b2c <UART_SetConfig+0x334>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d177      	bne.n	8007988 <UART_SetConfig+0x190>
 8007898:	4ba5      	ldr	r3, [pc, #660]	; (8007b30 <UART_SetConfig+0x338>)
 800789a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078a0:	2b28      	cmp	r3, #40	; 0x28
 80078a2:	d86d      	bhi.n	8007980 <UART_SetConfig+0x188>
 80078a4:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <UART_SetConfig+0xb4>)
 80078a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078aa:	bf00      	nop
 80078ac:	08007951 	.word	0x08007951
 80078b0:	08007981 	.word	0x08007981
 80078b4:	08007981 	.word	0x08007981
 80078b8:	08007981 	.word	0x08007981
 80078bc:	08007981 	.word	0x08007981
 80078c0:	08007981 	.word	0x08007981
 80078c4:	08007981 	.word	0x08007981
 80078c8:	08007981 	.word	0x08007981
 80078cc:	08007959 	.word	0x08007959
 80078d0:	08007981 	.word	0x08007981
 80078d4:	08007981 	.word	0x08007981
 80078d8:	08007981 	.word	0x08007981
 80078dc:	08007981 	.word	0x08007981
 80078e0:	08007981 	.word	0x08007981
 80078e4:	08007981 	.word	0x08007981
 80078e8:	08007981 	.word	0x08007981
 80078ec:	08007961 	.word	0x08007961
 80078f0:	08007981 	.word	0x08007981
 80078f4:	08007981 	.word	0x08007981
 80078f8:	08007981 	.word	0x08007981
 80078fc:	08007981 	.word	0x08007981
 8007900:	08007981 	.word	0x08007981
 8007904:	08007981 	.word	0x08007981
 8007908:	08007981 	.word	0x08007981
 800790c:	08007969 	.word	0x08007969
 8007910:	08007981 	.word	0x08007981
 8007914:	08007981 	.word	0x08007981
 8007918:	08007981 	.word	0x08007981
 800791c:	08007981 	.word	0x08007981
 8007920:	08007981 	.word	0x08007981
 8007924:	08007981 	.word	0x08007981
 8007928:	08007981 	.word	0x08007981
 800792c:	08007971 	.word	0x08007971
 8007930:	08007981 	.word	0x08007981
 8007934:	08007981 	.word	0x08007981
 8007938:	08007981 	.word	0x08007981
 800793c:	08007981 	.word	0x08007981
 8007940:	08007981 	.word	0x08007981
 8007944:	08007981 	.word	0x08007981
 8007948:	08007981 	.word	0x08007981
 800794c:	08007979 	.word	0x08007979
 8007950:	2301      	movs	r3, #1
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007956:	e326      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007958:	2304      	movs	r3, #4
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800795e:	e322      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007960:	2308      	movs	r3, #8
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007966:	e31e      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007968:	2310      	movs	r3, #16
 800796a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800796e:	e31a      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007970:	2320      	movs	r3, #32
 8007972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007976:	e316      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007978:	2340      	movs	r3, #64	; 0x40
 800797a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800797e:	e312      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007980:	2380      	movs	r3, #128	; 0x80
 8007982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007986:	e30e      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a69      	ldr	r2, [pc, #420]	; (8007b34 <UART_SetConfig+0x33c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d130      	bne.n	80079f4 <UART_SetConfig+0x1fc>
 8007992:	4b67      	ldr	r3, [pc, #412]	; (8007b30 <UART_SetConfig+0x338>)
 8007994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007996:	f003 0307 	and.w	r3, r3, #7
 800799a:	2b05      	cmp	r3, #5
 800799c:	d826      	bhi.n	80079ec <UART_SetConfig+0x1f4>
 800799e:	a201      	add	r2, pc, #4	; (adr r2, 80079a4 <UART_SetConfig+0x1ac>)
 80079a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a4:	080079bd 	.word	0x080079bd
 80079a8:	080079c5 	.word	0x080079c5
 80079ac:	080079cd 	.word	0x080079cd
 80079b0:	080079d5 	.word	0x080079d5
 80079b4:	080079dd 	.word	0x080079dd
 80079b8:	080079e5 	.word	0x080079e5
 80079bc:	2300      	movs	r3, #0
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079c2:	e2f0      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 80079c4:	2304      	movs	r3, #4
 80079c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ca:	e2ec      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 80079cc:	2308      	movs	r3, #8
 80079ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079d2:	e2e8      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 80079d4:	2310      	movs	r3, #16
 80079d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079da:	e2e4      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 80079dc:	2320      	movs	r3, #32
 80079de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079e2:	e2e0      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 80079e4:	2340      	movs	r3, #64	; 0x40
 80079e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ea:	e2dc      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 80079ec:	2380      	movs	r3, #128	; 0x80
 80079ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079f2:	e2d8      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a4f      	ldr	r2, [pc, #316]	; (8007b38 <UART_SetConfig+0x340>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d130      	bne.n	8007a60 <UART_SetConfig+0x268>
 80079fe:	4b4c      	ldr	r3, [pc, #304]	; (8007b30 <UART_SetConfig+0x338>)
 8007a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a02:	f003 0307 	and.w	r3, r3, #7
 8007a06:	2b05      	cmp	r3, #5
 8007a08:	d826      	bhi.n	8007a58 <UART_SetConfig+0x260>
 8007a0a:	a201      	add	r2, pc, #4	; (adr r2, 8007a10 <UART_SetConfig+0x218>)
 8007a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a10:	08007a29 	.word	0x08007a29
 8007a14:	08007a31 	.word	0x08007a31
 8007a18:	08007a39 	.word	0x08007a39
 8007a1c:	08007a41 	.word	0x08007a41
 8007a20:	08007a49 	.word	0x08007a49
 8007a24:	08007a51 	.word	0x08007a51
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a2e:	e2ba      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007a30:	2304      	movs	r3, #4
 8007a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a36:	e2b6      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007a38:	2308      	movs	r3, #8
 8007a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a3e:	e2b2      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007a40:	2310      	movs	r3, #16
 8007a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a46:	e2ae      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007a48:	2320      	movs	r3, #32
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a4e:	e2aa      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007a50:	2340      	movs	r3, #64	; 0x40
 8007a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a56:	e2a6      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007a58:	2380      	movs	r3, #128	; 0x80
 8007a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a5e:	e2a2      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a35      	ldr	r2, [pc, #212]	; (8007b3c <UART_SetConfig+0x344>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d130      	bne.n	8007acc <UART_SetConfig+0x2d4>
 8007a6a:	4b31      	ldr	r3, [pc, #196]	; (8007b30 <UART_SetConfig+0x338>)
 8007a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a6e:	f003 0307 	and.w	r3, r3, #7
 8007a72:	2b05      	cmp	r3, #5
 8007a74:	d826      	bhi.n	8007ac4 <UART_SetConfig+0x2cc>
 8007a76:	a201      	add	r2, pc, #4	; (adr r2, 8007a7c <UART_SetConfig+0x284>)
 8007a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7c:	08007a95 	.word	0x08007a95
 8007a80:	08007a9d 	.word	0x08007a9d
 8007a84:	08007aa5 	.word	0x08007aa5
 8007a88:	08007aad 	.word	0x08007aad
 8007a8c:	08007ab5 	.word	0x08007ab5
 8007a90:	08007abd 	.word	0x08007abd
 8007a94:	2300      	movs	r3, #0
 8007a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a9a:	e284      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007a9c:	2304      	movs	r3, #4
 8007a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aa2:	e280      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007aa4:	2308      	movs	r3, #8
 8007aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aaa:	e27c      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007aac:	2310      	movs	r3, #16
 8007aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ab2:	e278      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007ab4:	2320      	movs	r3, #32
 8007ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aba:	e274      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007abc:	2340      	movs	r3, #64	; 0x40
 8007abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ac2:	e270      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007ac4:	2380      	movs	r3, #128	; 0x80
 8007ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aca:	e26c      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a1b      	ldr	r2, [pc, #108]	; (8007b40 <UART_SetConfig+0x348>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d142      	bne.n	8007b5c <UART_SetConfig+0x364>
 8007ad6:	4b16      	ldr	r3, [pc, #88]	; (8007b30 <UART_SetConfig+0x338>)
 8007ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ada:	f003 0307 	and.w	r3, r3, #7
 8007ade:	2b05      	cmp	r3, #5
 8007ae0:	d838      	bhi.n	8007b54 <UART_SetConfig+0x35c>
 8007ae2:	a201      	add	r2, pc, #4	; (adr r2, 8007ae8 <UART_SetConfig+0x2f0>)
 8007ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae8:	08007b01 	.word	0x08007b01
 8007aec:	08007b09 	.word	0x08007b09
 8007af0:	08007b11 	.word	0x08007b11
 8007af4:	08007b19 	.word	0x08007b19
 8007af8:	08007b45 	.word	0x08007b45
 8007afc:	08007b4d 	.word	0x08007b4d
 8007b00:	2300      	movs	r3, #0
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b06:	e24e      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007b08:	2304      	movs	r3, #4
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b0e:	e24a      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007b10:	2308      	movs	r3, #8
 8007b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b16:	e246      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007b18:	2310      	movs	r3, #16
 8007b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b1e:	e242      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007b20:	cfff69f3 	.word	0xcfff69f3
 8007b24:	58000c00 	.word	0x58000c00
 8007b28:	11fff4ff 	.word	0x11fff4ff
 8007b2c:	40011000 	.word	0x40011000
 8007b30:	58024400 	.word	0x58024400
 8007b34:	40004400 	.word	0x40004400
 8007b38:	40004800 	.word	0x40004800
 8007b3c:	40004c00 	.word	0x40004c00
 8007b40:	40005000 	.word	0x40005000
 8007b44:	2320      	movs	r3, #32
 8007b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b4a:	e22c      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007b4c:	2340      	movs	r3, #64	; 0x40
 8007b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b52:	e228      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007b54:	2380      	movs	r3, #128	; 0x80
 8007b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b5a:	e224      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4ab1      	ldr	r2, [pc, #708]	; (8007e28 <UART_SetConfig+0x630>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d176      	bne.n	8007c54 <UART_SetConfig+0x45c>
 8007b66:	4bb1      	ldr	r3, [pc, #708]	; (8007e2c <UART_SetConfig+0x634>)
 8007b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b6e:	2b28      	cmp	r3, #40	; 0x28
 8007b70:	d86c      	bhi.n	8007c4c <UART_SetConfig+0x454>
 8007b72:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <UART_SetConfig+0x380>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007c1d 	.word	0x08007c1d
 8007b7c:	08007c4d 	.word	0x08007c4d
 8007b80:	08007c4d 	.word	0x08007c4d
 8007b84:	08007c4d 	.word	0x08007c4d
 8007b88:	08007c4d 	.word	0x08007c4d
 8007b8c:	08007c4d 	.word	0x08007c4d
 8007b90:	08007c4d 	.word	0x08007c4d
 8007b94:	08007c4d 	.word	0x08007c4d
 8007b98:	08007c25 	.word	0x08007c25
 8007b9c:	08007c4d 	.word	0x08007c4d
 8007ba0:	08007c4d 	.word	0x08007c4d
 8007ba4:	08007c4d 	.word	0x08007c4d
 8007ba8:	08007c4d 	.word	0x08007c4d
 8007bac:	08007c4d 	.word	0x08007c4d
 8007bb0:	08007c4d 	.word	0x08007c4d
 8007bb4:	08007c4d 	.word	0x08007c4d
 8007bb8:	08007c2d 	.word	0x08007c2d
 8007bbc:	08007c4d 	.word	0x08007c4d
 8007bc0:	08007c4d 	.word	0x08007c4d
 8007bc4:	08007c4d 	.word	0x08007c4d
 8007bc8:	08007c4d 	.word	0x08007c4d
 8007bcc:	08007c4d 	.word	0x08007c4d
 8007bd0:	08007c4d 	.word	0x08007c4d
 8007bd4:	08007c4d 	.word	0x08007c4d
 8007bd8:	08007c35 	.word	0x08007c35
 8007bdc:	08007c4d 	.word	0x08007c4d
 8007be0:	08007c4d 	.word	0x08007c4d
 8007be4:	08007c4d 	.word	0x08007c4d
 8007be8:	08007c4d 	.word	0x08007c4d
 8007bec:	08007c4d 	.word	0x08007c4d
 8007bf0:	08007c4d 	.word	0x08007c4d
 8007bf4:	08007c4d 	.word	0x08007c4d
 8007bf8:	08007c3d 	.word	0x08007c3d
 8007bfc:	08007c4d 	.word	0x08007c4d
 8007c00:	08007c4d 	.word	0x08007c4d
 8007c04:	08007c4d 	.word	0x08007c4d
 8007c08:	08007c4d 	.word	0x08007c4d
 8007c0c:	08007c4d 	.word	0x08007c4d
 8007c10:	08007c4d 	.word	0x08007c4d
 8007c14:	08007c4d 	.word	0x08007c4d
 8007c18:	08007c45 	.word	0x08007c45
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c22:	e1c0      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007c24:	2304      	movs	r3, #4
 8007c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c2a:	e1bc      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007c2c:	2308      	movs	r3, #8
 8007c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c32:	e1b8      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007c34:	2310      	movs	r3, #16
 8007c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c3a:	e1b4      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007c3c:	2320      	movs	r3, #32
 8007c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c42:	e1b0      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007c44:	2340      	movs	r3, #64	; 0x40
 8007c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c4a:	e1ac      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007c4c:	2380      	movs	r3, #128	; 0x80
 8007c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c52:	e1a8      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a75      	ldr	r2, [pc, #468]	; (8007e30 <UART_SetConfig+0x638>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d130      	bne.n	8007cc0 <UART_SetConfig+0x4c8>
 8007c5e:	4b73      	ldr	r3, [pc, #460]	; (8007e2c <UART_SetConfig+0x634>)
 8007c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c62:	f003 0307 	and.w	r3, r3, #7
 8007c66:	2b05      	cmp	r3, #5
 8007c68:	d826      	bhi.n	8007cb8 <UART_SetConfig+0x4c0>
 8007c6a:	a201      	add	r2, pc, #4	; (adr r2, 8007c70 <UART_SetConfig+0x478>)
 8007c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c70:	08007c89 	.word	0x08007c89
 8007c74:	08007c91 	.word	0x08007c91
 8007c78:	08007c99 	.word	0x08007c99
 8007c7c:	08007ca1 	.word	0x08007ca1
 8007c80:	08007ca9 	.word	0x08007ca9
 8007c84:	08007cb1 	.word	0x08007cb1
 8007c88:	2300      	movs	r3, #0
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c8e:	e18a      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007c90:	2304      	movs	r3, #4
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c96:	e186      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007c98:	2308      	movs	r3, #8
 8007c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c9e:	e182      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007ca0:	2310      	movs	r3, #16
 8007ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ca6:	e17e      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007ca8:	2320      	movs	r3, #32
 8007caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cae:	e17a      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007cb0:	2340      	movs	r3, #64	; 0x40
 8007cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cb6:	e176      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007cb8:	2380      	movs	r3, #128	; 0x80
 8007cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cbe:	e172      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a5b      	ldr	r2, [pc, #364]	; (8007e34 <UART_SetConfig+0x63c>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d130      	bne.n	8007d2c <UART_SetConfig+0x534>
 8007cca:	4b58      	ldr	r3, [pc, #352]	; (8007e2c <UART_SetConfig+0x634>)
 8007ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cce:	f003 0307 	and.w	r3, r3, #7
 8007cd2:	2b05      	cmp	r3, #5
 8007cd4:	d826      	bhi.n	8007d24 <UART_SetConfig+0x52c>
 8007cd6:	a201      	add	r2, pc, #4	; (adr r2, 8007cdc <UART_SetConfig+0x4e4>)
 8007cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cdc:	08007cf5 	.word	0x08007cf5
 8007ce0:	08007cfd 	.word	0x08007cfd
 8007ce4:	08007d05 	.word	0x08007d05
 8007ce8:	08007d0d 	.word	0x08007d0d
 8007cec:	08007d15 	.word	0x08007d15
 8007cf0:	08007d1d 	.word	0x08007d1d
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cfa:	e154      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007cfc:	2304      	movs	r3, #4
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d02:	e150      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007d04:	2308      	movs	r3, #8
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d0a:	e14c      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007d0c:	2310      	movs	r3, #16
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d12:	e148      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007d14:	2320      	movs	r3, #32
 8007d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d1a:	e144      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007d1c:	2340      	movs	r3, #64	; 0x40
 8007d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d22:	e140      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007d24:	2380      	movs	r3, #128	; 0x80
 8007d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2a:	e13c      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a41      	ldr	r2, [pc, #260]	; (8007e38 <UART_SetConfig+0x640>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	f040 8082 	bne.w	8007e3c <UART_SetConfig+0x644>
 8007d38:	4b3c      	ldr	r3, [pc, #240]	; (8007e2c <UART_SetConfig+0x634>)
 8007d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d40:	2b28      	cmp	r3, #40	; 0x28
 8007d42:	d86d      	bhi.n	8007e20 <UART_SetConfig+0x628>
 8007d44:	a201      	add	r2, pc, #4	; (adr r2, 8007d4c <UART_SetConfig+0x554>)
 8007d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4a:	bf00      	nop
 8007d4c:	08007df1 	.word	0x08007df1
 8007d50:	08007e21 	.word	0x08007e21
 8007d54:	08007e21 	.word	0x08007e21
 8007d58:	08007e21 	.word	0x08007e21
 8007d5c:	08007e21 	.word	0x08007e21
 8007d60:	08007e21 	.word	0x08007e21
 8007d64:	08007e21 	.word	0x08007e21
 8007d68:	08007e21 	.word	0x08007e21
 8007d6c:	08007df9 	.word	0x08007df9
 8007d70:	08007e21 	.word	0x08007e21
 8007d74:	08007e21 	.word	0x08007e21
 8007d78:	08007e21 	.word	0x08007e21
 8007d7c:	08007e21 	.word	0x08007e21
 8007d80:	08007e21 	.word	0x08007e21
 8007d84:	08007e21 	.word	0x08007e21
 8007d88:	08007e21 	.word	0x08007e21
 8007d8c:	08007e01 	.word	0x08007e01
 8007d90:	08007e21 	.word	0x08007e21
 8007d94:	08007e21 	.word	0x08007e21
 8007d98:	08007e21 	.word	0x08007e21
 8007d9c:	08007e21 	.word	0x08007e21
 8007da0:	08007e21 	.word	0x08007e21
 8007da4:	08007e21 	.word	0x08007e21
 8007da8:	08007e21 	.word	0x08007e21
 8007dac:	08007e09 	.word	0x08007e09
 8007db0:	08007e21 	.word	0x08007e21
 8007db4:	08007e21 	.word	0x08007e21
 8007db8:	08007e21 	.word	0x08007e21
 8007dbc:	08007e21 	.word	0x08007e21
 8007dc0:	08007e21 	.word	0x08007e21
 8007dc4:	08007e21 	.word	0x08007e21
 8007dc8:	08007e21 	.word	0x08007e21
 8007dcc:	08007e11 	.word	0x08007e11
 8007dd0:	08007e21 	.word	0x08007e21
 8007dd4:	08007e21 	.word	0x08007e21
 8007dd8:	08007e21 	.word	0x08007e21
 8007ddc:	08007e21 	.word	0x08007e21
 8007de0:	08007e21 	.word	0x08007e21
 8007de4:	08007e21 	.word	0x08007e21
 8007de8:	08007e21 	.word	0x08007e21
 8007dec:	08007e19 	.word	0x08007e19
 8007df0:	2301      	movs	r3, #1
 8007df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007df6:	e0d6      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007df8:	2304      	movs	r3, #4
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dfe:	e0d2      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007e00:	2308      	movs	r3, #8
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e06:	e0ce      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007e08:	2310      	movs	r3, #16
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0e:	e0ca      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007e10:	2320      	movs	r3, #32
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e16:	e0c6      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007e18:	2340      	movs	r3, #64	; 0x40
 8007e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e1e:	e0c2      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007e20:	2380      	movs	r3, #128	; 0x80
 8007e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e26:	e0be      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007e28:	40011400 	.word	0x40011400
 8007e2c:	58024400 	.word	0x58024400
 8007e30:	40007800 	.word	0x40007800
 8007e34:	40007c00 	.word	0x40007c00
 8007e38:	40011800 	.word	0x40011800
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4aad      	ldr	r2, [pc, #692]	; (80080f8 <UART_SetConfig+0x900>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d176      	bne.n	8007f34 <UART_SetConfig+0x73c>
 8007e46:	4bad      	ldr	r3, [pc, #692]	; (80080fc <UART_SetConfig+0x904>)
 8007e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e4e:	2b28      	cmp	r3, #40	; 0x28
 8007e50:	d86c      	bhi.n	8007f2c <UART_SetConfig+0x734>
 8007e52:	a201      	add	r2, pc, #4	; (adr r2, 8007e58 <UART_SetConfig+0x660>)
 8007e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e58:	08007efd 	.word	0x08007efd
 8007e5c:	08007f2d 	.word	0x08007f2d
 8007e60:	08007f2d 	.word	0x08007f2d
 8007e64:	08007f2d 	.word	0x08007f2d
 8007e68:	08007f2d 	.word	0x08007f2d
 8007e6c:	08007f2d 	.word	0x08007f2d
 8007e70:	08007f2d 	.word	0x08007f2d
 8007e74:	08007f2d 	.word	0x08007f2d
 8007e78:	08007f05 	.word	0x08007f05
 8007e7c:	08007f2d 	.word	0x08007f2d
 8007e80:	08007f2d 	.word	0x08007f2d
 8007e84:	08007f2d 	.word	0x08007f2d
 8007e88:	08007f2d 	.word	0x08007f2d
 8007e8c:	08007f2d 	.word	0x08007f2d
 8007e90:	08007f2d 	.word	0x08007f2d
 8007e94:	08007f2d 	.word	0x08007f2d
 8007e98:	08007f0d 	.word	0x08007f0d
 8007e9c:	08007f2d 	.word	0x08007f2d
 8007ea0:	08007f2d 	.word	0x08007f2d
 8007ea4:	08007f2d 	.word	0x08007f2d
 8007ea8:	08007f2d 	.word	0x08007f2d
 8007eac:	08007f2d 	.word	0x08007f2d
 8007eb0:	08007f2d 	.word	0x08007f2d
 8007eb4:	08007f2d 	.word	0x08007f2d
 8007eb8:	08007f15 	.word	0x08007f15
 8007ebc:	08007f2d 	.word	0x08007f2d
 8007ec0:	08007f2d 	.word	0x08007f2d
 8007ec4:	08007f2d 	.word	0x08007f2d
 8007ec8:	08007f2d 	.word	0x08007f2d
 8007ecc:	08007f2d 	.word	0x08007f2d
 8007ed0:	08007f2d 	.word	0x08007f2d
 8007ed4:	08007f2d 	.word	0x08007f2d
 8007ed8:	08007f1d 	.word	0x08007f1d
 8007edc:	08007f2d 	.word	0x08007f2d
 8007ee0:	08007f2d 	.word	0x08007f2d
 8007ee4:	08007f2d 	.word	0x08007f2d
 8007ee8:	08007f2d 	.word	0x08007f2d
 8007eec:	08007f2d 	.word	0x08007f2d
 8007ef0:	08007f2d 	.word	0x08007f2d
 8007ef4:	08007f2d 	.word	0x08007f2d
 8007ef8:	08007f25 	.word	0x08007f25
 8007efc:	2301      	movs	r3, #1
 8007efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f02:	e050      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007f04:	2304      	movs	r3, #4
 8007f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f0a:	e04c      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007f0c:	2308      	movs	r3, #8
 8007f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f12:	e048      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007f14:	2310      	movs	r3, #16
 8007f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f1a:	e044      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007f1c:	2320      	movs	r3, #32
 8007f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f22:	e040      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007f24:	2340      	movs	r3, #64	; 0x40
 8007f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f2a:	e03c      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007f2c:	2380      	movs	r3, #128	; 0x80
 8007f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f32:	e038      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a71      	ldr	r2, [pc, #452]	; (8008100 <UART_SetConfig+0x908>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d130      	bne.n	8007fa0 <UART_SetConfig+0x7a8>
 8007f3e:	4b6f      	ldr	r3, [pc, #444]	; (80080fc <UART_SetConfig+0x904>)
 8007f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f42:	f003 0307 	and.w	r3, r3, #7
 8007f46:	2b05      	cmp	r3, #5
 8007f48:	d826      	bhi.n	8007f98 <UART_SetConfig+0x7a0>
 8007f4a:	a201      	add	r2, pc, #4	; (adr r2, 8007f50 <UART_SetConfig+0x758>)
 8007f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f50:	08007f69 	.word	0x08007f69
 8007f54:	08007f71 	.word	0x08007f71
 8007f58:	08007f79 	.word	0x08007f79
 8007f5c:	08007f81 	.word	0x08007f81
 8007f60:	08007f89 	.word	0x08007f89
 8007f64:	08007f91 	.word	0x08007f91
 8007f68:	2302      	movs	r3, #2
 8007f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f6e:	e01a      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007f70:	2304      	movs	r3, #4
 8007f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f76:	e016      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007f78:	2308      	movs	r3, #8
 8007f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f7e:	e012      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007f80:	2310      	movs	r3, #16
 8007f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f86:	e00e      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007f88:	2320      	movs	r3, #32
 8007f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f8e:	e00a      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007f90:	2340      	movs	r3, #64	; 0x40
 8007f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f96:	e006      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007f98:	2380      	movs	r3, #128	; 0x80
 8007f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f9e:	e002      	b.n	8007fa6 <UART_SetConfig+0x7ae>
 8007fa0:	2380      	movs	r3, #128	; 0x80
 8007fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a55      	ldr	r2, [pc, #340]	; (8008100 <UART_SetConfig+0x908>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	f040 80f8 	bne.w	80081a2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007fb2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007fb6:	2b20      	cmp	r3, #32
 8007fb8:	dc46      	bgt.n	8008048 <UART_SetConfig+0x850>
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	db75      	blt.n	80080aa <UART_SetConfig+0x8b2>
 8007fbe:	3b02      	subs	r3, #2
 8007fc0:	2b1e      	cmp	r3, #30
 8007fc2:	d872      	bhi.n	80080aa <UART_SetConfig+0x8b2>
 8007fc4:	a201      	add	r2, pc, #4	; (adr r2, 8007fcc <UART_SetConfig+0x7d4>)
 8007fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fca:	bf00      	nop
 8007fcc:	0800804f 	.word	0x0800804f
 8007fd0:	080080ab 	.word	0x080080ab
 8007fd4:	08008057 	.word	0x08008057
 8007fd8:	080080ab 	.word	0x080080ab
 8007fdc:	080080ab 	.word	0x080080ab
 8007fe0:	080080ab 	.word	0x080080ab
 8007fe4:	08008067 	.word	0x08008067
 8007fe8:	080080ab 	.word	0x080080ab
 8007fec:	080080ab 	.word	0x080080ab
 8007ff0:	080080ab 	.word	0x080080ab
 8007ff4:	080080ab 	.word	0x080080ab
 8007ff8:	080080ab 	.word	0x080080ab
 8007ffc:	080080ab 	.word	0x080080ab
 8008000:	080080ab 	.word	0x080080ab
 8008004:	08008077 	.word	0x08008077
 8008008:	080080ab 	.word	0x080080ab
 800800c:	080080ab 	.word	0x080080ab
 8008010:	080080ab 	.word	0x080080ab
 8008014:	080080ab 	.word	0x080080ab
 8008018:	080080ab 	.word	0x080080ab
 800801c:	080080ab 	.word	0x080080ab
 8008020:	080080ab 	.word	0x080080ab
 8008024:	080080ab 	.word	0x080080ab
 8008028:	080080ab 	.word	0x080080ab
 800802c:	080080ab 	.word	0x080080ab
 8008030:	080080ab 	.word	0x080080ab
 8008034:	080080ab 	.word	0x080080ab
 8008038:	080080ab 	.word	0x080080ab
 800803c:	080080ab 	.word	0x080080ab
 8008040:	080080ab 	.word	0x080080ab
 8008044:	0800809d 	.word	0x0800809d
 8008048:	2b40      	cmp	r3, #64	; 0x40
 800804a:	d02a      	beq.n	80080a2 <UART_SetConfig+0x8aa>
 800804c:	e02d      	b.n	80080aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800804e:	f7fc ff9b 	bl	8004f88 <HAL_RCCEx_GetD3PCLK1Freq>
 8008052:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008054:	e02f      	b.n	80080b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800805a:	4618      	mov	r0, r3
 800805c:	f7fc ffaa 	bl	8004fb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008064:	e027      	b.n	80080b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008066:	f107 0318 	add.w	r3, r7, #24
 800806a:	4618      	mov	r0, r3
 800806c:	f7fd f8f6 	bl	800525c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008074:	e01f      	b.n	80080b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008076:	4b21      	ldr	r3, [pc, #132]	; (80080fc <UART_SetConfig+0x904>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0320 	and.w	r3, r3, #32
 800807e:	2b00      	cmp	r3, #0
 8008080:	d009      	beq.n	8008096 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008082:	4b1e      	ldr	r3, [pc, #120]	; (80080fc <UART_SetConfig+0x904>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	08db      	lsrs	r3, r3, #3
 8008088:	f003 0303 	and.w	r3, r3, #3
 800808c:	4a1d      	ldr	r2, [pc, #116]	; (8008104 <UART_SetConfig+0x90c>)
 800808e:	fa22 f303 	lsr.w	r3, r2, r3
 8008092:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008094:	e00f      	b.n	80080b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008096:	4b1b      	ldr	r3, [pc, #108]	; (8008104 <UART_SetConfig+0x90c>)
 8008098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800809a:	e00c      	b.n	80080b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800809c:	4b1a      	ldr	r3, [pc, #104]	; (8008108 <UART_SetConfig+0x910>)
 800809e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080a0:	e009      	b.n	80080b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080a8:	e005      	b.n	80080b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80080aa:	2300      	movs	r3, #0
 80080ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80080b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 81ee 	beq.w	800849a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	4a12      	ldr	r2, [pc, #72]	; (800810c <UART_SetConfig+0x914>)
 80080c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080c8:	461a      	mov	r2, r3
 80080ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80080d0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	685a      	ldr	r2, [r3, #4]
 80080d6:	4613      	mov	r3, r2
 80080d8:	005b      	lsls	r3, r3, #1
 80080da:	4413      	add	r3, r2
 80080dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080de:	429a      	cmp	r2, r3
 80080e0:	d305      	bcc.n	80080ee <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d910      	bls.n	8008110 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80080f4:	e1d1      	b.n	800849a <UART_SetConfig+0xca2>
 80080f6:	bf00      	nop
 80080f8:	40011c00 	.word	0x40011c00
 80080fc:	58024400 	.word	0x58024400
 8008100:	58000c00 	.word	0x58000c00
 8008104:	03d09000 	.word	0x03d09000
 8008108:	003d0900 	.word	0x003d0900
 800810c:	0800a5c4 	.word	0x0800a5c4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008112:	2200      	movs	r2, #0
 8008114:	60bb      	str	r3, [r7, #8]
 8008116:	60fa      	str	r2, [r7, #12]
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811c:	4ac0      	ldr	r2, [pc, #768]	; (8008420 <UART_SetConfig+0xc28>)
 800811e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008122:	b29b      	uxth	r3, r3
 8008124:	2200      	movs	r2, #0
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	607a      	str	r2, [r7, #4]
 800812a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800812e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008132:	f7f8 f92d 	bl	8000390 <__aeabi_uldivmod>
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	4610      	mov	r0, r2
 800813c:	4619      	mov	r1, r3
 800813e:	f04f 0200 	mov.w	r2, #0
 8008142:	f04f 0300 	mov.w	r3, #0
 8008146:	020b      	lsls	r3, r1, #8
 8008148:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800814c:	0202      	lsls	r2, r0, #8
 800814e:	6979      	ldr	r1, [r7, #20]
 8008150:	6849      	ldr	r1, [r1, #4]
 8008152:	0849      	lsrs	r1, r1, #1
 8008154:	2000      	movs	r0, #0
 8008156:	460c      	mov	r4, r1
 8008158:	4605      	mov	r5, r0
 800815a:	eb12 0804 	adds.w	r8, r2, r4
 800815e:	eb43 0905 	adc.w	r9, r3, r5
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	469a      	mov	sl, r3
 800816a:	4693      	mov	fp, r2
 800816c:	4652      	mov	r2, sl
 800816e:	465b      	mov	r3, fp
 8008170:	4640      	mov	r0, r8
 8008172:	4649      	mov	r1, r9
 8008174:	f7f8 f90c 	bl	8000390 <__aeabi_uldivmod>
 8008178:	4602      	mov	r2, r0
 800817a:	460b      	mov	r3, r1
 800817c:	4613      	mov	r3, r2
 800817e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008186:	d308      	bcc.n	800819a <UART_SetConfig+0x9a2>
 8008188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800818e:	d204      	bcs.n	800819a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008196:	60da      	str	r2, [r3, #12]
 8008198:	e17f      	b.n	800849a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80081a0:	e17b      	b.n	800849a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081aa:	f040 80bd 	bne.w	8008328 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80081ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80081b2:	2b20      	cmp	r3, #32
 80081b4:	dc48      	bgt.n	8008248 <UART_SetConfig+0xa50>
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	db7b      	blt.n	80082b2 <UART_SetConfig+0xaba>
 80081ba:	2b20      	cmp	r3, #32
 80081bc:	d879      	bhi.n	80082b2 <UART_SetConfig+0xaba>
 80081be:	a201      	add	r2, pc, #4	; (adr r2, 80081c4 <UART_SetConfig+0x9cc>)
 80081c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c4:	0800824f 	.word	0x0800824f
 80081c8:	08008257 	.word	0x08008257
 80081cc:	080082b3 	.word	0x080082b3
 80081d0:	080082b3 	.word	0x080082b3
 80081d4:	0800825f 	.word	0x0800825f
 80081d8:	080082b3 	.word	0x080082b3
 80081dc:	080082b3 	.word	0x080082b3
 80081e0:	080082b3 	.word	0x080082b3
 80081e4:	0800826f 	.word	0x0800826f
 80081e8:	080082b3 	.word	0x080082b3
 80081ec:	080082b3 	.word	0x080082b3
 80081f0:	080082b3 	.word	0x080082b3
 80081f4:	080082b3 	.word	0x080082b3
 80081f8:	080082b3 	.word	0x080082b3
 80081fc:	080082b3 	.word	0x080082b3
 8008200:	080082b3 	.word	0x080082b3
 8008204:	0800827f 	.word	0x0800827f
 8008208:	080082b3 	.word	0x080082b3
 800820c:	080082b3 	.word	0x080082b3
 8008210:	080082b3 	.word	0x080082b3
 8008214:	080082b3 	.word	0x080082b3
 8008218:	080082b3 	.word	0x080082b3
 800821c:	080082b3 	.word	0x080082b3
 8008220:	080082b3 	.word	0x080082b3
 8008224:	080082b3 	.word	0x080082b3
 8008228:	080082b3 	.word	0x080082b3
 800822c:	080082b3 	.word	0x080082b3
 8008230:	080082b3 	.word	0x080082b3
 8008234:	080082b3 	.word	0x080082b3
 8008238:	080082b3 	.word	0x080082b3
 800823c:	080082b3 	.word	0x080082b3
 8008240:	080082b3 	.word	0x080082b3
 8008244:	080082a5 	.word	0x080082a5
 8008248:	2b40      	cmp	r3, #64	; 0x40
 800824a:	d02e      	beq.n	80082aa <UART_SetConfig+0xab2>
 800824c:	e031      	b.n	80082b2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800824e:	f7fb fcb1 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 8008252:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008254:	e033      	b.n	80082be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008256:	f7fb fcc3 	bl	8003be0 <HAL_RCC_GetPCLK2Freq>
 800825a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800825c:	e02f      	b.n	80082be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800825e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008262:	4618      	mov	r0, r3
 8008264:	f7fc fea6 	bl	8004fb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800826c:	e027      	b.n	80082be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800826e:	f107 0318 	add.w	r3, r7, #24
 8008272:	4618      	mov	r0, r3
 8008274:	f7fc fff2 	bl	800525c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800827c:	e01f      	b.n	80082be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800827e:	4b69      	ldr	r3, [pc, #420]	; (8008424 <UART_SetConfig+0xc2c>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0320 	and.w	r3, r3, #32
 8008286:	2b00      	cmp	r3, #0
 8008288:	d009      	beq.n	800829e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800828a:	4b66      	ldr	r3, [pc, #408]	; (8008424 <UART_SetConfig+0xc2c>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	08db      	lsrs	r3, r3, #3
 8008290:	f003 0303 	and.w	r3, r3, #3
 8008294:	4a64      	ldr	r2, [pc, #400]	; (8008428 <UART_SetConfig+0xc30>)
 8008296:	fa22 f303 	lsr.w	r3, r2, r3
 800829a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800829c:	e00f      	b.n	80082be <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800829e:	4b62      	ldr	r3, [pc, #392]	; (8008428 <UART_SetConfig+0xc30>)
 80082a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082a2:	e00c      	b.n	80082be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80082a4:	4b61      	ldr	r3, [pc, #388]	; (800842c <UART_SetConfig+0xc34>)
 80082a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082a8:	e009      	b.n	80082be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082b0:	e005      	b.n	80082be <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80082bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 80ea 	beq.w	800849a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ca:	4a55      	ldr	r2, [pc, #340]	; (8008420 <UART_SetConfig+0xc28>)
 80082cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082d0:	461a      	mov	r2, r3
 80082d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80082d8:	005a      	lsls	r2, r3, #1
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	085b      	lsrs	r3, r3, #1
 80082e0:	441a      	add	r2, r3
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ee:	2b0f      	cmp	r3, #15
 80082f0:	d916      	bls.n	8008320 <UART_SetConfig+0xb28>
 80082f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082f8:	d212      	bcs.n	8008320 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	f023 030f 	bic.w	r3, r3, #15
 8008302:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008306:	085b      	lsrs	r3, r3, #1
 8008308:	b29b      	uxth	r3, r3
 800830a:	f003 0307 	and.w	r3, r3, #7
 800830e:	b29a      	uxth	r2, r3
 8008310:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008312:	4313      	orrs	r3, r2
 8008314:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800831c:	60da      	str	r2, [r3, #12]
 800831e:	e0bc      	b.n	800849a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008326:	e0b8      	b.n	800849a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008328:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800832c:	2b20      	cmp	r3, #32
 800832e:	dc4b      	bgt.n	80083c8 <UART_SetConfig+0xbd0>
 8008330:	2b00      	cmp	r3, #0
 8008332:	f2c0 8087 	blt.w	8008444 <UART_SetConfig+0xc4c>
 8008336:	2b20      	cmp	r3, #32
 8008338:	f200 8084 	bhi.w	8008444 <UART_SetConfig+0xc4c>
 800833c:	a201      	add	r2, pc, #4	; (adr r2, 8008344 <UART_SetConfig+0xb4c>)
 800833e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008342:	bf00      	nop
 8008344:	080083cf 	.word	0x080083cf
 8008348:	080083d7 	.word	0x080083d7
 800834c:	08008445 	.word	0x08008445
 8008350:	08008445 	.word	0x08008445
 8008354:	080083df 	.word	0x080083df
 8008358:	08008445 	.word	0x08008445
 800835c:	08008445 	.word	0x08008445
 8008360:	08008445 	.word	0x08008445
 8008364:	080083ef 	.word	0x080083ef
 8008368:	08008445 	.word	0x08008445
 800836c:	08008445 	.word	0x08008445
 8008370:	08008445 	.word	0x08008445
 8008374:	08008445 	.word	0x08008445
 8008378:	08008445 	.word	0x08008445
 800837c:	08008445 	.word	0x08008445
 8008380:	08008445 	.word	0x08008445
 8008384:	080083ff 	.word	0x080083ff
 8008388:	08008445 	.word	0x08008445
 800838c:	08008445 	.word	0x08008445
 8008390:	08008445 	.word	0x08008445
 8008394:	08008445 	.word	0x08008445
 8008398:	08008445 	.word	0x08008445
 800839c:	08008445 	.word	0x08008445
 80083a0:	08008445 	.word	0x08008445
 80083a4:	08008445 	.word	0x08008445
 80083a8:	08008445 	.word	0x08008445
 80083ac:	08008445 	.word	0x08008445
 80083b0:	08008445 	.word	0x08008445
 80083b4:	08008445 	.word	0x08008445
 80083b8:	08008445 	.word	0x08008445
 80083bc:	08008445 	.word	0x08008445
 80083c0:	08008445 	.word	0x08008445
 80083c4:	08008437 	.word	0x08008437
 80083c8:	2b40      	cmp	r3, #64	; 0x40
 80083ca:	d037      	beq.n	800843c <UART_SetConfig+0xc44>
 80083cc:	e03a      	b.n	8008444 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083ce:	f7fb fbf1 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 80083d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80083d4:	e03c      	b.n	8008450 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083d6:	f7fb fc03 	bl	8003be0 <HAL_RCC_GetPCLK2Freq>
 80083da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80083dc:	e038      	b.n	8008450 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fc fde6 	bl	8004fb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80083e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ec:	e030      	b.n	8008450 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083ee:	f107 0318 	add.w	r3, r7, #24
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fc ff32 	bl	800525c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083fc:	e028      	b.n	8008450 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083fe:	4b09      	ldr	r3, [pc, #36]	; (8008424 <UART_SetConfig+0xc2c>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0320 	and.w	r3, r3, #32
 8008406:	2b00      	cmp	r3, #0
 8008408:	d012      	beq.n	8008430 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800840a:	4b06      	ldr	r3, [pc, #24]	; (8008424 <UART_SetConfig+0xc2c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	08db      	lsrs	r3, r3, #3
 8008410:	f003 0303 	and.w	r3, r3, #3
 8008414:	4a04      	ldr	r2, [pc, #16]	; (8008428 <UART_SetConfig+0xc30>)
 8008416:	fa22 f303 	lsr.w	r3, r2, r3
 800841a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800841c:	e018      	b.n	8008450 <UART_SetConfig+0xc58>
 800841e:	bf00      	nop
 8008420:	0800a5c4 	.word	0x0800a5c4
 8008424:	58024400 	.word	0x58024400
 8008428:	03d09000 	.word	0x03d09000
 800842c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008430:	4b24      	ldr	r3, [pc, #144]	; (80084c4 <UART_SetConfig+0xccc>)
 8008432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008434:	e00c      	b.n	8008450 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008436:	4b24      	ldr	r3, [pc, #144]	; (80084c8 <UART_SetConfig+0xcd0>)
 8008438:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800843a:	e009      	b.n	8008450 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800843c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008442:	e005      	b.n	8008450 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008444:	2300      	movs	r3, #0
 8008446:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800844e:	bf00      	nop
    }

    if (pclk != 0U)
 8008450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008452:	2b00      	cmp	r3, #0
 8008454:	d021      	beq.n	800849a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845a:	4a1c      	ldr	r2, [pc, #112]	; (80084cc <UART_SetConfig+0xcd4>)
 800845c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008460:	461a      	mov	r2, r3
 8008462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008464:	fbb3 f2f2 	udiv	r2, r3, r2
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	085b      	lsrs	r3, r3, #1
 800846e:	441a      	add	r2, r3
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	fbb2 f3f3 	udiv	r3, r2, r3
 8008478:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800847a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847c:	2b0f      	cmp	r3, #15
 800847e:	d909      	bls.n	8008494 <UART_SetConfig+0xc9c>
 8008480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008486:	d205      	bcs.n	8008494 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848a:	b29a      	uxth	r2, r3
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	60da      	str	r2, [r3, #12]
 8008492:	e002      	b.n	800849a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	2201      	movs	r2, #1
 800849e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	2200      	movs	r2, #0
 80084ae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	2200      	movs	r2, #0
 80084b4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80084b6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3748      	adds	r7, #72	; 0x48
 80084be:	46bd      	mov	sp, r7
 80084c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084c4:	03d09000 	.word	0x03d09000
 80084c8:	003d0900 	.word	0x003d0900
 80084cc:	0800a5c4 	.word	0x0800a5c4

080084d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084dc:	f003 0301 	and.w	r3, r3, #1
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00a      	beq.n	80084fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	430a      	orrs	r2, r1
 80084f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00a      	beq.n	800851c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	430a      	orrs	r2, r1
 800851a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008520:	f003 0304 	and.w	r3, r3, #4
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00a      	beq.n	800853e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	430a      	orrs	r2, r1
 800853c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008542:	f003 0308 	and.w	r3, r3, #8
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00a      	beq.n	8008560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	430a      	orrs	r2, r1
 800855e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008564:	f003 0310 	and.w	r3, r3, #16
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00a      	beq.n	8008582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008586:	f003 0320 	and.w	r3, r3, #32
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00a      	beq.n	80085a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d01a      	beq.n	80085e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	430a      	orrs	r2, r1
 80085c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085ce:	d10a      	bne.n	80085e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	430a      	orrs	r2, r1
 80085e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00a      	beq.n	8008608 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	430a      	orrs	r2, r1
 8008606:	605a      	str	r2, [r3, #4]
  }
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b098      	sub	sp, #96	; 0x60
 8008618:	af02      	add	r7, sp, #8
 800861a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008624:	f7f9 fa52 	bl	8001acc <HAL_GetTick>
 8008628:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 0308 	and.w	r3, r3, #8
 8008634:	2b08      	cmp	r3, #8
 8008636:	d12f      	bne.n	8008698 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008638:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008640:	2200      	movs	r2, #0
 8008642:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f88e 	bl	8008768 <UART_WaitOnFlagUntilTimeout>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d022      	beq.n	8008698 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865a:	e853 3f00 	ldrex	r3, [r3]
 800865e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008666:	653b      	str	r3, [r7, #80]	; 0x50
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	461a      	mov	r2, r3
 800866e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008670:	647b      	str	r3, [r7, #68]	; 0x44
 8008672:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008674:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008678:	e841 2300 	strex	r3, r2, [r1]
 800867c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800867e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1e6      	bne.n	8008652 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2220      	movs	r2, #32
 8008688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e063      	b.n	8008760 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0304 	and.w	r3, r3, #4
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	d149      	bne.n	800873a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086ae:	2200      	movs	r2, #0
 80086b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f857 	bl	8008768 <UART_WaitOnFlagUntilTimeout>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d03c      	beq.n	800873a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	623b      	str	r3, [r7, #32]
   return(result);
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	461a      	mov	r2, r3
 80086dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086de:	633b      	str	r3, [r7, #48]	; 0x30
 80086e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086e6:	e841 2300 	strex	r3, r2, [r1]
 80086ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1e6      	bne.n	80086c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3308      	adds	r3, #8
 80086f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	e853 3f00 	ldrex	r3, [r3]
 8008700:	60fb      	str	r3, [r7, #12]
   return(result);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f023 0301 	bic.w	r3, r3, #1
 8008708:	64bb      	str	r3, [r7, #72]	; 0x48
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3308      	adds	r3, #8
 8008710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008712:	61fa      	str	r2, [r7, #28]
 8008714:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008716:	69b9      	ldr	r1, [r7, #24]
 8008718:	69fa      	ldr	r2, [r7, #28]
 800871a:	e841 2300 	strex	r3, r2, [r1]
 800871e:	617b      	str	r3, [r7, #20]
   return(result);
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1e5      	bne.n	80086f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2220      	movs	r2, #32
 800872a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008736:	2303      	movs	r3, #3
 8008738:	e012      	b.n	8008760 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2220      	movs	r2, #32
 800873e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2220      	movs	r2, #32
 8008746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3758      	adds	r7, #88	; 0x58
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	603b      	str	r3, [r7, #0]
 8008774:	4613      	mov	r3, r2
 8008776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008778:	e049      	b.n	800880e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008780:	d045      	beq.n	800880e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008782:	f7f9 f9a3 	bl	8001acc <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	69ba      	ldr	r2, [r7, #24]
 800878e:	429a      	cmp	r2, r3
 8008790:	d302      	bcc.n	8008798 <UART_WaitOnFlagUntilTimeout+0x30>
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e048      	b.n	800882e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0304 	and.w	r3, r3, #4
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d031      	beq.n	800880e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	f003 0308 	and.w	r3, r3, #8
 80087b4:	2b08      	cmp	r3, #8
 80087b6:	d110      	bne.n	80087da <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2208      	movs	r2, #8
 80087be:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 f95b 	bl	8008a7c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2208      	movs	r2, #8
 80087ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e029      	b.n	800882e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	69db      	ldr	r3, [r3, #28]
 80087e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087e8:	d111      	bne.n	800880e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 f941 	bl	8008a7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2220      	movs	r2, #32
 80087fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e00f      	b.n	800882e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	69da      	ldr	r2, [r3, #28]
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	4013      	ands	r3, r2
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	429a      	cmp	r2, r3
 800881c:	bf0c      	ite	eq
 800881e:	2301      	moveq	r3, #1
 8008820:	2300      	movne	r3, #0
 8008822:	b2db      	uxtb	r3, r3
 8008824:	461a      	mov	r2, r3
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	429a      	cmp	r2, r3
 800882a:	d0a6      	beq.n	800877a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
	...

08008838 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008838:	b480      	push	{r7}
 800883a:	b0a3      	sub	sp, #140	; 0x8c
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	4613      	mov	r3, r2
 8008844:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	88fa      	ldrh	r2, [r7, #6]
 8008850:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	88fa      	ldrh	r2, [r7, #6]
 8008858:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800886a:	d10e      	bne.n	800888a <UART_Start_Receive_IT+0x52>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d105      	bne.n	8008880 <UART_Start_Receive_IT+0x48>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f240 12ff 	movw	r2, #511	; 0x1ff
 800887a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800887e:	e02d      	b.n	80088dc <UART_Start_Receive_IT+0xa4>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	22ff      	movs	r2, #255	; 0xff
 8008884:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008888:	e028      	b.n	80088dc <UART_Start_Receive_IT+0xa4>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10d      	bne.n	80088ae <UART_Start_Receive_IT+0x76>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d104      	bne.n	80088a4 <UART_Start_Receive_IT+0x6c>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	22ff      	movs	r2, #255	; 0xff
 800889e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088a2:	e01b      	b.n	80088dc <UART_Start_Receive_IT+0xa4>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	227f      	movs	r2, #127	; 0x7f
 80088a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088ac:	e016      	b.n	80088dc <UART_Start_Receive_IT+0xa4>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088b6:	d10d      	bne.n	80088d4 <UART_Start_Receive_IT+0x9c>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d104      	bne.n	80088ca <UART_Start_Receive_IT+0x92>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	227f      	movs	r2, #127	; 0x7f
 80088c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088c8:	e008      	b.n	80088dc <UART_Start_Receive_IT+0xa4>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	223f      	movs	r2, #63	; 0x3f
 80088ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088d2:	e003      	b.n	80088dc <UART_Start_Receive_IT+0xa4>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2222      	movs	r2, #34	; 0x22
 80088e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3308      	adds	r3, #8
 80088f2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088f6:	e853 3f00 	ldrex	r3, [r3]
 80088fa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80088fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088fe:	f043 0301 	orr.w	r3, r3, #1
 8008902:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3308      	adds	r3, #8
 800890c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008910:	673a      	str	r2, [r7, #112]	; 0x70
 8008912:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008914:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008916:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008918:	e841 2300 	strex	r3, r2, [r1]
 800891c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800891e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1e3      	bne.n	80088ec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800892c:	d14f      	bne.n	80089ce <UART_Start_Receive_IT+0x196>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008934:	88fa      	ldrh	r2, [r7, #6]
 8008936:	429a      	cmp	r2, r3
 8008938:	d349      	bcc.n	80089ce <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008942:	d107      	bne.n	8008954 <UART_Start_Receive_IT+0x11c>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d103      	bne.n	8008954 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4a47      	ldr	r2, [pc, #284]	; (8008a6c <UART_Start_Receive_IT+0x234>)
 8008950:	675a      	str	r2, [r3, #116]	; 0x74
 8008952:	e002      	b.n	800895a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	4a46      	ldr	r2, [pc, #280]	; (8008a70 <UART_Start_Receive_IT+0x238>)
 8008958:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d01a      	beq.n	8008998 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800896a:	e853 3f00 	ldrex	r3, [r3]
 800896e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008976:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008984:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008986:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008988:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800898a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800898c:	e841 2300 	strex	r3, r2, [r1]
 8008990:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1e4      	bne.n	8008962 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3308      	adds	r3, #8
 800899e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089a2:	e853 3f00 	ldrex	r3, [r3]
 80089a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	3308      	adds	r3, #8
 80089b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80089b8:	64ba      	str	r2, [r7, #72]	; 0x48
 80089ba:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089c0:	e841 2300 	strex	r3, r2, [r1]
 80089c4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80089c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1e5      	bne.n	8008998 <UART_Start_Receive_IT+0x160>
 80089cc:	e046      	b.n	8008a5c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d6:	d107      	bne.n	80089e8 <UART_Start_Receive_IT+0x1b0>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d103      	bne.n	80089e8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	4a24      	ldr	r2, [pc, #144]	; (8008a74 <UART_Start_Receive_IT+0x23c>)
 80089e4:	675a      	str	r2, [r3, #116]	; 0x74
 80089e6:	e002      	b.n	80089ee <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	4a23      	ldr	r2, [pc, #140]	; (8008a78 <UART_Start_Receive_IT+0x240>)
 80089ec:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d019      	beq.n	8008a2a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fe:	e853 3f00 	ldrex	r3, [r3]
 8008a02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008a0a:	677b      	str	r3, [r7, #116]	; 0x74
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	461a      	mov	r2, r3
 8008a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a14:	637b      	str	r3, [r7, #52]	; 0x34
 8008a16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a1c:	e841 2300 	strex	r3, r2, [r1]
 8008a20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1e6      	bne.n	80089f6 <UART_Start_Receive_IT+0x1be>
 8008a28:	e018      	b.n	8008a5c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	613b      	str	r3, [r7, #16]
   return(result);
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f043 0320 	orr.w	r3, r3, #32
 8008a3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	461a      	mov	r2, r3
 8008a46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a48:	623b      	str	r3, [r7, #32]
 8008a4a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	69f9      	ldr	r1, [r7, #28]
 8008a4e:	6a3a      	ldr	r2, [r7, #32]
 8008a50:	e841 2300 	strex	r3, r2, [r1]
 8008a54:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e6      	bne.n	8008a2a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	378c      	adds	r7, #140	; 0x8c
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	080095e1 	.word	0x080095e1
 8008a70:	08009281 	.word	0x08009281
 8008a74:	080090c9 	.word	0x080090c9
 8008a78:	08008f11 	.word	0x08008f11

08008a7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b095      	sub	sp, #84	; 0x54
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a8c:	e853 3f00 	ldrex	r3, [r3]
 8008a90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aa2:	643b      	str	r3, [r7, #64]	; 0x40
 8008aa4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008aa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008aaa:	e841 2300 	strex	r3, r2, [r1]
 8008aae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1e6      	bne.n	8008a84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3308      	adds	r3, #8
 8008abc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	e853 3f00 	ldrex	r3, [r3]
 8008ac4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ac6:	69fa      	ldr	r2, [r7, #28]
 8008ac8:	4b1e      	ldr	r3, [pc, #120]	; (8008b44 <UART_EndRxTransfer+0xc8>)
 8008aca:	4013      	ands	r3, r2
 8008acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3308      	adds	r3, #8
 8008ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ad8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e5      	bne.n	8008ab6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d118      	bne.n	8008b24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	e853 3f00 	ldrex	r3, [r3]
 8008afe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	f023 0310 	bic.w	r3, r3, #16
 8008b06:	647b      	str	r3, [r7, #68]	; 0x44
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b10:	61bb      	str	r3, [r7, #24]
 8008b12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b14:	6979      	ldr	r1, [r7, #20]
 8008b16:	69ba      	ldr	r2, [r7, #24]
 8008b18:	e841 2300 	strex	r3, r2, [r1]
 8008b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1e6      	bne.n	8008af2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2220      	movs	r2, #32
 8008b28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008b38:	bf00      	nop
 8008b3a:	3754      	adds	r7, #84	; 0x54
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	effffffe 	.word	0xeffffffe

08008b48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f7fe fe30 	bl	80077cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b6c:	bf00      	nop
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b08f      	sub	sp, #60	; 0x3c
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b82:	2b21      	cmp	r3, #33	; 0x21
 8008b84:	d14c      	bne.n	8008c20 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d132      	bne.n	8008bf8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b98:	6a3b      	ldr	r3, [r7, #32]
 8008b9a:	e853 3f00 	ldrex	r3, [r3]
 8008b9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	461a      	mov	r2, r3
 8008bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bb2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bb8:	e841 2300 	strex	r3, r2, [r1]
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1e6      	bne.n	8008b92 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	e853 3f00 	ldrex	r3, [r3]
 8008bd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	461a      	mov	r2, r3
 8008be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be2:	61bb      	str	r3, [r7, #24]
 8008be4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be6:	6979      	ldr	r1, [r7, #20]
 8008be8:	69ba      	ldr	r2, [r7, #24]
 8008bea:	e841 2300 	strex	r3, r2, [r1]
 8008bee:	613b      	str	r3, [r7, #16]
   return(result);
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1e6      	bne.n	8008bc4 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008bf6:	e013      	b.n	8008c20 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bfc:	781a      	ldrb	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c08:	1c5a      	adds	r2, r3, #1
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	3b01      	subs	r3, #1
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008c20:	bf00      	nop
 8008c22:	373c      	adds	r7, #60	; 0x3c
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b091      	sub	sp, #68	; 0x44
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c3a:	2b21      	cmp	r3, #33	; 0x21
 8008c3c:	d151      	bne.n	8008ce2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d132      	bne.n	8008cb0 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c52:	e853 3f00 	ldrex	r3, [r3]
 8008c56:	623b      	str	r3, [r7, #32]
   return(result);
 8008c58:	6a3b      	ldr	r3, [r7, #32]
 8008c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	461a      	mov	r2, r3
 8008c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c68:	633b      	str	r3, [r7, #48]	; 0x30
 8008c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c70:	e841 2300 	strex	r3, r2, [r1]
 8008c74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1e6      	bne.n	8008c4a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c90:	637b      	str	r3, [r7, #52]	; 0x34
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c9a:	61fb      	str	r3, [r7, #28]
 8008c9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9e:	69b9      	ldr	r1, [r7, #24]
 8008ca0:	69fa      	ldr	r2, [r7, #28]
 8008ca2:	e841 2300 	strex	r3, r2, [r1]
 8008ca6:	617b      	str	r3, [r7, #20]
   return(result);
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1e6      	bne.n	8008c7c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008cae:	e018      	b.n	8008ce2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cb8:	881b      	ldrh	r3, [r3, #0]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cc4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cca:	1c9a      	adds	r2, r3, #2
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008ce2:	bf00      	nop
 8008ce4:	3744      	adds	r7, #68	; 0x44
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b091      	sub	sp, #68	; 0x44
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cfc:	2b21      	cmp	r3, #33	; 0x21
 8008cfe:	d160      	bne.n	8008dc2 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d06:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008d08:	e057      	b.n	8008dba <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d133      	bne.n	8008d7e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3308      	adds	r3, #8
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d20:	e853 3f00 	ldrex	r3, [r3]
 8008d24:	623b      	str	r3, [r7, #32]
   return(result);
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008d2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3308      	adds	r3, #8
 8008d34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d36:	633a      	str	r2, [r7, #48]	; 0x30
 8008d38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d3e:	e841 2300 	strex	r3, r2, [r1]
 8008d42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1e5      	bne.n	8008d16 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	e853 3f00 	ldrex	r3, [r3]
 8008d56:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	461a      	mov	r2, r3
 8008d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d68:	61fb      	str	r3, [r7, #28]
 8008d6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6c:	69b9      	ldr	r1, [r7, #24]
 8008d6e:	69fa      	ldr	r2, [r7, #28]
 8008d70:	e841 2300 	strex	r3, r2, [r1]
 8008d74:	617b      	str	r3, [r7, #20]
   return(result);
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1e6      	bne.n	8008d4a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008d7c:	e021      	b.n	8008dc2 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d013      	beq.n	8008db4 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d90:	781a      	ldrb	r2, [r3, #0]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d9c:	1c5a      	adds	r2, r3, #1
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	3b01      	subs	r3, #1
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008db4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008db6:	3b01      	subs	r3, #1
 8008db8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008dba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1a4      	bne.n	8008d0a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008dc0:	e7ff      	b.n	8008dc2 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008dc2:	bf00      	nop
 8008dc4:	3744      	adds	r7, #68	; 0x44
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b091      	sub	sp, #68	; 0x44
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ddc:	2b21      	cmp	r3, #33	; 0x21
 8008dde:	d165      	bne.n	8008eac <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008de6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008de8:	e05c      	b.n	8008ea4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d133      	bne.n	8008e5e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	3308      	adds	r3, #8
 8008dfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfe:	6a3b      	ldr	r3, [r7, #32]
 8008e00:	e853 3f00 	ldrex	r3, [r3]
 8008e04:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	3308      	adds	r3, #8
 8008e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e1e:	e841 2300 	strex	r3, r2, [r1]
 8008e22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1e5      	bne.n	8008df6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	e853 3f00 	ldrex	r3, [r3]
 8008e36:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	461a      	mov	r2, r3
 8008e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e48:	61bb      	str	r3, [r7, #24]
 8008e4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4c:	6979      	ldr	r1, [r7, #20]
 8008e4e:	69ba      	ldr	r2, [r7, #24]
 8008e50:	e841 2300 	strex	r3, r2, [r1]
 8008e54:	613b      	str	r3, [r7, #16]
   return(result);
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1e6      	bne.n	8008e2a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008e5c:	e026      	b.n	8008eac <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	69db      	ldr	r3, [r3, #28]
 8008e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d018      	beq.n	8008e9e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e70:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e74:	881b      	ldrh	r3, [r3, #0]
 8008e76:	461a      	mov	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e80:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e86:	1c9a      	adds	r2, r3, #2
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	3b01      	subs	r3, #1
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008e9e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008ea4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d19f      	bne.n	8008dea <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008eaa:	e7ff      	b.n	8008eac <UART_TxISR_16BIT_FIFOEN+0xde>
 8008eac:	bf00      	nop
 8008eae:	3744      	adds	r7, #68	; 0x44
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b088      	sub	sp, #32
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	e853 3f00 	ldrex	r3, [r3]
 8008ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ed4:	61fb      	str	r3, [r7, #28]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	461a      	mov	r2, r3
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	61bb      	str	r3, [r7, #24]
 8008ee0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee2:	6979      	ldr	r1, [r7, #20]
 8008ee4:	69ba      	ldr	r2, [r7, #24]
 8008ee6:	e841 2300 	strex	r3, r2, [r1]
 8008eea:	613b      	str	r3, [r7, #16]
   return(result);
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1e6      	bne.n	8008ec0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7fe fc59 	bl	80077b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f06:	bf00      	nop
 8008f08:	3720      	adds	r7, #32
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
	...

08008f10 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b09c      	sub	sp, #112	; 0x70
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f1e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f28:	2b22      	cmp	r3, #34	; 0x22
 8008f2a:	f040 80be 	bne.w	80090aa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008f38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008f3c:	b2d9      	uxtb	r1, r3
 8008f3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008f42:	b2da      	uxtb	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f48:	400a      	ands	r2, r1
 8008f4a:	b2d2      	uxtb	r2, r2
 8008f4c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f52:	1c5a      	adds	r2, r3, #1
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	3b01      	subs	r3, #1
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f040 80a1 	bne.w	80090ba <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f80:	e853 3f00 	ldrex	r3, [r3]
 8008f84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	461a      	mov	r2, r3
 8008f94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f96:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f98:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f9e:	e841 2300 	strex	r3, r2, [r1]
 8008fa2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1e6      	bne.n	8008f78 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	3308      	adds	r3, #8
 8008fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb4:	e853 3f00 	ldrex	r3, [r3]
 8008fb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fbc:	f023 0301 	bic.w	r3, r3, #1
 8008fc0:	667b      	str	r3, [r7, #100]	; 0x64
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008fca:	647a      	str	r2, [r7, #68]	; 0x44
 8008fcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fd2:	e841 2300 	strex	r3, r2, [r1]
 8008fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1e5      	bne.n	8008faa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2220      	movs	r2, #32
 8008fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a33      	ldr	r2, [pc, #204]	; (80090c4 <UART_RxISR_8BIT+0x1b4>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d01f      	beq.n	800903c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009006:	2b00      	cmp	r3, #0
 8009008:	d018      	beq.n	800903c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009012:	e853 3f00 	ldrex	r3, [r3]
 8009016:	623b      	str	r3, [r7, #32]
   return(result);
 8009018:	6a3b      	ldr	r3, [r7, #32]
 800901a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800901e:	663b      	str	r3, [r7, #96]	; 0x60
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	461a      	mov	r2, r3
 8009026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009028:	633b      	str	r3, [r7, #48]	; 0x30
 800902a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800902e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009030:	e841 2300 	strex	r3, r2, [r1]
 8009034:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1e6      	bne.n	800900a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009040:	2b01      	cmp	r3, #1
 8009042:	d12e      	bne.n	80090a2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	e853 3f00 	ldrex	r3, [r3]
 8009056:	60fb      	str	r3, [r7, #12]
   return(result);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 0310 	bic.w	r3, r3, #16
 800905e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	461a      	mov	r2, r3
 8009066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009068:	61fb      	str	r3, [r7, #28]
 800906a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906c:	69b9      	ldr	r1, [r7, #24]
 800906e:	69fa      	ldr	r2, [r7, #28]
 8009070:	e841 2300 	strex	r3, r2, [r1]
 8009074:	617b      	str	r3, [r7, #20]
   return(result);
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1e6      	bne.n	800904a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	f003 0310 	and.w	r3, r3, #16
 8009086:	2b10      	cmp	r3, #16
 8009088:	d103      	bne.n	8009092 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2210      	movs	r2, #16
 8009090:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f7fe fba0 	bl	80077e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090a0:	e00b      	b.n	80090ba <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f7f8 fc44 	bl	8001930 <HAL_UART_RxCpltCallback>
}
 80090a8:	e007      	b.n	80090ba <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	699a      	ldr	r2, [r3, #24]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f042 0208 	orr.w	r2, r2, #8
 80090b8:	619a      	str	r2, [r3, #24]
}
 80090ba:	bf00      	nop
 80090bc:	3770      	adds	r7, #112	; 0x70
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	58000c00 	.word	0x58000c00

080090c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b09c      	sub	sp, #112	; 0x70
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80090d6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090e0:	2b22      	cmp	r3, #34	; 0x22
 80090e2:	f040 80be 	bne.w	8009262 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090f4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80090f6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80090fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80090fe:	4013      	ands	r3, r2
 8009100:	b29a      	uxth	r2, r3
 8009102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009104:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800910a:	1c9a      	adds	r2, r3, #2
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009116:	b29b      	uxth	r3, r3
 8009118:	3b01      	subs	r3, #1
 800911a:	b29a      	uxth	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009128:	b29b      	uxth	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	f040 80a1 	bne.w	8009272 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009138:	e853 3f00 	ldrex	r3, [r3]
 800913c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800913e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009140:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009144:	667b      	str	r3, [r7, #100]	; 0x64
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	461a      	mov	r2, r3
 800914c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800914e:	657b      	str	r3, [r7, #84]	; 0x54
 8009150:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009152:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009154:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009156:	e841 2300 	strex	r3, r2, [r1]
 800915a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800915c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1e6      	bne.n	8009130 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3308      	adds	r3, #8
 8009168:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800916c:	e853 3f00 	ldrex	r3, [r3]
 8009170:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009174:	f023 0301 	bic.w	r3, r3, #1
 8009178:	663b      	str	r3, [r7, #96]	; 0x60
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	3308      	adds	r3, #8
 8009180:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009182:	643a      	str	r2, [r7, #64]	; 0x40
 8009184:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009186:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009188:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800918a:	e841 2300 	strex	r3, r2, [r1]
 800918e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1e5      	bne.n	8009162 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2220      	movs	r2, #32
 800919a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a33      	ldr	r2, [pc, #204]	; (800927c <UART_RxISR_16BIT+0x1b4>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d01f      	beq.n	80091f4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d018      	beq.n	80091f4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c8:	6a3b      	ldr	r3, [r7, #32]
 80091ca:	e853 3f00 	ldrex	r3, [r3]
 80091ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80091d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	461a      	mov	r2, r3
 80091de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091e2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091e8:	e841 2300 	strex	r3, r2, [r1]
 80091ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1e6      	bne.n	80091c2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d12e      	bne.n	800925a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	e853 3f00 	ldrex	r3, [r3]
 800920e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	f023 0310 	bic.w	r3, r3, #16
 8009216:	65bb      	str	r3, [r7, #88]	; 0x58
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	461a      	mov	r2, r3
 800921e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009220:	61bb      	str	r3, [r7, #24]
 8009222:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009224:	6979      	ldr	r1, [r7, #20]
 8009226:	69ba      	ldr	r2, [r7, #24]
 8009228:	e841 2300 	strex	r3, r2, [r1]
 800922c:	613b      	str	r3, [r7, #16]
   return(result);
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e6      	bne.n	8009202 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	f003 0310 	and.w	r3, r3, #16
 800923e:	2b10      	cmp	r3, #16
 8009240:	d103      	bne.n	800924a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2210      	movs	r2, #16
 8009248:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009250:	4619      	mov	r1, r3
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7fe fac4 	bl	80077e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009258:	e00b      	b.n	8009272 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7f8 fb68 	bl	8001930 <HAL_UART_RxCpltCallback>
}
 8009260:	e007      	b.n	8009272 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	699a      	ldr	r2, [r3, #24]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f042 0208 	orr.w	r2, r2, #8
 8009270:	619a      	str	r2, [r3, #24]
}
 8009272:	bf00      	nop
 8009274:	3770      	adds	r7, #112	; 0x70
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	58000c00 	.word	0x58000c00

08009280 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b0ac      	sub	sp, #176	; 0xb0
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800928e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	69db      	ldr	r3, [r3, #28]
 8009298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092b6:	2b22      	cmp	r3, #34	; 0x22
 80092b8:	f040 8180 	bne.w	80095bc <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80092c2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092c6:	e123      	b.n	8009510 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ce:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80092d2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80092d6:	b2d9      	uxtb	r1, r3
 80092d8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e2:	400a      	ands	r2, r1
 80092e4:	b2d2      	uxtb	r2, r2
 80092e6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ec:	1c5a      	adds	r2, r3, #1
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	3b01      	subs	r3, #1
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	69db      	ldr	r3, [r3, #28]
 800930a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800930e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009312:	f003 0307 	and.w	r3, r3, #7
 8009316:	2b00      	cmp	r3, #0
 8009318:	d053      	beq.n	80093c2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800931a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	2b00      	cmp	r3, #0
 8009324:	d011      	beq.n	800934a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009326:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800932a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00b      	beq.n	800934a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2201      	movs	r2, #1
 8009338:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009340:	f043 0201 	orr.w	r2, r3, #1
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800934a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800934e:	f003 0302 	and.w	r3, r3, #2
 8009352:	2b00      	cmp	r3, #0
 8009354:	d011      	beq.n	800937a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00b      	beq.n	800937a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2202      	movs	r2, #2
 8009368:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009370:	f043 0204 	orr.w	r2, r3, #4
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800937a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800937e:	f003 0304 	and.w	r3, r3, #4
 8009382:	2b00      	cmp	r3, #0
 8009384:	d011      	beq.n	80093aa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00b      	beq.n	80093aa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2204      	movs	r2, #4
 8009398:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093a0:	f043 0202 	orr.w	r2, r3, #2
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d006      	beq.n	80093c2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7fe fa09 	bl	80077cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f040 80a0 	bne.w	8009510 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093d8:	e853 3f00 	ldrex	r3, [r3]
 80093dc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80093de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	461a      	mov	r2, r3
 80093ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80093f4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80093f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80093fa:	e841 2300 	strex	r3, r2, [r1]
 80093fe:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1e4      	bne.n	80093d0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3308      	adds	r3, #8
 800940c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009410:	e853 3f00 	ldrex	r3, [r3]
 8009414:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009416:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009418:	4b6e      	ldr	r3, [pc, #440]	; (80095d4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800941a:	4013      	ands	r3, r2
 800941c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	3308      	adds	r3, #8
 8009426:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800942a:	66ba      	str	r2, [r7, #104]	; 0x68
 800942c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009430:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009432:	e841 2300 	strex	r3, r2, [r1]
 8009436:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009438:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1e3      	bne.n	8009406 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2220      	movs	r2, #32
 8009442:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a60      	ldr	r2, [pc, #384]	; (80095d8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d021      	beq.n	80094a0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009466:	2b00      	cmp	r3, #0
 8009468:	d01a      	beq.n	80094a0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009472:	e853 3f00 	ldrex	r3, [r3]
 8009476:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800947a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800947e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	461a      	mov	r2, r3
 8009488:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800948c:	657b      	str	r3, [r7, #84]	; 0x54
 800948e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009490:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009492:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009494:	e841 2300 	strex	r3, r2, [r1]
 8009498:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800949a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1e4      	bne.n	800946a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d130      	bne.n	800950a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b6:	e853 3f00 	ldrex	r3, [r3]
 80094ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094be:	f023 0310 	bic.w	r3, r3, #16
 80094c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	461a      	mov	r2, r3
 80094cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094d0:	643b      	str	r3, [r7, #64]	; 0x40
 80094d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094d8:	e841 2300 	strex	r3, r2, [r1]
 80094dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1e4      	bne.n	80094ae <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	69db      	ldr	r3, [r3, #28]
 80094ea:	f003 0310 	and.w	r3, r3, #16
 80094ee:	2b10      	cmp	r3, #16
 80094f0:	d103      	bne.n	80094fa <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2210      	movs	r2, #16
 80094f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009500:	4619      	mov	r1, r3
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f7fe f96c 	bl	80077e0 <HAL_UARTEx_RxEventCallback>
 8009508:	e002      	b.n	8009510 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f7f8 fa10 	bl	8001930 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009510:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009514:	2b00      	cmp	r3, #0
 8009516:	d006      	beq.n	8009526 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8009518:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800951c:	f003 0320 	and.w	r3, r3, #32
 8009520:	2b00      	cmp	r3, #0
 8009522:	f47f aed1 	bne.w	80092c8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800952c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009530:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009534:	2b00      	cmp	r3, #0
 8009536:	d049      	beq.n	80095cc <UART_RxISR_8BIT_FIFOEN+0x34c>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800953e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009542:	429a      	cmp	r2, r3
 8009544:	d242      	bcs.n	80095cc <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	3308      	adds	r3, #8
 800954c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954e:	6a3b      	ldr	r3, [r7, #32]
 8009550:	e853 3f00 	ldrex	r3, [r3]
 8009554:	61fb      	str	r3, [r7, #28]
   return(result);
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800955c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3308      	adds	r3, #8
 8009566:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800956a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800956c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009572:	e841 2300 	strex	r3, r2, [r1]
 8009576:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1e3      	bne.n	8009546 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a16      	ldr	r2, [pc, #88]	; (80095dc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009582:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	e853 3f00 	ldrex	r3, [r3]
 8009590:	60bb      	str	r3, [r7, #8]
   return(result);
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	f043 0320 	orr.w	r3, r3, #32
 8009598:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	461a      	mov	r2, r3
 80095a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80095a6:	61bb      	str	r3, [r7, #24]
 80095a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095aa:	6979      	ldr	r1, [r7, #20]
 80095ac:	69ba      	ldr	r2, [r7, #24]
 80095ae:	e841 2300 	strex	r3, r2, [r1]
 80095b2:	613b      	str	r3, [r7, #16]
   return(result);
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1e4      	bne.n	8009584 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095ba:	e007      	b.n	80095cc <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	699a      	ldr	r2, [r3, #24]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f042 0208 	orr.w	r2, r2, #8
 80095ca:	619a      	str	r2, [r3, #24]
}
 80095cc:	bf00      	nop
 80095ce:	37b0      	adds	r7, #176	; 0xb0
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	effffffe 	.word	0xeffffffe
 80095d8:	58000c00 	.word	0x58000c00
 80095dc:	08008f11 	.word	0x08008f11

080095e0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b0ae      	sub	sp, #184	; 0xb8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095ee:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	69db      	ldr	r3, [r3, #28]
 80095f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009616:	2b22      	cmp	r3, #34	; 0x22
 8009618:	f040 8184 	bne.w	8009924 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009622:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009626:	e127      	b.n	8009878 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800963a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800963e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009642:	4013      	ands	r3, r2
 8009644:	b29a      	uxth	r2, r3
 8009646:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800964a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009650:	1c9a      	adds	r2, r3, #2
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800965c:	b29b      	uxth	r3, r3
 800965e:	3b01      	subs	r3, #1
 8009660:	b29a      	uxth	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	69db      	ldr	r3, [r3, #28]
 800966e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009672:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009676:	f003 0307 	and.w	r3, r3, #7
 800967a:	2b00      	cmp	r3, #0
 800967c:	d053      	beq.n	8009726 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800967e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009682:	f003 0301 	and.w	r3, r3, #1
 8009686:	2b00      	cmp	r3, #0
 8009688:	d011      	beq.n	80096ae <UART_RxISR_16BIT_FIFOEN+0xce>
 800968a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800968e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00b      	beq.n	80096ae <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2201      	movs	r2, #1
 800969c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096a4:	f043 0201 	orr.w	r2, r3, #1
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80096b2:	f003 0302 	and.w	r3, r3, #2
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d011      	beq.n	80096de <UART_RxISR_16BIT_FIFOEN+0xfe>
 80096ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00b      	beq.n	80096de <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	2202      	movs	r2, #2
 80096cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096d4:	f043 0204 	orr.w	r2, r3, #4
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80096e2:	f003 0304 	and.w	r3, r3, #4
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d011      	beq.n	800970e <UART_RxISR_16BIT_FIFOEN+0x12e>
 80096ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80096ee:	f003 0301 	and.w	r3, r3, #1
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00b      	beq.n	800970e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	2204      	movs	r2, #4
 80096fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009704:	f043 0202 	orr.w	r2, r3, #2
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009714:	2b00      	cmp	r3, #0
 8009716:	d006      	beq.n	8009726 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7fe f857 	bl	80077cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800972c:	b29b      	uxth	r3, r3
 800972e:	2b00      	cmp	r3, #0
 8009730:	f040 80a2 	bne.w	8009878 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800973c:	e853 3f00 	ldrex	r3, [r3]
 8009740:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009748:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	461a      	mov	r2, r3
 8009752:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009756:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800975a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800975e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009762:	e841 2300 	strex	r3, r2, [r1]
 8009766:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1e2      	bne.n	8009734 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	3308      	adds	r3, #8
 8009774:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009778:	e853 3f00 	ldrex	r3, [r3]
 800977c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800977e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009780:	4b6e      	ldr	r3, [pc, #440]	; (800993c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8009782:	4013      	ands	r3, r2
 8009784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3308      	adds	r3, #8
 800978e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009792:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009794:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009796:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009798:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800979a:	e841 2300 	strex	r3, r2, [r1]
 800979e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80097a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1e3      	bne.n	800976e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2220      	movs	r2, #32
 80097aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a60      	ldr	r2, [pc, #384]	; (8009940 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d021      	beq.n	8009808 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d01a      	beq.n	8009808 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097da:	e853 3f00 	ldrex	r3, [r3]
 80097de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80097e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80097e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	461a      	mov	r2, r3
 80097f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80097f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80097fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80097fc:	e841 2300 	strex	r3, r2, [r1]
 8009800:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1e4      	bne.n	80097d2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800980c:	2b01      	cmp	r3, #1
 800980e:	d130      	bne.n	8009872 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981e:	e853 3f00 	ldrex	r3, [r3]
 8009822:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009826:	f023 0310 	bic.w	r3, r3, #16
 800982a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	461a      	mov	r2, r3
 8009834:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009838:	647b      	str	r3, [r7, #68]	; 0x44
 800983a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800983e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009840:	e841 2300 	strex	r3, r2, [r1]
 8009844:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1e4      	bne.n	8009816 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	f003 0310 	and.w	r3, r3, #16
 8009856:	2b10      	cmp	r3, #16
 8009858:	d103      	bne.n	8009862 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2210      	movs	r2, #16
 8009860:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009868:	4619      	mov	r1, r3
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f7fd ffb8 	bl	80077e0 <HAL_UARTEx_RxEventCallback>
 8009870:	e002      	b.n	8009878 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7f8 f85c 	bl	8001930 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009878:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800987c:	2b00      	cmp	r3, #0
 800987e:	d006      	beq.n	800988e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8009880:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009884:	f003 0320 	and.w	r3, r3, #32
 8009888:	2b00      	cmp	r3, #0
 800988a:	f47f aecd 	bne.w	8009628 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009894:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009898:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800989c:	2b00      	cmp	r3, #0
 800989e:	d049      	beq.n	8009934 <UART_RxISR_16BIT_FIFOEN+0x354>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80098a6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d242      	bcs.n	8009934 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	3308      	adds	r3, #8
 80098b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b8:	e853 3f00 	ldrex	r3, [r3]
 80098bc:	623b      	str	r3, [r7, #32]
   return(result);
 80098be:	6a3b      	ldr	r3, [r7, #32]
 80098c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	3308      	adds	r3, #8
 80098ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80098d2:	633a      	str	r2, [r7, #48]	; 0x30
 80098d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098da:	e841 2300 	strex	r3, r2, [r1]
 80098de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1e3      	bne.n	80098ae <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a16      	ldr	r2, [pc, #88]	; (8009944 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80098ea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	e853 3f00 	ldrex	r3, [r3]
 80098f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f043 0320 	orr.w	r3, r3, #32
 8009900:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	461a      	mov	r2, r3
 800990a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800990e:	61fb      	str	r3, [r7, #28]
 8009910:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009912:	69b9      	ldr	r1, [r7, #24]
 8009914:	69fa      	ldr	r2, [r7, #28]
 8009916:	e841 2300 	strex	r3, r2, [r1]
 800991a:	617b      	str	r3, [r7, #20]
   return(result);
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1e4      	bne.n	80098ec <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009922:	e007      	b.n	8009934 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	699a      	ldr	r2, [r3, #24]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f042 0208 	orr.w	r2, r2, #8
 8009932:	619a      	str	r2, [r3, #24]
}
 8009934:	bf00      	nop
 8009936:	37b8      	adds	r7, #184	; 0xb8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	effffffe 	.word	0xeffffffe
 8009940:	58000c00 	.word	0x58000c00
 8009944:	080090c9 	.word	0x080090c9

08009948 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009992:	2b01      	cmp	r3, #1
 8009994:	d101      	bne.n	800999a <HAL_UARTEx_DisableFifoMode+0x16>
 8009996:	2302      	movs	r3, #2
 8009998:	e027      	b.n	80099ea <HAL_UARTEx_DisableFifoMode+0x66>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2201      	movs	r2, #1
 800999e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2224      	movs	r2, #36	; 0x24
 80099a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f022 0201 	bic.w	r2, r2, #1
 80099c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80099c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2220      	movs	r2, #32
 80099dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b084      	sub	sp, #16
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
 80099fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d101      	bne.n	8009a0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	e02d      	b.n	8009a6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2201      	movs	r2, #1
 8009a12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2224      	movs	r2, #36	; 0x24
 8009a1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f022 0201 	bic.w	r2, r2, #1
 8009a34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	430a      	orrs	r2, r1
 8009a48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f850 	bl	8009af0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2220      	movs	r2, #32
 8009a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b084      	sub	sp, #16
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
 8009a7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d101      	bne.n	8009a8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a86:	2302      	movs	r3, #2
 8009a88:	e02d      	b.n	8009ae6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2224      	movs	r2, #36	; 0x24
 8009a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f022 0201 	bic.w	r2, r2, #1
 8009ab0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	683a      	ldr	r2, [r7, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f812 	bl	8009af0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2220      	movs	r2, #32
 8009ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
	...

08009af0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b085      	sub	sp, #20
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d108      	bne.n	8009b12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b10:	e031      	b.n	8009b76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b12:	2310      	movs	r3, #16
 8009b14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b16:	2310      	movs	r3, #16
 8009b18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	0e5b      	lsrs	r3, r3, #25
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	f003 0307 	and.w	r3, r3, #7
 8009b28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	0f5b      	lsrs	r3, r3, #29
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	f003 0307 	and.w	r3, r3, #7
 8009b38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b3a:	7bbb      	ldrb	r3, [r7, #14]
 8009b3c:	7b3a      	ldrb	r2, [r7, #12]
 8009b3e:	4911      	ldr	r1, [pc, #68]	; (8009b84 <UARTEx_SetNbDataToProcess+0x94>)
 8009b40:	5c8a      	ldrb	r2, [r1, r2]
 8009b42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b46:	7b3a      	ldrb	r2, [r7, #12]
 8009b48:	490f      	ldr	r1, [pc, #60]	; (8009b88 <UARTEx_SetNbDataToProcess+0x98>)
 8009b4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
 8009b5a:	7b7a      	ldrb	r2, [r7, #13]
 8009b5c:	4909      	ldr	r1, [pc, #36]	; (8009b84 <UARTEx_SetNbDataToProcess+0x94>)
 8009b5e:	5c8a      	ldrb	r2, [r1, r2]
 8009b60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b64:	7b7a      	ldrb	r2, [r7, #13]
 8009b66:	4908      	ldr	r1, [pc, #32]	; (8009b88 <UARTEx_SetNbDataToProcess+0x98>)
 8009b68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009b76:	bf00      	nop
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	0800a5dc 	.word	0x0800a5dc
 8009b88:	0800a5e4 	.word	0x0800a5e4

08009b8c <__errno>:
 8009b8c:	4b01      	ldr	r3, [pc, #4]	; (8009b94 <__errno+0x8>)
 8009b8e:	6818      	ldr	r0, [r3, #0]
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	24000020 	.word	0x24000020

08009b98 <__libc_init_array>:
 8009b98:	b570      	push	{r4, r5, r6, lr}
 8009b9a:	4d0d      	ldr	r5, [pc, #52]	; (8009bd0 <__libc_init_array+0x38>)
 8009b9c:	4c0d      	ldr	r4, [pc, #52]	; (8009bd4 <__libc_init_array+0x3c>)
 8009b9e:	1b64      	subs	r4, r4, r5
 8009ba0:	10a4      	asrs	r4, r4, #2
 8009ba2:	2600      	movs	r6, #0
 8009ba4:	42a6      	cmp	r6, r4
 8009ba6:	d109      	bne.n	8009bbc <__libc_init_array+0x24>
 8009ba8:	4d0b      	ldr	r5, [pc, #44]	; (8009bd8 <__libc_init_array+0x40>)
 8009baa:	4c0c      	ldr	r4, [pc, #48]	; (8009bdc <__libc_init_array+0x44>)
 8009bac:	f000 fca2 	bl	800a4f4 <_init>
 8009bb0:	1b64      	subs	r4, r4, r5
 8009bb2:	10a4      	asrs	r4, r4, #2
 8009bb4:	2600      	movs	r6, #0
 8009bb6:	42a6      	cmp	r6, r4
 8009bb8:	d105      	bne.n	8009bc6 <__libc_init_array+0x2e>
 8009bba:	bd70      	pop	{r4, r5, r6, pc}
 8009bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bc0:	4798      	blx	r3
 8009bc2:	3601      	adds	r6, #1
 8009bc4:	e7ee      	b.n	8009ba4 <__libc_init_array+0xc>
 8009bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bca:	4798      	blx	r3
 8009bcc:	3601      	adds	r6, #1
 8009bce:	e7f2      	b.n	8009bb6 <__libc_init_array+0x1e>
 8009bd0:	0800a628 	.word	0x0800a628
 8009bd4:	0800a628 	.word	0x0800a628
 8009bd8:	0800a628 	.word	0x0800a628
 8009bdc:	0800a62c 	.word	0x0800a62c

08009be0 <memcpy>:
 8009be0:	440a      	add	r2, r1
 8009be2:	4291      	cmp	r1, r2
 8009be4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009be8:	d100      	bne.n	8009bec <memcpy+0xc>
 8009bea:	4770      	bx	lr
 8009bec:	b510      	push	{r4, lr}
 8009bee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bf6:	4291      	cmp	r1, r2
 8009bf8:	d1f9      	bne.n	8009bee <memcpy+0xe>
 8009bfa:	bd10      	pop	{r4, pc}

08009bfc <memset>:
 8009bfc:	4402      	add	r2, r0
 8009bfe:	4603      	mov	r3, r0
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d100      	bne.n	8009c06 <memset+0xa>
 8009c04:	4770      	bx	lr
 8009c06:	f803 1b01 	strb.w	r1, [r3], #1
 8009c0a:	e7f9      	b.n	8009c00 <memset+0x4>

08009c0c <sniprintf>:
 8009c0c:	b40c      	push	{r2, r3}
 8009c0e:	b530      	push	{r4, r5, lr}
 8009c10:	4b17      	ldr	r3, [pc, #92]	; (8009c70 <sniprintf+0x64>)
 8009c12:	1e0c      	subs	r4, r1, #0
 8009c14:	681d      	ldr	r5, [r3, #0]
 8009c16:	b09d      	sub	sp, #116	; 0x74
 8009c18:	da08      	bge.n	8009c2c <sniprintf+0x20>
 8009c1a:	238b      	movs	r3, #139	; 0x8b
 8009c1c:	602b      	str	r3, [r5, #0]
 8009c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c22:	b01d      	add	sp, #116	; 0x74
 8009c24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c28:	b002      	add	sp, #8
 8009c2a:	4770      	bx	lr
 8009c2c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009c30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009c34:	bf14      	ite	ne
 8009c36:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009c3a:	4623      	moveq	r3, r4
 8009c3c:	9304      	str	r3, [sp, #16]
 8009c3e:	9307      	str	r3, [sp, #28]
 8009c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c44:	9002      	str	r0, [sp, #8]
 8009c46:	9006      	str	r0, [sp, #24]
 8009c48:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009c4e:	ab21      	add	r3, sp, #132	; 0x84
 8009c50:	a902      	add	r1, sp, #8
 8009c52:	4628      	mov	r0, r5
 8009c54:	9301      	str	r3, [sp, #4]
 8009c56:	f000 f869 	bl	8009d2c <_svfiprintf_r>
 8009c5a:	1c43      	adds	r3, r0, #1
 8009c5c:	bfbc      	itt	lt
 8009c5e:	238b      	movlt	r3, #139	; 0x8b
 8009c60:	602b      	strlt	r3, [r5, #0]
 8009c62:	2c00      	cmp	r4, #0
 8009c64:	d0dd      	beq.n	8009c22 <sniprintf+0x16>
 8009c66:	9b02      	ldr	r3, [sp, #8]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	701a      	strb	r2, [r3, #0]
 8009c6c:	e7d9      	b.n	8009c22 <sniprintf+0x16>
 8009c6e:	bf00      	nop
 8009c70:	24000020 	.word	0x24000020

08009c74 <__ssputs_r>:
 8009c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c78:	688e      	ldr	r6, [r1, #8]
 8009c7a:	429e      	cmp	r6, r3
 8009c7c:	4682      	mov	sl, r0
 8009c7e:	460c      	mov	r4, r1
 8009c80:	4690      	mov	r8, r2
 8009c82:	461f      	mov	r7, r3
 8009c84:	d838      	bhi.n	8009cf8 <__ssputs_r+0x84>
 8009c86:	898a      	ldrh	r2, [r1, #12]
 8009c88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c8c:	d032      	beq.n	8009cf4 <__ssputs_r+0x80>
 8009c8e:	6825      	ldr	r5, [r4, #0]
 8009c90:	6909      	ldr	r1, [r1, #16]
 8009c92:	eba5 0901 	sub.w	r9, r5, r1
 8009c96:	6965      	ldr	r5, [r4, #20]
 8009c98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	444b      	add	r3, r9
 8009ca4:	106d      	asrs	r5, r5, #1
 8009ca6:	429d      	cmp	r5, r3
 8009ca8:	bf38      	it	cc
 8009caa:	461d      	movcc	r5, r3
 8009cac:	0553      	lsls	r3, r2, #21
 8009cae:	d531      	bpl.n	8009d14 <__ssputs_r+0xa0>
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	f000 fb55 	bl	800a360 <_malloc_r>
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	b950      	cbnz	r0, 8009cd0 <__ssputs_r+0x5c>
 8009cba:	230c      	movs	r3, #12
 8009cbc:	f8ca 3000 	str.w	r3, [sl]
 8009cc0:	89a3      	ldrh	r3, [r4, #12]
 8009cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cc6:	81a3      	strh	r3, [r4, #12]
 8009cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd0:	6921      	ldr	r1, [r4, #16]
 8009cd2:	464a      	mov	r2, r9
 8009cd4:	f7ff ff84 	bl	8009be0 <memcpy>
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ce2:	81a3      	strh	r3, [r4, #12]
 8009ce4:	6126      	str	r6, [r4, #16]
 8009ce6:	6165      	str	r5, [r4, #20]
 8009ce8:	444e      	add	r6, r9
 8009cea:	eba5 0509 	sub.w	r5, r5, r9
 8009cee:	6026      	str	r6, [r4, #0]
 8009cf0:	60a5      	str	r5, [r4, #8]
 8009cf2:	463e      	mov	r6, r7
 8009cf4:	42be      	cmp	r6, r7
 8009cf6:	d900      	bls.n	8009cfa <__ssputs_r+0x86>
 8009cf8:	463e      	mov	r6, r7
 8009cfa:	6820      	ldr	r0, [r4, #0]
 8009cfc:	4632      	mov	r2, r6
 8009cfe:	4641      	mov	r1, r8
 8009d00:	f000 faa8 	bl	800a254 <memmove>
 8009d04:	68a3      	ldr	r3, [r4, #8]
 8009d06:	1b9b      	subs	r3, r3, r6
 8009d08:	60a3      	str	r3, [r4, #8]
 8009d0a:	6823      	ldr	r3, [r4, #0]
 8009d0c:	4433      	add	r3, r6
 8009d0e:	6023      	str	r3, [r4, #0]
 8009d10:	2000      	movs	r0, #0
 8009d12:	e7db      	b.n	8009ccc <__ssputs_r+0x58>
 8009d14:	462a      	mov	r2, r5
 8009d16:	f000 fb97 	bl	800a448 <_realloc_r>
 8009d1a:	4606      	mov	r6, r0
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d1e1      	bne.n	8009ce4 <__ssputs_r+0x70>
 8009d20:	6921      	ldr	r1, [r4, #16]
 8009d22:	4650      	mov	r0, sl
 8009d24:	f000 fab0 	bl	800a288 <_free_r>
 8009d28:	e7c7      	b.n	8009cba <__ssputs_r+0x46>
	...

08009d2c <_svfiprintf_r>:
 8009d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d30:	4698      	mov	r8, r3
 8009d32:	898b      	ldrh	r3, [r1, #12]
 8009d34:	061b      	lsls	r3, r3, #24
 8009d36:	b09d      	sub	sp, #116	; 0x74
 8009d38:	4607      	mov	r7, r0
 8009d3a:	460d      	mov	r5, r1
 8009d3c:	4614      	mov	r4, r2
 8009d3e:	d50e      	bpl.n	8009d5e <_svfiprintf_r+0x32>
 8009d40:	690b      	ldr	r3, [r1, #16]
 8009d42:	b963      	cbnz	r3, 8009d5e <_svfiprintf_r+0x32>
 8009d44:	2140      	movs	r1, #64	; 0x40
 8009d46:	f000 fb0b 	bl	800a360 <_malloc_r>
 8009d4a:	6028      	str	r0, [r5, #0]
 8009d4c:	6128      	str	r0, [r5, #16]
 8009d4e:	b920      	cbnz	r0, 8009d5a <_svfiprintf_r+0x2e>
 8009d50:	230c      	movs	r3, #12
 8009d52:	603b      	str	r3, [r7, #0]
 8009d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d58:	e0d1      	b.n	8009efe <_svfiprintf_r+0x1d2>
 8009d5a:	2340      	movs	r3, #64	; 0x40
 8009d5c:	616b      	str	r3, [r5, #20]
 8009d5e:	2300      	movs	r3, #0
 8009d60:	9309      	str	r3, [sp, #36]	; 0x24
 8009d62:	2320      	movs	r3, #32
 8009d64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d68:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d6c:	2330      	movs	r3, #48	; 0x30
 8009d6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f18 <_svfiprintf_r+0x1ec>
 8009d72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d76:	f04f 0901 	mov.w	r9, #1
 8009d7a:	4623      	mov	r3, r4
 8009d7c:	469a      	mov	sl, r3
 8009d7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d82:	b10a      	cbz	r2, 8009d88 <_svfiprintf_r+0x5c>
 8009d84:	2a25      	cmp	r2, #37	; 0x25
 8009d86:	d1f9      	bne.n	8009d7c <_svfiprintf_r+0x50>
 8009d88:	ebba 0b04 	subs.w	fp, sl, r4
 8009d8c:	d00b      	beq.n	8009da6 <_svfiprintf_r+0x7a>
 8009d8e:	465b      	mov	r3, fp
 8009d90:	4622      	mov	r2, r4
 8009d92:	4629      	mov	r1, r5
 8009d94:	4638      	mov	r0, r7
 8009d96:	f7ff ff6d 	bl	8009c74 <__ssputs_r>
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	f000 80aa 	beq.w	8009ef4 <_svfiprintf_r+0x1c8>
 8009da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009da2:	445a      	add	r2, fp
 8009da4:	9209      	str	r2, [sp, #36]	; 0x24
 8009da6:	f89a 3000 	ldrb.w	r3, [sl]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f000 80a2 	beq.w	8009ef4 <_svfiprintf_r+0x1c8>
 8009db0:	2300      	movs	r3, #0
 8009db2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009db6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dba:	f10a 0a01 	add.w	sl, sl, #1
 8009dbe:	9304      	str	r3, [sp, #16]
 8009dc0:	9307      	str	r3, [sp, #28]
 8009dc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dc6:	931a      	str	r3, [sp, #104]	; 0x68
 8009dc8:	4654      	mov	r4, sl
 8009dca:	2205      	movs	r2, #5
 8009dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dd0:	4851      	ldr	r0, [pc, #324]	; (8009f18 <_svfiprintf_r+0x1ec>)
 8009dd2:	f7f6 fa8d 	bl	80002f0 <memchr>
 8009dd6:	9a04      	ldr	r2, [sp, #16]
 8009dd8:	b9d8      	cbnz	r0, 8009e12 <_svfiprintf_r+0xe6>
 8009dda:	06d0      	lsls	r0, r2, #27
 8009ddc:	bf44      	itt	mi
 8009dde:	2320      	movmi	r3, #32
 8009de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009de4:	0711      	lsls	r1, r2, #28
 8009de6:	bf44      	itt	mi
 8009de8:	232b      	movmi	r3, #43	; 0x2b
 8009dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dee:	f89a 3000 	ldrb.w	r3, [sl]
 8009df2:	2b2a      	cmp	r3, #42	; 0x2a
 8009df4:	d015      	beq.n	8009e22 <_svfiprintf_r+0xf6>
 8009df6:	9a07      	ldr	r2, [sp, #28]
 8009df8:	4654      	mov	r4, sl
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	f04f 0c0a 	mov.w	ip, #10
 8009e00:	4621      	mov	r1, r4
 8009e02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e06:	3b30      	subs	r3, #48	; 0x30
 8009e08:	2b09      	cmp	r3, #9
 8009e0a:	d94e      	bls.n	8009eaa <_svfiprintf_r+0x17e>
 8009e0c:	b1b0      	cbz	r0, 8009e3c <_svfiprintf_r+0x110>
 8009e0e:	9207      	str	r2, [sp, #28]
 8009e10:	e014      	b.n	8009e3c <_svfiprintf_r+0x110>
 8009e12:	eba0 0308 	sub.w	r3, r0, r8
 8009e16:	fa09 f303 	lsl.w	r3, r9, r3
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	9304      	str	r3, [sp, #16]
 8009e1e:	46a2      	mov	sl, r4
 8009e20:	e7d2      	b.n	8009dc8 <_svfiprintf_r+0x9c>
 8009e22:	9b03      	ldr	r3, [sp, #12]
 8009e24:	1d19      	adds	r1, r3, #4
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	9103      	str	r1, [sp, #12]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	bfbb      	ittet	lt
 8009e2e:	425b      	neglt	r3, r3
 8009e30:	f042 0202 	orrlt.w	r2, r2, #2
 8009e34:	9307      	strge	r3, [sp, #28]
 8009e36:	9307      	strlt	r3, [sp, #28]
 8009e38:	bfb8      	it	lt
 8009e3a:	9204      	strlt	r2, [sp, #16]
 8009e3c:	7823      	ldrb	r3, [r4, #0]
 8009e3e:	2b2e      	cmp	r3, #46	; 0x2e
 8009e40:	d10c      	bne.n	8009e5c <_svfiprintf_r+0x130>
 8009e42:	7863      	ldrb	r3, [r4, #1]
 8009e44:	2b2a      	cmp	r3, #42	; 0x2a
 8009e46:	d135      	bne.n	8009eb4 <_svfiprintf_r+0x188>
 8009e48:	9b03      	ldr	r3, [sp, #12]
 8009e4a:	1d1a      	adds	r2, r3, #4
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	9203      	str	r2, [sp, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	bfb8      	it	lt
 8009e54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e58:	3402      	adds	r4, #2
 8009e5a:	9305      	str	r3, [sp, #20]
 8009e5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f28 <_svfiprintf_r+0x1fc>
 8009e60:	7821      	ldrb	r1, [r4, #0]
 8009e62:	2203      	movs	r2, #3
 8009e64:	4650      	mov	r0, sl
 8009e66:	f7f6 fa43 	bl	80002f0 <memchr>
 8009e6a:	b140      	cbz	r0, 8009e7e <_svfiprintf_r+0x152>
 8009e6c:	2340      	movs	r3, #64	; 0x40
 8009e6e:	eba0 000a 	sub.w	r0, r0, sl
 8009e72:	fa03 f000 	lsl.w	r0, r3, r0
 8009e76:	9b04      	ldr	r3, [sp, #16]
 8009e78:	4303      	orrs	r3, r0
 8009e7a:	3401      	adds	r4, #1
 8009e7c:	9304      	str	r3, [sp, #16]
 8009e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e82:	4826      	ldr	r0, [pc, #152]	; (8009f1c <_svfiprintf_r+0x1f0>)
 8009e84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e88:	2206      	movs	r2, #6
 8009e8a:	f7f6 fa31 	bl	80002f0 <memchr>
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	d038      	beq.n	8009f04 <_svfiprintf_r+0x1d8>
 8009e92:	4b23      	ldr	r3, [pc, #140]	; (8009f20 <_svfiprintf_r+0x1f4>)
 8009e94:	bb1b      	cbnz	r3, 8009ede <_svfiprintf_r+0x1b2>
 8009e96:	9b03      	ldr	r3, [sp, #12]
 8009e98:	3307      	adds	r3, #7
 8009e9a:	f023 0307 	bic.w	r3, r3, #7
 8009e9e:	3308      	adds	r3, #8
 8009ea0:	9303      	str	r3, [sp, #12]
 8009ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea4:	4433      	add	r3, r6
 8009ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ea8:	e767      	b.n	8009d7a <_svfiprintf_r+0x4e>
 8009eaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eae:	460c      	mov	r4, r1
 8009eb0:	2001      	movs	r0, #1
 8009eb2:	e7a5      	b.n	8009e00 <_svfiprintf_r+0xd4>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	3401      	adds	r4, #1
 8009eb8:	9305      	str	r3, [sp, #20]
 8009eba:	4619      	mov	r1, r3
 8009ebc:	f04f 0c0a 	mov.w	ip, #10
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ec6:	3a30      	subs	r2, #48	; 0x30
 8009ec8:	2a09      	cmp	r2, #9
 8009eca:	d903      	bls.n	8009ed4 <_svfiprintf_r+0x1a8>
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d0c5      	beq.n	8009e5c <_svfiprintf_r+0x130>
 8009ed0:	9105      	str	r1, [sp, #20]
 8009ed2:	e7c3      	b.n	8009e5c <_svfiprintf_r+0x130>
 8009ed4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ed8:	4604      	mov	r4, r0
 8009eda:	2301      	movs	r3, #1
 8009edc:	e7f0      	b.n	8009ec0 <_svfiprintf_r+0x194>
 8009ede:	ab03      	add	r3, sp, #12
 8009ee0:	9300      	str	r3, [sp, #0]
 8009ee2:	462a      	mov	r2, r5
 8009ee4:	4b0f      	ldr	r3, [pc, #60]	; (8009f24 <_svfiprintf_r+0x1f8>)
 8009ee6:	a904      	add	r1, sp, #16
 8009ee8:	4638      	mov	r0, r7
 8009eea:	f3af 8000 	nop.w
 8009eee:	1c42      	adds	r2, r0, #1
 8009ef0:	4606      	mov	r6, r0
 8009ef2:	d1d6      	bne.n	8009ea2 <_svfiprintf_r+0x176>
 8009ef4:	89ab      	ldrh	r3, [r5, #12]
 8009ef6:	065b      	lsls	r3, r3, #25
 8009ef8:	f53f af2c 	bmi.w	8009d54 <_svfiprintf_r+0x28>
 8009efc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009efe:	b01d      	add	sp, #116	; 0x74
 8009f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f04:	ab03      	add	r3, sp, #12
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	462a      	mov	r2, r5
 8009f0a:	4b06      	ldr	r3, [pc, #24]	; (8009f24 <_svfiprintf_r+0x1f8>)
 8009f0c:	a904      	add	r1, sp, #16
 8009f0e:	4638      	mov	r0, r7
 8009f10:	f000 f87a 	bl	800a008 <_printf_i>
 8009f14:	e7eb      	b.n	8009eee <_svfiprintf_r+0x1c2>
 8009f16:	bf00      	nop
 8009f18:	0800a5ec 	.word	0x0800a5ec
 8009f1c:	0800a5f6 	.word	0x0800a5f6
 8009f20:	00000000 	.word	0x00000000
 8009f24:	08009c75 	.word	0x08009c75
 8009f28:	0800a5f2 	.word	0x0800a5f2

08009f2c <_printf_common>:
 8009f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f30:	4616      	mov	r6, r2
 8009f32:	4699      	mov	r9, r3
 8009f34:	688a      	ldr	r2, [r1, #8]
 8009f36:	690b      	ldr	r3, [r1, #16]
 8009f38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	bfb8      	it	lt
 8009f40:	4613      	movlt	r3, r2
 8009f42:	6033      	str	r3, [r6, #0]
 8009f44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f48:	4607      	mov	r7, r0
 8009f4a:	460c      	mov	r4, r1
 8009f4c:	b10a      	cbz	r2, 8009f52 <_printf_common+0x26>
 8009f4e:	3301      	adds	r3, #1
 8009f50:	6033      	str	r3, [r6, #0]
 8009f52:	6823      	ldr	r3, [r4, #0]
 8009f54:	0699      	lsls	r1, r3, #26
 8009f56:	bf42      	ittt	mi
 8009f58:	6833      	ldrmi	r3, [r6, #0]
 8009f5a:	3302      	addmi	r3, #2
 8009f5c:	6033      	strmi	r3, [r6, #0]
 8009f5e:	6825      	ldr	r5, [r4, #0]
 8009f60:	f015 0506 	ands.w	r5, r5, #6
 8009f64:	d106      	bne.n	8009f74 <_printf_common+0x48>
 8009f66:	f104 0a19 	add.w	sl, r4, #25
 8009f6a:	68e3      	ldr	r3, [r4, #12]
 8009f6c:	6832      	ldr	r2, [r6, #0]
 8009f6e:	1a9b      	subs	r3, r3, r2
 8009f70:	42ab      	cmp	r3, r5
 8009f72:	dc26      	bgt.n	8009fc2 <_printf_common+0x96>
 8009f74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f78:	1e13      	subs	r3, r2, #0
 8009f7a:	6822      	ldr	r2, [r4, #0]
 8009f7c:	bf18      	it	ne
 8009f7e:	2301      	movne	r3, #1
 8009f80:	0692      	lsls	r2, r2, #26
 8009f82:	d42b      	bmi.n	8009fdc <_printf_common+0xb0>
 8009f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f88:	4649      	mov	r1, r9
 8009f8a:	4638      	mov	r0, r7
 8009f8c:	47c0      	blx	r8
 8009f8e:	3001      	adds	r0, #1
 8009f90:	d01e      	beq.n	8009fd0 <_printf_common+0xa4>
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	68e5      	ldr	r5, [r4, #12]
 8009f96:	6832      	ldr	r2, [r6, #0]
 8009f98:	f003 0306 	and.w	r3, r3, #6
 8009f9c:	2b04      	cmp	r3, #4
 8009f9e:	bf08      	it	eq
 8009fa0:	1aad      	subeq	r5, r5, r2
 8009fa2:	68a3      	ldr	r3, [r4, #8]
 8009fa4:	6922      	ldr	r2, [r4, #16]
 8009fa6:	bf0c      	ite	eq
 8009fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fac:	2500      	movne	r5, #0
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	bfc4      	itt	gt
 8009fb2:	1a9b      	subgt	r3, r3, r2
 8009fb4:	18ed      	addgt	r5, r5, r3
 8009fb6:	2600      	movs	r6, #0
 8009fb8:	341a      	adds	r4, #26
 8009fba:	42b5      	cmp	r5, r6
 8009fbc:	d11a      	bne.n	8009ff4 <_printf_common+0xc8>
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	e008      	b.n	8009fd4 <_printf_common+0xa8>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	4652      	mov	r2, sl
 8009fc6:	4649      	mov	r1, r9
 8009fc8:	4638      	mov	r0, r7
 8009fca:	47c0      	blx	r8
 8009fcc:	3001      	adds	r0, #1
 8009fce:	d103      	bne.n	8009fd8 <_printf_common+0xac>
 8009fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd8:	3501      	adds	r5, #1
 8009fda:	e7c6      	b.n	8009f6a <_printf_common+0x3e>
 8009fdc:	18e1      	adds	r1, r4, r3
 8009fde:	1c5a      	adds	r2, r3, #1
 8009fe0:	2030      	movs	r0, #48	; 0x30
 8009fe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fe6:	4422      	add	r2, r4
 8009fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ff0:	3302      	adds	r3, #2
 8009ff2:	e7c7      	b.n	8009f84 <_printf_common+0x58>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	4622      	mov	r2, r4
 8009ff8:	4649      	mov	r1, r9
 8009ffa:	4638      	mov	r0, r7
 8009ffc:	47c0      	blx	r8
 8009ffe:	3001      	adds	r0, #1
 800a000:	d0e6      	beq.n	8009fd0 <_printf_common+0xa4>
 800a002:	3601      	adds	r6, #1
 800a004:	e7d9      	b.n	8009fba <_printf_common+0x8e>
	...

0800a008 <_printf_i>:
 800a008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a00c:	7e0f      	ldrb	r7, [r1, #24]
 800a00e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a010:	2f78      	cmp	r7, #120	; 0x78
 800a012:	4691      	mov	r9, r2
 800a014:	4680      	mov	r8, r0
 800a016:	460c      	mov	r4, r1
 800a018:	469a      	mov	sl, r3
 800a01a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a01e:	d807      	bhi.n	800a030 <_printf_i+0x28>
 800a020:	2f62      	cmp	r7, #98	; 0x62
 800a022:	d80a      	bhi.n	800a03a <_printf_i+0x32>
 800a024:	2f00      	cmp	r7, #0
 800a026:	f000 80d8 	beq.w	800a1da <_printf_i+0x1d2>
 800a02a:	2f58      	cmp	r7, #88	; 0x58
 800a02c:	f000 80a3 	beq.w	800a176 <_printf_i+0x16e>
 800a030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a038:	e03a      	b.n	800a0b0 <_printf_i+0xa8>
 800a03a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a03e:	2b15      	cmp	r3, #21
 800a040:	d8f6      	bhi.n	800a030 <_printf_i+0x28>
 800a042:	a101      	add	r1, pc, #4	; (adr r1, 800a048 <_printf_i+0x40>)
 800a044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a048:	0800a0a1 	.word	0x0800a0a1
 800a04c:	0800a0b5 	.word	0x0800a0b5
 800a050:	0800a031 	.word	0x0800a031
 800a054:	0800a031 	.word	0x0800a031
 800a058:	0800a031 	.word	0x0800a031
 800a05c:	0800a031 	.word	0x0800a031
 800a060:	0800a0b5 	.word	0x0800a0b5
 800a064:	0800a031 	.word	0x0800a031
 800a068:	0800a031 	.word	0x0800a031
 800a06c:	0800a031 	.word	0x0800a031
 800a070:	0800a031 	.word	0x0800a031
 800a074:	0800a1c1 	.word	0x0800a1c1
 800a078:	0800a0e5 	.word	0x0800a0e5
 800a07c:	0800a1a3 	.word	0x0800a1a3
 800a080:	0800a031 	.word	0x0800a031
 800a084:	0800a031 	.word	0x0800a031
 800a088:	0800a1e3 	.word	0x0800a1e3
 800a08c:	0800a031 	.word	0x0800a031
 800a090:	0800a0e5 	.word	0x0800a0e5
 800a094:	0800a031 	.word	0x0800a031
 800a098:	0800a031 	.word	0x0800a031
 800a09c:	0800a1ab 	.word	0x0800a1ab
 800a0a0:	682b      	ldr	r3, [r5, #0]
 800a0a2:	1d1a      	adds	r2, r3, #4
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	602a      	str	r2, [r5, #0]
 800a0a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e0a3      	b.n	800a1fc <_printf_i+0x1f4>
 800a0b4:	6820      	ldr	r0, [r4, #0]
 800a0b6:	6829      	ldr	r1, [r5, #0]
 800a0b8:	0606      	lsls	r6, r0, #24
 800a0ba:	f101 0304 	add.w	r3, r1, #4
 800a0be:	d50a      	bpl.n	800a0d6 <_printf_i+0xce>
 800a0c0:	680e      	ldr	r6, [r1, #0]
 800a0c2:	602b      	str	r3, [r5, #0]
 800a0c4:	2e00      	cmp	r6, #0
 800a0c6:	da03      	bge.n	800a0d0 <_printf_i+0xc8>
 800a0c8:	232d      	movs	r3, #45	; 0x2d
 800a0ca:	4276      	negs	r6, r6
 800a0cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0d0:	485e      	ldr	r0, [pc, #376]	; (800a24c <_printf_i+0x244>)
 800a0d2:	230a      	movs	r3, #10
 800a0d4:	e019      	b.n	800a10a <_printf_i+0x102>
 800a0d6:	680e      	ldr	r6, [r1, #0]
 800a0d8:	602b      	str	r3, [r5, #0]
 800a0da:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0de:	bf18      	it	ne
 800a0e0:	b236      	sxthne	r6, r6
 800a0e2:	e7ef      	b.n	800a0c4 <_printf_i+0xbc>
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	6820      	ldr	r0, [r4, #0]
 800a0e8:	1d19      	adds	r1, r3, #4
 800a0ea:	6029      	str	r1, [r5, #0]
 800a0ec:	0601      	lsls	r1, r0, #24
 800a0ee:	d501      	bpl.n	800a0f4 <_printf_i+0xec>
 800a0f0:	681e      	ldr	r6, [r3, #0]
 800a0f2:	e002      	b.n	800a0fa <_printf_i+0xf2>
 800a0f4:	0646      	lsls	r6, r0, #25
 800a0f6:	d5fb      	bpl.n	800a0f0 <_printf_i+0xe8>
 800a0f8:	881e      	ldrh	r6, [r3, #0]
 800a0fa:	4854      	ldr	r0, [pc, #336]	; (800a24c <_printf_i+0x244>)
 800a0fc:	2f6f      	cmp	r7, #111	; 0x6f
 800a0fe:	bf0c      	ite	eq
 800a100:	2308      	moveq	r3, #8
 800a102:	230a      	movne	r3, #10
 800a104:	2100      	movs	r1, #0
 800a106:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a10a:	6865      	ldr	r5, [r4, #4]
 800a10c:	60a5      	str	r5, [r4, #8]
 800a10e:	2d00      	cmp	r5, #0
 800a110:	bfa2      	ittt	ge
 800a112:	6821      	ldrge	r1, [r4, #0]
 800a114:	f021 0104 	bicge.w	r1, r1, #4
 800a118:	6021      	strge	r1, [r4, #0]
 800a11a:	b90e      	cbnz	r6, 800a120 <_printf_i+0x118>
 800a11c:	2d00      	cmp	r5, #0
 800a11e:	d04d      	beq.n	800a1bc <_printf_i+0x1b4>
 800a120:	4615      	mov	r5, r2
 800a122:	fbb6 f1f3 	udiv	r1, r6, r3
 800a126:	fb03 6711 	mls	r7, r3, r1, r6
 800a12a:	5dc7      	ldrb	r7, [r0, r7]
 800a12c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a130:	4637      	mov	r7, r6
 800a132:	42bb      	cmp	r3, r7
 800a134:	460e      	mov	r6, r1
 800a136:	d9f4      	bls.n	800a122 <_printf_i+0x11a>
 800a138:	2b08      	cmp	r3, #8
 800a13a:	d10b      	bne.n	800a154 <_printf_i+0x14c>
 800a13c:	6823      	ldr	r3, [r4, #0]
 800a13e:	07de      	lsls	r6, r3, #31
 800a140:	d508      	bpl.n	800a154 <_printf_i+0x14c>
 800a142:	6923      	ldr	r3, [r4, #16]
 800a144:	6861      	ldr	r1, [r4, #4]
 800a146:	4299      	cmp	r1, r3
 800a148:	bfde      	ittt	le
 800a14a:	2330      	movle	r3, #48	; 0x30
 800a14c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a150:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a154:	1b52      	subs	r2, r2, r5
 800a156:	6122      	str	r2, [r4, #16]
 800a158:	f8cd a000 	str.w	sl, [sp]
 800a15c:	464b      	mov	r3, r9
 800a15e:	aa03      	add	r2, sp, #12
 800a160:	4621      	mov	r1, r4
 800a162:	4640      	mov	r0, r8
 800a164:	f7ff fee2 	bl	8009f2c <_printf_common>
 800a168:	3001      	adds	r0, #1
 800a16a:	d14c      	bne.n	800a206 <_printf_i+0x1fe>
 800a16c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a170:	b004      	add	sp, #16
 800a172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a176:	4835      	ldr	r0, [pc, #212]	; (800a24c <_printf_i+0x244>)
 800a178:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a17c:	6829      	ldr	r1, [r5, #0]
 800a17e:	6823      	ldr	r3, [r4, #0]
 800a180:	f851 6b04 	ldr.w	r6, [r1], #4
 800a184:	6029      	str	r1, [r5, #0]
 800a186:	061d      	lsls	r5, r3, #24
 800a188:	d514      	bpl.n	800a1b4 <_printf_i+0x1ac>
 800a18a:	07df      	lsls	r7, r3, #31
 800a18c:	bf44      	itt	mi
 800a18e:	f043 0320 	orrmi.w	r3, r3, #32
 800a192:	6023      	strmi	r3, [r4, #0]
 800a194:	b91e      	cbnz	r6, 800a19e <_printf_i+0x196>
 800a196:	6823      	ldr	r3, [r4, #0]
 800a198:	f023 0320 	bic.w	r3, r3, #32
 800a19c:	6023      	str	r3, [r4, #0]
 800a19e:	2310      	movs	r3, #16
 800a1a0:	e7b0      	b.n	800a104 <_printf_i+0xfc>
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	f043 0320 	orr.w	r3, r3, #32
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	2378      	movs	r3, #120	; 0x78
 800a1ac:	4828      	ldr	r0, [pc, #160]	; (800a250 <_printf_i+0x248>)
 800a1ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1b2:	e7e3      	b.n	800a17c <_printf_i+0x174>
 800a1b4:	0659      	lsls	r1, r3, #25
 800a1b6:	bf48      	it	mi
 800a1b8:	b2b6      	uxthmi	r6, r6
 800a1ba:	e7e6      	b.n	800a18a <_printf_i+0x182>
 800a1bc:	4615      	mov	r5, r2
 800a1be:	e7bb      	b.n	800a138 <_printf_i+0x130>
 800a1c0:	682b      	ldr	r3, [r5, #0]
 800a1c2:	6826      	ldr	r6, [r4, #0]
 800a1c4:	6961      	ldr	r1, [r4, #20]
 800a1c6:	1d18      	adds	r0, r3, #4
 800a1c8:	6028      	str	r0, [r5, #0]
 800a1ca:	0635      	lsls	r5, r6, #24
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	d501      	bpl.n	800a1d4 <_printf_i+0x1cc>
 800a1d0:	6019      	str	r1, [r3, #0]
 800a1d2:	e002      	b.n	800a1da <_printf_i+0x1d2>
 800a1d4:	0670      	lsls	r0, r6, #25
 800a1d6:	d5fb      	bpl.n	800a1d0 <_printf_i+0x1c8>
 800a1d8:	8019      	strh	r1, [r3, #0]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	6123      	str	r3, [r4, #16]
 800a1de:	4615      	mov	r5, r2
 800a1e0:	e7ba      	b.n	800a158 <_printf_i+0x150>
 800a1e2:	682b      	ldr	r3, [r5, #0]
 800a1e4:	1d1a      	adds	r2, r3, #4
 800a1e6:	602a      	str	r2, [r5, #0]
 800a1e8:	681d      	ldr	r5, [r3, #0]
 800a1ea:	6862      	ldr	r2, [r4, #4]
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	f7f6 f87e 	bl	80002f0 <memchr>
 800a1f4:	b108      	cbz	r0, 800a1fa <_printf_i+0x1f2>
 800a1f6:	1b40      	subs	r0, r0, r5
 800a1f8:	6060      	str	r0, [r4, #4]
 800a1fa:	6863      	ldr	r3, [r4, #4]
 800a1fc:	6123      	str	r3, [r4, #16]
 800a1fe:	2300      	movs	r3, #0
 800a200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a204:	e7a8      	b.n	800a158 <_printf_i+0x150>
 800a206:	6923      	ldr	r3, [r4, #16]
 800a208:	462a      	mov	r2, r5
 800a20a:	4649      	mov	r1, r9
 800a20c:	4640      	mov	r0, r8
 800a20e:	47d0      	blx	sl
 800a210:	3001      	adds	r0, #1
 800a212:	d0ab      	beq.n	800a16c <_printf_i+0x164>
 800a214:	6823      	ldr	r3, [r4, #0]
 800a216:	079b      	lsls	r3, r3, #30
 800a218:	d413      	bmi.n	800a242 <_printf_i+0x23a>
 800a21a:	68e0      	ldr	r0, [r4, #12]
 800a21c:	9b03      	ldr	r3, [sp, #12]
 800a21e:	4298      	cmp	r0, r3
 800a220:	bfb8      	it	lt
 800a222:	4618      	movlt	r0, r3
 800a224:	e7a4      	b.n	800a170 <_printf_i+0x168>
 800a226:	2301      	movs	r3, #1
 800a228:	4632      	mov	r2, r6
 800a22a:	4649      	mov	r1, r9
 800a22c:	4640      	mov	r0, r8
 800a22e:	47d0      	blx	sl
 800a230:	3001      	adds	r0, #1
 800a232:	d09b      	beq.n	800a16c <_printf_i+0x164>
 800a234:	3501      	adds	r5, #1
 800a236:	68e3      	ldr	r3, [r4, #12]
 800a238:	9903      	ldr	r1, [sp, #12]
 800a23a:	1a5b      	subs	r3, r3, r1
 800a23c:	42ab      	cmp	r3, r5
 800a23e:	dcf2      	bgt.n	800a226 <_printf_i+0x21e>
 800a240:	e7eb      	b.n	800a21a <_printf_i+0x212>
 800a242:	2500      	movs	r5, #0
 800a244:	f104 0619 	add.w	r6, r4, #25
 800a248:	e7f5      	b.n	800a236 <_printf_i+0x22e>
 800a24a:	bf00      	nop
 800a24c:	0800a5fd 	.word	0x0800a5fd
 800a250:	0800a60e 	.word	0x0800a60e

0800a254 <memmove>:
 800a254:	4288      	cmp	r0, r1
 800a256:	b510      	push	{r4, lr}
 800a258:	eb01 0402 	add.w	r4, r1, r2
 800a25c:	d902      	bls.n	800a264 <memmove+0x10>
 800a25e:	4284      	cmp	r4, r0
 800a260:	4623      	mov	r3, r4
 800a262:	d807      	bhi.n	800a274 <memmove+0x20>
 800a264:	1e43      	subs	r3, r0, #1
 800a266:	42a1      	cmp	r1, r4
 800a268:	d008      	beq.n	800a27c <memmove+0x28>
 800a26a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a26e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a272:	e7f8      	b.n	800a266 <memmove+0x12>
 800a274:	4402      	add	r2, r0
 800a276:	4601      	mov	r1, r0
 800a278:	428a      	cmp	r2, r1
 800a27a:	d100      	bne.n	800a27e <memmove+0x2a>
 800a27c:	bd10      	pop	{r4, pc}
 800a27e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a282:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a286:	e7f7      	b.n	800a278 <memmove+0x24>

0800a288 <_free_r>:
 800a288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a28a:	2900      	cmp	r1, #0
 800a28c:	d044      	beq.n	800a318 <_free_r+0x90>
 800a28e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a292:	9001      	str	r0, [sp, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	f1a1 0404 	sub.w	r4, r1, #4
 800a29a:	bfb8      	it	lt
 800a29c:	18e4      	addlt	r4, r4, r3
 800a29e:	f000 f913 	bl	800a4c8 <__malloc_lock>
 800a2a2:	4a1e      	ldr	r2, [pc, #120]	; (800a31c <_free_r+0x94>)
 800a2a4:	9801      	ldr	r0, [sp, #4]
 800a2a6:	6813      	ldr	r3, [r2, #0]
 800a2a8:	b933      	cbnz	r3, 800a2b8 <_free_r+0x30>
 800a2aa:	6063      	str	r3, [r4, #4]
 800a2ac:	6014      	str	r4, [r2, #0]
 800a2ae:	b003      	add	sp, #12
 800a2b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2b4:	f000 b90e 	b.w	800a4d4 <__malloc_unlock>
 800a2b8:	42a3      	cmp	r3, r4
 800a2ba:	d908      	bls.n	800a2ce <_free_r+0x46>
 800a2bc:	6825      	ldr	r5, [r4, #0]
 800a2be:	1961      	adds	r1, r4, r5
 800a2c0:	428b      	cmp	r3, r1
 800a2c2:	bf01      	itttt	eq
 800a2c4:	6819      	ldreq	r1, [r3, #0]
 800a2c6:	685b      	ldreq	r3, [r3, #4]
 800a2c8:	1949      	addeq	r1, r1, r5
 800a2ca:	6021      	streq	r1, [r4, #0]
 800a2cc:	e7ed      	b.n	800a2aa <_free_r+0x22>
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	b10b      	cbz	r3, 800a2d8 <_free_r+0x50>
 800a2d4:	42a3      	cmp	r3, r4
 800a2d6:	d9fa      	bls.n	800a2ce <_free_r+0x46>
 800a2d8:	6811      	ldr	r1, [r2, #0]
 800a2da:	1855      	adds	r5, r2, r1
 800a2dc:	42a5      	cmp	r5, r4
 800a2de:	d10b      	bne.n	800a2f8 <_free_r+0x70>
 800a2e0:	6824      	ldr	r4, [r4, #0]
 800a2e2:	4421      	add	r1, r4
 800a2e4:	1854      	adds	r4, r2, r1
 800a2e6:	42a3      	cmp	r3, r4
 800a2e8:	6011      	str	r1, [r2, #0]
 800a2ea:	d1e0      	bne.n	800a2ae <_free_r+0x26>
 800a2ec:	681c      	ldr	r4, [r3, #0]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	6053      	str	r3, [r2, #4]
 800a2f2:	4421      	add	r1, r4
 800a2f4:	6011      	str	r1, [r2, #0]
 800a2f6:	e7da      	b.n	800a2ae <_free_r+0x26>
 800a2f8:	d902      	bls.n	800a300 <_free_r+0x78>
 800a2fa:	230c      	movs	r3, #12
 800a2fc:	6003      	str	r3, [r0, #0]
 800a2fe:	e7d6      	b.n	800a2ae <_free_r+0x26>
 800a300:	6825      	ldr	r5, [r4, #0]
 800a302:	1961      	adds	r1, r4, r5
 800a304:	428b      	cmp	r3, r1
 800a306:	bf04      	itt	eq
 800a308:	6819      	ldreq	r1, [r3, #0]
 800a30a:	685b      	ldreq	r3, [r3, #4]
 800a30c:	6063      	str	r3, [r4, #4]
 800a30e:	bf04      	itt	eq
 800a310:	1949      	addeq	r1, r1, r5
 800a312:	6021      	streq	r1, [r4, #0]
 800a314:	6054      	str	r4, [r2, #4]
 800a316:	e7ca      	b.n	800a2ae <_free_r+0x26>
 800a318:	b003      	add	sp, #12
 800a31a:	bd30      	pop	{r4, r5, pc}
 800a31c:	24000690 	.word	0x24000690

0800a320 <sbrk_aligned>:
 800a320:	b570      	push	{r4, r5, r6, lr}
 800a322:	4e0e      	ldr	r6, [pc, #56]	; (800a35c <sbrk_aligned+0x3c>)
 800a324:	460c      	mov	r4, r1
 800a326:	6831      	ldr	r1, [r6, #0]
 800a328:	4605      	mov	r5, r0
 800a32a:	b911      	cbnz	r1, 800a332 <sbrk_aligned+0x12>
 800a32c:	f000 f8bc 	bl	800a4a8 <_sbrk_r>
 800a330:	6030      	str	r0, [r6, #0]
 800a332:	4621      	mov	r1, r4
 800a334:	4628      	mov	r0, r5
 800a336:	f000 f8b7 	bl	800a4a8 <_sbrk_r>
 800a33a:	1c43      	adds	r3, r0, #1
 800a33c:	d00a      	beq.n	800a354 <sbrk_aligned+0x34>
 800a33e:	1cc4      	adds	r4, r0, #3
 800a340:	f024 0403 	bic.w	r4, r4, #3
 800a344:	42a0      	cmp	r0, r4
 800a346:	d007      	beq.n	800a358 <sbrk_aligned+0x38>
 800a348:	1a21      	subs	r1, r4, r0
 800a34a:	4628      	mov	r0, r5
 800a34c:	f000 f8ac 	bl	800a4a8 <_sbrk_r>
 800a350:	3001      	adds	r0, #1
 800a352:	d101      	bne.n	800a358 <sbrk_aligned+0x38>
 800a354:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a358:	4620      	mov	r0, r4
 800a35a:	bd70      	pop	{r4, r5, r6, pc}
 800a35c:	24000694 	.word	0x24000694

0800a360 <_malloc_r>:
 800a360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a364:	1ccd      	adds	r5, r1, #3
 800a366:	f025 0503 	bic.w	r5, r5, #3
 800a36a:	3508      	adds	r5, #8
 800a36c:	2d0c      	cmp	r5, #12
 800a36e:	bf38      	it	cc
 800a370:	250c      	movcc	r5, #12
 800a372:	2d00      	cmp	r5, #0
 800a374:	4607      	mov	r7, r0
 800a376:	db01      	blt.n	800a37c <_malloc_r+0x1c>
 800a378:	42a9      	cmp	r1, r5
 800a37a:	d905      	bls.n	800a388 <_malloc_r+0x28>
 800a37c:	230c      	movs	r3, #12
 800a37e:	603b      	str	r3, [r7, #0]
 800a380:	2600      	movs	r6, #0
 800a382:	4630      	mov	r0, r6
 800a384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a388:	4e2e      	ldr	r6, [pc, #184]	; (800a444 <_malloc_r+0xe4>)
 800a38a:	f000 f89d 	bl	800a4c8 <__malloc_lock>
 800a38e:	6833      	ldr	r3, [r6, #0]
 800a390:	461c      	mov	r4, r3
 800a392:	bb34      	cbnz	r4, 800a3e2 <_malloc_r+0x82>
 800a394:	4629      	mov	r1, r5
 800a396:	4638      	mov	r0, r7
 800a398:	f7ff ffc2 	bl	800a320 <sbrk_aligned>
 800a39c:	1c43      	adds	r3, r0, #1
 800a39e:	4604      	mov	r4, r0
 800a3a0:	d14d      	bne.n	800a43e <_malloc_r+0xde>
 800a3a2:	6834      	ldr	r4, [r6, #0]
 800a3a4:	4626      	mov	r6, r4
 800a3a6:	2e00      	cmp	r6, #0
 800a3a8:	d140      	bne.n	800a42c <_malloc_r+0xcc>
 800a3aa:	6823      	ldr	r3, [r4, #0]
 800a3ac:	4631      	mov	r1, r6
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	eb04 0803 	add.w	r8, r4, r3
 800a3b4:	f000 f878 	bl	800a4a8 <_sbrk_r>
 800a3b8:	4580      	cmp	r8, r0
 800a3ba:	d13a      	bne.n	800a432 <_malloc_r+0xd2>
 800a3bc:	6821      	ldr	r1, [r4, #0]
 800a3be:	3503      	adds	r5, #3
 800a3c0:	1a6d      	subs	r5, r5, r1
 800a3c2:	f025 0503 	bic.w	r5, r5, #3
 800a3c6:	3508      	adds	r5, #8
 800a3c8:	2d0c      	cmp	r5, #12
 800a3ca:	bf38      	it	cc
 800a3cc:	250c      	movcc	r5, #12
 800a3ce:	4629      	mov	r1, r5
 800a3d0:	4638      	mov	r0, r7
 800a3d2:	f7ff ffa5 	bl	800a320 <sbrk_aligned>
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	d02b      	beq.n	800a432 <_malloc_r+0xd2>
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	442b      	add	r3, r5
 800a3de:	6023      	str	r3, [r4, #0]
 800a3e0:	e00e      	b.n	800a400 <_malloc_r+0xa0>
 800a3e2:	6822      	ldr	r2, [r4, #0]
 800a3e4:	1b52      	subs	r2, r2, r5
 800a3e6:	d41e      	bmi.n	800a426 <_malloc_r+0xc6>
 800a3e8:	2a0b      	cmp	r2, #11
 800a3ea:	d916      	bls.n	800a41a <_malloc_r+0xba>
 800a3ec:	1961      	adds	r1, r4, r5
 800a3ee:	42a3      	cmp	r3, r4
 800a3f0:	6025      	str	r5, [r4, #0]
 800a3f2:	bf18      	it	ne
 800a3f4:	6059      	strne	r1, [r3, #4]
 800a3f6:	6863      	ldr	r3, [r4, #4]
 800a3f8:	bf08      	it	eq
 800a3fa:	6031      	streq	r1, [r6, #0]
 800a3fc:	5162      	str	r2, [r4, r5]
 800a3fe:	604b      	str	r3, [r1, #4]
 800a400:	4638      	mov	r0, r7
 800a402:	f104 060b 	add.w	r6, r4, #11
 800a406:	f000 f865 	bl	800a4d4 <__malloc_unlock>
 800a40a:	f026 0607 	bic.w	r6, r6, #7
 800a40e:	1d23      	adds	r3, r4, #4
 800a410:	1af2      	subs	r2, r6, r3
 800a412:	d0b6      	beq.n	800a382 <_malloc_r+0x22>
 800a414:	1b9b      	subs	r3, r3, r6
 800a416:	50a3      	str	r3, [r4, r2]
 800a418:	e7b3      	b.n	800a382 <_malloc_r+0x22>
 800a41a:	6862      	ldr	r2, [r4, #4]
 800a41c:	42a3      	cmp	r3, r4
 800a41e:	bf0c      	ite	eq
 800a420:	6032      	streq	r2, [r6, #0]
 800a422:	605a      	strne	r2, [r3, #4]
 800a424:	e7ec      	b.n	800a400 <_malloc_r+0xa0>
 800a426:	4623      	mov	r3, r4
 800a428:	6864      	ldr	r4, [r4, #4]
 800a42a:	e7b2      	b.n	800a392 <_malloc_r+0x32>
 800a42c:	4634      	mov	r4, r6
 800a42e:	6876      	ldr	r6, [r6, #4]
 800a430:	e7b9      	b.n	800a3a6 <_malloc_r+0x46>
 800a432:	230c      	movs	r3, #12
 800a434:	603b      	str	r3, [r7, #0]
 800a436:	4638      	mov	r0, r7
 800a438:	f000 f84c 	bl	800a4d4 <__malloc_unlock>
 800a43c:	e7a1      	b.n	800a382 <_malloc_r+0x22>
 800a43e:	6025      	str	r5, [r4, #0]
 800a440:	e7de      	b.n	800a400 <_malloc_r+0xa0>
 800a442:	bf00      	nop
 800a444:	24000690 	.word	0x24000690

0800a448 <_realloc_r>:
 800a448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a44c:	4680      	mov	r8, r0
 800a44e:	4614      	mov	r4, r2
 800a450:	460e      	mov	r6, r1
 800a452:	b921      	cbnz	r1, 800a45e <_realloc_r+0x16>
 800a454:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a458:	4611      	mov	r1, r2
 800a45a:	f7ff bf81 	b.w	800a360 <_malloc_r>
 800a45e:	b92a      	cbnz	r2, 800a46c <_realloc_r+0x24>
 800a460:	f7ff ff12 	bl	800a288 <_free_r>
 800a464:	4625      	mov	r5, r4
 800a466:	4628      	mov	r0, r5
 800a468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a46c:	f000 f838 	bl	800a4e0 <_malloc_usable_size_r>
 800a470:	4284      	cmp	r4, r0
 800a472:	4607      	mov	r7, r0
 800a474:	d802      	bhi.n	800a47c <_realloc_r+0x34>
 800a476:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a47a:	d812      	bhi.n	800a4a2 <_realloc_r+0x5a>
 800a47c:	4621      	mov	r1, r4
 800a47e:	4640      	mov	r0, r8
 800a480:	f7ff ff6e 	bl	800a360 <_malloc_r>
 800a484:	4605      	mov	r5, r0
 800a486:	2800      	cmp	r0, #0
 800a488:	d0ed      	beq.n	800a466 <_realloc_r+0x1e>
 800a48a:	42bc      	cmp	r4, r7
 800a48c:	4622      	mov	r2, r4
 800a48e:	4631      	mov	r1, r6
 800a490:	bf28      	it	cs
 800a492:	463a      	movcs	r2, r7
 800a494:	f7ff fba4 	bl	8009be0 <memcpy>
 800a498:	4631      	mov	r1, r6
 800a49a:	4640      	mov	r0, r8
 800a49c:	f7ff fef4 	bl	800a288 <_free_r>
 800a4a0:	e7e1      	b.n	800a466 <_realloc_r+0x1e>
 800a4a2:	4635      	mov	r5, r6
 800a4a4:	e7df      	b.n	800a466 <_realloc_r+0x1e>
	...

0800a4a8 <_sbrk_r>:
 800a4a8:	b538      	push	{r3, r4, r5, lr}
 800a4aa:	4d06      	ldr	r5, [pc, #24]	; (800a4c4 <_sbrk_r+0x1c>)
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	4608      	mov	r0, r1
 800a4b2:	602b      	str	r3, [r5, #0]
 800a4b4:	f7f6 fec0 	bl	8001238 <_sbrk>
 800a4b8:	1c43      	adds	r3, r0, #1
 800a4ba:	d102      	bne.n	800a4c2 <_sbrk_r+0x1a>
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	b103      	cbz	r3, 800a4c2 <_sbrk_r+0x1a>
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	bd38      	pop	{r3, r4, r5, pc}
 800a4c4:	24000698 	.word	0x24000698

0800a4c8 <__malloc_lock>:
 800a4c8:	4801      	ldr	r0, [pc, #4]	; (800a4d0 <__malloc_lock+0x8>)
 800a4ca:	f000 b811 	b.w	800a4f0 <__retarget_lock_acquire_recursive>
 800a4ce:	bf00      	nop
 800a4d0:	2400069c 	.word	0x2400069c

0800a4d4 <__malloc_unlock>:
 800a4d4:	4801      	ldr	r0, [pc, #4]	; (800a4dc <__malloc_unlock+0x8>)
 800a4d6:	f000 b80c 	b.w	800a4f2 <__retarget_lock_release_recursive>
 800a4da:	bf00      	nop
 800a4dc:	2400069c 	.word	0x2400069c

0800a4e0 <_malloc_usable_size_r>:
 800a4e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4e4:	1f18      	subs	r0, r3, #4
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	bfbc      	itt	lt
 800a4ea:	580b      	ldrlt	r3, [r1, r0]
 800a4ec:	18c0      	addlt	r0, r0, r3
 800a4ee:	4770      	bx	lr

0800a4f0 <__retarget_lock_acquire_recursive>:
 800a4f0:	4770      	bx	lr

0800a4f2 <__retarget_lock_release_recursive>:
 800a4f2:	4770      	bx	lr

0800a4f4 <_init>:
 800a4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f6:	bf00      	nop
 800a4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4fa:	bc08      	pop	{r3}
 800a4fc:	469e      	mov	lr, r3
 800a4fe:	4770      	bx	lr

0800a500 <_fini>:
 800a500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a502:	bf00      	nop
 800a504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a506:	bc08      	pop	{r3}
 800a508:	469e      	mov	lr, r3
 800a50a:	4770      	bx	lr
