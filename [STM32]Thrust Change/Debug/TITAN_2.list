
TITAN_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fdc  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003288  08003288  00013288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003298  08003298  00013298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800329c  0800329c  0001329c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080032a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  24000010  080032b0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400007c  080032b0  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c8e0  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000183b  00000000  00000000  0002c91e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000bd0  00000000  00000000  0002e160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000b18  00000000  00000000  0002ed30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002ed73  00000000  00000000  0002f848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000d054  00000000  00000000  0005e5bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00136488  00000000  00000000  0006b60f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001a1a97  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003174  00000000  00000000  001a1ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08003270 	.word	0x08003270

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08003270 	.word	0x08003270

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f2:	f000 fbdd 	bl	8000ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f6:	f000 f849 	bl	800038c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fa:	f000 f947 	bl	800058c <MX_GPIO_Init>
  MX_USB_OTG_HS_USB_Init();
 80002fe:	f000 f93d 	bl	800057c <MX_USB_OTG_HS_USB_Init>
  MX_TIM2_Init();
 8000302:	f000 f8b9 	bl	8000478 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  int valeur;
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000306:	2100      	movs	r1, #0
 8000308:	481f      	ldr	r0, [pc, #124]	; (8000388 <main+0x9c>)
 800030a:	f001 ffa9 	bl	8002260 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800030e:	2104      	movs	r1, #4
 8000310:	481d      	ldr	r0, [pc, #116]	; (8000388 <main+0x9c>)
 8000312:	f001 ffa5 	bl	8002260 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 50);
 8000316:	4b1c      	ldr	r3, [pc, #112]	; (8000388 <main+0x9c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2232      	movs	r2, #50	; 0x32
 800031c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 50);
 800031e:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <main+0x9c>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2232      	movs	r2, #50	; 0x32
 8000324:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_Delay(1000);
 8000326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800032a:	f000 fc53 	bl	8000bd4 <HAL_Delay>
  	valeur=100;
 800032e:	2364      	movs	r3, #100	; 0x64
 8000330:	607b      	str	r3, [r7, #4]
  	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100);
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <main+0x9c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2264      	movs	r2, #100	; 0x64
 8000338:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 100);
 800033a:	4b13      	ldr	r3, [pc, #76]	; (8000388 <main+0x9c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2264      	movs	r2, #100	; 0x64
 8000340:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1000);
 8000342:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000346:	f000 fc45 	bl	8000bd4 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 	 valeur=50;
 800034a:	2332      	movs	r3, #50	; 0x32
 800034c:	607b      	str	r3, [r7, #4]
  	int coeff=1;
 800034e:	2301      	movs	r3, #1
 8000350:	603b      	str	r3, [r7, #0]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (valeur<101 && valeur>49){
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2b64      	cmp	r3, #100	; 0x64
 8000356:	dc0e      	bgt.n	8000376 <main+0x8a>
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b31      	cmp	r3, #49	; 0x31
 800035c:	dd0b      	ble.n	8000376 <main+0x8a>


			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, valeur);
 800035e:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <main+0x9c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, valeur);
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <main+0x9c>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	639a      	str	r2, [r3, #56]	; 0x38

			HAL_Delay(100);
 800036e:	2064      	movs	r0, #100	; 0x64
 8000370:	f000 fc30 	bl	8000bd4 <HAL_Delay>
 8000374:	e002      	b.n	800037c <main+0x90>
		}
		else{
			coeff=coeff*-1;
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	425b      	negs	r3, r3
 800037a:	603b      	str	r3, [r7, #0]
		}
		valeur = valeur + coeff;
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	4413      	add	r3, r2
 8000382:	607b      	str	r3, [r7, #4]
		if (valeur<101 && valeur>49){
 8000384:	e7e5      	b.n	8000352 <main+0x66>
 8000386:	bf00      	nop
 8000388:	2400002c 	.word	0x2400002c

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b09c      	sub	sp, #112	; 0x70
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000396:	224c      	movs	r2, #76	; 0x4c
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f002 ff60 	bl	8003260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2220      	movs	r2, #32
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 ff5a 	bl	8003260 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80003ac:	4b30      	ldr	r3, [pc, #192]	; (8000470 <SystemClock_Config+0xe4>)
 80003ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80003b6:	2004      	movs	r0, #4
 80003b8:	f000 fede 	bl	8001178 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003bc:	2300      	movs	r3, #0
 80003be:	603b      	str	r3, [r7, #0]
 80003c0:	4b2c      	ldr	r3, [pc, #176]	; (8000474 <SystemClock_Config+0xe8>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a2b      	ldr	r2, [pc, #172]	; (8000474 <SystemClock_Config+0xe8>)
 80003c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b29      	ldr	r3, [pc, #164]	; (8000474 <SystemClock_Config+0xe8>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003d4:	603b      	str	r3, [r7, #0]
 80003d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003d8:	bf00      	nop
 80003da:	4b26      	ldr	r3, [pc, #152]	; (8000474 <SystemClock_Config+0xe8>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003e6:	d1f8      	bne.n	80003da <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80003e8:	2321      	movs	r3, #33	; 0x21
 80003ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003f2:	2301      	movs	r3, #1
 80003f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f6:	2302      	movs	r3, #2
 80003f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003fa:	2302      	movs	r3, #2
 80003fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003fe:	2301      	movs	r3, #1
 8000400:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000402:	2318      	movs	r3, #24
 8000404:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000406:	2302      	movs	r3, #2
 8000408:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800040a:	2304      	movs	r3, #4
 800040c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800040e:	2302      	movs	r3, #2
 8000410:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000412:	230c      	movs	r3, #12
 8000414:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000416:	2300      	movs	r3, #0
 8000418:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000422:	4618      	mov	r0, r3
 8000424:	f000 ff02 	bl	800122c <HAL_RCC_OscConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800042e:	f000 f9d9 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000432:	233f      	movs	r3, #63	; 0x3f
 8000434:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000436:	2303      	movs	r3, #3
 8000438:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2102      	movs	r1, #2
 8000456:	4618      	mov	r0, r3
 8000458:	f001 fb1a 	bl	8001a90 <HAL_RCC_ClockConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000462:	f000 f9bf 	bl	80007e4 <Error_Handler>
  }
}
 8000466:	bf00      	nop
 8000468:	3770      	adds	r7, #112	; 0x70
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	58024400 	.word	0x58024400
 8000474:	58024800 	.word	0x58024800

08000478 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08e      	sub	sp, #56	; 0x38
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800047e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800048c:	f107 031c 	add.w	r3, r7, #28
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000498:	463b      	mov	r3, r7
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]
 80004a6:	615a      	str	r2, [r3, #20]
 80004a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004aa:	4b33      	ldr	r3, [pc, #204]	; (8000578 <MX_TIM2_Init+0x100>)
 80004ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1919;
 80004b2:	4b31      	ldr	r3, [pc, #196]	; (8000578 <MX_TIM2_Init+0x100>)
 80004b4:	f240 727f 	movw	r2, #1919	; 0x77f
 80004b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ba:	4b2f      	ldr	r3, [pc, #188]	; (8000578 <MX_TIM2_Init+0x100>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80004c0:	4b2d      	ldr	r3, [pc, #180]	; (8000578 <MX_TIM2_Init+0x100>)
 80004c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c8:	4b2b      	ldr	r3, [pc, #172]	; (8000578 <MX_TIM2_Init+0x100>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ce:	4b2a      	ldr	r3, [pc, #168]	; (8000578 <MX_TIM2_Init+0x100>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004d4:	4828      	ldr	r0, [pc, #160]	; (8000578 <MX_TIM2_Init+0x100>)
 80004d6:	f001 fe0b 	bl	80020f0 <HAL_TIM_Base_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80004e0:	f000 f980 	bl	80007e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ee:	4619      	mov	r1, r3
 80004f0:	4821      	ldr	r0, [pc, #132]	; (8000578 <MX_TIM2_Init+0x100>)
 80004f2:	f002 f8d7 	bl	80026a4 <HAL_TIM_ConfigClockSource>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80004fc:	f000 f972 	bl	80007e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000500:	481d      	ldr	r0, [pc, #116]	; (8000578 <MX_TIM2_Init+0x100>)
 8000502:	f001 fe4c 	bl	800219e <HAL_TIM_PWM_Init>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800050c:	f000 f96a 	bl	80007e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000510:	2300      	movs	r3, #0
 8000512:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000514:	2300      	movs	r3, #0
 8000516:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000518:	f107 031c 	add.w	r3, r7, #28
 800051c:	4619      	mov	r1, r3
 800051e:	4816      	ldr	r0, [pc, #88]	; (8000578 <MX_TIM2_Init+0x100>)
 8000520:	f002 fdec 	bl	80030fc <HAL_TIMEx_MasterConfigSynchronization>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800052a:	f000 f95b 	bl	80007e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800052e:	2360      	movs	r3, #96	; 0x60
 8000530:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800053e:	463b      	mov	r3, r7
 8000540:	2200      	movs	r2, #0
 8000542:	4619      	mov	r1, r3
 8000544:	480c      	ldr	r0, [pc, #48]	; (8000578 <MX_TIM2_Init+0x100>)
 8000546:	f001 ff99 	bl	800247c <HAL_TIM_PWM_ConfigChannel>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000550:	f000 f948 	bl	80007e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000554:	463b      	mov	r3, r7
 8000556:	2204      	movs	r2, #4
 8000558:	4619      	mov	r1, r3
 800055a:	4807      	ldr	r0, [pc, #28]	; (8000578 <MX_TIM2_Init+0x100>)
 800055c:	f001 ff8e 	bl	800247c <HAL_TIM_PWM_ConfigChannel>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000566:	f000 f93d 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800056a:	4803      	ldr	r0, [pc, #12]	; (8000578 <MX_TIM2_Init+0x100>)
 800056c:	f000 f97a 	bl	8000864 <HAL_TIM_MspPostInit>

}
 8000570:	bf00      	nop
 8000572:	3738      	adds	r7, #56	; 0x38
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	2400002c 	.word	0x2400002c

0800057c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
	...

0800058c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08e      	sub	sp, #56	; 0x38
 8000590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	4b88      	ldr	r3, [pc, #544]	; (80007c4 <MX_GPIO_Init+0x238>)
 80005a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005a8:	4a86      	ldr	r2, [pc, #536]	; (80007c4 <MX_GPIO_Init+0x238>)
 80005aa:	f043 0304 	orr.w	r3, r3, #4
 80005ae:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80005b2:	4b84      	ldr	r3, [pc, #528]	; (80007c4 <MX_GPIO_Init+0x238>)
 80005b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005b8:	f003 0304 	and.w	r3, r3, #4
 80005bc:	623b      	str	r3, [r7, #32]
 80005be:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c0:	4b80      	ldr	r3, [pc, #512]	; (80007c4 <MX_GPIO_Init+0x238>)
 80005c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005c6:	4a7f      	ldr	r2, [pc, #508]	; (80007c4 <MX_GPIO_Init+0x238>)
 80005c8:	f043 0320 	orr.w	r3, r3, #32
 80005cc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80005d0:	4b7c      	ldr	r3, [pc, #496]	; (80007c4 <MX_GPIO_Init+0x238>)
 80005d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005d6:	f003 0320 	and.w	r3, r3, #32
 80005da:	61fb      	str	r3, [r7, #28]
 80005dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005de:	4b79      	ldr	r3, [pc, #484]	; (80007c4 <MX_GPIO_Init+0x238>)
 80005e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005e4:	4a77      	ldr	r2, [pc, #476]	; (80007c4 <MX_GPIO_Init+0x238>)
 80005e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80005ee:	4b75      	ldr	r3, [pc, #468]	; (80007c4 <MX_GPIO_Init+0x238>)
 80005f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f8:	61bb      	str	r3, [r7, #24]
 80005fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fc:	4b71      	ldr	r3, [pc, #452]	; (80007c4 <MX_GPIO_Init+0x238>)
 80005fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000602:	4a70      	ldr	r2, [pc, #448]	; (80007c4 <MX_GPIO_Init+0x238>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800060c:	4b6d      	ldr	r3, [pc, #436]	; (80007c4 <MX_GPIO_Init+0x238>)
 800060e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	4b6a      	ldr	r3, [pc, #424]	; (80007c4 <MX_GPIO_Init+0x238>)
 800061c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000620:	4a68      	ldr	r2, [pc, #416]	; (80007c4 <MX_GPIO_Init+0x238>)
 8000622:	f043 0302 	orr.w	r3, r3, #2
 8000626:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800062a:	4b66      	ldr	r3, [pc, #408]	; (80007c4 <MX_GPIO_Init+0x238>)
 800062c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000630:	f003 0302 	and.w	r3, r3, #2
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000638:	4b62      	ldr	r3, [pc, #392]	; (80007c4 <MX_GPIO_Init+0x238>)
 800063a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800063e:	4a61      	ldr	r2, [pc, #388]	; (80007c4 <MX_GPIO_Init+0x238>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000648:	4b5e      	ldr	r3, [pc, #376]	; (80007c4 <MX_GPIO_Init+0x238>)
 800064a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800064e:	f003 0308 	and.w	r3, r3, #8
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000656:	4b5b      	ldr	r3, [pc, #364]	; (80007c4 <MX_GPIO_Init+0x238>)
 8000658:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800065c:	4a59      	ldr	r2, [pc, #356]	; (80007c4 <MX_GPIO_Init+0x238>)
 800065e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000662:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000666:	4b57      	ldr	r3, [pc, #348]	; (80007c4 <MX_GPIO_Init+0x238>)
 8000668:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800066c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000674:	4b53      	ldr	r3, [pc, #332]	; (80007c4 <MX_GPIO_Init+0x238>)
 8000676:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800067a:	4a52      	ldr	r2, [pc, #328]	; (80007c4 <MX_GPIO_Init+0x238>)
 800067c:	f043 0310 	orr.w	r3, r3, #16
 8000680:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000684:	4b4f      	ldr	r3, [pc, #316]	; (80007c4 <MX_GPIO_Init+0x238>)
 8000686:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800068a:	f003 0310 	and.w	r3, r3, #16
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000698:	484b      	ldr	r0, [pc, #300]	; (80007c8 <MX_GPIO_Init+0x23c>)
 800069a:	f000 fd53 	bl	8001144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f244 0101 	movw	r1, #16385	; 0x4001
 80006a4:	4849      	ldr	r0, [pc, #292]	; (80007cc <MX_GPIO_Init+0x240>)
 80006a6:	f000 fd4d 	bl	8001144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2102      	movs	r1, #2
 80006ae:	4848      	ldr	r0, [pc, #288]	; (80007d0 <MX_GPIO_Init+0x244>)
 80006b0:	f000 fd48 	bl	8001144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c6:	4619      	mov	r1, r3
 80006c8:	4842      	ldr	r0, [pc, #264]	; (80007d4 <MX_GPIO_Init+0x248>)
 80006ca:	f000 fb8b 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80006ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e4:	4619      	mov	r1, r3
 80006e6:	4838      	ldr	r0, [pc, #224]	; (80007c8 <MX_GPIO_Init+0x23c>)
 80006e8:	f000 fb7c 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80006ec:	f244 0301 	movw	r3, #16385	; 0x4001
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000702:	4619      	mov	r1, r3
 8000704:	4831      	ldr	r0, [pc, #196]	; (80007cc <MX_GPIO_Init+0x240>)
 8000706:	f000 fb6d 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800070a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	2302      	movs	r3, #2
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2300      	movs	r3, #0
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800071c:	2307      	movs	r3, #7
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000724:	4619      	mov	r1, r3
 8000726:	482c      	ldr	r0, [pc, #176]	; (80007d8 <MX_GPIO_Init+0x24c>)
 8000728:	f000 fb5c 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000730:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073e:	4619      	mov	r1, r3
 8000740:	4826      	ldr	r0, [pc, #152]	; (80007dc <MX_GPIO_Init+0x250>)
 8000742:	f000 fb4f 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000746:	f44f 7300 	mov.w	r3, #512	; 0x200
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074c:	2300      	movs	r3, #0
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000758:	4619      	mov	r1, r3
 800075a:	4821      	ldr	r0, [pc, #132]	; (80007e0 <MX_GPIO_Init+0x254>)
 800075c:	f000 fb42 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000772:	230a      	movs	r3, #10
 8000774:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077a:	4619      	mov	r1, r3
 800077c:	4818      	ldr	r0, [pc, #96]	; (80007e0 <MX_GPIO_Init+0x254>)
 800077e:	f000 fb31 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000782:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000798:	4619      	mov	r1, r3
 800079a:	4811      	ldr	r0, [pc, #68]	; (80007e0 <MX_GPIO_Init+0x254>)
 800079c:	f000 fb22 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a0:	2302      	movs	r3, #2
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b4:	4619      	mov	r1, r3
 80007b6:	4806      	ldr	r0, [pc, #24]	; (80007d0 <MX_GPIO_Init+0x244>)
 80007b8:	f000 fb14 	bl	8000de4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007bc:	bf00      	nop
 80007be:	3738      	adds	r7, #56	; 0x38
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	58024400 	.word	0x58024400
 80007c8:	58021400 	.word	0x58021400
 80007cc:	58020400 	.word	0x58020400
 80007d0:	58021000 	.word	0x58021000
 80007d4:	58020800 	.word	0x58020800
 80007d8:	58020c00 	.word	0x58020c00
 80007dc:	58021800 	.word	0x58021800
 80007e0:	58020000 	.word	0x58020000

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <HAL_MspInit+0x30>)
 80007f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80007fc:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_MspInit+0x30>)
 80007fe:	f043 0302 	orr.w	r3, r3, #2
 8000802:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_MspInit+0x30>)
 8000808:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800080c:	f003 0302 	and.w	r3, r3, #2
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	58024400 	.word	0x58024400

08000824 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000834:	d10e      	bne.n	8000854 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <HAL_TIM_Base_MspInit+0x3c>)
 8000838:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800083c:	4a08      	ldr	r2, [pc, #32]	; (8000860 <HAL_TIM_Base_MspInit+0x3c>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_TIM_Base_MspInit+0x3c>)
 8000848:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	58024400 	.word	0x58024400

08000864 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000884:	d13d      	bne.n	8000902 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b21      	ldr	r3, [pc, #132]	; (800090c <HAL_TIM_MspPostInit+0xa8>)
 8000888:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088c:	4a1f      	ldr	r2, [pc, #124]	; (800090c <HAL_TIM_MspPostInit+0xa8>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000896:	4b1d      	ldr	r3, [pc, #116]	; (800090c <HAL_TIM_MspPostInit+0xa8>)
 8000898:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a4:	4b19      	ldr	r3, [pc, #100]	; (800090c <HAL_TIM_MspPostInit+0xa8>)
 80008a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008aa:	4a18      	ldr	r2, [pc, #96]	; (800090c <HAL_TIM_MspPostInit+0xa8>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_TIM_MspPostInit+0xa8>)
 80008b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008c2:	2320      	movs	r3, #32
 80008c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008d2:	2301      	movs	r3, #1
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	480c      	ldr	r0, [pc, #48]	; (8000910 <HAL_TIM_MspPostInit+0xac>)
 80008de:	f000 fa81 	bl	8000de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008e2:	2308      	movs	r3, #8
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008f2:	2301      	movs	r3, #1
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <HAL_TIM_MspPostInit+0xb0>)
 80008fe:	f000 fa71 	bl	8000de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	; 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	58024400 	.word	0x58024400
 8000910:	58020000 	.word	0x58020000
 8000914:	58020400 	.word	0x58020400

08000918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800091c:	e7fe      	b.n	800091c <NMI_Handler+0x4>

0800091e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <HardFault_Handler+0x4>

08000924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <MemManage_Handler+0x4>

0800092a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <BusFault_Handler+0x4>

08000930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <UsageFault_Handler+0x4>

08000936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000964:	f000 f916 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}

0800096c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000970:	4b32      	ldr	r3, [pc, #200]	; (8000a3c <SystemInit+0xd0>)
 8000972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000976:	4a31      	ldr	r2, [pc, #196]	; (8000a3c <SystemInit+0xd0>)
 8000978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800097c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000980:	4b2f      	ldr	r3, [pc, #188]	; (8000a40 <SystemInit+0xd4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f003 030f 	and.w	r3, r3, #15
 8000988:	2b02      	cmp	r3, #2
 800098a:	d807      	bhi.n	800099c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800098c:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <SystemInit+0xd4>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f023 030f 	bic.w	r3, r3, #15
 8000994:	4a2a      	ldr	r2, [pc, #168]	; (8000a40 <SystemInit+0xd4>)
 8000996:	f043 0303 	orr.w	r3, r3, #3
 800099a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800099c:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <SystemInit+0xd8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a28      	ldr	r2, [pc, #160]	; (8000a44 <SystemInit+0xd8>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009a8:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <SystemInit+0xd8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009ae:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <SystemInit+0xd8>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	4924      	ldr	r1, [pc, #144]	; (8000a44 <SystemInit+0xd8>)
 80009b4:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <SystemInit+0xdc>)
 80009b6:	4013      	ands	r3, r2
 80009b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009ba:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <SystemInit+0xd4>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f003 030c 	and.w	r3, r3, #12
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d007      	beq.n	80009d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <SystemInit+0xd4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f023 030f 	bic.w	r3, r3, #15
 80009ce:	4a1c      	ldr	r2, [pc, #112]	; (8000a40 <SystemInit+0xd4>)
 80009d0:	f043 0303 	orr.w	r3, r3, #3
 80009d4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80009d6:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <SystemInit+0xd8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80009dc:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <SystemInit+0xd8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <SystemInit+0xd8>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <SystemInit+0xd8>)
 80009ea:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <SystemInit+0xe0>)
 80009ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <SystemInit+0xd8>)
 80009f0:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <SystemInit+0xe4>)
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <SystemInit+0xd8>)
 80009f6:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <SystemInit+0xe8>)
 80009f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <SystemInit+0xd8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a00:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <SystemInit+0xd8>)
 8000a02:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <SystemInit+0xe8>)
 8000a04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <SystemInit+0xd8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a0c:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <SystemInit+0xd8>)
 8000a0e:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <SystemInit+0xe8>)
 8000a10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <SystemInit+0xd8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <SystemInit+0xd8>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a09      	ldr	r2, [pc, #36]	; (8000a44 <SystemInit+0xd8>)
 8000a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <SystemInit+0xd8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <SystemInit+0xec>)
 8000a2c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a30:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00
 8000a40:	52002000 	.word	0x52002000
 8000a44:	58024400 	.word	0x58024400
 8000a48:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a4c:	02020200 	.word	0x02020200
 8000a50:	01ff0000 	.word	0x01ff0000
 8000a54:	01010280 	.word	0x01010280
 8000a58:	52004000 	.word	0x52004000

08000a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a60:	f7ff ff84 	bl	800096c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a66:	490d      	ldr	r1, [pc, #52]	; (8000a9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a7c:	4c0a      	ldr	r4, [pc, #40]	; (8000aa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f002 fbc5 	bl	8003218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8e:	f7ff fc2d 	bl	80002ec <main>
  bx  lr
 8000a92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a94:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000a98:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a9c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000aa0:	080032a0 	.word	0x080032a0
  ldr r2, =_sbss
 8000aa4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000aa8:	2400007c 	.word	0x2400007c

08000aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC_IRQHandler>
	...

08000ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f000 f962 	bl	8000d80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000abc:	f001 f99e 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_Init+0x68>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	0a1b      	lsrs	r3, r3, #8
 8000ac8:	f003 030f 	and.w	r3, r3, #15
 8000acc:	4913      	ldr	r1, [pc, #76]	; (8000b1c <HAL_Init+0x6c>)
 8000ace:	5ccb      	ldrb	r3, [r1, r3]
 8000ad0:	f003 031f 	and.w	r3, r3, #31
 8000ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_Init+0x68>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_Init+0x6c>)
 8000ae4:	5cd3      	ldrb	r3, [r2, r3]
 8000ae6:	f003 031f 	and.w	r3, r3, #31
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	fa22 f303 	lsr.w	r3, r2, r3
 8000af0:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <HAL_Init+0x70>)
 8000af2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000af4:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <HAL_Init+0x74>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000afa:	2000      	movs	r0, #0
 8000afc:	f000 f814 	bl	8000b28 <HAL_InitTick>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e002      	b.n	8000b10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b0a:	f7ff fe71 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b0e:	2300      	movs	r3, #0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	58024400 	.word	0x58024400
 8000b1c:	08003288 	.word	0x08003288
 8000b20:	24000004 	.word	0x24000004
 8000b24:	24000000 	.word	0x24000000

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_InitTick+0x60>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d101      	bne.n	8000b3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e021      	b.n	8000b80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <HAL_InitTick+0x64>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_InitTick+0x60>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f939 	bl	8000dca <HAL_SYSTICK_Config>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00e      	b.n	8000b80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	d80a      	bhi.n	8000b7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b70:	f000 f911 	bl	8000d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b74:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <HAL_InitTick+0x68>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e000      	b.n	8000b80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	2400000c 	.word	0x2400000c
 8000b8c:	24000000 	.word	0x24000000
 8000b90:	24000008 	.word	0x24000008

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	2400000c 	.word	0x2400000c
 8000bb8:	24000078 	.word	0x24000078

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	24000078 	.word	0x24000078

08000bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bdc:	f7ff ffee 	bl	8000bbc <HAL_GetTick>
 8000be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bec:	d005      	beq.n	8000bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_Delay+0x44>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bfa:	bf00      	nop
 8000bfc:	f7ff ffde 	bl	8000bbc <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d8f7      	bhi.n	8000bfc <HAL_Delay+0x28>
  {
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2400000c 	.word	0x2400000c

08000c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <__NVIC_SetPriorityGrouping+0x40>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <__NVIC_SetPriorityGrouping+0x40>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00
 8000c60:	05fa0000 	.word	0x05fa0000

08000c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <__NVIC_GetPriorityGrouping+0x18>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	f003 0307 	and.w	r3, r3, #7
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	6039      	str	r1, [r7, #0]
 8000c8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db0a      	blt.n	8000caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	490c      	ldr	r1, [pc, #48]	; (8000ccc <__NVIC_SetPriority+0x4c>)
 8000c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c9e:	0112      	lsls	r2, r2, #4
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca8:	e00a      	b.n	8000cc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	4908      	ldr	r1, [pc, #32]	; (8000cd0 <__NVIC_SetPriority+0x50>)
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	f003 030f 	and.w	r3, r3, #15
 8000cb6:	3b04      	subs	r3, #4
 8000cb8:	0112      	lsls	r2, r2, #4
 8000cba:	b2d2      	uxtb	r2, r2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	761a      	strb	r2, [r3, #24]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000e100 	.word	0xe000e100
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b089      	sub	sp, #36	; 0x24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f1c3 0307 	rsb	r3, r3, #7
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	bf28      	it	cs
 8000cf2:	2304      	movcs	r3, #4
 8000cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	2b06      	cmp	r3, #6
 8000cfc:	d902      	bls.n	8000d04 <NVIC_EncodePriority+0x30>
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3b03      	subs	r3, #3
 8000d02:	e000      	b.n	8000d06 <NVIC_EncodePriority+0x32>
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43da      	mvns	r2, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	401a      	ands	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa01 f303 	lsl.w	r3, r1, r3
 8000d26:	43d9      	mvns	r1, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	4313      	orrs	r3, r2
         );
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3724      	adds	r7, #36	; 0x24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d4c:	d301      	bcc.n	8000d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e00f      	b.n	8000d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <SysTick_Config+0x40>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5a:	210f      	movs	r1, #15
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d60:	f7ff ff8e 	bl	8000c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <SysTick_Config+0x40>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6a:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <SysTick_Config+0x40>)
 8000d6c:	2207      	movs	r2, #7
 8000d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	e000e010 	.word	0xe000e010

08000d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ff47 	bl	8000c1c <__NVIC_SetPriorityGrouping>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
 8000da2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000da4:	f7ff ff5e 	bl	8000c64 <__NVIC_GetPriorityGrouping>
 8000da8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	f7ff ff90 	bl	8000cd4 <NVIC_EncodePriority>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff5f 	bl	8000c80 <__NVIC_SetPriority>
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffb2 	bl	8000d3c <SysTick_Config>
 8000dd8:	4603      	mov	r3, r0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000df2:	4b89      	ldr	r3, [pc, #548]	; (8001018 <HAL_GPIO_Init+0x234>)
 8000df4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000df6:	e194      	b.n	8001122 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa01 f303 	lsl.w	r3, r1, r3
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 8186 	beq.w	800111c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d005      	beq.n	8000e28 <HAL_GPIO_Init+0x44>
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d130      	bne.n	8000e8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	2203      	movs	r2, #3
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e5e:	2201      	movs	r2, #1
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	091b      	lsrs	r3, r3, #4
 8000e74:	f003 0201 	and.w	r2, r3, #1
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 0303 	and.w	r3, r3, #3
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d017      	beq.n	8000ec6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d123      	bne.n	8000f1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	08da      	lsrs	r2, r3, #3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3208      	adds	r2, #8
 8000eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	220f      	movs	r2, #15
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	691a      	ldr	r2, [r3, #16]
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	08da      	lsrs	r2, r3, #3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3208      	adds	r2, #8
 8000f14:	69b9      	ldr	r1, [r7, #24]
 8000f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	2203      	movs	r2, #3
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0203 	and.w	r2, r3, #3
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 80e0 	beq.w	800111c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5c:	4b2f      	ldr	r3, [pc, #188]	; (800101c <HAL_GPIO_Init+0x238>)
 8000f5e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f62:	4a2e      	ldr	r2, [pc, #184]	; (800101c <HAL_GPIO_Init+0x238>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	; (800101c <HAL_GPIO_Init+0x238>)
 8000f6e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7a:	4a29      	ldr	r2, [pc, #164]	; (8001020 <HAL_GPIO_Init+0x23c>)
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	220f      	movs	r2, #15
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a20      	ldr	r2, [pc, #128]	; (8001024 <HAL_GPIO_Init+0x240>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d052      	beq.n	800104c <HAL_GPIO_Init+0x268>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a1f      	ldr	r2, [pc, #124]	; (8001028 <HAL_GPIO_Init+0x244>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d031      	beq.n	8001012 <HAL_GPIO_Init+0x22e>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a1e      	ldr	r2, [pc, #120]	; (800102c <HAL_GPIO_Init+0x248>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d02b      	beq.n	800100e <HAL_GPIO_Init+0x22a>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a1d      	ldr	r2, [pc, #116]	; (8001030 <HAL_GPIO_Init+0x24c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d025      	beq.n	800100a <HAL_GPIO_Init+0x226>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <HAL_GPIO_Init+0x250>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d01f      	beq.n	8001006 <HAL_GPIO_Init+0x222>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a1b      	ldr	r2, [pc, #108]	; (8001038 <HAL_GPIO_Init+0x254>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d019      	beq.n	8001002 <HAL_GPIO_Init+0x21e>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a1a      	ldr	r2, [pc, #104]	; (800103c <HAL_GPIO_Init+0x258>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d013      	beq.n	8000ffe <HAL_GPIO_Init+0x21a>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a19      	ldr	r2, [pc, #100]	; (8001040 <HAL_GPIO_Init+0x25c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d00d      	beq.n	8000ffa <HAL_GPIO_Init+0x216>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a18      	ldr	r2, [pc, #96]	; (8001044 <HAL_GPIO_Init+0x260>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d007      	beq.n	8000ff6 <HAL_GPIO_Init+0x212>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a17      	ldr	r2, [pc, #92]	; (8001048 <HAL_GPIO_Init+0x264>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_GPIO_Init+0x20e>
 8000fee:	2309      	movs	r3, #9
 8000ff0:	e02d      	b.n	800104e <HAL_GPIO_Init+0x26a>
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	e02b      	b.n	800104e <HAL_GPIO_Init+0x26a>
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	e029      	b.n	800104e <HAL_GPIO_Init+0x26a>
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	e027      	b.n	800104e <HAL_GPIO_Init+0x26a>
 8000ffe:	2306      	movs	r3, #6
 8001000:	e025      	b.n	800104e <HAL_GPIO_Init+0x26a>
 8001002:	2305      	movs	r3, #5
 8001004:	e023      	b.n	800104e <HAL_GPIO_Init+0x26a>
 8001006:	2304      	movs	r3, #4
 8001008:	e021      	b.n	800104e <HAL_GPIO_Init+0x26a>
 800100a:	2303      	movs	r3, #3
 800100c:	e01f      	b.n	800104e <HAL_GPIO_Init+0x26a>
 800100e:	2302      	movs	r3, #2
 8001010:	e01d      	b.n	800104e <HAL_GPIO_Init+0x26a>
 8001012:	2301      	movs	r3, #1
 8001014:	e01b      	b.n	800104e <HAL_GPIO_Init+0x26a>
 8001016:	bf00      	nop
 8001018:	58000080 	.word	0x58000080
 800101c:	58024400 	.word	0x58024400
 8001020:	58000400 	.word	0x58000400
 8001024:	58020000 	.word	0x58020000
 8001028:	58020400 	.word	0x58020400
 800102c:	58020800 	.word	0x58020800
 8001030:	58020c00 	.word	0x58020c00
 8001034:	58021000 	.word	0x58021000
 8001038:	58021400 	.word	0x58021400
 800103c:	58021800 	.word	0x58021800
 8001040:	58021c00 	.word	0x58021c00
 8001044:	58022000 	.word	0x58022000
 8001048:	58022400 	.word	0x58022400
 800104c:	2300      	movs	r3, #0
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	f002 0203 	and.w	r2, r2, #3
 8001054:	0092      	lsls	r2, r2, #2
 8001056:	4093      	lsls	r3, r2
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105e:	4938      	ldr	r1, [pc, #224]	; (8001140 <HAL_GPIO_Init+0x35c>)
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	3302      	adds	r3, #2
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800106c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001092:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800109a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80010c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	3301      	adds	r3, #1
 8001120:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa22 f303 	lsr.w	r3, r2, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	f47f ae63 	bne.w	8000df8 <HAL_GPIO_Init+0x14>
  }
}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	3724      	adds	r7, #36	; 0x24
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	58000400 	.word	0x58000400

08001144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]
 8001150:	4613      	mov	r3, r2
 8001152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001154:	787b      	ldrb	r3, [r7, #1]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001160:	e003      	b.n	800116a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	041a      	lsls	r2, r3, #16
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	619a      	str	r2, [r3, #24]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001180:	4b29      	ldr	r3, [pc, #164]	; (8001228 <HAL_PWREx_ConfigSupply+0xb0>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	2b06      	cmp	r3, #6
 800118a:	d00a      	beq.n	80011a2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800118c:	4b26      	ldr	r3, [pc, #152]	; (8001228 <HAL_PWREx_ConfigSupply+0xb0>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	429a      	cmp	r2, r3
 8001198:	d001      	beq.n	800119e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e040      	b.n	8001220 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	e03e      	b.n	8001220 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <HAL_PWREx_ConfigSupply+0xb0>)
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80011aa:	491f      	ldr	r1, [pc, #124]	; (8001228 <HAL_PWREx_ConfigSupply+0xb0>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80011b2:	f7ff fd03 	bl	8000bbc <HAL_GetTick>
 80011b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011b8:	e009      	b.n	80011ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80011ba:	f7ff fcff 	bl	8000bbc <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011c8:	d901      	bls.n	80011ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e028      	b.n	8001220 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <HAL_PWREx_ConfigSupply+0xb0>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011da:	d1ee      	bne.n	80011ba <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b1e      	cmp	r3, #30
 80011e0:	d008      	beq.n	80011f4 <HAL_PWREx_ConfigSupply+0x7c>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b2e      	cmp	r3, #46	; 0x2e
 80011e6:	d005      	beq.n	80011f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b1d      	cmp	r3, #29
 80011ec:	d002      	beq.n	80011f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b2d      	cmp	r3, #45	; 0x2d
 80011f2:	d114      	bne.n	800121e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80011f4:	f7ff fce2 	bl	8000bbc <HAL_GetTick>
 80011f8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80011fa:	e009      	b.n	8001210 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80011fc:	f7ff fcde 	bl	8000bbc <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800120a:	d901      	bls.n	8001210 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e007      	b.n	8001220 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_PWREx_ConfigSupply+0xb0>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800121c:	d1ee      	bne.n	80011fc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	58024800 	.word	0x58024800

0800122c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	; 0x30
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d102      	bne.n	8001240 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	f000 bc1f 	b.w	8001a7e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 80b3 	beq.w	80013b4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800124e:	4b95      	ldr	r3, [pc, #596]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001258:	4b92      	ldr	r3, [pc, #584]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800125e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001260:	2b10      	cmp	r3, #16
 8001262:	d007      	beq.n	8001274 <HAL_RCC_OscConfig+0x48>
 8001264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001266:	2b18      	cmp	r3, #24
 8001268:	d112      	bne.n	8001290 <HAL_RCC_OscConfig+0x64>
 800126a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d10d      	bne.n	8001290 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	4b8b      	ldr	r3, [pc, #556]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	f000 8098 	beq.w	80013b2 <HAL_RCC_OscConfig+0x186>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	f040 8093 	bne.w	80013b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e3f6      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001298:	d106      	bne.n	80012a8 <HAL_RCC_OscConfig+0x7c>
 800129a:	4b82      	ldr	r3, [pc, #520]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a81      	ldr	r2, [pc, #516]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e058      	b.n	800135a <HAL_RCC_OscConfig+0x12e>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d112      	bne.n	80012d6 <HAL_RCC_OscConfig+0xaa>
 80012b0:	4b7c      	ldr	r3, [pc, #496]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a7b      	ldr	r2, [pc, #492]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 80012b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	4b79      	ldr	r3, [pc, #484]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a78      	ldr	r2, [pc, #480]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 80012c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	4b76      	ldr	r3, [pc, #472]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a75      	ldr	r2, [pc, #468]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 80012ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	e041      	b.n	800135a <HAL_RCC_OscConfig+0x12e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012de:	d112      	bne.n	8001306 <HAL_RCC_OscConfig+0xda>
 80012e0:	4b70      	ldr	r3, [pc, #448]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a6f      	ldr	r2, [pc, #444]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 80012e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b6d      	ldr	r3, [pc, #436]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a6c      	ldr	r2, [pc, #432]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 80012f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b6a      	ldr	r3, [pc, #424]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a69      	ldr	r2, [pc, #420]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 80012fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	e029      	b.n	800135a <HAL_RCC_OscConfig+0x12e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800130e:	d112      	bne.n	8001336 <HAL_RCC_OscConfig+0x10a>
 8001310:	4b64      	ldr	r3, [pc, #400]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a63      	ldr	r2, [pc, #396]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 8001316:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b61      	ldr	r3, [pc, #388]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a60      	ldr	r2, [pc, #384]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 8001322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b5e      	ldr	r3, [pc, #376]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a5d      	ldr	r2, [pc, #372]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 800132e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	e011      	b.n	800135a <HAL_RCC_OscConfig+0x12e>
 8001336:	4b5b      	ldr	r3, [pc, #364]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a5a      	ldr	r2, [pc, #360]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 800133c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b58      	ldr	r3, [pc, #352]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a57      	ldr	r2, [pc, #348]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 8001348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b55      	ldr	r3, [pc, #340]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a54      	ldr	r2, [pc, #336]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 8001354:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001358:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d013      	beq.n	800138a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001362:	f7ff fc2b 	bl	8000bbc <HAL_GetTick>
 8001366:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800136a:	f7ff fc27 	bl	8000bbc <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b64      	cmp	r3, #100	; 0x64
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e380      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800137c:	4b49      	ldr	r3, [pc, #292]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0f0      	beq.n	800136a <HAL_RCC_OscConfig+0x13e>
 8001388:	e014      	b.n	80013b4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138a:	f7ff fc17 	bl	8000bbc <HAL_GetTick>
 800138e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001392:	f7ff fc13 	bl	8000bbc <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b64      	cmp	r3, #100	; 0x64
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e36c      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013a4:	4b3f      	ldr	r3, [pc, #252]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f0      	bne.n	8001392 <HAL_RCC_OscConfig+0x166>
 80013b0:	e000      	b.n	80013b4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 808c 	beq.w	80014da <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c2:	4b38      	ldr	r3, [pc, #224]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013ca:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013cc:	4b35      	ldr	r3, [pc, #212]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d007      	beq.n	80013e8 <HAL_RCC_OscConfig+0x1bc>
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	2b18      	cmp	r3, #24
 80013dc:	d137      	bne.n	800144e <HAL_RCC_OscConfig+0x222>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d132      	bne.n	800144e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013e8:	4b2e      	ldr	r3, [pc, #184]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_OscConfig+0x1d4>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e33e      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f023 0219 	bic.w	r2, r3, #25
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4925      	ldr	r1, [pc, #148]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 800140e:	4313      	orrs	r3, r2
 8001410:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001412:	f7ff fbd3 	bl	8000bbc <HAL_GetTick>
 8001416:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800141a:	f7ff fbcf 	bl	8000bbc <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e328      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0f0      	beq.n	800141a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	061b      	lsls	r3, r3, #24
 8001446:	4917      	ldr	r1, [pc, #92]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800144c:	e045      	b.n	80014da <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d028      	beq.n	80014a8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001456:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 0219 	bic.w	r2, r3, #25
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	4910      	ldr	r1, [pc, #64]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001468:	f7ff fba8 	bl	8000bbc <HAL_GetTick>
 800146c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001470:	f7ff fba4 	bl	8000bbc <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e2fd      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	061b      	lsls	r3, r3, #24
 800149c:	4901      	ldr	r1, [pc, #4]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
 80014a2:	e01a      	b.n	80014da <HAL_RCC_OscConfig+0x2ae>
 80014a4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a8:	4b97      	ldr	r3, [pc, #604]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a96      	ldr	r2, [pc, #600]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 80014ae:	f023 0301 	bic.w	r3, r3, #1
 80014b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7ff fb82 	bl	8000bbc <HAL_GetTick>
 80014b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014bc:	f7ff fb7e 	bl	8000bbc <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e2d7      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014ce:	4b8e      	ldr	r3, [pc, #568]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d06a      	beq.n	80015bc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e6:	4b88      	ldr	r3, [pc, #544]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014f0:	4b85      	ldr	r3, [pc, #532]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 80014f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	2b08      	cmp	r3, #8
 80014fa:	d007      	beq.n	800150c <HAL_RCC_OscConfig+0x2e0>
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	2b18      	cmp	r3, #24
 8001500:	d11b      	bne.n	800153a <HAL_RCC_OscConfig+0x30e>
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b01      	cmp	r3, #1
 800150a:	d116      	bne.n	800153a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800150c:	4b7e      	ldr	r3, [pc, #504]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_RCC_OscConfig+0x2f8>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	2b80      	cmp	r3, #128	; 0x80
 800151e:	d001      	beq.n	8001524 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e2ac      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001524:	4b78      	ldr	r3, [pc, #480]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	061b      	lsls	r3, r3, #24
 8001532:	4975      	ldr	r1, [pc, #468]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 8001534:	4313      	orrs	r3, r2
 8001536:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001538:	e040      	b.n	80015bc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d023      	beq.n	800158a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001542:	4b71      	ldr	r3, [pc, #452]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a70      	ldr	r2, [pc, #448]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 8001548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800154c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154e:	f7ff fb35 	bl	8000bbc <HAL_GetTick>
 8001552:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001556:	f7ff fb31 	bl	8000bbc <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e28a      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001568:	4b67      	ldr	r3, [pc, #412]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001574:	4b64      	ldr	r3, [pc, #400]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	061b      	lsls	r3, r3, #24
 8001582:	4961      	ldr	r1, [pc, #388]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 8001584:	4313      	orrs	r3, r2
 8001586:	60cb      	str	r3, [r1, #12]
 8001588:	e018      	b.n	80015bc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800158a:	4b5f      	ldr	r3, [pc, #380]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a5e      	ldr	r2, [pc, #376]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 8001590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff fb11 	bl	8000bbc <HAL_GetTick>
 800159a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800159e:	f7ff fb0d 	bl	8000bbc <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e266      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015b0:	4b55      	ldr	r3, [pc, #340]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f0      	bne.n	800159e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d036      	beq.n	8001636 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d019      	beq.n	8001604 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d0:	4b4d      	ldr	r3, [pc, #308]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 80015d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015d4:	4a4c      	ldr	r2, [pc, #304]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015dc:	f7ff faee 	bl	8000bbc <HAL_GetTick>
 80015e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e4:	f7ff faea 	bl	8000bbc <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e243      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015f6:	4b44      	ldr	r3, [pc, #272]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 80015f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x3b8>
 8001602:	e018      	b.n	8001636 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001604:	4b40      	ldr	r3, [pc, #256]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 8001606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001608:	4a3f      	ldr	r2, [pc, #252]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 800160a:	f023 0301 	bic.w	r3, r3, #1
 800160e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001610:	f7ff fad4 	bl	8000bbc <HAL_GetTick>
 8001614:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001618:	f7ff fad0 	bl	8000bbc <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e229      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800162a:	4b37      	ldr	r3, [pc, #220]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 800162c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0320 	and.w	r3, r3, #32
 800163e:	2b00      	cmp	r3, #0
 8001640:	d036      	beq.n	80016b0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d019      	beq.n	800167e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800164a:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a2e      	ldr	r2, [pc, #184]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 8001650:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001654:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001656:	f7ff fab1 	bl	8000bbc <HAL_GetTick>
 800165a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800165e:	f7ff faad 	bl	8000bbc <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e206      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001670:	4b25      	ldr	r3, [pc, #148]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x432>
 800167c:	e018      	b.n	80016b0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800167e:	4b22      	ldr	r3, [pc, #136]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a21      	ldr	r2, [pc, #132]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 8001684:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001688:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800168a:	f7ff fa97 	bl	8000bbc <HAL_GetTick>
 800168e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001692:	f7ff fa93 	bl	8000bbc <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e1ec      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f0      	bne.n	8001692 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80af 	beq.w	800181c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <HAL_RCC_OscConfig+0x4e0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <HAL_RCC_OscConfig+0x4e0>)
 80016c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016ca:	f7ff fa77 	bl	8000bbc <HAL_GetTick>
 80016ce:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d2:	f7ff fa73 	bl	8000bbc <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b64      	cmp	r3, #100	; 0x64
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e1cc      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_RCC_OscConfig+0x4e0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d10b      	bne.n	8001710 <HAL_RCC_OscConfig+0x4e4>
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fc:	4a02      	ldr	r2, [pc, #8]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6713      	str	r3, [r2, #112]	; 0x70
 8001704:	e05b      	b.n	80017be <HAL_RCC_OscConfig+0x592>
 8001706:	bf00      	nop
 8001708:	58024400 	.word	0x58024400
 800170c:	58024800 	.word	0x58024800
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d112      	bne.n	800173e <HAL_RCC_OscConfig+0x512>
 8001718:	4b9d      	ldr	r3, [pc, #628]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171c:	4a9c      	ldr	r2, [pc, #624]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	6713      	str	r3, [r2, #112]	; 0x70
 8001724:	4b9a      	ldr	r3, [pc, #616]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001728:	4a99      	ldr	r2, [pc, #612]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 800172a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800172e:	6713      	str	r3, [r2, #112]	; 0x70
 8001730:	4b97      	ldr	r3, [pc, #604]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001734:	4a96      	ldr	r2, [pc, #600]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001736:	f023 0304 	bic.w	r3, r3, #4
 800173a:	6713      	str	r3, [r2, #112]	; 0x70
 800173c:	e03f      	b.n	80017be <HAL_RCC_OscConfig+0x592>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b05      	cmp	r3, #5
 8001744:	d112      	bne.n	800176c <HAL_RCC_OscConfig+0x540>
 8001746:	4b92      	ldr	r3, [pc, #584]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174a:	4a91      	ldr	r2, [pc, #580]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	6713      	str	r3, [r2, #112]	; 0x70
 8001752:	4b8f      	ldr	r3, [pc, #572]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001756:	4a8e      	ldr	r2, [pc, #568]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800175c:	6713      	str	r3, [r2, #112]	; 0x70
 800175e:	4b8c      	ldr	r3, [pc, #560]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001762:	4a8b      	ldr	r2, [pc, #556]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6713      	str	r3, [r2, #112]	; 0x70
 800176a:	e028      	b.n	80017be <HAL_RCC_OscConfig+0x592>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b85      	cmp	r3, #133	; 0x85
 8001772:	d112      	bne.n	800179a <HAL_RCC_OscConfig+0x56e>
 8001774:	4b86      	ldr	r3, [pc, #536]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001778:	4a85      	ldr	r2, [pc, #532]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 800177a:	f043 0304 	orr.w	r3, r3, #4
 800177e:	6713      	str	r3, [r2, #112]	; 0x70
 8001780:	4b83      	ldr	r3, [pc, #524]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001784:	4a82      	ldr	r2, [pc, #520]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800178a:	6713      	str	r3, [r2, #112]	; 0x70
 800178c:	4b80      	ldr	r3, [pc, #512]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001790:	4a7f      	ldr	r2, [pc, #508]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6713      	str	r3, [r2, #112]	; 0x70
 8001798:	e011      	b.n	80017be <HAL_RCC_OscConfig+0x592>
 800179a:	4b7d      	ldr	r3, [pc, #500]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179e:	4a7c      	ldr	r2, [pc, #496]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	6713      	str	r3, [r2, #112]	; 0x70
 80017a6:	4b7a      	ldr	r3, [pc, #488]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	4a79      	ldr	r2, [pc, #484]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 80017ac:	f023 0304 	bic.w	r3, r3, #4
 80017b0:	6713      	str	r3, [r2, #112]	; 0x70
 80017b2:	4b77      	ldr	r3, [pc, #476]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	4a76      	ldr	r2, [pc, #472]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 80017b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d015      	beq.n	80017f2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c6:	f7ff f9f9 	bl	8000bbc <HAL_GetTick>
 80017ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017cc:	e00a      	b.n	80017e4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7ff f9f5 	bl	8000bbc <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017dc:	4293      	cmp	r3, r2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e14c      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017e4:	4b6a      	ldr	r3, [pc, #424]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0ee      	beq.n	80017ce <HAL_RCC_OscConfig+0x5a2>
 80017f0:	e014      	b.n	800181c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f2:	f7ff f9e3 	bl	8000bbc <HAL_GetTick>
 80017f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017f8:	e00a      	b.n	8001810 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fa:	f7ff f9df 	bl	8000bbc <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	f241 3288 	movw	r2, #5000	; 0x1388
 8001808:	4293      	cmp	r3, r2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e136      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001810:	4b5f      	ldr	r3, [pc, #380]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1ee      	bne.n	80017fa <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 812b 	beq.w	8001a7c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001826:	4b5a      	ldr	r3, [pc, #360]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800182e:	2b18      	cmp	r3, #24
 8001830:	f000 80bb 	beq.w	80019aa <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	2b02      	cmp	r3, #2
 800183a:	f040 8095 	bne.w	8001968 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183e:	4b54      	ldr	r3, [pc, #336]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a53      	ldr	r2, [pc, #332]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001844:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184a:	f7ff f9b7 	bl	8000bbc <HAL_GetTick>
 800184e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001852:	f7ff f9b3 	bl	8000bbc <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e10c      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001864:	4b4a      	ldr	r3, [pc, #296]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1f0      	bne.n	8001852 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001870:	4b47      	ldr	r3, [pc, #284]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001874:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_RCC_OscConfig+0x768>)
 8001876:	4013      	ands	r3, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	430a      	orrs	r2, r1
 8001884:	4942      	ldr	r1, [pc, #264]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001886:	4313      	orrs	r3, r2
 8001888:	628b      	str	r3, [r1, #40]	; 0x28
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	3b01      	subs	r3, #1
 8001890:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001898:	3b01      	subs	r3, #1
 800189a:	025b      	lsls	r3, r3, #9
 800189c:	b29b      	uxth	r3, r3
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a4:	3b01      	subs	r3, #1
 80018a6:	041b      	lsls	r3, r3, #16
 80018a8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b2:	3b01      	subs	r3, #1
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80018ba:	4935      	ldr	r1, [pc, #212]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80018c0:	4b33      	ldr	r3, [pc, #204]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	4a32      	ldr	r2, [pc, #200]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80018cc:	4b30      	ldr	r3, [pc, #192]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 80018ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018d0:	4b31      	ldr	r3, [pc, #196]	; (8001998 <HAL_RCC_OscConfig+0x76c>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80018d8:	00d2      	lsls	r2, r2, #3
 80018da:	492d      	ldr	r1, [pc, #180]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80018e0:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 80018e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e4:	f023 020c 	bic.w	r2, r3, #12
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	4928      	ldr	r1, [pc, #160]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80018f2:	4b27      	ldr	r3, [pc, #156]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	f023 0202 	bic.w	r2, r3, #2
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	4924      	ldr	r1, [pc, #144]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001900:	4313      	orrs	r3, r2
 8001902:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001904:	4b22      	ldr	r3, [pc, #136]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	4a21      	ldr	r2, [pc, #132]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 800190a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	4a1e      	ldr	r2, [pc, #120]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800191c:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	4a1b      	ldr	r2, [pc, #108]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001922:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001926:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	4a18      	ldr	r2, [pc, #96]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001934:	4b16      	ldr	r3, [pc, #88]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a15      	ldr	r2, [pc, #84]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 800193a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800193e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff f93c 	bl	8000bbc <HAL_GetTick>
 8001944:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff f938 	bl	8000bbc <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e091      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0x71c>
 8001966:	e089      	b.n	8001a7c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a08      	ldr	r2, [pc, #32]	; (8001990 <HAL_RCC_OscConfig+0x764>)
 800196e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff f922 	bl	8000bbc <HAL_GetTick>
 8001978:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800197a:	e00f      	b.n	800199c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff f91e 	bl	8000bbc <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d908      	bls.n	800199c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e077      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
 800198e:	bf00      	nop
 8001990:	58024400 	.word	0x58024400
 8001994:	fffffc0c 	.word	0xfffffc0c
 8001998:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800199c:	4b3a      	ldr	r3, [pc, #232]	; (8001a88 <HAL_RCC_OscConfig+0x85c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1e9      	bne.n	800197c <HAL_RCC_OscConfig+0x750>
 80019a8:	e068      	b.n	8001a7c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80019aa:	4b37      	ldr	r3, [pc, #220]	; (8001a88 <HAL_RCC_OscConfig+0x85c>)
 80019ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ae:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80019b0:	4b35      	ldr	r3, [pc, #212]	; (8001a88 <HAL_RCC_OscConfig+0x85c>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d031      	beq.n	8001a22 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	f003 0203 	and.w	r2, r3, #3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d12a      	bne.n	8001a22 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	091b      	lsrs	r3, r3, #4
 80019d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d8:	429a      	cmp	r2, r3
 80019da:	d122      	bne.n	8001a22 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d11a      	bne.n	8001a22 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	0a5b      	lsrs	r3, r3, #9
 80019f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d111      	bne.n	8001a22 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	0c1b      	lsrs	r3, r3, #16
 8001a02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d108      	bne.n	8001a22 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	0e1b      	lsrs	r3, r3, #24
 8001a14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d001      	beq.n	8001a26 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e02b      	b.n	8001a7e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_RCC_OscConfig+0x85c>)
 8001a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2a:	08db      	lsrs	r3, r3, #3
 8001a2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a30:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d01f      	beq.n	8001a7c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_RCC_OscConfig+0x85c>)
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	4a11      	ldr	r2, [pc, #68]	; (8001a88 <HAL_RCC_OscConfig+0x85c>)
 8001a42:	f023 0301 	bic.w	r3, r3, #1
 8001a46:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a48:	f7ff f8b8 	bl	8000bbc <HAL_GetTick>
 8001a4c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001a4e:	bf00      	nop
 8001a50:	f7ff f8b4 	bl	8000bbc <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d0f9      	beq.n	8001a50 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_RCC_OscConfig+0x85c>)
 8001a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_RCC_OscConfig+0x860>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a68:	00d2      	lsls	r2, r2, #3
 8001a6a:	4907      	ldr	r1, [pc, #28]	; (8001a88 <HAL_RCC_OscConfig+0x85c>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_RCC_OscConfig+0x85c>)
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <HAL_RCC_OscConfig+0x85c>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3730      	adds	r7, #48	; 0x30
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	58024400 	.word	0x58024400
 8001a8c:	ffff0007 	.word	0xffff0007

08001a90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e19c      	b.n	8001dde <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b8a      	ldr	r3, [pc, #552]	; (8001cd0 <HAL_RCC_ClockConfig+0x240>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 030f 	and.w	r3, r3, #15
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d910      	bls.n	8001ad4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b87      	ldr	r3, [pc, #540]	; (8001cd0 <HAL_RCC_ClockConfig+0x240>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 020f 	bic.w	r2, r3, #15
 8001aba:	4985      	ldr	r1, [pc, #532]	; (8001cd0 <HAL_RCC_ClockConfig+0x240>)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b83      	ldr	r3, [pc, #524]	; (8001cd0 <HAL_RCC_ClockConfig+0x240>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e184      	b.n	8001dde <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d010      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	4b7b      	ldr	r3, [pc, #492]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d908      	bls.n	8001b02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001af0:	4b78      	ldr	r3, [pc, #480]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	4975      	ldr	r1, [pc, #468]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d010      	beq.n	8001b30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695a      	ldr	r2, [r3, #20]
 8001b12:	4b70      	ldr	r3, [pc, #448]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d908      	bls.n	8001b30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b1e:	4b6d      	ldr	r3, [pc, #436]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	496a      	ldr	r1, [pc, #424]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d010      	beq.n	8001b5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	699a      	ldr	r2, [r3, #24]
 8001b40:	4b64      	ldr	r3, [pc, #400]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d908      	bls.n	8001b5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b4c:	4b61      	ldr	r3, [pc, #388]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	495e      	ldr	r1, [pc, #376]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0320 	and.w	r3, r3, #32
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d010      	beq.n	8001b8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69da      	ldr	r2, [r3, #28]
 8001b6e:	4b59      	ldr	r3, [pc, #356]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d908      	bls.n	8001b8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001b7a:	4b56      	ldr	r3, [pc, #344]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4953      	ldr	r1, [pc, #332]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d010      	beq.n	8001bba <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	4b4d      	ldr	r3, [pc, #308]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d908      	bls.n	8001bba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba8:	4b4a      	ldr	r3, [pc, #296]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f023 020f 	bic.w	r2, r3, #15
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	4947      	ldr	r1, [pc, #284]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d055      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001bc6:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	4940      	ldr	r1, [pc, #256]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d107      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001be0:	4b3c      	ldr	r3, [pc, #240]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d121      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0f6      	b.n	8001dde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d107      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bf8:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d115      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0ea      	b.n	8001dde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d107      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c10:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d109      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0de      	b.n	8001dde <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c20:	4b2c      	ldr	r3, [pc, #176]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0d6      	b.n	8001dde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c30:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	f023 0207 	bic.w	r2, r3, #7
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	4925      	ldr	r1, [pc, #148]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c42:	f7fe ffbb 	bl	8000bbc <HAL_GetTick>
 8001c46:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c48:	e00a      	b.n	8001c60 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4a:	f7fe ffb7 	bl	8000bbc <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e0be      	b.n	8001dde <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c60:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d1eb      	bne.n	8001c4a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d010      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d208      	bcs.n	8001ca0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f023 020f 	bic.w	r2, r3, #15
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	490e      	ldr	r1, [pc, #56]	; (8001cd4 <HAL_RCC_ClockConfig+0x244>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_RCC_ClockConfig+0x240>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 030f 	and.w	r3, r3, #15
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d214      	bcs.n	8001cd8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <HAL_RCC_ClockConfig+0x240>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 020f 	bic.w	r2, r3, #15
 8001cb6:	4906      	ldr	r1, [pc, #24]	; (8001cd0 <HAL_RCC_ClockConfig+0x240>)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbe:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <HAL_RCC_ClockConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e086      	b.n	8001dde <HAL_RCC_ClockConfig+0x34e>
 8001cd0:	52002000 	.word	0x52002000
 8001cd4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d010      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	4b3f      	ldr	r3, [pc, #252]	; (8001de8 <HAL_RCC_ClockConfig+0x358>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d208      	bcs.n	8001d06 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cf4:	4b3c      	ldr	r3, [pc, #240]	; (8001de8 <HAL_RCC_ClockConfig+0x358>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	4939      	ldr	r1, [pc, #228]	; (8001de8 <HAL_RCC_ClockConfig+0x358>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d010      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <HAL_RCC_ClockConfig+0x358>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d208      	bcs.n	8001d34 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d22:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <HAL_RCC_ClockConfig+0x358>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	492e      	ldr	r1, [pc, #184]	; (8001de8 <HAL_RCC_ClockConfig+0x358>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d010      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699a      	ldr	r2, [r3, #24]
 8001d44:	4b28      	ldr	r3, [pc, #160]	; (8001de8 <HAL_RCC_ClockConfig+0x358>)
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d208      	bcs.n	8001d62 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d50:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <HAL_RCC_ClockConfig+0x358>)
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	4922      	ldr	r1, [pc, #136]	; (8001de8 <HAL_RCC_ClockConfig+0x358>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d010      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69da      	ldr	r2, [r3, #28]
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HAL_RCC_ClockConfig+0x358>)
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d208      	bcs.n	8001d90 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <HAL_RCC_ClockConfig+0x358>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	4917      	ldr	r1, [pc, #92]	; (8001de8 <HAL_RCC_ClockConfig+0x358>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001d90:	f000 f834 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8001d94:	4602      	mov	r2, r0
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_RCC_ClockConfig+0x358>)
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	0a1b      	lsrs	r3, r3, #8
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	4912      	ldr	r1, [pc, #72]	; (8001dec <HAL_RCC_ClockConfig+0x35c>)
 8001da2:	5ccb      	ldrb	r3, [r1, r3]
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dac:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <HAL_RCC_ClockConfig+0x358>)
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <HAL_RCC_ClockConfig+0x35c>)
 8001db8:	5cd3      	ldrb	r3, [r2, r3]
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc4:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <HAL_RCC_ClockConfig+0x360>)
 8001dc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_RCC_ClockConfig+0x364>)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_RCC_ClockConfig+0x368>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fea8 	bl	8000b28 <HAL_InitTick>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	58024400 	.word	0x58024400
 8001dec:	08003288 	.word	0x08003288
 8001df0:	24000004 	.word	0x24000004
 8001df4:	24000000 	.word	0x24000000
 8001df8:	24000008 	.word	0x24000008

08001dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e02:	4bb3      	ldr	r3, [pc, #716]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e0a:	2b18      	cmp	r3, #24
 8001e0c:	f200 8155 	bhi.w	80020ba <HAL_RCC_GetSysClockFreq+0x2be>
 8001e10:	a201      	add	r2, pc, #4	; (adr r2, 8001e18 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e16:	bf00      	nop
 8001e18:	08001e7d 	.word	0x08001e7d
 8001e1c:	080020bb 	.word	0x080020bb
 8001e20:	080020bb 	.word	0x080020bb
 8001e24:	080020bb 	.word	0x080020bb
 8001e28:	080020bb 	.word	0x080020bb
 8001e2c:	080020bb 	.word	0x080020bb
 8001e30:	080020bb 	.word	0x080020bb
 8001e34:	080020bb 	.word	0x080020bb
 8001e38:	08001ea3 	.word	0x08001ea3
 8001e3c:	080020bb 	.word	0x080020bb
 8001e40:	080020bb 	.word	0x080020bb
 8001e44:	080020bb 	.word	0x080020bb
 8001e48:	080020bb 	.word	0x080020bb
 8001e4c:	080020bb 	.word	0x080020bb
 8001e50:	080020bb 	.word	0x080020bb
 8001e54:	080020bb 	.word	0x080020bb
 8001e58:	08001ea9 	.word	0x08001ea9
 8001e5c:	080020bb 	.word	0x080020bb
 8001e60:	080020bb 	.word	0x080020bb
 8001e64:	080020bb 	.word	0x080020bb
 8001e68:	080020bb 	.word	0x080020bb
 8001e6c:	080020bb 	.word	0x080020bb
 8001e70:	080020bb 	.word	0x080020bb
 8001e74:	080020bb 	.word	0x080020bb
 8001e78:	08001eaf 	.word	0x08001eaf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e7c:	4b94      	ldr	r3, [pc, #592]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0320 	and.w	r3, r3, #32
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d009      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e88:	4b91      	ldr	r3, [pc, #580]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	08db      	lsrs	r3, r3, #3
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	4a90      	ldr	r2, [pc, #576]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e94:	fa22 f303 	lsr.w	r3, r2, r3
 8001e98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001e9a:	e111      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e9c:	4b8d      	ldr	r3, [pc, #564]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e9e:	61bb      	str	r3, [r7, #24]
      break;
 8001ea0:	e10e      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001ea2:	4b8d      	ldr	r3, [pc, #564]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ea4:	61bb      	str	r3, [r7, #24]
      break;
 8001ea6:	e10b      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001ea8:	4b8c      	ldr	r3, [pc, #560]	; (80020dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001eaa:	61bb      	str	r3, [r7, #24]
      break;
 8001eac:	e108      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001eae:	4b88      	ldr	r3, [pc, #544]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001eb8:	4b85      	ldr	r3, [pc, #532]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ec2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ec4:	4b82      	ldr	r3, [pc, #520]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001ece:	4b80      	ldr	r3, [pc, #512]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed2:	08db      	lsrs	r3, r3, #3
 8001ed4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	fb02 f303 	mul.w	r3, r2, r3
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ee6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80e1 	beq.w	80020b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	f000 8083 	beq.w	8002000 <HAL_RCC_GetSysClockFreq+0x204>
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	f200 80a1 	bhi.w	8002044 <HAL_RCC_GetSysClockFreq+0x248>
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x114>
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d056      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x1c0>
 8001f0e:	e099      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f10:	4b6f      	ldr	r3, [pc, #444]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d02d      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f1c:	4b6c      	ldr	r3, [pc, #432]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	08db      	lsrs	r3, r3, #3
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	4a6b      	ldr	r2, [pc, #428]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	ee07 3a90 	vmov	s15, r3
 8001f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f46:	4b62      	ldr	r3, [pc, #392]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f56:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f5a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80020e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f72:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001f76:	e087      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f82:	eddf 6a58 	vldr	s13, [pc, #352]	; 80020e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f8a:	4b51      	ldr	r3, [pc, #324]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f9e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80020e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fba:	e065      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	ee07 3a90 	vmov	s15, r3
 8001fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80020e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fce:	4b40      	ldr	r3, [pc, #256]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fd6:	ee07 3a90 	vmov	s15, r3
 8001fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fde:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fe2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80020e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ffe:	e043      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	ee07 3a90 	vmov	s15, r3
 8002006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800200a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80020ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800200e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002012:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800201a:	ee07 3a90 	vmov	s15, r3
 800201e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002022:	ed97 6a02 	vldr	s12, [r7, #8]
 8002026:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80020e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800202a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800202e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800203a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002042:	e021      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	ee07 3a90 	vmov	s15, r3
 800204a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800204e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80020e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002056:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800205e:	ee07 3a90 	vmov	s15, r3
 8002062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002066:	ed97 6a02 	vldr	s12, [r7, #8]
 800206a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80020e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800206e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800207a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800207e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002082:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002086:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	0a5b      	lsrs	r3, r3, #9
 800208e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002092:	3301      	adds	r3, #1
 8002094:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80020a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ac:	ee17 3a90 	vmov	r3, s15
 80020b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80020b2:	e005      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61bb      	str	r3, [r7, #24]
      break;
 80020b8:	e002      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020bc:	61bb      	str	r3, [r7, #24]
      break;
 80020be:	bf00      	nop
  }

  return sysclockfreq;
 80020c0:	69bb      	ldr	r3, [r7, #24]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3724      	adds	r7, #36	; 0x24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	58024400 	.word	0x58024400
 80020d4:	03d09000 	.word	0x03d09000
 80020d8:	003d0900 	.word	0x003d0900
 80020dc:	007a1200 	.word	0x007a1200
 80020e0:	46000000 	.word	0x46000000
 80020e4:	4c742400 	.word	0x4c742400
 80020e8:	4a742400 	.word	0x4a742400
 80020ec:	4af42400 	.word	0x4af42400

080020f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e049      	b.n	8002196 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d106      	bne.n	800211c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7fe fb84 	bl	8000824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3304      	adds	r3, #4
 800212c:	4619      	mov	r1, r3
 800212e:	4610      	mov	r0, r2
 8002130:	f000 fbb0 	bl	8002894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e049      	b.n	8002244 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d106      	bne.n	80021ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f841 	bl	800224c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2202      	movs	r2, #2
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3304      	adds	r3, #4
 80021da:	4619      	mov	r1, r3
 80021dc:	4610      	mov	r0, r2
 80021de:	f000 fb59 	bl	8002894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d109      	bne.n	8002284 <HAL_TIM_PWM_Start+0x24>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b01      	cmp	r3, #1
 800227a:	bf14      	ite	ne
 800227c:	2301      	movne	r3, #1
 800227e:	2300      	moveq	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	e03c      	b.n	80022fe <HAL_TIM_PWM_Start+0x9e>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b04      	cmp	r3, #4
 8002288:	d109      	bne.n	800229e <HAL_TIM_PWM_Start+0x3e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b01      	cmp	r3, #1
 8002294:	bf14      	ite	ne
 8002296:	2301      	movne	r3, #1
 8002298:	2300      	moveq	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	e02f      	b.n	80022fe <HAL_TIM_PWM_Start+0x9e>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d109      	bne.n	80022b8 <HAL_TIM_PWM_Start+0x58>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	bf14      	ite	ne
 80022b0:	2301      	movne	r3, #1
 80022b2:	2300      	moveq	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e022      	b.n	80022fe <HAL_TIM_PWM_Start+0x9e>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2b0c      	cmp	r3, #12
 80022bc:	d109      	bne.n	80022d2 <HAL_TIM_PWM_Start+0x72>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	bf14      	ite	ne
 80022ca:	2301      	movne	r3, #1
 80022cc:	2300      	moveq	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	e015      	b.n	80022fe <HAL_TIM_PWM_Start+0x9e>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b10      	cmp	r3, #16
 80022d6:	d109      	bne.n	80022ec <HAL_TIM_PWM_Start+0x8c>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	bf14      	ite	ne
 80022e4:	2301      	movne	r3, #1
 80022e6:	2300      	moveq	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	e008      	b.n	80022fe <HAL_TIM_PWM_Start+0x9e>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	bf14      	ite	ne
 80022f8:	2301      	movne	r3, #1
 80022fa:	2300      	moveq	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e0a1      	b.n	800244a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d104      	bne.n	8002316 <HAL_TIM_PWM_Start+0xb6>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002314:	e023      	b.n	800235e <HAL_TIM_PWM_Start+0xfe>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b04      	cmp	r3, #4
 800231a:	d104      	bne.n	8002326 <HAL_TIM_PWM_Start+0xc6>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002324:	e01b      	b.n	800235e <HAL_TIM_PWM_Start+0xfe>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b08      	cmp	r3, #8
 800232a:	d104      	bne.n	8002336 <HAL_TIM_PWM_Start+0xd6>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002334:	e013      	b.n	800235e <HAL_TIM_PWM_Start+0xfe>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b0c      	cmp	r3, #12
 800233a:	d104      	bne.n	8002346 <HAL_TIM_PWM_Start+0xe6>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002344:	e00b      	b.n	800235e <HAL_TIM_PWM_Start+0xfe>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b10      	cmp	r3, #16
 800234a:	d104      	bne.n	8002356 <HAL_TIM_PWM_Start+0xf6>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002354:	e003      	b.n	800235e <HAL_TIM_PWM_Start+0xfe>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2202      	movs	r2, #2
 800235a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2201      	movs	r2, #1
 8002364:	6839      	ldr	r1, [r7, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fea2 	bl	80030b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a38      	ldr	r2, [pc, #224]	; (8002454 <HAL_TIM_PWM_Start+0x1f4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <HAL_TIM_PWM_Start+0x13e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a37      	ldr	r2, [pc, #220]	; (8002458 <HAL_TIM_PWM_Start+0x1f8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d00e      	beq.n	800239e <HAL_TIM_PWM_Start+0x13e>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a35      	ldr	r2, [pc, #212]	; (800245c <HAL_TIM_PWM_Start+0x1fc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d009      	beq.n	800239e <HAL_TIM_PWM_Start+0x13e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a34      	ldr	r2, [pc, #208]	; (8002460 <HAL_TIM_PWM_Start+0x200>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d004      	beq.n	800239e <HAL_TIM_PWM_Start+0x13e>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a32      	ldr	r2, [pc, #200]	; (8002464 <HAL_TIM_PWM_Start+0x204>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d101      	bne.n	80023a2 <HAL_TIM_PWM_Start+0x142>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_TIM_PWM_Start+0x144>
 80023a2:	2300      	movs	r3, #0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d007      	beq.n	80023b8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a25      	ldr	r2, [pc, #148]	; (8002454 <HAL_TIM_PWM_Start+0x1f4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d022      	beq.n	8002408 <HAL_TIM_PWM_Start+0x1a8>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ca:	d01d      	beq.n	8002408 <HAL_TIM_PWM_Start+0x1a8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a25      	ldr	r2, [pc, #148]	; (8002468 <HAL_TIM_PWM_Start+0x208>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d018      	beq.n	8002408 <HAL_TIM_PWM_Start+0x1a8>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a24      	ldr	r2, [pc, #144]	; (800246c <HAL_TIM_PWM_Start+0x20c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d013      	beq.n	8002408 <HAL_TIM_PWM_Start+0x1a8>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a22      	ldr	r2, [pc, #136]	; (8002470 <HAL_TIM_PWM_Start+0x210>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00e      	beq.n	8002408 <HAL_TIM_PWM_Start+0x1a8>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a1a      	ldr	r2, [pc, #104]	; (8002458 <HAL_TIM_PWM_Start+0x1f8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d009      	beq.n	8002408 <HAL_TIM_PWM_Start+0x1a8>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1e      	ldr	r2, [pc, #120]	; (8002474 <HAL_TIM_PWM_Start+0x214>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d004      	beq.n	8002408 <HAL_TIM_PWM_Start+0x1a8>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a16      	ldr	r2, [pc, #88]	; (800245c <HAL_TIM_PWM_Start+0x1fc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d115      	bne.n	8002434 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <HAL_TIM_PWM_Start+0x218>)
 8002410:	4013      	ands	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b06      	cmp	r3, #6
 8002418:	d015      	beq.n	8002446 <HAL_TIM_PWM_Start+0x1e6>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002420:	d011      	beq.n	8002446 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0201 	orr.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002432:	e008      	b.n	8002446 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	e000      	b.n	8002448 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002446:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40010000 	.word	0x40010000
 8002458:	40010400 	.word	0x40010400
 800245c:	40014000 	.word	0x40014000
 8002460:	40014400 	.word	0x40014400
 8002464:	40014800 	.word	0x40014800
 8002468:	40000400 	.word	0x40000400
 800246c:	40000800 	.word	0x40000800
 8002470:	40000c00 	.word	0x40000c00
 8002474:	40001800 	.word	0x40001800
 8002478:	00010007 	.word	0x00010007

0800247c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002496:	2302      	movs	r3, #2
 8002498:	e0ff      	b.n	800269a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b14      	cmp	r3, #20
 80024a6:	f200 80f0 	bhi.w	800268a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80024aa:	a201      	add	r2, pc, #4	; (adr r2, 80024b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80024ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b0:	08002505 	.word	0x08002505
 80024b4:	0800268b 	.word	0x0800268b
 80024b8:	0800268b 	.word	0x0800268b
 80024bc:	0800268b 	.word	0x0800268b
 80024c0:	08002545 	.word	0x08002545
 80024c4:	0800268b 	.word	0x0800268b
 80024c8:	0800268b 	.word	0x0800268b
 80024cc:	0800268b 	.word	0x0800268b
 80024d0:	08002587 	.word	0x08002587
 80024d4:	0800268b 	.word	0x0800268b
 80024d8:	0800268b 	.word	0x0800268b
 80024dc:	0800268b 	.word	0x0800268b
 80024e0:	080025c7 	.word	0x080025c7
 80024e4:	0800268b 	.word	0x0800268b
 80024e8:	0800268b 	.word	0x0800268b
 80024ec:	0800268b 	.word	0x0800268b
 80024f0:	08002609 	.word	0x08002609
 80024f4:	0800268b 	.word	0x0800268b
 80024f8:	0800268b 	.word	0x0800268b
 80024fc:	0800268b 	.word	0x0800268b
 8002500:	08002649 	.word	0x08002649
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fa5c 	bl	80029c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699a      	ldr	r2, [r3, #24]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0208 	orr.w	r2, r2, #8
 800251e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699a      	ldr	r2, [r3, #24]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0204 	bic.w	r2, r2, #4
 800252e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6999      	ldr	r1, [r3, #24]
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	619a      	str	r2, [r3, #24]
      break;
 8002542:	e0a5      	b.n	8002690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	4618      	mov	r0, r3
 800254c:	f000 facc 	bl	8002ae8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699a      	ldr	r2, [r3, #24]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800255e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800256e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6999      	ldr	r1, [r3, #24]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	021a      	lsls	r2, r3, #8
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	619a      	str	r2, [r3, #24]
      break;
 8002584:	e084      	b.n	8002690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fb35 	bl	8002bfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	69da      	ldr	r2, [r3, #28]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 0208 	orr.w	r2, r2, #8
 80025a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	69da      	ldr	r2, [r3, #28]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0204 	bic.w	r2, r2, #4
 80025b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	69d9      	ldr	r1, [r3, #28]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	61da      	str	r2, [r3, #28]
      break;
 80025c4:	e064      	b.n	8002690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68b9      	ldr	r1, [r7, #8]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fb9d 	bl	8002d0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69da      	ldr	r2, [r3, #28]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	69da      	ldr	r2, [r3, #28]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69d9      	ldr	r1, [r3, #28]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	021a      	lsls	r2, r3, #8
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	61da      	str	r2, [r3, #28]
      break;
 8002606:	e043      	b.n	8002690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fbe6 	bl	8002de0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0208 	orr.w	r2, r2, #8
 8002622:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0204 	bic.w	r2, r2, #4
 8002632:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002646:	e023      	b.n	8002690 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 fc2a 	bl	8002ea8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002662:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002672:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	021a      	lsls	r2, r3, #8
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002688:	e002      	b.n	8002690 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	75fb      	strb	r3, [r7, #23]
      break;
 800268e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002698:	7dfb      	ldrb	r3, [r7, #23]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop

080026a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_TIM_ConfigClockSource+0x1c>
 80026bc:	2302      	movs	r3, #2
 80026be:	e0dc      	b.n	800287a <HAL_TIM_ConfigClockSource+0x1d6>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	4b6a      	ldr	r3, [pc, #424]	; (8002884 <HAL_TIM_ConfigClockSource+0x1e0>)
 80026dc:	4013      	ands	r3, r2
 80026de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a64      	ldr	r2, [pc, #400]	; (8002888 <HAL_TIM_ConfigClockSource+0x1e4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	f000 80a9 	beq.w	800284e <HAL_TIM_ConfigClockSource+0x1aa>
 80026fc:	4a62      	ldr	r2, [pc, #392]	; (8002888 <HAL_TIM_ConfigClockSource+0x1e4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	f200 80ae 	bhi.w	8002860 <HAL_TIM_ConfigClockSource+0x1bc>
 8002704:	4a61      	ldr	r2, [pc, #388]	; (800288c <HAL_TIM_ConfigClockSource+0x1e8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	f000 80a1 	beq.w	800284e <HAL_TIM_ConfigClockSource+0x1aa>
 800270c:	4a5f      	ldr	r2, [pc, #380]	; (800288c <HAL_TIM_ConfigClockSource+0x1e8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	f200 80a6 	bhi.w	8002860 <HAL_TIM_ConfigClockSource+0x1bc>
 8002714:	4a5e      	ldr	r2, [pc, #376]	; (8002890 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002716:	4293      	cmp	r3, r2
 8002718:	f000 8099 	beq.w	800284e <HAL_TIM_ConfigClockSource+0x1aa>
 800271c:	4a5c      	ldr	r2, [pc, #368]	; (8002890 <HAL_TIM_ConfigClockSource+0x1ec>)
 800271e:	4293      	cmp	r3, r2
 8002720:	f200 809e 	bhi.w	8002860 <HAL_TIM_ConfigClockSource+0x1bc>
 8002724:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002728:	f000 8091 	beq.w	800284e <HAL_TIM_ConfigClockSource+0x1aa>
 800272c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002730:	f200 8096 	bhi.w	8002860 <HAL_TIM_ConfigClockSource+0x1bc>
 8002734:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002738:	f000 8089 	beq.w	800284e <HAL_TIM_ConfigClockSource+0x1aa>
 800273c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002740:	f200 808e 	bhi.w	8002860 <HAL_TIM_ConfigClockSource+0x1bc>
 8002744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002748:	d03e      	beq.n	80027c8 <HAL_TIM_ConfigClockSource+0x124>
 800274a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800274e:	f200 8087 	bhi.w	8002860 <HAL_TIM_ConfigClockSource+0x1bc>
 8002752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002756:	f000 8086 	beq.w	8002866 <HAL_TIM_ConfigClockSource+0x1c2>
 800275a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800275e:	d87f      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x1bc>
 8002760:	2b70      	cmp	r3, #112	; 0x70
 8002762:	d01a      	beq.n	800279a <HAL_TIM_ConfigClockSource+0xf6>
 8002764:	2b70      	cmp	r3, #112	; 0x70
 8002766:	d87b      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x1bc>
 8002768:	2b60      	cmp	r3, #96	; 0x60
 800276a:	d050      	beq.n	800280e <HAL_TIM_ConfigClockSource+0x16a>
 800276c:	2b60      	cmp	r3, #96	; 0x60
 800276e:	d877      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x1bc>
 8002770:	2b50      	cmp	r3, #80	; 0x50
 8002772:	d03c      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0x14a>
 8002774:	2b50      	cmp	r3, #80	; 0x50
 8002776:	d873      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x1bc>
 8002778:	2b40      	cmp	r3, #64	; 0x40
 800277a:	d058      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x18a>
 800277c:	2b40      	cmp	r3, #64	; 0x40
 800277e:	d86f      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x1bc>
 8002780:	2b30      	cmp	r3, #48	; 0x30
 8002782:	d064      	beq.n	800284e <HAL_TIM_ConfigClockSource+0x1aa>
 8002784:	2b30      	cmp	r3, #48	; 0x30
 8002786:	d86b      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x1bc>
 8002788:	2b20      	cmp	r3, #32
 800278a:	d060      	beq.n	800284e <HAL_TIM_ConfigClockSource+0x1aa>
 800278c:	2b20      	cmp	r3, #32
 800278e:	d867      	bhi.n	8002860 <HAL_TIM_ConfigClockSource+0x1bc>
 8002790:	2b00      	cmp	r3, #0
 8002792:	d05c      	beq.n	800284e <HAL_TIM_ConfigClockSource+0x1aa>
 8002794:	2b10      	cmp	r3, #16
 8002796:	d05a      	beq.n	800284e <HAL_TIM_ConfigClockSource+0x1aa>
 8002798:	e062      	b.n	8002860 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6899      	ldr	r1, [r3, #8]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f000 fc61 	bl	8003070 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	609a      	str	r2, [r3, #8]
      break;
 80027c6:	e04f      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	6899      	ldr	r1, [r3, #8]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f000 fc4a 	bl	8003070 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027ea:	609a      	str	r2, [r3, #8]
      break;
 80027ec:	e03c      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6859      	ldr	r1, [r3, #4]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	461a      	mov	r2, r3
 80027fc:	f000 fbba 	bl	8002f74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2150      	movs	r1, #80	; 0x50
 8002806:	4618      	mov	r0, r3
 8002808:	f000 fc14 	bl	8003034 <TIM_ITRx_SetConfig>
      break;
 800280c:	e02c      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6859      	ldr	r1, [r3, #4]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	461a      	mov	r2, r3
 800281c:	f000 fbd9 	bl	8002fd2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2160      	movs	r1, #96	; 0x60
 8002826:	4618      	mov	r0, r3
 8002828:	f000 fc04 	bl	8003034 <TIM_ITRx_SetConfig>
      break;
 800282c:	e01c      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	461a      	mov	r2, r3
 800283c:	f000 fb9a 	bl	8002f74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2140      	movs	r1, #64	; 0x40
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fbf4 	bl	8003034 <TIM_ITRx_SetConfig>
      break;
 800284c:	e00c      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4619      	mov	r1, r3
 8002858:	4610      	mov	r0, r2
 800285a:	f000 fbeb 	bl	8003034 <TIM_ITRx_SetConfig>
      break;
 800285e:	e003      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
      break;
 8002864:	e000      	b.n	8002868 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8002866:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002878:	7bfb      	ldrb	r3, [r7, #15]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	ffceff88 	.word	0xffceff88
 8002888:	00100040 	.word	0x00100040
 800288c:	00100030 	.word	0x00100030
 8002890:	00100020 	.word	0x00100020

08002894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a40      	ldr	r2, [pc, #256]	; (80029a8 <TIM_Base_SetConfig+0x114>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d013      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b2:	d00f      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a3d      	ldr	r2, [pc, #244]	; (80029ac <TIM_Base_SetConfig+0x118>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00b      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a3c      	ldr	r2, [pc, #240]	; (80029b0 <TIM_Base_SetConfig+0x11c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d007      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a3b      	ldr	r2, [pc, #236]	; (80029b4 <TIM_Base_SetConfig+0x120>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d003      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a3a      	ldr	r2, [pc, #232]	; (80029b8 <TIM_Base_SetConfig+0x124>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d108      	bne.n	80028e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a2f      	ldr	r2, [pc, #188]	; (80029a8 <TIM_Base_SetConfig+0x114>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d01f      	beq.n	800292e <TIM_Base_SetConfig+0x9a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f4:	d01b      	beq.n	800292e <TIM_Base_SetConfig+0x9a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a2c      	ldr	r2, [pc, #176]	; (80029ac <TIM_Base_SetConfig+0x118>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d017      	beq.n	800292e <TIM_Base_SetConfig+0x9a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a2b      	ldr	r2, [pc, #172]	; (80029b0 <TIM_Base_SetConfig+0x11c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <TIM_Base_SetConfig+0x9a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a2a      	ldr	r2, [pc, #168]	; (80029b4 <TIM_Base_SetConfig+0x120>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00f      	beq.n	800292e <TIM_Base_SetConfig+0x9a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a29      	ldr	r2, [pc, #164]	; (80029b8 <TIM_Base_SetConfig+0x124>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00b      	beq.n	800292e <TIM_Base_SetConfig+0x9a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a28      	ldr	r2, [pc, #160]	; (80029bc <TIM_Base_SetConfig+0x128>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d007      	beq.n	800292e <TIM_Base_SetConfig+0x9a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a27      	ldr	r2, [pc, #156]	; (80029c0 <TIM_Base_SetConfig+0x12c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d003      	beq.n	800292e <TIM_Base_SetConfig+0x9a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a26      	ldr	r2, [pc, #152]	; (80029c4 <TIM_Base_SetConfig+0x130>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d108      	bne.n	8002940 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a10      	ldr	r2, [pc, #64]	; (80029a8 <TIM_Base_SetConfig+0x114>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d00f      	beq.n	800298c <TIM_Base_SetConfig+0xf8>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a12      	ldr	r2, [pc, #72]	; (80029b8 <TIM_Base_SetConfig+0x124>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d00b      	beq.n	800298c <TIM_Base_SetConfig+0xf8>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a11      	ldr	r2, [pc, #68]	; (80029bc <TIM_Base_SetConfig+0x128>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d007      	beq.n	800298c <TIM_Base_SetConfig+0xf8>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a10      	ldr	r2, [pc, #64]	; (80029c0 <TIM_Base_SetConfig+0x12c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d003      	beq.n	800298c <TIM_Base_SetConfig+0xf8>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a0f      	ldr	r2, [pc, #60]	; (80029c4 <TIM_Base_SetConfig+0x130>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d103      	bne.n	8002994 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	615a      	str	r2, [r3, #20]
}
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40010000 	.word	0x40010000
 80029ac:	40000400 	.word	0x40000400
 80029b0:	40000800 	.word	0x40000800
 80029b4:	40000c00 	.word	0x40000c00
 80029b8:	40010400 	.word	0x40010400
 80029bc:	40014000 	.word	0x40014000
 80029c0:	40014400 	.word	0x40014400
 80029c4:	40014800 	.word	0x40014800

080029c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	f023 0201 	bic.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4b37      	ldr	r3, [pc, #220]	; (8002ad0 <TIM_OC1_SetConfig+0x108>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 0303 	bic.w	r3, r3, #3
 80029fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f023 0302 	bic.w	r3, r3, #2
 8002a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a2d      	ldr	r2, [pc, #180]	; (8002ad4 <TIM_OC1_SetConfig+0x10c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d00f      	beq.n	8002a44 <TIM_OC1_SetConfig+0x7c>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a2c      	ldr	r2, [pc, #176]	; (8002ad8 <TIM_OC1_SetConfig+0x110>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d00b      	beq.n	8002a44 <TIM_OC1_SetConfig+0x7c>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a2b      	ldr	r2, [pc, #172]	; (8002adc <TIM_OC1_SetConfig+0x114>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d007      	beq.n	8002a44 <TIM_OC1_SetConfig+0x7c>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a2a      	ldr	r2, [pc, #168]	; (8002ae0 <TIM_OC1_SetConfig+0x118>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d003      	beq.n	8002a44 <TIM_OC1_SetConfig+0x7c>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a29      	ldr	r2, [pc, #164]	; (8002ae4 <TIM_OC1_SetConfig+0x11c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d10c      	bne.n	8002a5e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f023 0308 	bic.w	r3, r3, #8
 8002a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f023 0304 	bic.w	r3, r3, #4
 8002a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a1c      	ldr	r2, [pc, #112]	; (8002ad4 <TIM_OC1_SetConfig+0x10c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00f      	beq.n	8002a86 <TIM_OC1_SetConfig+0xbe>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a1b      	ldr	r2, [pc, #108]	; (8002ad8 <TIM_OC1_SetConfig+0x110>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00b      	beq.n	8002a86 <TIM_OC1_SetConfig+0xbe>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a1a      	ldr	r2, [pc, #104]	; (8002adc <TIM_OC1_SetConfig+0x114>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d007      	beq.n	8002a86 <TIM_OC1_SetConfig+0xbe>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a19      	ldr	r2, [pc, #100]	; (8002ae0 <TIM_OC1_SetConfig+0x118>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d003      	beq.n	8002a86 <TIM_OC1_SetConfig+0xbe>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a18      	ldr	r2, [pc, #96]	; (8002ae4 <TIM_OC1_SetConfig+0x11c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d111      	bne.n	8002aaa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	621a      	str	r2, [r3, #32]
}
 8002ac4:	bf00      	nop
 8002ac6:	371c      	adds	r7, #28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	fffeff8f 	.word	0xfffeff8f
 8002ad4:	40010000 	.word	0x40010000
 8002ad8:	40010400 	.word	0x40010400
 8002adc:	40014000 	.word	0x40014000
 8002ae0:	40014400 	.word	0x40014400
 8002ae4:	40014800 	.word	0x40014800

08002ae8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	f023 0210 	bic.w	r2, r3, #16
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4b34      	ldr	r3, [pc, #208]	; (8002be4 <TIM_OC2_SetConfig+0xfc>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f023 0320 	bic.w	r3, r3, #32
 8002b32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a29      	ldr	r2, [pc, #164]	; (8002be8 <TIM_OC2_SetConfig+0x100>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d003      	beq.n	8002b50 <TIM_OC2_SetConfig+0x68>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a28      	ldr	r2, [pc, #160]	; (8002bec <TIM_OC2_SetConfig+0x104>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d10d      	bne.n	8002b6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <TIM_OC2_SetConfig+0x100>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00f      	beq.n	8002b94 <TIM_OC2_SetConfig+0xac>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a1d      	ldr	r2, [pc, #116]	; (8002bec <TIM_OC2_SetConfig+0x104>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00b      	beq.n	8002b94 <TIM_OC2_SetConfig+0xac>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a1c      	ldr	r2, [pc, #112]	; (8002bf0 <TIM_OC2_SetConfig+0x108>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d007      	beq.n	8002b94 <TIM_OC2_SetConfig+0xac>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a1b      	ldr	r2, [pc, #108]	; (8002bf4 <TIM_OC2_SetConfig+0x10c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d003      	beq.n	8002b94 <TIM_OC2_SetConfig+0xac>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a1a      	ldr	r2, [pc, #104]	; (8002bf8 <TIM_OC2_SetConfig+0x110>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d113      	bne.n	8002bbc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	621a      	str	r2, [r3, #32]
}
 8002bd6:	bf00      	nop
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	feff8fff 	.word	0xfeff8fff
 8002be8:	40010000 	.word	0x40010000
 8002bec:	40010400 	.word	0x40010400
 8002bf0:	40014000 	.word	0x40014000
 8002bf4:	40014400 	.word	0x40014400
 8002bf8:	40014800 	.word	0x40014800

08002bfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4b33      	ldr	r3, [pc, #204]	; (8002cf4 <TIM_OC3_SetConfig+0xf8>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 0303 	bic.w	r3, r3, #3
 8002c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	021b      	lsls	r3, r3, #8
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a28      	ldr	r2, [pc, #160]	; (8002cf8 <TIM_OC3_SetConfig+0xfc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d003      	beq.n	8002c62 <TIM_OC3_SetConfig+0x66>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a27      	ldr	r2, [pc, #156]	; (8002cfc <TIM_OC3_SetConfig+0x100>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d10d      	bne.n	8002c7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <TIM_OC3_SetConfig+0xfc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00f      	beq.n	8002ca6 <TIM_OC3_SetConfig+0xaa>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a1c      	ldr	r2, [pc, #112]	; (8002cfc <TIM_OC3_SetConfig+0x100>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00b      	beq.n	8002ca6 <TIM_OC3_SetConfig+0xaa>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a1b      	ldr	r2, [pc, #108]	; (8002d00 <TIM_OC3_SetConfig+0x104>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d007      	beq.n	8002ca6 <TIM_OC3_SetConfig+0xaa>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a1a      	ldr	r2, [pc, #104]	; (8002d04 <TIM_OC3_SetConfig+0x108>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d003      	beq.n	8002ca6 <TIM_OC3_SetConfig+0xaa>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a19      	ldr	r2, [pc, #100]	; (8002d08 <TIM_OC3_SetConfig+0x10c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d113      	bne.n	8002cce <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	621a      	str	r2, [r3, #32]
}
 8002ce8:	bf00      	nop
 8002cea:	371c      	adds	r7, #28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	fffeff8f 	.word	0xfffeff8f
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	40010400 	.word	0x40010400
 8002d00:	40014000 	.word	0x40014000
 8002d04:	40014400 	.word	0x40014400
 8002d08:	40014800 	.word	0x40014800

08002d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <TIM_OC4_SetConfig+0xbc>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	021b      	lsls	r3, r3, #8
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	031b      	lsls	r3, r3, #12
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a19      	ldr	r2, [pc, #100]	; (8002dcc <TIM_OC4_SetConfig+0xc0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00f      	beq.n	8002d8c <TIM_OC4_SetConfig+0x80>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <TIM_OC4_SetConfig+0xc4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00b      	beq.n	8002d8c <TIM_OC4_SetConfig+0x80>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a17      	ldr	r2, [pc, #92]	; (8002dd4 <TIM_OC4_SetConfig+0xc8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d007      	beq.n	8002d8c <TIM_OC4_SetConfig+0x80>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a16      	ldr	r2, [pc, #88]	; (8002dd8 <TIM_OC4_SetConfig+0xcc>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d003      	beq.n	8002d8c <TIM_OC4_SetConfig+0x80>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a15      	ldr	r2, [pc, #84]	; (8002ddc <TIM_OC4_SetConfig+0xd0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d109      	bne.n	8002da0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	019b      	lsls	r3, r3, #6
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	621a      	str	r2, [r3, #32]
}
 8002dba:	bf00      	nop
 8002dbc:	371c      	adds	r7, #28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	feff8fff 	.word	0xfeff8fff
 8002dcc:	40010000 	.word	0x40010000
 8002dd0:	40010400 	.word	0x40010400
 8002dd4:	40014000 	.word	0x40014000
 8002dd8:	40014400 	.word	0x40014400
 8002ddc:	40014800 	.word	0x40014800

08002de0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4b21      	ldr	r3, [pc, #132]	; (8002e90 <TIM_OC5_SetConfig+0xb0>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002e20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	041b      	lsls	r3, r3, #16
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a18      	ldr	r2, [pc, #96]	; (8002e94 <TIM_OC5_SetConfig+0xb4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00f      	beq.n	8002e56 <TIM_OC5_SetConfig+0x76>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a17      	ldr	r2, [pc, #92]	; (8002e98 <TIM_OC5_SetConfig+0xb8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00b      	beq.n	8002e56 <TIM_OC5_SetConfig+0x76>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a16      	ldr	r2, [pc, #88]	; (8002e9c <TIM_OC5_SetConfig+0xbc>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d007      	beq.n	8002e56 <TIM_OC5_SetConfig+0x76>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a15      	ldr	r2, [pc, #84]	; (8002ea0 <TIM_OC5_SetConfig+0xc0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d003      	beq.n	8002e56 <TIM_OC5_SetConfig+0x76>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a14      	ldr	r2, [pc, #80]	; (8002ea4 <TIM_OC5_SetConfig+0xc4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d109      	bne.n	8002e6a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	621a      	str	r2, [r3, #32]
}
 8002e84:	bf00      	nop
 8002e86:	371c      	adds	r7, #28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	fffeff8f 	.word	0xfffeff8f
 8002e94:	40010000 	.word	0x40010000
 8002e98:	40010400 	.word	0x40010400
 8002e9c:	40014000 	.word	0x40014000
 8002ea0:	40014400 	.word	0x40014400
 8002ea4:	40014800 	.word	0x40014800

08002ea8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4b22      	ldr	r3, [pc, #136]	; (8002f5c <TIM_OC6_SetConfig+0xb4>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002eea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	051b      	lsls	r3, r3, #20
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a19      	ldr	r2, [pc, #100]	; (8002f60 <TIM_OC6_SetConfig+0xb8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00f      	beq.n	8002f20 <TIM_OC6_SetConfig+0x78>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a18      	ldr	r2, [pc, #96]	; (8002f64 <TIM_OC6_SetConfig+0xbc>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00b      	beq.n	8002f20 <TIM_OC6_SetConfig+0x78>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a17      	ldr	r2, [pc, #92]	; (8002f68 <TIM_OC6_SetConfig+0xc0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d007      	beq.n	8002f20 <TIM_OC6_SetConfig+0x78>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a16      	ldr	r2, [pc, #88]	; (8002f6c <TIM_OC6_SetConfig+0xc4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d003      	beq.n	8002f20 <TIM_OC6_SetConfig+0x78>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a15      	ldr	r2, [pc, #84]	; (8002f70 <TIM_OC6_SetConfig+0xc8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d109      	bne.n	8002f34 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	029b      	lsls	r3, r3, #10
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	621a      	str	r2, [r3, #32]
}
 8002f4e:	bf00      	nop
 8002f50:	371c      	adds	r7, #28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	feff8fff 	.word	0xfeff8fff
 8002f60:	40010000 	.word	0x40010000
 8002f64:	40010400 	.word	0x40010400
 8002f68:	40014000 	.word	0x40014000
 8002f6c:	40014400 	.word	0x40014400
 8002f70:	40014800 	.word	0x40014800

08002f74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f023 0201 	bic.w	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f023 030a 	bic.w	r3, r3, #10
 8002fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	621a      	str	r2, [r3, #32]
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b087      	sub	sp, #28
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	f023 0210 	bic.w	r2, r3, #16
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ffc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	031b      	lsls	r3, r3, #12
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4313      	orrs	r3, r2
 8003006:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800300e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	621a      	str	r2, [r3, #32]
}
 8003026:	bf00      	nop
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <TIM_ITRx_SetConfig+0x38>)
 8003048:	4013      	ands	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	f043 0307 	orr.w	r3, r3, #7
 8003056:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	609a      	str	r2, [r3, #8]
}
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	ffcfff8f 	.word	0xffcfff8f

08003070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800308a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	021a      	lsls	r2, r3, #8
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	431a      	orrs	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4313      	orrs	r3, r2
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	4313      	orrs	r3, r2
 800309c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	609a      	str	r2, [r3, #8]
}
 80030a4:	bf00      	nop
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	2201      	movs	r2, #1
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a1a      	ldr	r2, [r3, #32]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	43db      	mvns	r3, r3
 80030d2:	401a      	ands	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a1a      	ldr	r2, [r3, #32]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	fa01 f303 	lsl.w	r3, r1, r3
 80030e8:	431a      	orrs	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	621a      	str	r2, [r3, #32]
}
 80030ee:	bf00      	nop
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
	...

080030fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003110:	2302      	movs	r3, #2
 8003112:	e06d      	b.n	80031f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a30      	ldr	r2, [pc, #192]	; (80031fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d004      	beq.n	8003148 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a2f      	ldr	r2, [pc, #188]	; (8003200 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d108      	bne.n	800315a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800314e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003160:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4313      	orrs	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a20      	ldr	r2, [pc, #128]	; (80031fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d022      	beq.n	80031c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003186:	d01d      	beq.n	80031c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1d      	ldr	r2, [pc, #116]	; (8003204 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d018      	beq.n	80031c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a1c      	ldr	r2, [pc, #112]	; (8003208 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d013      	beq.n	80031c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1a      	ldr	r2, [pc, #104]	; (800320c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00e      	beq.n	80031c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a15      	ldr	r2, [pc, #84]	; (8003200 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d009      	beq.n	80031c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a16      	ldr	r2, [pc, #88]	; (8003210 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d004      	beq.n	80031c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a15      	ldr	r2, [pc, #84]	; (8003214 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d10c      	bne.n	80031de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	40010000 	.word	0x40010000
 8003200:	40010400 	.word	0x40010400
 8003204:	40000400 	.word	0x40000400
 8003208:	40000800 	.word	0x40000800
 800320c:	40000c00 	.word	0x40000c00
 8003210:	40001800 	.word	0x40001800
 8003214:	40014000 	.word	0x40014000

08003218 <__libc_init_array>:
 8003218:	b570      	push	{r4, r5, r6, lr}
 800321a:	4d0d      	ldr	r5, [pc, #52]	; (8003250 <__libc_init_array+0x38>)
 800321c:	4c0d      	ldr	r4, [pc, #52]	; (8003254 <__libc_init_array+0x3c>)
 800321e:	1b64      	subs	r4, r4, r5
 8003220:	10a4      	asrs	r4, r4, #2
 8003222:	2600      	movs	r6, #0
 8003224:	42a6      	cmp	r6, r4
 8003226:	d109      	bne.n	800323c <__libc_init_array+0x24>
 8003228:	4d0b      	ldr	r5, [pc, #44]	; (8003258 <__libc_init_array+0x40>)
 800322a:	4c0c      	ldr	r4, [pc, #48]	; (800325c <__libc_init_array+0x44>)
 800322c:	f000 f820 	bl	8003270 <_init>
 8003230:	1b64      	subs	r4, r4, r5
 8003232:	10a4      	asrs	r4, r4, #2
 8003234:	2600      	movs	r6, #0
 8003236:	42a6      	cmp	r6, r4
 8003238:	d105      	bne.n	8003246 <__libc_init_array+0x2e>
 800323a:	bd70      	pop	{r4, r5, r6, pc}
 800323c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003240:	4798      	blx	r3
 8003242:	3601      	adds	r6, #1
 8003244:	e7ee      	b.n	8003224 <__libc_init_array+0xc>
 8003246:	f855 3b04 	ldr.w	r3, [r5], #4
 800324a:	4798      	blx	r3
 800324c:	3601      	adds	r6, #1
 800324e:	e7f2      	b.n	8003236 <__libc_init_array+0x1e>
 8003250:	08003298 	.word	0x08003298
 8003254:	08003298 	.word	0x08003298
 8003258:	08003298 	.word	0x08003298
 800325c:	0800329c 	.word	0x0800329c

08003260 <memset>:
 8003260:	4402      	add	r2, r0
 8003262:	4603      	mov	r3, r0
 8003264:	4293      	cmp	r3, r2
 8003266:	d100      	bne.n	800326a <memset+0xa>
 8003268:	4770      	bx	lr
 800326a:	f803 1b01 	strb.w	r1, [r3], #1
 800326e:	e7f9      	b.n	8003264 <memset+0x4>

08003270 <_init>:
 8003270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003272:	bf00      	nop
 8003274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003276:	bc08      	pop	{r3}
 8003278:	469e      	mov	lr, r3
 800327a:	4770      	bx	lr

0800327c <_fini>:
 800327c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327e:	bf00      	nop
 8003280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003282:	bc08      	pop	{r3}
 8003284:	469e      	mov	lr, r3
 8003286:	4770      	bx	lr
