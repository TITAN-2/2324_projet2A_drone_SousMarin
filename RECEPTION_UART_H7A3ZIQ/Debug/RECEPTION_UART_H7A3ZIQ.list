
RECEPTION_UART_H7A3ZIQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000806c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800831c  0800831c  0001831c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080083c0  080083c0  000183c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080083c8  080083c8  000183c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080083cc  080083cc  000183cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  080083d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ec  24000060  08008430  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400034c  08008430  0002034c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001175d  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002505  00000000  00000000  0003182e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000b88  00000000  00000000  00033d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000008cb  00000000  00000000  000348c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002fdaf  00000000  00000000  0003518b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000125b8  00000000  00000000  00064f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00133225  00000000  00000000  000774f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003308  00000000  00000000  001aa718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007c  00000000  00000000  001ada20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000060 	.word	0x24000060
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008304 	.word	0x08008304

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000064 	.word	0x24000064
 80002ec:	08008304 	.word	0x08008304

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <RPICom_Init>:

//uint8_t uartRpiRxBuffer[UART_RPI_RX_BUFFER_SIZE];
//commandMsg binaryMessage;
RPICom_HandleTypeDef hRPICom;

void RPICom_Init(UART_HandleTypeDef* huart, UART_HandleTypeDef* huartDebug){
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
	hRPICom.huart = huart;
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <RPICom_Init+0x6c>)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6013      	str	r3, [r2, #0]
	hRPICom.huartDebug = huartDebug;
 800069c:	4a16      	ldr	r2, [pc, #88]	; (80006f8 <RPICom_Init+0x6c>)
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	6053      	str	r3, [r2, #4]
	memcpy(&(hRPICom.binaryMessage), NULL, sizeof(commandMsg));
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <RPICom_Init+0x6c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	3308      	adds	r3, #8
 80006a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ac:	6018      	str	r0, [r3, #0]
 80006ae:	3304      	adds	r3, #4
 80006b0:	8019      	strh	r1, [r3, #0]
	hRPICom.errorNumber = 0;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <RPICom_Init+0x6c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	739a      	strb	r2, [r3, #14]
	memcpy(hRPICom.RxBuffer, NULL, UART_RPI_RX_BUFFER_SIZE);
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <RPICom_Init+0x6c>)
 80006ba:	2100      	movs	r1, #0
 80006bc:	f103 020f 	add.w	r2, r3, #15
 80006c0:	460b      	mov	r3, r1
 80006c2:	cb03      	ldmia	r3!, {r0, r1}
 80006c4:	6010      	str	r0, [r2, #0]
 80006c6:	6051      	str	r1, [r2, #4]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	7213      	strb	r3, [r2, #8]
	memcpy(hRPICom.TxBuffer, NULL, UART_RPI_TX_BUFFER_SIZE);
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <RPICom_Init+0x6c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	f103 0418 	add.w	r4, r3, #24
 80006d4:	4615      	mov	r5, r2
 80006d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RPICom_UartActivate(&hRPICom);
 80006ea:	4803      	ldr	r0, [pc, #12]	; (80006f8 <RPICom_Init+0x6c>)
 80006ec:	f000 f806 	bl	80006fc <RPICom_UartActivate>
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bdb0      	pop	{r4, r5, r7, pc}
 80006f8:	2400007c 	.word	0x2400007c

080006fc <RPICom_UartActivate>:

void RPICom_UartActivate(RPICom_HandleTypeDef* hRPI){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(hRPI->huart, hRPI->RxBuffer, UART_RPI_RX_BUFFER_SIZE);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6818      	ldr	r0, [r3, #0]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	330f      	adds	r3, #15
 800070c:	2209      	movs	r2, #9
 800070e:	4619      	mov	r1, r3
 8000710:	f004 fcf2 	bl	80050f8 <HAL_UART_Receive_IT>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <checkSum>:

uint8_t checkSum(void){
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
	uint8_t checkSum = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < UART_RPI_RX_BUFFER_SIZE-1; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	e00a      	b.n	8000742 <checkSum+0x26>
		checkSum ^= hRPICom.RxBuffer[i];
 800072c:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <checkSum+0x3c>)
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	4413      	add	r3, r2
 8000732:	330f      	adds	r3, #15
 8000734:	781a      	ldrb	r2, [r3, #0]
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4053      	eors	r3, r2
 800073a:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < UART_RPI_RX_BUFFER_SIZE-1; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	2b07      	cmp	r3, #7
 8000746:	ddf1      	ble.n	800072c <checkSum+0x10>
	}
	return checkSum;
 8000748:	79fb      	ldrb	r3, [r7, #7]
}
 800074a:	4618      	mov	r0, r3
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	2400007c 	.word	0x2400007c

0800075c <RPICom_DecodeBinaryMessage>:

void RPICom_DecodeBinaryMessage(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af02      	add	r7, sp, #8
	hRPICom.errorNumber = '0';
 8000762:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 8000764:	2230      	movs	r2, #48	; 0x30
 8000766:	739a      	strb	r2, [r3, #14]
	// Check Header
	if (HEADER_CheckValue1 != hRPICom.RxBuffer[0] || HEADER_CheckValue2 != hRPICom.RxBuffer[1]){//On envoie une erreur à la raspberry
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 800076a:	7bdb      	ldrb	r3, [r3, #15]
 800076c:	2bff      	cmp	r3, #255	; 0xff
 800076e:	d103      	bne.n	8000778 <RPICom_DecodeBinaryMessage+0x1c>
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 8000772:	7c1b      	ldrb	r3, [r3, #16]
 8000774:	2bfe      	cmp	r3, #254	; 0xfe
 8000776:	d002      	beq.n	800077e <RPICom_DecodeBinaryMessage+0x22>
		hRPICom.errorNumber ='1';
 8000778:	4b25      	ldr	r3, [pc, #148]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 800077a:	2231      	movs	r2, #49	; 0x31
 800077c:	739a      	strb	r2, [r3, #14]
	}
	// Check Length
	if (UART_RPI_RX_BUFFER_SIZE != hRPICom.RxBuffer[2]){// Il nous manque des informations
 800077e:	4b24      	ldr	r3, [pc, #144]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 8000780:	7c5b      	ldrb	r3, [r3, #17]
 8000782:	2b09      	cmp	r3, #9
 8000784:	d002      	beq.n	800078c <RPICom_DecodeBinaryMessage+0x30>
		hRPICom.errorNumber='2';
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 8000788:	2232      	movs	r2, #50	; 0x32
 800078a:	739a      	strb	r2, [r3, #14]
	}

	hRPICom.binaryMessage.thrust = hRPICom.RxBuffer[3];
 800078c:	4b20      	ldr	r3, [pc, #128]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 800078e:	7c9a      	ldrb	r2, [r3, #18]
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 8000792:	721a      	strb	r2, [r3, #8]
	hRPICom.binaryMessage.angle = hRPICom.RxBuffer[4];
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 8000796:	7cdb      	ldrb	r3, [r3, #19]
 8000798:	b25a      	sxtb	r2, r3
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 800079c:	725a      	strb	r2, [r3, #9]
	hRPICom.binaryMessage.depth = ((uint16_t)hRPICom.RxBuffer[5]+(uint16_t)(hRPICom.RxBuffer[6]<<8));
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 80007a0:	7d1b      	ldrb	r3, [r3, #20]
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 80007a6:	7d5b      	ldrb	r3, [r3, #21]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	021b      	lsls	r3, r3, #8
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	4413      	add	r3, r2
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 80007b4:	815a      	strh	r2, [r3, #10]
	hRPICom.binaryMessage.paquetNumber = hRPICom.RxBuffer[7];
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 80007b8:	7d9a      	ldrb	r2, [r3, #22]
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 80007bc:	731a      	strb	r2, [r3, #12]

	//Checksum
	if(checkSum() !=  hRPICom.RxBuffer[8]){
 80007be:	f7ff ffad 	bl	800071c <checkSum>
 80007c2:	4603      	mov	r3, r0
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 80007c8:	7ddb      	ldrb	r3, [r3, #23]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d002      	beq.n	80007d4 <RPICom_DecodeBinaryMessage+0x78>
		hRPICom.errorNumber='3';
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 80007d0:	2233      	movs	r2, #51	; 0x33
 80007d2:	739a      	strb	r2, [r3, #14]
	}

	//Response RPI
	uint8_t stringLength = snprintf((char *)hRPICom.TxBuffer, UART_RPI_TX_BUFFER_SIZE, "Paquet: %u\r\nStatut: %c\r\n", hRPICom.binaryMessage.paquetNumber,hRPICom.errorNumber);
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 80007d6:	7b1b      	ldrb	r3, [r3, #12]
 80007d8:	461a      	mov	r2, r3
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 80007dc:	7b9b      	ldrb	r3, [r3, #14]
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	4613      	mov	r3, r2
 80007e2:	4a0c      	ldr	r2, [pc, #48]	; (8000814 <RPICom_DecodeBinaryMessage+0xb8>)
 80007e4:	2140      	movs	r1, #64	; 0x40
 80007e6:	480c      	ldr	r0, [pc, #48]	; (8000818 <RPICom_DecodeBinaryMessage+0xbc>)
 80007e8:	f007 f8d4 	bl	8007994 <sniprintf>
 80007ec:	4603      	mov	r3, r0
 80007ee:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(hRPICom.huartDebug, hRPICom.TxBuffer, stringLength, 10);
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 80007f2:	6858      	ldr	r0, [r3, #4]
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	230a      	movs	r3, #10
 80007fa:	4907      	ldr	r1, [pc, #28]	; (8000818 <RPICom_DecodeBinaryMessage+0xbc>)
 80007fc:	f004 fbee 	bl	8004fdc <HAL_UART_Transmit>
	RPICom_UartActivate(&hRPICom);
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <RPICom_DecodeBinaryMessage+0xb4>)
 8000802:	f7ff ff7b 	bl	80006fc <RPICom_UartActivate>
	// Vous avez maintenant un message complet dans la structure BinaryMessage
	// Vous pouvez faire quelque chose avec ces données, par exemple, appeler une fonction de traitement


	//Process(&binaryMessage);
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2400007c 	.word	0x2400007c
 8000814:	0800831c 	.word	0x0800831c
 8000818:	24000094 	.word	0x24000094

0800081c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08e      	sub	sp, #56	; 0x38
 8000820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b80      	ldr	r3, [pc, #512]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000834:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000838:	4a7e      	ldr	r2, [pc, #504]	; (8000a34 <MX_GPIO_Init+0x218>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000842:	4b7c      	ldr	r3, [pc, #496]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000844:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	623b      	str	r3, [r7, #32]
 800084e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000850:	4b78      	ldr	r3, [pc, #480]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000852:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000856:	4a77      	ldr	r2, [pc, #476]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000858:	f043 0320 	orr.w	r3, r3, #32
 800085c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000860:	4b74      	ldr	r3, [pc, #464]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000862:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000866:	f003 0320 	and.w	r3, r3, #32
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	4b71      	ldr	r3, [pc, #452]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000870:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000874:	4a6f      	ldr	r2, [pc, #444]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800087e:	4b6d      	ldr	r3, [pc, #436]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000880:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b69      	ldr	r3, [pc, #420]	; (8000a34 <MX_GPIO_Init+0x218>)
 800088e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000892:	4a68      	ldr	r2, [pc, #416]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800089c:	4b65      	ldr	r3, [pc, #404]	; (8000a34 <MX_GPIO_Init+0x218>)
 800089e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b62      	ldr	r3, [pc, #392]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b0:	4a60      	ldr	r2, [pc, #384]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008b2:	f043 0302 	orr.w	r3, r3, #2
 80008b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ba:	4b5e      	ldr	r3, [pc, #376]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c0:	f003 0302 	and.w	r3, r3, #2
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c8:	4b5a      	ldr	r3, [pc, #360]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ce:	4a59      	ldr	r2, [pc, #356]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008d8:	4b56      	ldr	r3, [pc, #344]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e6:	4b53      	ldr	r3, [pc, #332]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ec:	4a51      	ldr	r2, [pc, #324]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008f6:	4b4f      	ldr	r3, [pc, #316]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000904:	4b4b      	ldr	r3, [pc, #300]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000906:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800090a:	4a4a      	ldr	r2, [pc, #296]	; (8000a34 <MX_GPIO_Init+0x218>)
 800090c:	f043 0310 	orr.w	r3, r3, #16
 8000910:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000914:	4b47      	ldr	r3, [pc, #284]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000916:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800091a:	f003 0310 	and.w	r3, r3, #16
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000928:	4843      	ldr	r0, [pc, #268]	; (8000a38 <MX_GPIO_Init+0x21c>)
 800092a:	f001 fcdb 	bl	80022e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f244 0101 	movw	r1, #16385	; 0x4001
 8000934:	4841      	ldr	r0, [pc, #260]	; (8000a3c <MX_GPIO_Init+0x220>)
 8000936:	f001 fcd5 	bl	80022e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2102      	movs	r1, #2
 800093e:	4840      	ldr	r0, [pc, #256]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000940:	f001 fcd0 	bl	80022e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	4619      	mov	r1, r3
 8000958:	483a      	ldr	r0, [pc, #232]	; (8000a44 <MX_GPIO_Init+0x228>)
 800095a:	f001 fb13 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800095e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	4830      	ldr	r0, [pc, #192]	; (8000a38 <MX_GPIO_Init+0x21c>)
 8000978:	f001 fb04 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800097c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	4619      	mov	r1, r3
 8000994:	4829      	ldr	r0, [pc, #164]	; (8000a3c <MX_GPIO_Init+0x220>)
 8000996:	f001 faf5 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800099a:	2380      	movs	r3, #128	; 0x80
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800099e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ac:	4619      	mov	r1, r3
 80009ae:	4826      	ldr	r0, [pc, #152]	; (8000a48 <MX_GPIO_Init+0x22c>)
 80009b0:	f001 fae8 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c6:	4619      	mov	r1, r3
 80009c8:	4820      	ldr	r0, [pc, #128]	; (8000a4c <MX_GPIO_Init+0x230>)
 80009ca:	f001 fadb 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80009ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80009e0:	230a      	movs	r3, #10
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	4619      	mov	r1, r3
 80009ea:	4818      	ldr	r0, [pc, #96]	; (8000a4c <MX_GPIO_Init+0x230>)
 80009ec:	f001 faca 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80009f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4619      	mov	r1, r3
 8000a08:	4810      	ldr	r0, [pc, #64]	; (8000a4c <MX_GPIO_Init+0x230>)
 8000a0a:	f001 fabb 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	4619      	mov	r1, r3
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000a26:	f001 faad 	bl	8001f84 <HAL_GPIO_Init>

}
 8000a2a:	bf00      	nop
 8000a2c:	3738      	adds	r7, #56	; 0x38
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	58024400 	.word	0x58024400
 8000a38:	58021400 	.word	0x58021400
 8000a3c:	58020400 	.word	0x58020400
 8000a40:	58021000 	.word	0x58021000
 8000a44:	58020800 	.word	0x58020800
 8000a48:	58021800 	.word	0x58021800
 8000a4c:	58020000 	.word	0x58020000

08000a50 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a54:	f000 fb6c 	bl	8001130 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a58:	f000 f82c 	bl	8000ab4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a5c:	f7ff fede 	bl	800081c <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000a60:	f000 f9ec 	bl	8000e3c <MX_USART3_UART_Init>
	MX_USB_OTG_HS_USB_Init();
 8000a64:	f000 fb32 	bl	80010cc <MX_USB_OTG_HS_USB_Init>
	MX_UART4_Init();
 8000a68:	f000 f99c 	bl	8000da4 <MX_UART4_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, "Starting...\r\n", 13, 10);
 8000a6c:	230a      	movs	r3, #10
 8000a6e:	220d      	movs	r2, #13
 8000a70:	490b      	ldr	r1, [pc, #44]	; (8000aa0 <main+0x50>)
 8000a72:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <main+0x54>)
 8000a74:	f004 fab2 	bl	8004fdc <HAL_UART_Transmit>
	RPICom_Init(&huart4, &huart3);
 8000a78:	490a      	ldr	r1, [pc, #40]	; (8000aa4 <main+0x54>)
 8000a7a:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <main+0x58>)
 8000a7c:	f7ff fe06 	bl	800068c <RPICom_Init>
	HAL_UART_Transmit(&huart3, "Init Done\r\n", 11, 10);
 8000a80:	230a      	movs	r3, #10
 8000a82:	220b      	movs	r2, #11
 8000a84:	4909      	ldr	r1, [pc, #36]	; (8000aac <main+0x5c>)
 8000a86:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <main+0x54>)
 8000a88:	f004 faa8 	bl	8004fdc <HAL_UART_Transmit>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); //toggle the user led Green which is connected to GPIO PA5
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <main+0x60>)
 8000a90:	f001 fc41 	bl	8002316 <HAL_GPIO_TogglePin>
		HAL_Delay(500); //delay 500 millisecond
 8000a94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a98:	f000 fbdc 	bl	8001254 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); //toggle the user led Green which is connected to GPIO PA5
 8000a9c:	e7f6      	b.n	8000a8c <main+0x3c>
 8000a9e:	bf00      	nop
 8000aa0:	08008338 	.word	0x08008338
 8000aa4:	2400016c 	.word	0x2400016c
 8000aa8:	240000d8 	.word	0x240000d8
 8000aac:	08008348 	.word	0x08008348
 8000ab0:	58020400 	.word	0x58020400

08000ab4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b09c      	sub	sp, #112	; 0x70
 8000ab8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	224c      	movs	r2, #76	; 0x4c
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f006 ff9a 	bl	80079fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2220      	movs	r2, #32
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f006 ff94 	bl	80079fc <memset>

	/*AXI clock gating */
	RCC->CKGAENR = 0xFFFFFFFF;
 8000ad4:	4b30      	ldr	r3, [pc, #192]	; (8000b98 <SystemClock_Config+0xe4>)
 8000ad6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ada:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ade:	2004      	movs	r0, #4
 8000ae0:	f001 fc34 	bl	800234c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	4b2c      	ldr	r3, [pc, #176]	; (8000b9c <SystemClock_Config+0xe8>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a2b      	ldr	r2, [pc, #172]	; (8000b9c <SystemClock_Config+0xe8>)
 8000aee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <SystemClock_Config+0xe8>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b00:	bf00      	nop
 8000b02:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <SystemClock_Config+0xe8>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b0e:	d1f8      	bne.n	8000b02 <SystemClock_Config+0x4e>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b10:	2321      	movs	r3, #33	; 0x21
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b14:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b22:	2302      	movs	r3, #2
 8000b24:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 24;
 8000b2a:	2318      	movs	r3, #24
 8000b2c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b32:	2304      	movs	r3, #4
 8000b34:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 fc58 	bl	8002400 <HAL_RCC_OscConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0xa6>
	{
		Error_Handler();
 8000b56:	f000 f823 	bl	8000ba0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5a:	233f      	movs	r3, #63	; 0x3f
 8000b5c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 f870 	bl	8002c64 <HAL_RCC_ClockConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0xda>
	{
		Error_Handler();
 8000b8a:	f000 f809 	bl	8000ba0 <Error_Handler>
	}
}
 8000b8e:	bf00      	nop
 8000b90:	3770      	adds	r7, #112	; 0x70
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	58024400 	.word	0x58024400
 8000b9c:	58024800 	.word	0x58024800

08000ba0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <Error_Handler+0x8>
	...

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <HAL_MspInit+0x30>)
 8000bb4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000bb8:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <HAL_MspInit+0x30>)
 8000bba:	f043 0302 	orr.w	r3, r3, #2
 8000bbe:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_MspInit+0x30>)
 8000bc4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000bc8:	f003 0302 	and.w	r3, r3, #2
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	58024400 	.word	0x58024400

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <NMI_Handler+0x4>

08000be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <UsageFault_Handler+0x4>

08000bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2c:	f000 faf2 	bl	8001214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <UART4_IRQHandler+0x10>)
 8000c3a:	f004 faa9 	bl	8005190 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  /* USER CODE END UART4_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	240000d8 	.word	0x240000d8

08000c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c50:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <_sbrk+0x5c>)
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <_sbrk+0x60>)
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <_sbrk+0x64>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <_sbrk+0x68>)
 8000c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d207      	bcs.n	8000c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c78:	f006 fec8 	bl	8007a0c <__errno>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	220c      	movs	r2, #12
 8000c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c86:	e009      	b.n	8000c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <_sbrk+0x64>)
 8000c98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	24100000 	.word	0x24100000
 8000ca8:	00000400 	.word	0x00000400
 8000cac:	240000d4 	.word	0x240000d4
 8000cb0:	24000350 	.word	0x24000350

08000cb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <SystemInit+0xd0>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cbe:	4a31      	ldr	r2, [pc, #196]	; (8000d84 <SystemInit+0xd0>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cc8:	4b2f      	ldr	r3, [pc, #188]	; (8000d88 <SystemInit+0xd4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 030f 	and.w	r3, r3, #15
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d807      	bhi.n	8000ce4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cd4:	4b2c      	ldr	r3, [pc, #176]	; (8000d88 <SystemInit+0xd4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f023 030f 	bic.w	r3, r3, #15
 8000cdc:	4a2a      	ldr	r2, [pc, #168]	; (8000d88 <SystemInit+0xd4>)
 8000cde:	f043 0303 	orr.w	r3, r3, #3
 8000ce2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ce4:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <SystemInit+0xd8>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a28      	ldr	r2, [pc, #160]	; (8000d8c <SystemInit+0xd8>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cf0:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <SystemInit+0xd8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000cf6:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <SystemInit+0xd8>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4924      	ldr	r1, [pc, #144]	; (8000d8c <SystemInit+0xd8>)
 8000cfc:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <SystemInit+0xdc>)
 8000cfe:	4013      	ands	r3, r2
 8000d00:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <SystemInit+0xd4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 030c 	and.w	r3, r3, #12
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d007      	beq.n	8000d1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <SystemInit+0xd4>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f023 030f 	bic.w	r3, r3, #15
 8000d16:	4a1c      	ldr	r2, [pc, #112]	; (8000d88 <SystemInit+0xd4>)
 8000d18:	f043 0303 	orr.w	r3, r3, #3
 8000d1c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <SystemInit+0xd8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <SystemInit+0xd8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <SystemInit+0xd8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <SystemInit+0xd8>)
 8000d32:	4a18      	ldr	r2, [pc, #96]	; (8000d94 <SystemInit+0xe0>)
 8000d34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <SystemInit+0xd8>)
 8000d38:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <SystemInit+0xe4>)
 8000d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <SystemInit+0xd8>)
 8000d3e:	4a17      	ldr	r2, [pc, #92]	; (8000d9c <SystemInit+0xe8>)
 8000d40:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <SystemInit+0xd8>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <SystemInit+0xd8>)
 8000d4a:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <SystemInit+0xe8>)
 8000d4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <SystemInit+0xd8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <SystemInit+0xd8>)
 8000d56:	4a11      	ldr	r2, [pc, #68]	; (8000d9c <SystemInit+0xe8>)
 8000d58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <SystemInit+0xd8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <SystemInit+0xd8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <SystemInit+0xd8>)
 8000d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <SystemInit+0xd8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <SystemInit+0xec>)
 8000d74:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d78:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00
 8000d88:	52002000 	.word	0x52002000
 8000d8c:	58024400 	.word	0x58024400
 8000d90:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d94:	02020200 	.word	0x02020200
 8000d98:	01ff0000 	.word	0x01ff0000
 8000d9c:	01010280 	.word	0x01010280
 8000da0:	52004000 	.word	0x52004000

08000da4 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000da8:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <MX_UART4_Init+0x90>)
 8000daa:	4a23      	ldr	r2, [pc, #140]	; (8000e38 <MX_UART4_Init+0x94>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <MX_UART4_Init+0x90>)
 8000db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_UART4_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <MX_UART4_Init+0x90>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_UART4_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_UART4_Init+0x90>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_UART4_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_UART4_Init+0x90>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <MX_UART4_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_UART4_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <MX_UART4_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000dec:	4811      	ldr	r0, [pc, #68]	; (8000e34 <MX_UART4_Init+0x90>)
 8000dee:	f004 f8a5 	bl	8004f3c <HAL_UART_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000df8:	f7ff fed2 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	480d      	ldr	r0, [pc, #52]	; (8000e34 <MX_UART4_Init+0x90>)
 8000e00:	f006 fcfd 	bl	80077fe <HAL_UARTEx_SetTxFifoThreshold>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000e0a:	f7ff fec9 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4808      	ldr	r0, [pc, #32]	; (8000e34 <MX_UART4_Init+0x90>)
 8000e12:	f006 fd32 	bl	800787a <HAL_UARTEx_SetRxFifoThreshold>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000e1c:	f7ff fec0 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <MX_UART4_Init+0x90>)
 8000e22:	f006 fcb3 	bl	800778c <HAL_UARTEx_DisableFifoMode>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000e2c:	f7ff feb8 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	240000d8 	.word	0x240000d8
 8000e38:	40004c00 	.word	0x40004c00

08000e3c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e40:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e42:	4a23      	ldr	r2, [pc, #140]	; (8000ed0 <MX_USART3_UART_Init+0x94>)
 8000e44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e62:	220c      	movs	r2, #12
 8000e64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e66:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e72:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e84:	4811      	ldr	r0, [pc, #68]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e86:	f004 f859 	bl	8004f3c <HAL_UART_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e90:	f7ff fe86 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e94:	2100      	movs	r1, #0
 8000e96:	480d      	ldr	r0, [pc, #52]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000e98:	f006 fcb1 	bl	80077fe <HAL_UARTEx_SetTxFifoThreshold>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ea2:	f7ff fe7d 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4808      	ldr	r0, [pc, #32]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000eaa:	f006 fce6 	bl	800787a <HAL_UARTEx_SetRxFifoThreshold>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000eb4:	f7ff fe74 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000eb8:	4804      	ldr	r0, [pc, #16]	; (8000ecc <MX_USART3_UART_Init+0x90>)
 8000eba:	f006 fc67 	bl	800778c <HAL_UARTEx_DisableFifoMode>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ec4:	f7ff fe6c 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2400016c 	.word	0x2400016c
 8000ed0:	40004800 	.word	0x40004800

08000ed4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b0be      	sub	sp, #248	; 0xf8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eec:	f107 0320 	add.w	r3, r7, #32
 8000ef0:	22c0      	movs	r2, #192	; 0xc0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f006 fd81 	bl	80079fc <memset>
  if(uartHandle->Instance==UART4)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a63      	ldr	r2, [pc, #396]	; (800108c <HAL_UART_MspInit+0x1b8>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d172      	bne.n	8000fea <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000f04:	f04f 0202 	mov.w	r2, #2
 8000f08:	f04f 0300 	mov.w	r3, #0
 8000f0c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f16:	f107 0320 	add.w	r3, r7, #32
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f002 fa2e 	bl	800337c <HAL_RCCEx_PeriphCLKConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f26:	f7ff fe3b 	bl	8000ba0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f2a:	4b59      	ldr	r3, [pc, #356]	; (8001090 <HAL_UART_MspInit+0x1bc>)
 8000f2c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f30:	4a57      	ldr	r2, [pc, #348]	; (8001090 <HAL_UART_MspInit+0x1bc>)
 8000f32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f36:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000f3a:	4b55      	ldr	r3, [pc, #340]	; (8001090 <HAL_UART_MspInit+0x1bc>)
 8000f3c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f44:	61fb      	str	r3, [r7, #28]
 8000f46:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	4b51      	ldr	r3, [pc, #324]	; (8001090 <HAL_UART_MspInit+0x1bc>)
 8000f4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f4e:	4a50      	ldr	r2, [pc, #320]	; (8001090 <HAL_UART_MspInit+0x1bc>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f58:	4b4d      	ldr	r3, [pc, #308]	; (8001090 <HAL_UART_MspInit+0x1bc>)
 8000f5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f66:	4b4a      	ldr	r3, [pc, #296]	; (8001090 <HAL_UART_MspInit+0x1bc>)
 8000f68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f6c:	4a48      	ldr	r2, [pc, #288]	; (8001090 <HAL_UART_MspInit+0x1bc>)
 8000f6e:	f043 0308 	orr.w	r3, r3, #8
 8000f72:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f76:	4b46      	ldr	r3, [pc, #280]	; (8001090 <HAL_UART_MspInit+0x1bc>)
 8000f78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f7c:	f003 0308 	and.w	r3, r3, #8
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f84:	2301      	movs	r3, #1
 8000f86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f9c:	2308      	movs	r3, #8
 8000f9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	483a      	ldr	r0, [pc, #232]	; (8001094 <HAL_UART_MspInit+0x1c0>)
 8000faa:	f000 ffeb 	bl	8001f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fcc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4831      	ldr	r0, [pc, #196]	; (8001098 <HAL_UART_MspInit+0x1c4>)
 8000fd4:	f000 ffd6 	bl	8001f84 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2034      	movs	r0, #52	; 0x34
 8000fde:	f000 fa38 	bl	8001452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000fe2:	2034      	movs	r0, #52	; 0x34
 8000fe4:	f000 fa4f 	bl	8001486 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000fe8:	e04b      	b.n	8001082 <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART3)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a2b      	ldr	r2, [pc, #172]	; (800109c <HAL_UART_MspInit+0x1c8>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d146      	bne.n	8001082 <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ff4:	f04f 0202 	mov.w	r2, #2
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001006:	f107 0320 	add.w	r3, r7, #32
 800100a:	4618      	mov	r0, r3
 800100c:	f002 f9b6 	bl	800337c <HAL_RCCEx_PeriphCLKConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_UART_MspInit+0x146>
      Error_Handler();
 8001016:	f7ff fdc3 	bl	8000ba0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800101a:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <HAL_UART_MspInit+0x1bc>)
 800101c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001020:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <HAL_UART_MspInit+0x1bc>)
 8001022:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001026:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <HAL_UART_MspInit+0x1bc>)
 800102c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001030:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <HAL_UART_MspInit+0x1bc>)
 800103a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800103e:	4a14      	ldr	r2, [pc, #80]	; (8001090 <HAL_UART_MspInit+0x1bc>)
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HAL_UART_MspInit+0x1bc>)
 800104a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001056:	f44f 7340 	mov.w	r3, #768	; 0x300
 800105a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001070:	2307      	movs	r3, #7
 8001072:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001076:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800107a:	4619      	mov	r1, r3
 800107c:	4806      	ldr	r0, [pc, #24]	; (8001098 <HAL_UART_MspInit+0x1c4>)
 800107e:	f000 ff81 	bl	8001f84 <HAL_GPIO_Init>
}
 8001082:	bf00      	nop
 8001084:	37f8      	adds	r7, #248	; 0xf8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40004c00 	.word	0x40004c00
 8001090:	58024400 	.word	0x58024400
 8001094:	58020000 	.word	0x58020000
 8001098:	58020c00 	.word	0x58020c00
 800109c:	40004800 	.word	0x40004800

080010a0 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <HAL_UART_RxCpltCallback+0x24>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d104      	bne.n	80010bc <HAL_UART_RxCpltCallback+0x1c>
	{
		RPICom_DecodeBinaryMessage();
 80010b2:	f7ff fb53 	bl	800075c <RPICom_DecodeBinaryMessage>
		RPICom_UartActivate(&hRPICom);
 80010b6:	4804      	ldr	r0, [pc, #16]	; (80010c8 <HAL_UART_RxCpltCallback+0x28>)
 80010b8:	f7ff fb20 	bl	80006fc <RPICom_UartActivate>
	}
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40004c00 	.word	0x40004c00
 80010c8:	2400007c 	.word	0x2400007c

080010cc <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001114 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010e0:	f7ff fde8 	bl	8000cb4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e4:	480c      	ldr	r0, [pc, #48]	; (8001118 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010e6:	490d      	ldr	r1, [pc, #52]	; (800111c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e8:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ec:	e002      	b.n	80010f4 <LoopCopyDataInit>

080010ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f2:	3304      	adds	r3, #4

080010f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80010f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f8:	d3f9      	bcc.n	80010ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010fc:	4c0a      	ldr	r4, [pc, #40]	; (8001128 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001100:	e001      	b.n	8001106 <LoopFillZerobss>

08001102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001104:	3204      	adds	r2, #4

08001106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001108:	d3fb      	bcc.n	8001102 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800110a:	f006 fc85 	bl	8007a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110e:	f7ff fc9f 	bl	8000a50 <main>
  bx  lr
 8001112:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001114:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001118:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800111c:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001120:	080083d0 	.word	0x080083d0
  ldr r2, =_sbss
 8001124:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001128:	2400034c 	.word	0x2400034c

0800112c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800112c:	e7fe      	b.n	800112c <ADC_IRQHandler>
	...

08001130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001136:	2003      	movs	r0, #3
 8001138:	f000 f980 	bl	800143c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800113c:	f001 ff48 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8001140:	4602      	mov	r2, r0
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_Init+0x68>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	0a1b      	lsrs	r3, r3, #8
 8001148:	f003 030f 	and.w	r3, r3, #15
 800114c:	4913      	ldr	r1, [pc, #76]	; (800119c <HAL_Init+0x6c>)
 800114e:	5ccb      	ldrb	r3, [r1, r3]
 8001150:	f003 031f 	and.w	r3, r3, #31
 8001154:	fa22 f303 	lsr.w	r3, r2, r3
 8001158:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <HAL_Init+0x68>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	4a0e      	ldr	r2, [pc, #56]	; (800119c <HAL_Init+0x6c>)
 8001164:	5cd3      	ldrb	r3, [r2, r3]
 8001166:	f003 031f 	and.w	r3, r3, #31
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	fa22 f303 	lsr.w	r3, r2, r3
 8001170:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <HAL_Init+0x70>)
 8001172:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001174:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <HAL_Init+0x74>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800117a:	2000      	movs	r0, #0
 800117c:	f000 f814 	bl	80011a8 <HAL_InitTick>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e002      	b.n	8001190 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800118a:	f7ff fd0f 	bl	8000bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	58024400 	.word	0x58024400
 800119c:	08008354 	.word	0x08008354
 80011a0:	24000004 	.word	0x24000004
 80011a4:	24000000 	.word	0x24000000

080011a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_InitTick+0x60>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e021      	b.n	8001200 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <HAL_InitTick+0x64>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_InitTick+0x60>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f965 	bl	80014a2 <HAL_SYSTICK_Config>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e00e      	b.n	8001200 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b0f      	cmp	r3, #15
 80011e6:	d80a      	bhi.n	80011fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e8:	2200      	movs	r2, #0
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f0:	f000 f92f 	bl	8001452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f4:	4a06      	ldr	r2, [pc, #24]	; (8001210 <HAL_InitTick+0x68>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e000      	b.n	8001200 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	2400000c 	.word	0x2400000c
 800120c:	24000000 	.word	0x24000000
 8001210:	24000008 	.word	0x24000008

08001214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x20>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x24>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_IncTick+0x24>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	2400000c 	.word	0x2400000c
 8001238:	24000200 	.word	0x24000200

0800123c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return uwTick;
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <HAL_GetTick+0x14>)
 8001242:	681b      	ldr	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	24000200 	.word	0x24000200

08001254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800125c:	f7ff ffee 	bl	800123c <HAL_GetTick>
 8001260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800126c:	d005      	beq.n	800127a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <HAL_Delay+0x44>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800127a:	bf00      	nop
 800127c:	f7ff ffde 	bl	800123c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	429a      	cmp	r2, r3
 800128a:	d8f7      	bhi.n	800127c <HAL_Delay+0x28>
  {
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2400000c 	.word	0x2400000c

0800129c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <__NVIC_SetPriorityGrouping+0x40>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b8:	4013      	ands	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ca:	4a04      	ldr	r2, [pc, #16]	; (80012dc <__NVIC_SetPriorityGrouping+0x40>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	60d3      	str	r3, [r2, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00
 80012e0:	05fa0000 	.word	0x05fa0000

080012e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <__NVIC_GetPriorityGrouping+0x18>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	f003 0307 	and.w	r3, r3, #7
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800130a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800130e:	2b00      	cmp	r3, #0
 8001310:	db0b      	blt.n	800132a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	f003 021f 	and.w	r2, r3, #31
 8001318:	4907      	ldr	r1, [pc, #28]	; (8001338 <__NVIC_EnableIRQ+0x38>)
 800131a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	2001      	movs	r0, #1
 8001322:	fa00 f202 	lsl.w	r2, r0, r2
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000e100 	.word	0xe000e100

0800133c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001348:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0a      	blt.n	8001366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	490c      	ldr	r1, [pc, #48]	; (8001388 <__NVIC_SetPriority+0x4c>)
 8001356:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	440b      	add	r3, r1
 8001360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001364:	e00a      	b.n	800137c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4908      	ldr	r1, [pc, #32]	; (800138c <__NVIC_SetPriority+0x50>)
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	3b04      	subs	r3, #4
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	440b      	add	r3, r1
 800137a:	761a      	strb	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	; 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0307 	rsb	r3, r3, #7
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	bf28      	it	cs
 80013ae:	2304      	movcs	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d902      	bls.n	80013c0 <NVIC_EncodePriority+0x30>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3b03      	subs	r3, #3
 80013be:	e000      	b.n	80013c2 <NVIC_EncodePriority+0x32>
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	4313      	orrs	r3, r2
         );
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001408:	d301      	bcc.n	800140e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140a:	2301      	movs	r3, #1
 800140c:	e00f      	b.n	800142e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <SysTick_Config+0x40>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001416:	210f      	movs	r1, #15
 8001418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800141c:	f7ff ff8e 	bl	800133c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <SysTick_Config+0x40>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <SysTick_Config+0x40>)
 8001428:	2207      	movs	r2, #7
 800142a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000e010 	.word	0xe000e010

0800143c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff29 	bl	800129c <__NVIC_SetPriorityGrouping>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001460:	f7ff ff40 	bl	80012e4 <__NVIC_GetPriorityGrouping>
 8001464:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f7ff ff90 	bl	8001390 <NVIC_EncodePriority>
 8001470:	4602      	mov	r2, r0
 8001472:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff5f 	bl	800133c <__NVIC_SetPriority>
}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff33 	bl	8001300 <__NVIC_EnableIRQ>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffa4 	bl	80013f8 <SysTick_Config>
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80014c4:	f7ff feba 	bl	800123c <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e2dc      	b.n	8001a8e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d008      	beq.n	80014f2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2280      	movs	r2, #128	; 0x80
 80014e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e2cd      	b.n	8001a8e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a76      	ldr	r2, [pc, #472]	; (80016d0 <HAL_DMA_Abort+0x214>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d04a      	beq.n	8001592 <HAL_DMA_Abort+0xd6>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a74      	ldr	r2, [pc, #464]	; (80016d4 <HAL_DMA_Abort+0x218>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d045      	beq.n	8001592 <HAL_DMA_Abort+0xd6>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a73      	ldr	r2, [pc, #460]	; (80016d8 <HAL_DMA_Abort+0x21c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d040      	beq.n	8001592 <HAL_DMA_Abort+0xd6>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a71      	ldr	r2, [pc, #452]	; (80016dc <HAL_DMA_Abort+0x220>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d03b      	beq.n	8001592 <HAL_DMA_Abort+0xd6>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a70      	ldr	r2, [pc, #448]	; (80016e0 <HAL_DMA_Abort+0x224>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d036      	beq.n	8001592 <HAL_DMA_Abort+0xd6>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a6e      	ldr	r2, [pc, #440]	; (80016e4 <HAL_DMA_Abort+0x228>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d031      	beq.n	8001592 <HAL_DMA_Abort+0xd6>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a6d      	ldr	r2, [pc, #436]	; (80016e8 <HAL_DMA_Abort+0x22c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d02c      	beq.n	8001592 <HAL_DMA_Abort+0xd6>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a6b      	ldr	r2, [pc, #428]	; (80016ec <HAL_DMA_Abort+0x230>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d027      	beq.n	8001592 <HAL_DMA_Abort+0xd6>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a6a      	ldr	r2, [pc, #424]	; (80016f0 <HAL_DMA_Abort+0x234>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d022      	beq.n	8001592 <HAL_DMA_Abort+0xd6>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a68      	ldr	r2, [pc, #416]	; (80016f4 <HAL_DMA_Abort+0x238>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d01d      	beq.n	8001592 <HAL_DMA_Abort+0xd6>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a67      	ldr	r2, [pc, #412]	; (80016f8 <HAL_DMA_Abort+0x23c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d018      	beq.n	8001592 <HAL_DMA_Abort+0xd6>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a65      	ldr	r2, [pc, #404]	; (80016fc <HAL_DMA_Abort+0x240>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_DMA_Abort+0xd6>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a64      	ldr	r2, [pc, #400]	; (8001700 <HAL_DMA_Abort+0x244>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d00e      	beq.n	8001592 <HAL_DMA_Abort+0xd6>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a62      	ldr	r2, [pc, #392]	; (8001704 <HAL_DMA_Abort+0x248>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d009      	beq.n	8001592 <HAL_DMA_Abort+0xd6>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a61      	ldr	r2, [pc, #388]	; (8001708 <HAL_DMA_Abort+0x24c>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d004      	beq.n	8001592 <HAL_DMA_Abort+0xd6>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a5f      	ldr	r2, [pc, #380]	; (800170c <HAL_DMA_Abort+0x250>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d101      	bne.n	8001596 <HAL_DMA_Abort+0xda>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_DMA_Abort+0xdc>
 8001596:	2300      	movs	r3, #0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d013      	beq.n	80015c4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 021e 	bic.w	r2, r2, #30
 80015aa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	695a      	ldr	r2, [r3, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015ba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	e00a      	b.n	80015da <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 020e 	bic.w	r2, r2, #14
 80015d2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a3c      	ldr	r2, [pc, #240]	; (80016d0 <HAL_DMA_Abort+0x214>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d072      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a3a      	ldr	r2, [pc, #232]	; (80016d4 <HAL_DMA_Abort+0x218>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d06d      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a39      	ldr	r2, [pc, #228]	; (80016d8 <HAL_DMA_Abort+0x21c>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d068      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a37      	ldr	r2, [pc, #220]	; (80016dc <HAL_DMA_Abort+0x220>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d063      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a36      	ldr	r2, [pc, #216]	; (80016e0 <HAL_DMA_Abort+0x224>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d05e      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a34      	ldr	r2, [pc, #208]	; (80016e4 <HAL_DMA_Abort+0x228>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d059      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a33      	ldr	r2, [pc, #204]	; (80016e8 <HAL_DMA_Abort+0x22c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d054      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a31      	ldr	r2, [pc, #196]	; (80016ec <HAL_DMA_Abort+0x230>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d04f      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a30      	ldr	r2, [pc, #192]	; (80016f0 <HAL_DMA_Abort+0x234>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d04a      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a2e      	ldr	r2, [pc, #184]	; (80016f4 <HAL_DMA_Abort+0x238>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d045      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a2d      	ldr	r2, [pc, #180]	; (80016f8 <HAL_DMA_Abort+0x23c>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d040      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a2b      	ldr	r2, [pc, #172]	; (80016fc <HAL_DMA_Abort+0x240>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d03b      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a2a      	ldr	r2, [pc, #168]	; (8001700 <HAL_DMA_Abort+0x244>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d036      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a28      	ldr	r2, [pc, #160]	; (8001704 <HAL_DMA_Abort+0x248>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d031      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a27      	ldr	r2, [pc, #156]	; (8001708 <HAL_DMA_Abort+0x24c>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d02c      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a25      	ldr	r2, [pc, #148]	; (800170c <HAL_DMA_Abort+0x250>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d027      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a24      	ldr	r2, [pc, #144]	; (8001710 <HAL_DMA_Abort+0x254>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d022      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a22      	ldr	r2, [pc, #136]	; (8001714 <HAL_DMA_Abort+0x258>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d01d      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a21      	ldr	r2, [pc, #132]	; (8001718 <HAL_DMA_Abort+0x25c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d018      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a1f      	ldr	r2, [pc, #124]	; (800171c <HAL_DMA_Abort+0x260>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d013      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1e      	ldr	r2, [pc, #120]	; (8001720 <HAL_DMA_Abort+0x264>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d00e      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a1c      	ldr	r2, [pc, #112]	; (8001724 <HAL_DMA_Abort+0x268>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d009      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a1b      	ldr	r2, [pc, #108]	; (8001728 <HAL_DMA_Abort+0x26c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d004      	beq.n	80016ca <HAL_DMA_Abort+0x20e>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a19      	ldr	r2, [pc, #100]	; (800172c <HAL_DMA_Abort+0x270>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d132      	bne.n	8001730 <HAL_DMA_Abort+0x274>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e031      	b.n	8001732 <HAL_DMA_Abort+0x276>
 80016ce:	bf00      	nop
 80016d0:	40020010 	.word	0x40020010
 80016d4:	40020028 	.word	0x40020028
 80016d8:	40020040 	.word	0x40020040
 80016dc:	40020058 	.word	0x40020058
 80016e0:	40020070 	.word	0x40020070
 80016e4:	40020088 	.word	0x40020088
 80016e8:	400200a0 	.word	0x400200a0
 80016ec:	400200b8 	.word	0x400200b8
 80016f0:	40020410 	.word	0x40020410
 80016f4:	40020428 	.word	0x40020428
 80016f8:	40020440 	.word	0x40020440
 80016fc:	40020458 	.word	0x40020458
 8001700:	40020470 	.word	0x40020470
 8001704:	40020488 	.word	0x40020488
 8001708:	400204a0 	.word	0x400204a0
 800170c:	400204b8 	.word	0x400204b8
 8001710:	58025408 	.word	0x58025408
 8001714:	5802541c 	.word	0x5802541c
 8001718:	58025430 	.word	0x58025430
 800171c:	58025444 	.word	0x58025444
 8001720:	58025458 	.word	0x58025458
 8001724:	5802546c 	.word	0x5802546c
 8001728:	58025480 	.word	0x58025480
 800172c:	58025494 	.word	0x58025494
 8001730:	2300      	movs	r3, #0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001740:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001744:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a6d      	ldr	r2, [pc, #436]	; (8001900 <HAL_DMA_Abort+0x444>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d04a      	beq.n	80017e6 <HAL_DMA_Abort+0x32a>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a6b      	ldr	r2, [pc, #428]	; (8001904 <HAL_DMA_Abort+0x448>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d045      	beq.n	80017e6 <HAL_DMA_Abort+0x32a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a6a      	ldr	r2, [pc, #424]	; (8001908 <HAL_DMA_Abort+0x44c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d040      	beq.n	80017e6 <HAL_DMA_Abort+0x32a>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a68      	ldr	r2, [pc, #416]	; (800190c <HAL_DMA_Abort+0x450>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d03b      	beq.n	80017e6 <HAL_DMA_Abort+0x32a>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a67      	ldr	r2, [pc, #412]	; (8001910 <HAL_DMA_Abort+0x454>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d036      	beq.n	80017e6 <HAL_DMA_Abort+0x32a>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a65      	ldr	r2, [pc, #404]	; (8001914 <HAL_DMA_Abort+0x458>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d031      	beq.n	80017e6 <HAL_DMA_Abort+0x32a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a64      	ldr	r2, [pc, #400]	; (8001918 <HAL_DMA_Abort+0x45c>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d02c      	beq.n	80017e6 <HAL_DMA_Abort+0x32a>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a62      	ldr	r2, [pc, #392]	; (800191c <HAL_DMA_Abort+0x460>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d027      	beq.n	80017e6 <HAL_DMA_Abort+0x32a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a61      	ldr	r2, [pc, #388]	; (8001920 <HAL_DMA_Abort+0x464>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d022      	beq.n	80017e6 <HAL_DMA_Abort+0x32a>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a5f      	ldr	r2, [pc, #380]	; (8001924 <HAL_DMA_Abort+0x468>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d01d      	beq.n	80017e6 <HAL_DMA_Abort+0x32a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a5e      	ldr	r2, [pc, #376]	; (8001928 <HAL_DMA_Abort+0x46c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d018      	beq.n	80017e6 <HAL_DMA_Abort+0x32a>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a5c      	ldr	r2, [pc, #368]	; (800192c <HAL_DMA_Abort+0x470>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_DMA_Abort+0x32a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a5b      	ldr	r2, [pc, #364]	; (8001930 <HAL_DMA_Abort+0x474>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d00e      	beq.n	80017e6 <HAL_DMA_Abort+0x32a>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a59      	ldr	r2, [pc, #356]	; (8001934 <HAL_DMA_Abort+0x478>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d009      	beq.n	80017e6 <HAL_DMA_Abort+0x32a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a58      	ldr	r2, [pc, #352]	; (8001938 <HAL_DMA_Abort+0x47c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d004      	beq.n	80017e6 <HAL_DMA_Abort+0x32a>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a56      	ldr	r2, [pc, #344]	; (800193c <HAL_DMA_Abort+0x480>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d108      	bne.n	80017f8 <HAL_DMA_Abort+0x33c>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0201 	bic.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	e007      	b.n	8001808 <HAL_DMA_Abort+0x34c>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0201 	bic.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001808:	e013      	b.n	8001832 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800180a:	f7ff fd17 	bl	800123c <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b05      	cmp	r3, #5
 8001816:	d90c      	bls.n	8001832 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2220      	movs	r2, #32
 800181c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2203      	movs	r2, #3
 8001822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e12d      	b.n	8001a8e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1e5      	bne.n	800180a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a2f      	ldr	r2, [pc, #188]	; (8001900 <HAL_DMA_Abort+0x444>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d04a      	beq.n	80018de <HAL_DMA_Abort+0x422>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a2d      	ldr	r2, [pc, #180]	; (8001904 <HAL_DMA_Abort+0x448>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d045      	beq.n	80018de <HAL_DMA_Abort+0x422>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a2c      	ldr	r2, [pc, #176]	; (8001908 <HAL_DMA_Abort+0x44c>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d040      	beq.n	80018de <HAL_DMA_Abort+0x422>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a2a      	ldr	r2, [pc, #168]	; (800190c <HAL_DMA_Abort+0x450>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d03b      	beq.n	80018de <HAL_DMA_Abort+0x422>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a29      	ldr	r2, [pc, #164]	; (8001910 <HAL_DMA_Abort+0x454>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d036      	beq.n	80018de <HAL_DMA_Abort+0x422>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a27      	ldr	r2, [pc, #156]	; (8001914 <HAL_DMA_Abort+0x458>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d031      	beq.n	80018de <HAL_DMA_Abort+0x422>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a26      	ldr	r2, [pc, #152]	; (8001918 <HAL_DMA_Abort+0x45c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d02c      	beq.n	80018de <HAL_DMA_Abort+0x422>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a24      	ldr	r2, [pc, #144]	; (800191c <HAL_DMA_Abort+0x460>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d027      	beq.n	80018de <HAL_DMA_Abort+0x422>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_DMA_Abort+0x464>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d022      	beq.n	80018de <HAL_DMA_Abort+0x422>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a21      	ldr	r2, [pc, #132]	; (8001924 <HAL_DMA_Abort+0x468>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d01d      	beq.n	80018de <HAL_DMA_Abort+0x422>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a20      	ldr	r2, [pc, #128]	; (8001928 <HAL_DMA_Abort+0x46c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d018      	beq.n	80018de <HAL_DMA_Abort+0x422>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a1e      	ldr	r2, [pc, #120]	; (800192c <HAL_DMA_Abort+0x470>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d013      	beq.n	80018de <HAL_DMA_Abort+0x422>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a1d      	ldr	r2, [pc, #116]	; (8001930 <HAL_DMA_Abort+0x474>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d00e      	beq.n	80018de <HAL_DMA_Abort+0x422>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1b      	ldr	r2, [pc, #108]	; (8001934 <HAL_DMA_Abort+0x478>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d009      	beq.n	80018de <HAL_DMA_Abort+0x422>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a1a      	ldr	r2, [pc, #104]	; (8001938 <HAL_DMA_Abort+0x47c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d004      	beq.n	80018de <HAL_DMA_Abort+0x422>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a18      	ldr	r2, [pc, #96]	; (800193c <HAL_DMA_Abort+0x480>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d101      	bne.n	80018e2 <HAL_DMA_Abort+0x426>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_DMA_Abort+0x428>
 80018e2:	2300      	movs	r3, #0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d02b      	beq.n	8001940 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	223f      	movs	r2, #63	; 0x3f
 80018f8:	409a      	lsls	r2, r3
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	e02a      	b.n	8001956 <HAL_DMA_Abort+0x49a>
 8001900:	40020010 	.word	0x40020010
 8001904:	40020028 	.word	0x40020028
 8001908:	40020040 	.word	0x40020040
 800190c:	40020058 	.word	0x40020058
 8001910:	40020070 	.word	0x40020070
 8001914:	40020088 	.word	0x40020088
 8001918:	400200a0 	.word	0x400200a0
 800191c:	400200b8 	.word	0x400200b8
 8001920:	40020410 	.word	0x40020410
 8001924:	40020428 	.word	0x40020428
 8001928:	40020440 	.word	0x40020440
 800192c:	40020458 	.word	0x40020458
 8001930:	40020470 	.word	0x40020470
 8001934:	40020488 	.word	0x40020488
 8001938:	400204a0 	.word	0x400204a0
 800193c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001944:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194a:	f003 031f 	and.w	r3, r3, #31
 800194e:	2201      	movs	r2, #1
 8001950:	409a      	lsls	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a4f      	ldr	r2, [pc, #316]	; (8001a98 <HAL_DMA_Abort+0x5dc>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d072      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a4d      	ldr	r2, [pc, #308]	; (8001a9c <HAL_DMA_Abort+0x5e0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d06d      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a4c      	ldr	r2, [pc, #304]	; (8001aa0 <HAL_DMA_Abort+0x5e4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d068      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a4a      	ldr	r2, [pc, #296]	; (8001aa4 <HAL_DMA_Abort+0x5e8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d063      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a49      	ldr	r2, [pc, #292]	; (8001aa8 <HAL_DMA_Abort+0x5ec>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d05e      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a47      	ldr	r2, [pc, #284]	; (8001aac <HAL_DMA_Abort+0x5f0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d059      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a46      	ldr	r2, [pc, #280]	; (8001ab0 <HAL_DMA_Abort+0x5f4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d054      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a44      	ldr	r2, [pc, #272]	; (8001ab4 <HAL_DMA_Abort+0x5f8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d04f      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a43      	ldr	r2, [pc, #268]	; (8001ab8 <HAL_DMA_Abort+0x5fc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d04a      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a41      	ldr	r2, [pc, #260]	; (8001abc <HAL_DMA_Abort+0x600>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d045      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a40      	ldr	r2, [pc, #256]	; (8001ac0 <HAL_DMA_Abort+0x604>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d040      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a3e      	ldr	r2, [pc, #248]	; (8001ac4 <HAL_DMA_Abort+0x608>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d03b      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a3d      	ldr	r2, [pc, #244]	; (8001ac8 <HAL_DMA_Abort+0x60c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d036      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a3b      	ldr	r2, [pc, #236]	; (8001acc <HAL_DMA_Abort+0x610>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d031      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a3a      	ldr	r2, [pc, #232]	; (8001ad0 <HAL_DMA_Abort+0x614>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d02c      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a38      	ldr	r2, [pc, #224]	; (8001ad4 <HAL_DMA_Abort+0x618>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d027      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a37      	ldr	r2, [pc, #220]	; (8001ad8 <HAL_DMA_Abort+0x61c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d022      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a35      	ldr	r2, [pc, #212]	; (8001adc <HAL_DMA_Abort+0x620>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d01d      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a34      	ldr	r2, [pc, #208]	; (8001ae0 <HAL_DMA_Abort+0x624>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d018      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a32      	ldr	r2, [pc, #200]	; (8001ae4 <HAL_DMA_Abort+0x628>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a31      	ldr	r2, [pc, #196]	; (8001ae8 <HAL_DMA_Abort+0x62c>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d00e      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a2f      	ldr	r2, [pc, #188]	; (8001aec <HAL_DMA_Abort+0x630>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d009      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a2e      	ldr	r2, [pc, #184]	; (8001af0 <HAL_DMA_Abort+0x634>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d004      	beq.n	8001a46 <HAL_DMA_Abort+0x58a>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a2c      	ldr	r2, [pc, #176]	; (8001af4 <HAL_DMA_Abort+0x638>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d101      	bne.n	8001a4a <HAL_DMA_Abort+0x58e>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_DMA_Abort+0x590>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d015      	beq.n	8001a7c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001a58:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00c      	beq.n	8001a7c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a70:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001a7a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40020010 	.word	0x40020010
 8001a9c:	40020028 	.word	0x40020028
 8001aa0:	40020040 	.word	0x40020040
 8001aa4:	40020058 	.word	0x40020058
 8001aa8:	40020070 	.word	0x40020070
 8001aac:	40020088 	.word	0x40020088
 8001ab0:	400200a0 	.word	0x400200a0
 8001ab4:	400200b8 	.word	0x400200b8
 8001ab8:	40020410 	.word	0x40020410
 8001abc:	40020428 	.word	0x40020428
 8001ac0:	40020440 	.word	0x40020440
 8001ac4:	40020458 	.word	0x40020458
 8001ac8:	40020470 	.word	0x40020470
 8001acc:	40020488 	.word	0x40020488
 8001ad0:	400204a0 	.word	0x400204a0
 8001ad4:	400204b8 	.word	0x400204b8
 8001ad8:	58025408 	.word	0x58025408
 8001adc:	5802541c 	.word	0x5802541c
 8001ae0:	58025430 	.word	0x58025430
 8001ae4:	58025444 	.word	0x58025444
 8001ae8:	58025458 	.word	0x58025458
 8001aec:	5802546c 	.word	0x5802546c
 8001af0:	58025480 	.word	0x58025480
 8001af4:	58025494 	.word	0x58025494

08001af8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e237      	b.n	8001f7a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d004      	beq.n	8001b20 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e22c      	b.n	8001f7a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a5c      	ldr	r2, [pc, #368]	; (8001c98 <HAL_DMA_Abort_IT+0x1a0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d04a      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0xc8>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a5b      	ldr	r2, [pc, #364]	; (8001c9c <HAL_DMA_Abort_IT+0x1a4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d045      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0xc8>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a59      	ldr	r2, [pc, #356]	; (8001ca0 <HAL_DMA_Abort_IT+0x1a8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d040      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0xc8>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_DMA_Abort_IT+0x1ac>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d03b      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0xc8>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a56      	ldr	r2, [pc, #344]	; (8001ca8 <HAL_DMA_Abort_IT+0x1b0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d036      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0xc8>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a55      	ldr	r2, [pc, #340]	; (8001cac <HAL_DMA_Abort_IT+0x1b4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d031      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0xc8>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a53      	ldr	r2, [pc, #332]	; (8001cb0 <HAL_DMA_Abort_IT+0x1b8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d02c      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0xc8>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a52      	ldr	r2, [pc, #328]	; (8001cb4 <HAL_DMA_Abort_IT+0x1bc>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d027      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0xc8>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a50      	ldr	r2, [pc, #320]	; (8001cb8 <HAL_DMA_Abort_IT+0x1c0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d022      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0xc8>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a4f      	ldr	r2, [pc, #316]	; (8001cbc <HAL_DMA_Abort_IT+0x1c4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d01d      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0xc8>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a4d      	ldr	r2, [pc, #308]	; (8001cc0 <HAL_DMA_Abort_IT+0x1c8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d018      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0xc8>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a4c      	ldr	r2, [pc, #304]	; (8001cc4 <HAL_DMA_Abort_IT+0x1cc>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d013      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0xc8>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a4a      	ldr	r2, [pc, #296]	; (8001cc8 <HAL_DMA_Abort_IT+0x1d0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d00e      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0xc8>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a49      	ldr	r2, [pc, #292]	; (8001ccc <HAL_DMA_Abort_IT+0x1d4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d009      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0xc8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a47      	ldr	r2, [pc, #284]	; (8001cd0 <HAL_DMA_Abort_IT+0x1d8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d004      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0xc8>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a46      	ldr	r2, [pc, #280]	; (8001cd4 <HAL_DMA_Abort_IT+0x1dc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d101      	bne.n	8001bc4 <HAL_DMA_Abort_IT+0xcc>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <HAL_DMA_Abort_IT+0xce>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 8086 	beq.w	8001cd8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2204      	movs	r2, #4
 8001bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a2f      	ldr	r2, [pc, #188]	; (8001c98 <HAL_DMA_Abort_IT+0x1a0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d04a      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x17c>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a2e      	ldr	r2, [pc, #184]	; (8001c9c <HAL_DMA_Abort_IT+0x1a4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d045      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x17c>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a2c      	ldr	r2, [pc, #176]	; (8001ca0 <HAL_DMA_Abort_IT+0x1a8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d040      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x17c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a2b      	ldr	r2, [pc, #172]	; (8001ca4 <HAL_DMA_Abort_IT+0x1ac>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d03b      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x17c>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a29      	ldr	r2, [pc, #164]	; (8001ca8 <HAL_DMA_Abort_IT+0x1b0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d036      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x17c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a28      	ldr	r2, [pc, #160]	; (8001cac <HAL_DMA_Abort_IT+0x1b4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d031      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x17c>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a26      	ldr	r2, [pc, #152]	; (8001cb0 <HAL_DMA_Abort_IT+0x1b8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d02c      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x17c>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a25      	ldr	r2, [pc, #148]	; (8001cb4 <HAL_DMA_Abort_IT+0x1bc>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d027      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x17c>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a23      	ldr	r2, [pc, #140]	; (8001cb8 <HAL_DMA_Abort_IT+0x1c0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d022      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x17c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a22      	ldr	r2, [pc, #136]	; (8001cbc <HAL_DMA_Abort_IT+0x1c4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d01d      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x17c>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a20      	ldr	r2, [pc, #128]	; (8001cc0 <HAL_DMA_Abort_IT+0x1c8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d018      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x17c>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a1f      	ldr	r2, [pc, #124]	; (8001cc4 <HAL_DMA_Abort_IT+0x1cc>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d013      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x17c>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a1d      	ldr	r2, [pc, #116]	; (8001cc8 <HAL_DMA_Abort_IT+0x1d0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d00e      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x17c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ccc <HAL_DMA_Abort_IT+0x1d4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d009      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x17c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <HAL_DMA_Abort_IT+0x1d8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d004      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x17c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a19      	ldr	r2, [pc, #100]	; (8001cd4 <HAL_DMA_Abort_IT+0x1dc>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d108      	bne.n	8001c86 <HAL_DMA_Abort_IT+0x18e>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0201 	bic.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	e178      	b.n	8001f78 <HAL_DMA_Abort_IT+0x480>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0201 	bic.w	r2, r2, #1
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	e16f      	b.n	8001f78 <HAL_DMA_Abort_IT+0x480>
 8001c98:	40020010 	.word	0x40020010
 8001c9c:	40020028 	.word	0x40020028
 8001ca0:	40020040 	.word	0x40020040
 8001ca4:	40020058 	.word	0x40020058
 8001ca8:	40020070 	.word	0x40020070
 8001cac:	40020088 	.word	0x40020088
 8001cb0:	400200a0 	.word	0x400200a0
 8001cb4:	400200b8 	.word	0x400200b8
 8001cb8:	40020410 	.word	0x40020410
 8001cbc:	40020428 	.word	0x40020428
 8001cc0:	40020440 	.word	0x40020440
 8001cc4:	40020458 	.word	0x40020458
 8001cc8:	40020470 	.word	0x40020470
 8001ccc:	40020488 	.word	0x40020488
 8001cd0:	400204a0 	.word	0x400204a0
 8001cd4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 020e 	bic.w	r2, r2, #14
 8001ce6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a6c      	ldr	r2, [pc, #432]	; (8001ea0 <HAL_DMA_Abort_IT+0x3a8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d04a      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x290>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a6b      	ldr	r2, [pc, #428]	; (8001ea4 <HAL_DMA_Abort_IT+0x3ac>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d045      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x290>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a69      	ldr	r2, [pc, #420]	; (8001ea8 <HAL_DMA_Abort_IT+0x3b0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d040      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x290>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a68      	ldr	r2, [pc, #416]	; (8001eac <HAL_DMA_Abort_IT+0x3b4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d03b      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x290>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a66      	ldr	r2, [pc, #408]	; (8001eb0 <HAL_DMA_Abort_IT+0x3b8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d036      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x290>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a65      	ldr	r2, [pc, #404]	; (8001eb4 <HAL_DMA_Abort_IT+0x3bc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d031      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x290>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a63      	ldr	r2, [pc, #396]	; (8001eb8 <HAL_DMA_Abort_IT+0x3c0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d02c      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x290>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a62      	ldr	r2, [pc, #392]	; (8001ebc <HAL_DMA_Abort_IT+0x3c4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d027      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x290>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a60      	ldr	r2, [pc, #384]	; (8001ec0 <HAL_DMA_Abort_IT+0x3c8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d022      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x290>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a5f      	ldr	r2, [pc, #380]	; (8001ec4 <HAL_DMA_Abort_IT+0x3cc>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d01d      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x290>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a5d      	ldr	r2, [pc, #372]	; (8001ec8 <HAL_DMA_Abort_IT+0x3d0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d018      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x290>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a5c      	ldr	r2, [pc, #368]	; (8001ecc <HAL_DMA_Abort_IT+0x3d4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d013      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x290>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a5a      	ldr	r2, [pc, #360]	; (8001ed0 <HAL_DMA_Abort_IT+0x3d8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00e      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x290>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a59      	ldr	r2, [pc, #356]	; (8001ed4 <HAL_DMA_Abort_IT+0x3dc>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d009      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x290>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a57      	ldr	r2, [pc, #348]	; (8001ed8 <HAL_DMA_Abort_IT+0x3e0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d004      	beq.n	8001d88 <HAL_DMA_Abort_IT+0x290>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a56      	ldr	r2, [pc, #344]	; (8001edc <HAL_DMA_Abort_IT+0x3e4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d108      	bne.n	8001d9a <HAL_DMA_Abort_IT+0x2a2>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0201 	bic.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	e007      	b.n	8001daa <HAL_DMA_Abort_IT+0x2b2>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0201 	bic.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a3c      	ldr	r2, [pc, #240]	; (8001ea0 <HAL_DMA_Abort_IT+0x3a8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d072      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a3a      	ldr	r2, [pc, #232]	; (8001ea4 <HAL_DMA_Abort_IT+0x3ac>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d06d      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a39      	ldr	r2, [pc, #228]	; (8001ea8 <HAL_DMA_Abort_IT+0x3b0>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d068      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a37      	ldr	r2, [pc, #220]	; (8001eac <HAL_DMA_Abort_IT+0x3b4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d063      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a36      	ldr	r2, [pc, #216]	; (8001eb0 <HAL_DMA_Abort_IT+0x3b8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d05e      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a34      	ldr	r2, [pc, #208]	; (8001eb4 <HAL_DMA_Abort_IT+0x3bc>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d059      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a33      	ldr	r2, [pc, #204]	; (8001eb8 <HAL_DMA_Abort_IT+0x3c0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d054      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a31      	ldr	r2, [pc, #196]	; (8001ebc <HAL_DMA_Abort_IT+0x3c4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d04f      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a30      	ldr	r2, [pc, #192]	; (8001ec0 <HAL_DMA_Abort_IT+0x3c8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d04a      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a2e      	ldr	r2, [pc, #184]	; (8001ec4 <HAL_DMA_Abort_IT+0x3cc>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d045      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a2d      	ldr	r2, [pc, #180]	; (8001ec8 <HAL_DMA_Abort_IT+0x3d0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d040      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a2b      	ldr	r2, [pc, #172]	; (8001ecc <HAL_DMA_Abort_IT+0x3d4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d03b      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a2a      	ldr	r2, [pc, #168]	; (8001ed0 <HAL_DMA_Abort_IT+0x3d8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d036      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a28      	ldr	r2, [pc, #160]	; (8001ed4 <HAL_DMA_Abort_IT+0x3dc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d031      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a27      	ldr	r2, [pc, #156]	; (8001ed8 <HAL_DMA_Abort_IT+0x3e0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d02c      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a25      	ldr	r2, [pc, #148]	; (8001edc <HAL_DMA_Abort_IT+0x3e4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d027      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a24      	ldr	r2, [pc, #144]	; (8001ee0 <HAL_DMA_Abort_IT+0x3e8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d022      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a22      	ldr	r2, [pc, #136]	; (8001ee4 <HAL_DMA_Abort_IT+0x3ec>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d01d      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a21      	ldr	r2, [pc, #132]	; (8001ee8 <HAL_DMA_Abort_IT+0x3f0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d018      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1f      	ldr	r2, [pc, #124]	; (8001eec <HAL_DMA_Abort_IT+0x3f4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1e      	ldr	r2, [pc, #120]	; (8001ef0 <HAL_DMA_Abort_IT+0x3f8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00e      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1c      	ldr	r2, [pc, #112]	; (8001ef4 <HAL_DMA_Abort_IT+0x3fc>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d009      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1b      	ldr	r2, [pc, #108]	; (8001ef8 <HAL_DMA_Abort_IT+0x400>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d004      	beq.n	8001e9a <HAL_DMA_Abort_IT+0x3a2>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a19      	ldr	r2, [pc, #100]	; (8001efc <HAL_DMA_Abort_IT+0x404>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d132      	bne.n	8001f00 <HAL_DMA_Abort_IT+0x408>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e031      	b.n	8001f02 <HAL_DMA_Abort_IT+0x40a>
 8001e9e:	bf00      	nop
 8001ea0:	40020010 	.word	0x40020010
 8001ea4:	40020028 	.word	0x40020028
 8001ea8:	40020040 	.word	0x40020040
 8001eac:	40020058 	.word	0x40020058
 8001eb0:	40020070 	.word	0x40020070
 8001eb4:	40020088 	.word	0x40020088
 8001eb8:	400200a0 	.word	0x400200a0
 8001ebc:	400200b8 	.word	0x400200b8
 8001ec0:	40020410 	.word	0x40020410
 8001ec4:	40020428 	.word	0x40020428
 8001ec8:	40020440 	.word	0x40020440
 8001ecc:	40020458 	.word	0x40020458
 8001ed0:	40020470 	.word	0x40020470
 8001ed4:	40020488 	.word	0x40020488
 8001ed8:	400204a0 	.word	0x400204a0
 8001edc:	400204b8 	.word	0x400204b8
 8001ee0:	58025408 	.word	0x58025408
 8001ee4:	5802541c 	.word	0x5802541c
 8001ee8:	58025430 	.word	0x58025430
 8001eec:	58025444 	.word	0x58025444
 8001ef0:	58025458 	.word	0x58025458
 8001ef4:	5802546c 	.word	0x5802546c
 8001ef8:	58025480 	.word	0x58025480
 8001efc:	58025494 	.word	0x58025494
 8001f00:	2300      	movs	r3, #0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d028      	beq.n	8001f58 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f14:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	2201      	movs	r2, #1
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f34:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00c      	beq.n	8001f58 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f4c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f56:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop

08001f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	; 0x24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f92:	4b89      	ldr	r3, [pc, #548]	; (80021b8 <HAL_GPIO_Init+0x234>)
 8001f94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f96:	e194      	b.n	80022c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 8186 	beq.w	80022bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d005      	beq.n	8001fc8 <HAL_GPIO_Init+0x44>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d130      	bne.n	800202a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ffe:	2201      	movs	r2, #1
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	091b      	lsrs	r3, r3, #4
 8002014:	f003 0201 	and.w	r2, r3, #1
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	2b03      	cmp	r3, #3
 8002034:	d017      	beq.n	8002066 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2203      	movs	r2, #3
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d123      	bne.n	80020ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	08da      	lsrs	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3208      	adds	r2, #8
 800207a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	220f      	movs	r2, #15
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	08da      	lsrs	r2, r3, #3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3208      	adds	r2, #8
 80020b4:	69b9      	ldr	r1, [r7, #24]
 80020b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	2203      	movs	r2, #3
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0203 	and.w	r2, r3, #3
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 80e0 	beq.w	80022bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fc:	4b2f      	ldr	r3, [pc, #188]	; (80021bc <HAL_GPIO_Init+0x238>)
 80020fe:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002102:	4a2e      	ldr	r2, [pc, #184]	; (80021bc <HAL_GPIO_Init+0x238>)
 8002104:	f043 0302 	orr.w	r3, r3, #2
 8002108:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800210c:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_GPIO_Init+0x238>)
 800210e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800211a:	4a29      	ldr	r2, [pc, #164]	; (80021c0 <HAL_GPIO_Init+0x23c>)
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	3302      	adds	r3, #2
 8002122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	220f      	movs	r2, #15
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a20      	ldr	r2, [pc, #128]	; (80021c4 <HAL_GPIO_Init+0x240>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d052      	beq.n	80021ec <HAL_GPIO_Init+0x268>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a1f      	ldr	r2, [pc, #124]	; (80021c8 <HAL_GPIO_Init+0x244>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d031      	beq.n	80021b2 <HAL_GPIO_Init+0x22e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a1e      	ldr	r2, [pc, #120]	; (80021cc <HAL_GPIO_Init+0x248>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d02b      	beq.n	80021ae <HAL_GPIO_Init+0x22a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a1d      	ldr	r2, [pc, #116]	; (80021d0 <HAL_GPIO_Init+0x24c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d025      	beq.n	80021aa <HAL_GPIO_Init+0x226>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <HAL_GPIO_Init+0x250>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d01f      	beq.n	80021a6 <HAL_GPIO_Init+0x222>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a1b      	ldr	r2, [pc, #108]	; (80021d8 <HAL_GPIO_Init+0x254>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d019      	beq.n	80021a2 <HAL_GPIO_Init+0x21e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a1a      	ldr	r2, [pc, #104]	; (80021dc <HAL_GPIO_Init+0x258>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_GPIO_Init+0x21a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a19      	ldr	r2, [pc, #100]	; (80021e0 <HAL_GPIO_Init+0x25c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00d      	beq.n	800219a <HAL_GPIO_Init+0x216>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a18      	ldr	r2, [pc, #96]	; (80021e4 <HAL_GPIO_Init+0x260>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d007      	beq.n	8002196 <HAL_GPIO_Init+0x212>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a17      	ldr	r2, [pc, #92]	; (80021e8 <HAL_GPIO_Init+0x264>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d101      	bne.n	8002192 <HAL_GPIO_Init+0x20e>
 800218e:	2309      	movs	r3, #9
 8002190:	e02d      	b.n	80021ee <HAL_GPIO_Init+0x26a>
 8002192:	230a      	movs	r3, #10
 8002194:	e02b      	b.n	80021ee <HAL_GPIO_Init+0x26a>
 8002196:	2308      	movs	r3, #8
 8002198:	e029      	b.n	80021ee <HAL_GPIO_Init+0x26a>
 800219a:	2307      	movs	r3, #7
 800219c:	e027      	b.n	80021ee <HAL_GPIO_Init+0x26a>
 800219e:	2306      	movs	r3, #6
 80021a0:	e025      	b.n	80021ee <HAL_GPIO_Init+0x26a>
 80021a2:	2305      	movs	r3, #5
 80021a4:	e023      	b.n	80021ee <HAL_GPIO_Init+0x26a>
 80021a6:	2304      	movs	r3, #4
 80021a8:	e021      	b.n	80021ee <HAL_GPIO_Init+0x26a>
 80021aa:	2303      	movs	r3, #3
 80021ac:	e01f      	b.n	80021ee <HAL_GPIO_Init+0x26a>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e01d      	b.n	80021ee <HAL_GPIO_Init+0x26a>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e01b      	b.n	80021ee <HAL_GPIO_Init+0x26a>
 80021b6:	bf00      	nop
 80021b8:	58000080 	.word	0x58000080
 80021bc:	58024400 	.word	0x58024400
 80021c0:	58000400 	.word	0x58000400
 80021c4:	58020000 	.word	0x58020000
 80021c8:	58020400 	.word	0x58020400
 80021cc:	58020800 	.word	0x58020800
 80021d0:	58020c00 	.word	0x58020c00
 80021d4:	58021000 	.word	0x58021000
 80021d8:	58021400 	.word	0x58021400
 80021dc:	58021800 	.word	0x58021800
 80021e0:	58021c00 	.word	0x58021c00
 80021e4:	58022000 	.word	0x58022000
 80021e8:	58022400 	.word	0x58022400
 80021ec:	2300      	movs	r3, #0
 80021ee:	69fa      	ldr	r2, [r7, #28]
 80021f0:	f002 0203 	and.w	r2, r2, #3
 80021f4:	0092      	lsls	r2, r2, #2
 80021f6:	4093      	lsls	r3, r2
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021fe:	4938      	ldr	r1, [pc, #224]	; (80022e0 <HAL_GPIO_Init+0x35c>)
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800220c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002232:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800223a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002260:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	3301      	adds	r3, #1
 80022c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f47f ae63 	bne.w	8001f98 <HAL_GPIO_Init+0x14>
  }
}
 80022d2:	bf00      	nop
 80022d4:	bf00      	nop
 80022d6:	3724      	adds	r7, #36	; 0x24
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	58000400 	.word	0x58000400

080022e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	807b      	strh	r3, [r7, #2]
 80022f0:	4613      	mov	r3, r2
 80022f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022f4:	787b      	ldrb	r3, [r7, #1]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022fa:	887a      	ldrh	r2, [r7, #2]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002300:	e003      	b.n	800230a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002302:	887b      	ldrh	r3, [r7, #2]
 8002304:	041a      	lsls	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	619a      	str	r2, [r3, #24]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002316:	b480      	push	{r7}
 8002318:	b085      	sub	sp, #20
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	460b      	mov	r3, r1
 8002320:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002328:	887a      	ldrh	r2, [r7, #2]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4013      	ands	r3, r2
 800232e:	041a      	lsls	r2, r3, #16
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	43d9      	mvns	r1, r3
 8002334:	887b      	ldrh	r3, [r7, #2]
 8002336:	400b      	ands	r3, r1
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	619a      	str	r2, [r3, #24]
}
 800233e:	bf00      	nop
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002354:	4b29      	ldr	r3, [pc, #164]	; (80023fc <HAL_PWREx_ConfigSupply+0xb0>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	2b06      	cmp	r3, #6
 800235e:	d00a      	beq.n	8002376 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002360:	4b26      	ldr	r3, [pc, #152]	; (80023fc <HAL_PWREx_ConfigSupply+0xb0>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	429a      	cmp	r2, r3
 800236c:	d001      	beq.n	8002372 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e040      	b.n	80023f4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	e03e      	b.n	80023f4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002376:	4b21      	ldr	r3, [pc, #132]	; (80023fc <HAL_PWREx_ConfigSupply+0xb0>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800237e:	491f      	ldr	r1, [pc, #124]	; (80023fc <HAL_PWREx_ConfigSupply+0xb0>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4313      	orrs	r3, r2
 8002384:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002386:	f7fe ff59 	bl	800123c <HAL_GetTick>
 800238a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800238c:	e009      	b.n	80023a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800238e:	f7fe ff55 	bl	800123c <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800239c:	d901      	bls.n	80023a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e028      	b.n	80023f4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023a2:	4b16      	ldr	r3, [pc, #88]	; (80023fc <HAL_PWREx_ConfigSupply+0xb0>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ae:	d1ee      	bne.n	800238e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b1e      	cmp	r3, #30
 80023b4:	d008      	beq.n	80023c8 <HAL_PWREx_ConfigSupply+0x7c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b2e      	cmp	r3, #46	; 0x2e
 80023ba:	d005      	beq.n	80023c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b1d      	cmp	r3, #29
 80023c0:	d002      	beq.n	80023c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b2d      	cmp	r3, #45	; 0x2d
 80023c6:	d114      	bne.n	80023f2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80023c8:	f7fe ff38 	bl	800123c <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80023ce:	e009      	b.n	80023e4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023d0:	f7fe ff34 	bl	800123c <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023de:	d901      	bls.n	80023e4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e007      	b.n	80023f4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_PWREx_ConfigSupply+0xb0>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f0:	d1ee      	bne.n	80023d0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	58024800 	.word	0x58024800

08002400 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08c      	sub	sp, #48	; 0x30
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d102      	bne.n	8002414 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	f000 bc1f 	b.w	8002c52 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80b3 	beq.w	8002588 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002422:	4b95      	ldr	r3, [pc, #596]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800242c:	4b92      	ldr	r3, [pc, #584]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002434:	2b10      	cmp	r3, #16
 8002436:	d007      	beq.n	8002448 <HAL_RCC_OscConfig+0x48>
 8002438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243a:	2b18      	cmp	r3, #24
 800243c:	d112      	bne.n	8002464 <HAL_RCC_OscConfig+0x64>
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d10d      	bne.n	8002464 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002448:	4b8b      	ldr	r3, [pc, #556]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8098 	beq.w	8002586 <HAL_RCC_OscConfig+0x186>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f040 8093 	bne.w	8002586 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e3f6      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246c:	d106      	bne.n	800247c <HAL_RCC_OscConfig+0x7c>
 800246e:	4b82      	ldr	r3, [pc, #520]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a81      	ldr	r2, [pc, #516]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e058      	b.n	800252e <HAL_RCC_OscConfig+0x12e>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d112      	bne.n	80024aa <HAL_RCC_OscConfig+0xaa>
 8002484:	4b7c      	ldr	r3, [pc, #496]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a7b      	ldr	r2, [pc, #492]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 800248a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4b79      	ldr	r3, [pc, #484]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a78      	ldr	r2, [pc, #480]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 8002496:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b76      	ldr	r3, [pc, #472]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a75      	ldr	r2, [pc, #468]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 80024a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	e041      	b.n	800252e <HAL_RCC_OscConfig+0x12e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b2:	d112      	bne.n	80024da <HAL_RCC_OscConfig+0xda>
 80024b4:	4b70      	ldr	r3, [pc, #448]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a6f      	ldr	r2, [pc, #444]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 80024ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b6d      	ldr	r3, [pc, #436]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a6c      	ldr	r2, [pc, #432]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 80024c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b6a      	ldr	r3, [pc, #424]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a69      	ldr	r2, [pc, #420]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 80024d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	e029      	b.n	800252e <HAL_RCC_OscConfig+0x12e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80024e2:	d112      	bne.n	800250a <HAL_RCC_OscConfig+0x10a>
 80024e4:	4b64      	ldr	r3, [pc, #400]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a63      	ldr	r2, [pc, #396]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 80024ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4b61      	ldr	r3, [pc, #388]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a60      	ldr	r2, [pc, #384]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 80024f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	4b5e      	ldr	r3, [pc, #376]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a5d      	ldr	r2, [pc, #372]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 8002502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	e011      	b.n	800252e <HAL_RCC_OscConfig+0x12e>
 800250a:	4b5b      	ldr	r3, [pc, #364]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a5a      	ldr	r2, [pc, #360]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 8002510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	4b58      	ldr	r3, [pc, #352]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a57      	ldr	r2, [pc, #348]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 800251c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b55      	ldr	r3, [pc, #340]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a54      	ldr	r2, [pc, #336]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 8002528:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800252c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d013      	beq.n	800255e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002536:	f7fe fe81 	bl	800123c <HAL_GetTick>
 800253a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800253e:	f7fe fe7d 	bl	800123c <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b64      	cmp	r3, #100	; 0x64
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e380      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002550:	4b49      	ldr	r3, [pc, #292]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x13e>
 800255c:	e014      	b.n	8002588 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255e:	f7fe fe6d 	bl	800123c <HAL_GetTick>
 8002562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002566:	f7fe fe69 	bl	800123c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b64      	cmp	r3, #100	; 0x64
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e36c      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002578:	4b3f      	ldr	r3, [pc, #252]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x166>
 8002584:	e000      	b.n	8002588 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002586:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 808c 	beq.w	80026ae <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002596:	4b38      	ldr	r3, [pc, #224]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800259e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025a0:	4b35      	ldr	r3, [pc, #212]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d007      	beq.n	80025bc <HAL_RCC_OscConfig+0x1bc>
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	2b18      	cmp	r3, #24
 80025b0:	d137      	bne.n	8002622 <HAL_RCC_OscConfig+0x222>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d132      	bne.n	8002622 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025bc:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_OscConfig+0x1d4>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e33e      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025d4:	4b28      	ldr	r3, [pc, #160]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 0219 	bic.w	r2, r3, #25
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4925      	ldr	r1, [pc, #148]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e6:	f7fe fe29 	bl	800123c <HAL_GetTick>
 80025ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ee:	f7fe fe25 	bl	800123c <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e328      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002600:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260c:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	061b      	lsls	r3, r3, #24
 800261a:	4917      	ldr	r1, [pc, #92]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002620:	e045      	b.n	80026ae <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d028      	beq.n	800267c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 0219 	bic.w	r2, r3, #25
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	4910      	ldr	r1, [pc, #64]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe fdfe 	bl	800123c <HAL_GetTick>
 8002640:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002644:	f7fe fdfa 	bl	800123c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e2fd      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002662:	4b05      	ldr	r3, [pc, #20]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	061b      	lsls	r3, r3, #24
 8002670:	4901      	ldr	r1, [pc, #4]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
 8002676:	e01a      	b.n	80026ae <HAL_RCC_OscConfig+0x2ae>
 8002678:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267c:	4b97      	ldr	r3, [pc, #604]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a96      	ldr	r2, [pc, #600]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7fe fdd8 	bl	800123c <HAL_GetTick>
 800268c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002690:	f7fe fdd4 	bl	800123c <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e2d7      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026a2:	4b8e      	ldr	r3, [pc, #568]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d06a      	beq.n	8002790 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ba:	4b88      	ldr	r3, [pc, #544]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026c4:	4b85      	ldr	r3, [pc, #532]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d007      	beq.n	80026e0 <HAL_RCC_OscConfig+0x2e0>
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b18      	cmp	r3, #24
 80026d4:	d11b      	bne.n	800270e <HAL_RCC_OscConfig+0x30e>
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d116      	bne.n	800270e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026e0:	4b7e      	ldr	r3, [pc, #504]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_OscConfig+0x2f8>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	2b80      	cmp	r3, #128	; 0x80
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e2ac      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026f8:	4b78      	ldr	r3, [pc, #480]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	061b      	lsls	r3, r3, #24
 8002706:	4975      	ldr	r1, [pc, #468]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 8002708:	4313      	orrs	r3, r2
 800270a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800270c:	e040      	b.n	8002790 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d023      	beq.n	800275e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002716:	4b71      	ldr	r3, [pc, #452]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a70      	ldr	r2, [pc, #448]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 800271c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002722:	f7fe fd8b 	bl	800123c <HAL_GetTick>
 8002726:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800272a:	f7fe fd87 	bl	800123c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e28a      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800273c:	4b67      	ldr	r3, [pc, #412]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002748:	4b64      	ldr	r3, [pc, #400]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	061b      	lsls	r3, r3, #24
 8002756:	4961      	ldr	r1, [pc, #388]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 8002758:	4313      	orrs	r3, r2
 800275a:	60cb      	str	r3, [r1, #12]
 800275c:	e018      	b.n	8002790 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800275e:	4b5f      	ldr	r3, [pc, #380]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a5e      	ldr	r2, [pc, #376]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 8002764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276a:	f7fe fd67 	bl	800123c <HAL_GetTick>
 800276e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002772:	f7fe fd63 	bl	800123c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e266      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002784:	4b55      	ldr	r3, [pc, #340]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f0      	bne.n	8002772 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d036      	beq.n	800280a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d019      	beq.n	80027d8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a4:	4b4d      	ldr	r3, [pc, #308]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 80027a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a8:	4a4c      	ldr	r2, [pc, #304]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7fe fd44 	bl	800123c <HAL_GetTick>
 80027b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b8:	f7fe fd40 	bl	800123c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e243      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027ca:	4b44      	ldr	r3, [pc, #272]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 80027cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x3b8>
 80027d6:	e018      	b.n	800280a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d8:	4b40      	ldr	r3, [pc, #256]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 80027da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027dc:	4a3f      	ldr	r2, [pc, #252]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e4:	f7fe fd2a 	bl	800123c <HAL_GetTick>
 80027e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ec:	f7fe fd26 	bl	800123c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e229      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027fe:	4b37      	ldr	r3, [pc, #220]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 8002800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b00      	cmp	r3, #0
 8002814:	d036      	beq.n	8002884 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d019      	beq.n	8002852 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800281e:	4b2f      	ldr	r3, [pc, #188]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a2e      	ldr	r2, [pc, #184]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 8002824:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002828:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800282a:	f7fe fd07 	bl	800123c <HAL_GetTick>
 800282e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002832:	f7fe fd03 	bl	800123c <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e206      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002844:	4b25      	ldr	r3, [pc, #148]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x432>
 8002850:	e018      	b.n	8002884 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002852:	4b22      	ldr	r3, [pc, #136]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a21      	ldr	r2, [pc, #132]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 8002858:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800285c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800285e:	f7fe fced 	bl	800123c <HAL_GetTick>
 8002862:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002866:	f7fe fce9 	bl	800123c <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e1ec      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002878:	4b18      	ldr	r3, [pc, #96]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f0      	bne.n	8002866 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80af 	beq.w	80029f0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002892:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <HAL_RCC_OscConfig+0x4e0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <HAL_RCC_OscConfig+0x4e0>)
 8002898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800289e:	f7fe fccd 	bl	800123c <HAL_GetTick>
 80028a2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a6:	f7fe fcc9 	bl	800123c <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b64      	cmp	r3, #100	; 0x64
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e1cc      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028b8:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_RCC_OscConfig+0x4e0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d10b      	bne.n	80028e4 <HAL_RCC_OscConfig+0x4e4>
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 80028ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d0:	4a02      	ldr	r2, [pc, #8]	; (80028dc <HAL_RCC_OscConfig+0x4dc>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6713      	str	r3, [r2, #112]	; 0x70
 80028d8:	e05b      	b.n	8002992 <HAL_RCC_OscConfig+0x592>
 80028da:	bf00      	nop
 80028dc:	58024400 	.word	0x58024400
 80028e0:	58024800 	.word	0x58024800
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d112      	bne.n	8002912 <HAL_RCC_OscConfig+0x512>
 80028ec:	4b9d      	ldr	r3, [pc, #628]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	4a9c      	ldr	r2, [pc, #624]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	6713      	str	r3, [r2, #112]	; 0x70
 80028f8:	4b9a      	ldr	r3, [pc, #616]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	4a99      	ldr	r2, [pc, #612]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 80028fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002902:	6713      	str	r3, [r2, #112]	; 0x70
 8002904:	4b97      	ldr	r3, [pc, #604]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002908:	4a96      	ldr	r2, [pc, #600]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 800290a:	f023 0304 	bic.w	r3, r3, #4
 800290e:	6713      	str	r3, [r2, #112]	; 0x70
 8002910:	e03f      	b.n	8002992 <HAL_RCC_OscConfig+0x592>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b05      	cmp	r3, #5
 8002918:	d112      	bne.n	8002940 <HAL_RCC_OscConfig+0x540>
 800291a:	4b92      	ldr	r3, [pc, #584]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	4a91      	ldr	r2, [pc, #580]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002920:	f043 0304 	orr.w	r3, r3, #4
 8002924:	6713      	str	r3, [r2, #112]	; 0x70
 8002926:	4b8f      	ldr	r3, [pc, #572]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292a:	4a8e      	ldr	r2, [pc, #568]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 800292c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002930:	6713      	str	r3, [r2, #112]	; 0x70
 8002932:	4b8c      	ldr	r3, [pc, #560]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	4a8b      	ldr	r2, [pc, #556]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6713      	str	r3, [r2, #112]	; 0x70
 800293e:	e028      	b.n	8002992 <HAL_RCC_OscConfig+0x592>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b85      	cmp	r3, #133	; 0x85
 8002946:	d112      	bne.n	800296e <HAL_RCC_OscConfig+0x56e>
 8002948:	4b86      	ldr	r3, [pc, #536]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	4a85      	ldr	r2, [pc, #532]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 800294e:	f043 0304 	orr.w	r3, r3, #4
 8002952:	6713      	str	r3, [r2, #112]	; 0x70
 8002954:	4b83      	ldr	r3, [pc, #524]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	4a82      	ldr	r2, [pc, #520]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 800295a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295e:	6713      	str	r3, [r2, #112]	; 0x70
 8002960:	4b80      	ldr	r3, [pc, #512]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	4a7f      	ldr	r2, [pc, #508]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6713      	str	r3, [r2, #112]	; 0x70
 800296c:	e011      	b.n	8002992 <HAL_RCC_OscConfig+0x592>
 800296e:	4b7d      	ldr	r3, [pc, #500]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	4a7c      	ldr	r2, [pc, #496]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	6713      	str	r3, [r2, #112]	; 0x70
 800297a:	4b7a      	ldr	r3, [pc, #488]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297e:	4a79      	ldr	r2, [pc, #484]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002980:	f023 0304 	bic.w	r3, r3, #4
 8002984:	6713      	str	r3, [r2, #112]	; 0x70
 8002986:	4b77      	ldr	r3, [pc, #476]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298a:	4a76      	ldr	r2, [pc, #472]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 800298c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002990:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d015      	beq.n	80029c6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299a:	f7fe fc4f 	bl	800123c <HAL_GetTick>
 800299e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029a0:	e00a      	b.n	80029b8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a2:	f7fe fc4b 	bl	800123c <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e14c      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029b8:	4b6a      	ldr	r3, [pc, #424]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0ee      	beq.n	80029a2 <HAL_RCC_OscConfig+0x5a2>
 80029c4:	e014      	b.n	80029f0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c6:	f7fe fc39 	bl	800123c <HAL_GetTick>
 80029ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029cc:	e00a      	b.n	80029e4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ce:	f7fe fc35 	bl	800123c <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029dc:	4293      	cmp	r3, r2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e136      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029e4:	4b5f      	ldr	r3, [pc, #380]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 80029e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1ee      	bne.n	80029ce <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 812b 	beq.w	8002c50 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029fa:	4b5a      	ldr	r3, [pc, #360]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a02:	2b18      	cmp	r3, #24
 8002a04:	f000 80bb 	beq.w	8002b7e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	f040 8095 	bne.w	8002b3c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a12:	4b54      	ldr	r3, [pc, #336]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a53      	ldr	r2, [pc, #332]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fc0d 	bl	800123c <HAL_GetTick>
 8002a22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a26:	f7fe fc09 	bl	800123c <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e10c      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a38:	4b4a      	ldr	r3, [pc, #296]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f0      	bne.n	8002a26 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a44:	4b47      	ldr	r3, [pc, #284]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a48:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <HAL_RCC_OscConfig+0x768>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a54:	0112      	lsls	r2, r2, #4
 8002a56:	430a      	orrs	r2, r1
 8002a58:	4942      	ldr	r1, [pc, #264]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	628b      	str	r3, [r1, #40]	; 0x28
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	3b01      	subs	r3, #1
 8002a64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	025b      	lsls	r3, r3, #9
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	041b      	lsls	r3, r3, #16
 8002a7c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a86:	3b01      	subs	r3, #1
 8002a88:	061b      	lsls	r3, r3, #24
 8002a8a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a8e:	4935      	ldr	r1, [pc, #212]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a94:	4b33      	ldr	r3, [pc, #204]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	4a32      	ldr	r2, [pc, #200]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002a9a:	f023 0301 	bic.w	r3, r3, #1
 8002a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002aa0:	4b30      	ldr	r3, [pc, #192]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aa4:	4b31      	ldr	r3, [pc, #196]	; (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002aac:	00d2      	lsls	r2, r2, #3
 8002aae:	492d      	ldr	r1, [pc, #180]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	f023 020c 	bic.w	r2, r3, #12
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	4928      	ldr	r1, [pc, #160]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ac6:	4b27      	ldr	r3, [pc, #156]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aca:	f023 0202 	bic.w	r2, r3, #2
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4924      	ldr	r1, [pc, #144]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ad8:	4b22      	ldr	r3, [pc, #136]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	4a21      	ldr	r2, [pc, #132]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ae4:	4b1f      	ldr	r3, [pc, #124]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	4a1e      	ldr	r2, [pc, #120]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002af0:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	4a1b      	ldr	r2, [pc, #108]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002af6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002afa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002afc:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b08:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a15      	ldr	r2, [pc, #84]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe fb92 	bl	800123c <HAL_GetTick>
 8002b18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe fb8e 	bl	800123c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e091      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x71c>
 8002b3a:	e089      	b.n	8002c50 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3c:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a08      	ldr	r2, [pc, #32]	; (8002b64 <HAL_RCC_OscConfig+0x764>)
 8002b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe fb78 	bl	800123c <HAL_GetTick>
 8002b4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b4e:	e00f      	b.n	8002b70 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b50:	f7fe fb74 	bl	800123c <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d908      	bls.n	8002b70 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e077      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
 8002b62:	bf00      	nop
 8002b64:	58024400 	.word	0x58024400
 8002b68:	fffffc0c 	.word	0xfffffc0c
 8002b6c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b70:	4b3a      	ldr	r3, [pc, #232]	; (8002c5c <HAL_RCC_OscConfig+0x85c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e9      	bne.n	8002b50 <HAL_RCC_OscConfig+0x750>
 8002b7c:	e068      	b.n	8002c50 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b7e:	4b37      	ldr	r3, [pc, #220]	; (8002c5c <HAL_RCC_OscConfig+0x85c>)
 8002b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b82:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b84:	4b35      	ldr	r3, [pc, #212]	; (8002c5c <HAL_RCC_OscConfig+0x85c>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d031      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f003 0203 	and.w	r2, r3, #3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d12a      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	091b      	lsrs	r3, r3, #4
 8002ba4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d122      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d11a      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	0a5b      	lsrs	r3, r3, #9
 8002bc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bcc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d111      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	0c1b      	lsrs	r3, r3, #16
 8002bd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bde:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d108      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	0e1b      	lsrs	r3, r3, #24
 8002be8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d001      	beq.n	8002bfa <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e02b      	b.n	8002c52 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002bfa:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <HAL_RCC_OscConfig+0x85c>)
 8002bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfe:	08db      	lsrs	r3, r3, #3
 8002c00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c04:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d01f      	beq.n	8002c50 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c10:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <HAL_RCC_OscConfig+0x85c>)
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	4a11      	ldr	r2, [pc, #68]	; (8002c5c <HAL_RCC_OscConfig+0x85c>)
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c1c:	f7fe fb0e 	bl	800123c <HAL_GetTick>
 8002c20:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c22:	bf00      	nop
 8002c24:	f7fe fb0a 	bl	800123c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d0f9      	beq.n	8002c24 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c30:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <HAL_RCC_OscConfig+0x85c>)
 8002c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c34:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <HAL_RCC_OscConfig+0x860>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c3c:	00d2      	lsls	r2, r2, #3
 8002c3e:	4907      	ldr	r1, [pc, #28]	; (8002c5c <HAL_RCC_OscConfig+0x85c>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_RCC_OscConfig+0x85c>)
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	4a04      	ldr	r2, [pc, #16]	; (8002c5c <HAL_RCC_OscConfig+0x85c>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3730      	adds	r7, #48	; 0x30
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	58024400 	.word	0x58024400
 8002c60:	ffff0007 	.word	0xffff0007

08002c64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e19c      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c78:	4b8a      	ldr	r3, [pc, #552]	; (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d910      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4b87      	ldr	r3, [pc, #540]	; (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 020f 	bic.w	r2, r3, #15
 8002c8e:	4985      	ldr	r1, [pc, #532]	; (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b83      	ldr	r3, [pc, #524]	; (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e184      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d010      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	4b7b      	ldr	r3, [pc, #492]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d908      	bls.n	8002cd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cc4:	4b78      	ldr	r3, [pc, #480]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	4975      	ldr	r1, [pc, #468]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d010      	beq.n	8002d04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	4b70      	ldr	r3, [pc, #448]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d908      	bls.n	8002d04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cf2:	4b6d      	ldr	r3, [pc, #436]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	496a      	ldr	r1, [pc, #424]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d010      	beq.n	8002d32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699a      	ldr	r2, [r3, #24]
 8002d14:	4b64      	ldr	r3, [pc, #400]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d908      	bls.n	8002d32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d20:	4b61      	ldr	r3, [pc, #388]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	495e      	ldr	r1, [pc, #376]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d010      	beq.n	8002d60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69da      	ldr	r2, [r3, #28]
 8002d42:	4b59      	ldr	r3, [pc, #356]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d908      	bls.n	8002d60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d4e:	4b56      	ldr	r3, [pc, #344]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	4953      	ldr	r1, [pc, #332]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d010      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	4b4d      	ldr	r3, [pc, #308]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d908      	bls.n	8002d8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7c:	4b4a      	ldr	r3, [pc, #296]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	f023 020f 	bic.w	r2, r3, #15
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4947      	ldr	r1, [pc, #284]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d055      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d9a:	4b43      	ldr	r3, [pc, #268]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	4940      	ldr	r1, [pc, #256]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d107      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002db4:	4b3c      	ldr	r3, [pc, #240]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d121      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0f6      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d107      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dcc:	4b36      	ldr	r3, [pc, #216]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d115      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0ea      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d107      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002de4:	4b30      	ldr	r3, [pc, #192]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d109      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0de      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002df4:	4b2c      	ldr	r3, [pc, #176]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0d6      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e04:	4b28      	ldr	r3, [pc, #160]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	f023 0207 	bic.w	r2, r3, #7
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4925      	ldr	r1, [pc, #148]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e16:	f7fe fa11 	bl	800123c <HAL_GetTick>
 8002e1a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e1e:	f7fe fa0d 	bl	800123c <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e0be      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e34:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d1eb      	bne.n	8002e1e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d010      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d208      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e62:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	f023 020f 	bic.w	r2, r3, #15
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	490e      	ldr	r1, [pc, #56]	; (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d214      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 020f 	bic.w	r2, r3, #15
 8002e8a:	4906      	ldr	r1, [pc, #24]	; (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e086      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
 8002ea4:	52002000 	.word	0x52002000
 8002ea8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d010      	beq.n	8002eda <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	4b3f      	ldr	r3, [pc, #252]	; (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d208      	bcs.n	8002eda <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ec8:	4b3c      	ldr	r3, [pc, #240]	; (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	4939      	ldr	r1, [pc, #228]	; (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d010      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	4b34      	ldr	r3, [pc, #208]	; (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d208      	bcs.n	8002f08 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ef6:	4b31      	ldr	r3, [pc, #196]	; (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	492e      	ldr	r1, [pc, #184]	; (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d010      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699a      	ldr	r2, [r3, #24]
 8002f18:	4b28      	ldr	r3, [pc, #160]	; (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d208      	bcs.n	8002f36 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f24:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	4922      	ldr	r1, [pc, #136]	; (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d010      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d208      	bcs.n	8002f64 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f52:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	4917      	ldr	r1, [pc, #92]	; (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002f64:	f000 f834 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	0a1b      	lsrs	r3, r3, #8
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	4912      	ldr	r1, [pc, #72]	; (8002fc0 <HAL_RCC_ClockConfig+0x35c>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f80:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002f82:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	4a0d      	ldr	r2, [pc, #52]	; (8002fc0 <HAL_RCC_ClockConfig+0x35c>)
 8002f8c:	5cd3      	ldrb	r3, [r2, r3]
 8002f8e:	f003 031f 	and.w	r3, r3, #31
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
 8002f98:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <HAL_RCC_ClockConfig+0x360>)
 8002f9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f9c:	4a0a      	ldr	r2, [pc, #40]	; (8002fc8 <HAL_RCC_ClockConfig+0x364>)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <HAL_RCC_ClockConfig+0x368>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe f8fe 	bl	80011a8 <HAL_InitTick>
 8002fac:	4603      	mov	r3, r0
 8002fae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	58024400 	.word	0x58024400
 8002fc0:	08008354 	.word	0x08008354
 8002fc4:	24000004 	.word	0x24000004
 8002fc8:	24000000 	.word	0x24000000
 8002fcc:	24000008 	.word	0x24000008

08002fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	; 0x24
 8002fd4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fd6:	4bb3      	ldr	r3, [pc, #716]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fde:	2b18      	cmp	r3, #24
 8002fe0:	f200 8155 	bhi.w	800328e <HAL_RCC_GetSysClockFreq+0x2be>
 8002fe4:	a201      	add	r2, pc, #4	; (adr r2, 8002fec <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fea:	bf00      	nop
 8002fec:	08003051 	.word	0x08003051
 8002ff0:	0800328f 	.word	0x0800328f
 8002ff4:	0800328f 	.word	0x0800328f
 8002ff8:	0800328f 	.word	0x0800328f
 8002ffc:	0800328f 	.word	0x0800328f
 8003000:	0800328f 	.word	0x0800328f
 8003004:	0800328f 	.word	0x0800328f
 8003008:	0800328f 	.word	0x0800328f
 800300c:	08003077 	.word	0x08003077
 8003010:	0800328f 	.word	0x0800328f
 8003014:	0800328f 	.word	0x0800328f
 8003018:	0800328f 	.word	0x0800328f
 800301c:	0800328f 	.word	0x0800328f
 8003020:	0800328f 	.word	0x0800328f
 8003024:	0800328f 	.word	0x0800328f
 8003028:	0800328f 	.word	0x0800328f
 800302c:	0800307d 	.word	0x0800307d
 8003030:	0800328f 	.word	0x0800328f
 8003034:	0800328f 	.word	0x0800328f
 8003038:	0800328f 	.word	0x0800328f
 800303c:	0800328f 	.word	0x0800328f
 8003040:	0800328f 	.word	0x0800328f
 8003044:	0800328f 	.word	0x0800328f
 8003048:	0800328f 	.word	0x0800328f
 800304c:	08003083 	.word	0x08003083
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003050:	4b94      	ldr	r3, [pc, #592]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d009      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800305c:	4b91      	ldr	r3, [pc, #580]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	08db      	lsrs	r3, r3, #3
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	4a90      	ldr	r2, [pc, #576]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
 800306c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800306e:	e111      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003070:	4b8d      	ldr	r3, [pc, #564]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003072:	61bb      	str	r3, [r7, #24]
      break;
 8003074:	e10e      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003076:	4b8d      	ldr	r3, [pc, #564]	; (80032ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003078:	61bb      	str	r3, [r7, #24]
      break;
 800307a:	e10b      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800307c:	4b8c      	ldr	r3, [pc, #560]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800307e:	61bb      	str	r3, [r7, #24]
      break;
 8003080:	e108      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003082:	4b88      	ldr	r3, [pc, #544]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800308c:	4b85      	ldr	r3, [pc, #532]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003096:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003098:	4b82      	ldr	r3, [pc, #520]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030a2:	4b80      	ldr	r3, [pc, #512]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a6:	08db      	lsrs	r3, r3, #3
 80030a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	fb02 f303 	mul.w	r3, r2, r3
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80e1 	beq.w	8003288 <HAL_RCC_GetSysClockFreq+0x2b8>
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	f000 8083 	beq.w	80031d4 <HAL_RCC_GetSysClockFreq+0x204>
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	f200 80a1 	bhi.w	8003218 <HAL_RCC_GetSysClockFreq+0x248>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x114>
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d056      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x1c0>
 80030e2:	e099      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030e4:	4b6f      	ldr	r3, [pc, #444]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d02d      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030f0:	4b6c      	ldr	r3, [pc, #432]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	08db      	lsrs	r3, r3, #3
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	4a6b      	ldr	r2, [pc, #428]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003100:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	ee07 3a90 	vmov	s15, r3
 8003108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800311a:	4b62      	ldr	r3, [pc, #392]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003122:	ee07 3a90 	vmov	s15, r3
 8003126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800312a:	ed97 6a02 	vldr	s12, [r7, #8]
 800312e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80032b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800313a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800313e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003146:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800314a:	e087      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	ee07 3a90 	vmov	s15, r3
 8003152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003156:	eddf 6a58 	vldr	s13, [pc, #352]	; 80032b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800315a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800315e:	4b51      	ldr	r3, [pc, #324]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003166:	ee07 3a90 	vmov	s15, r3
 800316a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800316e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003172:	eddf 5a50 	vldr	s11, [pc, #320]	; 80032b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800317a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800317e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800318a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800318e:	e065      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	ee07 3a90 	vmov	s15, r3
 8003196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80032bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800319e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031a2:	4b40      	ldr	r3, [pc, #256]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031aa:	ee07 3a90 	vmov	s15, r3
 80031ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80032b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031d2:	e043      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80032c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80031e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031e6:	4b2f      	ldr	r3, [pc, #188]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ee:	ee07 3a90 	vmov	s15, r3
 80031f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80032b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800320a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800320e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003212:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003216:	e021      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003222:	eddf 6a26 	vldr	s13, [pc, #152]	; 80032bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800322a:	4b1e      	ldr	r3, [pc, #120]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800323a:	ed97 6a02 	vldr	s12, [r7, #8]
 800323e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80032b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800324a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800324e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003256:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800325a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800325c:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	0a5b      	lsrs	r3, r3, #9
 8003262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003266:	3301      	adds	r3, #1
 8003268:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	ee07 3a90 	vmov	s15, r3
 8003270:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003274:	edd7 6a07 	vldr	s13, [r7, #28]
 8003278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800327c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003280:	ee17 3a90 	vmov	r3, s15
 8003284:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003286:	e005      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	61bb      	str	r3, [r7, #24]
      break;
 800328c:	e002      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800328e:	4b07      	ldr	r3, [pc, #28]	; (80032ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003290:	61bb      	str	r3, [r7, #24]
      break;
 8003292:	bf00      	nop
  }

  return sysclockfreq;
 8003294:	69bb      	ldr	r3, [r7, #24]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3724      	adds	r7, #36	; 0x24
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	58024400 	.word	0x58024400
 80032a8:	03d09000 	.word	0x03d09000
 80032ac:	003d0900 	.word	0x003d0900
 80032b0:	007a1200 	.word	0x007a1200
 80032b4:	46000000 	.word	0x46000000
 80032b8:	4c742400 	.word	0x4c742400
 80032bc:	4a742400 	.word	0x4a742400
 80032c0:	4af42400 	.word	0x4af42400

080032c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80032ca:	f7ff fe81 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 80032ce:	4602      	mov	r2, r0
 80032d0:	4b10      	ldr	r3, [pc, #64]	; (8003314 <HAL_RCC_GetHCLKFreq+0x50>)
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	0a1b      	lsrs	r3, r3, #8
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	490f      	ldr	r1, [pc, #60]	; (8003318 <HAL_RCC_GetHCLKFreq+0x54>)
 80032dc:	5ccb      	ldrb	r3, [r1, r3]
 80032de:	f003 031f 	and.w	r3, r3, #31
 80032e2:	fa22 f303 	lsr.w	r3, r2, r3
 80032e6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80032e8:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <HAL_RCC_GetHCLKFreq+0x50>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	4a09      	ldr	r2, [pc, #36]	; (8003318 <HAL_RCC_GetHCLKFreq+0x54>)
 80032f2:	5cd3      	ldrb	r3, [r2, r3]
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	fa22 f303 	lsr.w	r3, r2, r3
 80032fe:	4a07      	ldr	r2, [pc, #28]	; (800331c <HAL_RCC_GetHCLKFreq+0x58>)
 8003300:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003302:	4a07      	ldr	r2, [pc, #28]	; (8003320 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003308:	4b04      	ldr	r3, [pc, #16]	; (800331c <HAL_RCC_GetHCLKFreq+0x58>)
 800330a:	681b      	ldr	r3, [r3, #0]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	58024400 	.word	0x58024400
 8003318:	08008354 	.word	0x08008354
 800331c:	24000004 	.word	0x24000004
 8003320:	24000000 	.word	0x24000000

08003324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003328:	f7ff ffcc 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 800332c:	4602      	mov	r2, r0
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	091b      	lsrs	r3, r3, #4
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4904      	ldr	r1, [pc, #16]	; (800334c <HAL_RCC_GetPCLK1Freq+0x28>)
 800333a:	5ccb      	ldrb	r3, [r1, r3]
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003344:	4618      	mov	r0, r3
 8003346:	bd80      	pop	{r7, pc}
 8003348:	58024400 	.word	0x58024400
 800334c:	08008354 	.word	0x08008354

08003350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003354:	f7ff ffb6 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b06      	ldr	r3, [pc, #24]	; (8003374 <HAL_RCC_GetPCLK2Freq+0x24>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	0a1b      	lsrs	r3, r3, #8
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4904      	ldr	r1, [pc, #16]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003370:	4618      	mov	r0, r3
 8003372:	bd80      	pop	{r7, pc}
 8003374:	58024400 	.word	0x58024400
 8003378:	08008354 	.word	0x08008354

0800337c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800337c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003380:	b0c8      	sub	sp, #288	; 0x120
 8003382:	af00      	add	r7, sp, #0
 8003384:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003388:	2300      	movs	r3, #0
 800338a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800338e:	2300      	movs	r3, #0
 8003390:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80033a0:	2500      	movs	r5, #0
 80033a2:	ea54 0305 	orrs.w	r3, r4, r5
 80033a6:	d049      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033b2:	d02f      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033b8:	d828      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033be:	d01a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80033c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033c4:	d822      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80033ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ce:	d007      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033d0:	e01c      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033d2:	4ba7      	ldr	r3, [pc, #668]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	4aa6      	ldr	r2, [pc, #664]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033de:	e01a      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033e4:	3308      	adds	r3, #8
 80033e6:	2102      	movs	r1, #2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f001 fc43 	bl	8004c74 <RCCEx_PLL2_Config>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033f4:	e00f      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033fa:	3328      	adds	r3, #40	; 0x28
 80033fc:	2102      	movs	r1, #2
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 fcea 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800340a:	e004      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003412:	e000      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003416:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800341e:	4b94      	ldr	r3, [pc, #592]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003422:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800342a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800342c:	4a90      	ldr	r2, [pc, #576]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800342e:	430b      	orrs	r3, r1
 8003430:	6513      	str	r3, [r2, #80]	; 0x50
 8003432:	e003      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003434:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003438:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800343c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003444:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003448:	f04f 0900 	mov.w	r9, #0
 800344c:	ea58 0309 	orrs.w	r3, r8, r9
 8003450:	d047      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003452:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003458:	2b04      	cmp	r3, #4
 800345a:	d82a      	bhi.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800345c:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	08003479 	.word	0x08003479
 8003468:	08003487 	.word	0x08003487
 800346c:	0800349d 	.word	0x0800349d
 8003470:	080034bb 	.word	0x080034bb
 8003474:	080034bb 	.word	0x080034bb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003478:	4b7d      	ldr	r3, [pc, #500]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	4a7c      	ldr	r2, [pc, #496]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800347e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003482:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003484:	e01a      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800348a:	3308      	adds	r3, #8
 800348c:	2100      	movs	r1, #0
 800348e:	4618      	mov	r0, r3
 8003490:	f001 fbf0 	bl	8004c74 <RCCEx_PLL2_Config>
 8003494:	4603      	mov	r3, r0
 8003496:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800349a:	e00f      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800349c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a0:	3328      	adds	r3, #40	; 0x28
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f001 fc97 	bl	8004dd8 <RCCEx_PLL3_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034b0:	e004      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034b8:	e000      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80034ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034c4:	4b6a      	ldr	r3, [pc, #424]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c8:	f023 0107 	bic.w	r1, r3, #7
 80034cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d2:	4a67      	ldr	r2, [pc, #412]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034d4:	430b      	orrs	r3, r1
 80034d6:	6513      	str	r3, [r2, #80]	; 0x50
 80034d8:	e003      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80034e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80034ee:	f04f 0b00 	mov.w	fp, #0
 80034f2:	ea5a 030b 	orrs.w	r3, sl, fp
 80034f6:	d054      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80034f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003502:	d036      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003504:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003508:	d82f      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800350a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800350e:	d032      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003514:	d829      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003516:	2bc0      	cmp	r3, #192	; 0xc0
 8003518:	d02f      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800351a:	2bc0      	cmp	r3, #192	; 0xc0
 800351c:	d825      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800351e:	2b80      	cmp	r3, #128	; 0x80
 8003520:	d018      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003522:	2b80      	cmp	r3, #128	; 0x80
 8003524:	d821      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800352a:	2b40      	cmp	r3, #64	; 0x40
 800352c:	d007      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800352e:	e01c      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003530:	4b4f      	ldr	r3, [pc, #316]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	4a4e      	ldr	r2, [pc, #312]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800353a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800353c:	e01e      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800353e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003542:	3308      	adds	r3, #8
 8003544:	2100      	movs	r1, #0
 8003546:	4618      	mov	r0, r3
 8003548:	f001 fb94 	bl	8004c74 <RCCEx_PLL2_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003552:	e013      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003558:	3328      	adds	r3, #40	; 0x28
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f001 fc3b 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003568:	e008      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003570:	e004      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003572:	bf00      	nop
 8003574:	e002      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003576:	bf00      	nop
 8003578:	e000      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800357a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800357c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003584:	4b3a      	ldr	r3, [pc, #232]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003588:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800358c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003592:	4a37      	ldr	r2, [pc, #220]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003594:	430b      	orrs	r3, r1
 8003596:	6513      	str	r3, [r2, #80]	; 0x50
 8003598:	e003      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800359e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80035a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035aa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80035ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80035b2:	2300      	movs	r3, #0
 80035b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80035b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80035bc:	460b      	mov	r3, r1
 80035be:	4313      	orrs	r3, r2
 80035c0:	d05c      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80035c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80035cc:	d03b      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80035ce:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80035d2:	d834      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80035d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d8:	d037      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80035da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035de:	d82e      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80035e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80035e4:	d033      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80035e6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80035ea:	d828      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80035ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f0:	d01a      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80035f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f6:	d822      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80035fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003600:	d007      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003602:	e01c      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003604:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	4a19      	ldr	r2, [pc, #100]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800360a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800360e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003610:	e01e      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003616:	3308      	adds	r3, #8
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f001 fb2a 	bl	8004c74 <RCCEx_PLL2_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003626:	e013      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800362c:	3328      	adds	r3, #40	; 0x28
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f001 fbd1 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003636:	4603      	mov	r3, r0
 8003638:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800363c:	e008      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003644:	e004      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003646:	bf00      	nop
 8003648:	e002      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800364a:	bf00      	nop
 800364c:	e000      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800364e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003650:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10d      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800365a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003660:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003666:	4a02      	ldr	r2, [pc, #8]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003668:	430b      	orrs	r3, r1
 800366a:	6513      	str	r3, [r2, #80]	; 0x50
 800366c:	e006      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800366e:	bf00      	nop
 8003670:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003674:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003678:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800367c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003688:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800368c:	2300      	movs	r3, #0
 800368e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003692:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003696:	460b      	mov	r3, r1
 8003698:	4313      	orrs	r3, r2
 800369a:	d03a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800369c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a2:	2b30      	cmp	r3, #48	; 0x30
 80036a4:	d01f      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80036a6:	2b30      	cmp	r3, #48	; 0x30
 80036a8:	d819      	bhi.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x362>
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d00c      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	d815      	bhi.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x362>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d019      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80036b6:	2b10      	cmp	r3, #16
 80036b8:	d111      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ba:	4bae      	ldr	r3, [pc, #696]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	4aad      	ldr	r2, [pc, #692]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80036c6:	e011      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036cc:	3308      	adds	r3, #8
 80036ce:	2102      	movs	r1, #2
 80036d0:	4618      	mov	r0, r3
 80036d2:	f001 facf 	bl	8004c74 <RCCEx_PLL2_Config>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80036dc:	e006      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036e4:	e002      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80036e6:	bf00      	nop
 80036e8:	e000      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80036ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80036f4:	4b9f      	ldr	r3, [pc, #636]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80036fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003702:	4a9c      	ldr	r2, [pc, #624]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003704:	430b      	orrs	r3, r1
 8003706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003708:	e003      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800370e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800371e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003722:	2300      	movs	r3, #0
 8003724:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003728:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800372c:	460b      	mov	r3, r1
 800372e:	4313      	orrs	r3, r2
 8003730:	d051      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800373c:	d035      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800373e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003742:	d82e      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003744:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003748:	d031      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x432>
 800374a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800374e:	d828      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003754:	d01a      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375a:	d822      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003764:	d007      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003766:	e01c      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003768:	4b82      	ldr	r3, [pc, #520]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	4a81      	ldr	r2, [pc, #516]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800376e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003772:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003774:	e01c      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800377a:	3308      	adds	r3, #8
 800377c:	2100      	movs	r1, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f001 fa78 	bl	8004c74 <RCCEx_PLL2_Config>
 8003784:	4603      	mov	r3, r0
 8003786:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800378a:	e011      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800378c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003790:	3328      	adds	r3, #40	; 0x28
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f001 fb1f 	bl	8004dd8 <RCCEx_PLL3_Config>
 800379a:	4603      	mov	r3, r0
 800379c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037a0:	e006      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80037a8:	e002      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80037aa:	bf00      	nop
 80037ac:	e000      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80037ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037b8:	4b6e      	ldr	r3, [pc, #440]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037bc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80037c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037c6:	4a6b      	ldr	r2, [pc, #428]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6513      	str	r3, [r2, #80]	; 0x50
 80037cc:	e003      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80037e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037e6:	2300      	movs	r3, #0
 80037e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80037ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80037f0:	460b      	mov	r3, r1
 80037f2:	4313      	orrs	r3, r2
 80037f4:	d053      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80037f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003800:	d033      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003802:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003806:	d82c      	bhi.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003808:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800380c:	d02f      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800380e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003812:	d826      	bhi.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003814:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003818:	d02b      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800381a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800381e:	d820      	bhi.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003820:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003824:	d012      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003826:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800382a:	d81a      	bhi.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800382c:	2b00      	cmp	r3, #0
 800382e:	d022      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003834:	d115      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003836:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800383a:	3308      	adds	r3, #8
 800383c:	2101      	movs	r1, #1
 800383e:	4618      	mov	r0, r3
 8003840:	f001 fa18 	bl	8004c74 <RCCEx_PLL2_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800384a:	e015      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800384c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003850:	3328      	adds	r3, #40	; 0x28
 8003852:	2101      	movs	r1, #1
 8003854:	4618      	mov	r0, r3
 8003856:	f001 fabf 	bl	8004dd8 <RCCEx_PLL3_Config>
 800385a:	4603      	mov	r3, r0
 800385c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003860:	e00a      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003868:	e006      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800386a:	bf00      	nop
 800386c:	e004      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800386e:	bf00      	nop
 8003870:	e002      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003872:	bf00      	nop
 8003874:	e000      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003876:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003878:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10a      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003880:	4b3c      	ldr	r3, [pc, #240]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003884:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800388c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800388e:	4a39      	ldr	r2, [pc, #228]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003890:	430b      	orrs	r3, r1
 8003892:	6513      	str	r3, [r2, #80]	; 0x50
 8003894:	e003      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003896:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800389a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800389e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80038aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038ae:	2300      	movs	r3, #0
 80038b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038b4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4313      	orrs	r3, r2
 80038bc:	d060      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038c6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80038ca:	d039      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80038cc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80038d0:	d832      	bhi.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80038d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038d6:	d035      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80038d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038dc:	d82c      	bhi.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80038de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e2:	d031      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80038e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e8:	d826      	bhi.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80038ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038ee:	d02d      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80038f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038f4:	d820      	bhi.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80038f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038fa:	d012      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80038fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003900:	d81a      	bhi.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003902:	2b00      	cmp	r3, #0
 8003904:	d024      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800390a:	d115      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800390c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003910:	3308      	adds	r3, #8
 8003912:	2101      	movs	r1, #1
 8003914:	4618      	mov	r0, r3
 8003916:	f001 f9ad 	bl	8004c74 <RCCEx_PLL2_Config>
 800391a:	4603      	mov	r3, r0
 800391c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003920:	e017      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003926:	3328      	adds	r3, #40	; 0x28
 8003928:	2101      	movs	r1, #1
 800392a:	4618      	mov	r0, r3
 800392c:	f001 fa54 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003930:	4603      	mov	r3, r0
 8003932:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003936:	e00c      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800393e:	e008      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003940:	bf00      	nop
 8003942:	e006      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003944:	bf00      	nop
 8003946:	e004      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003948:	bf00      	nop
 800394a:	e002      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800394c:	bf00      	nop
 800394e:	e000      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003952:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10e      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800395c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003966:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800396a:	4a02      	ldr	r2, [pc, #8]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800396c:	430b      	orrs	r3, r1
 800396e:	6593      	str	r3, [r2, #88]	; 0x58
 8003970:	e006      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003972:	bf00      	nop
 8003974:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003978:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800397c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800398c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003990:	2300      	movs	r3, #0
 8003992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003996:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800399a:	460b      	mov	r3, r1
 800399c:	4313      	orrs	r3, r2
 800399e:	d037      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80039a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039aa:	d00e      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80039ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039b0:	d816      	bhi.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d018      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80039b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039ba:	d111      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039bc:	4bc4      	ldr	r3, [pc, #784]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	4ac3      	ldr	r2, [pc, #780]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039c8:	e00f      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ce:	3308      	adds	r3, #8
 80039d0:	2101      	movs	r1, #1
 80039d2:	4618      	mov	r0, r3
 80039d4:	f001 f94e 	bl	8004c74 <RCCEx_PLL2_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039de:	e004      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80039e6:	e000      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80039e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10a      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039f2:	4bb7      	ldr	r3, [pc, #732]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80039fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a00:	4ab3      	ldr	r2, [pc, #716]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a02:	430b      	orrs	r3, r1
 8003a04:	6513      	str	r3, [r2, #80]	; 0x50
 8003a06:	e003      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a0c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a20:	2300      	movs	r3, #0
 8003a22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003a26:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	d039      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d81c      	bhi.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003a3a:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a7d 	.word	0x08003a7d
 8003a44:	08003a51 	.word	0x08003a51
 8003a48:	08003a5f 	.word	0x08003a5f
 8003a4c:	08003a7d 	.word	0x08003a7d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a50:	4b9f      	ldr	r3, [pc, #636]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	4a9e      	ldr	r2, [pc, #632]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a5c:	e00f      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a62:	3308      	adds	r3, #8
 8003a64:	2102      	movs	r1, #2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f001 f904 	bl	8004c74 <RCCEx_PLL2_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a72:	e004      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a7a:	e000      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10a      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a86:	4b92      	ldr	r3, [pc, #584]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8a:	f023 0103 	bic.w	r1, r3, #3
 8003a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a94:	4a8e      	ldr	r2, [pc, #568]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a96:	430b      	orrs	r3, r1
 8003a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a9a:	e003      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003aa0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aac:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003ab0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003aba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f000 8099 	beq.w	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ac6:	4b83      	ldr	r3, [pc, #524]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a82      	ldr	r2, [pc, #520]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ad2:	f7fd fbb3 	bl	800123c <HAL_GetTick>
 8003ad6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ada:	e00b      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003adc:	f7fd fbae 	bl	800123c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b64      	cmp	r3, #100	; 0x64
 8003aea:	d903      	bls.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003af2:	e005      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003af4:	4b77      	ldr	r3, [pc, #476]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0ed      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003b00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d173      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b08:	4b71      	ldr	r3, [pc, #452]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b14:	4053      	eors	r3, r2
 8003b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d015      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b1e:	4b6c      	ldr	r3, [pc, #432]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b26:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b2a:	4b69      	ldr	r3, [pc, #420]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	4a68      	ldr	r2, [pc, #416]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b34:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b36:	4b66      	ldr	r3, [pc, #408]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3a:	4a65      	ldr	r2, [pc, #404]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b40:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b42:	4a63      	ldr	r2, [pc, #396]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b48:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b56:	d118      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd fb70 	bl	800123c <HAL_GetTick>
 8003b5c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b60:	e00d      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b62:	f7fd fb6b 	bl	800123c <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003b6c:	1ad2      	subs	r2, r2, r3
 8003b6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d903      	bls.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003b7c:	e005      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b7e:	4b54      	ldr	r3, [pc, #336]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0eb      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003b8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d129      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ba2:	d10e      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003ba4:	4b4a      	ldr	r3, [pc, #296]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bb4:	091a      	lsrs	r2, r3, #4
 8003bb6:	4b48      	ldr	r3, [pc, #288]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	4a45      	ldr	r2, [pc, #276]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	6113      	str	r3, [r2, #16]
 8003bc0:	e005      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003bc2:	4b43      	ldr	r3, [pc, #268]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	4a42      	ldr	r2, [pc, #264]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bc8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bcc:	6113      	str	r3, [r2, #16]
 8003bce:	4b40      	ldr	r3, [pc, #256]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bd0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bde:	4a3c      	ldr	r2, [pc, #240]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003be0:	430b      	orrs	r3, r1
 8003be2:	6713      	str	r3, [r2, #112]	; 0x70
 8003be4:	e008      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003be6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003bee:	e003      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bf4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c00:	f002 0301 	and.w	r3, r2, #1
 8003c04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c0e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f000 8090 	beq.w	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c22:	2b28      	cmp	r3, #40	; 0x28
 8003c24:	d870      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003c26:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2c:	08003d11 	.word	0x08003d11
 8003c30:	08003d09 	.word	0x08003d09
 8003c34:	08003d09 	.word	0x08003d09
 8003c38:	08003d09 	.word	0x08003d09
 8003c3c:	08003d09 	.word	0x08003d09
 8003c40:	08003d09 	.word	0x08003d09
 8003c44:	08003d09 	.word	0x08003d09
 8003c48:	08003d09 	.word	0x08003d09
 8003c4c:	08003cdd 	.word	0x08003cdd
 8003c50:	08003d09 	.word	0x08003d09
 8003c54:	08003d09 	.word	0x08003d09
 8003c58:	08003d09 	.word	0x08003d09
 8003c5c:	08003d09 	.word	0x08003d09
 8003c60:	08003d09 	.word	0x08003d09
 8003c64:	08003d09 	.word	0x08003d09
 8003c68:	08003d09 	.word	0x08003d09
 8003c6c:	08003cf3 	.word	0x08003cf3
 8003c70:	08003d09 	.word	0x08003d09
 8003c74:	08003d09 	.word	0x08003d09
 8003c78:	08003d09 	.word	0x08003d09
 8003c7c:	08003d09 	.word	0x08003d09
 8003c80:	08003d09 	.word	0x08003d09
 8003c84:	08003d09 	.word	0x08003d09
 8003c88:	08003d09 	.word	0x08003d09
 8003c8c:	08003d11 	.word	0x08003d11
 8003c90:	08003d09 	.word	0x08003d09
 8003c94:	08003d09 	.word	0x08003d09
 8003c98:	08003d09 	.word	0x08003d09
 8003c9c:	08003d09 	.word	0x08003d09
 8003ca0:	08003d09 	.word	0x08003d09
 8003ca4:	08003d09 	.word	0x08003d09
 8003ca8:	08003d09 	.word	0x08003d09
 8003cac:	08003d11 	.word	0x08003d11
 8003cb0:	08003d09 	.word	0x08003d09
 8003cb4:	08003d09 	.word	0x08003d09
 8003cb8:	08003d09 	.word	0x08003d09
 8003cbc:	08003d09 	.word	0x08003d09
 8003cc0:	08003d09 	.word	0x08003d09
 8003cc4:	08003d09 	.word	0x08003d09
 8003cc8:	08003d09 	.word	0x08003d09
 8003ccc:	08003d11 	.word	0x08003d11
 8003cd0:	58024400 	.word	0x58024400
 8003cd4:	58024800 	.word	0x58024800
 8003cd8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce0:	3308      	adds	r3, #8
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 ffc5 	bl	8004c74 <RCCEx_PLL2_Config>
 8003cea:	4603      	mov	r3, r0
 8003cec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cf0:	e00f      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cf6:	3328      	adds	r3, #40	; 0x28
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f001 f86c 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d06:	e004      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d0e:	e000      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10b      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d1a:	4bc0      	ldr	r3, [pc, #768]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d2a:	4abc      	ldr	r2, [pc, #752]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	6553      	str	r3, [r2, #84]	; 0x54
 8003d30:	e003      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d36:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	f002 0302 	and.w	r3, r2, #2
 8003d46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d50:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003d54:	460b      	mov	r3, r1
 8003d56:	4313      	orrs	r3, r2
 8003d58:	d043      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d62:	2b05      	cmp	r3, #5
 8003d64:	d824      	bhi.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003d66:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003db9 	.word	0x08003db9
 8003d70:	08003d85 	.word	0x08003d85
 8003d74:	08003d9b 	.word	0x08003d9b
 8003d78:	08003db9 	.word	0x08003db9
 8003d7c:	08003db9 	.word	0x08003db9
 8003d80:	08003db9 	.word	0x08003db9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d88:	3308      	adds	r3, #8
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 ff71 	bl	8004c74 <RCCEx_PLL2_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d98:	e00f      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d9e:	3328      	adds	r3, #40	; 0x28
 8003da0:	2101      	movs	r1, #1
 8003da2:	4618      	mov	r0, r3
 8003da4:	f001 f818 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003dae:	e004      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003db6:	e000      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10b      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dc2:	4b96      	ldr	r3, [pc, #600]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc6:	f023 0107 	bic.w	r1, r3, #7
 8003dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dd2:	4a92      	ldr	r2, [pc, #584]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	6553      	str	r3, [r2, #84]	; 0x54
 8003dd8:	e003      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dde:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dea:	f002 0304 	and.w	r3, r2, #4
 8003dee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003df2:	2300      	movs	r3, #0
 8003df4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003df8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	d043      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e0a:	2b05      	cmp	r3, #5
 8003e0c:	d824      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003e0e:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e14:	08003e61 	.word	0x08003e61
 8003e18:	08003e2d 	.word	0x08003e2d
 8003e1c:	08003e43 	.word	0x08003e43
 8003e20:	08003e61 	.word	0x08003e61
 8003e24:	08003e61 	.word	0x08003e61
 8003e28:	08003e61 	.word	0x08003e61
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e30:	3308      	adds	r3, #8
 8003e32:	2101      	movs	r1, #1
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 ff1d 	bl	8004c74 <RCCEx_PLL2_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e40:	e00f      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e46:	3328      	adds	r3, #40	; 0x28
 8003e48:	2101      	movs	r1, #1
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 ffc4 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e56:	e004      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e5e:	e000      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10b      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e6a:	4b6c      	ldr	r3, [pc, #432]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6e:	f023 0107 	bic.w	r1, r3, #7
 8003e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e7a:	4a68      	ldr	r2, [pc, #416]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e80:	e003      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e86:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e92:	f002 0320 	and.w	r3, r2, #32
 8003e96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ea0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	d055      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eb6:	d033      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ebc:	d82c      	bhi.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec2:	d02f      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec8:	d826      	bhi.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003eca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ece:	d02b      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003ed0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ed4:	d820      	bhi.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eda:	d012      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee0:	d81a      	bhi.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d022      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003ee6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eea:	d115      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 febd 	bl	8004c74 <RCCEx_PLL2_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f00:	e015      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f06:	3328      	adds	r3, #40	; 0x28
 8003f08:	2102      	movs	r1, #2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 ff64 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f16:	e00a      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f1e:	e006      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f20:	bf00      	nop
 8003f22:	e004      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f24:	bf00      	nop
 8003f26:	e002      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f28:	bf00      	nop
 8003f2a:	e000      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10b      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f36:	4b39      	ldr	r3, [pc, #228]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003f3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f46:	4a35      	ldr	r2, [pc, #212]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	6553      	str	r3, [r2, #84]	; 0x54
 8003f4c:	e003      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f52:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f66:	2300      	movs	r3, #0
 8003f68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003f6c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4313      	orrs	r3, r2
 8003f74:	d058      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f7e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f82:	d033      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003f84:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f88:	d82c      	bhi.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8e:	d02f      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f94:	d826      	bhi.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003f96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f9a:	d02b      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003f9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fa0:	d820      	bhi.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa6:	d012      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fac:	d81a      	bhi.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d022      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb6:	d115      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fe57 	bl	8004c74 <RCCEx_PLL2_Config>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fcc:	e015      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fd2:	3328      	adds	r3, #40	; 0x28
 8003fd4:	2102      	movs	r1, #2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fefe 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fe2:	e00a      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003fea:	e006      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003fec:	bf00      	nop
 8003fee:	e004      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003ff0:	bf00      	nop
 8003ff2:	e002      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003ff4:	bf00      	nop
 8003ff6:	e000      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ffa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10e      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004002:	4b06      	ldr	r3, [pc, #24]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004006:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800400a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800400e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004012:	4a02      	ldr	r2, [pc, #8]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004014:	430b      	orrs	r3, r1
 8004016:	6593      	str	r3, [r2, #88]	; 0x58
 8004018:	e006      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800401a:	bf00      	nop
 800401c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004024:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004030:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004038:	2300      	movs	r3, #0
 800403a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800403e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004042:	460b      	mov	r3, r1
 8004044:	4313      	orrs	r3, r2
 8004046:	d055      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004048:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800404c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004050:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004054:	d033      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004056:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800405a:	d82c      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800405c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004060:	d02f      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004066:	d826      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004068:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800406c:	d02b      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800406e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004072:	d820      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004074:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004078:	d012      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800407a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800407e:	d81a      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004080:	2b00      	cmp	r3, #0
 8004082:	d022      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004088:	d115      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800408a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800408e:	3308      	adds	r3, #8
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fdee 	bl	8004c74 <RCCEx_PLL2_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800409e:	e015      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a4:	3328      	adds	r3, #40	; 0x28
 80040a6:	2102      	movs	r1, #2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fe95 	bl	8004dd8 <RCCEx_PLL3_Config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040b4:	e00a      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040bc:	e006      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80040be:	bf00      	nop
 80040c0:	e004      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80040c2:	bf00      	nop
 80040c4:	e002      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80040c6:	bf00      	nop
 80040c8:	e000      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80040ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10b      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040d4:	4ba1      	ldr	r3, [pc, #644]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80040dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040e4:	4a9d      	ldr	r2, [pc, #628]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040e6:	430b      	orrs	r3, r1
 80040e8:	6593      	str	r3, [r2, #88]	; 0x58
 80040ea:	e003      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	f002 0308 	and.w	r3, r2, #8
 8004100:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004104:	2300      	movs	r3, #0
 8004106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800410a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800410e:	460b      	mov	r3, r1
 8004110:	4313      	orrs	r3, r2
 8004112:	d01e      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800411c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004120:	d10c      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004126:	3328      	adds	r3, #40	; 0x28
 8004128:	2102      	movs	r1, #2
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fe54 	bl	8004dd8 <RCCEx_PLL3_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800413c:	4b87      	ldr	r3, [pc, #540]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800413e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004140:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800414c:	4a83      	ldr	r2, [pc, #524]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800414e:	430b      	orrs	r3, r1
 8004150:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415a:	f002 0310 	and.w	r3, r2, #16
 800415e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004162:	2300      	movs	r3, #0
 8004164:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004168:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800416c:	460b      	mov	r3, r1
 800416e:	4313      	orrs	r3, r2
 8004170:	d01e      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004176:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800417a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800417e:	d10c      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004184:	3328      	adds	r3, #40	; 0x28
 8004186:	2102      	movs	r1, #2
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fe25 	bl	8004dd8 <RCCEx_PLL3_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800419a:	4b70      	ldr	r3, [pc, #448]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800419c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041aa:	4a6c      	ldr	r2, [pc, #432]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041ac:	430b      	orrs	r3, r1
 80041ae:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80041bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041c0:	2300      	movs	r3, #0
 80041c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80041ca:	460b      	mov	r3, r1
 80041cc:	4313      	orrs	r3, r2
 80041ce:	d03e      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80041d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041dc:	d022      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80041de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041e2:	d81b      	bhi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80041e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ec:	d00b      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80041ee:	e015      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f4:	3308      	adds	r3, #8
 80041f6:	2100      	movs	r1, #0
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fd3b 	bl	8004c74 <RCCEx_PLL2_Config>
 80041fe:	4603      	mov	r3, r0
 8004200:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004204:	e00f      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004206:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800420a:	3328      	adds	r3, #40	; 0x28
 800420c:	2102      	movs	r1, #2
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fde2 	bl	8004dd8 <RCCEx_PLL3_Config>
 8004214:	4603      	mov	r3, r0
 8004216:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800421a:	e004      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004222:	e000      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004226:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10b      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800422e:	4b4b      	ldr	r3, [pc, #300]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004232:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800423a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800423e:	4a47      	ldr	r2, [pc, #284]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004240:	430b      	orrs	r3, r1
 8004242:	6593      	str	r3, [r2, #88]	; 0x58
 8004244:	e003      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004246:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800424a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800424e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004256:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800425a:	67bb      	str	r3, [r7, #120]	; 0x78
 800425c:	2300      	movs	r3, #0
 800425e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004260:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004264:	460b      	mov	r3, r1
 8004266:	4313      	orrs	r3, r2
 8004268:	d03b      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800426a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004272:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004276:	d01f      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004278:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800427c:	d818      	bhi.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800427e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004282:	d003      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004284:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004288:	d007      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800428a:	e011      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800428c:	4b33      	ldr	r3, [pc, #204]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	4a32      	ldr	r2, [pc, #200]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004296:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004298:	e00f      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800429a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800429e:	3328      	adds	r3, #40	; 0x28
 80042a0:	2101      	movs	r1, #1
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fd98 	bl	8004dd8 <RCCEx_PLL3_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80042ae:	e004      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042b6:	e000      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80042b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10b      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042c2:	4b26      	ldr	r3, [pc, #152]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80042ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d2:	4a22      	ldr	r2, [pc, #136]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042d4:	430b      	orrs	r3, r1
 80042d6:	6553      	str	r3, [r2, #84]	; 0x54
 80042d8:	e003      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ea:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80042ee:	673b      	str	r3, [r7, #112]	; 0x70
 80042f0:	2300      	movs	r3, #0
 80042f2:	677b      	str	r3, [r7, #116]	; 0x74
 80042f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80042f8:	460b      	mov	r3, r1
 80042fa:	4313      	orrs	r3, r2
 80042fc:	d034      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80042fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430c:	d007      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800430e:	e011      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004310:	4b12      	ldr	r3, [pc, #72]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	4a11      	ldr	r2, [pc, #68]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800431a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800431c:	e00e      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800431e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004322:	3308      	adds	r3, #8
 8004324:	2102      	movs	r1, #2
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fca4 	bl	8004c74 <RCCEx_PLL2_Config>
 800432c:	4603      	mov	r3, r0
 800432e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004332:	e003      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800433a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800433c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10d      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004348:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800434c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004352:	4a02      	ldr	r2, [pc, #8]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004354:	430b      	orrs	r3, r1
 8004356:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004358:	e006      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800435a:	bf00      	nop
 800435c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004360:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004364:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800436c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004370:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004374:	66bb      	str	r3, [r7, #104]	; 0x68
 8004376:	2300      	movs	r3, #0
 8004378:	66fb      	str	r3, [r7, #108]	; 0x6c
 800437a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800437e:	460b      	mov	r3, r1
 8004380:	4313      	orrs	r3, r2
 8004382:	d00c      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004384:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004388:	3328      	adds	r3, #40	; 0x28
 800438a:	2102      	movs	r1, #2
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fd23 	bl	8004dd8 <RCCEx_PLL3_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800439e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80043aa:	663b      	str	r3, [r7, #96]	; 0x60
 80043ac:	2300      	movs	r3, #0
 80043ae:	667b      	str	r3, [r7, #100]	; 0x64
 80043b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80043b4:	460b      	mov	r3, r1
 80043b6:	4313      	orrs	r3, r2
 80043b8:	d038      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80043ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043c6:	d018      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80043c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043cc:	d811      	bhi.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80043ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043d2:	d014      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80043d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043d8:	d80b      	bhi.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d011      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80043de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e2:	d106      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043e4:	4bc3      	ldr	r3, [pc, #780]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	4ac2      	ldr	r2, [pc, #776]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80043f0:	e008      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80043f8:	e004      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80043fa:	bf00      	nop
 80043fc:	e002      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004404:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10b      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800440c:	4bb9      	ldr	r3, [pc, #740]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800440e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004410:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004414:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441c:	4ab5      	ldr	r2, [pc, #724]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800441e:	430b      	orrs	r3, r1
 8004420:	6553      	str	r3, [r2, #84]	; 0x54
 8004422:	e003      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004424:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004428:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800442c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004438:	65bb      	str	r3, [r7, #88]	; 0x58
 800443a:	2300      	movs	r3, #0
 800443c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800443e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004442:	460b      	mov	r3, r1
 8004444:	4313      	orrs	r3, r2
 8004446:	d009      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004448:	4baa      	ldr	r3, [pc, #680]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800444a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004456:	4aa7      	ldr	r2, [pc, #668]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004458:	430b      	orrs	r3, r1
 800445a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800445c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004468:	653b      	str	r3, [r7, #80]	; 0x50
 800446a:	2300      	movs	r3, #0
 800446c:	657b      	str	r3, [r7, #84]	; 0x54
 800446e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004472:	460b      	mov	r3, r1
 8004474:	4313      	orrs	r3, r2
 8004476:	d009      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004478:	4b9e      	ldr	r3, [pc, #632]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800447a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004480:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004486:	4a9b      	ldr	r2, [pc, #620]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004488:	430b      	orrs	r3, r1
 800448a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800448c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004498:	64bb      	str	r3, [r7, #72]	; 0x48
 800449a:	2300      	movs	r3, #0
 800449c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800449e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80044a2:	460b      	mov	r3, r1
 80044a4:	4313      	orrs	r3, r2
 80044a6:	d009      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80044a8:	4b92      	ldr	r3, [pc, #584]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ac:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80044b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b6:	4a8f      	ldr	r2, [pc, #572]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044b8:	430b      	orrs	r3, r1
 80044ba:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80044c8:	643b      	str	r3, [r7, #64]	; 0x40
 80044ca:	2300      	movs	r3, #0
 80044cc:	647b      	str	r3, [r7, #68]	; 0x44
 80044ce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80044d2:	460b      	mov	r3, r1
 80044d4:	4313      	orrs	r3, r2
 80044d6:	d00e      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044d8:	4b86      	ldr	r3, [pc, #536]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	4a85      	ldr	r2, [pc, #532]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044e2:	6113      	str	r3, [r2, #16]
 80044e4:	4b83      	ldr	r3, [pc, #524]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044e6:	6919      	ldr	r1, [r3, #16]
 80044e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80044f0:	4a80      	ldr	r2, [pc, #512]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044f2:	430b      	orrs	r3, r1
 80044f4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fe:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004502:	63bb      	str	r3, [r7, #56]	; 0x38
 8004504:	2300      	movs	r3, #0
 8004506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004508:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800450c:	460b      	mov	r3, r1
 800450e:	4313      	orrs	r3, r2
 8004510:	d009      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004512:	4b78      	ldr	r3, [pc, #480]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004516:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800451a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	4a74      	ldr	r2, [pc, #464]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004522:	430b      	orrs	r3, r1
 8004524:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004532:	633b      	str	r3, [r7, #48]	; 0x30
 8004534:	2300      	movs	r3, #0
 8004536:	637b      	str	r3, [r7, #52]	; 0x34
 8004538:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800453c:	460b      	mov	r3, r1
 800453e:	4313      	orrs	r3, r2
 8004540:	d00a      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004542:	4b6c      	ldr	r3, [pc, #432]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800454a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800454e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004552:	4a68      	ldr	r2, [pc, #416]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004554:	430b      	orrs	r3, r1
 8004556:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004558:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	2100      	movs	r1, #0
 8004562:	62b9      	str	r1, [r7, #40]	; 0x28
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800456a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800456e:	460b      	mov	r3, r1
 8004570:	4313      	orrs	r3, r2
 8004572:	d011      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004578:	3308      	adds	r3, #8
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fb79 	bl	8004c74 <RCCEx_PLL2_Config>
 8004582:	4603      	mov	r3, r0
 8004584:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004588:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004590:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004594:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004598:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	2100      	movs	r1, #0
 80045a2:	6239      	str	r1, [r7, #32]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
 80045aa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80045ae:	460b      	mov	r3, r1
 80045b0:	4313      	orrs	r3, r2
 80045b2:	d011      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045b8:	3308      	adds	r3, #8
 80045ba:	2101      	movs	r1, #1
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fb59 	bl	8004c74 <RCCEx_PLL2_Config>
 80045c2:	4603      	mov	r3, r0
 80045c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80045c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e0:	2100      	movs	r1, #0
 80045e2:	61b9      	str	r1, [r7, #24]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045ee:	460b      	mov	r3, r1
 80045f0:	4313      	orrs	r3, r2
 80045f2:	d011      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045f8:	3308      	adds	r3, #8
 80045fa:	2102      	movs	r1, #2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fb39 	bl	8004c74 <RCCEx_PLL2_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004608:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004610:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004614:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004620:	2100      	movs	r1, #0
 8004622:	6139      	str	r1, [r7, #16]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800462e:	460b      	mov	r3, r1
 8004630:	4313      	orrs	r3, r2
 8004632:	d011      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004634:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004638:	3328      	adds	r3, #40	; 0x28
 800463a:	2100      	movs	r1, #0
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fbcb 	bl	8004dd8 <RCCEx_PLL3_Config>
 8004642:	4603      	mov	r3, r0
 8004644:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004648:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004650:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004654:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	2100      	movs	r1, #0
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800466e:	460b      	mov	r3, r1
 8004670:	4313      	orrs	r3, r2
 8004672:	d011      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004674:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004678:	3328      	adds	r3, #40	; 0x28
 800467a:	2101      	movs	r1, #1
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fbab 	bl	8004dd8 <RCCEx_PLL3_Config>
 8004682:	4603      	mov	r3, r0
 8004684:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004688:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004690:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004694:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004698:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	2100      	movs	r1, #0
 80046a2:	6039      	str	r1, [r7, #0]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	607b      	str	r3, [r7, #4]
 80046aa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046ae:	460b      	mov	r3, r1
 80046b0:	4313      	orrs	r3, r2
 80046b2:	d011      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b8:	3328      	adds	r3, #40	; 0x28
 80046ba:	2102      	movs	r1, #2
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 fb8b 	bl	8004dd8 <RCCEx_PLL3_Config>
 80046c2:	4603      	mov	r3, r0
 80046c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80046c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80046d8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	e000      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80046ec:	46bd      	mov	sp, r7
 80046ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046f2:	bf00      	nop
 80046f4:	58024400 	.word	0x58024400

080046f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80046fc:	f7fe fde2 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 8004700:	4602      	mov	r2, r0
 8004702:	4b06      	ldr	r3, [pc, #24]	; (800471c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	091b      	lsrs	r3, r3, #4
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	4904      	ldr	r1, [pc, #16]	; (8004720 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800470e:	5ccb      	ldrb	r3, [r1, r3]
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004718:	4618      	mov	r0, r3
 800471a:	bd80      	pop	{r7, pc}
 800471c:	58024400 	.word	0x58024400
 8004720:	08008354 	.word	0x08008354

08004724 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004724:	b480      	push	{r7}
 8004726:	b089      	sub	sp, #36	; 0x24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800472c:	4ba1      	ldr	r3, [pc, #644]	; (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800472e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004736:	4b9f      	ldr	r3, [pc, #636]	; (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	0b1b      	lsrs	r3, r3, #12
 800473c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004740:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004742:	4b9c      	ldr	r3, [pc, #624]	; (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	091b      	lsrs	r3, r3, #4
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800474e:	4b99      	ldr	r3, [pc, #612]	; (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004752:	08db      	lsrs	r3, r3, #3
 8004754:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	fb02 f303 	mul.w	r3, r2, r3
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004766:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8111 	beq.w	8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b02      	cmp	r3, #2
 8004776:	f000 8083 	beq.w	8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b02      	cmp	r3, #2
 800477e:	f200 80a1 	bhi.w	80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d056      	beq.n	800483c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800478e:	e099      	b.n	80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004790:	4b88      	ldr	r3, [pc, #544]	; (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0320 	and.w	r3, r3, #32
 8004798:	2b00      	cmp	r3, #0
 800479a:	d02d      	beq.n	80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800479c:	4b85      	ldr	r3, [pc, #532]	; (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	08db      	lsrs	r3, r3, #3
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	4a84      	ldr	r2, [pc, #528]	; (80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80047a8:	fa22 f303 	lsr.w	r3, r2, r3
 80047ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	ee07 3a90 	vmov	s15, r3
 80047b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	ee07 3a90 	vmov	s15, r3
 80047be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c6:	4b7b      	ldr	r3, [pc, #492]	; (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047f6:	e087      	b.n	8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004802:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80049c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800480a:	4b6a      	ldr	r3, [pc, #424]	; (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004812:	ee07 3a90 	vmov	s15, r3
 8004816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481a:	ed97 6a03 	vldr	s12, [r7, #12]
 800481e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800482e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800483a:	e065      	b.n	8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	ee07 3a90 	vmov	s15, r3
 8004842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004846:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800484a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800484e:	4b59      	ldr	r3, [pc, #356]	; (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004862:	eddf 5a56 	vldr	s11, [pc, #344]	; 80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800486a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800486e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800487e:	e043      	b.n	8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800488e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004892:	4b48      	ldr	r3, [pc, #288]	; (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489a:	ee07 3a90 	vmov	s15, r3
 800489e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048c2:	e021      	b.n	8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048d6:	4b37      	ldr	r3, [pc, #220]	; (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004906:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004908:	4b2a      	ldr	r3, [pc, #168]	; (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	0a5b      	lsrs	r3, r3, #9
 800490e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800491e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004922:	edd7 6a07 	vldr	s13, [r7, #28]
 8004926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800492a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800492e:	ee17 2a90 	vmov	r2, s15
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004936:	4b1f      	ldr	r3, [pc, #124]	; (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493a:	0c1b      	lsrs	r3, r3, #16
 800493c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004940:	ee07 3a90 	vmov	s15, r3
 8004944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004948:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800494c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004950:	edd7 6a07 	vldr	s13, [r7, #28]
 8004954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800495c:	ee17 2a90 	vmov	r2, s15
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004964:	4b13      	ldr	r3, [pc, #76]	; (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	0e1b      	lsrs	r3, r3, #24
 800496a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004976:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800497a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800497e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800498a:	ee17 2a90 	vmov	r2, s15
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004992:	e008      	b.n	80049a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	609a      	str	r2, [r3, #8]
}
 80049a6:	bf00      	nop
 80049a8:	3724      	adds	r7, #36	; 0x24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	58024400 	.word	0x58024400
 80049b8:	03d09000 	.word	0x03d09000
 80049bc:	46000000 	.word	0x46000000
 80049c0:	4c742400 	.word	0x4c742400
 80049c4:	4a742400 	.word	0x4a742400
 80049c8:	4af42400 	.word	0x4af42400

080049cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b089      	sub	sp, #36	; 0x24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049d4:	4ba1      	ldr	r3, [pc, #644]	; (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80049de:	4b9f      	ldr	r3, [pc, #636]	; (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e2:	0d1b      	lsrs	r3, r3, #20
 80049e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049ea:	4b9c      	ldr	r3, [pc, #624]	; (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	0a1b      	lsrs	r3, r3, #8
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80049f6:	4b99      	ldr	r3, [pc, #612]	; (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fa:	08db      	lsrs	r3, r3, #3
 80049fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	fb02 f303 	mul.w	r3, r2, r3
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 8111 	beq.w	8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	f000 8083 	beq.w	8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	f200 80a1 	bhi.w	8004b6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d056      	beq.n	8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a36:	e099      	b.n	8004b6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a38:	4b88      	ldr	r3, [pc, #544]	; (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d02d      	beq.n	8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a44:	4b85      	ldr	r3, [pc, #532]	; (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	08db      	lsrs	r3, r3, #3
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	4a84      	ldr	r2, [pc, #528]	; (8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a50:	fa22 f303 	lsr.w	r3, r2, r3
 8004a54:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	ee07 3a90 	vmov	s15, r3
 8004a5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a6e:	4b7b      	ldr	r3, [pc, #492]	; (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a82:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a9e:	e087      	b.n	8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aaa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c68 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab2:	4b6a      	ldr	r3, [pc, #424]	; (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ac6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ae2:	e065      	b.n	8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af6:	4b59      	ldr	r3, [pc, #356]	; (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b0a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b26:	e043      	b.n	8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b32:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3a:	4b48      	ldr	r3, [pc, #288]	; (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b4e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b6a:	e021      	b.n	8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b76:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b7e:	4b37      	ldr	r3, [pc, #220]	; (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b92:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004bb0:	4b2a      	ldr	r3, [pc, #168]	; (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	0a5b      	lsrs	r3, r3, #9
 8004bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bca:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd6:	ee17 2a90 	vmov	r2, s15
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004bde:	4b1f      	ldr	r3, [pc, #124]	; (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	0c1b      	lsrs	r3, r3, #16
 8004be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be8:	ee07 3a90 	vmov	s15, r3
 8004bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c04:	ee17 2a90 	vmov	r2, s15
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c0c:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	0e1b      	lsrs	r3, r3, #24
 8004c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c26:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c32:	ee17 2a90 	vmov	r2, s15
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c3a:	e008      	b.n	8004c4e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	609a      	str	r2, [r3, #8]
}
 8004c4e:	bf00      	nop
 8004c50:	3724      	adds	r7, #36	; 0x24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	58024400 	.word	0x58024400
 8004c60:	03d09000 	.word	0x03d09000
 8004c64:	46000000 	.word	0x46000000
 8004c68:	4c742400 	.word	0x4c742400
 8004c6c:	4a742400 	.word	0x4a742400
 8004c70:	4af42400 	.word	0x4af42400

08004c74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c82:	4b53      	ldr	r3, [pc, #332]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d101      	bne.n	8004c92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e099      	b.n	8004dc6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c92:	4b4f      	ldr	r3, [pc, #316]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a4e      	ldr	r2, [pc, #312]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004c98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c9e:	f7fc facd 	bl	800123c <HAL_GetTick>
 8004ca2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ca4:	e008      	b.n	8004cb8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ca6:	f7fc fac9 	bl	800123c <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e086      	b.n	8004dc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cb8:	4b45      	ldr	r3, [pc, #276]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1f0      	bne.n	8004ca6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004cc4:	4b42      	ldr	r3, [pc, #264]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	031b      	lsls	r3, r3, #12
 8004cd2:	493f      	ldr	r1, [pc, #252]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	628b      	str	r3, [r1, #40]	; 0x28
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	025b      	lsls	r3, r3, #9
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	041b      	lsls	r3, r3, #16
 8004cf6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	061b      	lsls	r3, r3, #24
 8004d04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d08:	4931      	ldr	r1, [pc, #196]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d0e:	4b30      	ldr	r3, [pc, #192]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	492d      	ldr	r1, [pc, #180]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d20:	4b2b      	ldr	r3, [pc, #172]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	f023 0220 	bic.w	r2, r3, #32
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	4928      	ldr	r1, [pc, #160]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d32:	4b27      	ldr	r3, [pc, #156]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	4a26      	ldr	r2, [pc, #152]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d38:	f023 0310 	bic.w	r3, r3, #16
 8004d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d3e:	4b24      	ldr	r3, [pc, #144]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d42:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <RCCEx_PLL2_Config+0x160>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	69d2      	ldr	r2, [r2, #28]
 8004d4a:	00d2      	lsls	r2, r2, #3
 8004d4c:	4920      	ldr	r1, [pc, #128]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d52:	4b1f      	ldr	r3, [pc, #124]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	4a1e      	ldr	r2, [pc, #120]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d58:	f043 0310 	orr.w	r3, r3, #16
 8004d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d106      	bne.n	8004d72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d64:	4b1a      	ldr	r3, [pc, #104]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	4a19      	ldr	r2, [pc, #100]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d70:	e00f      	b.n	8004d92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d106      	bne.n	8004d86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d78:	4b15      	ldr	r3, [pc, #84]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	4a14      	ldr	r2, [pc, #80]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d84:	e005      	b.n	8004d92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d86:	4b12      	ldr	r3, [pc, #72]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8a:	4a11      	ldr	r2, [pc, #68]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d92:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a0e      	ldr	r2, [pc, #56]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d9e:	f7fc fa4d 	bl	800123c <HAL_GetTick>
 8004da2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004da4:	e008      	b.n	8004db8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004da6:	f7fc fa49 	bl	800123c <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e006      	b.n	8004dc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004db8:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0f0      	beq.n	8004da6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	58024400 	.word	0x58024400
 8004dd4:	ffff0007 	.word	0xffff0007

08004dd8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004de6:	4b53      	ldr	r3, [pc, #332]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d101      	bne.n	8004df6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e099      	b.n	8004f2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004df6:	4b4f      	ldr	r3, [pc, #316]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a4e      	ldr	r2, [pc, #312]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e02:	f7fc fa1b 	bl	800123c <HAL_GetTick>
 8004e06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e08:	e008      	b.n	8004e1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e0a:	f7fc fa17 	bl	800123c <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e086      	b.n	8004f2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e1c:	4b45      	ldr	r3, [pc, #276]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1f0      	bne.n	8004e0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e28:	4b42      	ldr	r3, [pc, #264]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	051b      	lsls	r3, r3, #20
 8004e36:	493f      	ldr	r1, [pc, #252]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	628b      	str	r3, [r1, #40]	; 0x28
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	025b      	lsls	r3, r3, #9
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	041b      	lsls	r3, r3, #16
 8004e5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	061b      	lsls	r3, r3, #24
 8004e68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e6c:	4931      	ldr	r1, [pc, #196]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e72:	4b30      	ldr	r3, [pc, #192]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	492d      	ldr	r1, [pc, #180]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e84:	4b2b      	ldr	r3, [pc, #172]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	4928      	ldr	r1, [pc, #160]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e96:	4b27      	ldr	r3, [pc, #156]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	4a26      	ldr	r2, [pc, #152]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ea2:	4b24      	ldr	r3, [pc, #144]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ea6:	4b24      	ldr	r3, [pc, #144]	; (8004f38 <RCCEx_PLL3_Config+0x160>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	69d2      	ldr	r2, [r2, #28]
 8004eae:	00d2      	lsls	r2, r2, #3
 8004eb0:	4920      	ldr	r1, [pc, #128]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004eb6:	4b1f      	ldr	r3, [pc, #124]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eba:	4a1e      	ldr	r2, [pc, #120]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d106      	bne.n	8004ed6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ec8:	4b1a      	ldr	r3, [pc, #104]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	4a19      	ldr	r2, [pc, #100]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ece:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ed2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ed4:	e00f      	b.n	8004ef6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d106      	bne.n	8004eea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004edc:	4b15      	ldr	r3, [pc, #84]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	4a14      	ldr	r2, [pc, #80]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ee2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ee8:	e005      	b.n	8004ef6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004eea:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	4a11      	ldr	r2, [pc, #68]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ef0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ef4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ef6:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a0e      	ldr	r2, [pc, #56]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f02:	f7fc f99b 	bl	800123c <HAL_GetTick>
 8004f06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f08:	e008      	b.n	8004f1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f0a:	f7fc f997 	bl	800123c <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e006      	b.n	8004f2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f1c:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0f0      	beq.n	8004f0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	58024400 	.word	0x58024400
 8004f38:	ffff0007 	.word	0xffff0007

08004f3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e042      	b.n	8004fd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d106      	bne.n	8004f66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7fb ffb7 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2224      	movs	r2, #36	; 0x24
 8004f6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0201 	bic.w	r2, r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fce0 	bl	8005944 <UART_SetConfig>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d101      	bne.n	8004f8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e022      	b.n	8004fd4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f001 fb40 	bl	800661c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004faa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0201 	orr.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f001 fbc7 	bl	8006760 <UART_CheckIdleState>
 8004fd2:	4603      	mov	r3, r0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08a      	sub	sp, #40	; 0x28
 8004fe0:	af02      	add	r7, sp, #8
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	d17b      	bne.n	80050ee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_UART_Transmit+0x26>
 8004ffc:	88fb      	ldrh	r3, [r7, #6]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e074      	b.n	80050f0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2221      	movs	r2, #33	; 0x21
 8005012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005016:	f7fc f911 	bl	800123c <HAL_GetTick>
 800501a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	88fa      	ldrh	r2, [r7, #6]
 8005020:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	88fa      	ldrh	r2, [r7, #6]
 8005028:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005034:	d108      	bne.n	8005048 <HAL_UART_Transmit+0x6c>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d104      	bne.n	8005048 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800503e:	2300      	movs	r3, #0
 8005040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	e003      	b.n	8005050 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800504c:	2300      	movs	r3, #0
 800504e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005050:	e030      	b.n	80050b4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2200      	movs	r2, #0
 800505a:	2180      	movs	r1, #128	; 0x80
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f001 fc29 	bl	80068b4 <UART_WaitOnFlagUntilTimeout>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2220      	movs	r2, #32
 800506c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e03d      	b.n	80050f0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10b      	bne.n	8005092 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005088:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	3302      	adds	r3, #2
 800508e:	61bb      	str	r3, [r7, #24]
 8005090:	e007      	b.n	80050a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	781a      	ldrb	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	3301      	adds	r3, #1
 80050a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	3b01      	subs	r3, #1
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1c8      	bne.n	8005052 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	2200      	movs	r2, #0
 80050c8:	2140      	movs	r1, #64	; 0x40
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f001 fbf2 	bl	80068b4 <UART_WaitOnFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d005      	beq.n	80050e2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e006      	b.n	80050f0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	e000      	b.n	80050f0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80050ee:	2302      	movs	r3, #2
  }
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3720      	adds	r7, #32
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08a      	sub	sp, #40	; 0x28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	4613      	mov	r3, r2
 8005104:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800510c:	2b20      	cmp	r3, #32
 800510e:	d137      	bne.n	8005180 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <HAL_UART_Receive_IT+0x24>
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e030      	b.n	8005182 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a18      	ldr	r2, [pc, #96]	; (800518c <HAL_UART_Receive_IT+0x94>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d01f      	beq.n	8005170 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d018      	beq.n	8005170 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	e853 3f00 	ldrex	r3, [r3]
 800514a:	613b      	str	r3, [r7, #16]
   return(result);
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	461a      	mov	r2, r3
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	623b      	str	r3, [r7, #32]
 800515e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005160:	69f9      	ldr	r1, [r7, #28]
 8005162:	6a3a      	ldr	r2, [r7, #32]
 8005164:	e841 2300 	strex	r3, r2, [r1]
 8005168:	61bb      	str	r3, [r7, #24]
   return(result);
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e6      	bne.n	800513e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005170:	88fb      	ldrh	r3, [r7, #6]
 8005172:	461a      	mov	r2, r3
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f001 fc04 	bl	8006984 <UART_Start_Receive_IT>
 800517c:	4603      	mov	r3, r0
 800517e:	e000      	b.n	8005182 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005180:	2302      	movs	r3, #2
  }
}
 8005182:	4618      	mov	r0, r3
 8005184:	3728      	adds	r7, #40	; 0x28
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	58000c00 	.word	0x58000c00

08005190 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b0ba      	sub	sp, #232	; 0xe8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80051ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80051be:	4013      	ands	r3, r2
 80051c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80051c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d11b      	bne.n	8005204 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d015      	beq.n	8005204 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051dc:	f003 0320 	and.w	r3, r3, #32
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d105      	bne.n	80051f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d009      	beq.n	8005204 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 8377 	beq.w	80058e8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	4798      	blx	r3
      }
      return;
 8005202:	e371      	b.n	80058e8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005204:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 8123 	beq.w	8005454 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800520e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005212:	4b8d      	ldr	r3, [pc, #564]	; (8005448 <HAL_UART_IRQHandler+0x2b8>)
 8005214:	4013      	ands	r3, r2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800521a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800521e:	4b8b      	ldr	r3, [pc, #556]	; (800544c <HAL_UART_IRQHandler+0x2bc>)
 8005220:	4013      	ands	r3, r2
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 8116 	beq.w	8005454 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	d011      	beq.n	8005258 <HAL_UART_IRQHandler+0xc8>
 8005234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00b      	beq.n	8005258 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2201      	movs	r2, #1
 8005246:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524e:	f043 0201 	orr.w	r2, r3, #1
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d011      	beq.n	8005288 <HAL_UART_IRQHandler+0xf8>
 8005264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00b      	beq.n	8005288 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2202      	movs	r2, #2
 8005276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527e:	f043 0204 	orr.w	r2, r3, #4
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	d011      	beq.n	80052b8 <HAL_UART_IRQHandler+0x128>
 8005294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00b      	beq.n	80052b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2204      	movs	r2, #4
 80052a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ae:	f043 0202 	orr.w	r2, r3, #2
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052bc:	f003 0308 	and.w	r3, r3, #8
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d017      	beq.n	80052f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d105      	bne.n	80052dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80052d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80052d4:	4b5c      	ldr	r3, [pc, #368]	; (8005448 <HAL_UART_IRQHandler+0x2b8>)
 80052d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00b      	beq.n	80052f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2208      	movs	r2, #8
 80052e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ea:	f043 0208 	orr.w	r2, r3, #8
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d012      	beq.n	8005326 <HAL_UART_IRQHandler+0x196>
 8005300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005304:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00c      	beq.n	8005326 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005314:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531c:	f043 0220 	orr.w	r2, r3, #32
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 82dd 	beq.w	80058ec <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b00      	cmp	r3, #0
 800533c:	d013      	beq.n	8005366 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800533e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005342:	f003 0320 	and.w	r3, r3, #32
 8005346:	2b00      	cmp	r3, #0
 8005348:	d105      	bne.n	8005356 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800534a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800534e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d007      	beq.n	8005366 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537a:	2b40      	cmp	r3, #64	; 0x40
 800537c:	d005      	beq.n	800538a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800537e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005382:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005386:	2b00      	cmp	r3, #0
 8005388:	d054      	beq.n	8005434 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f001 fc1c 	bl	8006bc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539a:	2b40      	cmp	r3, #64	; 0x40
 800539c:	d146      	bne.n	800542c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3308      	adds	r3, #8
 80053a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053ac:	e853 3f00 	ldrex	r3, [r3]
 80053b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3308      	adds	r3, #8
 80053c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1d9      	bne.n	800539e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d017      	beq.n	8005424 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053fa:	4a15      	ldr	r2, [pc, #84]	; (8005450 <HAL_UART_IRQHandler+0x2c0>)
 80053fc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005404:	4618      	mov	r0, r3
 8005406:	f7fc fb77 	bl	8001af8 <HAL_DMA_Abort_IT>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d019      	beq.n	8005444 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800541e:	4610      	mov	r0, r2
 8005420:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005422:	e00f      	b.n	8005444 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fa77 	bl	8005918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800542a:	e00b      	b.n	8005444 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 fa73 	bl	8005918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005432:	e007      	b.n	8005444 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fa6f 	bl	8005918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005442:	e253      	b.n	80058ec <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005444:	bf00      	nop
    return;
 8005446:	e251      	b.n	80058ec <HAL_UART_IRQHandler+0x75c>
 8005448:	10000001 	.word	0x10000001
 800544c:	04000120 	.word	0x04000120
 8005450:	08006c95 	.word	0x08006c95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005458:	2b01      	cmp	r3, #1
 800545a:	f040 81e7 	bne.w	800582c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800545e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005462:	f003 0310 	and.w	r3, r3, #16
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 81e0 	beq.w	800582c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800546c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005470:	f003 0310 	and.w	r3, r3, #16
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 81d9 	beq.w	800582c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2210      	movs	r2, #16
 8005480:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548c:	2b40      	cmp	r3, #64	; 0x40
 800548e:	f040 8151 	bne.w	8005734 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a96      	ldr	r2, [pc, #600]	; (80056f4 <HAL_UART_IRQHandler+0x564>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d068      	beq.n	8005572 <HAL_UART_IRQHandler+0x3e2>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a93      	ldr	r2, [pc, #588]	; (80056f8 <HAL_UART_IRQHandler+0x568>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d061      	beq.n	8005572 <HAL_UART_IRQHandler+0x3e2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a91      	ldr	r2, [pc, #580]	; (80056fc <HAL_UART_IRQHandler+0x56c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d05a      	beq.n	8005572 <HAL_UART_IRQHandler+0x3e2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a8e      	ldr	r2, [pc, #568]	; (8005700 <HAL_UART_IRQHandler+0x570>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d053      	beq.n	8005572 <HAL_UART_IRQHandler+0x3e2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a8c      	ldr	r2, [pc, #560]	; (8005704 <HAL_UART_IRQHandler+0x574>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d04c      	beq.n	8005572 <HAL_UART_IRQHandler+0x3e2>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a89      	ldr	r2, [pc, #548]	; (8005708 <HAL_UART_IRQHandler+0x578>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d045      	beq.n	8005572 <HAL_UART_IRQHandler+0x3e2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a87      	ldr	r2, [pc, #540]	; (800570c <HAL_UART_IRQHandler+0x57c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d03e      	beq.n	8005572 <HAL_UART_IRQHandler+0x3e2>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a84      	ldr	r2, [pc, #528]	; (8005710 <HAL_UART_IRQHandler+0x580>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d037      	beq.n	8005572 <HAL_UART_IRQHandler+0x3e2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a82      	ldr	r2, [pc, #520]	; (8005714 <HAL_UART_IRQHandler+0x584>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d030      	beq.n	8005572 <HAL_UART_IRQHandler+0x3e2>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a7f      	ldr	r2, [pc, #508]	; (8005718 <HAL_UART_IRQHandler+0x588>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d029      	beq.n	8005572 <HAL_UART_IRQHandler+0x3e2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a7d      	ldr	r2, [pc, #500]	; (800571c <HAL_UART_IRQHandler+0x58c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d022      	beq.n	8005572 <HAL_UART_IRQHandler+0x3e2>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a7a      	ldr	r2, [pc, #488]	; (8005720 <HAL_UART_IRQHandler+0x590>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d01b      	beq.n	8005572 <HAL_UART_IRQHandler+0x3e2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a78      	ldr	r2, [pc, #480]	; (8005724 <HAL_UART_IRQHandler+0x594>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d014      	beq.n	8005572 <HAL_UART_IRQHandler+0x3e2>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a75      	ldr	r2, [pc, #468]	; (8005728 <HAL_UART_IRQHandler+0x598>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d00d      	beq.n	8005572 <HAL_UART_IRQHandler+0x3e2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a73      	ldr	r2, [pc, #460]	; (800572c <HAL_UART_IRQHandler+0x59c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d006      	beq.n	8005572 <HAL_UART_IRQHandler+0x3e2>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a70      	ldr	r2, [pc, #448]	; (8005730 <HAL_UART_IRQHandler+0x5a0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d106      	bne.n	8005580 <HAL_UART_IRQHandler+0x3f0>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	b29b      	uxth	r3, r3
 800557e:	e005      	b.n	800558c <HAL_UART_IRQHandler+0x3fc>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	b29b      	uxth	r3, r3
 800558c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005590:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 81ab 	beq.w	80058f0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80055a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055a4:	429a      	cmp	r2, r3
 80055a6:	f080 81a3 	bcs.w	80058f0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055c0:	f000 8087 	beq.w	80056d2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	461a      	mov	r2, r3
 80055ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80055ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005606:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1da      	bne.n	80055c4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3308      	adds	r3, #8
 8005614:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800561e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005620:	f023 0301 	bic.w	r3, r3, #1
 8005624:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3308      	adds	r3, #8
 800562e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005632:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005636:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800563a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e1      	bne.n	800560e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3308      	adds	r3, #8
 8005650:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800565a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800565c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005660:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3308      	adds	r3, #8
 800566a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800566e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005670:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005674:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800567c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e3      	bne.n	800564a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005698:	e853 3f00 	ldrex	r3, [r3]
 800569c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800569e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a0:	f023 0310 	bic.w	r3, r3, #16
 80056a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80056b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e4      	bne.n	8005690 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7fb fef5 	bl	80014bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2202      	movs	r2, #2
 80056d6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f91d 	bl	800592c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056f2:	e0fd      	b.n	80058f0 <HAL_UART_IRQHandler+0x760>
 80056f4:	40020010 	.word	0x40020010
 80056f8:	40020028 	.word	0x40020028
 80056fc:	40020040 	.word	0x40020040
 8005700:	40020058 	.word	0x40020058
 8005704:	40020070 	.word	0x40020070
 8005708:	40020088 	.word	0x40020088
 800570c:	400200a0 	.word	0x400200a0
 8005710:	400200b8 	.word	0x400200b8
 8005714:	40020410 	.word	0x40020410
 8005718:	40020428 	.word	0x40020428
 800571c:	40020440 	.word	0x40020440
 8005720:	40020458 	.word	0x40020458
 8005724:	40020470 	.word	0x40020470
 8005728:	40020488 	.word	0x40020488
 800572c:	400204a0 	.word	0x400204a0
 8005730:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005740:	b29b      	uxth	r3, r3
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 80cf 	beq.w	80058f4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8005756:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 80ca 	beq.w	80058f4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800576e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005770:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005774:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	461a      	mov	r2, r3
 800577e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005782:	647b      	str	r3, [r7, #68]	; 0x44
 8005784:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005788:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e4      	bne.n	8005760 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3308      	adds	r3, #8
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	623b      	str	r3, [r7, #32]
   return(result);
 80057a6:	6a3a      	ldr	r2, [r7, #32]
 80057a8:	4b55      	ldr	r3, [pc, #340]	; (8005900 <HAL_UART_IRQHandler+0x770>)
 80057aa:	4013      	ands	r3, r2
 80057ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3308      	adds	r3, #8
 80057b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057ba:	633a      	str	r2, [r7, #48]	; 0x30
 80057bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e3      	bne.n	8005796 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0310 	bic.w	r3, r3, #16
 80057f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	69b9      	ldr	r1, [r7, #24]
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	617b      	str	r3, [r7, #20]
   return(result);
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e4      	bne.n	80057e2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800581e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005822:	4619      	mov	r1, r3
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f881 	bl	800592c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800582a:	e063      	b.n	80058f4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800582c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00e      	beq.n	8005856 <HAL_UART_IRQHandler+0x6c6>
 8005838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800583c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800584c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f001 ff7e 	bl	8007750 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005854:	e051      	b.n	80058fa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585e:	2b00      	cmp	r3, #0
 8005860:	d014      	beq.n	800588c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586a:	2b00      	cmp	r3, #0
 800586c:	d105      	bne.n	800587a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800586e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005872:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d008      	beq.n	800588c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800587e:	2b00      	cmp	r3, #0
 8005880:	d03a      	beq.n	80058f8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	4798      	blx	r3
    }
    return;
 800588a:	e035      	b.n	80058f8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800588c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005894:	2b00      	cmp	r3, #0
 8005896:	d009      	beq.n	80058ac <HAL_UART_IRQHandler+0x71c>
 8005898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800589c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f001 fa0b 	bl	8006cc0 <UART_EndTransmit_IT>
    return;
 80058aa:	e026      	b.n	80058fa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80058ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d009      	beq.n	80058cc <HAL_UART_IRQHandler+0x73c>
 80058b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d003      	beq.n	80058cc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f001 ff57 	bl	8007778 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058ca:	e016      	b.n	80058fa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80058cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d010      	beq.n	80058fa <HAL_UART_IRQHandler+0x76a>
 80058d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	da0c      	bge.n	80058fa <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f001 ff3f 	bl	8007764 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058e6:	e008      	b.n	80058fa <HAL_UART_IRQHandler+0x76a>
      return;
 80058e8:	bf00      	nop
 80058ea:	e006      	b.n	80058fa <HAL_UART_IRQHandler+0x76a>
    return;
 80058ec:	bf00      	nop
 80058ee:	e004      	b.n	80058fa <HAL_UART_IRQHandler+0x76a>
      return;
 80058f0:	bf00      	nop
 80058f2:	e002      	b.n	80058fa <HAL_UART_IRQHandler+0x76a>
      return;
 80058f4:	bf00      	nop
 80058f6:	e000      	b.n	80058fa <HAL_UART_IRQHandler+0x76a>
    return;
 80058f8:	bf00      	nop
  }
}
 80058fa:	37e8      	adds	r7, #232	; 0xe8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	effffffe 	.word	0xeffffffe

08005904 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005948:	b092      	sub	sp, #72	; 0x48
 800594a:	af00      	add	r7, sp, #0
 800594c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	431a      	orrs	r2, r3
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	431a      	orrs	r2, r3
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	4313      	orrs	r3, r2
 800596a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	4bbe      	ldr	r3, [pc, #760]	; (8005c6c <UART_SetConfig+0x328>)
 8005974:	4013      	ands	r3, r2
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	6812      	ldr	r2, [r2, #0]
 800597a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800597c:	430b      	orrs	r3, r1
 800597e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4ab3      	ldr	r2, [pc, #716]	; (8005c70 <UART_SetConfig+0x32c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059ac:	4313      	orrs	r3, r2
 80059ae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	4baf      	ldr	r3, [pc, #700]	; (8005c74 <UART_SetConfig+0x330>)
 80059b8:	4013      	ands	r3, r2
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	6812      	ldr	r2, [r2, #0]
 80059be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059c0:	430b      	orrs	r3, r1
 80059c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	f023 010f 	bic.w	r1, r3, #15
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4aa6      	ldr	r2, [pc, #664]	; (8005c78 <UART_SetConfig+0x334>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d177      	bne.n	8005ad4 <UART_SetConfig+0x190>
 80059e4:	4ba5      	ldr	r3, [pc, #660]	; (8005c7c <UART_SetConfig+0x338>)
 80059e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059ec:	2b28      	cmp	r3, #40	; 0x28
 80059ee:	d86d      	bhi.n	8005acc <UART_SetConfig+0x188>
 80059f0:	a201      	add	r2, pc, #4	; (adr r2, 80059f8 <UART_SetConfig+0xb4>)
 80059f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f6:	bf00      	nop
 80059f8:	08005a9d 	.word	0x08005a9d
 80059fc:	08005acd 	.word	0x08005acd
 8005a00:	08005acd 	.word	0x08005acd
 8005a04:	08005acd 	.word	0x08005acd
 8005a08:	08005acd 	.word	0x08005acd
 8005a0c:	08005acd 	.word	0x08005acd
 8005a10:	08005acd 	.word	0x08005acd
 8005a14:	08005acd 	.word	0x08005acd
 8005a18:	08005aa5 	.word	0x08005aa5
 8005a1c:	08005acd 	.word	0x08005acd
 8005a20:	08005acd 	.word	0x08005acd
 8005a24:	08005acd 	.word	0x08005acd
 8005a28:	08005acd 	.word	0x08005acd
 8005a2c:	08005acd 	.word	0x08005acd
 8005a30:	08005acd 	.word	0x08005acd
 8005a34:	08005acd 	.word	0x08005acd
 8005a38:	08005aad 	.word	0x08005aad
 8005a3c:	08005acd 	.word	0x08005acd
 8005a40:	08005acd 	.word	0x08005acd
 8005a44:	08005acd 	.word	0x08005acd
 8005a48:	08005acd 	.word	0x08005acd
 8005a4c:	08005acd 	.word	0x08005acd
 8005a50:	08005acd 	.word	0x08005acd
 8005a54:	08005acd 	.word	0x08005acd
 8005a58:	08005ab5 	.word	0x08005ab5
 8005a5c:	08005acd 	.word	0x08005acd
 8005a60:	08005acd 	.word	0x08005acd
 8005a64:	08005acd 	.word	0x08005acd
 8005a68:	08005acd 	.word	0x08005acd
 8005a6c:	08005acd 	.word	0x08005acd
 8005a70:	08005acd 	.word	0x08005acd
 8005a74:	08005acd 	.word	0x08005acd
 8005a78:	08005abd 	.word	0x08005abd
 8005a7c:	08005acd 	.word	0x08005acd
 8005a80:	08005acd 	.word	0x08005acd
 8005a84:	08005acd 	.word	0x08005acd
 8005a88:	08005acd 	.word	0x08005acd
 8005a8c:	08005acd 	.word	0x08005acd
 8005a90:	08005acd 	.word	0x08005acd
 8005a94:	08005acd 	.word	0x08005acd
 8005a98:	08005ac5 	.word	0x08005ac5
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aa2:	e326      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005aa4:	2304      	movs	r3, #4
 8005aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aaa:	e322      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005aac:	2308      	movs	r3, #8
 8005aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ab2:	e31e      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005ab4:	2310      	movs	r3, #16
 8005ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aba:	e31a      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005abc:	2320      	movs	r3, #32
 8005abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ac2:	e316      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005ac4:	2340      	movs	r3, #64	; 0x40
 8005ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aca:	e312      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005acc:	2380      	movs	r3, #128	; 0x80
 8005ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ad2:	e30e      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a69      	ldr	r2, [pc, #420]	; (8005c80 <UART_SetConfig+0x33c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d130      	bne.n	8005b40 <UART_SetConfig+0x1fc>
 8005ade:	4b67      	ldr	r3, [pc, #412]	; (8005c7c <UART_SetConfig+0x338>)
 8005ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae2:	f003 0307 	and.w	r3, r3, #7
 8005ae6:	2b05      	cmp	r3, #5
 8005ae8:	d826      	bhi.n	8005b38 <UART_SetConfig+0x1f4>
 8005aea:	a201      	add	r2, pc, #4	; (adr r2, 8005af0 <UART_SetConfig+0x1ac>)
 8005aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af0:	08005b09 	.word	0x08005b09
 8005af4:	08005b11 	.word	0x08005b11
 8005af8:	08005b19 	.word	0x08005b19
 8005afc:	08005b21 	.word	0x08005b21
 8005b00:	08005b29 	.word	0x08005b29
 8005b04:	08005b31 	.word	0x08005b31
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b0e:	e2f0      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005b10:	2304      	movs	r3, #4
 8005b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b16:	e2ec      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005b18:	2308      	movs	r3, #8
 8005b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b1e:	e2e8      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005b20:	2310      	movs	r3, #16
 8005b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b26:	e2e4      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005b28:	2320      	movs	r3, #32
 8005b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b2e:	e2e0      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005b30:	2340      	movs	r3, #64	; 0x40
 8005b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b36:	e2dc      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005b38:	2380      	movs	r3, #128	; 0x80
 8005b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b3e:	e2d8      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a4f      	ldr	r2, [pc, #316]	; (8005c84 <UART_SetConfig+0x340>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d130      	bne.n	8005bac <UART_SetConfig+0x268>
 8005b4a:	4b4c      	ldr	r3, [pc, #304]	; (8005c7c <UART_SetConfig+0x338>)
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4e:	f003 0307 	and.w	r3, r3, #7
 8005b52:	2b05      	cmp	r3, #5
 8005b54:	d826      	bhi.n	8005ba4 <UART_SetConfig+0x260>
 8005b56:	a201      	add	r2, pc, #4	; (adr r2, 8005b5c <UART_SetConfig+0x218>)
 8005b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5c:	08005b75 	.word	0x08005b75
 8005b60:	08005b7d 	.word	0x08005b7d
 8005b64:	08005b85 	.word	0x08005b85
 8005b68:	08005b8d 	.word	0x08005b8d
 8005b6c:	08005b95 	.word	0x08005b95
 8005b70:	08005b9d 	.word	0x08005b9d
 8005b74:	2300      	movs	r3, #0
 8005b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b7a:	e2ba      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005b7c:	2304      	movs	r3, #4
 8005b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b82:	e2b6      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005b84:	2308      	movs	r3, #8
 8005b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b8a:	e2b2      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005b8c:	2310      	movs	r3, #16
 8005b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b92:	e2ae      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005b94:	2320      	movs	r3, #32
 8005b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9a:	e2aa      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005b9c:	2340      	movs	r3, #64	; 0x40
 8005b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ba2:	e2a6      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005ba4:	2380      	movs	r3, #128	; 0x80
 8005ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005baa:	e2a2      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a35      	ldr	r2, [pc, #212]	; (8005c88 <UART_SetConfig+0x344>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d130      	bne.n	8005c18 <UART_SetConfig+0x2d4>
 8005bb6:	4b31      	ldr	r3, [pc, #196]	; (8005c7c <UART_SetConfig+0x338>)
 8005bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	2b05      	cmp	r3, #5
 8005bc0:	d826      	bhi.n	8005c10 <UART_SetConfig+0x2cc>
 8005bc2:	a201      	add	r2, pc, #4	; (adr r2, 8005bc8 <UART_SetConfig+0x284>)
 8005bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc8:	08005be1 	.word	0x08005be1
 8005bcc:	08005be9 	.word	0x08005be9
 8005bd0:	08005bf1 	.word	0x08005bf1
 8005bd4:	08005bf9 	.word	0x08005bf9
 8005bd8:	08005c01 	.word	0x08005c01
 8005bdc:	08005c09 	.word	0x08005c09
 8005be0:	2300      	movs	r3, #0
 8005be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005be6:	e284      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005be8:	2304      	movs	r3, #4
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bee:	e280      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005bf0:	2308      	movs	r3, #8
 8005bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bf6:	e27c      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005bf8:	2310      	movs	r3, #16
 8005bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfe:	e278      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005c00:	2320      	movs	r3, #32
 8005c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c06:	e274      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005c08:	2340      	movs	r3, #64	; 0x40
 8005c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c0e:	e270      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005c10:	2380      	movs	r3, #128	; 0x80
 8005c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c16:	e26c      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1b      	ldr	r2, [pc, #108]	; (8005c8c <UART_SetConfig+0x348>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d142      	bne.n	8005ca8 <UART_SetConfig+0x364>
 8005c22:	4b16      	ldr	r3, [pc, #88]	; (8005c7c <UART_SetConfig+0x338>)
 8005c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c26:	f003 0307 	and.w	r3, r3, #7
 8005c2a:	2b05      	cmp	r3, #5
 8005c2c:	d838      	bhi.n	8005ca0 <UART_SetConfig+0x35c>
 8005c2e:	a201      	add	r2, pc, #4	; (adr r2, 8005c34 <UART_SetConfig+0x2f0>)
 8005c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c34:	08005c4d 	.word	0x08005c4d
 8005c38:	08005c55 	.word	0x08005c55
 8005c3c:	08005c5d 	.word	0x08005c5d
 8005c40:	08005c65 	.word	0x08005c65
 8005c44:	08005c91 	.word	0x08005c91
 8005c48:	08005c99 	.word	0x08005c99
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c52:	e24e      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005c54:	2304      	movs	r3, #4
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c5a:	e24a      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005c5c:	2308      	movs	r3, #8
 8005c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c62:	e246      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005c64:	2310      	movs	r3, #16
 8005c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c6a:	e242      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005c6c:	cfff69f3 	.word	0xcfff69f3
 8005c70:	58000c00 	.word	0x58000c00
 8005c74:	11fff4ff 	.word	0x11fff4ff
 8005c78:	40011000 	.word	0x40011000
 8005c7c:	58024400 	.word	0x58024400
 8005c80:	40004400 	.word	0x40004400
 8005c84:	40004800 	.word	0x40004800
 8005c88:	40004c00 	.word	0x40004c00
 8005c8c:	40005000 	.word	0x40005000
 8005c90:	2320      	movs	r3, #32
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c96:	e22c      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005c98:	2340      	movs	r3, #64	; 0x40
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c9e:	e228      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005ca0:	2380      	movs	r3, #128	; 0x80
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ca6:	e224      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4ab1      	ldr	r2, [pc, #708]	; (8005f74 <UART_SetConfig+0x630>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d176      	bne.n	8005da0 <UART_SetConfig+0x45c>
 8005cb2:	4bb1      	ldr	r3, [pc, #708]	; (8005f78 <UART_SetConfig+0x634>)
 8005cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cba:	2b28      	cmp	r3, #40	; 0x28
 8005cbc:	d86c      	bhi.n	8005d98 <UART_SetConfig+0x454>
 8005cbe:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <UART_SetConfig+0x380>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	08005d69 	.word	0x08005d69
 8005cc8:	08005d99 	.word	0x08005d99
 8005ccc:	08005d99 	.word	0x08005d99
 8005cd0:	08005d99 	.word	0x08005d99
 8005cd4:	08005d99 	.word	0x08005d99
 8005cd8:	08005d99 	.word	0x08005d99
 8005cdc:	08005d99 	.word	0x08005d99
 8005ce0:	08005d99 	.word	0x08005d99
 8005ce4:	08005d71 	.word	0x08005d71
 8005ce8:	08005d99 	.word	0x08005d99
 8005cec:	08005d99 	.word	0x08005d99
 8005cf0:	08005d99 	.word	0x08005d99
 8005cf4:	08005d99 	.word	0x08005d99
 8005cf8:	08005d99 	.word	0x08005d99
 8005cfc:	08005d99 	.word	0x08005d99
 8005d00:	08005d99 	.word	0x08005d99
 8005d04:	08005d79 	.word	0x08005d79
 8005d08:	08005d99 	.word	0x08005d99
 8005d0c:	08005d99 	.word	0x08005d99
 8005d10:	08005d99 	.word	0x08005d99
 8005d14:	08005d99 	.word	0x08005d99
 8005d18:	08005d99 	.word	0x08005d99
 8005d1c:	08005d99 	.word	0x08005d99
 8005d20:	08005d99 	.word	0x08005d99
 8005d24:	08005d81 	.word	0x08005d81
 8005d28:	08005d99 	.word	0x08005d99
 8005d2c:	08005d99 	.word	0x08005d99
 8005d30:	08005d99 	.word	0x08005d99
 8005d34:	08005d99 	.word	0x08005d99
 8005d38:	08005d99 	.word	0x08005d99
 8005d3c:	08005d99 	.word	0x08005d99
 8005d40:	08005d99 	.word	0x08005d99
 8005d44:	08005d89 	.word	0x08005d89
 8005d48:	08005d99 	.word	0x08005d99
 8005d4c:	08005d99 	.word	0x08005d99
 8005d50:	08005d99 	.word	0x08005d99
 8005d54:	08005d99 	.word	0x08005d99
 8005d58:	08005d99 	.word	0x08005d99
 8005d5c:	08005d99 	.word	0x08005d99
 8005d60:	08005d99 	.word	0x08005d99
 8005d64:	08005d91 	.word	0x08005d91
 8005d68:	2301      	movs	r3, #1
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d6e:	e1c0      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005d70:	2304      	movs	r3, #4
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d76:	e1bc      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005d78:	2308      	movs	r3, #8
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d7e:	e1b8      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005d80:	2310      	movs	r3, #16
 8005d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d86:	e1b4      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005d88:	2320      	movs	r3, #32
 8005d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d8e:	e1b0      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005d90:	2340      	movs	r3, #64	; 0x40
 8005d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d96:	e1ac      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005d98:	2380      	movs	r3, #128	; 0x80
 8005d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d9e:	e1a8      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a75      	ldr	r2, [pc, #468]	; (8005f7c <UART_SetConfig+0x638>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d130      	bne.n	8005e0c <UART_SetConfig+0x4c8>
 8005daa:	4b73      	ldr	r3, [pc, #460]	; (8005f78 <UART_SetConfig+0x634>)
 8005dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dae:	f003 0307 	and.w	r3, r3, #7
 8005db2:	2b05      	cmp	r3, #5
 8005db4:	d826      	bhi.n	8005e04 <UART_SetConfig+0x4c0>
 8005db6:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <UART_SetConfig+0x478>)
 8005db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbc:	08005dd5 	.word	0x08005dd5
 8005dc0:	08005ddd 	.word	0x08005ddd
 8005dc4:	08005de5 	.word	0x08005de5
 8005dc8:	08005ded 	.word	0x08005ded
 8005dcc:	08005df5 	.word	0x08005df5
 8005dd0:	08005dfd 	.word	0x08005dfd
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dda:	e18a      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005ddc:	2304      	movs	r3, #4
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005de2:	e186      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005de4:	2308      	movs	r3, #8
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dea:	e182      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005dec:	2310      	movs	r3, #16
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005df2:	e17e      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005df4:	2320      	movs	r3, #32
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dfa:	e17a      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005dfc:	2340      	movs	r3, #64	; 0x40
 8005dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e02:	e176      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005e04:	2380      	movs	r3, #128	; 0x80
 8005e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e0a:	e172      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a5b      	ldr	r2, [pc, #364]	; (8005f80 <UART_SetConfig+0x63c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d130      	bne.n	8005e78 <UART_SetConfig+0x534>
 8005e16:	4b58      	ldr	r3, [pc, #352]	; (8005f78 <UART_SetConfig+0x634>)
 8005e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1a:	f003 0307 	and.w	r3, r3, #7
 8005e1e:	2b05      	cmp	r3, #5
 8005e20:	d826      	bhi.n	8005e70 <UART_SetConfig+0x52c>
 8005e22:	a201      	add	r2, pc, #4	; (adr r2, 8005e28 <UART_SetConfig+0x4e4>)
 8005e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e28:	08005e41 	.word	0x08005e41
 8005e2c:	08005e49 	.word	0x08005e49
 8005e30:	08005e51 	.word	0x08005e51
 8005e34:	08005e59 	.word	0x08005e59
 8005e38:	08005e61 	.word	0x08005e61
 8005e3c:	08005e69 	.word	0x08005e69
 8005e40:	2300      	movs	r3, #0
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e46:	e154      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005e48:	2304      	movs	r3, #4
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e4e:	e150      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005e50:	2308      	movs	r3, #8
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e56:	e14c      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005e58:	2310      	movs	r3, #16
 8005e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e5e:	e148      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005e60:	2320      	movs	r3, #32
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e66:	e144      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005e68:	2340      	movs	r3, #64	; 0x40
 8005e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e6e:	e140      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005e70:	2380      	movs	r3, #128	; 0x80
 8005e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e76:	e13c      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a41      	ldr	r2, [pc, #260]	; (8005f84 <UART_SetConfig+0x640>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	f040 8082 	bne.w	8005f88 <UART_SetConfig+0x644>
 8005e84:	4b3c      	ldr	r3, [pc, #240]	; (8005f78 <UART_SetConfig+0x634>)
 8005e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e8c:	2b28      	cmp	r3, #40	; 0x28
 8005e8e:	d86d      	bhi.n	8005f6c <UART_SetConfig+0x628>
 8005e90:	a201      	add	r2, pc, #4	; (adr r2, 8005e98 <UART_SetConfig+0x554>)
 8005e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e96:	bf00      	nop
 8005e98:	08005f3d 	.word	0x08005f3d
 8005e9c:	08005f6d 	.word	0x08005f6d
 8005ea0:	08005f6d 	.word	0x08005f6d
 8005ea4:	08005f6d 	.word	0x08005f6d
 8005ea8:	08005f6d 	.word	0x08005f6d
 8005eac:	08005f6d 	.word	0x08005f6d
 8005eb0:	08005f6d 	.word	0x08005f6d
 8005eb4:	08005f6d 	.word	0x08005f6d
 8005eb8:	08005f45 	.word	0x08005f45
 8005ebc:	08005f6d 	.word	0x08005f6d
 8005ec0:	08005f6d 	.word	0x08005f6d
 8005ec4:	08005f6d 	.word	0x08005f6d
 8005ec8:	08005f6d 	.word	0x08005f6d
 8005ecc:	08005f6d 	.word	0x08005f6d
 8005ed0:	08005f6d 	.word	0x08005f6d
 8005ed4:	08005f6d 	.word	0x08005f6d
 8005ed8:	08005f4d 	.word	0x08005f4d
 8005edc:	08005f6d 	.word	0x08005f6d
 8005ee0:	08005f6d 	.word	0x08005f6d
 8005ee4:	08005f6d 	.word	0x08005f6d
 8005ee8:	08005f6d 	.word	0x08005f6d
 8005eec:	08005f6d 	.word	0x08005f6d
 8005ef0:	08005f6d 	.word	0x08005f6d
 8005ef4:	08005f6d 	.word	0x08005f6d
 8005ef8:	08005f55 	.word	0x08005f55
 8005efc:	08005f6d 	.word	0x08005f6d
 8005f00:	08005f6d 	.word	0x08005f6d
 8005f04:	08005f6d 	.word	0x08005f6d
 8005f08:	08005f6d 	.word	0x08005f6d
 8005f0c:	08005f6d 	.word	0x08005f6d
 8005f10:	08005f6d 	.word	0x08005f6d
 8005f14:	08005f6d 	.word	0x08005f6d
 8005f18:	08005f5d 	.word	0x08005f5d
 8005f1c:	08005f6d 	.word	0x08005f6d
 8005f20:	08005f6d 	.word	0x08005f6d
 8005f24:	08005f6d 	.word	0x08005f6d
 8005f28:	08005f6d 	.word	0x08005f6d
 8005f2c:	08005f6d 	.word	0x08005f6d
 8005f30:	08005f6d 	.word	0x08005f6d
 8005f34:	08005f6d 	.word	0x08005f6d
 8005f38:	08005f65 	.word	0x08005f65
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f42:	e0d6      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005f44:	2304      	movs	r3, #4
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f4a:	e0d2      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005f4c:	2308      	movs	r3, #8
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f52:	e0ce      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005f54:	2310      	movs	r3, #16
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f5a:	e0ca      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005f5c:	2320      	movs	r3, #32
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f62:	e0c6      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005f64:	2340      	movs	r3, #64	; 0x40
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f6a:	e0c2      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005f6c:	2380      	movs	r3, #128	; 0x80
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f72:	e0be      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8005f74:	40011400 	.word	0x40011400
 8005f78:	58024400 	.word	0x58024400
 8005f7c:	40007800 	.word	0x40007800
 8005f80:	40007c00 	.word	0x40007c00
 8005f84:	40011800 	.word	0x40011800
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4aad      	ldr	r2, [pc, #692]	; (8006244 <UART_SetConfig+0x900>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d176      	bne.n	8006080 <UART_SetConfig+0x73c>
 8005f92:	4bad      	ldr	r3, [pc, #692]	; (8006248 <UART_SetConfig+0x904>)
 8005f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f9a:	2b28      	cmp	r3, #40	; 0x28
 8005f9c:	d86c      	bhi.n	8006078 <UART_SetConfig+0x734>
 8005f9e:	a201      	add	r2, pc, #4	; (adr r2, 8005fa4 <UART_SetConfig+0x660>)
 8005fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa4:	08006049 	.word	0x08006049
 8005fa8:	08006079 	.word	0x08006079
 8005fac:	08006079 	.word	0x08006079
 8005fb0:	08006079 	.word	0x08006079
 8005fb4:	08006079 	.word	0x08006079
 8005fb8:	08006079 	.word	0x08006079
 8005fbc:	08006079 	.word	0x08006079
 8005fc0:	08006079 	.word	0x08006079
 8005fc4:	08006051 	.word	0x08006051
 8005fc8:	08006079 	.word	0x08006079
 8005fcc:	08006079 	.word	0x08006079
 8005fd0:	08006079 	.word	0x08006079
 8005fd4:	08006079 	.word	0x08006079
 8005fd8:	08006079 	.word	0x08006079
 8005fdc:	08006079 	.word	0x08006079
 8005fe0:	08006079 	.word	0x08006079
 8005fe4:	08006059 	.word	0x08006059
 8005fe8:	08006079 	.word	0x08006079
 8005fec:	08006079 	.word	0x08006079
 8005ff0:	08006079 	.word	0x08006079
 8005ff4:	08006079 	.word	0x08006079
 8005ff8:	08006079 	.word	0x08006079
 8005ffc:	08006079 	.word	0x08006079
 8006000:	08006079 	.word	0x08006079
 8006004:	08006061 	.word	0x08006061
 8006008:	08006079 	.word	0x08006079
 800600c:	08006079 	.word	0x08006079
 8006010:	08006079 	.word	0x08006079
 8006014:	08006079 	.word	0x08006079
 8006018:	08006079 	.word	0x08006079
 800601c:	08006079 	.word	0x08006079
 8006020:	08006079 	.word	0x08006079
 8006024:	08006069 	.word	0x08006069
 8006028:	08006079 	.word	0x08006079
 800602c:	08006079 	.word	0x08006079
 8006030:	08006079 	.word	0x08006079
 8006034:	08006079 	.word	0x08006079
 8006038:	08006079 	.word	0x08006079
 800603c:	08006079 	.word	0x08006079
 8006040:	08006079 	.word	0x08006079
 8006044:	08006071 	.word	0x08006071
 8006048:	2301      	movs	r3, #1
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604e:	e050      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8006050:	2304      	movs	r3, #4
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006056:	e04c      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8006058:	2308      	movs	r3, #8
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800605e:	e048      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8006060:	2310      	movs	r3, #16
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006066:	e044      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8006068:	2320      	movs	r3, #32
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800606e:	e040      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8006070:	2340      	movs	r3, #64	; 0x40
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006076:	e03c      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8006078:	2380      	movs	r3, #128	; 0x80
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800607e:	e038      	b.n	80060f2 <UART_SetConfig+0x7ae>
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a71      	ldr	r2, [pc, #452]	; (800624c <UART_SetConfig+0x908>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d130      	bne.n	80060ec <UART_SetConfig+0x7a8>
 800608a:	4b6f      	ldr	r3, [pc, #444]	; (8006248 <UART_SetConfig+0x904>)
 800608c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	2b05      	cmp	r3, #5
 8006094:	d826      	bhi.n	80060e4 <UART_SetConfig+0x7a0>
 8006096:	a201      	add	r2, pc, #4	; (adr r2, 800609c <UART_SetConfig+0x758>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	080060b5 	.word	0x080060b5
 80060a0:	080060bd 	.word	0x080060bd
 80060a4:	080060c5 	.word	0x080060c5
 80060a8:	080060cd 	.word	0x080060cd
 80060ac:	080060d5 	.word	0x080060d5
 80060b0:	080060dd 	.word	0x080060dd
 80060b4:	2302      	movs	r3, #2
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ba:	e01a      	b.n	80060f2 <UART_SetConfig+0x7ae>
 80060bc:	2304      	movs	r3, #4
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c2:	e016      	b.n	80060f2 <UART_SetConfig+0x7ae>
 80060c4:	2308      	movs	r3, #8
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ca:	e012      	b.n	80060f2 <UART_SetConfig+0x7ae>
 80060cc:	2310      	movs	r3, #16
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060d2:	e00e      	b.n	80060f2 <UART_SetConfig+0x7ae>
 80060d4:	2320      	movs	r3, #32
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060da:	e00a      	b.n	80060f2 <UART_SetConfig+0x7ae>
 80060dc:	2340      	movs	r3, #64	; 0x40
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060e2:	e006      	b.n	80060f2 <UART_SetConfig+0x7ae>
 80060e4:	2380      	movs	r3, #128	; 0x80
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ea:	e002      	b.n	80060f2 <UART_SetConfig+0x7ae>
 80060ec:	2380      	movs	r3, #128	; 0x80
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a55      	ldr	r2, [pc, #340]	; (800624c <UART_SetConfig+0x908>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	f040 80f8 	bne.w	80062ee <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006102:	2b20      	cmp	r3, #32
 8006104:	dc46      	bgt.n	8006194 <UART_SetConfig+0x850>
 8006106:	2b02      	cmp	r3, #2
 8006108:	db75      	blt.n	80061f6 <UART_SetConfig+0x8b2>
 800610a:	3b02      	subs	r3, #2
 800610c:	2b1e      	cmp	r3, #30
 800610e:	d872      	bhi.n	80061f6 <UART_SetConfig+0x8b2>
 8006110:	a201      	add	r2, pc, #4	; (adr r2, 8006118 <UART_SetConfig+0x7d4>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	0800619b 	.word	0x0800619b
 800611c:	080061f7 	.word	0x080061f7
 8006120:	080061a3 	.word	0x080061a3
 8006124:	080061f7 	.word	0x080061f7
 8006128:	080061f7 	.word	0x080061f7
 800612c:	080061f7 	.word	0x080061f7
 8006130:	080061b3 	.word	0x080061b3
 8006134:	080061f7 	.word	0x080061f7
 8006138:	080061f7 	.word	0x080061f7
 800613c:	080061f7 	.word	0x080061f7
 8006140:	080061f7 	.word	0x080061f7
 8006144:	080061f7 	.word	0x080061f7
 8006148:	080061f7 	.word	0x080061f7
 800614c:	080061f7 	.word	0x080061f7
 8006150:	080061c3 	.word	0x080061c3
 8006154:	080061f7 	.word	0x080061f7
 8006158:	080061f7 	.word	0x080061f7
 800615c:	080061f7 	.word	0x080061f7
 8006160:	080061f7 	.word	0x080061f7
 8006164:	080061f7 	.word	0x080061f7
 8006168:	080061f7 	.word	0x080061f7
 800616c:	080061f7 	.word	0x080061f7
 8006170:	080061f7 	.word	0x080061f7
 8006174:	080061f7 	.word	0x080061f7
 8006178:	080061f7 	.word	0x080061f7
 800617c:	080061f7 	.word	0x080061f7
 8006180:	080061f7 	.word	0x080061f7
 8006184:	080061f7 	.word	0x080061f7
 8006188:	080061f7 	.word	0x080061f7
 800618c:	080061f7 	.word	0x080061f7
 8006190:	080061e9 	.word	0x080061e9
 8006194:	2b40      	cmp	r3, #64	; 0x40
 8006196:	d02a      	beq.n	80061ee <UART_SetConfig+0x8aa>
 8006198:	e02d      	b.n	80061f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800619a:	f7fe faad 	bl	80046f8 <HAL_RCCEx_GetD3PCLK1Freq>
 800619e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80061a0:	e02f      	b.n	8006202 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fe fabc 	bl	8004724 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061b0:	e027      	b.n	8006202 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061b2:	f107 0318 	add.w	r3, r7, #24
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fe fc08 	bl	80049cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061c0:	e01f      	b.n	8006202 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061c2:	4b21      	ldr	r3, [pc, #132]	; (8006248 <UART_SetConfig+0x904>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d009      	beq.n	80061e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061ce:	4b1e      	ldr	r3, [pc, #120]	; (8006248 <UART_SetConfig+0x904>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	08db      	lsrs	r3, r3, #3
 80061d4:	f003 0303 	and.w	r3, r3, #3
 80061d8:	4a1d      	ldr	r2, [pc, #116]	; (8006250 <UART_SetConfig+0x90c>)
 80061da:	fa22 f303 	lsr.w	r3, r2, r3
 80061de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061e0:	e00f      	b.n	8006202 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80061e2:	4b1b      	ldr	r3, [pc, #108]	; (8006250 <UART_SetConfig+0x90c>)
 80061e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061e6:	e00c      	b.n	8006202 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061e8:	4b1a      	ldr	r3, [pc, #104]	; (8006254 <UART_SetConfig+0x910>)
 80061ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061ec:	e009      	b.n	8006202 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061f4:	e005      	b.n	8006202 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006200:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 81ee 	beq.w	80065e6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	4a12      	ldr	r2, [pc, #72]	; (8006258 <UART_SetConfig+0x914>)
 8006210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006214:	461a      	mov	r2, r3
 8006216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006218:	fbb3 f3f2 	udiv	r3, r3, r2
 800621c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	4613      	mov	r3, r2
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	4413      	add	r3, r2
 8006228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800622a:	429a      	cmp	r2, r3
 800622c:	d305      	bcc.n	800623a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006236:	429a      	cmp	r2, r3
 8006238:	d910      	bls.n	800625c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006240:	e1d1      	b.n	80065e6 <UART_SetConfig+0xca2>
 8006242:	bf00      	nop
 8006244:	40011c00 	.word	0x40011c00
 8006248:	58024400 	.word	0x58024400
 800624c:	58000c00 	.word	0x58000c00
 8006250:	03d09000 	.word	0x03d09000
 8006254:	003d0900 	.word	0x003d0900
 8006258:	08008364 	.word	0x08008364
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800625c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800625e:	2200      	movs	r2, #0
 8006260:	60bb      	str	r3, [r7, #8]
 8006262:	60fa      	str	r2, [r7, #12]
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	4ac0      	ldr	r2, [pc, #768]	; (800656c <UART_SetConfig+0xc28>)
 800626a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800626e:	b29b      	uxth	r3, r3
 8006270:	2200      	movs	r2, #0
 8006272:	603b      	str	r3, [r7, #0]
 8006274:	607a      	str	r2, [r7, #4]
 8006276:	e9d7 2300 	ldrd	r2, r3, [r7]
 800627a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800627e:	f7fa f887 	bl	8000390 <__aeabi_uldivmod>
 8006282:	4602      	mov	r2, r0
 8006284:	460b      	mov	r3, r1
 8006286:	4610      	mov	r0, r2
 8006288:	4619      	mov	r1, r3
 800628a:	f04f 0200 	mov.w	r2, #0
 800628e:	f04f 0300 	mov.w	r3, #0
 8006292:	020b      	lsls	r3, r1, #8
 8006294:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006298:	0202      	lsls	r2, r0, #8
 800629a:	6979      	ldr	r1, [r7, #20]
 800629c:	6849      	ldr	r1, [r1, #4]
 800629e:	0849      	lsrs	r1, r1, #1
 80062a0:	2000      	movs	r0, #0
 80062a2:	460c      	mov	r4, r1
 80062a4:	4605      	mov	r5, r0
 80062a6:	eb12 0804 	adds.w	r8, r2, r4
 80062aa:	eb43 0905 	adc.w	r9, r3, r5
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	469a      	mov	sl, r3
 80062b6:	4693      	mov	fp, r2
 80062b8:	4652      	mov	r2, sl
 80062ba:	465b      	mov	r3, fp
 80062bc:	4640      	mov	r0, r8
 80062be:	4649      	mov	r1, r9
 80062c0:	f7fa f866 	bl	8000390 <__aeabi_uldivmod>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4613      	mov	r3, r2
 80062ca:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062d2:	d308      	bcc.n	80062e6 <UART_SetConfig+0x9a2>
 80062d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062da:	d204      	bcs.n	80062e6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062e2:	60da      	str	r2, [r3, #12]
 80062e4:	e17f      	b.n	80065e6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80062ec:	e17b      	b.n	80065e6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f6:	f040 80bd 	bne.w	8006474 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80062fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80062fe:	2b20      	cmp	r3, #32
 8006300:	dc48      	bgt.n	8006394 <UART_SetConfig+0xa50>
 8006302:	2b00      	cmp	r3, #0
 8006304:	db7b      	blt.n	80063fe <UART_SetConfig+0xaba>
 8006306:	2b20      	cmp	r3, #32
 8006308:	d879      	bhi.n	80063fe <UART_SetConfig+0xaba>
 800630a:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <UART_SetConfig+0x9cc>)
 800630c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006310:	0800639b 	.word	0x0800639b
 8006314:	080063a3 	.word	0x080063a3
 8006318:	080063ff 	.word	0x080063ff
 800631c:	080063ff 	.word	0x080063ff
 8006320:	080063ab 	.word	0x080063ab
 8006324:	080063ff 	.word	0x080063ff
 8006328:	080063ff 	.word	0x080063ff
 800632c:	080063ff 	.word	0x080063ff
 8006330:	080063bb 	.word	0x080063bb
 8006334:	080063ff 	.word	0x080063ff
 8006338:	080063ff 	.word	0x080063ff
 800633c:	080063ff 	.word	0x080063ff
 8006340:	080063ff 	.word	0x080063ff
 8006344:	080063ff 	.word	0x080063ff
 8006348:	080063ff 	.word	0x080063ff
 800634c:	080063ff 	.word	0x080063ff
 8006350:	080063cb 	.word	0x080063cb
 8006354:	080063ff 	.word	0x080063ff
 8006358:	080063ff 	.word	0x080063ff
 800635c:	080063ff 	.word	0x080063ff
 8006360:	080063ff 	.word	0x080063ff
 8006364:	080063ff 	.word	0x080063ff
 8006368:	080063ff 	.word	0x080063ff
 800636c:	080063ff 	.word	0x080063ff
 8006370:	080063ff 	.word	0x080063ff
 8006374:	080063ff 	.word	0x080063ff
 8006378:	080063ff 	.word	0x080063ff
 800637c:	080063ff 	.word	0x080063ff
 8006380:	080063ff 	.word	0x080063ff
 8006384:	080063ff 	.word	0x080063ff
 8006388:	080063ff 	.word	0x080063ff
 800638c:	080063ff 	.word	0x080063ff
 8006390:	080063f1 	.word	0x080063f1
 8006394:	2b40      	cmp	r3, #64	; 0x40
 8006396:	d02e      	beq.n	80063f6 <UART_SetConfig+0xab2>
 8006398:	e031      	b.n	80063fe <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800639a:	f7fc ffc3 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 800639e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063a0:	e033      	b.n	800640a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063a2:	f7fc ffd5 	bl	8003350 <HAL_RCC_GetPCLK2Freq>
 80063a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063a8:	e02f      	b.n	800640a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fe f9b8 	bl	8004724 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063b8:	e027      	b.n	800640a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063ba:	f107 0318 	add.w	r3, r7, #24
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fe fb04 	bl	80049cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063c8:	e01f      	b.n	800640a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063ca:	4b69      	ldr	r3, [pc, #420]	; (8006570 <UART_SetConfig+0xc2c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d009      	beq.n	80063ea <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063d6:	4b66      	ldr	r3, [pc, #408]	; (8006570 <UART_SetConfig+0xc2c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	08db      	lsrs	r3, r3, #3
 80063dc:	f003 0303 	and.w	r3, r3, #3
 80063e0:	4a64      	ldr	r2, [pc, #400]	; (8006574 <UART_SetConfig+0xc30>)
 80063e2:	fa22 f303 	lsr.w	r3, r2, r3
 80063e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063e8:	e00f      	b.n	800640a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80063ea:	4b62      	ldr	r3, [pc, #392]	; (8006574 <UART_SetConfig+0xc30>)
 80063ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063ee:	e00c      	b.n	800640a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063f0:	4b61      	ldr	r3, [pc, #388]	; (8006578 <UART_SetConfig+0xc34>)
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063f4:	e009      	b.n	800640a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063fc:	e005      	b.n	800640a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006408:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800640a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 80ea 	beq.w	80065e6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	4a55      	ldr	r2, [pc, #340]	; (800656c <UART_SetConfig+0xc28>)
 8006418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800641c:	461a      	mov	r2, r3
 800641e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006420:	fbb3 f3f2 	udiv	r3, r3, r2
 8006424:	005a      	lsls	r2, r3, #1
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	085b      	lsrs	r3, r3, #1
 800642c:	441a      	add	r2, r3
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	fbb2 f3f3 	udiv	r3, r2, r3
 8006436:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643a:	2b0f      	cmp	r3, #15
 800643c:	d916      	bls.n	800646c <UART_SetConfig+0xb28>
 800643e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006444:	d212      	bcs.n	800646c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006448:	b29b      	uxth	r3, r3
 800644a:	f023 030f 	bic.w	r3, r3, #15
 800644e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006452:	085b      	lsrs	r3, r3, #1
 8006454:	b29b      	uxth	r3, r3
 8006456:	f003 0307 	and.w	r3, r3, #7
 800645a:	b29a      	uxth	r2, r3
 800645c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800645e:	4313      	orrs	r3, r2
 8006460:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006468:	60da      	str	r2, [r3, #12]
 800646a:	e0bc      	b.n	80065e6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006472:	e0b8      	b.n	80065e6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006474:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006478:	2b20      	cmp	r3, #32
 800647a:	dc4b      	bgt.n	8006514 <UART_SetConfig+0xbd0>
 800647c:	2b00      	cmp	r3, #0
 800647e:	f2c0 8087 	blt.w	8006590 <UART_SetConfig+0xc4c>
 8006482:	2b20      	cmp	r3, #32
 8006484:	f200 8084 	bhi.w	8006590 <UART_SetConfig+0xc4c>
 8006488:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <UART_SetConfig+0xb4c>)
 800648a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648e:	bf00      	nop
 8006490:	0800651b 	.word	0x0800651b
 8006494:	08006523 	.word	0x08006523
 8006498:	08006591 	.word	0x08006591
 800649c:	08006591 	.word	0x08006591
 80064a0:	0800652b 	.word	0x0800652b
 80064a4:	08006591 	.word	0x08006591
 80064a8:	08006591 	.word	0x08006591
 80064ac:	08006591 	.word	0x08006591
 80064b0:	0800653b 	.word	0x0800653b
 80064b4:	08006591 	.word	0x08006591
 80064b8:	08006591 	.word	0x08006591
 80064bc:	08006591 	.word	0x08006591
 80064c0:	08006591 	.word	0x08006591
 80064c4:	08006591 	.word	0x08006591
 80064c8:	08006591 	.word	0x08006591
 80064cc:	08006591 	.word	0x08006591
 80064d0:	0800654b 	.word	0x0800654b
 80064d4:	08006591 	.word	0x08006591
 80064d8:	08006591 	.word	0x08006591
 80064dc:	08006591 	.word	0x08006591
 80064e0:	08006591 	.word	0x08006591
 80064e4:	08006591 	.word	0x08006591
 80064e8:	08006591 	.word	0x08006591
 80064ec:	08006591 	.word	0x08006591
 80064f0:	08006591 	.word	0x08006591
 80064f4:	08006591 	.word	0x08006591
 80064f8:	08006591 	.word	0x08006591
 80064fc:	08006591 	.word	0x08006591
 8006500:	08006591 	.word	0x08006591
 8006504:	08006591 	.word	0x08006591
 8006508:	08006591 	.word	0x08006591
 800650c:	08006591 	.word	0x08006591
 8006510:	08006583 	.word	0x08006583
 8006514:	2b40      	cmp	r3, #64	; 0x40
 8006516:	d037      	beq.n	8006588 <UART_SetConfig+0xc44>
 8006518:	e03a      	b.n	8006590 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800651a:	f7fc ff03 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 800651e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006520:	e03c      	b.n	800659c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006522:	f7fc ff15 	bl	8003350 <HAL_RCC_GetPCLK2Freq>
 8006526:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006528:	e038      	b.n	800659c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800652a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe f8f8 	bl	8004724 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006538:	e030      	b.n	800659c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800653a:	f107 0318 	add.w	r3, r7, #24
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe fa44 	bl	80049cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006548:	e028      	b.n	800659c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800654a:	4b09      	ldr	r3, [pc, #36]	; (8006570 <UART_SetConfig+0xc2c>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b00      	cmp	r3, #0
 8006554:	d012      	beq.n	800657c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006556:	4b06      	ldr	r3, [pc, #24]	; (8006570 <UART_SetConfig+0xc2c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	08db      	lsrs	r3, r3, #3
 800655c:	f003 0303 	and.w	r3, r3, #3
 8006560:	4a04      	ldr	r2, [pc, #16]	; (8006574 <UART_SetConfig+0xc30>)
 8006562:	fa22 f303 	lsr.w	r3, r2, r3
 8006566:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006568:	e018      	b.n	800659c <UART_SetConfig+0xc58>
 800656a:	bf00      	nop
 800656c:	08008364 	.word	0x08008364
 8006570:	58024400 	.word	0x58024400
 8006574:	03d09000 	.word	0x03d09000
 8006578:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800657c:	4b24      	ldr	r3, [pc, #144]	; (8006610 <UART_SetConfig+0xccc>)
 800657e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006580:	e00c      	b.n	800659c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006582:	4b24      	ldr	r3, [pc, #144]	; (8006614 <UART_SetConfig+0xcd0>)
 8006584:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006586:	e009      	b.n	800659c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800658c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800658e:	e005      	b.n	800659c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800659a:	bf00      	nop
    }

    if (pclk != 0U)
 800659c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d021      	beq.n	80065e6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	4a1c      	ldr	r2, [pc, #112]	; (8006618 <UART_SetConfig+0xcd4>)
 80065a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065ac:	461a      	mov	r2, r3
 80065ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b0:	fbb3 f2f2 	udiv	r2, r3, r2
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	085b      	lsrs	r3, r3, #1
 80065ba:	441a      	add	r2, r3
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	2b0f      	cmp	r3, #15
 80065ca:	d909      	bls.n	80065e0 <UART_SetConfig+0xc9c>
 80065cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d2:	d205      	bcs.n	80065e0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60da      	str	r2, [r3, #12]
 80065de:	e002      	b.n	80065e6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	2200      	movs	r2, #0
 80065fa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2200      	movs	r2, #0
 8006600:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006602:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006606:	4618      	mov	r0, r3
 8006608:	3748      	adds	r7, #72	; 0x48
 800660a:	46bd      	mov	sp, r7
 800660c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006610:	03d09000 	.word	0x03d09000
 8006614:	003d0900 	.word	0x003d0900
 8006618:	08008364 	.word	0x08008364

0800661c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00a      	beq.n	8006646 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00a      	beq.n	800668a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668e:	f003 0308 	and.w	r3, r3, #8
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00a      	beq.n	80066ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b0:	f003 0310 	and.w	r3, r3, #16
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00a      	beq.n	80066ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d01a      	beq.n	8006732 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800671a:	d10a      	bne.n	8006732 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	605a      	str	r2, [r3, #4]
  }
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b098      	sub	sp, #96	; 0x60
 8006764:	af02      	add	r7, sp, #8
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006770:	f7fa fd64 	bl	800123c <HAL_GetTick>
 8006774:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0308 	and.w	r3, r3, #8
 8006780:	2b08      	cmp	r3, #8
 8006782:	d12f      	bne.n	80067e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006784:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800678c:	2200      	movs	r2, #0
 800678e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f88e 	bl	80068b4 <UART_WaitOnFlagUntilTimeout>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d022      	beq.n	80067e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067b2:	653b      	str	r3, [r7, #80]	; 0x50
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067bc:	647b      	str	r3, [r7, #68]	; 0x44
 80067be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e6      	bne.n	800679e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e063      	b.n	80068ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d149      	bne.n	8006886 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067fa:	2200      	movs	r2, #0
 80067fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f857 	bl	80068b4 <UART_WaitOnFlagUntilTimeout>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d03c      	beq.n	8006886 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	623b      	str	r3, [r7, #32]
   return(result);
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006820:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	461a      	mov	r2, r3
 8006828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800682a:	633b      	str	r3, [r7, #48]	; 0x30
 800682c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e6      	bne.n	800680c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3308      	adds	r3, #8
 8006844:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	60fb      	str	r3, [r7, #12]
   return(result);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f023 0301 	bic.w	r3, r3, #1
 8006854:	64bb      	str	r3, [r7, #72]	; 0x48
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3308      	adds	r3, #8
 800685c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800685e:	61fa      	str	r2, [r7, #28]
 8006860:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	69b9      	ldr	r1, [r7, #24]
 8006864:	69fa      	ldr	r2, [r7, #28]
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	617b      	str	r3, [r7, #20]
   return(result);
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e5      	bne.n	800683e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2220      	movs	r2, #32
 8006876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e012      	b.n	80068ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2220      	movs	r2, #32
 8006892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3758      	adds	r7, #88	; 0x58
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	4613      	mov	r3, r2
 80068c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068c4:	e049      	b.n	800695a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068cc:	d045      	beq.n	800695a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ce:	f7fa fcb5 	bl	800123c <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d302      	bcc.n	80068e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e048      	b.n	800697a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0304 	and.w	r3, r3, #4
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d031      	beq.n	800695a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	f003 0308 	and.w	r3, r3, #8
 8006900:	2b08      	cmp	r3, #8
 8006902:	d110      	bne.n	8006926 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2208      	movs	r2, #8
 800690a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 f95b 	bl	8006bc8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2208      	movs	r2, #8
 8006916:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e029      	b.n	800697a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006934:	d111      	bne.n	800695a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800693e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 f941 	bl	8006bc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2220      	movs	r2, #32
 800694a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e00f      	b.n	800697a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69da      	ldr	r2, [r3, #28]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4013      	ands	r3, r2
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	429a      	cmp	r2, r3
 8006968:	bf0c      	ite	eq
 800696a:	2301      	moveq	r3, #1
 800696c:	2300      	movne	r3, #0
 800696e:	b2db      	uxtb	r3, r3
 8006970:	461a      	mov	r2, r3
 8006972:	79fb      	ldrb	r3, [r7, #7]
 8006974:	429a      	cmp	r2, r3
 8006976:	d0a6      	beq.n	80068c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
	...

08006984 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006984:	b480      	push	{r7}
 8006986:	b0a3      	sub	sp, #140	; 0x8c
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	4613      	mov	r3, r2
 8006990:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	88fa      	ldrh	r2, [r7, #6]
 800699c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	88fa      	ldrh	r2, [r7, #6]
 80069a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069b6:	d10e      	bne.n	80069d6 <UART_Start_Receive_IT+0x52>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d105      	bne.n	80069cc <UART_Start_Receive_IT+0x48>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80069c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069ca:	e02d      	b.n	8006a28 <UART_Start_Receive_IT+0xa4>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	22ff      	movs	r2, #255	; 0xff
 80069d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069d4:	e028      	b.n	8006a28 <UART_Start_Receive_IT+0xa4>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10d      	bne.n	80069fa <UART_Start_Receive_IT+0x76>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d104      	bne.n	80069f0 <UART_Start_Receive_IT+0x6c>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	22ff      	movs	r2, #255	; 0xff
 80069ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069ee:	e01b      	b.n	8006a28 <UART_Start_Receive_IT+0xa4>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	227f      	movs	r2, #127	; 0x7f
 80069f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069f8:	e016      	b.n	8006a28 <UART_Start_Receive_IT+0xa4>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a02:	d10d      	bne.n	8006a20 <UART_Start_Receive_IT+0x9c>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d104      	bne.n	8006a16 <UART_Start_Receive_IT+0x92>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	227f      	movs	r2, #127	; 0x7f
 8006a10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a14:	e008      	b.n	8006a28 <UART_Start_Receive_IT+0xa4>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	223f      	movs	r2, #63	; 0x3f
 8006a1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a1e:	e003      	b.n	8006a28 <UART_Start_Receive_IT+0xa4>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2222      	movs	r2, #34	; 0x22
 8006a34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3308      	adds	r3, #8
 8006a3e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a42:	e853 3f00 	ldrex	r3, [r3]
 8006a46:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006a48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a4a:	f043 0301 	orr.w	r3, r3, #1
 8006a4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006a5c:	673a      	str	r2, [r7, #112]	; 0x70
 8006a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a60:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006a62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006a64:	e841 2300 	strex	r3, r2, [r1]
 8006a68:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006a6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1e3      	bne.n	8006a38 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a78:	d14f      	bne.n	8006b1a <UART_Start_Receive_IT+0x196>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a80:	88fa      	ldrh	r2, [r7, #6]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d349      	bcc.n	8006b1a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a8e:	d107      	bne.n	8006aa0 <UART_Start_Receive_IT+0x11c>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d103      	bne.n	8006aa0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4a47      	ldr	r2, [pc, #284]	; (8006bb8 <UART_Start_Receive_IT+0x234>)
 8006a9c:	675a      	str	r2, [r3, #116]	; 0x74
 8006a9e:	e002      	b.n	8006aa6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4a46      	ldr	r2, [pc, #280]	; (8006bbc <UART_Start_Receive_IT+0x238>)
 8006aa4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d01a      	beq.n	8006ae4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ac2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ad2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ad6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e4      	bne.n	8006aae <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3308      	adds	r3, #8
 8006aea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006afa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3308      	adds	r3, #8
 8006b02:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006b04:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b06:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b0c:	e841 2300 	strex	r3, r2, [r1]
 8006b10:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e5      	bne.n	8006ae4 <UART_Start_Receive_IT+0x160>
 8006b18:	e046      	b.n	8006ba8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b22:	d107      	bne.n	8006b34 <UART_Start_Receive_IT+0x1b0>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d103      	bne.n	8006b34 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4a24      	ldr	r2, [pc, #144]	; (8006bc0 <UART_Start_Receive_IT+0x23c>)
 8006b30:	675a      	str	r2, [r3, #116]	; 0x74
 8006b32:	e002      	b.n	8006b3a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4a23      	ldr	r2, [pc, #140]	; (8006bc4 <UART_Start_Receive_IT+0x240>)
 8006b38:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d019      	beq.n	8006b76 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4a:	e853 3f00 	ldrex	r3, [r3]
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006b56:	677b      	str	r3, [r7, #116]	; 0x74
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b60:	637b      	str	r3, [r7, #52]	; 0x34
 8006b62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e6      	bne.n	8006b42 <UART_Start_Receive_IT+0x1be>
 8006b74:	e018      	b.n	8006ba8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	613b      	str	r3, [r7, #16]
   return(result);
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	f043 0320 	orr.w	r3, r3, #32
 8006b8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	461a      	mov	r2, r3
 8006b92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b94:	623b      	str	r3, [r7, #32]
 8006b96:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	69f9      	ldr	r1, [r7, #28]
 8006b9a:	6a3a      	ldr	r2, [r7, #32]
 8006b9c:	e841 2300 	strex	r3, r2, [r1]
 8006ba0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e6      	bne.n	8006b76 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	378c      	adds	r7, #140	; 0x8c
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	080073e9 	.word	0x080073e9
 8006bbc:	08007089 	.word	0x08007089
 8006bc0:	08006ed1 	.word	0x08006ed1
 8006bc4:	08006d19 	.word	0x08006d19

08006bc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b095      	sub	sp, #84	; 0x54
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006be4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bee:	643b      	str	r3, [r7, #64]	; 0x40
 8006bf0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bf6:	e841 2300 	strex	r3, r2, [r1]
 8006bfa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1e6      	bne.n	8006bd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3308      	adds	r3, #8
 8006c08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c12:	69fa      	ldr	r2, [r7, #28]
 8006c14:	4b1e      	ldr	r3, [pc, #120]	; (8006c90 <UART_EndRxTransfer+0xc8>)
 8006c16:	4013      	ands	r3, r2
 8006c18:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3308      	adds	r3, #8
 8006c20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e5      	bne.n	8006c02 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d118      	bne.n	8006c70 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f023 0310 	bic.w	r3, r3, #16
 8006c52:	647b      	str	r3, [r7, #68]	; 0x44
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c5c:	61bb      	str	r3, [r7, #24]
 8006c5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	6979      	ldr	r1, [r7, #20]
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	613b      	str	r3, [r7, #16]
   return(result);
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e6      	bne.n	8006c3e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2220      	movs	r2, #32
 8006c74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006c84:	bf00      	nop
 8006c86:	3754      	adds	r7, #84	; 0x54
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	effffffe 	.word	0xeffffffe

08006c94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f7fe fe30 	bl	8005918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cb8:	bf00      	nop
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b088      	sub	sp, #32
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cdc:	61fb      	str	r3, [r7, #28]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	61bb      	str	r3, [r7, #24]
 8006ce8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	6979      	ldr	r1, [r7, #20]
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e6      	bne.n	8006cc8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7fe fdfb 	bl	8005904 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d0e:	bf00      	nop
 8006d10:	3720      	adds	r7, #32
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
	...

08006d18 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b09c      	sub	sp, #112	; 0x70
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d26:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d30:	2b22      	cmp	r3, #34	; 0x22
 8006d32:	f040 80be 	bne.w	8006eb2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d44:	b2d9      	uxtb	r1, r3
 8006d46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d50:	400a      	ands	r2, r1
 8006d52:	b2d2      	uxtb	r2, r2
 8006d54:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f040 80a1 	bne.w	8006ec2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d94:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006da0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006da4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e6      	bne.n	8006d80 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3308      	adds	r3, #8
 8006db8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc4:	f023 0301 	bic.w	r3, r3, #1
 8006dc8:	667b      	str	r3, [r7, #100]	; 0x64
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3308      	adds	r3, #8
 8006dd0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006dd2:	647a      	str	r2, [r7, #68]	; 0x44
 8006dd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e5      	bne.n	8006db2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2220      	movs	r2, #32
 8006dea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a33      	ldr	r2, [pc, #204]	; (8006ecc <UART_RxISR_8BIT+0x1b4>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d01f      	beq.n	8006e44 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d018      	beq.n	8006e44 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	e853 3f00 	ldrex	r3, [r3]
 8006e1e:	623b      	str	r3, [r7, #32]
   return(result);
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e26:	663b      	str	r3, [r7, #96]	; 0x60
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e30:	633b      	str	r3, [r7, #48]	; 0x30
 8006e32:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e38:	e841 2300 	strex	r3, r2, [r1]
 8006e3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e6      	bne.n	8006e12 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d12e      	bne.n	8006eaa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	e853 3f00 	ldrex	r3, [r3]
 8006e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f023 0310 	bic.w	r3, r3, #16
 8006e66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e70:	61fb      	str	r3, [r7, #28]
 8006e72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e74:	69b9      	ldr	r1, [r7, #24]
 8006e76:	69fa      	ldr	r2, [r7, #28]
 8006e78:	e841 2300 	strex	r3, r2, [r1]
 8006e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1e6      	bne.n	8006e52 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	f003 0310 	and.w	r3, r3, #16
 8006e8e:	2b10      	cmp	r3, #16
 8006e90:	d103      	bne.n	8006e9a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2210      	movs	r2, #16
 8006e98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7fe fd42 	bl	800592c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ea8:	e00b      	b.n	8006ec2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7fa f8f8 	bl	80010a0 <HAL_UART_RxCpltCallback>
}
 8006eb0:	e007      	b.n	8006ec2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	699a      	ldr	r2, [r3, #24]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f042 0208 	orr.w	r2, r2, #8
 8006ec0:	619a      	str	r2, [r3, #24]
}
 8006ec2:	bf00      	nop
 8006ec4:	3770      	adds	r7, #112	; 0x70
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	58000c00 	.word	0x58000c00

08006ed0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b09c      	sub	sp, #112	; 0x70
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ede:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ee8:	2b22      	cmp	r3, #34	; 0x22
 8006eea:	f040 80be 	bne.w	800706a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006efc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006efe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006f02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006f06:	4013      	ands	r3, r2
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f0c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f12:	1c9a      	adds	r2, r3, #2
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	3b01      	subs	r3, #1
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f040 80a1 	bne.w	800707a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f40:	e853 3f00 	ldrex	r3, [r3]
 8006f44:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f4c:	667b      	str	r3, [r7, #100]	; 0x64
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f56:	657b      	str	r3, [r7, #84]	; 0x54
 8006f58:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f5e:	e841 2300 	strex	r3, r2, [r1]
 8006f62:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1e6      	bne.n	8006f38 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3308      	adds	r3, #8
 8006f70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f74:	e853 3f00 	ldrex	r3, [r3]
 8006f78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7c:	f023 0301 	bic.w	r3, r3, #1
 8006f80:	663b      	str	r3, [r7, #96]	; 0x60
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3308      	adds	r3, #8
 8006f88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f8a:	643a      	str	r2, [r7, #64]	; 0x40
 8006f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e5      	bne.n	8006f6a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a33      	ldr	r2, [pc, #204]	; (8007084 <UART_RxISR_16BIT+0x1b4>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d01f      	beq.n	8006ffc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d018      	beq.n	8006ffc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006fde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fea:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ff0:	e841 2300 	strex	r3, r2, [r1]
 8006ff4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1e6      	bne.n	8006fca <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007000:	2b01      	cmp	r3, #1
 8007002:	d12e      	bne.n	8007062 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	e853 3f00 	ldrex	r3, [r3]
 8007016:	60bb      	str	r3, [r7, #8]
   return(result);
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f023 0310 	bic.w	r3, r3, #16
 800701e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	461a      	mov	r2, r3
 8007026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007028:	61bb      	str	r3, [r7, #24]
 800702a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	6979      	ldr	r1, [r7, #20]
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	e841 2300 	strex	r3, r2, [r1]
 8007034:	613b      	str	r3, [r7, #16]
   return(result);
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e6      	bne.n	800700a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	f003 0310 	and.w	r3, r3, #16
 8007046:	2b10      	cmp	r3, #16
 8007048:	d103      	bne.n	8007052 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2210      	movs	r2, #16
 8007050:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7fe fc66 	bl	800592c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007060:	e00b      	b.n	800707a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7fa f81c 	bl	80010a0 <HAL_UART_RxCpltCallback>
}
 8007068:	e007      	b.n	800707a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	699a      	ldr	r2, [r3, #24]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f042 0208 	orr.w	r2, r2, #8
 8007078:	619a      	str	r2, [r3, #24]
}
 800707a:	bf00      	nop
 800707c:	3770      	adds	r7, #112	; 0x70
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	58000c00 	.word	0x58000c00

08007088 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b0ac      	sub	sp, #176	; 0xb0
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007096:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070be:	2b22      	cmp	r3, #34	; 0x22
 80070c0:	f040 8180 	bne.w	80073c4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80070ca:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070ce:	e123      	b.n	8007318 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80070da:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80070de:	b2d9      	uxtb	r1, r3
 80070e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ea:	400a      	ands	r2, r1
 80070ec:	b2d2      	uxtb	r2, r2
 80070ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f4:	1c5a      	adds	r2, r3, #1
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007100:	b29b      	uxth	r3, r3
 8007102:	3b01      	subs	r3, #1
 8007104:	b29a      	uxth	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800711a:	f003 0307 	and.w	r3, r3, #7
 800711e:	2b00      	cmp	r3, #0
 8007120:	d053      	beq.n	80071ca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	d011      	beq.n	8007152 <UART_RxISR_8BIT_FIFOEN+0xca>
 800712e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00b      	beq.n	8007152 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2201      	movs	r2, #1
 8007140:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007148:	f043 0201 	orr.w	r2, r3, #1
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d011      	beq.n	8007182 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800715e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00b      	beq.n	8007182 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2202      	movs	r2, #2
 8007170:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007178:	f043 0204 	orr.w	r2, r3, #4
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007186:	f003 0304 	and.w	r3, r3, #4
 800718a:	2b00      	cmp	r3, #0
 800718c:	d011      	beq.n	80071b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800718e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00b      	beq.n	80071b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2204      	movs	r2, #4
 80071a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a8:	f043 0202 	orr.w	r2, r3, #2
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d006      	beq.n	80071ca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7fe fbab 	bl	8005918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f040 80a0 	bne.w	8007318 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80071e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	461a      	mov	r2, r3
 80071f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071fc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007200:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e4      	bne.n	80071d8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3308      	adds	r3, #8
 8007214:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800721e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007220:	4b6e      	ldr	r3, [pc, #440]	; (80073dc <UART_RxISR_8BIT_FIFOEN+0x354>)
 8007222:	4013      	ands	r3, r2
 8007224:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3308      	adds	r3, #8
 800722e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007232:	66ba      	str	r2, [r7, #104]	; 0x68
 8007234:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007236:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007238:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800723a:	e841 2300 	strex	r3, r2, [r1]
 800723e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007240:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1e3      	bne.n	800720e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2220      	movs	r2, #32
 800724a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a60      	ldr	r2, [pc, #384]	; (80073e0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d021      	beq.n	80072a8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d01a      	beq.n	80072a8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800727a:	e853 3f00 	ldrex	r3, [r3]
 800727e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007282:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007286:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007294:	657b      	str	r3, [r7, #84]	; 0x54
 8007296:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800729a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800729c:	e841 2300 	strex	r3, r2, [r1]
 80072a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e4      	bne.n	8007272 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d130      	bne.n	8007312 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072be:	e853 3f00 	ldrex	r3, [r3]
 80072c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c6:	f023 0310 	bic.w	r3, r3, #16
 80072ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072d8:	643b      	str	r3, [r7, #64]	; 0x40
 80072da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072e0:	e841 2300 	strex	r3, r2, [r1]
 80072e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1e4      	bne.n	80072b6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	f003 0310 	and.w	r3, r3, #16
 80072f6:	2b10      	cmp	r3, #16
 80072f8:	d103      	bne.n	8007302 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2210      	movs	r2, #16
 8007300:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007308:	4619      	mov	r1, r3
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f7fe fb0e 	bl	800592c <HAL_UARTEx_RxEventCallback>
 8007310:	e002      	b.n	8007318 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7f9 fec4 	bl	80010a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007318:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800731c:	2b00      	cmp	r3, #0
 800731e:	d006      	beq.n	800732e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8007320:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007324:	f003 0320 	and.w	r3, r3, #32
 8007328:	2b00      	cmp	r3, #0
 800732a:	f47f aed1 	bne.w	80070d0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007334:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007338:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800733c:	2b00      	cmp	r3, #0
 800733e:	d049      	beq.n	80073d4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007346:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800734a:	429a      	cmp	r2, r3
 800734c:	d242      	bcs.n	80073d4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3308      	adds	r3, #8
 8007354:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	61fb      	str	r3, [r7, #28]
   return(result);
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3308      	adds	r3, #8
 800736e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007372:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007374:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e3      	bne.n	800734e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a16      	ldr	r2, [pc, #88]	; (80073e4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800738a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	60bb      	str	r3, [r7, #8]
   return(result);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f043 0320 	orr.w	r3, r3, #32
 80073a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	461a      	mov	r2, r3
 80073aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073ae:	61bb      	str	r3, [r7, #24]
 80073b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	6979      	ldr	r1, [r7, #20]
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	e841 2300 	strex	r3, r2, [r1]
 80073ba:	613b      	str	r3, [r7, #16]
   return(result);
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e4      	bne.n	800738c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073c2:	e007      	b.n	80073d4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699a      	ldr	r2, [r3, #24]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f042 0208 	orr.w	r2, r2, #8
 80073d2:	619a      	str	r2, [r3, #24]
}
 80073d4:	bf00      	nop
 80073d6:	37b0      	adds	r7, #176	; 0xb0
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	effffffe 	.word	0xeffffffe
 80073e0:	58000c00 	.word	0x58000c00
 80073e4:	08006d19 	.word	0x08006d19

080073e8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b0ae      	sub	sp, #184	; 0xb8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073f6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800741e:	2b22      	cmp	r3, #34	; 0x22
 8007420:	f040 8184 	bne.w	800772c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800742a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800742e:	e127      	b.n	8007680 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800743e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007442:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007446:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800744a:	4013      	ands	r3, r2
 800744c:	b29a      	uxth	r2, r3
 800744e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007452:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007458:	1c9a      	adds	r2, r3, #2
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007464:	b29b      	uxth	r3, r3
 8007466:	3b01      	subs	r3, #1
 8007468:	b29a      	uxth	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800747a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800747e:	f003 0307 	and.w	r3, r3, #7
 8007482:	2b00      	cmp	r3, #0
 8007484:	d053      	beq.n	800752e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007486:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d011      	beq.n	80074b6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00b      	beq.n	80074b6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2201      	movs	r2, #1
 80074a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ac:	f043 0201 	orr.w	r2, r3, #1
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074ba:	f003 0302 	and.w	r3, r3, #2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d011      	beq.n	80074e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80074c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00b      	beq.n	80074e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2202      	movs	r2, #2
 80074d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074dc:	f043 0204 	orr.w	r2, r3, #4
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80074ea:	f003 0304 	and.w	r3, r3, #4
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d011      	beq.n	8007516 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80074f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00b      	beq.n	8007516 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2204      	movs	r2, #4
 8007504:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800750c:	f043 0202 	orr.w	r2, r3, #2
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800751c:	2b00      	cmp	r3, #0
 800751e:	d006      	beq.n	800752e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7fe f9f9 	bl	8005918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007534:	b29b      	uxth	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	f040 80a2 	bne.w	8007680 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007544:	e853 3f00 	ldrex	r3, [r3]
 8007548:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800754a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800754c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007550:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	461a      	mov	r2, r3
 800755a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800755e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007562:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007564:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007566:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007570:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e2      	bne.n	800753c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3308      	adds	r3, #8
 800757c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007580:	e853 3f00 	ldrex	r3, [r3]
 8007584:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007586:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007588:	4b6e      	ldr	r3, [pc, #440]	; (8007744 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800758a:	4013      	ands	r3, r2
 800758c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3308      	adds	r3, #8
 8007596:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800759a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800759c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80075a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80075a2:	e841 2300 	strex	r3, r2, [r1]
 80075a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80075a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1e3      	bne.n	8007576 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2220      	movs	r2, #32
 80075b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a60      	ldr	r2, [pc, #384]	; (8007748 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d021      	beq.n	8007610 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d01a      	beq.n	8007610 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075e2:	e853 3f00 	ldrex	r3, [r3]
 80075e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80075fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80075fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007602:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007604:	e841 2300 	strex	r3, r2, [r1]
 8007608:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800760a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e4      	bne.n	80075da <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007614:	2b01      	cmp	r3, #1
 8007616:	d130      	bne.n	800767a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007626:	e853 3f00 	ldrex	r3, [r3]
 800762a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800762c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762e:	f023 0310 	bic.w	r3, r3, #16
 8007632:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007640:	647b      	str	r3, [r7, #68]	; 0x44
 8007642:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007644:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007648:	e841 2300 	strex	r3, r2, [r1]
 800764c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800764e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1e4      	bne.n	800761e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	f003 0310 	and.w	r3, r3, #16
 800765e:	2b10      	cmp	r3, #16
 8007660:	d103      	bne.n	800766a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2210      	movs	r2, #16
 8007668:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7fe f95a 	bl	800592c <HAL_UARTEx_RxEventCallback>
 8007678:	e002      	b.n	8007680 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7f9 fd10 	bl	80010a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007680:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007684:	2b00      	cmp	r3, #0
 8007686:	d006      	beq.n	8007696 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8007688:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800768c:	f003 0320 	and.w	r3, r3, #32
 8007690:	2b00      	cmp	r3, #0
 8007692:	f47f aecd 	bne.w	8007430 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800769c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80076a0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d049      	beq.n	800773c <UART_RxISR_16BIT_FIFOEN+0x354>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80076ae:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d242      	bcs.n	800773c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3308      	adds	r3, #8
 80076bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c0:	e853 3f00 	ldrex	r3, [r3]
 80076c4:	623b      	str	r3, [r7, #32]
   return(result);
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3308      	adds	r3, #8
 80076d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80076da:	633a      	str	r2, [r7, #48]	; 0x30
 80076dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e2:	e841 2300 	strex	r3, r2, [r1]
 80076e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1e3      	bne.n	80076b6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a16      	ldr	r2, [pc, #88]	; (800774c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80076f2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	60fb      	str	r3, [r7, #12]
   return(result);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f043 0320 	orr.w	r3, r3, #32
 8007708:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	461a      	mov	r2, r3
 8007712:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007716:	61fb      	str	r3, [r7, #28]
 8007718:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771a:	69b9      	ldr	r1, [r7, #24]
 800771c:	69fa      	ldr	r2, [r7, #28]
 800771e:	e841 2300 	strex	r3, r2, [r1]
 8007722:	617b      	str	r3, [r7, #20]
   return(result);
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1e4      	bne.n	80076f4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800772a:	e007      	b.n	800773c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	699a      	ldr	r2, [r3, #24]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0208 	orr.w	r2, r2, #8
 800773a:	619a      	str	r2, [r3, #24]
}
 800773c:	bf00      	nop
 800773e:	37b8      	adds	r7, #184	; 0xb8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	effffffe 	.word	0xeffffffe
 8007748:	58000c00 	.word	0x58000c00
 800774c:	08006ed1 	.word	0x08006ed1

08007750 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800779a:	2b01      	cmp	r3, #1
 800779c:	d101      	bne.n	80077a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800779e:	2302      	movs	r3, #2
 80077a0:	e027      	b.n	80077f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2224      	movs	r2, #36	; 0x24
 80077ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f022 0201 	bic.w	r2, r2, #1
 80077c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80077d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b084      	sub	sp, #16
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800780e:	2b01      	cmp	r3, #1
 8007810:	d101      	bne.n	8007816 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007812:	2302      	movs	r3, #2
 8007814:	e02d      	b.n	8007872 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2224      	movs	r2, #36	; 0x24
 8007822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f022 0201 	bic.w	r2, r2, #1
 800783c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f850 	bl	80078f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800788e:	2302      	movs	r3, #2
 8007890:	e02d      	b.n	80078ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2224      	movs	r2, #36	; 0x24
 800789e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f022 0201 	bic.w	r2, r2, #1
 80078b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f812 	bl	80078f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2220      	movs	r2, #32
 80078e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
	...

080078f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007904:	2b00      	cmp	r3, #0
 8007906:	d108      	bne.n	800791a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007918:	e031      	b.n	800797e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800791a:	2310      	movs	r3, #16
 800791c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800791e:	2310      	movs	r3, #16
 8007920:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	0e5b      	lsrs	r3, r3, #25
 800792a:	b2db      	uxtb	r3, r3
 800792c:	f003 0307 	and.w	r3, r3, #7
 8007930:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	0f5b      	lsrs	r3, r3, #29
 800793a:	b2db      	uxtb	r3, r3
 800793c:	f003 0307 	and.w	r3, r3, #7
 8007940:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	7b3a      	ldrb	r2, [r7, #12]
 8007946:	4911      	ldr	r1, [pc, #68]	; (800798c <UARTEx_SetNbDataToProcess+0x94>)
 8007948:	5c8a      	ldrb	r2, [r1, r2]
 800794a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800794e:	7b3a      	ldrb	r2, [r7, #12]
 8007950:	490f      	ldr	r1, [pc, #60]	; (8007990 <UARTEx_SetNbDataToProcess+0x98>)
 8007952:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007954:	fb93 f3f2 	sdiv	r3, r3, r2
 8007958:	b29a      	uxth	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007960:	7bfb      	ldrb	r3, [r7, #15]
 8007962:	7b7a      	ldrb	r2, [r7, #13]
 8007964:	4909      	ldr	r1, [pc, #36]	; (800798c <UARTEx_SetNbDataToProcess+0x94>)
 8007966:	5c8a      	ldrb	r2, [r1, r2]
 8007968:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800796c:	7b7a      	ldrb	r2, [r7, #13]
 800796e:	4908      	ldr	r1, [pc, #32]	; (8007990 <UARTEx_SetNbDataToProcess+0x98>)
 8007970:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007972:	fb93 f3f2 	sdiv	r3, r3, r2
 8007976:	b29a      	uxth	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800797e:	bf00      	nop
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	0800837c 	.word	0x0800837c
 8007990:	08008384 	.word	0x08008384

08007994 <sniprintf>:
 8007994:	b40c      	push	{r2, r3}
 8007996:	b530      	push	{r4, r5, lr}
 8007998:	4b17      	ldr	r3, [pc, #92]	; (80079f8 <sniprintf+0x64>)
 800799a:	1e0c      	subs	r4, r1, #0
 800799c:	681d      	ldr	r5, [r3, #0]
 800799e:	b09d      	sub	sp, #116	; 0x74
 80079a0:	da08      	bge.n	80079b4 <sniprintf+0x20>
 80079a2:	238b      	movs	r3, #139	; 0x8b
 80079a4:	602b      	str	r3, [r5, #0]
 80079a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079aa:	b01d      	add	sp, #116	; 0x74
 80079ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079b0:	b002      	add	sp, #8
 80079b2:	4770      	bx	lr
 80079b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80079b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80079bc:	bf14      	ite	ne
 80079be:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80079c2:	4623      	moveq	r3, r4
 80079c4:	9304      	str	r3, [sp, #16]
 80079c6:	9307      	str	r3, [sp, #28]
 80079c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079cc:	9002      	str	r0, [sp, #8]
 80079ce:	9006      	str	r0, [sp, #24]
 80079d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80079d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80079d6:	ab21      	add	r3, sp, #132	; 0x84
 80079d8:	a902      	add	r1, sp, #8
 80079da:	4628      	mov	r0, r5
 80079dc:	9301      	str	r3, [sp, #4]
 80079de:	f000 f993 	bl	8007d08 <_svfiprintf_r>
 80079e2:	1c43      	adds	r3, r0, #1
 80079e4:	bfbc      	itt	lt
 80079e6:	238b      	movlt	r3, #139	; 0x8b
 80079e8:	602b      	strlt	r3, [r5, #0]
 80079ea:	2c00      	cmp	r4, #0
 80079ec:	d0dd      	beq.n	80079aa <sniprintf+0x16>
 80079ee:	9b02      	ldr	r3, [sp, #8]
 80079f0:	2200      	movs	r2, #0
 80079f2:	701a      	strb	r2, [r3, #0]
 80079f4:	e7d9      	b.n	80079aa <sniprintf+0x16>
 80079f6:	bf00      	nop
 80079f8:	2400005c 	.word	0x2400005c

080079fc <memset>:
 80079fc:	4402      	add	r2, r0
 80079fe:	4603      	mov	r3, r0
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d100      	bne.n	8007a06 <memset+0xa>
 8007a04:	4770      	bx	lr
 8007a06:	f803 1b01 	strb.w	r1, [r3], #1
 8007a0a:	e7f9      	b.n	8007a00 <memset+0x4>

08007a0c <__errno>:
 8007a0c:	4b01      	ldr	r3, [pc, #4]	; (8007a14 <__errno+0x8>)
 8007a0e:	6818      	ldr	r0, [r3, #0]
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	2400005c 	.word	0x2400005c

08007a18 <__libc_init_array>:
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	4d0d      	ldr	r5, [pc, #52]	; (8007a50 <__libc_init_array+0x38>)
 8007a1c:	4c0d      	ldr	r4, [pc, #52]	; (8007a54 <__libc_init_array+0x3c>)
 8007a1e:	1b64      	subs	r4, r4, r5
 8007a20:	10a4      	asrs	r4, r4, #2
 8007a22:	2600      	movs	r6, #0
 8007a24:	42a6      	cmp	r6, r4
 8007a26:	d109      	bne.n	8007a3c <__libc_init_array+0x24>
 8007a28:	4d0b      	ldr	r5, [pc, #44]	; (8007a58 <__libc_init_array+0x40>)
 8007a2a:	4c0c      	ldr	r4, [pc, #48]	; (8007a5c <__libc_init_array+0x44>)
 8007a2c:	f000 fc6a 	bl	8008304 <_init>
 8007a30:	1b64      	subs	r4, r4, r5
 8007a32:	10a4      	asrs	r4, r4, #2
 8007a34:	2600      	movs	r6, #0
 8007a36:	42a6      	cmp	r6, r4
 8007a38:	d105      	bne.n	8007a46 <__libc_init_array+0x2e>
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a40:	4798      	blx	r3
 8007a42:	3601      	adds	r6, #1
 8007a44:	e7ee      	b.n	8007a24 <__libc_init_array+0xc>
 8007a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a4a:	4798      	blx	r3
 8007a4c:	3601      	adds	r6, #1
 8007a4e:	e7f2      	b.n	8007a36 <__libc_init_array+0x1e>
 8007a50:	080083c8 	.word	0x080083c8
 8007a54:	080083c8 	.word	0x080083c8
 8007a58:	080083c8 	.word	0x080083c8
 8007a5c:	080083cc 	.word	0x080083cc

08007a60 <__retarget_lock_acquire_recursive>:
 8007a60:	4770      	bx	lr

08007a62 <__retarget_lock_release_recursive>:
 8007a62:	4770      	bx	lr

08007a64 <_free_r>:
 8007a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a66:	2900      	cmp	r1, #0
 8007a68:	d044      	beq.n	8007af4 <_free_r+0x90>
 8007a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a6e:	9001      	str	r0, [sp, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f1a1 0404 	sub.w	r4, r1, #4
 8007a76:	bfb8      	it	lt
 8007a78:	18e4      	addlt	r4, r4, r3
 8007a7a:	f000 f8df 	bl	8007c3c <__malloc_lock>
 8007a7e:	4a1e      	ldr	r2, [pc, #120]	; (8007af8 <_free_r+0x94>)
 8007a80:	9801      	ldr	r0, [sp, #4]
 8007a82:	6813      	ldr	r3, [r2, #0]
 8007a84:	b933      	cbnz	r3, 8007a94 <_free_r+0x30>
 8007a86:	6063      	str	r3, [r4, #4]
 8007a88:	6014      	str	r4, [r2, #0]
 8007a8a:	b003      	add	sp, #12
 8007a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a90:	f000 b8da 	b.w	8007c48 <__malloc_unlock>
 8007a94:	42a3      	cmp	r3, r4
 8007a96:	d908      	bls.n	8007aaa <_free_r+0x46>
 8007a98:	6825      	ldr	r5, [r4, #0]
 8007a9a:	1961      	adds	r1, r4, r5
 8007a9c:	428b      	cmp	r3, r1
 8007a9e:	bf01      	itttt	eq
 8007aa0:	6819      	ldreq	r1, [r3, #0]
 8007aa2:	685b      	ldreq	r3, [r3, #4]
 8007aa4:	1949      	addeq	r1, r1, r5
 8007aa6:	6021      	streq	r1, [r4, #0]
 8007aa8:	e7ed      	b.n	8007a86 <_free_r+0x22>
 8007aaa:	461a      	mov	r2, r3
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	b10b      	cbz	r3, 8007ab4 <_free_r+0x50>
 8007ab0:	42a3      	cmp	r3, r4
 8007ab2:	d9fa      	bls.n	8007aaa <_free_r+0x46>
 8007ab4:	6811      	ldr	r1, [r2, #0]
 8007ab6:	1855      	adds	r5, r2, r1
 8007ab8:	42a5      	cmp	r5, r4
 8007aba:	d10b      	bne.n	8007ad4 <_free_r+0x70>
 8007abc:	6824      	ldr	r4, [r4, #0]
 8007abe:	4421      	add	r1, r4
 8007ac0:	1854      	adds	r4, r2, r1
 8007ac2:	42a3      	cmp	r3, r4
 8007ac4:	6011      	str	r1, [r2, #0]
 8007ac6:	d1e0      	bne.n	8007a8a <_free_r+0x26>
 8007ac8:	681c      	ldr	r4, [r3, #0]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	6053      	str	r3, [r2, #4]
 8007ace:	440c      	add	r4, r1
 8007ad0:	6014      	str	r4, [r2, #0]
 8007ad2:	e7da      	b.n	8007a8a <_free_r+0x26>
 8007ad4:	d902      	bls.n	8007adc <_free_r+0x78>
 8007ad6:	230c      	movs	r3, #12
 8007ad8:	6003      	str	r3, [r0, #0]
 8007ada:	e7d6      	b.n	8007a8a <_free_r+0x26>
 8007adc:	6825      	ldr	r5, [r4, #0]
 8007ade:	1961      	adds	r1, r4, r5
 8007ae0:	428b      	cmp	r3, r1
 8007ae2:	bf04      	itt	eq
 8007ae4:	6819      	ldreq	r1, [r3, #0]
 8007ae6:	685b      	ldreq	r3, [r3, #4]
 8007ae8:	6063      	str	r3, [r4, #4]
 8007aea:	bf04      	itt	eq
 8007aec:	1949      	addeq	r1, r1, r5
 8007aee:	6021      	streq	r1, [r4, #0]
 8007af0:	6054      	str	r4, [r2, #4]
 8007af2:	e7ca      	b.n	8007a8a <_free_r+0x26>
 8007af4:	b003      	add	sp, #12
 8007af6:	bd30      	pop	{r4, r5, pc}
 8007af8:	24000344 	.word	0x24000344

08007afc <sbrk_aligned>:
 8007afc:	b570      	push	{r4, r5, r6, lr}
 8007afe:	4e0e      	ldr	r6, [pc, #56]	; (8007b38 <sbrk_aligned+0x3c>)
 8007b00:	460c      	mov	r4, r1
 8007b02:	6831      	ldr	r1, [r6, #0]
 8007b04:	4605      	mov	r5, r0
 8007b06:	b911      	cbnz	r1, 8007b0e <sbrk_aligned+0x12>
 8007b08:	f000 fba6 	bl	8008258 <_sbrk_r>
 8007b0c:	6030      	str	r0, [r6, #0]
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4628      	mov	r0, r5
 8007b12:	f000 fba1 	bl	8008258 <_sbrk_r>
 8007b16:	1c43      	adds	r3, r0, #1
 8007b18:	d00a      	beq.n	8007b30 <sbrk_aligned+0x34>
 8007b1a:	1cc4      	adds	r4, r0, #3
 8007b1c:	f024 0403 	bic.w	r4, r4, #3
 8007b20:	42a0      	cmp	r0, r4
 8007b22:	d007      	beq.n	8007b34 <sbrk_aligned+0x38>
 8007b24:	1a21      	subs	r1, r4, r0
 8007b26:	4628      	mov	r0, r5
 8007b28:	f000 fb96 	bl	8008258 <_sbrk_r>
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	d101      	bne.n	8007b34 <sbrk_aligned+0x38>
 8007b30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007b34:	4620      	mov	r0, r4
 8007b36:	bd70      	pop	{r4, r5, r6, pc}
 8007b38:	24000348 	.word	0x24000348

08007b3c <_malloc_r>:
 8007b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b40:	1ccd      	adds	r5, r1, #3
 8007b42:	f025 0503 	bic.w	r5, r5, #3
 8007b46:	3508      	adds	r5, #8
 8007b48:	2d0c      	cmp	r5, #12
 8007b4a:	bf38      	it	cc
 8007b4c:	250c      	movcc	r5, #12
 8007b4e:	2d00      	cmp	r5, #0
 8007b50:	4607      	mov	r7, r0
 8007b52:	db01      	blt.n	8007b58 <_malloc_r+0x1c>
 8007b54:	42a9      	cmp	r1, r5
 8007b56:	d905      	bls.n	8007b64 <_malloc_r+0x28>
 8007b58:	230c      	movs	r3, #12
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	2600      	movs	r6, #0
 8007b5e:	4630      	mov	r0, r6
 8007b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007c38 <_malloc_r+0xfc>
 8007b68:	f000 f868 	bl	8007c3c <__malloc_lock>
 8007b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8007b70:	461c      	mov	r4, r3
 8007b72:	bb5c      	cbnz	r4, 8007bcc <_malloc_r+0x90>
 8007b74:	4629      	mov	r1, r5
 8007b76:	4638      	mov	r0, r7
 8007b78:	f7ff ffc0 	bl	8007afc <sbrk_aligned>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	4604      	mov	r4, r0
 8007b80:	d155      	bne.n	8007c2e <_malloc_r+0xf2>
 8007b82:	f8d8 4000 	ldr.w	r4, [r8]
 8007b86:	4626      	mov	r6, r4
 8007b88:	2e00      	cmp	r6, #0
 8007b8a:	d145      	bne.n	8007c18 <_malloc_r+0xdc>
 8007b8c:	2c00      	cmp	r4, #0
 8007b8e:	d048      	beq.n	8007c22 <_malloc_r+0xe6>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	4631      	mov	r1, r6
 8007b94:	4638      	mov	r0, r7
 8007b96:	eb04 0903 	add.w	r9, r4, r3
 8007b9a:	f000 fb5d 	bl	8008258 <_sbrk_r>
 8007b9e:	4581      	cmp	r9, r0
 8007ba0:	d13f      	bne.n	8007c22 <_malloc_r+0xe6>
 8007ba2:	6821      	ldr	r1, [r4, #0]
 8007ba4:	1a6d      	subs	r5, r5, r1
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	4638      	mov	r0, r7
 8007baa:	f7ff ffa7 	bl	8007afc <sbrk_aligned>
 8007bae:	3001      	adds	r0, #1
 8007bb0:	d037      	beq.n	8007c22 <_malloc_r+0xe6>
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	442b      	add	r3, r5
 8007bb6:	6023      	str	r3, [r4, #0]
 8007bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d038      	beq.n	8007c32 <_malloc_r+0xf6>
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	42a2      	cmp	r2, r4
 8007bc4:	d12b      	bne.n	8007c1e <_malloc_r+0xe2>
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	605a      	str	r2, [r3, #4]
 8007bca:	e00f      	b.n	8007bec <_malloc_r+0xb0>
 8007bcc:	6822      	ldr	r2, [r4, #0]
 8007bce:	1b52      	subs	r2, r2, r5
 8007bd0:	d41f      	bmi.n	8007c12 <_malloc_r+0xd6>
 8007bd2:	2a0b      	cmp	r2, #11
 8007bd4:	d917      	bls.n	8007c06 <_malloc_r+0xca>
 8007bd6:	1961      	adds	r1, r4, r5
 8007bd8:	42a3      	cmp	r3, r4
 8007bda:	6025      	str	r5, [r4, #0]
 8007bdc:	bf18      	it	ne
 8007bde:	6059      	strne	r1, [r3, #4]
 8007be0:	6863      	ldr	r3, [r4, #4]
 8007be2:	bf08      	it	eq
 8007be4:	f8c8 1000 	streq.w	r1, [r8]
 8007be8:	5162      	str	r2, [r4, r5]
 8007bea:	604b      	str	r3, [r1, #4]
 8007bec:	4638      	mov	r0, r7
 8007bee:	f104 060b 	add.w	r6, r4, #11
 8007bf2:	f000 f829 	bl	8007c48 <__malloc_unlock>
 8007bf6:	f026 0607 	bic.w	r6, r6, #7
 8007bfa:	1d23      	adds	r3, r4, #4
 8007bfc:	1af2      	subs	r2, r6, r3
 8007bfe:	d0ae      	beq.n	8007b5e <_malloc_r+0x22>
 8007c00:	1b9b      	subs	r3, r3, r6
 8007c02:	50a3      	str	r3, [r4, r2]
 8007c04:	e7ab      	b.n	8007b5e <_malloc_r+0x22>
 8007c06:	42a3      	cmp	r3, r4
 8007c08:	6862      	ldr	r2, [r4, #4]
 8007c0a:	d1dd      	bne.n	8007bc8 <_malloc_r+0x8c>
 8007c0c:	f8c8 2000 	str.w	r2, [r8]
 8007c10:	e7ec      	b.n	8007bec <_malloc_r+0xb0>
 8007c12:	4623      	mov	r3, r4
 8007c14:	6864      	ldr	r4, [r4, #4]
 8007c16:	e7ac      	b.n	8007b72 <_malloc_r+0x36>
 8007c18:	4634      	mov	r4, r6
 8007c1a:	6876      	ldr	r6, [r6, #4]
 8007c1c:	e7b4      	b.n	8007b88 <_malloc_r+0x4c>
 8007c1e:	4613      	mov	r3, r2
 8007c20:	e7cc      	b.n	8007bbc <_malloc_r+0x80>
 8007c22:	230c      	movs	r3, #12
 8007c24:	603b      	str	r3, [r7, #0]
 8007c26:	4638      	mov	r0, r7
 8007c28:	f000 f80e 	bl	8007c48 <__malloc_unlock>
 8007c2c:	e797      	b.n	8007b5e <_malloc_r+0x22>
 8007c2e:	6025      	str	r5, [r4, #0]
 8007c30:	e7dc      	b.n	8007bec <_malloc_r+0xb0>
 8007c32:	605b      	str	r3, [r3, #4]
 8007c34:	deff      	udf	#255	; 0xff
 8007c36:	bf00      	nop
 8007c38:	24000344 	.word	0x24000344

08007c3c <__malloc_lock>:
 8007c3c:	4801      	ldr	r0, [pc, #4]	; (8007c44 <__malloc_lock+0x8>)
 8007c3e:	f7ff bf0f 	b.w	8007a60 <__retarget_lock_acquire_recursive>
 8007c42:	bf00      	nop
 8007c44:	24000340 	.word	0x24000340

08007c48 <__malloc_unlock>:
 8007c48:	4801      	ldr	r0, [pc, #4]	; (8007c50 <__malloc_unlock+0x8>)
 8007c4a:	f7ff bf0a 	b.w	8007a62 <__retarget_lock_release_recursive>
 8007c4e:	bf00      	nop
 8007c50:	24000340 	.word	0x24000340

08007c54 <__ssputs_r>:
 8007c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c58:	688e      	ldr	r6, [r1, #8]
 8007c5a:	461f      	mov	r7, r3
 8007c5c:	42be      	cmp	r6, r7
 8007c5e:	680b      	ldr	r3, [r1, #0]
 8007c60:	4682      	mov	sl, r0
 8007c62:	460c      	mov	r4, r1
 8007c64:	4690      	mov	r8, r2
 8007c66:	d82c      	bhi.n	8007cc2 <__ssputs_r+0x6e>
 8007c68:	898a      	ldrh	r2, [r1, #12]
 8007c6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c6e:	d026      	beq.n	8007cbe <__ssputs_r+0x6a>
 8007c70:	6965      	ldr	r5, [r4, #20]
 8007c72:	6909      	ldr	r1, [r1, #16]
 8007c74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c78:	eba3 0901 	sub.w	r9, r3, r1
 8007c7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c80:	1c7b      	adds	r3, r7, #1
 8007c82:	444b      	add	r3, r9
 8007c84:	106d      	asrs	r5, r5, #1
 8007c86:	429d      	cmp	r5, r3
 8007c88:	bf38      	it	cc
 8007c8a:	461d      	movcc	r5, r3
 8007c8c:	0553      	lsls	r3, r2, #21
 8007c8e:	d527      	bpl.n	8007ce0 <__ssputs_r+0x8c>
 8007c90:	4629      	mov	r1, r5
 8007c92:	f7ff ff53 	bl	8007b3c <_malloc_r>
 8007c96:	4606      	mov	r6, r0
 8007c98:	b360      	cbz	r0, 8007cf4 <__ssputs_r+0xa0>
 8007c9a:	6921      	ldr	r1, [r4, #16]
 8007c9c:	464a      	mov	r2, r9
 8007c9e:	f000 faeb 	bl	8008278 <memcpy>
 8007ca2:	89a3      	ldrh	r3, [r4, #12]
 8007ca4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cac:	81a3      	strh	r3, [r4, #12]
 8007cae:	6126      	str	r6, [r4, #16]
 8007cb0:	6165      	str	r5, [r4, #20]
 8007cb2:	444e      	add	r6, r9
 8007cb4:	eba5 0509 	sub.w	r5, r5, r9
 8007cb8:	6026      	str	r6, [r4, #0]
 8007cba:	60a5      	str	r5, [r4, #8]
 8007cbc:	463e      	mov	r6, r7
 8007cbe:	42be      	cmp	r6, r7
 8007cc0:	d900      	bls.n	8007cc4 <__ssputs_r+0x70>
 8007cc2:	463e      	mov	r6, r7
 8007cc4:	6820      	ldr	r0, [r4, #0]
 8007cc6:	4632      	mov	r2, r6
 8007cc8:	4641      	mov	r1, r8
 8007cca:	f000 faab 	bl	8008224 <memmove>
 8007cce:	68a3      	ldr	r3, [r4, #8]
 8007cd0:	1b9b      	subs	r3, r3, r6
 8007cd2:	60a3      	str	r3, [r4, #8]
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	4433      	add	r3, r6
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	2000      	movs	r0, #0
 8007cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce0:	462a      	mov	r2, r5
 8007ce2:	f000 fad7 	bl	8008294 <_realloc_r>
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d1e0      	bne.n	8007cae <__ssputs_r+0x5a>
 8007cec:	6921      	ldr	r1, [r4, #16]
 8007cee:	4650      	mov	r0, sl
 8007cf0:	f7ff feb8 	bl	8007a64 <_free_r>
 8007cf4:	230c      	movs	r3, #12
 8007cf6:	f8ca 3000 	str.w	r3, [sl]
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d00:	81a3      	strh	r3, [r4, #12]
 8007d02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d06:	e7e9      	b.n	8007cdc <__ssputs_r+0x88>

08007d08 <_svfiprintf_r>:
 8007d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	4698      	mov	r8, r3
 8007d0e:	898b      	ldrh	r3, [r1, #12]
 8007d10:	061b      	lsls	r3, r3, #24
 8007d12:	b09d      	sub	sp, #116	; 0x74
 8007d14:	4607      	mov	r7, r0
 8007d16:	460d      	mov	r5, r1
 8007d18:	4614      	mov	r4, r2
 8007d1a:	d50e      	bpl.n	8007d3a <_svfiprintf_r+0x32>
 8007d1c:	690b      	ldr	r3, [r1, #16]
 8007d1e:	b963      	cbnz	r3, 8007d3a <_svfiprintf_r+0x32>
 8007d20:	2140      	movs	r1, #64	; 0x40
 8007d22:	f7ff ff0b 	bl	8007b3c <_malloc_r>
 8007d26:	6028      	str	r0, [r5, #0]
 8007d28:	6128      	str	r0, [r5, #16]
 8007d2a:	b920      	cbnz	r0, 8007d36 <_svfiprintf_r+0x2e>
 8007d2c:	230c      	movs	r3, #12
 8007d2e:	603b      	str	r3, [r7, #0]
 8007d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d34:	e0d0      	b.n	8007ed8 <_svfiprintf_r+0x1d0>
 8007d36:	2340      	movs	r3, #64	; 0x40
 8007d38:	616b      	str	r3, [r5, #20]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d3e:	2320      	movs	r3, #32
 8007d40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d44:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d48:	2330      	movs	r3, #48	; 0x30
 8007d4a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007ef0 <_svfiprintf_r+0x1e8>
 8007d4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d52:	f04f 0901 	mov.w	r9, #1
 8007d56:	4623      	mov	r3, r4
 8007d58:	469a      	mov	sl, r3
 8007d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d5e:	b10a      	cbz	r2, 8007d64 <_svfiprintf_r+0x5c>
 8007d60:	2a25      	cmp	r2, #37	; 0x25
 8007d62:	d1f9      	bne.n	8007d58 <_svfiprintf_r+0x50>
 8007d64:	ebba 0b04 	subs.w	fp, sl, r4
 8007d68:	d00b      	beq.n	8007d82 <_svfiprintf_r+0x7a>
 8007d6a:	465b      	mov	r3, fp
 8007d6c:	4622      	mov	r2, r4
 8007d6e:	4629      	mov	r1, r5
 8007d70:	4638      	mov	r0, r7
 8007d72:	f7ff ff6f 	bl	8007c54 <__ssputs_r>
 8007d76:	3001      	adds	r0, #1
 8007d78:	f000 80a9 	beq.w	8007ece <_svfiprintf_r+0x1c6>
 8007d7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d7e:	445a      	add	r2, fp
 8007d80:	9209      	str	r2, [sp, #36]	; 0x24
 8007d82:	f89a 3000 	ldrb.w	r3, [sl]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 80a1 	beq.w	8007ece <_svfiprintf_r+0x1c6>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d96:	f10a 0a01 	add.w	sl, sl, #1
 8007d9a:	9304      	str	r3, [sp, #16]
 8007d9c:	9307      	str	r3, [sp, #28]
 8007d9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007da2:	931a      	str	r3, [sp, #104]	; 0x68
 8007da4:	4654      	mov	r4, sl
 8007da6:	2205      	movs	r2, #5
 8007da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dac:	4850      	ldr	r0, [pc, #320]	; (8007ef0 <_svfiprintf_r+0x1e8>)
 8007dae:	f7f8 fa9f 	bl	80002f0 <memchr>
 8007db2:	9a04      	ldr	r2, [sp, #16]
 8007db4:	b9d8      	cbnz	r0, 8007dee <_svfiprintf_r+0xe6>
 8007db6:	06d0      	lsls	r0, r2, #27
 8007db8:	bf44      	itt	mi
 8007dba:	2320      	movmi	r3, #32
 8007dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dc0:	0711      	lsls	r1, r2, #28
 8007dc2:	bf44      	itt	mi
 8007dc4:	232b      	movmi	r3, #43	; 0x2b
 8007dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dca:	f89a 3000 	ldrb.w	r3, [sl]
 8007dce:	2b2a      	cmp	r3, #42	; 0x2a
 8007dd0:	d015      	beq.n	8007dfe <_svfiprintf_r+0xf6>
 8007dd2:	9a07      	ldr	r2, [sp, #28]
 8007dd4:	4654      	mov	r4, sl
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	f04f 0c0a 	mov.w	ip, #10
 8007ddc:	4621      	mov	r1, r4
 8007dde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007de2:	3b30      	subs	r3, #48	; 0x30
 8007de4:	2b09      	cmp	r3, #9
 8007de6:	d94d      	bls.n	8007e84 <_svfiprintf_r+0x17c>
 8007de8:	b1b0      	cbz	r0, 8007e18 <_svfiprintf_r+0x110>
 8007dea:	9207      	str	r2, [sp, #28]
 8007dec:	e014      	b.n	8007e18 <_svfiprintf_r+0x110>
 8007dee:	eba0 0308 	sub.w	r3, r0, r8
 8007df2:	fa09 f303 	lsl.w	r3, r9, r3
 8007df6:	4313      	orrs	r3, r2
 8007df8:	9304      	str	r3, [sp, #16]
 8007dfa:	46a2      	mov	sl, r4
 8007dfc:	e7d2      	b.n	8007da4 <_svfiprintf_r+0x9c>
 8007dfe:	9b03      	ldr	r3, [sp, #12]
 8007e00:	1d19      	adds	r1, r3, #4
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	9103      	str	r1, [sp, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	bfbb      	ittet	lt
 8007e0a:	425b      	neglt	r3, r3
 8007e0c:	f042 0202 	orrlt.w	r2, r2, #2
 8007e10:	9307      	strge	r3, [sp, #28]
 8007e12:	9307      	strlt	r3, [sp, #28]
 8007e14:	bfb8      	it	lt
 8007e16:	9204      	strlt	r2, [sp, #16]
 8007e18:	7823      	ldrb	r3, [r4, #0]
 8007e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8007e1c:	d10c      	bne.n	8007e38 <_svfiprintf_r+0x130>
 8007e1e:	7863      	ldrb	r3, [r4, #1]
 8007e20:	2b2a      	cmp	r3, #42	; 0x2a
 8007e22:	d134      	bne.n	8007e8e <_svfiprintf_r+0x186>
 8007e24:	9b03      	ldr	r3, [sp, #12]
 8007e26:	1d1a      	adds	r2, r3, #4
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	9203      	str	r2, [sp, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	bfb8      	it	lt
 8007e30:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e34:	3402      	adds	r4, #2
 8007e36:	9305      	str	r3, [sp, #20]
 8007e38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007f00 <_svfiprintf_r+0x1f8>
 8007e3c:	7821      	ldrb	r1, [r4, #0]
 8007e3e:	2203      	movs	r2, #3
 8007e40:	4650      	mov	r0, sl
 8007e42:	f7f8 fa55 	bl	80002f0 <memchr>
 8007e46:	b138      	cbz	r0, 8007e58 <_svfiprintf_r+0x150>
 8007e48:	9b04      	ldr	r3, [sp, #16]
 8007e4a:	eba0 000a 	sub.w	r0, r0, sl
 8007e4e:	2240      	movs	r2, #64	; 0x40
 8007e50:	4082      	lsls	r2, r0
 8007e52:	4313      	orrs	r3, r2
 8007e54:	3401      	adds	r4, #1
 8007e56:	9304      	str	r3, [sp, #16]
 8007e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e5c:	4825      	ldr	r0, [pc, #148]	; (8007ef4 <_svfiprintf_r+0x1ec>)
 8007e5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e62:	2206      	movs	r2, #6
 8007e64:	f7f8 fa44 	bl	80002f0 <memchr>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d038      	beq.n	8007ede <_svfiprintf_r+0x1d6>
 8007e6c:	4b22      	ldr	r3, [pc, #136]	; (8007ef8 <_svfiprintf_r+0x1f0>)
 8007e6e:	bb1b      	cbnz	r3, 8007eb8 <_svfiprintf_r+0x1b0>
 8007e70:	9b03      	ldr	r3, [sp, #12]
 8007e72:	3307      	adds	r3, #7
 8007e74:	f023 0307 	bic.w	r3, r3, #7
 8007e78:	3308      	adds	r3, #8
 8007e7a:	9303      	str	r3, [sp, #12]
 8007e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e7e:	4433      	add	r3, r6
 8007e80:	9309      	str	r3, [sp, #36]	; 0x24
 8007e82:	e768      	b.n	8007d56 <_svfiprintf_r+0x4e>
 8007e84:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e88:	460c      	mov	r4, r1
 8007e8a:	2001      	movs	r0, #1
 8007e8c:	e7a6      	b.n	8007ddc <_svfiprintf_r+0xd4>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	3401      	adds	r4, #1
 8007e92:	9305      	str	r3, [sp, #20]
 8007e94:	4619      	mov	r1, r3
 8007e96:	f04f 0c0a 	mov.w	ip, #10
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ea0:	3a30      	subs	r2, #48	; 0x30
 8007ea2:	2a09      	cmp	r2, #9
 8007ea4:	d903      	bls.n	8007eae <_svfiprintf_r+0x1a6>
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d0c6      	beq.n	8007e38 <_svfiprintf_r+0x130>
 8007eaa:	9105      	str	r1, [sp, #20]
 8007eac:	e7c4      	b.n	8007e38 <_svfiprintf_r+0x130>
 8007eae:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e7f0      	b.n	8007e9a <_svfiprintf_r+0x192>
 8007eb8:	ab03      	add	r3, sp, #12
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	462a      	mov	r2, r5
 8007ebe:	4b0f      	ldr	r3, [pc, #60]	; (8007efc <_svfiprintf_r+0x1f4>)
 8007ec0:	a904      	add	r1, sp, #16
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	f3af 8000 	nop.w
 8007ec8:	1c42      	adds	r2, r0, #1
 8007eca:	4606      	mov	r6, r0
 8007ecc:	d1d6      	bne.n	8007e7c <_svfiprintf_r+0x174>
 8007ece:	89ab      	ldrh	r3, [r5, #12]
 8007ed0:	065b      	lsls	r3, r3, #25
 8007ed2:	f53f af2d 	bmi.w	8007d30 <_svfiprintf_r+0x28>
 8007ed6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ed8:	b01d      	add	sp, #116	; 0x74
 8007eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ede:	ab03      	add	r3, sp, #12
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	462a      	mov	r2, r5
 8007ee4:	4b05      	ldr	r3, [pc, #20]	; (8007efc <_svfiprintf_r+0x1f4>)
 8007ee6:	a904      	add	r1, sp, #16
 8007ee8:	4638      	mov	r0, r7
 8007eea:	f000 f879 	bl	8007fe0 <_printf_i>
 8007eee:	e7eb      	b.n	8007ec8 <_svfiprintf_r+0x1c0>
 8007ef0:	0800838c 	.word	0x0800838c
 8007ef4:	08008396 	.word	0x08008396
 8007ef8:	00000000 	.word	0x00000000
 8007efc:	08007c55 	.word	0x08007c55
 8007f00:	08008392 	.word	0x08008392

08007f04 <_printf_common>:
 8007f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f08:	4616      	mov	r6, r2
 8007f0a:	4699      	mov	r9, r3
 8007f0c:	688a      	ldr	r2, [r1, #8]
 8007f0e:	690b      	ldr	r3, [r1, #16]
 8007f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f14:	4293      	cmp	r3, r2
 8007f16:	bfb8      	it	lt
 8007f18:	4613      	movlt	r3, r2
 8007f1a:	6033      	str	r3, [r6, #0]
 8007f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f20:	4607      	mov	r7, r0
 8007f22:	460c      	mov	r4, r1
 8007f24:	b10a      	cbz	r2, 8007f2a <_printf_common+0x26>
 8007f26:	3301      	adds	r3, #1
 8007f28:	6033      	str	r3, [r6, #0]
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	0699      	lsls	r1, r3, #26
 8007f2e:	bf42      	ittt	mi
 8007f30:	6833      	ldrmi	r3, [r6, #0]
 8007f32:	3302      	addmi	r3, #2
 8007f34:	6033      	strmi	r3, [r6, #0]
 8007f36:	6825      	ldr	r5, [r4, #0]
 8007f38:	f015 0506 	ands.w	r5, r5, #6
 8007f3c:	d106      	bne.n	8007f4c <_printf_common+0x48>
 8007f3e:	f104 0a19 	add.w	sl, r4, #25
 8007f42:	68e3      	ldr	r3, [r4, #12]
 8007f44:	6832      	ldr	r2, [r6, #0]
 8007f46:	1a9b      	subs	r3, r3, r2
 8007f48:	42ab      	cmp	r3, r5
 8007f4a:	dc26      	bgt.n	8007f9a <_printf_common+0x96>
 8007f4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f50:	1e13      	subs	r3, r2, #0
 8007f52:	6822      	ldr	r2, [r4, #0]
 8007f54:	bf18      	it	ne
 8007f56:	2301      	movne	r3, #1
 8007f58:	0692      	lsls	r2, r2, #26
 8007f5a:	d42b      	bmi.n	8007fb4 <_printf_common+0xb0>
 8007f5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f60:	4649      	mov	r1, r9
 8007f62:	4638      	mov	r0, r7
 8007f64:	47c0      	blx	r8
 8007f66:	3001      	adds	r0, #1
 8007f68:	d01e      	beq.n	8007fa8 <_printf_common+0xa4>
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	6922      	ldr	r2, [r4, #16]
 8007f6e:	f003 0306 	and.w	r3, r3, #6
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	bf02      	ittt	eq
 8007f76:	68e5      	ldreq	r5, [r4, #12]
 8007f78:	6833      	ldreq	r3, [r6, #0]
 8007f7a:	1aed      	subeq	r5, r5, r3
 8007f7c:	68a3      	ldr	r3, [r4, #8]
 8007f7e:	bf0c      	ite	eq
 8007f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f84:	2500      	movne	r5, #0
 8007f86:	4293      	cmp	r3, r2
 8007f88:	bfc4      	itt	gt
 8007f8a:	1a9b      	subgt	r3, r3, r2
 8007f8c:	18ed      	addgt	r5, r5, r3
 8007f8e:	2600      	movs	r6, #0
 8007f90:	341a      	adds	r4, #26
 8007f92:	42b5      	cmp	r5, r6
 8007f94:	d11a      	bne.n	8007fcc <_printf_common+0xc8>
 8007f96:	2000      	movs	r0, #0
 8007f98:	e008      	b.n	8007fac <_printf_common+0xa8>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	4652      	mov	r2, sl
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	47c0      	blx	r8
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	d103      	bne.n	8007fb0 <_printf_common+0xac>
 8007fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb0:	3501      	adds	r5, #1
 8007fb2:	e7c6      	b.n	8007f42 <_printf_common+0x3e>
 8007fb4:	18e1      	adds	r1, r4, r3
 8007fb6:	1c5a      	adds	r2, r3, #1
 8007fb8:	2030      	movs	r0, #48	; 0x30
 8007fba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fbe:	4422      	add	r2, r4
 8007fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fc8:	3302      	adds	r3, #2
 8007fca:	e7c7      	b.n	8007f5c <_printf_common+0x58>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	4622      	mov	r2, r4
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	47c0      	blx	r8
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	d0e6      	beq.n	8007fa8 <_printf_common+0xa4>
 8007fda:	3601      	adds	r6, #1
 8007fdc:	e7d9      	b.n	8007f92 <_printf_common+0x8e>
	...

08007fe0 <_printf_i>:
 8007fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fe4:	7e0f      	ldrb	r7, [r1, #24]
 8007fe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fe8:	2f78      	cmp	r7, #120	; 0x78
 8007fea:	4691      	mov	r9, r2
 8007fec:	4680      	mov	r8, r0
 8007fee:	460c      	mov	r4, r1
 8007ff0:	469a      	mov	sl, r3
 8007ff2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ff6:	d807      	bhi.n	8008008 <_printf_i+0x28>
 8007ff8:	2f62      	cmp	r7, #98	; 0x62
 8007ffa:	d80a      	bhi.n	8008012 <_printf_i+0x32>
 8007ffc:	2f00      	cmp	r7, #0
 8007ffe:	f000 80d4 	beq.w	80081aa <_printf_i+0x1ca>
 8008002:	2f58      	cmp	r7, #88	; 0x58
 8008004:	f000 80c0 	beq.w	8008188 <_printf_i+0x1a8>
 8008008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800800c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008010:	e03a      	b.n	8008088 <_printf_i+0xa8>
 8008012:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008016:	2b15      	cmp	r3, #21
 8008018:	d8f6      	bhi.n	8008008 <_printf_i+0x28>
 800801a:	a101      	add	r1, pc, #4	; (adr r1, 8008020 <_printf_i+0x40>)
 800801c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008020:	08008079 	.word	0x08008079
 8008024:	0800808d 	.word	0x0800808d
 8008028:	08008009 	.word	0x08008009
 800802c:	08008009 	.word	0x08008009
 8008030:	08008009 	.word	0x08008009
 8008034:	08008009 	.word	0x08008009
 8008038:	0800808d 	.word	0x0800808d
 800803c:	08008009 	.word	0x08008009
 8008040:	08008009 	.word	0x08008009
 8008044:	08008009 	.word	0x08008009
 8008048:	08008009 	.word	0x08008009
 800804c:	08008191 	.word	0x08008191
 8008050:	080080b9 	.word	0x080080b9
 8008054:	0800814b 	.word	0x0800814b
 8008058:	08008009 	.word	0x08008009
 800805c:	08008009 	.word	0x08008009
 8008060:	080081b3 	.word	0x080081b3
 8008064:	08008009 	.word	0x08008009
 8008068:	080080b9 	.word	0x080080b9
 800806c:	08008009 	.word	0x08008009
 8008070:	08008009 	.word	0x08008009
 8008074:	08008153 	.word	0x08008153
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	1d1a      	adds	r2, r3, #4
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	602a      	str	r2, [r5, #0]
 8008080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008088:	2301      	movs	r3, #1
 800808a:	e09f      	b.n	80081cc <_printf_i+0x1ec>
 800808c:	6820      	ldr	r0, [r4, #0]
 800808e:	682b      	ldr	r3, [r5, #0]
 8008090:	0607      	lsls	r7, r0, #24
 8008092:	f103 0104 	add.w	r1, r3, #4
 8008096:	6029      	str	r1, [r5, #0]
 8008098:	d501      	bpl.n	800809e <_printf_i+0xbe>
 800809a:	681e      	ldr	r6, [r3, #0]
 800809c:	e003      	b.n	80080a6 <_printf_i+0xc6>
 800809e:	0646      	lsls	r6, r0, #25
 80080a0:	d5fb      	bpl.n	800809a <_printf_i+0xba>
 80080a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80080a6:	2e00      	cmp	r6, #0
 80080a8:	da03      	bge.n	80080b2 <_printf_i+0xd2>
 80080aa:	232d      	movs	r3, #45	; 0x2d
 80080ac:	4276      	negs	r6, r6
 80080ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080b2:	485a      	ldr	r0, [pc, #360]	; (800821c <_printf_i+0x23c>)
 80080b4:	230a      	movs	r3, #10
 80080b6:	e012      	b.n	80080de <_printf_i+0xfe>
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	6820      	ldr	r0, [r4, #0]
 80080bc:	1d19      	adds	r1, r3, #4
 80080be:	6029      	str	r1, [r5, #0]
 80080c0:	0605      	lsls	r5, r0, #24
 80080c2:	d501      	bpl.n	80080c8 <_printf_i+0xe8>
 80080c4:	681e      	ldr	r6, [r3, #0]
 80080c6:	e002      	b.n	80080ce <_printf_i+0xee>
 80080c8:	0641      	lsls	r1, r0, #25
 80080ca:	d5fb      	bpl.n	80080c4 <_printf_i+0xe4>
 80080cc:	881e      	ldrh	r6, [r3, #0]
 80080ce:	4853      	ldr	r0, [pc, #332]	; (800821c <_printf_i+0x23c>)
 80080d0:	2f6f      	cmp	r7, #111	; 0x6f
 80080d2:	bf0c      	ite	eq
 80080d4:	2308      	moveq	r3, #8
 80080d6:	230a      	movne	r3, #10
 80080d8:	2100      	movs	r1, #0
 80080da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080de:	6865      	ldr	r5, [r4, #4]
 80080e0:	60a5      	str	r5, [r4, #8]
 80080e2:	2d00      	cmp	r5, #0
 80080e4:	bfa2      	ittt	ge
 80080e6:	6821      	ldrge	r1, [r4, #0]
 80080e8:	f021 0104 	bicge.w	r1, r1, #4
 80080ec:	6021      	strge	r1, [r4, #0]
 80080ee:	b90e      	cbnz	r6, 80080f4 <_printf_i+0x114>
 80080f0:	2d00      	cmp	r5, #0
 80080f2:	d04b      	beq.n	800818c <_printf_i+0x1ac>
 80080f4:	4615      	mov	r5, r2
 80080f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80080fa:	fb03 6711 	mls	r7, r3, r1, r6
 80080fe:	5dc7      	ldrb	r7, [r0, r7]
 8008100:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008104:	4637      	mov	r7, r6
 8008106:	42bb      	cmp	r3, r7
 8008108:	460e      	mov	r6, r1
 800810a:	d9f4      	bls.n	80080f6 <_printf_i+0x116>
 800810c:	2b08      	cmp	r3, #8
 800810e:	d10b      	bne.n	8008128 <_printf_i+0x148>
 8008110:	6823      	ldr	r3, [r4, #0]
 8008112:	07de      	lsls	r6, r3, #31
 8008114:	d508      	bpl.n	8008128 <_printf_i+0x148>
 8008116:	6923      	ldr	r3, [r4, #16]
 8008118:	6861      	ldr	r1, [r4, #4]
 800811a:	4299      	cmp	r1, r3
 800811c:	bfde      	ittt	le
 800811e:	2330      	movle	r3, #48	; 0x30
 8008120:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008124:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008128:	1b52      	subs	r2, r2, r5
 800812a:	6122      	str	r2, [r4, #16]
 800812c:	f8cd a000 	str.w	sl, [sp]
 8008130:	464b      	mov	r3, r9
 8008132:	aa03      	add	r2, sp, #12
 8008134:	4621      	mov	r1, r4
 8008136:	4640      	mov	r0, r8
 8008138:	f7ff fee4 	bl	8007f04 <_printf_common>
 800813c:	3001      	adds	r0, #1
 800813e:	d14a      	bne.n	80081d6 <_printf_i+0x1f6>
 8008140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008144:	b004      	add	sp, #16
 8008146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	f043 0320 	orr.w	r3, r3, #32
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	4833      	ldr	r0, [pc, #204]	; (8008220 <_printf_i+0x240>)
 8008154:	2778      	movs	r7, #120	; 0x78
 8008156:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800815a:	6823      	ldr	r3, [r4, #0]
 800815c:	6829      	ldr	r1, [r5, #0]
 800815e:	061f      	lsls	r7, r3, #24
 8008160:	f851 6b04 	ldr.w	r6, [r1], #4
 8008164:	d402      	bmi.n	800816c <_printf_i+0x18c>
 8008166:	065f      	lsls	r7, r3, #25
 8008168:	bf48      	it	mi
 800816a:	b2b6      	uxthmi	r6, r6
 800816c:	07df      	lsls	r7, r3, #31
 800816e:	bf48      	it	mi
 8008170:	f043 0320 	orrmi.w	r3, r3, #32
 8008174:	6029      	str	r1, [r5, #0]
 8008176:	bf48      	it	mi
 8008178:	6023      	strmi	r3, [r4, #0]
 800817a:	b91e      	cbnz	r6, 8008184 <_printf_i+0x1a4>
 800817c:	6823      	ldr	r3, [r4, #0]
 800817e:	f023 0320 	bic.w	r3, r3, #32
 8008182:	6023      	str	r3, [r4, #0]
 8008184:	2310      	movs	r3, #16
 8008186:	e7a7      	b.n	80080d8 <_printf_i+0xf8>
 8008188:	4824      	ldr	r0, [pc, #144]	; (800821c <_printf_i+0x23c>)
 800818a:	e7e4      	b.n	8008156 <_printf_i+0x176>
 800818c:	4615      	mov	r5, r2
 800818e:	e7bd      	b.n	800810c <_printf_i+0x12c>
 8008190:	682b      	ldr	r3, [r5, #0]
 8008192:	6826      	ldr	r6, [r4, #0]
 8008194:	6961      	ldr	r1, [r4, #20]
 8008196:	1d18      	adds	r0, r3, #4
 8008198:	6028      	str	r0, [r5, #0]
 800819a:	0635      	lsls	r5, r6, #24
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	d501      	bpl.n	80081a4 <_printf_i+0x1c4>
 80081a0:	6019      	str	r1, [r3, #0]
 80081a2:	e002      	b.n	80081aa <_printf_i+0x1ca>
 80081a4:	0670      	lsls	r0, r6, #25
 80081a6:	d5fb      	bpl.n	80081a0 <_printf_i+0x1c0>
 80081a8:	8019      	strh	r1, [r3, #0]
 80081aa:	2300      	movs	r3, #0
 80081ac:	6123      	str	r3, [r4, #16]
 80081ae:	4615      	mov	r5, r2
 80081b0:	e7bc      	b.n	800812c <_printf_i+0x14c>
 80081b2:	682b      	ldr	r3, [r5, #0]
 80081b4:	1d1a      	adds	r2, r3, #4
 80081b6:	602a      	str	r2, [r5, #0]
 80081b8:	681d      	ldr	r5, [r3, #0]
 80081ba:	6862      	ldr	r2, [r4, #4]
 80081bc:	2100      	movs	r1, #0
 80081be:	4628      	mov	r0, r5
 80081c0:	f7f8 f896 	bl	80002f0 <memchr>
 80081c4:	b108      	cbz	r0, 80081ca <_printf_i+0x1ea>
 80081c6:	1b40      	subs	r0, r0, r5
 80081c8:	6060      	str	r0, [r4, #4]
 80081ca:	6863      	ldr	r3, [r4, #4]
 80081cc:	6123      	str	r3, [r4, #16]
 80081ce:	2300      	movs	r3, #0
 80081d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081d4:	e7aa      	b.n	800812c <_printf_i+0x14c>
 80081d6:	6923      	ldr	r3, [r4, #16]
 80081d8:	462a      	mov	r2, r5
 80081da:	4649      	mov	r1, r9
 80081dc:	4640      	mov	r0, r8
 80081de:	47d0      	blx	sl
 80081e0:	3001      	adds	r0, #1
 80081e2:	d0ad      	beq.n	8008140 <_printf_i+0x160>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	079b      	lsls	r3, r3, #30
 80081e8:	d413      	bmi.n	8008212 <_printf_i+0x232>
 80081ea:	68e0      	ldr	r0, [r4, #12]
 80081ec:	9b03      	ldr	r3, [sp, #12]
 80081ee:	4298      	cmp	r0, r3
 80081f0:	bfb8      	it	lt
 80081f2:	4618      	movlt	r0, r3
 80081f4:	e7a6      	b.n	8008144 <_printf_i+0x164>
 80081f6:	2301      	movs	r3, #1
 80081f8:	4632      	mov	r2, r6
 80081fa:	4649      	mov	r1, r9
 80081fc:	4640      	mov	r0, r8
 80081fe:	47d0      	blx	sl
 8008200:	3001      	adds	r0, #1
 8008202:	d09d      	beq.n	8008140 <_printf_i+0x160>
 8008204:	3501      	adds	r5, #1
 8008206:	68e3      	ldr	r3, [r4, #12]
 8008208:	9903      	ldr	r1, [sp, #12]
 800820a:	1a5b      	subs	r3, r3, r1
 800820c:	42ab      	cmp	r3, r5
 800820e:	dcf2      	bgt.n	80081f6 <_printf_i+0x216>
 8008210:	e7eb      	b.n	80081ea <_printf_i+0x20a>
 8008212:	2500      	movs	r5, #0
 8008214:	f104 0619 	add.w	r6, r4, #25
 8008218:	e7f5      	b.n	8008206 <_printf_i+0x226>
 800821a:	bf00      	nop
 800821c:	0800839d 	.word	0x0800839d
 8008220:	080083ae 	.word	0x080083ae

08008224 <memmove>:
 8008224:	4288      	cmp	r0, r1
 8008226:	b510      	push	{r4, lr}
 8008228:	eb01 0402 	add.w	r4, r1, r2
 800822c:	d902      	bls.n	8008234 <memmove+0x10>
 800822e:	4284      	cmp	r4, r0
 8008230:	4623      	mov	r3, r4
 8008232:	d807      	bhi.n	8008244 <memmove+0x20>
 8008234:	1e43      	subs	r3, r0, #1
 8008236:	42a1      	cmp	r1, r4
 8008238:	d008      	beq.n	800824c <memmove+0x28>
 800823a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800823e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008242:	e7f8      	b.n	8008236 <memmove+0x12>
 8008244:	4402      	add	r2, r0
 8008246:	4601      	mov	r1, r0
 8008248:	428a      	cmp	r2, r1
 800824a:	d100      	bne.n	800824e <memmove+0x2a>
 800824c:	bd10      	pop	{r4, pc}
 800824e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008252:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008256:	e7f7      	b.n	8008248 <memmove+0x24>

08008258 <_sbrk_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	4d06      	ldr	r5, [pc, #24]	; (8008274 <_sbrk_r+0x1c>)
 800825c:	2300      	movs	r3, #0
 800825e:	4604      	mov	r4, r0
 8008260:	4608      	mov	r0, r1
 8008262:	602b      	str	r3, [r5, #0]
 8008264:	f7f8 fcf0 	bl	8000c48 <_sbrk>
 8008268:	1c43      	adds	r3, r0, #1
 800826a:	d102      	bne.n	8008272 <_sbrk_r+0x1a>
 800826c:	682b      	ldr	r3, [r5, #0]
 800826e:	b103      	cbz	r3, 8008272 <_sbrk_r+0x1a>
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	bd38      	pop	{r3, r4, r5, pc}
 8008274:	2400033c 	.word	0x2400033c

08008278 <memcpy>:
 8008278:	440a      	add	r2, r1
 800827a:	4291      	cmp	r1, r2
 800827c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008280:	d100      	bne.n	8008284 <memcpy+0xc>
 8008282:	4770      	bx	lr
 8008284:	b510      	push	{r4, lr}
 8008286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800828a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800828e:	4291      	cmp	r1, r2
 8008290:	d1f9      	bne.n	8008286 <memcpy+0xe>
 8008292:	bd10      	pop	{r4, pc}

08008294 <_realloc_r>:
 8008294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008298:	4680      	mov	r8, r0
 800829a:	4614      	mov	r4, r2
 800829c:	460e      	mov	r6, r1
 800829e:	b921      	cbnz	r1, 80082aa <_realloc_r+0x16>
 80082a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082a4:	4611      	mov	r1, r2
 80082a6:	f7ff bc49 	b.w	8007b3c <_malloc_r>
 80082aa:	b92a      	cbnz	r2, 80082b8 <_realloc_r+0x24>
 80082ac:	f7ff fbda 	bl	8007a64 <_free_r>
 80082b0:	4625      	mov	r5, r4
 80082b2:	4628      	mov	r0, r5
 80082b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082b8:	f000 f81b 	bl	80082f2 <_malloc_usable_size_r>
 80082bc:	4284      	cmp	r4, r0
 80082be:	4607      	mov	r7, r0
 80082c0:	d802      	bhi.n	80082c8 <_realloc_r+0x34>
 80082c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082c6:	d812      	bhi.n	80082ee <_realloc_r+0x5a>
 80082c8:	4621      	mov	r1, r4
 80082ca:	4640      	mov	r0, r8
 80082cc:	f7ff fc36 	bl	8007b3c <_malloc_r>
 80082d0:	4605      	mov	r5, r0
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d0ed      	beq.n	80082b2 <_realloc_r+0x1e>
 80082d6:	42bc      	cmp	r4, r7
 80082d8:	4622      	mov	r2, r4
 80082da:	4631      	mov	r1, r6
 80082dc:	bf28      	it	cs
 80082de:	463a      	movcs	r2, r7
 80082e0:	f7ff ffca 	bl	8008278 <memcpy>
 80082e4:	4631      	mov	r1, r6
 80082e6:	4640      	mov	r0, r8
 80082e8:	f7ff fbbc 	bl	8007a64 <_free_r>
 80082ec:	e7e1      	b.n	80082b2 <_realloc_r+0x1e>
 80082ee:	4635      	mov	r5, r6
 80082f0:	e7df      	b.n	80082b2 <_realloc_r+0x1e>

080082f2 <_malloc_usable_size_r>:
 80082f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082f6:	1f18      	subs	r0, r3, #4
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	bfbc      	itt	lt
 80082fc:	580b      	ldrlt	r3, [r1, r0]
 80082fe:	18c0      	addlt	r0, r0, r3
 8008300:	4770      	bx	lr
	...

08008304 <_init>:
 8008304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008306:	bf00      	nop
 8008308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800830a:	bc08      	pop	{r3}
 800830c:	469e      	mov	lr, r3
 800830e:	4770      	bx	lr

08008310 <_fini>:
 8008310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008312:	bf00      	nop
 8008314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008316:	bc08      	pop	{r3}
 8008318:	469e      	mov	lr, r3
 800831a:	4770      	bx	lr
