
RECEPTION_UART_H7A3ZIQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090e4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08009394  08009394  00019394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009438  08009438  00019438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009440  08009440  00019440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009444  08009444  00019444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08009448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000200  24000074  080094bc  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000274  080094bc  00020274  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017a1d  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b54  00000000  00000000  00037abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001138  00000000  00000000  0003a618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001010  00000000  00000000  0003b750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00003c1b  00000000  00000000  0003c760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000198c0  00000000  00000000  0004037b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013f26a  00000000  00000000  00059c3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00198ea5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004bcc  00000000  00000000  00198ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800937c 	.word	0x0800937c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	0800937c 	.word	0x0800937c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <RPICom_Init>:

//uint8_t uartRpiRxBuffer[UART_RPI_RX_BUFFER_SIZE];
//commandMsg binaryMessage;
RPICom_HandleTypeDef hRPICom;

void RPICom_Init(UART_HandleTypeDef* huart, UART_HandleTypeDef* huartDebug){
 8000694:	b5b0      	push	{r4, r5, r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
	hRPICom.huart = huart;
 800069e:	4a18      	ldr	r2, [pc, #96]	; (8000700 <RPICom_Init+0x6c>)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6013      	str	r3, [r2, #0]
	hRPICom.huartDebug = huartDebug;
 80006a4:	4a16      	ldr	r2, [pc, #88]	; (8000700 <RPICom_Init+0x6c>)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	6053      	str	r3, [r2, #4]
	memcpy(&(hRPICom.binaryMessage), NULL, sizeof(commandMsg));
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <RPICom_Init+0x6c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	3308      	adds	r3, #8
 80006b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b4:	6018      	str	r0, [r3, #0]
 80006b6:	3304      	adds	r3, #4
 80006b8:	8019      	strh	r1, [r3, #0]
	hRPICom.errorNumber = 0;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <RPICom_Init+0x6c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	739a      	strb	r2, [r3, #14]
	memcpy(hRPICom.RxBuffer, NULL, UART_RPI_RX_BUFFER_SIZE);
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <RPICom_Init+0x6c>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	f103 020f 	add.w	r2, r3, #15
 80006c8:	460b      	mov	r3, r1
 80006ca:	cb03      	ldmia	r3!, {r0, r1}
 80006cc:	6010      	str	r0, [r2, #0]
 80006ce:	6051      	str	r1, [r2, #4]
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	7213      	strb	r3, [r2, #8]
	memcpy(hRPICom.TxBuffer, NULL, UART_RPI_TX_BUFFER_SIZE);
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <RPICom_Init+0x6c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	f103 0418 	add.w	r4, r3, #24
 80006dc:	4615      	mov	r5, r2
 80006de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	RPICom_UartActivate(&hRPICom);
 80006f2:	4803      	ldr	r0, [pc, #12]	; (8000700 <RPICom_Init+0x6c>)
 80006f4:	f000 f806 	bl	8000704 <RPICom_UartActivate>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000700:	24000090 	.word	0x24000090

08000704 <RPICom_UartActivate>:

void RPICom_UartActivate(RPICom_HandleTypeDef* hRPI){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(hRPI->huart, hRPI->RxBuffer, UART_RPI_RX_BUFFER_SIZE);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	330f      	adds	r3, #15
 8000714:	2209      	movs	r2, #9
 8000716:	4619      	mov	r1, r3
 8000718:	f005 fd2e 	bl	8006178 <HAL_UART_Receive_IT>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <checkSum>:

uint8_t checkSum(void){
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
	uint8_t checkSum = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < UART_RPI_RX_BUFFER_SIZE-1; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	e00a      	b.n	800074a <checkSum+0x26>
		checkSum ^= hRPICom.RxBuffer[i];
 8000734:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <checkSum+0x3c>)
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	4413      	add	r3, r2
 800073a:	330f      	adds	r3, #15
 800073c:	781a      	ldrb	r2, [r3, #0]
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	4053      	eors	r3, r2
 8000742:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < UART_RPI_RX_BUFFER_SIZE-1; i++) { //Il ne faut pas prendre en compte le bit ou checkSum est present
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	2b07      	cmp	r3, #7
 800074e:	ddf1      	ble.n	8000734 <checkSum+0x10>
	}
	return checkSum;
 8000750:	79fb      	ldrb	r3, [r7, #7]
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	24000090 	.word	0x24000090

08000764 <RPICom_DecodeBinaryMessage>:

void RPICom_DecodeBinaryMessage(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af02      	add	r7, sp, #8
	hRPICom.errorNumber = '0';
 800076a:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 800076c:	2230      	movs	r2, #48	; 0x30
 800076e:	739a      	strb	r2, [r3, #14]
	// Check Header
	if (HEADER_CheckValue1 != hRPICom.RxBuffer[0] || HEADER_CheckValue2 != hRPICom.RxBuffer[1]){//On envoie une erreur à la raspberry
 8000770:	4b29      	ldr	r3, [pc, #164]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 8000772:	7bdb      	ldrb	r3, [r3, #15]
 8000774:	2bff      	cmp	r3, #255	; 0xff
 8000776:	d103      	bne.n	8000780 <RPICom_DecodeBinaryMessage+0x1c>
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 800077a:	7c1b      	ldrb	r3, [r3, #16]
 800077c:	2bfe      	cmp	r3, #254	; 0xfe
 800077e:	d002      	beq.n	8000786 <RPICom_DecodeBinaryMessage+0x22>
		hRPICom.errorNumber ='1';
 8000780:	4b25      	ldr	r3, [pc, #148]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 8000782:	2231      	movs	r2, #49	; 0x31
 8000784:	739a      	strb	r2, [r3, #14]
	}
	// Check Length
	if (UART_RPI_RX_BUFFER_SIZE != hRPICom.RxBuffer[2]){// Il nous manque des informations
 8000786:	4b24      	ldr	r3, [pc, #144]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 8000788:	7c5b      	ldrb	r3, [r3, #17]
 800078a:	2b09      	cmp	r3, #9
 800078c:	d002      	beq.n	8000794 <RPICom_DecodeBinaryMessage+0x30>
		hRPICom.errorNumber='2';
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 8000790:	2232      	movs	r2, #50	; 0x32
 8000792:	739a      	strb	r2, [r3, #14]
	}

	hRPICom.binaryMessage.thrust = hRPICom.RxBuffer[3];
 8000794:	4b20      	ldr	r3, [pc, #128]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 8000796:	7c9a      	ldrb	r2, [r3, #18]
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 800079a:	721a      	strb	r2, [r3, #8]
	hRPICom.binaryMessage.angle = hRPICom.RxBuffer[4];
 800079c:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 800079e:	7cdb      	ldrb	r3, [r3, #19]
 80007a0:	b25a      	sxtb	r2, r3
 80007a2:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 80007a4:	725a      	strb	r2, [r3, #9]
	hRPICom.binaryMessage.depth = ((uint16_t)hRPICom.RxBuffer[5]+(uint16_t)(hRPICom.RxBuffer[6]<<8));
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 80007a8:	7d1b      	ldrb	r3, [r3, #20]
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 80007ae:	7d5b      	ldrb	r3, [r3, #21]
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	4413      	add	r3, r2
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 80007bc:	815a      	strh	r2, [r3, #10]
	hRPICom.binaryMessage.paquetNumber = hRPICom.RxBuffer[7];
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 80007c0:	7d9a      	ldrb	r2, [r3, #22]
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 80007c4:	731a      	strb	r2, [r3, #12]

	//Checksum
	if(checkSum() !=  hRPICom.RxBuffer[8]){
 80007c6:	f7ff ffad 	bl	8000724 <checkSum>
 80007ca:	4603      	mov	r3, r0
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 80007d0:	7ddb      	ldrb	r3, [r3, #23]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d002      	beq.n	80007dc <RPICom_DecodeBinaryMessage+0x78>
		hRPICom.errorNumber='3';
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 80007d8:	2233      	movs	r2, #51	; 0x33
 80007da:	739a      	strb	r2, [r3, #14]
	}

	//Response RPI
	uint8_t stringLength = snprintf((char *)hRPICom.TxBuffer, UART_RPI_TX_BUFFER_SIZE, "Paquet: %u\r\nStatut: %c\r\n", hRPICom.binaryMessage.paquetNumber,hRPICom.errorNumber);
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 80007de:	7b1b      	ldrb	r3, [r3, #12]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 80007e4:	7b9b      	ldrb	r3, [r3, #14]
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	4613      	mov	r3, r2
 80007ea:	4a0c      	ldr	r2, [pc, #48]	; (800081c <RPICom_DecodeBinaryMessage+0xb8>)
 80007ec:	2140      	movs	r1, #64	; 0x40
 80007ee:	480c      	ldr	r0, [pc, #48]	; (8000820 <RPICom_DecodeBinaryMessage+0xbc>)
 80007f0:	f008 f942 	bl	8008a78 <sniprintf>
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(hRPICom.huartDebug, hRPICom.TxBuffer, stringLength, 10);
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 80007fa:	6858      	ldr	r0, [r3, #4]
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	230a      	movs	r3, #10
 8000802:	4907      	ldr	r1, [pc, #28]	; (8000820 <RPICom_DecodeBinaryMessage+0xbc>)
 8000804:	f005 fc2a 	bl	800605c <HAL_UART_Transmit>
	RPICom_UartActivate(&hRPICom);
 8000808:	4803      	ldr	r0, [pc, #12]	; (8000818 <RPICom_DecodeBinaryMessage+0xb4>)
 800080a:	f7ff ff7b 	bl	8000704 <RPICom_UartActivate>
	// Vous avez maintenant un message complet dans la structure BinaryMessage
	// Vous pouvez faire quelque chose avec ces données, par exemple, appeler une fonction de traitement


	//Process(&binaryMessage);
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	24000090 	.word	0x24000090
 800081c:	08009394 	.word	0x08009394
 8000820:	240000a8 	.word	0x240000a8

08000824 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08e      	sub	sp, #56	; 0x38
 8000828:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	4b80      	ldr	r3, [pc, #512]	; (8000a3c <MX_GPIO_Init+0x218>)
 800083c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000840:	4a7e      	ldr	r2, [pc, #504]	; (8000a3c <MX_GPIO_Init+0x218>)
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800084a:	4b7c      	ldr	r3, [pc, #496]	; (8000a3c <MX_GPIO_Init+0x218>)
 800084c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	623b      	str	r3, [r7, #32]
 8000856:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000858:	4b78      	ldr	r3, [pc, #480]	; (8000a3c <MX_GPIO_Init+0x218>)
 800085a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800085e:	4a77      	ldr	r2, [pc, #476]	; (8000a3c <MX_GPIO_Init+0x218>)
 8000860:	f043 0320 	orr.w	r3, r3, #32
 8000864:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000868:	4b74      	ldr	r3, [pc, #464]	; (8000a3c <MX_GPIO_Init+0x218>)
 800086a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800086e:	f003 0320 	and.w	r3, r3, #32
 8000872:	61fb      	str	r3, [r7, #28]
 8000874:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	4b71      	ldr	r3, [pc, #452]	; (8000a3c <MX_GPIO_Init+0x218>)
 8000878:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800087c:	4a6f      	ldr	r2, [pc, #444]	; (8000a3c <MX_GPIO_Init+0x218>)
 800087e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000882:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000886:	4b6d      	ldr	r3, [pc, #436]	; (8000a3c <MX_GPIO_Init+0x218>)
 8000888:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000890:	61bb      	str	r3, [r7, #24]
 8000892:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	4b69      	ldr	r3, [pc, #420]	; (8000a3c <MX_GPIO_Init+0x218>)
 8000896:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089a:	4a68      	ldr	r2, [pc, #416]	; (8000a3c <MX_GPIO_Init+0x218>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008a4:	4b65      	ldr	r3, [pc, #404]	; (8000a3c <MX_GPIO_Init+0x218>)
 80008a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b62      	ldr	r3, [pc, #392]	; (8000a3c <MX_GPIO_Init+0x218>)
 80008b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b8:	4a60      	ldr	r2, [pc, #384]	; (8000a3c <MX_GPIO_Init+0x218>)
 80008ba:	f043 0302 	orr.w	r3, r3, #2
 80008be:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008c2:	4b5e      	ldr	r3, [pc, #376]	; (8000a3c <MX_GPIO_Init+0x218>)
 80008c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c8:	f003 0302 	and.w	r3, r3, #2
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d0:	4b5a      	ldr	r3, [pc, #360]	; (8000a3c <MX_GPIO_Init+0x218>)
 80008d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008d6:	4a59      	ldr	r2, [pc, #356]	; (8000a3c <MX_GPIO_Init+0x218>)
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008e0:	4b56      	ldr	r3, [pc, #344]	; (8000a3c <MX_GPIO_Init+0x218>)
 80008e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008e6:	f003 0308 	and.w	r3, r3, #8
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ee:	4b53      	ldr	r3, [pc, #332]	; (8000a3c <MX_GPIO_Init+0x218>)
 80008f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f4:	4a51      	ldr	r2, [pc, #324]	; (8000a3c <MX_GPIO_Init+0x218>)
 80008f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008fa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008fe:	4b4f      	ldr	r3, [pc, #316]	; (8000a3c <MX_GPIO_Init+0x218>)
 8000900:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800090c:	4b4b      	ldr	r3, [pc, #300]	; (8000a3c <MX_GPIO_Init+0x218>)
 800090e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000912:	4a4a      	ldr	r2, [pc, #296]	; (8000a3c <MX_GPIO_Init+0x218>)
 8000914:	f043 0310 	orr.w	r3, r3, #16
 8000918:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800091c:	4b47      	ldr	r3, [pc, #284]	; (8000a3c <MX_GPIO_Init+0x218>)
 800091e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000922:	f003 0310 	and.w	r3, r3, #16
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000930:	4843      	ldr	r0, [pc, #268]	; (8000a40 <MX_GPIO_Init+0x21c>)
 8000932:	f001 fdb7 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f244 0101 	movw	r1, #16385	; 0x4001
 800093c:	4841      	ldr	r0, [pc, #260]	; (8000a44 <MX_GPIO_Init+0x220>)
 800093e:	f001 fdb1 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2102      	movs	r1, #2
 8000946:	4840      	ldr	r0, [pc, #256]	; (8000a48 <MX_GPIO_Init+0x224>)
 8000948:	f001 fdac 	bl	80024a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800094c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095e:	4619      	mov	r1, r3
 8000960:	483a      	ldr	r0, [pc, #232]	; (8000a4c <MX_GPIO_Init+0x228>)
 8000962:	f001 fbef 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097c:	4619      	mov	r1, r3
 800097e:	4830      	ldr	r0, [pc, #192]	; (8000a40 <MX_GPIO_Init+0x21c>)
 8000980:	f001 fbe0 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000984:	f244 0301 	movw	r3, #16385	; 0x4001
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	4829      	ldr	r0, [pc, #164]	; (8000a44 <MX_GPIO_Init+0x220>)
 800099e:	f001 fbd1 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009a2:	2380      	movs	r3, #128	; 0x80
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	4826      	ldr	r0, [pc, #152]	; (8000a50 <MX_GPIO_Init+0x22c>)
 80009b8:	f001 fbc4 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	4619      	mov	r1, r3
 80009d0:	4820      	ldr	r0, [pc, #128]	; (8000a54 <MX_GPIO_Init+0x230>)
 80009d2:	f001 fbb7 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80009d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80009e8:	230a      	movs	r3, #10
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f0:	4619      	mov	r1, r3
 80009f2:	4818      	ldr	r0, [pc, #96]	; (8000a54 <MX_GPIO_Init+0x230>)
 80009f4:	f001 fba6 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80009f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4810      	ldr	r0, [pc, #64]	; (8000a54 <MX_GPIO_Init+0x230>)
 8000a12:	f001 fb97 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a16:	2302      	movs	r3, #2
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4806      	ldr	r0, [pc, #24]	; (8000a48 <MX_GPIO_Init+0x224>)
 8000a2e:	f001 fb89 	bl	8002144 <HAL_GPIO_Init>

}
 8000a32:	bf00      	nop
 8000a34:	3738      	adds	r7, #56	; 0x38
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	58024400 	.word	0x58024400
 8000a40:	58021400 	.word	0x58021400
 8000a44:	58020400 	.word	0x58020400
 8000a48:	58021000 	.word	0x58021000
 8000a4c:	58020800 	.word	0x58020800
 8000a50:	58021800 	.word	0x58021800
 8000a54:	58020000 	.word	0x58020000

08000a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5c:	f000 fc48 	bl	80012f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a60:	f000 f82e 	bl	8000ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a64:	f7ff fede 	bl	8000824 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a68:	f000 fac8 	bl	8000ffc <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a6c:	f000 fc0e 	bl	800128c <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 8000a70:	f000 fa78 	bl	8000f64 <MX_UART4_Init>
  MX_TIM2_Init();
 8000a74:	f000 f99c 	bl	8000db0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart3, "Starting...\r\n", 13, 10);
 8000a78:	230a      	movs	r3, #10
 8000a7a:	220d      	movs	r2, #13
 8000a7c:	490b      	ldr	r1, [pc, #44]	; (8000aac <main+0x54>)
 8000a7e:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <main+0x58>)
 8000a80:	f005 faec 	bl	800605c <HAL_UART_Transmit>
	RPICom_Init(&huart4, &huart3);
 8000a84:	490a      	ldr	r1, [pc, #40]	; (8000ab0 <main+0x58>)
 8000a86:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <main+0x5c>)
 8000a88:	f7ff fe04 	bl	8000694 <RPICom_Init>
	HAL_UART_Transmit(&huart3, "Init Done\r\n", 11, 10);
 8000a8c:	230a      	movs	r3, #10
 8000a8e:	220b      	movs	r2, #11
 8000a90:	4909      	ldr	r1, [pc, #36]	; (8000ab8 <main+0x60>)
 8000a92:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <main+0x58>)
 8000a94:	f005 fae2 	bl	800605c <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); //toggle the user led Green which is connected to GPIO PA5
 8000a98:	2101      	movs	r1, #1
 8000a9a:	4808      	ldr	r0, [pc, #32]	; (8000abc <main+0x64>)
 8000a9c:	f001 fd1b 	bl	80024d6 <HAL_GPIO_TogglePin>
		HAL_Delay(500); //delay 500 millisecond
 8000aa0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aa4:	f000 fcb6 	bl	8001414 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); //toggle the user led Green which is connected to GPIO PA5
 8000aa8:	e7f6      	b.n	8000a98 <main+0x40>
 8000aaa:	bf00      	nop
 8000aac:	080093b0 	.word	0x080093b0
 8000ab0:	240001cc 	.word	0x240001cc
 8000ab4:	24000138 	.word	0x24000138
 8000ab8:	080093c0 	.word	0x080093c0
 8000abc:	58020400 	.word	0x58020400

08000ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b09c      	sub	sp, #112	; 0x70
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aca:	224c      	movs	r2, #76	; 0x4c
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f007 ffca 	bl	8008a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2220      	movs	r2, #32
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f007 ffc4 	bl	8008a68 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000ae0:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <SystemClock_Config+0xe4>)
 8000ae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ae6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000aea:	2004      	movs	r0, #4
 8000aec:	f001 fd0e 	bl	800250c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000af0:	2300      	movs	r3, #0
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <SystemClock_Config+0xe8>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a2b      	ldr	r2, [pc, #172]	; (8000ba8 <SystemClock_Config+0xe8>)
 8000afa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <SystemClock_Config+0xe8>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b0c:	bf00      	nop
 8000b0e:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <SystemClock_Config+0xe8>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b1a:	d1f8      	bne.n	8000b0e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b1c:	2321      	movs	r3, #33	; 0x21
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b20:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b26:	2301      	movs	r3, #1
 8000b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000b36:	2318      	movs	r3, #24
 8000b38:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b46:	230c      	movs	r3, #12
 8000b48:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 fd32 	bl	80025c0 <HAL_RCC_OscConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b62:	f000 f823 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b66:	233f      	movs	r3, #63	; 0x3f
 8000b68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2102      	movs	r1, #2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 f94a 	bl	8002e24 <HAL_RCC_ClockConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000b96:	f000 f809 	bl	8000bac <Error_Handler>
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	3770      	adds	r7, #112	; 0x70
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	58024400 	.word	0x58024400
 8000ba8:	58024800 	.word	0x58024800

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <Error_Handler+0x8>
	...

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <HAL_MspInit+0x30>)
 8000bc0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000bc4:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <HAL_MspInit+0x30>)
 8000bc6:	f043 0302 	orr.w	r3, r3, #2
 8000bca:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_MspInit+0x30>)
 8000bd0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	58024400 	.word	0x58024400

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c38:	f000 fbcc 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <UART4_IRQHandler+0x10>)
 8000c46:	f005 fae3 	bl	8006210 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  /* USER CODE END UART4_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	24000138 	.word	0x24000138

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f007 fec6 	bl	8008a14 <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	24100000 	.word	0x24100000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	240000e8 	.word	0x240000e8
 8000cbc:	24000278 	.word	0x24000278

08000cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b32      	ldr	r3, [pc, #200]	; (8000d90 <SystemInit+0xd0>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a31      	ldr	r2, [pc, #196]	; (8000d90 <SystemInit+0xd0>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cd4:	4b2f      	ldr	r3, [pc, #188]	; (8000d94 <SystemInit+0xd4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 030f 	and.w	r3, r3, #15
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d807      	bhi.n	8000cf0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ce0:	4b2c      	ldr	r3, [pc, #176]	; (8000d94 <SystemInit+0xd4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f023 030f 	bic.w	r3, r3, #15
 8000ce8:	4a2a      	ldr	r2, [pc, #168]	; (8000d94 <SystemInit+0xd4>)
 8000cea:	f043 0303 	orr.w	r3, r3, #3
 8000cee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cf0:	4b29      	ldr	r3, [pc, #164]	; (8000d98 <SystemInit+0xd8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a28      	ldr	r2, [pc, #160]	; (8000d98 <SystemInit+0xd8>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cfc:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <SystemInit+0xd8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d02:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <SystemInit+0xd8>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	4924      	ldr	r1, [pc, #144]	; (8000d98 <SystemInit+0xd8>)
 8000d08:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <SystemInit+0xdc>)
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d0e:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <SystemInit+0xd4>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 030c 	and.w	r3, r3, #12
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d007      	beq.n	8000d2a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <SystemInit+0xd4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f023 030f 	bic.w	r3, r3, #15
 8000d22:	4a1c      	ldr	r2, [pc, #112]	; (8000d94 <SystemInit+0xd4>)
 8000d24:	f043 0303 	orr.w	r3, r3, #3
 8000d28:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <SystemInit+0xd8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <SystemInit+0xd8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <SystemInit+0xd8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d3c:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <SystemInit+0xd8>)
 8000d3e:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <SystemInit+0xe0>)
 8000d40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <SystemInit+0xd8>)
 8000d44:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <SystemInit+0xe4>)
 8000d46:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <SystemInit+0xd8>)
 8000d4a:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <SystemInit+0xe8>)
 8000d4c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <SystemInit+0xd8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d54:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <SystemInit+0xd8>)
 8000d56:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <SystemInit+0xe8>)
 8000d58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <SystemInit+0xd8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <SystemInit+0xd8>)
 8000d62:	4a11      	ldr	r2, [pc, #68]	; (8000da8 <SystemInit+0xe8>)
 8000d64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <SystemInit+0xd8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <SystemInit+0xd8>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <SystemInit+0xd8>)
 8000d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <SystemInit+0xd8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <SystemInit+0xec>)
 8000d80:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d84:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00
 8000d94:	52002000 	.word	0x52002000
 8000d98:	58024400 	.word	0x58024400
 8000d9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000da0:	02020200 	.word	0x02020200
 8000da4:	01ff0000 	.word	0x01ff0000
 8000da8:	01010280 	.word	0x01010280
 8000dac:	52004000 	.word	0x52004000

08000db0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08e      	sub	sp, #56	; 0x38
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	611a      	str	r2, [r3, #16]
 8000dde:	615a      	str	r2, [r3, #20]
 8000de0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000de2:	4b33      	ldr	r3, [pc, #204]	; (8000eb0 <MX_TIM2_Init+0x100>)
 8000de4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dea:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <MX_TIM2_Init+0x100>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df0:	4b2f      	ldr	r3, [pc, #188]	; (8000eb0 <MX_TIM2_Init+0x100>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000df6:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <MX_TIM2_Init+0x100>)
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfe:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <MX_TIM2_Init+0x100>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e04:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <MX_TIM2_Init+0x100>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e0a:	4829      	ldr	r0, [pc, #164]	; (8000eb0 <MX_TIM2_Init+0x100>)
 8000e0c:	f004 f976 	bl	80050fc <HAL_TIM_Base_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000e16:	f7ff fec9 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e24:	4619      	mov	r1, r3
 8000e26:	4822      	ldr	r0, [pc, #136]	; (8000eb0 <MX_TIM2_Init+0x100>)
 8000e28:	f004 fb34 	bl	8005494 <HAL_TIM_ConfigClockSource>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000e32:	f7ff febb 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e36:	481e      	ldr	r0, [pc, #120]	; (8000eb0 <MX_TIM2_Init+0x100>)
 8000e38:	f004 f9b7 	bl	80051aa <HAL_TIM_PWM_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000e42:	f7ff feb3 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4619      	mov	r1, r3
 8000e54:	4816      	ldr	r0, [pc, #88]	; (8000eb0 <MX_TIM2_Init+0x100>)
 8000e56:	f005 f823 	bl	8005ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000e60:	f7ff fea4 	bl	8000bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e64:	2360      	movs	r3, #96	; 0x60
 8000e66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e74:	463b      	mov	r3, r7
 8000e76:	2200      	movs	r2, #0
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <MX_TIM2_Init+0x100>)
 8000e7c:	f004 f9f6 	bl	800526c <HAL_TIM_PWM_ConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000e86:	f7ff fe91 	bl	8000bac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	2204      	movs	r2, #4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <MX_TIM2_Init+0x100>)
 8000e92:	f004 f9eb 	bl	800526c <HAL_TIM_PWM_ConfigChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000e9c:	f7ff fe86 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ea0:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <MX_TIM2_Init+0x100>)
 8000ea2:	f000 f827 	bl	8000ef4 <HAL_TIM_MspPostInit>

}
 8000ea6:	bf00      	nop
 8000ea8:	3738      	adds	r7, #56	; 0x38
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	240000ec 	.word	0x240000ec

08000eb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec4:	d10e      	bne.n	8000ee4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_TIM_Base_MspInit+0x3c>)
 8000ec8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ecc:	4a08      	ldr	r2, [pc, #32]	; (8000ef0 <HAL_TIM_Base_MspInit+0x3c>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_TIM_Base_MspInit+0x3c>)
 8000ed8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	58024400 	.word	0x58024400

08000ef4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f14:	d11e      	bne.n	8000f54 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_TIM_MspPostInit+0x68>)
 8000f18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f1c:	4a0f      	ldr	r2, [pc, #60]	; (8000f5c <HAL_TIM_MspPostInit+0x68>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <HAL_TIM_MspPostInit+0x68>)
 8000f28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000f34:	2322      	movs	r3, #34	; 0x22
 8000f36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4804      	ldr	r0, [pc, #16]	; (8000f60 <HAL_TIM_MspPostInit+0x6c>)
 8000f50:	f001 f8f8 	bl	8002144 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f54:	bf00      	nop
 8000f56:	3720      	adds	r7, #32
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	58024400 	.word	0x58024400
 8000f60:	58020000 	.word	0x58020000

08000f64 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <MX_UART4_Init+0x90>)
 8000f6a:	4a23      	ldr	r2, [pc, #140]	; (8000ff8 <MX_UART4_Init+0x94>)
 8000f6c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f6e:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <MX_UART4_Init+0x90>)
 8000f70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f74:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <MX_UART4_Init+0x90>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <MX_UART4_Init+0x90>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <MX_UART4_Init+0x90>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f88:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <MX_UART4_Init+0x90>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <MX_UART4_Init+0x90>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_UART4_Init+0x90>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <MX_UART4_Init+0x90>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_UART4_Init+0x90>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <MX_UART4_Init+0x90>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000fac:	4811      	ldr	r0, [pc, #68]	; (8000ff4 <MX_UART4_Init+0x90>)
 8000fae:	f005 f805 	bl	8005fbc <HAL_UART_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000fb8:	f7ff fdf8 	bl	8000bac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <MX_UART4_Init+0x90>)
 8000fc0:	f007 fc5d 	bl	800887e <HAL_UARTEx_SetTxFifoThreshold>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000fca:	f7ff fdef 	bl	8000bac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <MX_UART4_Init+0x90>)
 8000fd2:	f007 fc92 	bl	80088fa <HAL_UARTEx_SetRxFifoThreshold>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000fdc:	f7ff fde6 	bl	8000bac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000fe0:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <MX_UART4_Init+0x90>)
 8000fe2:	f007 fc13 	bl	800880c <HAL_UARTEx_DisableFifoMode>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000fec:	f7ff fdde 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	24000138 	.word	0x24000138
 8000ff8:	40004c00 	.word	0x40004c00

08000ffc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001002:	4a23      	ldr	r2, [pc, #140]	; (8001090 <MX_USART3_UART_Init+0x94>)
 8001004:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <MX_USART3_UART_Init+0x90>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <MX_USART3_UART_Init+0x90>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_USART3_UART_Init+0x90>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001044:	4811      	ldr	r0, [pc, #68]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001046:	f004 ffb9 	bl	8005fbc <HAL_UART_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001050:	f7ff fdac 	bl	8000bac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001054:	2100      	movs	r1, #0
 8001056:	480d      	ldr	r0, [pc, #52]	; (800108c <MX_USART3_UART_Init+0x90>)
 8001058:	f007 fc11 	bl	800887e <HAL_UARTEx_SetTxFifoThreshold>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001062:	f7ff fda3 	bl	8000bac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001066:	2100      	movs	r1, #0
 8001068:	4808      	ldr	r0, [pc, #32]	; (800108c <MX_USART3_UART_Init+0x90>)
 800106a:	f007 fc46 	bl	80088fa <HAL_UARTEx_SetRxFifoThreshold>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001074:	f7ff fd9a 	bl	8000bac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <MX_USART3_UART_Init+0x90>)
 800107a:	f007 fbc7 	bl	800880c <HAL_UARTEx_DisableFifoMode>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001084:	f7ff fd92 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	240001cc 	.word	0x240001cc
 8001090:	40004800 	.word	0x40004800

08001094 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b0be      	sub	sp, #248	; 0xf8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ac:	f107 0320 	add.w	r3, r7, #32
 80010b0:	22c0      	movs	r2, #192	; 0xc0
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f007 fcd7 	bl	8008a68 <memset>
  if(uartHandle->Instance==UART4)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a63      	ldr	r2, [pc, #396]	; (800124c <HAL_UART_MspInit+0x1b8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d172      	bne.n	80011aa <HAL_UART_MspInit+0x116>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80010c4:	f04f 0202 	mov.w	r2, #2
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d6:	f107 0320 	add.w	r3, r7, #32
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 fa2e 	bl	800353c <HAL_RCCEx_PeriphCLKConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010e6:	f7ff fd61 	bl	8000bac <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80010ea:	4b59      	ldr	r3, [pc, #356]	; (8001250 <HAL_UART_MspInit+0x1bc>)
 80010ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010f0:	4a57      	ldr	r2, [pc, #348]	; (8001250 <HAL_UART_MspInit+0x1bc>)
 80010f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010f6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80010fa:	4b55      	ldr	r3, [pc, #340]	; (8001250 <HAL_UART_MspInit+0x1bc>)
 80010fc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001100:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	4b51      	ldr	r3, [pc, #324]	; (8001250 <HAL_UART_MspInit+0x1bc>)
 800110a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800110e:	4a50      	ldr	r2, [pc, #320]	; (8001250 <HAL_UART_MspInit+0x1bc>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001118:	4b4d      	ldr	r3, [pc, #308]	; (8001250 <HAL_UART_MspInit+0x1bc>)
 800111a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001126:	4b4a      	ldr	r3, [pc, #296]	; (8001250 <HAL_UART_MspInit+0x1bc>)
 8001128:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800112c:	4a48      	ldr	r2, [pc, #288]	; (8001250 <HAL_UART_MspInit+0x1bc>)
 800112e:	f043 0308 	orr.w	r3, r3, #8
 8001132:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001136:	4b46      	ldr	r3, [pc, #280]	; (8001250 <HAL_UART_MspInit+0x1bc>)
 8001138:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001144:	2301      	movs	r3, #1
 8001146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800115c:	2308      	movs	r3, #8
 800115e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001166:	4619      	mov	r1, r3
 8001168:	483a      	ldr	r0, [pc, #232]	; (8001254 <HAL_UART_MspInit+0x1c0>)
 800116a:	f000 ffeb 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800116e:	2301      	movs	r3, #1
 8001170:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001186:	2308      	movs	r3, #8
 8001188:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800118c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001190:	4619      	mov	r1, r3
 8001192:	4831      	ldr	r0, [pc, #196]	; (8001258 <HAL_UART_MspInit+0x1c4>)
 8001194:	f000 ffd6 	bl	8002144 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	2034      	movs	r0, #52	; 0x34
 800119e:	f000 fa38 	bl	8001612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80011a2:	2034      	movs	r0, #52	; 0x34
 80011a4:	f000 fa4f 	bl	8001646 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011a8:	e04b      	b.n	8001242 <HAL_UART_MspInit+0x1ae>
  else if(uartHandle->Instance==USART3)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a2b      	ldr	r2, [pc, #172]	; (800125c <HAL_UART_MspInit+0x1c8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d146      	bne.n	8001242 <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011b4:	f04f 0202 	mov.w	r2, #2
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c6:	f107 0320 	add.w	r3, r7, #32
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 f9b6 	bl	800353c <HAL_RCCEx_PeriphCLKConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_UART_MspInit+0x146>
      Error_Handler();
 80011d6:	f7ff fce9 	bl	8000bac <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <HAL_UART_MspInit+0x1bc>)
 80011dc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011e0:	4a1b      	ldr	r2, [pc, #108]	; (8001250 <HAL_UART_MspInit+0x1bc>)
 80011e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <HAL_UART_MspInit+0x1bc>)
 80011ec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_UART_MspInit+0x1bc>)
 80011fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011fe:	4a14      	ldr	r2, [pc, #80]	; (8001250 <HAL_UART_MspInit+0x1bc>)
 8001200:	f043 0308 	orr.w	r3, r3, #8
 8001204:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_UART_MspInit+0x1bc>)
 800120a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001216:	f44f 7340 	mov.w	r3, #768	; 0x300
 800121a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001230:	2307      	movs	r3, #7
 8001232:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001236:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800123a:	4619      	mov	r1, r3
 800123c:	4806      	ldr	r0, [pc, #24]	; (8001258 <HAL_UART_MspInit+0x1c4>)
 800123e:	f000 ff81 	bl	8002144 <HAL_GPIO_Init>
}
 8001242:	bf00      	nop
 8001244:	37f8      	adds	r7, #248	; 0xf8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40004c00 	.word	0x40004c00
 8001250:	58024400 	.word	0x58024400
 8001254:	58020000 	.word	0x58020000
 8001258:	58020c00 	.word	0x58020c00
 800125c:	40004800 	.word	0x40004800

08001260 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a05      	ldr	r2, [pc, #20]	; (8001284 <HAL_UART_RxCpltCallback+0x24>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d104      	bne.n	800127c <HAL_UART_RxCpltCallback+0x1c>
	{
		RPICom_DecodeBinaryMessage();
 8001272:	f7ff fa77 	bl	8000764 <RPICom_DecodeBinaryMessage>
		RPICom_UartActivate(&hRPICom);
 8001276:	4804      	ldr	r0, [pc, #16]	; (8001288 <HAL_UART_RxCpltCallback+0x28>)
 8001278:	f7ff fa44 	bl	8000704 <RPICom_UartActivate>
	}
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40004c00 	.word	0x40004c00
 8001288:	24000090 	.word	0x24000090

0800128c <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800129c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012a0:	f7ff fd0e 	bl	8000cc0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a4:	480c      	ldr	r0, [pc, #48]	; (80012d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012a6:	490d      	ldr	r1, [pc, #52]	; (80012dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012a8:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ac:	e002      	b.n	80012b4 <LoopCopyDataInit>

080012ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b2:	3304      	adds	r3, #4

080012b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80012b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b8:	d3f9      	bcc.n	80012ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012bc:	4c0a      	ldr	r4, [pc, #40]	; (80012e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c0:	e001      	b.n	80012c6 <LoopFillZerobss>

080012c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c4:	3204      	adds	r2, #4

080012c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c8:	d3fb      	bcc.n	80012c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012ca:	f007 fba9 	bl	8008a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ce:	f7ff fbc3 	bl	8000a58 <main>
  bx  lr
 80012d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012d4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80012d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012dc:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80012e0:	08009448 	.word	0x08009448
  ldr r2, =_sbss
 80012e4:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80012e8:	24000274 	.word	0x24000274

080012ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC_IRQHandler>
	...

080012f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f6:	2003      	movs	r0, #3
 80012f8:	f000 f980 	bl	80015fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80012fc:	f001 ff48 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 8001300:	4602      	mov	r2, r0
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_Init+0x68>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	0a1b      	lsrs	r3, r3, #8
 8001308:	f003 030f 	and.w	r3, r3, #15
 800130c:	4913      	ldr	r1, [pc, #76]	; (800135c <HAL_Init+0x6c>)
 800130e:	5ccb      	ldrb	r3, [r1, r3]
 8001310:	f003 031f 	and.w	r3, r3, #31
 8001314:	fa22 f303 	lsr.w	r3, r2, r3
 8001318:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_Init+0x68>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <HAL_Init+0x6c>)
 8001324:	5cd3      	ldrb	r3, [r2, r3]
 8001326:	f003 031f 	and.w	r3, r3, #31
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
 8001330:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <HAL_Init+0x70>)
 8001332:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001334:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <HAL_Init+0x74>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800133a:	2000      	movs	r0, #0
 800133c:	f000 f814 	bl	8001368 <HAL_InitTick>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e002      	b.n	8001350 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800134a:	f7ff fc35 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	58024400 	.word	0x58024400
 800135c:	080093cc 	.word	0x080093cc
 8001360:	24000004 	.word	0x24000004
 8001364:	24000000 	.word	0x24000000

08001368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_InitTick+0x60>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e021      	b.n	80013c0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <HAL_InitTick+0x64>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_InitTick+0x60>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	fbb3 f3f1 	udiv	r3, r3, r1
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f965 	bl	8001662 <HAL_SYSTICK_Config>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e00e      	b.n	80013c0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d80a      	bhi.n	80013be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a8:	2200      	movs	r2, #0
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013b0:	f000 f92f 	bl	8001612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b4:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <HAL_InitTick+0x68>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2400000c 	.word	0x2400000c
 80013cc:	24000000 	.word	0x24000000
 80013d0:	24000008 	.word	0x24000008

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	2400000c 	.word	0x2400000c
 80013f8:	24000260 	.word	0x24000260

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	24000260 	.word	0x24000260

08001414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff ffee 	bl	80013fc <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_Delay+0x44>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffde 	bl	80013fc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2400000c 	.word	0x2400000c

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <__NVIC_SetPriorityGrouping+0x40>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001486:	4313      	orrs	r3, r2
 8001488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148a:	4a04      	ldr	r2, [pc, #16]	; (800149c <__NVIC_SetPriorityGrouping+0x40>)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	60d3      	str	r3, [r2, #12]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00
 80014a0:	05fa0000 	.word	0x05fa0000

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	db0b      	blt.n	80014ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	f003 021f 	and.w	r2, r3, #31
 80014d8:	4907      	ldr	r1, [pc, #28]	; (80014f8 <__NVIC_EnableIRQ+0x38>)
 80014da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	2001      	movs	r0, #1
 80014e2:	fa00 f202 	lsl.w	r2, r0, r2
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e100 	.word	0xe000e100

080014fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001508:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150c:	2b00      	cmp	r3, #0
 800150e:	db0a      	blt.n	8001526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	b2da      	uxtb	r2, r3
 8001514:	490c      	ldr	r1, [pc, #48]	; (8001548 <__NVIC_SetPriority+0x4c>)
 8001516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800151a:	0112      	lsls	r2, r2, #4
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	440b      	add	r3, r1
 8001520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001524:	e00a      	b.n	800153c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4908      	ldr	r1, [pc, #32]	; (800154c <__NVIC_SetPriority+0x50>)
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	3b04      	subs	r3, #4
 8001534:	0112      	lsls	r2, r2, #4
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	440b      	add	r3, r1
 800153a:	761a      	strb	r2, [r3, #24]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001550:	b480      	push	{r7}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f1c3 0307 	rsb	r3, r3, #7
 800156a:	2b04      	cmp	r3, #4
 800156c:	bf28      	it	cs
 800156e:	2304      	movcs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	2b06      	cmp	r3, #6
 8001578:	d902      	bls.n	8001580 <NVIC_EncodePriority+0x30>
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3b03      	subs	r3, #3
 800157e:	e000      	b.n	8001582 <NVIC_EncodePriority+0x32>
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	401a      	ands	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001598:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	4313      	orrs	r3, r2
         );
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c8:	d301      	bcc.n	80015ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ca:	2301      	movs	r3, #1
 80015cc:	e00f      	b.n	80015ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <SysTick_Config+0x40>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d6:	210f      	movs	r1, #15
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015dc:	f7ff ff8e 	bl	80014fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <SysTick_Config+0x40>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <SysTick_Config+0x40>)
 80015e8:	2207      	movs	r2, #7
 80015ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	e000e010 	.word	0xe000e010

080015fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff29 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001620:	f7ff ff40 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 8001624:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	6978      	ldr	r0, [r7, #20]
 800162c:	f7ff ff90 	bl	8001550 <NVIC_EncodePriority>
 8001630:	4602      	mov	r2, r0
 8001632:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff5f 	bl	80014fc <__NVIC_SetPriority>
}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001650:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff33 	bl	80014c0 <__NVIC_EnableIRQ>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ffa4 	bl	80015b8 <SysTick_Config>
 8001670:	4603      	mov	r3, r0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff feba 	bl	80013fc <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e2dc      	b.n	8001c4e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d008      	beq.n	80016b2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e2cd      	b.n	8001c4e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a76      	ldr	r2, [pc, #472]	; (8001890 <HAL_DMA_Abort+0x214>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d04a      	beq.n	8001752 <HAL_DMA_Abort+0xd6>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a74      	ldr	r2, [pc, #464]	; (8001894 <HAL_DMA_Abort+0x218>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d045      	beq.n	8001752 <HAL_DMA_Abort+0xd6>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a73      	ldr	r2, [pc, #460]	; (8001898 <HAL_DMA_Abort+0x21c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d040      	beq.n	8001752 <HAL_DMA_Abort+0xd6>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a71      	ldr	r2, [pc, #452]	; (800189c <HAL_DMA_Abort+0x220>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d03b      	beq.n	8001752 <HAL_DMA_Abort+0xd6>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a70      	ldr	r2, [pc, #448]	; (80018a0 <HAL_DMA_Abort+0x224>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d036      	beq.n	8001752 <HAL_DMA_Abort+0xd6>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a6e      	ldr	r2, [pc, #440]	; (80018a4 <HAL_DMA_Abort+0x228>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d031      	beq.n	8001752 <HAL_DMA_Abort+0xd6>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a6d      	ldr	r2, [pc, #436]	; (80018a8 <HAL_DMA_Abort+0x22c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d02c      	beq.n	8001752 <HAL_DMA_Abort+0xd6>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a6b      	ldr	r2, [pc, #428]	; (80018ac <HAL_DMA_Abort+0x230>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d027      	beq.n	8001752 <HAL_DMA_Abort+0xd6>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a6a      	ldr	r2, [pc, #424]	; (80018b0 <HAL_DMA_Abort+0x234>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d022      	beq.n	8001752 <HAL_DMA_Abort+0xd6>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a68      	ldr	r2, [pc, #416]	; (80018b4 <HAL_DMA_Abort+0x238>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d01d      	beq.n	8001752 <HAL_DMA_Abort+0xd6>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a67      	ldr	r2, [pc, #412]	; (80018b8 <HAL_DMA_Abort+0x23c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d018      	beq.n	8001752 <HAL_DMA_Abort+0xd6>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a65      	ldr	r2, [pc, #404]	; (80018bc <HAL_DMA_Abort+0x240>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d013      	beq.n	8001752 <HAL_DMA_Abort+0xd6>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a64      	ldr	r2, [pc, #400]	; (80018c0 <HAL_DMA_Abort+0x244>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d00e      	beq.n	8001752 <HAL_DMA_Abort+0xd6>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a62      	ldr	r2, [pc, #392]	; (80018c4 <HAL_DMA_Abort+0x248>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d009      	beq.n	8001752 <HAL_DMA_Abort+0xd6>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a61      	ldr	r2, [pc, #388]	; (80018c8 <HAL_DMA_Abort+0x24c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d004      	beq.n	8001752 <HAL_DMA_Abort+0xd6>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a5f      	ldr	r2, [pc, #380]	; (80018cc <HAL_DMA_Abort+0x250>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_DMA_Abort+0xda>
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <HAL_DMA_Abort+0xdc>
 8001756:	2300      	movs	r3, #0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d013      	beq.n	8001784 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 021e 	bic.w	r2, r2, #30
 800176a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	695a      	ldr	r2, [r3, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800177a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e00a      	b.n	800179a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 020e 	bic.w	r2, r2, #14
 8001792:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a3c      	ldr	r2, [pc, #240]	; (8001890 <HAL_DMA_Abort+0x214>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d072      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a3a      	ldr	r2, [pc, #232]	; (8001894 <HAL_DMA_Abort+0x218>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d06d      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a39      	ldr	r2, [pc, #228]	; (8001898 <HAL_DMA_Abort+0x21c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d068      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a37      	ldr	r2, [pc, #220]	; (800189c <HAL_DMA_Abort+0x220>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d063      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a36      	ldr	r2, [pc, #216]	; (80018a0 <HAL_DMA_Abort+0x224>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d05e      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a34      	ldr	r2, [pc, #208]	; (80018a4 <HAL_DMA_Abort+0x228>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d059      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a33      	ldr	r2, [pc, #204]	; (80018a8 <HAL_DMA_Abort+0x22c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d054      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a31      	ldr	r2, [pc, #196]	; (80018ac <HAL_DMA_Abort+0x230>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d04f      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a30      	ldr	r2, [pc, #192]	; (80018b0 <HAL_DMA_Abort+0x234>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d04a      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a2e      	ldr	r2, [pc, #184]	; (80018b4 <HAL_DMA_Abort+0x238>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d045      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a2d      	ldr	r2, [pc, #180]	; (80018b8 <HAL_DMA_Abort+0x23c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d040      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a2b      	ldr	r2, [pc, #172]	; (80018bc <HAL_DMA_Abort+0x240>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d03b      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a2a      	ldr	r2, [pc, #168]	; (80018c0 <HAL_DMA_Abort+0x244>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d036      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a28      	ldr	r2, [pc, #160]	; (80018c4 <HAL_DMA_Abort+0x248>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d031      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a27      	ldr	r2, [pc, #156]	; (80018c8 <HAL_DMA_Abort+0x24c>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d02c      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a25      	ldr	r2, [pc, #148]	; (80018cc <HAL_DMA_Abort+0x250>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d027      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a24      	ldr	r2, [pc, #144]	; (80018d0 <HAL_DMA_Abort+0x254>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d022      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a22      	ldr	r2, [pc, #136]	; (80018d4 <HAL_DMA_Abort+0x258>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d01d      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a21      	ldr	r2, [pc, #132]	; (80018d8 <HAL_DMA_Abort+0x25c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d018      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a1f      	ldr	r2, [pc, #124]	; (80018dc <HAL_DMA_Abort+0x260>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d013      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a1e      	ldr	r2, [pc, #120]	; (80018e0 <HAL_DMA_Abort+0x264>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d00e      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <HAL_DMA_Abort+0x268>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d009      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a1b      	ldr	r2, [pc, #108]	; (80018e8 <HAL_DMA_Abort+0x26c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d004      	beq.n	800188a <HAL_DMA_Abort+0x20e>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a19      	ldr	r2, [pc, #100]	; (80018ec <HAL_DMA_Abort+0x270>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d132      	bne.n	80018f0 <HAL_DMA_Abort+0x274>
 800188a:	2301      	movs	r3, #1
 800188c:	e031      	b.n	80018f2 <HAL_DMA_Abort+0x276>
 800188e:	bf00      	nop
 8001890:	40020010 	.word	0x40020010
 8001894:	40020028 	.word	0x40020028
 8001898:	40020040 	.word	0x40020040
 800189c:	40020058 	.word	0x40020058
 80018a0:	40020070 	.word	0x40020070
 80018a4:	40020088 	.word	0x40020088
 80018a8:	400200a0 	.word	0x400200a0
 80018ac:	400200b8 	.word	0x400200b8
 80018b0:	40020410 	.word	0x40020410
 80018b4:	40020428 	.word	0x40020428
 80018b8:	40020440 	.word	0x40020440
 80018bc:	40020458 	.word	0x40020458
 80018c0:	40020470 	.word	0x40020470
 80018c4:	40020488 	.word	0x40020488
 80018c8:	400204a0 	.word	0x400204a0
 80018cc:	400204b8 	.word	0x400204b8
 80018d0:	58025408 	.word	0x58025408
 80018d4:	5802541c 	.word	0x5802541c
 80018d8:	58025430 	.word	0x58025430
 80018dc:	58025444 	.word	0x58025444
 80018e0:	58025458 	.word	0x58025458
 80018e4:	5802546c 	.word	0x5802546c
 80018e8:	58025480 	.word	0x58025480
 80018ec:	58025494 	.word	0x58025494
 80018f0:	2300      	movs	r3, #0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d007      	beq.n	8001906 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001904:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a6d      	ldr	r2, [pc, #436]	; (8001ac0 <HAL_DMA_Abort+0x444>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d04a      	beq.n	80019a6 <HAL_DMA_Abort+0x32a>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a6b      	ldr	r2, [pc, #428]	; (8001ac4 <HAL_DMA_Abort+0x448>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d045      	beq.n	80019a6 <HAL_DMA_Abort+0x32a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a6a      	ldr	r2, [pc, #424]	; (8001ac8 <HAL_DMA_Abort+0x44c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d040      	beq.n	80019a6 <HAL_DMA_Abort+0x32a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a68      	ldr	r2, [pc, #416]	; (8001acc <HAL_DMA_Abort+0x450>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d03b      	beq.n	80019a6 <HAL_DMA_Abort+0x32a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a67      	ldr	r2, [pc, #412]	; (8001ad0 <HAL_DMA_Abort+0x454>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d036      	beq.n	80019a6 <HAL_DMA_Abort+0x32a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a65      	ldr	r2, [pc, #404]	; (8001ad4 <HAL_DMA_Abort+0x458>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d031      	beq.n	80019a6 <HAL_DMA_Abort+0x32a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a64      	ldr	r2, [pc, #400]	; (8001ad8 <HAL_DMA_Abort+0x45c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d02c      	beq.n	80019a6 <HAL_DMA_Abort+0x32a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a62      	ldr	r2, [pc, #392]	; (8001adc <HAL_DMA_Abort+0x460>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d027      	beq.n	80019a6 <HAL_DMA_Abort+0x32a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a61      	ldr	r2, [pc, #388]	; (8001ae0 <HAL_DMA_Abort+0x464>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d022      	beq.n	80019a6 <HAL_DMA_Abort+0x32a>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a5f      	ldr	r2, [pc, #380]	; (8001ae4 <HAL_DMA_Abort+0x468>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d01d      	beq.n	80019a6 <HAL_DMA_Abort+0x32a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a5e      	ldr	r2, [pc, #376]	; (8001ae8 <HAL_DMA_Abort+0x46c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d018      	beq.n	80019a6 <HAL_DMA_Abort+0x32a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a5c      	ldr	r2, [pc, #368]	; (8001aec <HAL_DMA_Abort+0x470>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d013      	beq.n	80019a6 <HAL_DMA_Abort+0x32a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a5b      	ldr	r2, [pc, #364]	; (8001af0 <HAL_DMA_Abort+0x474>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d00e      	beq.n	80019a6 <HAL_DMA_Abort+0x32a>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a59      	ldr	r2, [pc, #356]	; (8001af4 <HAL_DMA_Abort+0x478>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d009      	beq.n	80019a6 <HAL_DMA_Abort+0x32a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a58      	ldr	r2, [pc, #352]	; (8001af8 <HAL_DMA_Abort+0x47c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d004      	beq.n	80019a6 <HAL_DMA_Abort+0x32a>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a56      	ldr	r2, [pc, #344]	; (8001afc <HAL_DMA_Abort+0x480>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d108      	bne.n	80019b8 <HAL_DMA_Abort+0x33c>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0201 	bic.w	r2, r2, #1
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	e007      	b.n	80019c8 <HAL_DMA_Abort+0x34c>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0201 	bic.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80019c8:	e013      	b.n	80019f2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ca:	f7ff fd17 	bl	80013fc <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b05      	cmp	r3, #5
 80019d6:	d90c      	bls.n	80019f2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2220      	movs	r2, #32
 80019dc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2203      	movs	r2, #3
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e12d      	b.n	8001c4e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1e5      	bne.n	80019ca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a2f      	ldr	r2, [pc, #188]	; (8001ac0 <HAL_DMA_Abort+0x444>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d04a      	beq.n	8001a9e <HAL_DMA_Abort+0x422>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a2d      	ldr	r2, [pc, #180]	; (8001ac4 <HAL_DMA_Abort+0x448>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d045      	beq.n	8001a9e <HAL_DMA_Abort+0x422>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a2c      	ldr	r2, [pc, #176]	; (8001ac8 <HAL_DMA_Abort+0x44c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d040      	beq.n	8001a9e <HAL_DMA_Abort+0x422>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a2a      	ldr	r2, [pc, #168]	; (8001acc <HAL_DMA_Abort+0x450>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d03b      	beq.n	8001a9e <HAL_DMA_Abort+0x422>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a29      	ldr	r2, [pc, #164]	; (8001ad0 <HAL_DMA_Abort+0x454>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d036      	beq.n	8001a9e <HAL_DMA_Abort+0x422>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a27      	ldr	r2, [pc, #156]	; (8001ad4 <HAL_DMA_Abort+0x458>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d031      	beq.n	8001a9e <HAL_DMA_Abort+0x422>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a26      	ldr	r2, [pc, #152]	; (8001ad8 <HAL_DMA_Abort+0x45c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d02c      	beq.n	8001a9e <HAL_DMA_Abort+0x422>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a24      	ldr	r2, [pc, #144]	; (8001adc <HAL_DMA_Abort+0x460>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d027      	beq.n	8001a9e <HAL_DMA_Abort+0x422>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a23      	ldr	r2, [pc, #140]	; (8001ae0 <HAL_DMA_Abort+0x464>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d022      	beq.n	8001a9e <HAL_DMA_Abort+0x422>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a21      	ldr	r2, [pc, #132]	; (8001ae4 <HAL_DMA_Abort+0x468>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d01d      	beq.n	8001a9e <HAL_DMA_Abort+0x422>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a20      	ldr	r2, [pc, #128]	; (8001ae8 <HAL_DMA_Abort+0x46c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d018      	beq.n	8001a9e <HAL_DMA_Abort+0x422>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a1e      	ldr	r2, [pc, #120]	; (8001aec <HAL_DMA_Abort+0x470>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d013      	beq.n	8001a9e <HAL_DMA_Abort+0x422>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a1d      	ldr	r2, [pc, #116]	; (8001af0 <HAL_DMA_Abort+0x474>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d00e      	beq.n	8001a9e <HAL_DMA_Abort+0x422>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a1b      	ldr	r2, [pc, #108]	; (8001af4 <HAL_DMA_Abort+0x478>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d009      	beq.n	8001a9e <HAL_DMA_Abort+0x422>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a1a      	ldr	r2, [pc, #104]	; (8001af8 <HAL_DMA_Abort+0x47c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d004      	beq.n	8001a9e <HAL_DMA_Abort+0x422>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a18      	ldr	r2, [pc, #96]	; (8001afc <HAL_DMA_Abort+0x480>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d101      	bne.n	8001aa2 <HAL_DMA_Abort+0x426>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <HAL_DMA_Abort+0x428>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d02b      	beq.n	8001b00 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab2:	f003 031f 	and.w	r3, r3, #31
 8001ab6:	223f      	movs	r2, #63	; 0x3f
 8001ab8:	409a      	lsls	r2, r3
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	e02a      	b.n	8001b16 <HAL_DMA_Abort+0x49a>
 8001ac0:	40020010 	.word	0x40020010
 8001ac4:	40020028 	.word	0x40020028
 8001ac8:	40020040 	.word	0x40020040
 8001acc:	40020058 	.word	0x40020058
 8001ad0:	40020070 	.word	0x40020070
 8001ad4:	40020088 	.word	0x40020088
 8001ad8:	400200a0 	.word	0x400200a0
 8001adc:	400200b8 	.word	0x400200b8
 8001ae0:	40020410 	.word	0x40020410
 8001ae4:	40020428 	.word	0x40020428
 8001ae8:	40020440 	.word	0x40020440
 8001aec:	40020458 	.word	0x40020458
 8001af0:	40020470 	.word	0x40020470
 8001af4:	40020488 	.word	0x40020488
 8001af8:	400204a0 	.word	0x400204a0
 8001afc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b04:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	2201      	movs	r2, #1
 8001b10:	409a      	lsls	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a4f      	ldr	r2, [pc, #316]	; (8001c58 <HAL_DMA_Abort+0x5dc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d072      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a4d      	ldr	r2, [pc, #308]	; (8001c5c <HAL_DMA_Abort+0x5e0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d06d      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a4c      	ldr	r2, [pc, #304]	; (8001c60 <HAL_DMA_Abort+0x5e4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d068      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a4a      	ldr	r2, [pc, #296]	; (8001c64 <HAL_DMA_Abort+0x5e8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d063      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a49      	ldr	r2, [pc, #292]	; (8001c68 <HAL_DMA_Abort+0x5ec>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d05e      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a47      	ldr	r2, [pc, #284]	; (8001c6c <HAL_DMA_Abort+0x5f0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d059      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a46      	ldr	r2, [pc, #280]	; (8001c70 <HAL_DMA_Abort+0x5f4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d054      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a44      	ldr	r2, [pc, #272]	; (8001c74 <HAL_DMA_Abort+0x5f8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d04f      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a43      	ldr	r2, [pc, #268]	; (8001c78 <HAL_DMA_Abort+0x5fc>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d04a      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a41      	ldr	r2, [pc, #260]	; (8001c7c <HAL_DMA_Abort+0x600>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d045      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a40      	ldr	r2, [pc, #256]	; (8001c80 <HAL_DMA_Abort+0x604>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d040      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a3e      	ldr	r2, [pc, #248]	; (8001c84 <HAL_DMA_Abort+0x608>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d03b      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a3d      	ldr	r2, [pc, #244]	; (8001c88 <HAL_DMA_Abort+0x60c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d036      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a3b      	ldr	r2, [pc, #236]	; (8001c8c <HAL_DMA_Abort+0x610>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d031      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a3a      	ldr	r2, [pc, #232]	; (8001c90 <HAL_DMA_Abort+0x614>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d02c      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a38      	ldr	r2, [pc, #224]	; (8001c94 <HAL_DMA_Abort+0x618>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d027      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a37      	ldr	r2, [pc, #220]	; (8001c98 <HAL_DMA_Abort+0x61c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d022      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a35      	ldr	r2, [pc, #212]	; (8001c9c <HAL_DMA_Abort+0x620>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d01d      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a34      	ldr	r2, [pc, #208]	; (8001ca0 <HAL_DMA_Abort+0x624>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d018      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a32      	ldr	r2, [pc, #200]	; (8001ca4 <HAL_DMA_Abort+0x628>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d013      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a31      	ldr	r2, [pc, #196]	; (8001ca8 <HAL_DMA_Abort+0x62c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d00e      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a2f      	ldr	r2, [pc, #188]	; (8001cac <HAL_DMA_Abort+0x630>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d009      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a2e      	ldr	r2, [pc, #184]	; (8001cb0 <HAL_DMA_Abort+0x634>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d004      	beq.n	8001c06 <HAL_DMA_Abort+0x58a>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a2c      	ldr	r2, [pc, #176]	; (8001cb4 <HAL_DMA_Abort+0x638>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d101      	bne.n	8001c0a <HAL_DMA_Abort+0x58e>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_DMA_Abort+0x590>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d015      	beq.n	8001c3c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001c18:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00c      	beq.n	8001c3c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c30:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001c3a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40020010 	.word	0x40020010
 8001c5c:	40020028 	.word	0x40020028
 8001c60:	40020040 	.word	0x40020040
 8001c64:	40020058 	.word	0x40020058
 8001c68:	40020070 	.word	0x40020070
 8001c6c:	40020088 	.word	0x40020088
 8001c70:	400200a0 	.word	0x400200a0
 8001c74:	400200b8 	.word	0x400200b8
 8001c78:	40020410 	.word	0x40020410
 8001c7c:	40020428 	.word	0x40020428
 8001c80:	40020440 	.word	0x40020440
 8001c84:	40020458 	.word	0x40020458
 8001c88:	40020470 	.word	0x40020470
 8001c8c:	40020488 	.word	0x40020488
 8001c90:	400204a0 	.word	0x400204a0
 8001c94:	400204b8 	.word	0x400204b8
 8001c98:	58025408 	.word	0x58025408
 8001c9c:	5802541c 	.word	0x5802541c
 8001ca0:	58025430 	.word	0x58025430
 8001ca4:	58025444 	.word	0x58025444
 8001ca8:	58025458 	.word	0x58025458
 8001cac:	5802546c 	.word	0x5802546c
 8001cb0:	58025480 	.word	0x58025480
 8001cb4:	58025494 	.word	0x58025494

08001cb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e237      	b.n	800213a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d004      	beq.n	8001ce0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2280      	movs	r2, #128	; 0x80
 8001cda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e22c      	b.n	800213a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a5c      	ldr	r2, [pc, #368]	; (8001e58 <HAL_DMA_Abort_IT+0x1a0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d04a      	beq.n	8001d80 <HAL_DMA_Abort_IT+0xc8>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a5b      	ldr	r2, [pc, #364]	; (8001e5c <HAL_DMA_Abort_IT+0x1a4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d045      	beq.n	8001d80 <HAL_DMA_Abort_IT+0xc8>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a59      	ldr	r2, [pc, #356]	; (8001e60 <HAL_DMA_Abort_IT+0x1a8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d040      	beq.n	8001d80 <HAL_DMA_Abort_IT+0xc8>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a58      	ldr	r2, [pc, #352]	; (8001e64 <HAL_DMA_Abort_IT+0x1ac>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d03b      	beq.n	8001d80 <HAL_DMA_Abort_IT+0xc8>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a56      	ldr	r2, [pc, #344]	; (8001e68 <HAL_DMA_Abort_IT+0x1b0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d036      	beq.n	8001d80 <HAL_DMA_Abort_IT+0xc8>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a55      	ldr	r2, [pc, #340]	; (8001e6c <HAL_DMA_Abort_IT+0x1b4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d031      	beq.n	8001d80 <HAL_DMA_Abort_IT+0xc8>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a53      	ldr	r2, [pc, #332]	; (8001e70 <HAL_DMA_Abort_IT+0x1b8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d02c      	beq.n	8001d80 <HAL_DMA_Abort_IT+0xc8>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a52      	ldr	r2, [pc, #328]	; (8001e74 <HAL_DMA_Abort_IT+0x1bc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d027      	beq.n	8001d80 <HAL_DMA_Abort_IT+0xc8>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a50      	ldr	r2, [pc, #320]	; (8001e78 <HAL_DMA_Abort_IT+0x1c0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d022      	beq.n	8001d80 <HAL_DMA_Abort_IT+0xc8>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a4f      	ldr	r2, [pc, #316]	; (8001e7c <HAL_DMA_Abort_IT+0x1c4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d01d      	beq.n	8001d80 <HAL_DMA_Abort_IT+0xc8>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a4d      	ldr	r2, [pc, #308]	; (8001e80 <HAL_DMA_Abort_IT+0x1c8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d018      	beq.n	8001d80 <HAL_DMA_Abort_IT+0xc8>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a4c      	ldr	r2, [pc, #304]	; (8001e84 <HAL_DMA_Abort_IT+0x1cc>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d013      	beq.n	8001d80 <HAL_DMA_Abort_IT+0xc8>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a4a      	ldr	r2, [pc, #296]	; (8001e88 <HAL_DMA_Abort_IT+0x1d0>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d00e      	beq.n	8001d80 <HAL_DMA_Abort_IT+0xc8>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a49      	ldr	r2, [pc, #292]	; (8001e8c <HAL_DMA_Abort_IT+0x1d4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d009      	beq.n	8001d80 <HAL_DMA_Abort_IT+0xc8>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a47      	ldr	r2, [pc, #284]	; (8001e90 <HAL_DMA_Abort_IT+0x1d8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d004      	beq.n	8001d80 <HAL_DMA_Abort_IT+0xc8>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a46      	ldr	r2, [pc, #280]	; (8001e94 <HAL_DMA_Abort_IT+0x1dc>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d101      	bne.n	8001d84 <HAL_DMA_Abort_IT+0xcc>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <HAL_DMA_Abort_IT+0xce>
 8001d84:	2300      	movs	r3, #0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 8086 	beq.w	8001e98 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2204      	movs	r2, #4
 8001d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a2f      	ldr	r2, [pc, #188]	; (8001e58 <HAL_DMA_Abort_IT+0x1a0>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d04a      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x17c>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a2e      	ldr	r2, [pc, #184]	; (8001e5c <HAL_DMA_Abort_IT+0x1a4>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d045      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x17c>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a2c      	ldr	r2, [pc, #176]	; (8001e60 <HAL_DMA_Abort_IT+0x1a8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d040      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x17c>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a2b      	ldr	r2, [pc, #172]	; (8001e64 <HAL_DMA_Abort_IT+0x1ac>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d03b      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x17c>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a29      	ldr	r2, [pc, #164]	; (8001e68 <HAL_DMA_Abort_IT+0x1b0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d036      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x17c>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a28      	ldr	r2, [pc, #160]	; (8001e6c <HAL_DMA_Abort_IT+0x1b4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d031      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x17c>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a26      	ldr	r2, [pc, #152]	; (8001e70 <HAL_DMA_Abort_IT+0x1b8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d02c      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x17c>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a25      	ldr	r2, [pc, #148]	; (8001e74 <HAL_DMA_Abort_IT+0x1bc>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d027      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x17c>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a23      	ldr	r2, [pc, #140]	; (8001e78 <HAL_DMA_Abort_IT+0x1c0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d022      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x17c>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a22      	ldr	r2, [pc, #136]	; (8001e7c <HAL_DMA_Abort_IT+0x1c4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d01d      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x17c>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a20      	ldr	r2, [pc, #128]	; (8001e80 <HAL_DMA_Abort_IT+0x1c8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d018      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x17c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a1f      	ldr	r2, [pc, #124]	; (8001e84 <HAL_DMA_Abort_IT+0x1cc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d013      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x17c>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1d      	ldr	r2, [pc, #116]	; (8001e88 <HAL_DMA_Abort_IT+0x1d0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00e      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x17c>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <HAL_DMA_Abort_IT+0x1d4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d009      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x17c>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a1a      	ldr	r2, [pc, #104]	; (8001e90 <HAL_DMA_Abort_IT+0x1d8>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d004      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x17c>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a19      	ldr	r2, [pc, #100]	; (8001e94 <HAL_DMA_Abort_IT+0x1dc>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d108      	bne.n	8001e46 <HAL_DMA_Abort_IT+0x18e>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0201 	bic.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	e178      	b.n	8002138 <HAL_DMA_Abort_IT+0x480>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0201 	bic.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	e16f      	b.n	8002138 <HAL_DMA_Abort_IT+0x480>
 8001e58:	40020010 	.word	0x40020010
 8001e5c:	40020028 	.word	0x40020028
 8001e60:	40020040 	.word	0x40020040
 8001e64:	40020058 	.word	0x40020058
 8001e68:	40020070 	.word	0x40020070
 8001e6c:	40020088 	.word	0x40020088
 8001e70:	400200a0 	.word	0x400200a0
 8001e74:	400200b8 	.word	0x400200b8
 8001e78:	40020410 	.word	0x40020410
 8001e7c:	40020428 	.word	0x40020428
 8001e80:	40020440 	.word	0x40020440
 8001e84:	40020458 	.word	0x40020458
 8001e88:	40020470 	.word	0x40020470
 8001e8c:	40020488 	.word	0x40020488
 8001e90:	400204a0 	.word	0x400204a0
 8001e94:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 020e 	bic.w	r2, r2, #14
 8001ea6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a6c      	ldr	r2, [pc, #432]	; (8002060 <HAL_DMA_Abort_IT+0x3a8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d04a      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x290>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a6b      	ldr	r2, [pc, #428]	; (8002064 <HAL_DMA_Abort_IT+0x3ac>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d045      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x290>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a69      	ldr	r2, [pc, #420]	; (8002068 <HAL_DMA_Abort_IT+0x3b0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d040      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x290>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a68      	ldr	r2, [pc, #416]	; (800206c <HAL_DMA_Abort_IT+0x3b4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d03b      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x290>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a66      	ldr	r2, [pc, #408]	; (8002070 <HAL_DMA_Abort_IT+0x3b8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d036      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x290>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a65      	ldr	r2, [pc, #404]	; (8002074 <HAL_DMA_Abort_IT+0x3bc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d031      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x290>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a63      	ldr	r2, [pc, #396]	; (8002078 <HAL_DMA_Abort_IT+0x3c0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d02c      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x290>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a62      	ldr	r2, [pc, #392]	; (800207c <HAL_DMA_Abort_IT+0x3c4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d027      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x290>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a60      	ldr	r2, [pc, #384]	; (8002080 <HAL_DMA_Abort_IT+0x3c8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d022      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x290>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a5f      	ldr	r2, [pc, #380]	; (8002084 <HAL_DMA_Abort_IT+0x3cc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d01d      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x290>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a5d      	ldr	r2, [pc, #372]	; (8002088 <HAL_DMA_Abort_IT+0x3d0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d018      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x290>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a5c      	ldr	r2, [pc, #368]	; (800208c <HAL_DMA_Abort_IT+0x3d4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d013      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x290>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a5a      	ldr	r2, [pc, #360]	; (8002090 <HAL_DMA_Abort_IT+0x3d8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00e      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x290>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a59      	ldr	r2, [pc, #356]	; (8002094 <HAL_DMA_Abort_IT+0x3dc>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d009      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x290>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a57      	ldr	r2, [pc, #348]	; (8002098 <HAL_DMA_Abort_IT+0x3e0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d004      	beq.n	8001f48 <HAL_DMA_Abort_IT+0x290>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a56      	ldr	r2, [pc, #344]	; (800209c <HAL_DMA_Abort_IT+0x3e4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d108      	bne.n	8001f5a <HAL_DMA_Abort_IT+0x2a2>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	e007      	b.n	8001f6a <HAL_DMA_Abort_IT+0x2b2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0201 	bic.w	r2, r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a3c      	ldr	r2, [pc, #240]	; (8002060 <HAL_DMA_Abort_IT+0x3a8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d072      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a3a      	ldr	r2, [pc, #232]	; (8002064 <HAL_DMA_Abort_IT+0x3ac>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d06d      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a39      	ldr	r2, [pc, #228]	; (8002068 <HAL_DMA_Abort_IT+0x3b0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d068      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a37      	ldr	r2, [pc, #220]	; (800206c <HAL_DMA_Abort_IT+0x3b4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d063      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a36      	ldr	r2, [pc, #216]	; (8002070 <HAL_DMA_Abort_IT+0x3b8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d05e      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a34      	ldr	r2, [pc, #208]	; (8002074 <HAL_DMA_Abort_IT+0x3bc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d059      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a33      	ldr	r2, [pc, #204]	; (8002078 <HAL_DMA_Abort_IT+0x3c0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d054      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a31      	ldr	r2, [pc, #196]	; (800207c <HAL_DMA_Abort_IT+0x3c4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d04f      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a30      	ldr	r2, [pc, #192]	; (8002080 <HAL_DMA_Abort_IT+0x3c8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d04a      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a2e      	ldr	r2, [pc, #184]	; (8002084 <HAL_DMA_Abort_IT+0x3cc>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d045      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a2d      	ldr	r2, [pc, #180]	; (8002088 <HAL_DMA_Abort_IT+0x3d0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d040      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a2b      	ldr	r2, [pc, #172]	; (800208c <HAL_DMA_Abort_IT+0x3d4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d03b      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a2a      	ldr	r2, [pc, #168]	; (8002090 <HAL_DMA_Abort_IT+0x3d8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d036      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a28      	ldr	r2, [pc, #160]	; (8002094 <HAL_DMA_Abort_IT+0x3dc>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d031      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a27      	ldr	r2, [pc, #156]	; (8002098 <HAL_DMA_Abort_IT+0x3e0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d02c      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a25      	ldr	r2, [pc, #148]	; (800209c <HAL_DMA_Abort_IT+0x3e4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d027      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a24      	ldr	r2, [pc, #144]	; (80020a0 <HAL_DMA_Abort_IT+0x3e8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d022      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a22      	ldr	r2, [pc, #136]	; (80020a4 <HAL_DMA_Abort_IT+0x3ec>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d01d      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a21      	ldr	r2, [pc, #132]	; (80020a8 <HAL_DMA_Abort_IT+0x3f0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d018      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a1f      	ldr	r2, [pc, #124]	; (80020ac <HAL_DMA_Abort_IT+0x3f4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d013      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a1e      	ldr	r2, [pc, #120]	; (80020b0 <HAL_DMA_Abort_IT+0x3f8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d00e      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1c      	ldr	r2, [pc, #112]	; (80020b4 <HAL_DMA_Abort_IT+0x3fc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d009      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1b      	ldr	r2, [pc, #108]	; (80020b8 <HAL_DMA_Abort_IT+0x400>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d004      	beq.n	800205a <HAL_DMA_Abort_IT+0x3a2>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a19      	ldr	r2, [pc, #100]	; (80020bc <HAL_DMA_Abort_IT+0x404>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d132      	bne.n	80020c0 <HAL_DMA_Abort_IT+0x408>
 800205a:	2301      	movs	r3, #1
 800205c:	e031      	b.n	80020c2 <HAL_DMA_Abort_IT+0x40a>
 800205e:	bf00      	nop
 8002060:	40020010 	.word	0x40020010
 8002064:	40020028 	.word	0x40020028
 8002068:	40020040 	.word	0x40020040
 800206c:	40020058 	.word	0x40020058
 8002070:	40020070 	.word	0x40020070
 8002074:	40020088 	.word	0x40020088
 8002078:	400200a0 	.word	0x400200a0
 800207c:	400200b8 	.word	0x400200b8
 8002080:	40020410 	.word	0x40020410
 8002084:	40020428 	.word	0x40020428
 8002088:	40020440 	.word	0x40020440
 800208c:	40020458 	.word	0x40020458
 8002090:	40020470 	.word	0x40020470
 8002094:	40020488 	.word	0x40020488
 8002098:	400204a0 	.word	0x400204a0
 800209c:	400204b8 	.word	0x400204b8
 80020a0:	58025408 	.word	0x58025408
 80020a4:	5802541c 	.word	0x5802541c
 80020a8:	58025430 	.word	0x58025430
 80020ac:	58025444 	.word	0x58025444
 80020b0:	58025458 	.word	0x58025458
 80020b4:	5802546c 	.word	0x5802546c
 80020b8:	58025480 	.word	0x58025480
 80020bc:	58025494 	.word	0x58025494
 80020c0:	2300      	movs	r3, #0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d028      	beq.n	8002118 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020d4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	2201      	movs	r2, #1
 80020e6:	409a      	lsls	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80020f4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00c      	beq.n	8002118 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800210c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002116:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop

08002144 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002152:	4b89      	ldr	r3, [pc, #548]	; (8002378 <HAL_GPIO_Init+0x234>)
 8002154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002156:	e194      	b.n	8002482 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	2101      	movs	r1, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8186 	beq.w	800247c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	2b01      	cmp	r3, #1
 800217a:	d005      	beq.n	8002188 <HAL_GPIO_Init+0x44>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d130      	bne.n	80021ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021be:	2201      	movs	r2, #1
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	091b      	lsrs	r3, r3, #4
 80021d4:	f003 0201 	and.w	r2, r3, #1
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d017      	beq.n	8002226 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	2203      	movs	r2, #3
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d123      	bne.n	800227a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	08da      	lsrs	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3208      	adds	r2, #8
 800223a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	220f      	movs	r2, #15
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	08da      	lsrs	r2, r3, #3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3208      	adds	r2, #8
 8002274:	69b9      	ldr	r1, [r7, #24]
 8002276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	2203      	movs	r2, #3
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0203 	and.w	r2, r3, #3
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 80e0 	beq.w	800247c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022bc:	4b2f      	ldr	r3, [pc, #188]	; (800237c <HAL_GPIO_Init+0x238>)
 80022be:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80022c2:	4a2e      	ldr	r2, [pc, #184]	; (800237c <HAL_GPIO_Init+0x238>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80022cc:	4b2b      	ldr	r3, [pc, #172]	; (800237c <HAL_GPIO_Init+0x238>)
 80022ce:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022da:	4a29      	ldr	r2, [pc, #164]	; (8002380 <HAL_GPIO_Init+0x23c>)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	3302      	adds	r3, #2
 80022e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	220f      	movs	r2, #15
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a20      	ldr	r2, [pc, #128]	; (8002384 <HAL_GPIO_Init+0x240>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d052      	beq.n	80023ac <HAL_GPIO_Init+0x268>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a1f      	ldr	r2, [pc, #124]	; (8002388 <HAL_GPIO_Init+0x244>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d031      	beq.n	8002372 <HAL_GPIO_Init+0x22e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a1e      	ldr	r2, [pc, #120]	; (800238c <HAL_GPIO_Init+0x248>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d02b      	beq.n	800236e <HAL_GPIO_Init+0x22a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a1d      	ldr	r2, [pc, #116]	; (8002390 <HAL_GPIO_Init+0x24c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d025      	beq.n	800236a <HAL_GPIO_Init+0x226>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <HAL_GPIO_Init+0x250>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d01f      	beq.n	8002366 <HAL_GPIO_Init+0x222>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <HAL_GPIO_Init+0x254>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d019      	beq.n	8002362 <HAL_GPIO_Init+0x21e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a1a      	ldr	r2, [pc, #104]	; (800239c <HAL_GPIO_Init+0x258>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d013      	beq.n	800235e <HAL_GPIO_Init+0x21a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <HAL_GPIO_Init+0x25c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00d      	beq.n	800235a <HAL_GPIO_Init+0x216>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <HAL_GPIO_Init+0x260>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d007      	beq.n	8002356 <HAL_GPIO_Init+0x212>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a17      	ldr	r2, [pc, #92]	; (80023a8 <HAL_GPIO_Init+0x264>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d101      	bne.n	8002352 <HAL_GPIO_Init+0x20e>
 800234e:	2309      	movs	r3, #9
 8002350:	e02d      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 8002352:	230a      	movs	r3, #10
 8002354:	e02b      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 8002356:	2308      	movs	r3, #8
 8002358:	e029      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 800235a:	2307      	movs	r3, #7
 800235c:	e027      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 800235e:	2306      	movs	r3, #6
 8002360:	e025      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 8002362:	2305      	movs	r3, #5
 8002364:	e023      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 8002366:	2304      	movs	r3, #4
 8002368:	e021      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 800236a:	2303      	movs	r3, #3
 800236c:	e01f      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 800236e:	2302      	movs	r3, #2
 8002370:	e01d      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 8002372:	2301      	movs	r3, #1
 8002374:	e01b      	b.n	80023ae <HAL_GPIO_Init+0x26a>
 8002376:	bf00      	nop
 8002378:	58000080 	.word	0x58000080
 800237c:	58024400 	.word	0x58024400
 8002380:	58000400 	.word	0x58000400
 8002384:	58020000 	.word	0x58020000
 8002388:	58020400 	.word	0x58020400
 800238c:	58020800 	.word	0x58020800
 8002390:	58020c00 	.word	0x58020c00
 8002394:	58021000 	.word	0x58021000
 8002398:	58021400 	.word	0x58021400
 800239c:	58021800 	.word	0x58021800
 80023a0:	58021c00 	.word	0x58021c00
 80023a4:	58022000 	.word	0x58022000
 80023a8:	58022400 	.word	0x58022400
 80023ac:	2300      	movs	r3, #0
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	f002 0203 	and.w	r2, r2, #3
 80023b4:	0092      	lsls	r2, r2, #2
 80023b6:	4093      	lsls	r3, r2
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023be:	4938      	ldr	r1, [pc, #224]	; (80024a0 <HAL_GPIO_Init+0x35c>)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	3302      	adds	r3, #2
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80023f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002420:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	3301      	adds	r3, #1
 8002480:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	f47f ae63 	bne.w	8002158 <HAL_GPIO_Init+0x14>
  }
}
 8002492:	bf00      	nop
 8002494:	bf00      	nop
 8002496:	3724      	adds	r7, #36	; 0x24
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	58000400 	.word	0x58000400

080024a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024b4:	787b      	ldrb	r3, [r7, #1]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80024c0:	e003      	b.n	80024ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	041a      	lsls	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	619a      	str	r2, [r3, #24]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024e8:	887a      	ldrh	r2, [r7, #2]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4013      	ands	r3, r2
 80024ee:	041a      	lsls	r2, r3, #16
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43d9      	mvns	r1, r3
 80024f4:	887b      	ldrh	r3, [r7, #2]
 80024f6:	400b      	ands	r3, r1
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	619a      	str	r2, [r3, #24]
}
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002514:	4b29      	ldr	r3, [pc, #164]	; (80025bc <HAL_PWREx_ConfigSupply+0xb0>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	2b06      	cmp	r3, #6
 800251e:	d00a      	beq.n	8002536 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002520:	4b26      	ldr	r3, [pc, #152]	; (80025bc <HAL_PWREx_ConfigSupply+0xb0>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	429a      	cmp	r2, r3
 800252c:	d001      	beq.n	8002532 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e040      	b.n	80025b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	e03e      	b.n	80025b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002536:	4b21      	ldr	r3, [pc, #132]	; (80025bc <HAL_PWREx_ConfigSupply+0xb0>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800253e:	491f      	ldr	r1, [pc, #124]	; (80025bc <HAL_PWREx_ConfigSupply+0xb0>)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4313      	orrs	r3, r2
 8002544:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002546:	f7fe ff59 	bl	80013fc <HAL_GetTick>
 800254a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800254c:	e009      	b.n	8002562 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800254e:	f7fe ff55 	bl	80013fc <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800255c:	d901      	bls.n	8002562 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e028      	b.n	80025b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <HAL_PWREx_ConfigSupply+0xb0>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800256a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256e:	d1ee      	bne.n	800254e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b1e      	cmp	r3, #30
 8002574:	d008      	beq.n	8002588 <HAL_PWREx_ConfigSupply+0x7c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b2e      	cmp	r3, #46	; 0x2e
 800257a:	d005      	beq.n	8002588 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b1d      	cmp	r3, #29
 8002580:	d002      	beq.n	8002588 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b2d      	cmp	r3, #45	; 0x2d
 8002586:	d114      	bne.n	80025b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002588:	f7fe ff38 	bl	80013fc <HAL_GetTick>
 800258c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800258e:	e009      	b.n	80025a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002590:	f7fe ff34 	bl	80013fc <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800259e:	d901      	bls.n	80025a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e007      	b.n	80025b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_PWREx_ConfigSupply+0xb0>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b0:	d1ee      	bne.n	8002590 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	58024800 	.word	0x58024800

080025c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08c      	sub	sp, #48	; 0x30
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d102      	bne.n	80025d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	f000 bc1f 	b.w	8002e12 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80b3 	beq.w	8002748 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e2:	4b95      	ldr	r3, [pc, #596]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025ec:	4b92      	ldr	r3, [pc, #584]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f4:	2b10      	cmp	r3, #16
 80025f6:	d007      	beq.n	8002608 <HAL_RCC_OscConfig+0x48>
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	2b18      	cmp	r3, #24
 80025fc:	d112      	bne.n	8002624 <HAL_RCC_OscConfig+0x64>
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d10d      	bne.n	8002624 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	4b8b      	ldr	r3, [pc, #556]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8098 	beq.w	8002746 <HAL_RCC_OscConfig+0x186>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	f040 8093 	bne.w	8002746 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e3f6      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262c:	d106      	bne.n	800263c <HAL_RCC_OscConfig+0x7c>
 800262e:	4b82      	ldr	r3, [pc, #520]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a81      	ldr	r2, [pc, #516]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e058      	b.n	80026ee <HAL_RCC_OscConfig+0x12e>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d112      	bne.n	800266a <HAL_RCC_OscConfig+0xaa>
 8002644:	4b7c      	ldr	r3, [pc, #496]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a7b      	ldr	r2, [pc, #492]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 800264a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	4b79      	ldr	r3, [pc, #484]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a78      	ldr	r2, [pc, #480]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 8002656:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	4b76      	ldr	r3, [pc, #472]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a75      	ldr	r2, [pc, #468]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 8002662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	e041      	b.n	80026ee <HAL_RCC_OscConfig+0x12e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002672:	d112      	bne.n	800269a <HAL_RCC_OscConfig+0xda>
 8002674:	4b70      	ldr	r3, [pc, #448]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a6f      	ldr	r2, [pc, #444]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 800267a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	4b6d      	ldr	r3, [pc, #436]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a6c      	ldr	r2, [pc, #432]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 8002686:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b6a      	ldr	r3, [pc, #424]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a69      	ldr	r2, [pc, #420]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 8002692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	e029      	b.n	80026ee <HAL_RCC_OscConfig+0x12e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80026a2:	d112      	bne.n	80026ca <HAL_RCC_OscConfig+0x10a>
 80026a4:	4b64      	ldr	r3, [pc, #400]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a63      	ldr	r2, [pc, #396]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 80026aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b61      	ldr	r3, [pc, #388]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a60      	ldr	r2, [pc, #384]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 80026b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b5e      	ldr	r3, [pc, #376]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a5d      	ldr	r2, [pc, #372]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 80026c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	e011      	b.n	80026ee <HAL_RCC_OscConfig+0x12e>
 80026ca:	4b5b      	ldr	r3, [pc, #364]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a5a      	ldr	r2, [pc, #360]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 80026d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b58      	ldr	r3, [pc, #352]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a57      	ldr	r2, [pc, #348]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 80026dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	4b55      	ldr	r3, [pc, #340]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a54      	ldr	r2, [pc, #336]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 80026e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80026ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d013      	beq.n	800271e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f6:	f7fe fe81 	bl	80013fc <HAL_GetTick>
 80026fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026fe:	f7fe fe7d 	bl	80013fc <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b64      	cmp	r3, #100	; 0x64
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e380      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002710:	4b49      	ldr	r3, [pc, #292]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x13e>
 800271c:	e014      	b.n	8002748 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271e:	f7fe fe6d 	bl	80013fc <HAL_GetTick>
 8002722:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002726:	f7fe fe69 	bl	80013fc <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b64      	cmp	r3, #100	; 0x64
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e36c      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002738:	4b3f      	ldr	r3, [pc, #252]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f0      	bne.n	8002726 <HAL_RCC_OscConfig+0x166>
 8002744:	e000      	b.n	8002748 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002746:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 808c 	beq.w	800286e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002756:	4b38      	ldr	r3, [pc, #224]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800275e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002760:	4b35      	ldr	r3, [pc, #212]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d007      	beq.n	800277c <HAL_RCC_OscConfig+0x1bc>
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	2b18      	cmp	r3, #24
 8002770:	d137      	bne.n	80027e2 <HAL_RCC_OscConfig+0x222>
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d132      	bne.n	80027e2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800277c:	4b2e      	ldr	r3, [pc, #184]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_OscConfig+0x1d4>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e33e      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002794:	4b28      	ldr	r3, [pc, #160]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 0219 	bic.w	r2, r3, #25
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4925      	ldr	r1, [pc, #148]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a6:	f7fe fe29 	bl	80013fc <HAL_GetTick>
 80027aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ae:	f7fe fe25 	bl	80013fc <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e328      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027cc:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	061b      	lsls	r3, r3, #24
 80027da:	4917      	ldr	r1, [pc, #92]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e0:	e045      	b.n	800286e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d028      	beq.n	800283c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027ea:	4b13      	ldr	r3, [pc, #76]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 0219 	bic.w	r2, r3, #25
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	4910      	ldr	r1, [pc, #64]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7fe fdfe 	bl	80013fc <HAL_GetTick>
 8002800:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002804:	f7fe fdfa 	bl	80013fc <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e2fd      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002816:	4b08      	ldr	r3, [pc, #32]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	061b      	lsls	r3, r3, #24
 8002830:	4901      	ldr	r1, [pc, #4]	; (8002838 <HAL_RCC_OscConfig+0x278>)
 8002832:	4313      	orrs	r3, r2
 8002834:	604b      	str	r3, [r1, #4]
 8002836:	e01a      	b.n	800286e <HAL_RCC_OscConfig+0x2ae>
 8002838:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283c:	4b97      	ldr	r3, [pc, #604]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a96      	ldr	r2, [pc, #600]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002848:	f7fe fdd8 	bl	80013fc <HAL_GetTick>
 800284c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002850:	f7fe fdd4 	bl	80013fc <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e2d7      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002862:	4b8e      	ldr	r3, [pc, #568]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	2b00      	cmp	r3, #0
 8002878:	d06a      	beq.n	8002950 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800287a:	4b88      	ldr	r3, [pc, #544]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002882:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002884:	4b85      	ldr	r3, [pc, #532]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	2b08      	cmp	r3, #8
 800288e:	d007      	beq.n	80028a0 <HAL_RCC_OscConfig+0x2e0>
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	2b18      	cmp	r3, #24
 8002894:	d11b      	bne.n	80028ce <HAL_RCC_OscConfig+0x30e>
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	2b01      	cmp	r3, #1
 800289e:	d116      	bne.n	80028ce <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028a0:	4b7e      	ldr	r3, [pc, #504]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_RCC_OscConfig+0x2f8>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	2b80      	cmp	r3, #128	; 0x80
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e2ac      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028b8:	4b78      	ldr	r3, [pc, #480]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	061b      	lsls	r3, r3, #24
 80028c6:	4975      	ldr	r1, [pc, #468]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028cc:	e040      	b.n	8002950 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d023      	beq.n	800291e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80028d6:	4b71      	ldr	r3, [pc, #452]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a70      	ldr	r2, [pc, #448]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 80028dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe fd8b 	bl	80013fc <HAL_GetTick>
 80028e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028ea:	f7fe fd87 	bl	80013fc <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e28a      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028fc:	4b67      	ldr	r3, [pc, #412]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002908:	4b64      	ldr	r3, [pc, #400]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	061b      	lsls	r3, r3, #24
 8002916:	4961      	ldr	r1, [pc, #388]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 8002918:	4313      	orrs	r3, r2
 800291a:	60cb      	str	r3, [r1, #12]
 800291c:	e018      	b.n	8002950 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800291e:	4b5f      	ldr	r3, [pc, #380]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a5e      	ldr	r2, [pc, #376]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 8002924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292a:	f7fe fd67 	bl	80013fc <HAL_GetTick>
 800292e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002932:	f7fe fd63 	bl	80013fc <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e266      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002944:	4b55      	ldr	r3, [pc, #340]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f0      	bne.n	8002932 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	d036      	beq.n	80029ca <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d019      	beq.n	8002998 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002964:	4b4d      	ldr	r3, [pc, #308]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 8002966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002968:	4a4c      	ldr	r2, [pc, #304]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002970:	f7fe fd44 	bl	80013fc <HAL_GetTick>
 8002974:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002978:	f7fe fd40 	bl	80013fc <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e243      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800298a:	4b44      	ldr	r3, [pc, #272]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 800298c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x3b8>
 8002996:	e018      	b.n	80029ca <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002998:	4b40      	ldr	r3, [pc, #256]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 800299a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800299c:	4a3f      	ldr	r2, [pc, #252]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a4:	f7fe fd2a 	bl	80013fc <HAL_GetTick>
 80029a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ac:	f7fe fd26 	bl	80013fc <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e229      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029be:	4b37      	ldr	r3, [pc, #220]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 80029c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d036      	beq.n	8002a44 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d019      	beq.n	8002a12 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029de:	4b2f      	ldr	r3, [pc, #188]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a2e      	ldr	r2, [pc, #184]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 80029e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029ea:	f7fe fd07 	bl	80013fc <HAL_GetTick>
 80029ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029f2:	f7fe fd03 	bl	80013fc <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e206      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a04:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x432>
 8002a10:	e018      	b.n	8002a44 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a12:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a21      	ldr	r2, [pc, #132]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 8002a18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a1e:	f7fe fced 	bl	80013fc <HAL_GetTick>
 8002a22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a26:	f7fe fce9 	bl	80013fc <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e1ec      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a38:	4b18      	ldr	r3, [pc, #96]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f0      	bne.n	8002a26 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80af 	beq.w	8002bb0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <HAL_RCC_OscConfig+0x4e0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a12      	ldr	r2, [pc, #72]	; (8002aa0 <HAL_RCC_OscConfig+0x4e0>)
 8002a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a5e:	f7fe fccd 	bl	80013fc <HAL_GetTick>
 8002a62:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a66:	f7fe fcc9 	bl	80013fc <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b64      	cmp	r3, #100	; 0x64
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e1cc      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_RCC_OscConfig+0x4e0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d10b      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4e4>
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a90:	4a02      	ldr	r2, [pc, #8]	; (8002a9c <HAL_RCC_OscConfig+0x4dc>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	6713      	str	r3, [r2, #112]	; 0x70
 8002a98:	e05b      	b.n	8002b52 <HAL_RCC_OscConfig+0x592>
 8002a9a:	bf00      	nop
 8002a9c:	58024400 	.word	0x58024400
 8002aa0:	58024800 	.word	0x58024800
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d112      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x512>
 8002aac:	4b9d      	ldr	r3, [pc, #628]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab0:	4a9c      	ldr	r2, [pc, #624]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002ab2:	f023 0301 	bic.w	r3, r3, #1
 8002ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab8:	4b9a      	ldr	r3, [pc, #616]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abc:	4a99      	ldr	r2, [pc, #612]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac4:	4b97      	ldr	r3, [pc, #604]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac8:	4a96      	ldr	r2, [pc, #600]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002aca:	f023 0304 	bic.w	r3, r3, #4
 8002ace:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad0:	e03f      	b.n	8002b52 <HAL_RCC_OscConfig+0x592>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b05      	cmp	r3, #5
 8002ad8:	d112      	bne.n	8002b00 <HAL_RCC_OscConfig+0x540>
 8002ada:	4b92      	ldr	r3, [pc, #584]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	4a91      	ldr	r2, [pc, #580]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002ae0:	f043 0304 	orr.w	r3, r3, #4
 8002ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae6:	4b8f      	ldr	r3, [pc, #572]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aea:	4a8e      	ldr	r2, [pc, #568]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002af0:	6713      	str	r3, [r2, #112]	; 0x70
 8002af2:	4b8c      	ldr	r3, [pc, #560]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	4a8b      	ldr	r2, [pc, #556]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6713      	str	r3, [r2, #112]	; 0x70
 8002afe:	e028      	b.n	8002b52 <HAL_RCC_OscConfig+0x592>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b85      	cmp	r3, #133	; 0x85
 8002b06:	d112      	bne.n	8002b2e <HAL_RCC_OscConfig+0x56e>
 8002b08:	4b86      	ldr	r3, [pc, #536]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	4a85      	ldr	r2, [pc, #532]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002b0e:	f043 0304 	orr.w	r3, r3, #4
 8002b12:	6713      	str	r3, [r2, #112]	; 0x70
 8002b14:	4b83      	ldr	r3, [pc, #524]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	4a82      	ldr	r2, [pc, #520]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b20:	4b80      	ldr	r3, [pc, #512]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	4a7f      	ldr	r2, [pc, #508]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2c:	e011      	b.n	8002b52 <HAL_RCC_OscConfig+0x592>
 8002b2e:	4b7d      	ldr	r3, [pc, #500]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	4a7c      	ldr	r2, [pc, #496]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3a:	4b7a      	ldr	r3, [pc, #488]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	4a79      	ldr	r2, [pc, #484]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002b40:	f023 0304 	bic.w	r3, r3, #4
 8002b44:	6713      	str	r3, [r2, #112]	; 0x70
 8002b46:	4b77      	ldr	r3, [pc, #476]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	4a76      	ldr	r2, [pc, #472]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d015      	beq.n	8002b86 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5a:	f7fe fc4f 	bl	80013fc <HAL_GetTick>
 8002b5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b60:	e00a      	b.n	8002b78 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b62:	f7fe fc4b 	bl	80013fc <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e14c      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b78:	4b6a      	ldr	r3, [pc, #424]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0ee      	beq.n	8002b62 <HAL_RCC_OscConfig+0x5a2>
 8002b84:	e014      	b.n	8002bb0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7fe fc39 	bl	80013fc <HAL_GetTick>
 8002b8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8e:	f7fe fc35 	bl	80013fc <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e136      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ba4:	4b5f      	ldr	r3, [pc, #380]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1ee      	bne.n	8002b8e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 812b 	beq.w	8002e10 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002bba:	4b5a      	ldr	r3, [pc, #360]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bc2:	2b18      	cmp	r3, #24
 8002bc4:	f000 80bb 	beq.w	8002d3e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	f040 8095 	bne.w	8002cfc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd2:	4b54      	ldr	r3, [pc, #336]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a53      	ldr	r2, [pc, #332]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002bd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bde:	f7fe fc0d 	bl	80013fc <HAL_GetTick>
 8002be2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be6:	f7fe fc09 	bl	80013fc <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e10c      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bf8:	4b4a      	ldr	r3, [pc, #296]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1f0      	bne.n	8002be6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c04:	4b47      	ldr	r3, [pc, #284]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002c06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c08:	4b47      	ldr	r3, [pc, #284]	; (8002d28 <HAL_RCC_OscConfig+0x768>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c14:	0112      	lsls	r2, r2, #4
 8002c16:	430a      	orrs	r2, r1
 8002c18:	4942      	ldr	r1, [pc, #264]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	628b      	str	r3, [r1, #40]	; 0x28
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	3b01      	subs	r3, #1
 8002c24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	025b      	lsls	r3, r3, #9
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	041b      	lsls	r3, r3, #16
 8002c3c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c46:	3b01      	subs	r3, #1
 8002c48:	061b      	lsls	r3, r3, #24
 8002c4a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c4e:	4935      	ldr	r1, [pc, #212]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c54:	4b33      	ldr	r3, [pc, #204]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	4a32      	ldr	r2, [pc, #200]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c60:	4b30      	ldr	r3, [pc, #192]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c64:	4b31      	ldr	r3, [pc, #196]	; (8002d2c <HAL_RCC_OscConfig+0x76c>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c6c:	00d2      	lsls	r2, r2, #3
 8002c6e:	492d      	ldr	r1, [pc, #180]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c74:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	f023 020c 	bic.w	r2, r3, #12
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	4928      	ldr	r1, [pc, #160]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c86:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	f023 0202 	bic.w	r2, r3, #2
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	4924      	ldr	r1, [pc, #144]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c98:	4b22      	ldr	r3, [pc, #136]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9c:	4a21      	ldr	r2, [pc, #132]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ca4:	4b1f      	ldr	r3, [pc, #124]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	4a1e      	ldr	r2, [pc, #120]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cb0:	4b1c      	ldr	r3, [pc, #112]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	4a1b      	ldr	r2, [pc, #108]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002cb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002cbc:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	4a18      	ldr	r2, [pc, #96]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc8:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a15      	ldr	r2, [pc, #84]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe fb92 	bl	80013fc <HAL_GetTick>
 8002cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7fe fb8e 	bl	80013fc <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e091      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cee:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x71c>
 8002cfa:	e089      	b.n	8002e10 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfc:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a08      	ldr	r2, [pc, #32]	; (8002d24 <HAL_RCC_OscConfig+0x764>)
 8002d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fe fb78 	bl	80013fc <HAL_GetTick>
 8002d0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d0e:	e00f      	b.n	8002d30 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d10:	f7fe fb74 	bl	80013fc <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d908      	bls.n	8002d30 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e077      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
 8002d22:	bf00      	nop
 8002d24:	58024400 	.word	0x58024400
 8002d28:	fffffc0c 	.word	0xfffffc0c
 8002d2c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d30:	4b3a      	ldr	r3, [pc, #232]	; (8002e1c <HAL_RCC_OscConfig+0x85c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1e9      	bne.n	8002d10 <HAL_RCC_OscConfig+0x750>
 8002d3c:	e068      	b.n	8002e10 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d3e:	4b37      	ldr	r3, [pc, #220]	; (8002e1c <HAL_RCC_OscConfig+0x85c>)
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d44:	4b35      	ldr	r3, [pc, #212]	; (8002e1c <HAL_RCC_OscConfig+0x85c>)
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d031      	beq.n	8002db6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f003 0203 	and.w	r2, r3, #3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d12a      	bne.n	8002db6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	091b      	lsrs	r3, r3, #4
 8002d64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d122      	bne.n	8002db6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d11a      	bne.n	8002db6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	0a5b      	lsrs	r3, r3, #9
 8002d84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d111      	bne.n	8002db6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d108      	bne.n	8002db6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	0e1b      	lsrs	r3, r3, #24
 8002da8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d001      	beq.n	8002dba <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e02b      	b.n	8002e12 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002dba:	4b18      	ldr	r3, [pc, #96]	; (8002e1c <HAL_RCC_OscConfig+0x85c>)
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbe:	08db      	lsrs	r3, r3, #3
 8002dc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002dc4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d01f      	beq.n	8002e10 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002dd0:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <HAL_RCC_OscConfig+0x85c>)
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	4a11      	ldr	r2, [pc, #68]	; (8002e1c <HAL_RCC_OscConfig+0x85c>)
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ddc:	f7fe fb0e 	bl	80013fc <HAL_GetTick>
 8002de0:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002de2:	bf00      	nop
 8002de4:	f7fe fb0a 	bl	80013fc <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d0f9      	beq.n	8002de4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002df0:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <HAL_RCC_OscConfig+0x85c>)
 8002df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002df4:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_RCC_OscConfig+0x860>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002dfc:	00d2      	lsls	r2, r2, #3
 8002dfe:	4907      	ldr	r1, [pc, #28]	; (8002e1c <HAL_RCC_OscConfig+0x85c>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_RCC_OscConfig+0x85c>)
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <HAL_RCC_OscConfig+0x85c>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3730      	adds	r7, #48	; 0x30
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	58024400 	.word	0x58024400
 8002e20:	ffff0007 	.word	0xffff0007

08002e24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e19c      	b.n	8003172 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e38:	4b8a      	ldr	r3, [pc, #552]	; (8003064 <HAL_RCC_ClockConfig+0x240>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d910      	bls.n	8002e68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b87      	ldr	r3, [pc, #540]	; (8003064 <HAL_RCC_ClockConfig+0x240>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 020f 	bic.w	r2, r3, #15
 8002e4e:	4985      	ldr	r1, [pc, #532]	; (8003064 <HAL_RCC_ClockConfig+0x240>)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e56:	4b83      	ldr	r3, [pc, #524]	; (8003064 <HAL_RCC_ClockConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e184      	b.n	8003172 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d010      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	4b7b      	ldr	r3, [pc, #492]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d908      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e84:	4b78      	ldr	r3, [pc, #480]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	4975      	ldr	r1, [pc, #468]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d010      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	4b70      	ldr	r3, [pc, #448]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d908      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002eb2:	4b6d      	ldr	r3, [pc, #436]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	496a      	ldr	r1, [pc, #424]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d010      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699a      	ldr	r2, [r3, #24]
 8002ed4:	4b64      	ldr	r3, [pc, #400]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d908      	bls.n	8002ef2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ee0:	4b61      	ldr	r3, [pc, #388]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	495e      	ldr	r1, [pc, #376]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d010      	beq.n	8002f20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69da      	ldr	r2, [r3, #28]
 8002f02:	4b59      	ldr	r3, [pc, #356]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d908      	bls.n	8002f20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f0e:	4b56      	ldr	r3, [pc, #344]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	4953      	ldr	r1, [pc, #332]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d010      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	4b4d      	ldr	r3, [pc, #308]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d908      	bls.n	8002f4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f3c:	4b4a      	ldr	r3, [pc, #296]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	f023 020f 	bic.w	r2, r3, #15
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4947      	ldr	r1, [pc, #284]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d055      	beq.n	8003006 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f5a:	4b43      	ldr	r3, [pc, #268]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	4940      	ldr	r1, [pc, #256]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d107      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f74:	4b3c      	ldr	r3, [pc, #240]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d121      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0f6      	b.n	8003172 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f8c:	4b36      	ldr	r3, [pc, #216]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d115      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0ea      	b.n	8003172 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fa4:	4b30      	ldr	r3, [pc, #192]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e0de      	b.n	8003172 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fb4:	4b2c      	ldr	r3, [pc, #176]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0d6      	b.n	8003172 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fc4:	4b28      	ldr	r3, [pc, #160]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f023 0207 	bic.w	r2, r3, #7
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4925      	ldr	r1, [pc, #148]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd6:	f7fe fa11 	bl	80013fc <HAL_GetTick>
 8002fda:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fde:	f7fe fa0d 	bl	80013fc <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e0be      	b.n	8003172 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff4:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	429a      	cmp	r2, r3
 8003004:	d1eb      	bne.n	8002fde <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d010      	beq.n	8003034 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	4b14      	ldr	r3, [pc, #80]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	429a      	cmp	r2, r3
 8003020:	d208      	bcs.n	8003034 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003022:	4b11      	ldr	r3, [pc, #68]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f023 020f 	bic.w	r2, r3, #15
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	490e      	ldr	r1, [pc, #56]	; (8003068 <HAL_RCC_ClockConfig+0x244>)
 8003030:	4313      	orrs	r3, r2
 8003032:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003034:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_RCC_ClockConfig+0x240>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d214      	bcs.n	800306c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b08      	ldr	r3, [pc, #32]	; (8003064 <HAL_RCC_ClockConfig+0x240>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 020f 	bic.w	r2, r3, #15
 800304a:	4906      	ldr	r1, [pc, #24]	; (8003064 <HAL_RCC_ClockConfig+0x240>)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	4313      	orrs	r3, r2
 8003050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b04      	ldr	r3, [pc, #16]	; (8003064 <HAL_RCC_ClockConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d005      	beq.n	800306c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e086      	b.n	8003172 <HAL_RCC_ClockConfig+0x34e>
 8003064:	52002000 	.word	0x52002000
 8003068:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d010      	beq.n	800309a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	4b3f      	ldr	r3, [pc, #252]	; (800317c <HAL_RCC_ClockConfig+0x358>)
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003084:	429a      	cmp	r2, r3
 8003086:	d208      	bcs.n	800309a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003088:	4b3c      	ldr	r3, [pc, #240]	; (800317c <HAL_RCC_ClockConfig+0x358>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	4939      	ldr	r1, [pc, #228]	; (800317c <HAL_RCC_ClockConfig+0x358>)
 8003096:	4313      	orrs	r3, r2
 8003098:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d010      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	4b34      	ldr	r3, [pc, #208]	; (800317c <HAL_RCC_ClockConfig+0x358>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d208      	bcs.n	80030c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030b6:	4b31      	ldr	r3, [pc, #196]	; (800317c <HAL_RCC_ClockConfig+0x358>)
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	492e      	ldr	r1, [pc, #184]	; (800317c <HAL_RCC_ClockConfig+0x358>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d010      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699a      	ldr	r2, [r3, #24]
 80030d8:	4b28      	ldr	r3, [pc, #160]	; (800317c <HAL_RCC_ClockConfig+0x358>)
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d208      	bcs.n	80030f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030e4:	4b25      	ldr	r3, [pc, #148]	; (800317c <HAL_RCC_ClockConfig+0x358>)
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	4922      	ldr	r1, [pc, #136]	; (800317c <HAL_RCC_ClockConfig+0x358>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d010      	beq.n	8003124 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69da      	ldr	r2, [r3, #28]
 8003106:	4b1d      	ldr	r3, [pc, #116]	; (800317c <HAL_RCC_ClockConfig+0x358>)
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800310e:	429a      	cmp	r2, r3
 8003110:	d208      	bcs.n	8003124 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003112:	4b1a      	ldr	r3, [pc, #104]	; (800317c <HAL_RCC_ClockConfig+0x358>)
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	4917      	ldr	r1, [pc, #92]	; (800317c <HAL_RCC_ClockConfig+0x358>)
 8003120:	4313      	orrs	r3, r2
 8003122:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003124:	f000 f834 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 8003128:	4602      	mov	r2, r0
 800312a:	4b14      	ldr	r3, [pc, #80]	; (800317c <HAL_RCC_ClockConfig+0x358>)
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	0a1b      	lsrs	r3, r3, #8
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	4912      	ldr	r1, [pc, #72]	; (8003180 <HAL_RCC_ClockConfig+0x35c>)
 8003136:	5ccb      	ldrb	r3, [r1, r3]
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	fa22 f303 	lsr.w	r3, r2, r3
 8003140:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003142:	4b0e      	ldr	r3, [pc, #56]	; (800317c <HAL_RCC_ClockConfig+0x358>)
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	4a0d      	ldr	r2, [pc, #52]	; (8003180 <HAL_RCC_ClockConfig+0x35c>)
 800314c:	5cd3      	ldrb	r3, [r2, r3]
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
 8003158:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <HAL_RCC_ClockConfig+0x360>)
 800315a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800315c:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <HAL_RCC_ClockConfig+0x364>)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003162:	4b0a      	ldr	r3, [pc, #40]	; (800318c <HAL_RCC_ClockConfig+0x368>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe f8fe 	bl	8001368 <HAL_InitTick>
 800316c:	4603      	mov	r3, r0
 800316e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003170:	7bfb      	ldrb	r3, [r7, #15]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	58024400 	.word	0x58024400
 8003180:	080093cc 	.word	0x080093cc
 8003184:	24000004 	.word	0x24000004
 8003188:	24000000 	.word	0x24000000
 800318c:	24000008 	.word	0x24000008

08003190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003190:	b480      	push	{r7}
 8003192:	b089      	sub	sp, #36	; 0x24
 8003194:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003196:	4bb3      	ldr	r3, [pc, #716]	; (8003464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800319e:	2b18      	cmp	r3, #24
 80031a0:	f200 8155 	bhi.w	800344e <HAL_RCC_GetSysClockFreq+0x2be>
 80031a4:	a201      	add	r2, pc, #4	; (adr r2, 80031ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80031a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031aa:	bf00      	nop
 80031ac:	08003211 	.word	0x08003211
 80031b0:	0800344f 	.word	0x0800344f
 80031b4:	0800344f 	.word	0x0800344f
 80031b8:	0800344f 	.word	0x0800344f
 80031bc:	0800344f 	.word	0x0800344f
 80031c0:	0800344f 	.word	0x0800344f
 80031c4:	0800344f 	.word	0x0800344f
 80031c8:	0800344f 	.word	0x0800344f
 80031cc:	08003237 	.word	0x08003237
 80031d0:	0800344f 	.word	0x0800344f
 80031d4:	0800344f 	.word	0x0800344f
 80031d8:	0800344f 	.word	0x0800344f
 80031dc:	0800344f 	.word	0x0800344f
 80031e0:	0800344f 	.word	0x0800344f
 80031e4:	0800344f 	.word	0x0800344f
 80031e8:	0800344f 	.word	0x0800344f
 80031ec:	0800323d 	.word	0x0800323d
 80031f0:	0800344f 	.word	0x0800344f
 80031f4:	0800344f 	.word	0x0800344f
 80031f8:	0800344f 	.word	0x0800344f
 80031fc:	0800344f 	.word	0x0800344f
 8003200:	0800344f 	.word	0x0800344f
 8003204:	0800344f 	.word	0x0800344f
 8003208:	0800344f 	.word	0x0800344f
 800320c:	08003243 	.word	0x08003243
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003210:	4b94      	ldr	r3, [pc, #592]	; (8003464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b00      	cmp	r3, #0
 800321a:	d009      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800321c:	4b91      	ldr	r3, [pc, #580]	; (8003464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	08db      	lsrs	r3, r3, #3
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	4a90      	ldr	r2, [pc, #576]	; (8003468 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
 800322c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800322e:	e111      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003230:	4b8d      	ldr	r3, [pc, #564]	; (8003468 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003232:	61bb      	str	r3, [r7, #24]
      break;
 8003234:	e10e      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003236:	4b8d      	ldr	r3, [pc, #564]	; (800346c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003238:	61bb      	str	r3, [r7, #24]
      break;
 800323a:	e10b      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800323c:	4b8c      	ldr	r3, [pc, #560]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800323e:	61bb      	str	r3, [r7, #24]
      break;
 8003240:	e108      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003242:	4b88      	ldr	r3, [pc, #544]	; (8003464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800324c:	4b85      	ldr	r3, [pc, #532]	; (8003464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003256:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003258:	4b82      	ldr	r3, [pc, #520]	; (8003464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003262:	4b80      	ldr	r3, [pc, #512]	; (8003464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003266:	08db      	lsrs	r3, r3, #3
 8003268:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800327a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80e1 	beq.w	8003448 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b02      	cmp	r3, #2
 800328a:	f000 8083 	beq.w	8003394 <HAL_RCC_GetSysClockFreq+0x204>
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2b02      	cmp	r3, #2
 8003292:	f200 80a1 	bhi.w	80033d8 <HAL_RCC_GetSysClockFreq+0x248>
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x114>
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d056      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x1c0>
 80032a2:	e099      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032a4:	4b6f      	ldr	r3, [pc, #444]	; (8003464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d02d      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032b0:	4b6c      	ldr	r3, [pc, #432]	; (8003464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	08db      	lsrs	r3, r3, #3
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	4a6b      	ldr	r2, [pc, #428]	; (8003468 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032bc:	fa22 f303 	lsr.w	r3, r2, r3
 80032c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	ee07 3a90 	vmov	s15, r3
 80032c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	ee07 3a90 	vmov	s15, r3
 80032d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032da:	4b62      	ldr	r3, [pc, #392]	; (8003464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032e2:	ee07 3a90 	vmov	s15, r3
 80032e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003474 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003306:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800330a:	e087      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003316:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003478 <HAL_RCC_GetSysClockFreq+0x2e8>
 800331a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800331e:	4b51      	ldr	r3, [pc, #324]	; (8003464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800332e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003332:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003474 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800333a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800333e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800334e:	e065      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800347c <HAL_RCC_GetSysClockFreq+0x2ec>
 800335e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003362:	4b40      	ldr	r3, [pc, #256]	; (8003464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800336a:	ee07 3a90 	vmov	s15, r3
 800336e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003372:	ed97 6a02 	vldr	s12, [r7, #8]
 8003376:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003474 <HAL_RCC_GetSysClockFreq+0x2e4>
 800337a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800337e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800338a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003392:	e043      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003480 <HAL_RCC_GetSysClockFreq+0x2f0>
 80033a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033a6:	4b2f      	ldr	r3, [pc, #188]	; (8003464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ae:	ee07 3a90 	vmov	s15, r3
 80033b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003474 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033d6:	e021      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800347c <HAL_RCC_GetSysClockFreq+0x2ec>
 80033e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ea:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80033fe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003474 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800340a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800340e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003416:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800341a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800341c:	4b11      	ldr	r3, [pc, #68]	; (8003464 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	0a5b      	lsrs	r3, r3, #9
 8003422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003426:	3301      	adds	r3, #1
 8003428:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	ee07 3a90 	vmov	s15, r3
 8003430:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003434:	edd7 6a07 	vldr	s13, [r7, #28]
 8003438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800343c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003440:	ee17 3a90 	vmov	r3, s15
 8003444:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003446:	e005      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	61bb      	str	r3, [r7, #24]
      break;
 800344c:	e002      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800344e:	4b07      	ldr	r3, [pc, #28]	; (800346c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003450:	61bb      	str	r3, [r7, #24]
      break;
 8003452:	bf00      	nop
  }

  return sysclockfreq;
 8003454:	69bb      	ldr	r3, [r7, #24]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3724      	adds	r7, #36	; 0x24
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	58024400 	.word	0x58024400
 8003468:	03d09000 	.word	0x03d09000
 800346c:	003d0900 	.word	0x003d0900
 8003470:	007a1200 	.word	0x007a1200
 8003474:	46000000 	.word	0x46000000
 8003478:	4c742400 	.word	0x4c742400
 800347c:	4a742400 	.word	0x4a742400
 8003480:	4af42400 	.word	0x4af42400

08003484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800348a:	f7ff fe81 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 800348e:	4602      	mov	r2, r0
 8003490:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	0a1b      	lsrs	r3, r3, #8
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	490f      	ldr	r1, [pc, #60]	; (80034d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800349c:	5ccb      	ldrb	r3, [r1, r3]
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	fa22 f303 	lsr.w	r3, r2, r3
 80034a6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80034a8:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80034b2:	5cd3      	ldrb	r3, [r2, r3]
 80034b4:	f003 031f 	and.w	r3, r3, #31
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	fa22 f303 	lsr.w	r3, r2, r3
 80034be:	4a07      	ldr	r2, [pc, #28]	; (80034dc <HAL_RCC_GetHCLKFreq+0x58>)
 80034c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034c2:	4a07      	ldr	r2, [pc, #28]	; (80034e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80034c8:	4b04      	ldr	r3, [pc, #16]	; (80034dc <HAL_RCC_GetHCLKFreq+0x58>)
 80034ca:	681b      	ldr	r3, [r3, #0]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	58024400 	.word	0x58024400
 80034d8:	080093cc 	.word	0x080093cc
 80034dc:	24000004 	.word	0x24000004
 80034e0:	24000000 	.word	0x24000000

080034e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80034e8:	f7ff ffcc 	bl	8003484 <HAL_RCC_GetHCLKFreq>
 80034ec:	4602      	mov	r2, r0
 80034ee:	4b06      	ldr	r3, [pc, #24]	; (8003508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	091b      	lsrs	r3, r3, #4
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	4904      	ldr	r1, [pc, #16]	; (800350c <HAL_RCC_GetPCLK1Freq+0x28>)
 80034fa:	5ccb      	ldrb	r3, [r1, r3]
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003504:	4618      	mov	r0, r3
 8003506:	bd80      	pop	{r7, pc}
 8003508:	58024400 	.word	0x58024400
 800350c:	080093cc 	.word	0x080093cc

08003510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003514:	f7ff ffb6 	bl	8003484 <HAL_RCC_GetHCLKFreq>
 8003518:	4602      	mov	r2, r0
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <HAL_RCC_GetPCLK2Freq+0x24>)
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	0a1b      	lsrs	r3, r3, #8
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	4904      	ldr	r1, [pc, #16]	; (8003538 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003526:	5ccb      	ldrb	r3, [r1, r3]
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003530:	4618      	mov	r0, r3
 8003532:	bd80      	pop	{r7, pc}
 8003534:	58024400 	.word	0x58024400
 8003538:	080093cc 	.word	0x080093cc

0800353c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800353c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003540:	b0c8      	sub	sp, #288	; 0x120
 8003542:	af00      	add	r7, sp, #0
 8003544:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003548:	2300      	movs	r3, #0
 800354a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800354e:	2300      	movs	r3, #0
 8003550:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003560:	2500      	movs	r5, #0
 8003562:	ea54 0305 	orrs.w	r3, r4, r5
 8003566:	d049      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003568:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800356c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800356e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003572:	d02f      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003574:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003578:	d828      	bhi.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800357a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800357e:	d01a      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003580:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003584:	d822      	bhi.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800358a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800358e:	d007      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003590:	e01c      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003592:	4ba7      	ldr	r3, [pc, #668]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003596:	4aa6      	ldr	r2, [pc, #664]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800359c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800359e:	e01a      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a4:	3308      	adds	r3, #8
 80035a6:	2102      	movs	r1, #2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f001 fc43 	bl	8004e34 <RCCEx_PLL2_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035b4:	e00f      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ba:	3328      	adds	r3, #40	; 0x28
 80035bc:	2102      	movs	r1, #2
 80035be:	4618      	mov	r0, r3
 80035c0:	f001 fcea 	bl	8004f98 <RCCEx_PLL3_Config>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035ca:	e004      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035d2:	e000      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80035d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10a      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80035de:	4b94      	ldr	r3, [pc, #592]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80035e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ec:	4a90      	ldr	r2, [pc, #576]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035ee:	430b      	orrs	r3, r1
 80035f0:	6513      	str	r3, [r2, #80]	; 0x50
 80035f2:	e003      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003604:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003608:	f04f 0900 	mov.w	r9, #0
 800360c:	ea58 0309 	orrs.w	r3, r8, r9
 8003610:	d047      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003618:	2b04      	cmp	r3, #4
 800361a:	d82a      	bhi.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800361c:	a201      	add	r2, pc, #4	; (adr r2, 8003624 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800361e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003622:	bf00      	nop
 8003624:	08003639 	.word	0x08003639
 8003628:	08003647 	.word	0x08003647
 800362c:	0800365d 	.word	0x0800365d
 8003630:	0800367b 	.word	0x0800367b
 8003634:	0800367b 	.word	0x0800367b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003638:	4b7d      	ldr	r3, [pc, #500]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363c:	4a7c      	ldr	r2, [pc, #496]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800363e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003642:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003644:	e01a      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800364a:	3308      	adds	r3, #8
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f001 fbf0 	bl	8004e34 <RCCEx_PLL2_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800365a:	e00f      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800365c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003660:	3328      	adds	r3, #40	; 0x28
 8003662:	2100      	movs	r1, #0
 8003664:	4618      	mov	r0, r3
 8003666:	f001 fc97 	bl	8004f98 <RCCEx_PLL3_Config>
 800366a:	4603      	mov	r3, r0
 800366c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003670:	e004      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003678:	e000      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800367a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800367c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10a      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003684:	4b6a      	ldr	r3, [pc, #424]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003688:	f023 0107 	bic.w	r1, r3, #7
 800368c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003692:	4a67      	ldr	r2, [pc, #412]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003694:	430b      	orrs	r3, r1
 8003696:	6513      	str	r3, [r2, #80]	; 0x50
 8003698:	e003      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800369e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80036a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036aa:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80036ae:	f04f 0b00 	mov.w	fp, #0
 80036b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80036b6:	d054      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80036b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80036c2:	d036      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80036c4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80036c8:	d82f      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80036ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ce:	d032      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80036d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d4:	d829      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80036d6:	2bc0      	cmp	r3, #192	; 0xc0
 80036d8:	d02f      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80036da:	2bc0      	cmp	r3, #192	; 0xc0
 80036dc:	d825      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80036de:	2b80      	cmp	r3, #128	; 0x80
 80036e0:	d018      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80036e2:	2b80      	cmp	r3, #128	; 0x80
 80036e4:	d821      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80036ea:	2b40      	cmp	r3, #64	; 0x40
 80036ec:	d007      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80036ee:	e01c      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f0:	4b4f      	ldr	r3, [pc, #316]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	4a4e      	ldr	r2, [pc, #312]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80036fc:	e01e      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003702:	3308      	adds	r3, #8
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f001 fb94 	bl	8004e34 <RCCEx_PLL2_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003712:	e013      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003718:	3328      	adds	r3, #40	; 0x28
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f001 fc3b 	bl	8004f98 <RCCEx_PLL3_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003728:	e008      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003730:	e004      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003732:	bf00      	nop
 8003734:	e002      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003736:	bf00      	nop
 8003738:	e000      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800373a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800373c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10a      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003744:	4b3a      	ldr	r3, [pc, #232]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003748:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800374c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003752:	4a37      	ldr	r2, [pc, #220]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003754:	430b      	orrs	r3, r1
 8003756:	6513      	str	r3, [r2, #80]	; 0x50
 8003758:	e003      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800375e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800376e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003772:	2300      	movs	r3, #0
 8003774:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003778:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800377c:	460b      	mov	r3, r1
 800377e:	4313      	orrs	r3, r2
 8003780:	d05c      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003788:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800378c:	d03b      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800378e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003792:	d834      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003798:	d037      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800379a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800379e:	d82e      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80037a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80037a4:	d033      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80037a6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80037aa:	d828      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80037ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b0:	d01a      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80037b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b6:	d822      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80037bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037c0:	d007      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80037c2:	e01c      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c4:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	4a19      	ldr	r2, [pc, #100]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80037d0:	e01e      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037d6:	3308      	adds	r3, #8
 80037d8:	2100      	movs	r1, #0
 80037da:	4618      	mov	r0, r3
 80037dc:	f001 fb2a 	bl	8004e34 <RCCEx_PLL2_Config>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80037e6:	e013      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ec:	3328      	adds	r3, #40	; 0x28
 80037ee:	2100      	movs	r1, #0
 80037f0:	4618      	mov	r0, r3
 80037f2:	f001 fbd1 	bl	8004f98 <RCCEx_PLL3_Config>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80037fc:	e008      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003804:	e004      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003806:	bf00      	nop
 8003808:	e002      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800380a:	bf00      	nop
 800380c:	e000      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800380e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003810:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10d      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800381a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003826:	4a02      	ldr	r2, [pc, #8]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003828:	430b      	orrs	r3, r1
 800382a:	6513      	str	r3, [r2, #80]	; 0x50
 800382c:	e006      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800382e:	bf00      	nop
 8003830:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003834:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003838:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800383c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003848:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800384c:	2300      	movs	r3, #0
 800384e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003852:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003856:	460b      	mov	r3, r1
 8003858:	4313      	orrs	r3, r2
 800385a:	d03a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800385c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003862:	2b30      	cmp	r3, #48	; 0x30
 8003864:	d01f      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003866:	2b30      	cmp	r3, #48	; 0x30
 8003868:	d819      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800386a:	2b20      	cmp	r3, #32
 800386c:	d00c      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800386e:	2b20      	cmp	r3, #32
 8003870:	d815      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d019      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003876:	2b10      	cmp	r3, #16
 8003878:	d111      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800387a:	4bae      	ldr	r3, [pc, #696]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	4aad      	ldr	r2, [pc, #692]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003884:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003886:	e011      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800388c:	3308      	adds	r3, #8
 800388e:	2102      	movs	r1, #2
 8003890:	4618      	mov	r0, r3
 8003892:	f001 facf 	bl	8004e34 <RCCEx_PLL2_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800389c:	e006      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038a4:	e002      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80038a6:	bf00      	nop
 80038a8:	e000      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80038aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10a      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80038b4:	4b9f      	ldr	r3, [pc, #636]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80038bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c2:	4a9c      	ldr	r2, [pc, #624]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038c4:	430b      	orrs	r3, r1
 80038c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038c8:	e003      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80038d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038da:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80038de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80038e2:	2300      	movs	r3, #0
 80038e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80038e8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4313      	orrs	r3, r2
 80038f0:	d051      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80038f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038fc:	d035      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80038fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003902:	d82e      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003904:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003908:	d031      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800390a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800390e:	d828      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003914:	d01a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391a:	d822      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003924:	d007      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003926:	e01c      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003928:	4b82      	ldr	r3, [pc, #520]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	4a81      	ldr	r2, [pc, #516]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800392e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003932:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003934:	e01c      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800393a:	3308      	adds	r3, #8
 800393c:	2100      	movs	r1, #0
 800393e:	4618      	mov	r0, r3
 8003940:	f001 fa78 	bl	8004e34 <RCCEx_PLL2_Config>
 8003944:	4603      	mov	r3, r0
 8003946:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800394a:	e011      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800394c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003950:	3328      	adds	r3, #40	; 0x28
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f001 fb1f 	bl	8004f98 <RCCEx_PLL3_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003960:	e006      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003968:	e002      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800396a:	bf00      	nop
 800396c:	e000      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800396e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003970:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10a      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003978:	4b6e      	ldr	r3, [pc, #440]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800397a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003986:	4a6b      	ldr	r2, [pc, #428]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003988:	430b      	orrs	r3, r1
 800398a:	6513      	str	r3, [r2, #80]	; 0x50
 800398c:	e003      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003992:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800399a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80039a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039a6:	2300      	movs	r3, #0
 80039a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80039ac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80039b0:	460b      	mov	r3, r1
 80039b2:	4313      	orrs	r3, r2
 80039b4:	d053      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80039b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c0:	d033      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80039c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c6:	d82c      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80039c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039cc:	d02f      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80039ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039d2:	d826      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80039d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039d8:	d02b      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80039da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039de:	d820      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80039e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039e4:	d012      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80039e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039ea:	d81a      	bhi.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d022      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80039f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f4:	d115      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039fa:	3308      	adds	r3, #8
 80039fc:	2101      	movs	r1, #1
 80039fe:	4618      	mov	r0, r3
 8003a00:	f001 fa18 	bl	8004e34 <RCCEx_PLL2_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a0a:	e015      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a10:	3328      	adds	r3, #40	; 0x28
 8003a12:	2101      	movs	r1, #1
 8003a14:	4618      	mov	r0, r3
 8003a16:	f001 fabf 	bl	8004f98 <RCCEx_PLL3_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a20:	e00a      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a28:	e006      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003a2a:	bf00      	nop
 8003a2c:	e004      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003a2e:	bf00      	nop
 8003a30:	e002      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003a32:	bf00      	nop
 8003a34:	e000      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10a      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a40:	4b3c      	ldr	r3, [pc, #240]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a44:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a4e:	4a39      	ldr	r2, [pc, #228]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a50:	430b      	orrs	r3, r1
 8003a52:	6513      	str	r3, [r2, #80]	; 0x50
 8003a54:	e003      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a5a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a66:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003a6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a74:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	d060      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a86:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003a8a:	d039      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003a8c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003a90:	d832      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a96:	d035      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a9c:	d82c      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa2:	d031      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa8:	d826      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003aaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003aae:	d02d      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003ab0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ab4:	d820      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aba:	d012      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ac0:	d81a      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d024      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aca:	d115      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad0:	3308      	adds	r3, #8
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f001 f9ad 	bl	8004e34 <RCCEx_PLL2_Config>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ae0:	e017      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ae6:	3328      	adds	r3, #40	; 0x28
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 fa54 	bl	8004f98 <RCCEx_PLL3_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003af6:	e00c      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003afe:	e008      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b00:	bf00      	nop
 8003b02:	e006      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b04:	bf00      	nop
 8003b06:	e004      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b08:	bf00      	nop
 8003b0a:	e002      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b0c:	bf00      	nop
 8003b0e:	e000      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10e      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b2a:	4a02      	ldr	r2, [pc, #8]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b30:	e006      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003b32:	bf00      	nop
 8003b34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b3c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b48:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003b4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b50:	2300      	movs	r3, #0
 8003b52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003b56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	d037      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b6a:	d00e      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b70:	d816      	bhi.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d018      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003b76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b7a:	d111      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b7c:	4bc4      	ldr	r3, [pc, #784]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	4ac3      	ldr	r2, [pc, #780]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b88:	e00f      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b8e:	3308      	adds	r3, #8
 8003b90:	2101      	movs	r1, #1
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 f94e 	bl	8004e34 <RCCEx_PLL2_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b9e:	e004      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ba6:	e000      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003baa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10a      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bb2:	4bb7      	ldr	r3, [pc, #732]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bc0:	4ab3      	ldr	r2, [pc, #716]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bc2:	430b      	orrs	r3, r1
 8003bc4:	6513      	str	r3, [r2, #80]	; 0x50
 8003bc6:	e003      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bcc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003be0:	2300      	movs	r3, #0
 8003be2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003be6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4313      	orrs	r3, r2
 8003bee:	d039      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d81c      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003bfa:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c00:	08003c3d 	.word	0x08003c3d
 8003c04:	08003c11 	.word	0x08003c11
 8003c08:	08003c1f 	.word	0x08003c1f
 8003c0c:	08003c3d 	.word	0x08003c3d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c10:	4b9f      	ldr	r3, [pc, #636]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	4a9e      	ldr	r2, [pc, #632]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c1c:	e00f      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c22:	3308      	adds	r3, #8
 8003c24:	2102      	movs	r1, #2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f001 f904 	bl	8004e34 <RCCEx_PLL2_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c32:	e004      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c3a:	e000      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10a      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c46:	4b92      	ldr	r3, [pc, #584]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4a:	f023 0103 	bic.w	r1, r3, #3
 8003c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c54:	4a8e      	ldr	r2, [pc, #568]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c56:	430b      	orrs	r3, r1
 8003c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c5a:	e003      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c60:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003c70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c74:	2300      	movs	r3, #0
 8003c76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f000 8099 	beq.w	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c86:	4b83      	ldr	r3, [pc, #524]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a82      	ldr	r2, [pc, #520]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c92:	f7fd fbb3 	bl	80013fc <HAL_GetTick>
 8003c96:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c9a:	e00b      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9c:	f7fd fbae 	bl	80013fc <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b64      	cmp	r3, #100	; 0x64
 8003caa:	d903      	bls.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003cb2:	e005      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cb4:	4b77      	ldr	r3, [pc, #476]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0ed      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003cc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d173      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003cc8:	4b71      	ldr	r3, [pc, #452]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003cd4:	4053      	eors	r3, r2
 8003cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d015      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cde:	4b6c      	ldr	r3, [pc, #432]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cea:	4b69      	ldr	r3, [pc, #420]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	4a68      	ldr	r2, [pc, #416]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cf6:	4b66      	ldr	r3, [pc, #408]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfa:	4a65      	ldr	r2, [pc, #404]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d00:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d02:	4a63      	ldr	r2, [pc, #396]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d08:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d16:	d118      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fd fb70 	bl	80013fc <HAL_GetTick>
 8003d1c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d20:	e00d      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d22:	f7fd fb6b 	bl	80013fc <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003d2c:	1ad2      	subs	r2, r2, r3
 8003d2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d903      	bls.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003d3c:	e005      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d3e:	4b54      	ldr	r3, [pc, #336]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0eb      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003d4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d129      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d62:	d10e      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003d64:	4b4a      	ldr	r3, [pc, #296]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d74:	091a      	lsrs	r2, r3, #4
 8003d76:	4b48      	ldr	r3, [pc, #288]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	4a45      	ldr	r2, [pc, #276]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	6113      	str	r3, [r2, #16]
 8003d80:	e005      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003d82:	4b43      	ldr	r3, [pc, #268]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	4a42      	ldr	r2, [pc, #264]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d8c:	6113      	str	r3, [r2, #16]
 8003d8e:	4b40      	ldr	r3, [pc, #256]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d90:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d9e:	4a3c      	ldr	r2, [pc, #240]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003da0:	430b      	orrs	r3, r1
 8003da2:	6713      	str	r3, [r2, #112]	; 0x70
 8003da4:	e008      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003da6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003daa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003dae:	e003      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003db4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f002 0301 	and.w	r3, r2, #1
 8003dc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003dce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f000 8090 	beq.w	8003efa <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de2:	2b28      	cmp	r3, #40	; 0x28
 8003de4:	d870      	bhi.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003de6:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dec:	08003ed1 	.word	0x08003ed1
 8003df0:	08003ec9 	.word	0x08003ec9
 8003df4:	08003ec9 	.word	0x08003ec9
 8003df8:	08003ec9 	.word	0x08003ec9
 8003dfc:	08003ec9 	.word	0x08003ec9
 8003e00:	08003ec9 	.word	0x08003ec9
 8003e04:	08003ec9 	.word	0x08003ec9
 8003e08:	08003ec9 	.word	0x08003ec9
 8003e0c:	08003e9d 	.word	0x08003e9d
 8003e10:	08003ec9 	.word	0x08003ec9
 8003e14:	08003ec9 	.word	0x08003ec9
 8003e18:	08003ec9 	.word	0x08003ec9
 8003e1c:	08003ec9 	.word	0x08003ec9
 8003e20:	08003ec9 	.word	0x08003ec9
 8003e24:	08003ec9 	.word	0x08003ec9
 8003e28:	08003ec9 	.word	0x08003ec9
 8003e2c:	08003eb3 	.word	0x08003eb3
 8003e30:	08003ec9 	.word	0x08003ec9
 8003e34:	08003ec9 	.word	0x08003ec9
 8003e38:	08003ec9 	.word	0x08003ec9
 8003e3c:	08003ec9 	.word	0x08003ec9
 8003e40:	08003ec9 	.word	0x08003ec9
 8003e44:	08003ec9 	.word	0x08003ec9
 8003e48:	08003ec9 	.word	0x08003ec9
 8003e4c:	08003ed1 	.word	0x08003ed1
 8003e50:	08003ec9 	.word	0x08003ec9
 8003e54:	08003ec9 	.word	0x08003ec9
 8003e58:	08003ec9 	.word	0x08003ec9
 8003e5c:	08003ec9 	.word	0x08003ec9
 8003e60:	08003ec9 	.word	0x08003ec9
 8003e64:	08003ec9 	.word	0x08003ec9
 8003e68:	08003ec9 	.word	0x08003ec9
 8003e6c:	08003ed1 	.word	0x08003ed1
 8003e70:	08003ec9 	.word	0x08003ec9
 8003e74:	08003ec9 	.word	0x08003ec9
 8003e78:	08003ec9 	.word	0x08003ec9
 8003e7c:	08003ec9 	.word	0x08003ec9
 8003e80:	08003ec9 	.word	0x08003ec9
 8003e84:	08003ec9 	.word	0x08003ec9
 8003e88:	08003ec9 	.word	0x08003ec9
 8003e8c:	08003ed1 	.word	0x08003ed1
 8003e90:	58024400 	.word	0x58024400
 8003e94:	58024800 	.word	0x58024800
 8003e98:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea0:	3308      	adds	r3, #8
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 ffc5 	bl	8004e34 <RCCEx_PLL2_Config>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003eb0:	e00f      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eb6:	3328      	adds	r3, #40	; 0x28
 8003eb8:	2101      	movs	r1, #1
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f001 f86c 	bl	8004f98 <RCCEx_PLL3_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ec6:	e004      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ece:	e000      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003eda:	4bc0      	ldr	r3, [pc, #768]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ede:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eea:	4abc      	ldr	r2, [pc, #752]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003eec:	430b      	orrs	r3, r1
 8003eee:	6553      	str	r3, [r2, #84]	; 0x54
 8003ef0:	e003      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ef6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	f002 0302 	and.w	r3, r2, #2
 8003f06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003f10:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003f14:	460b      	mov	r3, r1
 8003f16:	4313      	orrs	r3, r2
 8003f18:	d043      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f22:	2b05      	cmp	r3, #5
 8003f24:	d824      	bhi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003f26:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2c:	08003f79 	.word	0x08003f79
 8003f30:	08003f45 	.word	0x08003f45
 8003f34:	08003f5b 	.word	0x08003f5b
 8003f38:	08003f79 	.word	0x08003f79
 8003f3c:	08003f79 	.word	0x08003f79
 8003f40:	08003f79 	.word	0x08003f79
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f48:	3308      	adds	r3, #8
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 ff71 	bl	8004e34 <RCCEx_PLL2_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f58:	e00f      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f5e:	3328      	adds	r3, #40	; 0x28
 8003f60:	2101      	movs	r1, #1
 8003f62:	4618      	mov	r0, r3
 8003f64:	f001 f818 	bl	8004f98 <RCCEx_PLL3_Config>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f6e:	e004      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f76:	e000      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10b      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f82:	4b96      	ldr	r3, [pc, #600]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f86:	f023 0107 	bic.w	r1, r3, #7
 8003f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f92:	4a92      	ldr	r2, [pc, #584]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f94:	430b      	orrs	r3, r1
 8003f96:	6553      	str	r3, [r2, #84]	; 0x54
 8003f98:	e003      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f9e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003faa:	f002 0304 	and.w	r3, r2, #4
 8003fae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fb8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	d043      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fca:	2b05      	cmp	r3, #5
 8003fcc:	d824      	bhi.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003fce:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd4:	08004021 	.word	0x08004021
 8003fd8:	08003fed 	.word	0x08003fed
 8003fdc:	08004003 	.word	0x08004003
 8003fe0:	08004021 	.word	0x08004021
 8003fe4:	08004021 	.word	0x08004021
 8003fe8:	08004021 	.word	0x08004021
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff0:	3308      	adds	r3, #8
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 ff1d 	bl	8004e34 <RCCEx_PLL2_Config>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004000:	e00f      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004006:	3328      	adds	r3, #40	; 0x28
 8004008:	2101      	movs	r1, #1
 800400a:	4618      	mov	r0, r3
 800400c:	f000 ffc4 	bl	8004f98 <RCCEx_PLL3_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004016:	e004      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800401e:	e000      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004022:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10b      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800402a:	4b6c      	ldr	r3, [pc, #432]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800402c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402e:	f023 0107 	bic.w	r1, r3, #7
 8004032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004036:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800403a:	4a68      	ldr	r2, [pc, #416]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800403c:	430b      	orrs	r3, r1
 800403e:	6593      	str	r3, [r2, #88]	; 0x58
 8004040:	e003      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004042:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004046:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800404a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800404e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004052:	f002 0320 	and.w	r3, r2, #32
 8004056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800405a:	2300      	movs	r3, #0
 800405c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004060:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004064:	460b      	mov	r3, r1
 8004066:	4313      	orrs	r3, r2
 8004068:	d055      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800406a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800406e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004072:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004076:	d033      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004078:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800407c:	d82c      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800407e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004082:	d02f      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004088:	d826      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800408a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800408e:	d02b      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004090:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004094:	d820      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800409a:	d012      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800409c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040a0:	d81a      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d022      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80040a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040aa:	d115      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b0:	3308      	adds	r3, #8
 80040b2:	2100      	movs	r1, #0
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 febd 	bl	8004e34 <RCCEx_PLL2_Config>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040c0:	e015      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c6:	3328      	adds	r3, #40	; 0x28
 80040c8:	2102      	movs	r1, #2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 ff64 	bl	8004f98 <RCCEx_PLL3_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040d6:	e00a      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040de:	e006      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80040e0:	bf00      	nop
 80040e2:	e004      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80040e4:	bf00      	nop
 80040e6:	e002      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80040e8:	bf00      	nop
 80040ea:	e000      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80040ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10b      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040f6:	4b39      	ldr	r3, [pc, #228]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80040f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80040fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004102:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004106:	4a35      	ldr	r2, [pc, #212]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004108:	430b      	orrs	r3, r1
 800410a:	6553      	str	r3, [r2, #84]	; 0x54
 800410c:	e003      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004112:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800411a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004122:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004126:	2300      	movs	r3, #0
 8004128:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800412c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004130:	460b      	mov	r3, r1
 8004132:	4313      	orrs	r3, r2
 8004134:	d058      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800413a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800413e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004142:	d033      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004144:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004148:	d82c      	bhi.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800414a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414e:	d02f      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004154:	d826      	bhi.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004156:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800415a:	d02b      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800415c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004160:	d820      	bhi.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004166:	d012      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800416c:	d81a      	bhi.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d022      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004176:	d115      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004178:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800417c:	3308      	adds	r3, #8
 800417e:	2100      	movs	r1, #0
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fe57 	bl	8004e34 <RCCEx_PLL2_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800418c:	e015      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800418e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004192:	3328      	adds	r3, #40	; 0x28
 8004194:	2102      	movs	r1, #2
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fefe 	bl	8004f98 <RCCEx_PLL3_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041a2:	e00a      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041aa:	e006      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80041ac:	bf00      	nop
 80041ae:	e004      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80041b0:	bf00      	nop
 80041b2:	e002      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80041b4:	bf00      	nop
 80041b6:	e000      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80041b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10e      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041c2:	4b06      	ldr	r3, [pc, #24]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80041c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80041ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041d2:	4a02      	ldr	r2, [pc, #8]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6593      	str	r3, [r2, #88]	; 0x58
 80041d8:	e006      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80041da:	bf00      	nop
 80041dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80041e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80041f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041f8:	2300      	movs	r3, #0
 80041fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041fe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004202:	460b      	mov	r3, r1
 8004204:	4313      	orrs	r3, r2
 8004206:	d055      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800420c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004210:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004214:	d033      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004216:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800421a:	d82c      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800421c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004220:	d02f      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004226:	d826      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004228:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800422c:	d02b      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800422e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004232:	d820      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004238:	d012      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800423a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800423e:	d81a      	bhi.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d022      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004248:	d115      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800424a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800424e:	3308      	adds	r3, #8
 8004250:	2100      	movs	r1, #0
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fdee 	bl	8004e34 <RCCEx_PLL2_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800425e:	e015      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004264:	3328      	adds	r3, #40	; 0x28
 8004266:	2102      	movs	r1, #2
 8004268:	4618      	mov	r0, r3
 800426a:	f000 fe95 	bl	8004f98 <RCCEx_PLL3_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004274:	e00a      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800427c:	e006      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800427e:	bf00      	nop
 8004280:	e004      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004282:	bf00      	nop
 8004284:	e002      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004286:	bf00      	nop
 8004288:	e000      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800428a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800428c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10b      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004294:	4ba1      	ldr	r3, [pc, #644]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004298:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800429c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80042a4:	4a9d      	ldr	r2, [pc, #628]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042a6:	430b      	orrs	r3, r1
 80042a8:	6593      	str	r3, [r2, #88]	; 0x58
 80042aa:	e003      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80042b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	f002 0308 	and.w	r3, r2, #8
 80042c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042c4:	2300      	movs	r3, #0
 80042c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80042ce:	460b      	mov	r3, r1
 80042d0:	4313      	orrs	r3, r2
 80042d2:	d01e      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80042d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e0:	d10c      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042e6:	3328      	adds	r3, #40	; 0x28
 80042e8:	2102      	movs	r1, #2
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fe54 	bl	8004f98 <RCCEx_PLL3_Config>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80042fc:	4b87      	ldr	r3, [pc, #540]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004300:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004304:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800430c:	4a83      	ldr	r2, [pc, #524]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800430e:	430b      	orrs	r3, r1
 8004310:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431a:	f002 0310 	and.w	r3, r2, #16
 800431e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004322:	2300      	movs	r3, #0
 8004324:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004328:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800432c:	460b      	mov	r3, r1
 800432e:	4313      	orrs	r3, r2
 8004330:	d01e      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004332:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004336:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800433a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800433e:	d10c      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004344:	3328      	adds	r3, #40	; 0x28
 8004346:	2102      	movs	r1, #2
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fe25 	bl	8004f98 <RCCEx_PLL3_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800435a:	4b70      	ldr	r3, [pc, #448]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800435c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004366:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800436a:	4a6c      	ldr	r2, [pc, #432]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800436c:	430b      	orrs	r3, r1
 800436e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004378:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800437c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004380:	2300      	movs	r3, #0
 8004382:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004386:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800438a:	460b      	mov	r3, r1
 800438c:	4313      	orrs	r3, r2
 800438e:	d03e      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004390:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004394:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800439c:	d022      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800439e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043a2:	d81b      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80043a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ac:	d00b      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80043ae:	e015      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b4:	3308      	adds	r3, #8
 80043b6:	2100      	movs	r1, #0
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fd3b 	bl	8004e34 <RCCEx_PLL2_Config>
 80043be:	4603      	mov	r3, r0
 80043c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043c4:	e00f      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ca:	3328      	adds	r3, #40	; 0x28
 80043cc:	2102      	movs	r1, #2
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fde2 	bl	8004f98 <RCCEx_PLL3_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043da:	e004      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80043e2:	e000      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80043e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10b      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043ee:	4b4b      	ldr	r3, [pc, #300]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80043f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043fe:	4a47      	ldr	r2, [pc, #284]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004400:	430b      	orrs	r3, r1
 8004402:	6593      	str	r3, [r2, #88]	; 0x58
 8004404:	e003      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004406:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800440a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800440e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004416:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800441a:	67bb      	str	r3, [r7, #120]	; 0x78
 800441c:	2300      	movs	r3, #0
 800441e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004420:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004424:	460b      	mov	r3, r1
 8004426:	4313      	orrs	r3, r2
 8004428:	d03b      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800442a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004432:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004436:	d01f      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004438:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800443c:	d818      	bhi.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800443e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004442:	d003      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004444:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004448:	d007      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800444a:	e011      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800444c:	4b33      	ldr	r3, [pc, #204]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	4a32      	ldr	r2, [pc, #200]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004456:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004458:	e00f      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800445a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800445e:	3328      	adds	r3, #40	; 0x28
 8004460:	2101      	movs	r1, #1
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fd98 	bl	8004f98 <RCCEx_PLL3_Config>
 8004468:	4603      	mov	r3, r0
 800446a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800446e:	e004      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004476:	e000      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800447a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10b      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004482:	4b26      	ldr	r3, [pc, #152]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004486:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800448a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004492:	4a22      	ldr	r2, [pc, #136]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004494:	430b      	orrs	r3, r1
 8004496:	6553      	str	r3, [r2, #84]	; 0x54
 8004498:	e003      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800449e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80044ae:	673b      	str	r3, [r7, #112]	; 0x70
 80044b0:	2300      	movs	r3, #0
 80044b2:	677b      	str	r3, [r7, #116]	; 0x74
 80044b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80044b8:	460b      	mov	r3, r1
 80044ba:	4313      	orrs	r3, r2
 80044bc:	d034      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80044be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80044c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044cc:	d007      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80044ce:	e011      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d0:	4b12      	ldr	r3, [pc, #72]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	4a11      	ldr	r2, [pc, #68]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80044d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044dc:	e00e      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044e2:	3308      	adds	r3, #8
 80044e4:	2102      	movs	r1, #2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fca4 	bl	8004e34 <RCCEx_PLL2_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044f2:	e003      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10d      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004508:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800450c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004512:	4a02      	ldr	r2, [pc, #8]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004514:	430b      	orrs	r3, r1
 8004516:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004518:	e006      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800451a:	bf00      	nop
 800451c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004520:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004524:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004528:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004530:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004534:	66bb      	str	r3, [r7, #104]	; 0x68
 8004536:	2300      	movs	r3, #0
 8004538:	66fb      	str	r3, [r7, #108]	; 0x6c
 800453a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800453e:	460b      	mov	r3, r1
 8004540:	4313      	orrs	r3, r2
 8004542:	d00c      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004548:	3328      	adds	r3, #40	; 0x28
 800454a:	2102      	movs	r1, #2
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fd23 	bl	8004f98 <RCCEx_PLL3_Config>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800455e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800456a:	663b      	str	r3, [r7, #96]	; 0x60
 800456c:	2300      	movs	r3, #0
 800456e:	667b      	str	r3, [r7, #100]	; 0x64
 8004570:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004574:	460b      	mov	r3, r1
 8004576:	4313      	orrs	r3, r2
 8004578:	d038      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800457a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004582:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004586:	d018      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004588:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800458c:	d811      	bhi.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800458e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004592:	d014      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004598:	d80b      	bhi.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800459a:	2b00      	cmp	r3, #0
 800459c:	d011      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800459e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a2:	d106      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045a4:	4bc3      	ldr	r3, [pc, #780]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	4ac2      	ldr	r2, [pc, #776]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80045b0:	e008      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80045b8:	e004      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80045ba:	bf00      	nop
 80045bc:	e002      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80045be:	bf00      	nop
 80045c0:	e000      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80045c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10b      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045cc:	4bb9      	ldr	r3, [pc, #740]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	4ab5      	ldr	r2, [pc, #724]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045de:	430b      	orrs	r3, r1
 80045e0:	6553      	str	r3, [r2, #84]	; 0x54
 80045e2:	e003      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80045f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80045fa:	2300      	movs	r3, #0
 80045fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004602:	460b      	mov	r3, r1
 8004604:	4313      	orrs	r3, r2
 8004606:	d009      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004608:	4baa      	ldr	r3, [pc, #680]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800460a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800460c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004610:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004616:	4aa7      	ldr	r2, [pc, #668]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004618:	430b      	orrs	r3, r1
 800461a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800461c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004628:	653b      	str	r3, [r7, #80]	; 0x50
 800462a:	2300      	movs	r3, #0
 800462c:	657b      	str	r3, [r7, #84]	; 0x54
 800462e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004632:	460b      	mov	r3, r1
 8004634:	4313      	orrs	r3, r2
 8004636:	d009      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004638:	4b9e      	ldr	r3, [pc, #632]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800463a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004640:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004646:	4a9b      	ldr	r2, [pc, #620]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004648:	430b      	orrs	r3, r1
 800464a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800464c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004658:	64bb      	str	r3, [r7, #72]	; 0x48
 800465a:	2300      	movs	r3, #0
 800465c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800465e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004662:	460b      	mov	r3, r1
 8004664:	4313      	orrs	r3, r2
 8004666:	d009      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004668:	4b92      	ldr	r3, [pc, #584]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800466a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004676:	4a8f      	ldr	r2, [pc, #572]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004678:	430b      	orrs	r3, r1
 800467a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800467c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004688:	643b      	str	r3, [r7, #64]	; 0x40
 800468a:	2300      	movs	r3, #0
 800468c:	647b      	str	r3, [r7, #68]	; 0x44
 800468e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004692:	460b      	mov	r3, r1
 8004694:	4313      	orrs	r3, r2
 8004696:	d00e      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004698:	4b86      	ldr	r3, [pc, #536]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	4a85      	ldr	r2, [pc, #532]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800469e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046a2:	6113      	str	r3, [r2, #16]
 80046a4:	4b83      	ldr	r3, [pc, #524]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046a6:	6919      	ldr	r1, [r3, #16]
 80046a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80046b0:	4a80      	ldr	r2, [pc, #512]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046b2:	430b      	orrs	r3, r1
 80046b4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80046b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046be:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80046c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80046c4:	2300      	movs	r3, #0
 80046c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80046cc:	460b      	mov	r3, r1
 80046ce:	4313      	orrs	r3, r2
 80046d0:	d009      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046d2:	4b78      	ldr	r3, [pc, #480]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80046da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e0:	4a74      	ldr	r2, [pc, #464]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80046e2:	430b      	orrs	r3, r1
 80046e4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ee:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80046f2:	633b      	str	r3, [r7, #48]	; 0x30
 80046f4:	2300      	movs	r3, #0
 80046f6:	637b      	str	r3, [r7, #52]	; 0x34
 80046f8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80046fc:	460b      	mov	r3, r1
 80046fe:	4313      	orrs	r3, r2
 8004700:	d00a      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004702:	4b6c      	ldr	r3, [pc, #432]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004706:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800470a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800470e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004712:	4a68      	ldr	r2, [pc, #416]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004714:	430b      	orrs	r3, r1
 8004716:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004720:	2100      	movs	r1, #0
 8004722:	62b9      	str	r1, [r7, #40]	; 0x28
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800472a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800472e:	460b      	mov	r3, r1
 8004730:	4313      	orrs	r3, r2
 8004732:	d011      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004734:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004738:	3308      	adds	r3, #8
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fb79 	bl	8004e34 <RCCEx_PLL2_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004748:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004750:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004754:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	2100      	movs	r1, #0
 8004762:	6239      	str	r1, [r7, #32]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
 800476a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800476e:	460b      	mov	r3, r1
 8004770:	4313      	orrs	r3, r2
 8004772:	d011      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004778:	3308      	adds	r3, #8
 800477a:	2101      	movs	r1, #1
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fb59 	bl	8004e34 <RCCEx_PLL2_Config>
 8004782:	4603      	mov	r3, r0
 8004784:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004788:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004790:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004794:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	2100      	movs	r1, #0
 80047a2:	61b9      	str	r1, [r7, #24]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80047ae:	460b      	mov	r3, r1
 80047b0:	4313      	orrs	r3, r2
 80047b2:	d011      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b8:	3308      	adds	r3, #8
 80047ba:	2102      	movs	r1, #2
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fb39 	bl	8004e34 <RCCEx_PLL2_Config>
 80047c2:	4603      	mov	r3, r0
 80047c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80047c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80047d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	2100      	movs	r1, #0
 80047e2:	6139      	str	r1, [r7, #16]
 80047e4:	f003 0308 	and.w	r3, r3, #8
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80047ee:	460b      	mov	r3, r1
 80047f0:	4313      	orrs	r3, r2
 80047f2:	d011      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f8:	3328      	adds	r3, #40	; 0x28
 80047fa:	2100      	movs	r1, #0
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fbcb 	bl	8004f98 <RCCEx_PLL3_Config>
 8004802:	4603      	mov	r3, r0
 8004804:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004808:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004810:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004814:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	2100      	movs	r1, #0
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	f003 0310 	and.w	r3, r3, #16
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800482e:	460b      	mov	r3, r1
 8004830:	4313      	orrs	r3, r2
 8004832:	d011      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004838:	3328      	adds	r3, #40	; 0x28
 800483a:	2101      	movs	r1, #1
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fbab 	bl	8004f98 <RCCEx_PLL3_Config>
 8004842:	4603      	mov	r3, r0
 8004844:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004848:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004850:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004854:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004860:	2100      	movs	r1, #0
 8004862:	6039      	str	r1, [r7, #0]
 8004864:	f003 0320 	and.w	r3, r3, #32
 8004868:	607b      	str	r3, [r7, #4]
 800486a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800486e:	460b      	mov	r3, r1
 8004870:	4313      	orrs	r3, r2
 8004872:	d011      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004878:	3328      	adds	r3, #40	; 0x28
 800487a:	2102      	movs	r1, #2
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fb8b 	bl	8004f98 <RCCEx_PLL3_Config>
 8004882:	4603      	mov	r3, r0
 8004884:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004888:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004890:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004894:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004898:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	e000      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80048ac:	46bd      	mov	sp, r7
 80048ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048b2:	bf00      	nop
 80048b4:	58024400 	.word	0x58024400

080048b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80048bc:	f7fe fde2 	bl	8003484 <HAL_RCC_GetHCLKFreq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	091b      	lsrs	r3, r3, #4
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	4904      	ldr	r1, [pc, #16]	; (80048e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80048ce:	5ccb      	ldrb	r3, [r1, r3]
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80048d8:	4618      	mov	r0, r3
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	58024400 	.word	0x58024400
 80048e0:	080093cc 	.word	0x080093cc

080048e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b089      	sub	sp, #36	; 0x24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048ec:	4ba1      	ldr	r3, [pc, #644]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80048f6:	4b9f      	ldr	r3, [pc, #636]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	0b1b      	lsrs	r3, r3, #12
 80048fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004900:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004902:	4b9c      	ldr	r3, [pc, #624]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	091b      	lsrs	r3, r3, #4
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800490e:	4b99      	ldr	r3, [pc, #612]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	08db      	lsrs	r3, r3, #3
 8004914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	ee07 3a90 	vmov	s15, r3
 8004922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004926:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8111 	beq.w	8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	2b02      	cmp	r3, #2
 8004936:	f000 8083 	beq.w	8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	2b02      	cmp	r3, #2
 800493e:	f200 80a1 	bhi.w	8004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d056      	beq.n	80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800494e:	e099      	b.n	8004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004950:	4b88      	ldr	r3, [pc, #544]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b00      	cmp	r3, #0
 800495a:	d02d      	beq.n	80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800495c:	4b85      	ldr	r3, [pc, #532]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	08db      	lsrs	r3, r3, #3
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	4a84      	ldr	r2, [pc, #528]	; (8004b78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
 800496c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	ee07 3a90 	vmov	s15, r3
 8004974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	ee07 3a90 	vmov	s15, r3
 800497e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004986:	4b7b      	ldr	r3, [pc, #492]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004996:	ed97 6a03 	vldr	s12, [r7, #12]
 800499a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800499e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049b6:	e087      	b.n	8004ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	ee07 3a90 	vmov	s15, r3
 80049be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004b80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80049c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ca:	4b6a      	ldr	r3, [pc, #424]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049da:	ed97 6a03 	vldr	s12, [r7, #12]
 80049de:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049fa:	e065      	b.n	8004ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a0e:	4b59      	ldr	r3, [pc, #356]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a22:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a3e:	e043      	b.n	8004ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a52:	4b48      	ldr	r3, [pc, #288]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a66:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a82:	e021      	b.n	8004ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a96:	4b37      	ldr	r3, [pc, #220]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aaa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ac6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ac8:	4b2a      	ldr	r3, [pc, #168]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	0a5b      	lsrs	r3, r3, #9
 8004ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad2:	ee07 3a90 	vmov	s15, r3
 8004ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ada:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ade:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ae2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aee:	ee17 2a90 	vmov	r2, s15
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004af6:	4b1f      	ldr	r3, [pc, #124]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afa:	0c1b      	lsrs	r3, r3, #16
 8004afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b00:	ee07 3a90 	vmov	s15, r3
 8004b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b10:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b1c:	ee17 2a90 	vmov	r2, s15
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b24:	4b13      	ldr	r3, [pc, #76]	; (8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	0e1b      	lsrs	r3, r3, #24
 8004b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b2e:	ee07 3a90 	vmov	s15, r3
 8004b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b4a:	ee17 2a90 	vmov	r2, s15
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b52:	e008      	b.n	8004b66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	609a      	str	r2, [r3, #8]
}
 8004b66:	bf00      	nop
 8004b68:	3724      	adds	r7, #36	; 0x24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	58024400 	.word	0x58024400
 8004b78:	03d09000 	.word	0x03d09000
 8004b7c:	46000000 	.word	0x46000000
 8004b80:	4c742400 	.word	0x4c742400
 8004b84:	4a742400 	.word	0x4a742400
 8004b88:	4af42400 	.word	0x4af42400

08004b8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b089      	sub	sp, #36	; 0x24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b94:	4ba1      	ldr	r3, [pc, #644]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	f003 0303 	and.w	r3, r3, #3
 8004b9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004b9e:	4b9f      	ldr	r3, [pc, #636]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	0d1b      	lsrs	r3, r3, #20
 8004ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ba8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004baa:	4b9c      	ldr	r3, [pc, #624]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	0a1b      	lsrs	r3, r3, #8
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004bb6:	4b99      	ldr	r3, [pc, #612]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bba:	08db      	lsrs	r3, r3, #3
 8004bbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	fb02 f303 	mul.w	r3, r2, r3
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8111 	beq.w	8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	f000 8083 	beq.w	8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	f200 80a1 	bhi.w	8004d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d056      	beq.n	8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004bf6:	e099      	b.n	8004d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bf8:	4b88      	ldr	r3, [pc, #544]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d02d      	beq.n	8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c04:	4b85      	ldr	r3, [pc, #532]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	08db      	lsrs	r3, r3, #3
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	4a84      	ldr	r2, [pc, #528]	; (8004e20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c10:	fa22 f303 	lsr.w	r3, r2, r3
 8004c14:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	ee07 3a90 	vmov	s15, r3
 8004c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c2e:	4b7b      	ldr	r3, [pc, #492]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c36:	ee07 3a90 	vmov	s15, r3
 8004c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c5e:	e087      	b.n	8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c72:	4b6a      	ldr	r3, [pc, #424]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ca2:	e065      	b.n	8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cb6:	4b59      	ldr	r3, [pc, #356]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ce6:	e043      	b.n	8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cfa:	4b48      	ldr	r3, [pc, #288]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d02:	ee07 3a90 	vmov	s15, r3
 8004d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d2a:	e021      	b.n	8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	ee07 3a90 	vmov	s15, r3
 8004d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d3e:	4b37      	ldr	r3, [pc, #220]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d46:	ee07 3a90 	vmov	s15, r3
 8004d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d52:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004d70:	4b2a      	ldr	r3, [pc, #168]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	0a5b      	lsrs	r3, r3, #9
 8004d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d7a:	ee07 3a90 	vmov	s15, r3
 8004d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d96:	ee17 2a90 	vmov	r2, s15
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004d9e:	4b1f      	ldr	r3, [pc, #124]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	0c1b      	lsrs	r3, r3, #16
 8004da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da8:	ee07 3a90 	vmov	s15, r3
 8004dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004db4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004db8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dc4:	ee17 2a90 	vmov	r2, s15
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004dcc:	4b13      	ldr	r3, [pc, #76]	; (8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	0e1b      	lsrs	r3, r3, #24
 8004dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dd6:	ee07 3a90 	vmov	s15, r3
 8004dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004de2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004de6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004df2:	ee17 2a90 	vmov	r2, s15
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004dfa:	e008      	b.n	8004e0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	609a      	str	r2, [r3, #8]
}
 8004e0e:	bf00      	nop
 8004e10:	3724      	adds	r7, #36	; 0x24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	58024400 	.word	0x58024400
 8004e20:	03d09000 	.word	0x03d09000
 8004e24:	46000000 	.word	0x46000000
 8004e28:	4c742400 	.word	0x4c742400
 8004e2c:	4a742400 	.word	0x4a742400
 8004e30:	4af42400 	.word	0x4af42400

08004e34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e42:	4b53      	ldr	r3, [pc, #332]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	d101      	bne.n	8004e52 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e099      	b.n	8004f86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e52:	4b4f      	ldr	r3, [pc, #316]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a4e      	ldr	r2, [pc, #312]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e5e:	f7fc facd 	bl	80013fc <HAL_GetTick>
 8004e62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e64:	e008      	b.n	8004e78 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e66:	f7fc fac9 	bl	80013fc <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e086      	b.n	8004f86 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e78:	4b45      	ldr	r3, [pc, #276]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1f0      	bne.n	8004e66 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004e84:	4b42      	ldr	r3, [pc, #264]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	031b      	lsls	r3, r3, #12
 8004e92:	493f      	ldr	r1, [pc, #252]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	628b      	str	r3, [r1, #40]	; 0x28
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	025b      	lsls	r3, r3, #9
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	431a      	orrs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	041b      	lsls	r3, r3, #16
 8004eb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	061b      	lsls	r3, r3, #24
 8004ec4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ec8:	4931      	ldr	r1, [pc, #196]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ece:	4b30      	ldr	r3, [pc, #192]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	492d      	ldr	r1, [pc, #180]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ee0:	4b2b      	ldr	r3, [pc, #172]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	f023 0220 	bic.w	r2, r3, #32
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	4928      	ldr	r1, [pc, #160]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004ef2:	4b27      	ldr	r3, [pc, #156]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	4a26      	ldr	r2, [pc, #152]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004ef8:	f023 0310 	bic.w	r3, r3, #16
 8004efc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004efe:	4b24      	ldr	r3, [pc, #144]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f02:	4b24      	ldr	r3, [pc, #144]	; (8004f94 <RCCEx_PLL2_Config+0x160>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	69d2      	ldr	r2, [r2, #28]
 8004f0a:	00d2      	lsls	r2, r2, #3
 8004f0c:	4920      	ldr	r1, [pc, #128]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f12:	4b1f      	ldr	r3, [pc, #124]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f16:	4a1e      	ldr	r2, [pc, #120]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f18:	f043 0310 	orr.w	r3, r3, #16
 8004f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d106      	bne.n	8004f32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f24:	4b1a      	ldr	r3, [pc, #104]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	4a19      	ldr	r2, [pc, #100]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f30:	e00f      	b.n	8004f52 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d106      	bne.n	8004f46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f38:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	4a14      	ldr	r2, [pc, #80]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f44:	e005      	b.n	8004f52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f46:	4b12      	ldr	r3, [pc, #72]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	4a11      	ldr	r2, [pc, #68]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f52:	4b0f      	ldr	r3, [pc, #60]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a0e      	ldr	r2, [pc, #56]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f5e:	f7fc fa4d 	bl	80013fc <HAL_GetTick>
 8004f62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f64:	e008      	b.n	8004f78 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f66:	f7fc fa49 	bl	80013fc <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e006      	b.n	8004f86 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f78:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0f0      	beq.n	8004f66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	58024400 	.word	0x58024400
 8004f94:	ffff0007 	.word	0xffff0007

08004f98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fa6:	4b53      	ldr	r3, [pc, #332]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d101      	bne.n	8004fb6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e099      	b.n	80050ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004fb6:	4b4f      	ldr	r3, [pc, #316]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a4e      	ldr	r2, [pc, #312]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc2:	f7fc fa1b 	bl	80013fc <HAL_GetTick>
 8004fc6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fc8:	e008      	b.n	8004fdc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fca:	f7fc fa17 	bl	80013fc <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e086      	b.n	80050ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fdc:	4b45      	ldr	r3, [pc, #276]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1f0      	bne.n	8004fca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004fe8:	4b42      	ldr	r3, [pc, #264]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	051b      	lsls	r3, r3, #20
 8004ff6:	493f      	ldr	r1, [pc, #252]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	628b      	str	r3, [r1, #40]	; 0x28
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	3b01      	subs	r3, #1
 8005002:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	3b01      	subs	r3, #1
 800500c:	025b      	lsls	r3, r3, #9
 800500e:	b29b      	uxth	r3, r3
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	3b01      	subs	r3, #1
 8005018:	041b      	lsls	r3, r3, #16
 800501a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	3b01      	subs	r3, #1
 8005026:	061b      	lsls	r3, r3, #24
 8005028:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800502c:	4931      	ldr	r1, [pc, #196]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800502e:	4313      	orrs	r3, r2
 8005030:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005032:	4b30      	ldr	r3, [pc, #192]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	492d      	ldr	r1, [pc, #180]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005040:	4313      	orrs	r3, r2
 8005042:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005044:	4b2b      	ldr	r3, [pc, #172]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	4928      	ldr	r1, [pc, #160]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005052:	4313      	orrs	r3, r2
 8005054:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005056:	4b27      	ldr	r3, [pc, #156]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	4a26      	ldr	r2, [pc, #152]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800505c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005060:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005062:	4b24      	ldr	r3, [pc, #144]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005066:	4b24      	ldr	r3, [pc, #144]	; (80050f8 <RCCEx_PLL3_Config+0x160>)
 8005068:	4013      	ands	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	69d2      	ldr	r2, [r2, #28]
 800506e:	00d2      	lsls	r2, r2, #3
 8005070:	4920      	ldr	r1, [pc, #128]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005072:	4313      	orrs	r3, r2
 8005074:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005076:	4b1f      	ldr	r3, [pc, #124]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507a:	4a1e      	ldr	r2, [pc, #120]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800507c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005080:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d106      	bne.n	8005096 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005088:	4b1a      	ldr	r3, [pc, #104]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	4a19      	ldr	r2, [pc, #100]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800508e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005092:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005094:	e00f      	b.n	80050b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d106      	bne.n	80050aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800509c:	4b15      	ldr	r3, [pc, #84]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	4a14      	ldr	r2, [pc, #80]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050a8:	e005      	b.n	80050b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050aa:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ae:	4a11      	ldr	r2, [pc, #68]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80050b6:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a0e      	ldr	r2, [pc, #56]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c2:	f7fc f99b 	bl	80013fc <HAL_GetTick>
 80050c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050c8:	e008      	b.n	80050dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050ca:	f7fc f997 	bl	80013fc <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e006      	b.n	80050ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050dc:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f0      	beq.n	80050ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	58024400 	.word	0x58024400
 80050f8:	ffff0007 	.word	0xffff0007

080050fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e049      	b.n	80051a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d106      	bne.n	8005128 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7fb fec6 	bl	8000eb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3304      	adds	r3, #4
 8005138:	4619      	mov	r1, r3
 800513a:	4610      	mov	r0, r2
 800513c:	f000 faa2 	bl	8005684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b082      	sub	sp, #8
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e049      	b.n	8005250 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d106      	bne.n	80051d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f841 	bl	8005258 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2202      	movs	r2, #2
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	3304      	adds	r3, #4
 80051e6:	4619      	mov	r1, r3
 80051e8:	4610      	mov	r0, r2
 80051ea:	f000 fa4b 	bl	8005684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005286:	2302      	movs	r3, #2
 8005288:	e0ff      	b.n	800548a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b14      	cmp	r3, #20
 8005296:	f200 80f0 	bhi.w	800547a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800529a:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080052f5 	.word	0x080052f5
 80052a4:	0800547b 	.word	0x0800547b
 80052a8:	0800547b 	.word	0x0800547b
 80052ac:	0800547b 	.word	0x0800547b
 80052b0:	08005335 	.word	0x08005335
 80052b4:	0800547b 	.word	0x0800547b
 80052b8:	0800547b 	.word	0x0800547b
 80052bc:	0800547b 	.word	0x0800547b
 80052c0:	08005377 	.word	0x08005377
 80052c4:	0800547b 	.word	0x0800547b
 80052c8:	0800547b 	.word	0x0800547b
 80052cc:	0800547b 	.word	0x0800547b
 80052d0:	080053b7 	.word	0x080053b7
 80052d4:	0800547b 	.word	0x0800547b
 80052d8:	0800547b 	.word	0x0800547b
 80052dc:	0800547b 	.word	0x0800547b
 80052e0:	080053f9 	.word	0x080053f9
 80052e4:	0800547b 	.word	0x0800547b
 80052e8:	0800547b 	.word	0x0800547b
 80052ec:	0800547b 	.word	0x0800547b
 80052f0:	08005439 	.word	0x08005439
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fa5c 	bl	80057b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0208 	orr.w	r2, r2, #8
 800530e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699a      	ldr	r2, [r3, #24]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0204 	bic.w	r2, r2, #4
 800531e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6999      	ldr	r1, [r3, #24]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	691a      	ldr	r2, [r3, #16]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	619a      	str	r2, [r3, #24]
      break;
 8005332:	e0a5      	b.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68b9      	ldr	r1, [r7, #8]
 800533a:	4618      	mov	r0, r3
 800533c:	f000 facc 	bl	80058d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800534e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699a      	ldr	r2, [r3, #24]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800535e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6999      	ldr	r1, [r3, #24]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	021a      	lsls	r2, r3, #8
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	619a      	str	r2, [r3, #24]
      break;
 8005374:	e084      	b.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	4618      	mov	r0, r3
 800537e:	f000 fb35 	bl	80059ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69da      	ldr	r2, [r3, #28]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0208 	orr.w	r2, r2, #8
 8005390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	69da      	ldr	r2, [r3, #28]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0204 	bic.w	r2, r2, #4
 80053a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69d9      	ldr	r1, [r3, #28]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	61da      	str	r2, [r3, #28]
      break;
 80053b4:	e064      	b.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fb9d 	bl	8005afc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69da      	ldr	r2, [r3, #28]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69d9      	ldr	r1, [r3, #28]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	021a      	lsls	r2, r3, #8
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	61da      	str	r2, [r3, #28]
      break;
 80053f6:	e043      	b.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fbe6 	bl	8005bd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0208 	orr.w	r2, r2, #8
 8005412:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0204 	bic.w	r2, r2, #4
 8005422:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005436:	e023      	b.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68b9      	ldr	r1, [r7, #8]
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fc2a 	bl	8005c98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005452:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005462:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	021a      	lsls	r2, r3, #8
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005478:	e002      	b.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	75fb      	strb	r3, [r7, #23]
      break;
 800547e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005488:	7dfb      	ldrb	r3, [r7, #23]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop

08005494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_TIM_ConfigClockSource+0x1c>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e0dc      	b.n	800566a <HAL_TIM_ConfigClockSource+0x1d6>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	4b6a      	ldr	r3, [pc, #424]	; (8005674 <HAL_TIM_ConfigClockSource+0x1e0>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a64      	ldr	r2, [pc, #400]	; (8005678 <HAL_TIM_ConfigClockSource+0x1e4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	f000 80a9 	beq.w	800563e <HAL_TIM_ConfigClockSource+0x1aa>
 80054ec:	4a62      	ldr	r2, [pc, #392]	; (8005678 <HAL_TIM_ConfigClockSource+0x1e4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	f200 80ae 	bhi.w	8005650 <HAL_TIM_ConfigClockSource+0x1bc>
 80054f4:	4a61      	ldr	r2, [pc, #388]	; (800567c <HAL_TIM_ConfigClockSource+0x1e8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	f000 80a1 	beq.w	800563e <HAL_TIM_ConfigClockSource+0x1aa>
 80054fc:	4a5f      	ldr	r2, [pc, #380]	; (800567c <HAL_TIM_ConfigClockSource+0x1e8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	f200 80a6 	bhi.w	8005650 <HAL_TIM_ConfigClockSource+0x1bc>
 8005504:	4a5e      	ldr	r2, [pc, #376]	; (8005680 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005506:	4293      	cmp	r3, r2
 8005508:	f000 8099 	beq.w	800563e <HAL_TIM_ConfigClockSource+0x1aa>
 800550c:	4a5c      	ldr	r2, [pc, #368]	; (8005680 <HAL_TIM_ConfigClockSource+0x1ec>)
 800550e:	4293      	cmp	r3, r2
 8005510:	f200 809e 	bhi.w	8005650 <HAL_TIM_ConfigClockSource+0x1bc>
 8005514:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005518:	f000 8091 	beq.w	800563e <HAL_TIM_ConfigClockSource+0x1aa>
 800551c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005520:	f200 8096 	bhi.w	8005650 <HAL_TIM_ConfigClockSource+0x1bc>
 8005524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005528:	f000 8089 	beq.w	800563e <HAL_TIM_ConfigClockSource+0x1aa>
 800552c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005530:	f200 808e 	bhi.w	8005650 <HAL_TIM_ConfigClockSource+0x1bc>
 8005534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005538:	d03e      	beq.n	80055b8 <HAL_TIM_ConfigClockSource+0x124>
 800553a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800553e:	f200 8087 	bhi.w	8005650 <HAL_TIM_ConfigClockSource+0x1bc>
 8005542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005546:	f000 8086 	beq.w	8005656 <HAL_TIM_ConfigClockSource+0x1c2>
 800554a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800554e:	d87f      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x1bc>
 8005550:	2b70      	cmp	r3, #112	; 0x70
 8005552:	d01a      	beq.n	800558a <HAL_TIM_ConfigClockSource+0xf6>
 8005554:	2b70      	cmp	r3, #112	; 0x70
 8005556:	d87b      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x1bc>
 8005558:	2b60      	cmp	r3, #96	; 0x60
 800555a:	d050      	beq.n	80055fe <HAL_TIM_ConfigClockSource+0x16a>
 800555c:	2b60      	cmp	r3, #96	; 0x60
 800555e:	d877      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x1bc>
 8005560:	2b50      	cmp	r3, #80	; 0x50
 8005562:	d03c      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x14a>
 8005564:	2b50      	cmp	r3, #80	; 0x50
 8005566:	d873      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x1bc>
 8005568:	2b40      	cmp	r3, #64	; 0x40
 800556a:	d058      	beq.n	800561e <HAL_TIM_ConfigClockSource+0x18a>
 800556c:	2b40      	cmp	r3, #64	; 0x40
 800556e:	d86f      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x1bc>
 8005570:	2b30      	cmp	r3, #48	; 0x30
 8005572:	d064      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x1aa>
 8005574:	2b30      	cmp	r3, #48	; 0x30
 8005576:	d86b      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x1bc>
 8005578:	2b20      	cmp	r3, #32
 800557a:	d060      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x1aa>
 800557c:	2b20      	cmp	r3, #32
 800557e:	d867      	bhi.n	8005650 <HAL_TIM_ConfigClockSource+0x1bc>
 8005580:	2b00      	cmp	r3, #0
 8005582:	d05c      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x1aa>
 8005584:	2b10      	cmp	r3, #16
 8005586:	d05a      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x1aa>
 8005588:	e062      	b.n	8005650 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6818      	ldr	r0, [r3, #0]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	6899      	ldr	r1, [r3, #8]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f000 fc61 	bl	8005e60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	609a      	str	r2, [r3, #8]
      break;
 80055b6:	e04f      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6818      	ldr	r0, [r3, #0]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	6899      	ldr	r1, [r3, #8]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f000 fc4a 	bl	8005e60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055da:	609a      	str	r2, [r3, #8]
      break;
 80055dc:	e03c      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	6859      	ldr	r1, [r3, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	461a      	mov	r2, r3
 80055ec:	f000 fbba 	bl	8005d64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2150      	movs	r1, #80	; 0x50
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fc14 	bl	8005e24 <TIM_ITRx_SetConfig>
      break;
 80055fc:	e02c      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	6859      	ldr	r1, [r3, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	461a      	mov	r2, r3
 800560c:	f000 fbd9 	bl	8005dc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2160      	movs	r1, #96	; 0x60
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fc04 	bl	8005e24 <TIM_ITRx_SetConfig>
      break;
 800561c:	e01c      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6818      	ldr	r0, [r3, #0]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6859      	ldr	r1, [r3, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	461a      	mov	r2, r3
 800562c:	f000 fb9a 	bl	8005d64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2140      	movs	r1, #64	; 0x40
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fbf4 	bl	8005e24 <TIM_ITRx_SetConfig>
      break;
 800563c:	e00c      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4619      	mov	r1, r3
 8005648:	4610      	mov	r0, r2
 800564a:	f000 fbeb 	bl	8005e24 <TIM_ITRx_SetConfig>
      break;
 800564e:	e003      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	73fb      	strb	r3, [r7, #15]
      break;
 8005654:	e000      	b.n	8005658 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005656:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005668:	7bfb      	ldrb	r3, [r7, #15]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	ffceff88 	.word	0xffceff88
 8005678:	00100040 	.word	0x00100040
 800567c:	00100030 	.word	0x00100030
 8005680:	00100020 	.word	0x00100020

08005684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a40      	ldr	r2, [pc, #256]	; (8005798 <TIM_Base_SetConfig+0x114>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d013      	beq.n	80056c4 <TIM_Base_SetConfig+0x40>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a2:	d00f      	beq.n	80056c4 <TIM_Base_SetConfig+0x40>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a3d      	ldr	r2, [pc, #244]	; (800579c <TIM_Base_SetConfig+0x118>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d00b      	beq.n	80056c4 <TIM_Base_SetConfig+0x40>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a3c      	ldr	r2, [pc, #240]	; (80057a0 <TIM_Base_SetConfig+0x11c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d007      	beq.n	80056c4 <TIM_Base_SetConfig+0x40>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a3b      	ldr	r2, [pc, #236]	; (80057a4 <TIM_Base_SetConfig+0x120>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d003      	beq.n	80056c4 <TIM_Base_SetConfig+0x40>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a3a      	ldr	r2, [pc, #232]	; (80057a8 <TIM_Base_SetConfig+0x124>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d108      	bne.n	80056d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a2f      	ldr	r2, [pc, #188]	; (8005798 <TIM_Base_SetConfig+0x114>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d01f      	beq.n	800571e <TIM_Base_SetConfig+0x9a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e4:	d01b      	beq.n	800571e <TIM_Base_SetConfig+0x9a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a2c      	ldr	r2, [pc, #176]	; (800579c <TIM_Base_SetConfig+0x118>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d017      	beq.n	800571e <TIM_Base_SetConfig+0x9a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a2b      	ldr	r2, [pc, #172]	; (80057a0 <TIM_Base_SetConfig+0x11c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d013      	beq.n	800571e <TIM_Base_SetConfig+0x9a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a2a      	ldr	r2, [pc, #168]	; (80057a4 <TIM_Base_SetConfig+0x120>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00f      	beq.n	800571e <TIM_Base_SetConfig+0x9a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a29      	ldr	r2, [pc, #164]	; (80057a8 <TIM_Base_SetConfig+0x124>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00b      	beq.n	800571e <TIM_Base_SetConfig+0x9a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a28      	ldr	r2, [pc, #160]	; (80057ac <TIM_Base_SetConfig+0x128>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d007      	beq.n	800571e <TIM_Base_SetConfig+0x9a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a27      	ldr	r2, [pc, #156]	; (80057b0 <TIM_Base_SetConfig+0x12c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d003      	beq.n	800571e <TIM_Base_SetConfig+0x9a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a26      	ldr	r2, [pc, #152]	; (80057b4 <TIM_Base_SetConfig+0x130>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d108      	bne.n	8005730 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4313      	orrs	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a10      	ldr	r2, [pc, #64]	; (8005798 <TIM_Base_SetConfig+0x114>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00f      	beq.n	800577c <TIM_Base_SetConfig+0xf8>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a12      	ldr	r2, [pc, #72]	; (80057a8 <TIM_Base_SetConfig+0x124>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00b      	beq.n	800577c <TIM_Base_SetConfig+0xf8>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a11      	ldr	r2, [pc, #68]	; (80057ac <TIM_Base_SetConfig+0x128>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d007      	beq.n	800577c <TIM_Base_SetConfig+0xf8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a10      	ldr	r2, [pc, #64]	; (80057b0 <TIM_Base_SetConfig+0x12c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d003      	beq.n	800577c <TIM_Base_SetConfig+0xf8>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a0f      	ldr	r2, [pc, #60]	; (80057b4 <TIM_Base_SetConfig+0x130>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d103      	bne.n	8005784 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	691a      	ldr	r2, [r3, #16]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	615a      	str	r2, [r3, #20]
}
 800578a:	bf00      	nop
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	40010000 	.word	0x40010000
 800579c:	40000400 	.word	0x40000400
 80057a0:	40000800 	.word	0x40000800
 80057a4:	40000c00 	.word	0x40000c00
 80057a8:	40010400 	.word	0x40010400
 80057ac:	40014000 	.word	0x40014000
 80057b0:	40014400 	.word	0x40014400
 80057b4:	40014800 	.word	0x40014800

080057b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	f023 0201 	bic.w	r2, r3, #1
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	4b37      	ldr	r3, [pc, #220]	; (80058c0 <TIM_OC1_SetConfig+0x108>)
 80057e4:	4013      	ands	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0303 	bic.w	r3, r3, #3
 80057ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f023 0302 	bic.w	r3, r3, #2
 8005800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a2d      	ldr	r2, [pc, #180]	; (80058c4 <TIM_OC1_SetConfig+0x10c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00f      	beq.n	8005834 <TIM_OC1_SetConfig+0x7c>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a2c      	ldr	r2, [pc, #176]	; (80058c8 <TIM_OC1_SetConfig+0x110>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00b      	beq.n	8005834 <TIM_OC1_SetConfig+0x7c>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a2b      	ldr	r2, [pc, #172]	; (80058cc <TIM_OC1_SetConfig+0x114>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d007      	beq.n	8005834 <TIM_OC1_SetConfig+0x7c>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a2a      	ldr	r2, [pc, #168]	; (80058d0 <TIM_OC1_SetConfig+0x118>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d003      	beq.n	8005834 <TIM_OC1_SetConfig+0x7c>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a29      	ldr	r2, [pc, #164]	; (80058d4 <TIM_OC1_SetConfig+0x11c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d10c      	bne.n	800584e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f023 0308 	bic.w	r3, r3, #8
 800583a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	4313      	orrs	r3, r2
 8005844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f023 0304 	bic.w	r3, r3, #4
 800584c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a1c      	ldr	r2, [pc, #112]	; (80058c4 <TIM_OC1_SetConfig+0x10c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00f      	beq.n	8005876 <TIM_OC1_SetConfig+0xbe>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a1b      	ldr	r2, [pc, #108]	; (80058c8 <TIM_OC1_SetConfig+0x110>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00b      	beq.n	8005876 <TIM_OC1_SetConfig+0xbe>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a1a      	ldr	r2, [pc, #104]	; (80058cc <TIM_OC1_SetConfig+0x114>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d007      	beq.n	8005876 <TIM_OC1_SetConfig+0xbe>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a19      	ldr	r2, [pc, #100]	; (80058d0 <TIM_OC1_SetConfig+0x118>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d003      	beq.n	8005876 <TIM_OC1_SetConfig+0xbe>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a18      	ldr	r2, [pc, #96]	; (80058d4 <TIM_OC1_SetConfig+0x11c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d111      	bne.n	800589a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800587c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	621a      	str	r2, [r3, #32]
}
 80058b4:	bf00      	nop
 80058b6:	371c      	adds	r7, #28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	fffeff8f 	.word	0xfffeff8f
 80058c4:	40010000 	.word	0x40010000
 80058c8:	40010400 	.word	0x40010400
 80058cc:	40014000 	.word	0x40014000
 80058d0:	40014400 	.word	0x40014400
 80058d4:	40014800 	.word	0x40014800

080058d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	f023 0210 	bic.w	r2, r3, #16
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4b34      	ldr	r3, [pc, #208]	; (80059d4 <TIM_OC2_SetConfig+0xfc>)
 8005904:	4013      	ands	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800590e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	021b      	lsls	r3, r3, #8
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f023 0320 	bic.w	r3, r3, #32
 8005922:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	011b      	lsls	r3, r3, #4
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	4313      	orrs	r3, r2
 800592e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a29      	ldr	r2, [pc, #164]	; (80059d8 <TIM_OC2_SetConfig+0x100>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d003      	beq.n	8005940 <TIM_OC2_SetConfig+0x68>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a28      	ldr	r2, [pc, #160]	; (80059dc <TIM_OC2_SetConfig+0x104>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d10d      	bne.n	800595c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800595a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a1e      	ldr	r2, [pc, #120]	; (80059d8 <TIM_OC2_SetConfig+0x100>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00f      	beq.n	8005984 <TIM_OC2_SetConfig+0xac>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a1d      	ldr	r2, [pc, #116]	; (80059dc <TIM_OC2_SetConfig+0x104>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00b      	beq.n	8005984 <TIM_OC2_SetConfig+0xac>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a1c      	ldr	r2, [pc, #112]	; (80059e0 <TIM_OC2_SetConfig+0x108>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d007      	beq.n	8005984 <TIM_OC2_SetConfig+0xac>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a1b      	ldr	r2, [pc, #108]	; (80059e4 <TIM_OC2_SetConfig+0x10c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_OC2_SetConfig+0xac>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a1a      	ldr	r2, [pc, #104]	; (80059e8 <TIM_OC2_SetConfig+0x110>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d113      	bne.n	80059ac <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800598a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005992:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	621a      	str	r2, [r3, #32]
}
 80059c6:	bf00      	nop
 80059c8:	371c      	adds	r7, #28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	feff8fff 	.word	0xfeff8fff
 80059d8:	40010000 	.word	0x40010000
 80059dc:	40010400 	.word	0x40010400
 80059e0:	40014000 	.word	0x40014000
 80059e4:	40014400 	.word	0x40014400
 80059e8:	40014800 	.word	0x40014800

080059ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4b33      	ldr	r3, [pc, #204]	; (8005ae4 <TIM_OC3_SetConfig+0xf8>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 0303 	bic.w	r3, r3, #3
 8005a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	021b      	lsls	r3, r3, #8
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a28      	ldr	r2, [pc, #160]	; (8005ae8 <TIM_OC3_SetConfig+0xfc>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d003      	beq.n	8005a52 <TIM_OC3_SetConfig+0x66>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a27      	ldr	r2, [pc, #156]	; (8005aec <TIM_OC3_SetConfig+0x100>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d10d      	bne.n	8005a6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	021b      	lsls	r3, r3, #8
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a1d      	ldr	r2, [pc, #116]	; (8005ae8 <TIM_OC3_SetConfig+0xfc>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d00f      	beq.n	8005a96 <TIM_OC3_SetConfig+0xaa>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a1c      	ldr	r2, [pc, #112]	; (8005aec <TIM_OC3_SetConfig+0x100>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00b      	beq.n	8005a96 <TIM_OC3_SetConfig+0xaa>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a1b      	ldr	r2, [pc, #108]	; (8005af0 <TIM_OC3_SetConfig+0x104>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d007      	beq.n	8005a96 <TIM_OC3_SetConfig+0xaa>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a1a      	ldr	r2, [pc, #104]	; (8005af4 <TIM_OC3_SetConfig+0x108>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d003      	beq.n	8005a96 <TIM_OC3_SetConfig+0xaa>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a19      	ldr	r2, [pc, #100]	; (8005af8 <TIM_OC3_SetConfig+0x10c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d113      	bne.n	8005abe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	011b      	lsls	r3, r3, #4
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	621a      	str	r2, [r3, #32]
}
 8005ad8:	bf00      	nop
 8005ada:	371c      	adds	r7, #28
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	fffeff8f 	.word	0xfffeff8f
 8005ae8:	40010000 	.word	0x40010000
 8005aec:	40010400 	.word	0x40010400
 8005af0:	40014000 	.word	0x40014000
 8005af4:	40014400 	.word	0x40014400
 8005af8:	40014800 	.word	0x40014800

08005afc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4b24      	ldr	r3, [pc, #144]	; (8005bb8 <TIM_OC4_SetConfig+0xbc>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	031b      	lsls	r3, r3, #12
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a19      	ldr	r2, [pc, #100]	; (8005bbc <TIM_OC4_SetConfig+0xc0>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00f      	beq.n	8005b7c <TIM_OC4_SetConfig+0x80>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a18      	ldr	r2, [pc, #96]	; (8005bc0 <TIM_OC4_SetConfig+0xc4>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00b      	beq.n	8005b7c <TIM_OC4_SetConfig+0x80>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a17      	ldr	r2, [pc, #92]	; (8005bc4 <TIM_OC4_SetConfig+0xc8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d007      	beq.n	8005b7c <TIM_OC4_SetConfig+0x80>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a16      	ldr	r2, [pc, #88]	; (8005bc8 <TIM_OC4_SetConfig+0xcc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d003      	beq.n	8005b7c <TIM_OC4_SetConfig+0x80>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a15      	ldr	r2, [pc, #84]	; (8005bcc <TIM_OC4_SetConfig+0xd0>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d109      	bne.n	8005b90 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	019b      	lsls	r3, r3, #6
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	621a      	str	r2, [r3, #32]
}
 8005baa:	bf00      	nop
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	feff8fff 	.word	0xfeff8fff
 8005bbc:	40010000 	.word	0x40010000
 8005bc0:	40010400 	.word	0x40010400
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	40014400 	.word	0x40014400
 8005bcc:	40014800 	.word	0x40014800

08005bd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4b21      	ldr	r3, [pc, #132]	; (8005c80 <TIM_OC5_SetConfig+0xb0>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	041b      	lsls	r3, r3, #16
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <TIM_OC5_SetConfig+0xb4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00f      	beq.n	8005c46 <TIM_OC5_SetConfig+0x76>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <TIM_OC5_SetConfig+0xb8>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00b      	beq.n	8005c46 <TIM_OC5_SetConfig+0x76>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <TIM_OC5_SetConfig+0xbc>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d007      	beq.n	8005c46 <TIM_OC5_SetConfig+0x76>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <TIM_OC5_SetConfig+0xc0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d003      	beq.n	8005c46 <TIM_OC5_SetConfig+0x76>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a14      	ldr	r2, [pc, #80]	; (8005c94 <TIM_OC5_SetConfig+0xc4>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d109      	bne.n	8005c5a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	621a      	str	r2, [r3, #32]
}
 8005c74:	bf00      	nop
 8005c76:	371c      	adds	r7, #28
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	fffeff8f 	.word	0xfffeff8f
 8005c84:	40010000 	.word	0x40010000
 8005c88:	40010400 	.word	0x40010400
 8005c8c:	40014000 	.word	0x40014000
 8005c90:	40014400 	.word	0x40014400
 8005c94:	40014800 	.word	0x40014800

08005c98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	4b22      	ldr	r3, [pc, #136]	; (8005d4c <TIM_OC6_SetConfig+0xb4>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	051b      	lsls	r3, r3, #20
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a19      	ldr	r2, [pc, #100]	; (8005d50 <TIM_OC6_SetConfig+0xb8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d00f      	beq.n	8005d10 <TIM_OC6_SetConfig+0x78>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a18      	ldr	r2, [pc, #96]	; (8005d54 <TIM_OC6_SetConfig+0xbc>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00b      	beq.n	8005d10 <TIM_OC6_SetConfig+0x78>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a17      	ldr	r2, [pc, #92]	; (8005d58 <TIM_OC6_SetConfig+0xc0>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d007      	beq.n	8005d10 <TIM_OC6_SetConfig+0x78>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a16      	ldr	r2, [pc, #88]	; (8005d5c <TIM_OC6_SetConfig+0xc4>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d003      	beq.n	8005d10 <TIM_OC6_SetConfig+0x78>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a15      	ldr	r2, [pc, #84]	; (8005d60 <TIM_OC6_SetConfig+0xc8>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d109      	bne.n	8005d24 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	029b      	lsls	r3, r3, #10
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	621a      	str	r2, [r3, #32]
}
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	feff8fff 	.word	0xfeff8fff
 8005d50:	40010000 	.word	0x40010000
 8005d54:	40010400 	.word	0x40010400
 8005d58:	40014000 	.word	0x40014000
 8005d5c:	40014400 	.word	0x40014400
 8005d60:	40014800 	.word	0x40014800

08005d64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	f023 0201 	bic.w	r2, r3, #1
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f023 030a 	bic.w	r3, r3, #10
 8005da0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	621a      	str	r2, [r3, #32]
}
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b087      	sub	sp, #28
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	60f8      	str	r0, [r7, #12]
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	f023 0210 	bic.w	r2, r3, #16
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	031b      	lsls	r3, r3, #12
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	621a      	str	r2, [r3, #32]
}
 8005e16:	bf00      	nop
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
	...

08005e24 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4b09      	ldr	r3, [pc, #36]	; (8005e5c <TIM_ITRx_SetConfig+0x38>)
 8005e38:	4013      	ands	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	f043 0307 	orr.w	r3, r3, #7
 8005e46:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	609a      	str	r2, [r3, #8]
}
 8005e4e:	bf00      	nop
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	ffcfff8f 	.word	0xffcfff8f

08005e60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	021a      	lsls	r2, r3, #8
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	431a      	orrs	r2, r3
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	609a      	str	r2, [r3, #8]
}
 8005e94:	bf00      	nop
 8005e96:	371c      	adds	r7, #28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e06d      	b.n	8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a30      	ldr	r2, [pc, #192]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d004      	beq.n	8005eec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a2f      	ldr	r2, [pc, #188]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d108      	bne.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ef2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a20      	ldr	r2, [pc, #128]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d022      	beq.n	8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f2a:	d01d      	beq.n	8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a1d      	ldr	r2, [pc, #116]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d018      	beq.n	8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a1c      	ldr	r2, [pc, #112]	; (8005fac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d013      	beq.n	8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a1a      	ldr	r2, [pc, #104]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d00e      	beq.n	8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a15      	ldr	r2, [pc, #84]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d009      	beq.n	8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a16      	ldr	r2, [pc, #88]	; (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d004      	beq.n	8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a15      	ldr	r2, [pc, #84]	; (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d10c      	bne.n	8005f82 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	40010000 	.word	0x40010000
 8005fa4:	40010400 	.word	0x40010400
 8005fa8:	40000400 	.word	0x40000400
 8005fac:	40000800 	.word	0x40000800
 8005fb0:	40000c00 	.word	0x40000c00
 8005fb4:	40001800 	.word	0x40001800
 8005fb8:	40014000 	.word	0x40014000

08005fbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e042      	b.n	8006054 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d106      	bne.n	8005fe6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7fb f857 	bl	8001094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2224      	movs	r2, #36	; 0x24
 8005fea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 0201 	bic.w	r2, r2, #1
 8005ffc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fce0 	bl	80069c4 <UART_SetConfig>
 8006004:	4603      	mov	r3, r0
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e022      	b.n	8006054 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f001 fb40 	bl	800769c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800602a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689a      	ldr	r2, [r3, #8]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800603a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0201 	orr.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f001 fbc7 	bl	80077e0 <UART_CheckIdleState>
 8006052:	4603      	mov	r3, r0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08a      	sub	sp, #40	; 0x28
 8006060:	af02      	add	r7, sp, #8
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	603b      	str	r3, [r7, #0]
 8006068:	4613      	mov	r3, r2
 800606a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006072:	2b20      	cmp	r3, #32
 8006074:	d17b      	bne.n	800616e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <HAL_UART_Transmit+0x26>
 800607c:	88fb      	ldrh	r3, [r7, #6]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e074      	b.n	8006170 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2221      	movs	r2, #33	; 0x21
 8006092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006096:	f7fb f9b1 	bl	80013fc <HAL_GetTick>
 800609a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	88fa      	ldrh	r2, [r7, #6]
 80060a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	88fa      	ldrh	r2, [r7, #6]
 80060a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b4:	d108      	bne.n	80060c8 <HAL_UART_Transmit+0x6c>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d104      	bne.n	80060c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	61bb      	str	r3, [r7, #24]
 80060c6:	e003      	b.n	80060d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060cc:	2300      	movs	r3, #0
 80060ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060d0:	e030      	b.n	8006134 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2200      	movs	r2, #0
 80060da:	2180      	movs	r1, #128	; 0x80
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f001 fc29 	bl	8007934 <UART_WaitOnFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d005      	beq.n	80060f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2220      	movs	r2, #32
 80060ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e03d      	b.n	8006170 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10b      	bne.n	8006112 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006108:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	3302      	adds	r3, #2
 800610e:	61bb      	str	r3, [r7, #24]
 8006110:	e007      	b.n	8006122 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	781a      	ldrb	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	3301      	adds	r3, #1
 8006120:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006128:	b29b      	uxth	r3, r3
 800612a:	3b01      	subs	r3, #1
 800612c:	b29a      	uxth	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800613a:	b29b      	uxth	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1c8      	bne.n	80060d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	2200      	movs	r2, #0
 8006148:	2140      	movs	r1, #64	; 0x40
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f001 fbf2 	bl	8007934 <UART_WaitOnFlagUntilTimeout>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d005      	beq.n	8006162 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2220      	movs	r2, #32
 800615a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e006      	b.n	8006170 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2220      	movs	r2, #32
 8006166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	e000      	b.n	8006170 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800616e:	2302      	movs	r3, #2
  }
}
 8006170:	4618      	mov	r0, r3
 8006172:	3720      	adds	r7, #32
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08a      	sub	sp, #40	; 0x28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	4613      	mov	r3, r2
 8006184:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800618c:	2b20      	cmp	r3, #32
 800618e:	d137      	bne.n	8006200 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <HAL_UART_Receive_IT+0x24>
 8006196:	88fb      	ldrh	r3, [r7, #6]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e030      	b.n	8006202 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a18      	ldr	r2, [pc, #96]	; (800620c <HAL_UART_Receive_IT+0x94>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d01f      	beq.n	80061f0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d018      	beq.n	80061f0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	e853 3f00 	ldrex	r3, [r3]
 80061ca:	613b      	str	r3, [r7, #16]
   return(result);
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	623b      	str	r3, [r7, #32]
 80061de:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e0:	69f9      	ldr	r1, [r7, #28]
 80061e2:	6a3a      	ldr	r2, [r7, #32]
 80061e4:	e841 2300 	strex	r3, r2, [r1]
 80061e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1e6      	bne.n	80061be <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061f0:	88fb      	ldrh	r3, [r7, #6]
 80061f2:	461a      	mov	r2, r3
 80061f4:	68b9      	ldr	r1, [r7, #8]
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f001 fc04 	bl	8007a04 <UART_Start_Receive_IT>
 80061fc:	4603      	mov	r3, r0
 80061fe:	e000      	b.n	8006202 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006200:	2302      	movs	r3, #2
  }
}
 8006202:	4618      	mov	r0, r3
 8006204:	3728      	adds	r7, #40	; 0x28
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	58000c00 	.word	0x58000c00

08006210 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b0ba      	sub	sp, #232	; 0xe8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006236:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800623a:	f640 030f 	movw	r3, #2063	; 0x80f
 800623e:	4013      	ands	r3, r2
 8006240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006248:	2b00      	cmp	r3, #0
 800624a:	d11b      	bne.n	8006284 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800624c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006250:	f003 0320 	and.w	r3, r3, #32
 8006254:	2b00      	cmp	r3, #0
 8006256:	d015      	beq.n	8006284 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b00      	cmp	r3, #0
 8006262:	d105      	bne.n	8006270 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d009      	beq.n	8006284 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 8377 	beq.w	8006968 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	4798      	blx	r3
      }
      return;
 8006282:	e371      	b.n	8006968 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 8123 	beq.w	80064d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800628e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006292:	4b8d      	ldr	r3, [pc, #564]	; (80064c8 <HAL_UART_IRQHandler+0x2b8>)
 8006294:	4013      	ands	r3, r2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d106      	bne.n	80062a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800629a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800629e:	4b8b      	ldr	r3, [pc, #556]	; (80064cc <HAL_UART_IRQHandler+0x2bc>)
 80062a0:	4013      	ands	r3, r2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 8116 	beq.w	80064d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d011      	beq.n	80062d8 <HAL_UART_IRQHandler+0xc8>
 80062b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00b      	beq.n	80062d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2201      	movs	r2, #1
 80062c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ce:	f043 0201 	orr.w	r2, r3, #1
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d011      	beq.n	8006308 <HAL_UART_IRQHandler+0xf8>
 80062e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00b      	beq.n	8006308 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2202      	movs	r2, #2
 80062f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fe:	f043 0204 	orr.w	r2, r3, #4
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b00      	cmp	r3, #0
 8006312:	d011      	beq.n	8006338 <HAL_UART_IRQHandler+0x128>
 8006314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2204      	movs	r2, #4
 8006326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632e:	f043 0202 	orr.w	r2, r3, #2
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d017      	beq.n	8006374 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b00      	cmp	r3, #0
 800634e:	d105      	bne.n	800635c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006350:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006354:	4b5c      	ldr	r3, [pc, #368]	; (80064c8 <HAL_UART_IRQHandler+0x2b8>)
 8006356:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00b      	beq.n	8006374 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2208      	movs	r2, #8
 8006362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636a:	f043 0208 	orr.w	r2, r3, #8
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800637c:	2b00      	cmp	r3, #0
 800637e:	d012      	beq.n	80063a6 <HAL_UART_IRQHandler+0x196>
 8006380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006384:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00c      	beq.n	80063a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006394:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639c:	f043 0220 	orr.w	r2, r3, #32
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 82dd 	beq.w	800696c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d013      	beq.n	80063e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80063be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c2:	f003 0320 	and.w	r3, r3, #32
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d105      	bne.n	80063d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80063ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d007      	beq.n	80063e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fa:	2b40      	cmp	r3, #64	; 0x40
 80063fc:	d005      	beq.n	800640a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006402:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006406:	2b00      	cmp	r3, #0
 8006408:	d054      	beq.n	80064b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f001 fc1c 	bl	8007c48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641a:	2b40      	cmp	r3, #64	; 0x40
 800641c:	d146      	bne.n	80064ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3308      	adds	r3, #8
 8006424:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006434:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800643c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3308      	adds	r3, #8
 8006446:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800644a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800644e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006456:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1d9      	bne.n	800641e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006470:	2b00      	cmp	r3, #0
 8006472:	d017      	beq.n	80064a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800647a:	4a15      	ldr	r2, [pc, #84]	; (80064d0 <HAL_UART_IRQHandler+0x2c0>)
 800647c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006484:	4618      	mov	r0, r3
 8006486:	f7fb fc17 	bl	8001cb8 <HAL_DMA_Abort_IT>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d019      	beq.n	80064c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800649e:	4610      	mov	r0, r2
 80064a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a2:	e00f      	b.n	80064c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fa77 	bl	8006998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064aa:	e00b      	b.n	80064c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fa73 	bl	8006998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b2:	e007      	b.n	80064c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fa6f 	bl	8006998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80064c2:	e253      	b.n	800696c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c4:	bf00      	nop
    return;
 80064c6:	e251      	b.n	800696c <HAL_UART_IRQHandler+0x75c>
 80064c8:	10000001 	.word	0x10000001
 80064cc:	04000120 	.word	0x04000120
 80064d0:	08007d15 	.word	0x08007d15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064d8:	2b01      	cmp	r3, #1
 80064da:	f040 81e7 	bne.w	80068ac <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e2:	f003 0310 	and.w	r3, r3, #16
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 81e0 	beq.w	80068ac <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f0:	f003 0310 	and.w	r3, r3, #16
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 81d9 	beq.w	80068ac <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2210      	movs	r2, #16
 8006500:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650c:	2b40      	cmp	r3, #64	; 0x40
 800650e:	f040 8151 	bne.w	80067b4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a96      	ldr	r2, [pc, #600]	; (8006774 <HAL_UART_IRQHandler+0x564>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d068      	beq.n	80065f2 <HAL_UART_IRQHandler+0x3e2>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a93      	ldr	r2, [pc, #588]	; (8006778 <HAL_UART_IRQHandler+0x568>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d061      	beq.n	80065f2 <HAL_UART_IRQHandler+0x3e2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a91      	ldr	r2, [pc, #580]	; (800677c <HAL_UART_IRQHandler+0x56c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d05a      	beq.n	80065f2 <HAL_UART_IRQHandler+0x3e2>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a8e      	ldr	r2, [pc, #568]	; (8006780 <HAL_UART_IRQHandler+0x570>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d053      	beq.n	80065f2 <HAL_UART_IRQHandler+0x3e2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a8c      	ldr	r2, [pc, #560]	; (8006784 <HAL_UART_IRQHandler+0x574>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d04c      	beq.n	80065f2 <HAL_UART_IRQHandler+0x3e2>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a89      	ldr	r2, [pc, #548]	; (8006788 <HAL_UART_IRQHandler+0x578>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d045      	beq.n	80065f2 <HAL_UART_IRQHandler+0x3e2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a87      	ldr	r2, [pc, #540]	; (800678c <HAL_UART_IRQHandler+0x57c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d03e      	beq.n	80065f2 <HAL_UART_IRQHandler+0x3e2>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a84      	ldr	r2, [pc, #528]	; (8006790 <HAL_UART_IRQHandler+0x580>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d037      	beq.n	80065f2 <HAL_UART_IRQHandler+0x3e2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a82      	ldr	r2, [pc, #520]	; (8006794 <HAL_UART_IRQHandler+0x584>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d030      	beq.n	80065f2 <HAL_UART_IRQHandler+0x3e2>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a7f      	ldr	r2, [pc, #508]	; (8006798 <HAL_UART_IRQHandler+0x588>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d029      	beq.n	80065f2 <HAL_UART_IRQHandler+0x3e2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a7d      	ldr	r2, [pc, #500]	; (800679c <HAL_UART_IRQHandler+0x58c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d022      	beq.n	80065f2 <HAL_UART_IRQHandler+0x3e2>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a7a      	ldr	r2, [pc, #488]	; (80067a0 <HAL_UART_IRQHandler+0x590>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d01b      	beq.n	80065f2 <HAL_UART_IRQHandler+0x3e2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a78      	ldr	r2, [pc, #480]	; (80067a4 <HAL_UART_IRQHandler+0x594>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d014      	beq.n	80065f2 <HAL_UART_IRQHandler+0x3e2>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a75      	ldr	r2, [pc, #468]	; (80067a8 <HAL_UART_IRQHandler+0x598>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d00d      	beq.n	80065f2 <HAL_UART_IRQHandler+0x3e2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a73      	ldr	r2, [pc, #460]	; (80067ac <HAL_UART_IRQHandler+0x59c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d006      	beq.n	80065f2 <HAL_UART_IRQHandler+0x3e2>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a70      	ldr	r2, [pc, #448]	; (80067b0 <HAL_UART_IRQHandler+0x5a0>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d106      	bne.n	8006600 <HAL_UART_IRQHandler+0x3f0>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	e005      	b.n	800660c <HAL_UART_IRQHandler+0x3fc>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	b29b      	uxth	r3, r3
 800660c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006610:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 81ab 	beq.w	8006970 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006620:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006624:	429a      	cmp	r2, r3
 8006626:	f080 81a3 	bcs.w	8006970 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006630:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006640:	f000 8087 	beq.w	8006752 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006650:	e853 3f00 	ldrex	r3, [r3]
 8006654:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006658:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800665c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006660:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	461a      	mov	r2, r3
 800666a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800666e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006672:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800667a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800667e:	e841 2300 	strex	r3, r2, [r1]
 8006682:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1da      	bne.n	8006644 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3308      	adds	r3, #8
 8006694:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800669e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066a0:	f023 0301 	bic.w	r3, r3, #1
 80066a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3308      	adds	r3, #8
 80066ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80066b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e1      	bne.n	800668e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3308      	adds	r3, #8
 80066d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066d4:	e853 3f00 	ldrex	r3, [r3]
 80066d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3308      	adds	r3, #8
 80066ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80066ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80066fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e3      	bne.n	80066ca <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2220      	movs	r2, #32
 8006706:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800671e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006720:	f023 0310 	bic.w	r3, r3, #16
 8006724:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	461a      	mov	r2, r3
 800672e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006732:	65bb      	str	r3, [r7, #88]	; 0x58
 8006734:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006736:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006738:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e4      	bne.n	8006710 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800674c:	4618      	mov	r0, r3
 800674e:	f7fa ff95 	bl	800167c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2202      	movs	r2, #2
 8006756:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006764:	b29b      	uxth	r3, r3
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	b29b      	uxth	r3, r3
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f91d 	bl	80069ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006772:	e0fd      	b.n	8006970 <HAL_UART_IRQHandler+0x760>
 8006774:	40020010 	.word	0x40020010
 8006778:	40020028 	.word	0x40020028
 800677c:	40020040 	.word	0x40020040
 8006780:	40020058 	.word	0x40020058
 8006784:	40020070 	.word	0x40020070
 8006788:	40020088 	.word	0x40020088
 800678c:	400200a0 	.word	0x400200a0
 8006790:	400200b8 	.word	0x400200b8
 8006794:	40020410 	.word	0x40020410
 8006798:	40020428 	.word	0x40020428
 800679c:	40020440 	.word	0x40020440
 80067a0:	40020458 	.word	0x40020458
 80067a4:	40020470 	.word	0x40020470
 80067a8:	40020488 	.word	0x40020488
 80067ac:	400204a0 	.word	0x400204a0
 80067b0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 80cf 	beq.w	8006974 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80067d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 80ca 	beq.w	8006974 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	461a      	mov	r2, r3
 80067fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006802:	647b      	str	r3, [r7, #68]	; 0x44
 8006804:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006806:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006808:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800680a:	e841 2300 	strex	r3, r2, [r1]
 800680e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e4      	bne.n	80067e0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3308      	adds	r3, #8
 800681c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	623b      	str	r3, [r7, #32]
   return(result);
 8006826:	6a3a      	ldr	r2, [r7, #32]
 8006828:	4b55      	ldr	r3, [pc, #340]	; (8006980 <HAL_UART_IRQHandler+0x770>)
 800682a:	4013      	ands	r3, r2
 800682c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3308      	adds	r3, #8
 8006836:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800683a:	633a      	str	r2, [r7, #48]	; 0x30
 800683c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e3      	bne.n	8006816 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	e853 3f00 	ldrex	r3, [r3]
 800686e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f023 0310 	bic.w	r3, r3, #16
 8006876:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006884:	61fb      	str	r3, [r7, #28]
 8006886:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	69b9      	ldr	r1, [r7, #24]
 800688a:	69fa      	ldr	r2, [r7, #28]
 800688c:	e841 2300 	strex	r3, r2, [r1]
 8006890:	617b      	str	r3, [r7, #20]
   return(result);
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e4      	bne.n	8006862 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800689e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f881 	bl	80069ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068aa:	e063      	b.n	8006974 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00e      	beq.n	80068d6 <HAL_UART_IRQHandler+0x6c6>
 80068b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d008      	beq.n	80068d6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80068cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f001 ff7e 	bl	80087d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068d4:	e051      	b.n	800697a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80068d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d014      	beq.n	800690c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80068e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d105      	bne.n	80068fa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80068ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d008      	beq.n	800690c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d03a      	beq.n	8006978 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	4798      	blx	r3
    }
    return;
 800690a:	e035      	b.n	8006978 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800690c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006914:	2b00      	cmp	r3, #0
 8006916:	d009      	beq.n	800692c <HAL_UART_IRQHandler+0x71c>
 8006918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800691c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f001 fa0b 	bl	8007d40 <UART_EndTransmit_IT>
    return;
 800692a:	e026      	b.n	800697a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800692c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006930:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d009      	beq.n	800694c <HAL_UART_IRQHandler+0x73c>
 8006938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800693c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d003      	beq.n	800694c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f001 ff57 	bl	80087f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800694a:	e016      	b.n	800697a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800694c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d010      	beq.n	800697a <HAL_UART_IRQHandler+0x76a>
 8006958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800695c:	2b00      	cmp	r3, #0
 800695e:	da0c      	bge.n	800697a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f001 ff3f 	bl	80087e4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006966:	e008      	b.n	800697a <HAL_UART_IRQHandler+0x76a>
      return;
 8006968:	bf00      	nop
 800696a:	e006      	b.n	800697a <HAL_UART_IRQHandler+0x76a>
    return;
 800696c:	bf00      	nop
 800696e:	e004      	b.n	800697a <HAL_UART_IRQHandler+0x76a>
      return;
 8006970:	bf00      	nop
 8006972:	e002      	b.n	800697a <HAL_UART_IRQHandler+0x76a>
      return;
 8006974:	bf00      	nop
 8006976:	e000      	b.n	800697a <HAL_UART_IRQHandler+0x76a>
    return;
 8006978:	bf00      	nop
  }
}
 800697a:	37e8      	adds	r7, #232	; 0xe8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	effffffe 	.word	0xeffffffe

08006984 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	460b      	mov	r3, r1
 80069b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069c8:	b092      	sub	sp, #72	; 0x48
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	431a      	orrs	r2, r3
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	4bbe      	ldr	r3, [pc, #760]	; (8006cec <UART_SetConfig+0x328>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	6812      	ldr	r2, [r2, #0]
 80069fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069fc:	430b      	orrs	r3, r1
 80069fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	68da      	ldr	r2, [r3, #12]
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4ab3      	ldr	r2, [pc, #716]	; (8006cf0 <UART_SetConfig+0x32c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d004      	beq.n	8006a30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689a      	ldr	r2, [r3, #8]
 8006a36:	4baf      	ldr	r3, [pc, #700]	; (8006cf4 <UART_SetConfig+0x330>)
 8006a38:	4013      	ands	r3, r2
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	6812      	ldr	r2, [r2, #0]
 8006a3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a40:	430b      	orrs	r3, r1
 8006a42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4a:	f023 010f 	bic.w	r1, r3, #15
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4aa6      	ldr	r2, [pc, #664]	; (8006cf8 <UART_SetConfig+0x334>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d177      	bne.n	8006b54 <UART_SetConfig+0x190>
 8006a64:	4ba5      	ldr	r3, [pc, #660]	; (8006cfc <UART_SetConfig+0x338>)
 8006a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a6c:	2b28      	cmp	r3, #40	; 0x28
 8006a6e:	d86d      	bhi.n	8006b4c <UART_SetConfig+0x188>
 8006a70:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <UART_SetConfig+0xb4>)
 8006a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a76:	bf00      	nop
 8006a78:	08006b1d 	.word	0x08006b1d
 8006a7c:	08006b4d 	.word	0x08006b4d
 8006a80:	08006b4d 	.word	0x08006b4d
 8006a84:	08006b4d 	.word	0x08006b4d
 8006a88:	08006b4d 	.word	0x08006b4d
 8006a8c:	08006b4d 	.word	0x08006b4d
 8006a90:	08006b4d 	.word	0x08006b4d
 8006a94:	08006b4d 	.word	0x08006b4d
 8006a98:	08006b25 	.word	0x08006b25
 8006a9c:	08006b4d 	.word	0x08006b4d
 8006aa0:	08006b4d 	.word	0x08006b4d
 8006aa4:	08006b4d 	.word	0x08006b4d
 8006aa8:	08006b4d 	.word	0x08006b4d
 8006aac:	08006b4d 	.word	0x08006b4d
 8006ab0:	08006b4d 	.word	0x08006b4d
 8006ab4:	08006b4d 	.word	0x08006b4d
 8006ab8:	08006b2d 	.word	0x08006b2d
 8006abc:	08006b4d 	.word	0x08006b4d
 8006ac0:	08006b4d 	.word	0x08006b4d
 8006ac4:	08006b4d 	.word	0x08006b4d
 8006ac8:	08006b4d 	.word	0x08006b4d
 8006acc:	08006b4d 	.word	0x08006b4d
 8006ad0:	08006b4d 	.word	0x08006b4d
 8006ad4:	08006b4d 	.word	0x08006b4d
 8006ad8:	08006b35 	.word	0x08006b35
 8006adc:	08006b4d 	.word	0x08006b4d
 8006ae0:	08006b4d 	.word	0x08006b4d
 8006ae4:	08006b4d 	.word	0x08006b4d
 8006ae8:	08006b4d 	.word	0x08006b4d
 8006aec:	08006b4d 	.word	0x08006b4d
 8006af0:	08006b4d 	.word	0x08006b4d
 8006af4:	08006b4d 	.word	0x08006b4d
 8006af8:	08006b3d 	.word	0x08006b3d
 8006afc:	08006b4d 	.word	0x08006b4d
 8006b00:	08006b4d 	.word	0x08006b4d
 8006b04:	08006b4d 	.word	0x08006b4d
 8006b08:	08006b4d 	.word	0x08006b4d
 8006b0c:	08006b4d 	.word	0x08006b4d
 8006b10:	08006b4d 	.word	0x08006b4d
 8006b14:	08006b4d 	.word	0x08006b4d
 8006b18:	08006b45 	.word	0x08006b45
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b22:	e326      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006b24:	2304      	movs	r3, #4
 8006b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b2a:	e322      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006b2c:	2308      	movs	r3, #8
 8006b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b32:	e31e      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006b34:	2310      	movs	r3, #16
 8006b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b3a:	e31a      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006b3c:	2320      	movs	r3, #32
 8006b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b42:	e316      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006b44:	2340      	movs	r3, #64	; 0x40
 8006b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b4a:	e312      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006b4c:	2380      	movs	r3, #128	; 0x80
 8006b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b52:	e30e      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a69      	ldr	r2, [pc, #420]	; (8006d00 <UART_SetConfig+0x33c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d130      	bne.n	8006bc0 <UART_SetConfig+0x1fc>
 8006b5e:	4b67      	ldr	r3, [pc, #412]	; (8006cfc <UART_SetConfig+0x338>)
 8006b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b62:	f003 0307 	and.w	r3, r3, #7
 8006b66:	2b05      	cmp	r3, #5
 8006b68:	d826      	bhi.n	8006bb8 <UART_SetConfig+0x1f4>
 8006b6a:	a201      	add	r2, pc, #4	; (adr r2, 8006b70 <UART_SetConfig+0x1ac>)
 8006b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b70:	08006b89 	.word	0x08006b89
 8006b74:	08006b91 	.word	0x08006b91
 8006b78:	08006b99 	.word	0x08006b99
 8006b7c:	08006ba1 	.word	0x08006ba1
 8006b80:	08006ba9 	.word	0x08006ba9
 8006b84:	08006bb1 	.word	0x08006bb1
 8006b88:	2300      	movs	r3, #0
 8006b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b8e:	e2f0      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006b90:	2304      	movs	r3, #4
 8006b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b96:	e2ec      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006b98:	2308      	movs	r3, #8
 8006b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b9e:	e2e8      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006ba0:	2310      	movs	r3, #16
 8006ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ba6:	e2e4      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006ba8:	2320      	movs	r3, #32
 8006baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bae:	e2e0      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006bb0:	2340      	movs	r3, #64	; 0x40
 8006bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bb6:	e2dc      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006bb8:	2380      	movs	r3, #128	; 0x80
 8006bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bbe:	e2d8      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a4f      	ldr	r2, [pc, #316]	; (8006d04 <UART_SetConfig+0x340>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d130      	bne.n	8006c2c <UART_SetConfig+0x268>
 8006bca:	4b4c      	ldr	r3, [pc, #304]	; (8006cfc <UART_SetConfig+0x338>)
 8006bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	2b05      	cmp	r3, #5
 8006bd4:	d826      	bhi.n	8006c24 <UART_SetConfig+0x260>
 8006bd6:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <UART_SetConfig+0x218>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006bf5 	.word	0x08006bf5
 8006be0:	08006bfd 	.word	0x08006bfd
 8006be4:	08006c05 	.word	0x08006c05
 8006be8:	08006c0d 	.word	0x08006c0d
 8006bec:	08006c15 	.word	0x08006c15
 8006bf0:	08006c1d 	.word	0x08006c1d
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bfa:	e2ba      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006bfc:	2304      	movs	r3, #4
 8006bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c02:	e2b6      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006c04:	2308      	movs	r3, #8
 8006c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c0a:	e2b2      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006c0c:	2310      	movs	r3, #16
 8006c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c12:	e2ae      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006c14:	2320      	movs	r3, #32
 8006c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c1a:	e2aa      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006c1c:	2340      	movs	r3, #64	; 0x40
 8006c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c22:	e2a6      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006c24:	2380      	movs	r3, #128	; 0x80
 8006c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c2a:	e2a2      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a35      	ldr	r2, [pc, #212]	; (8006d08 <UART_SetConfig+0x344>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d130      	bne.n	8006c98 <UART_SetConfig+0x2d4>
 8006c36:	4b31      	ldr	r3, [pc, #196]	; (8006cfc <UART_SetConfig+0x338>)
 8006c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	2b05      	cmp	r3, #5
 8006c40:	d826      	bhi.n	8006c90 <UART_SetConfig+0x2cc>
 8006c42:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <UART_SetConfig+0x284>)
 8006c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c48:	08006c61 	.word	0x08006c61
 8006c4c:	08006c69 	.word	0x08006c69
 8006c50:	08006c71 	.word	0x08006c71
 8006c54:	08006c79 	.word	0x08006c79
 8006c58:	08006c81 	.word	0x08006c81
 8006c5c:	08006c89 	.word	0x08006c89
 8006c60:	2300      	movs	r3, #0
 8006c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c66:	e284      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006c68:	2304      	movs	r3, #4
 8006c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c6e:	e280      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006c70:	2308      	movs	r3, #8
 8006c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c76:	e27c      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006c78:	2310      	movs	r3, #16
 8006c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c7e:	e278      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006c80:	2320      	movs	r3, #32
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c86:	e274      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006c88:	2340      	movs	r3, #64	; 0x40
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c8e:	e270      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006c90:	2380      	movs	r3, #128	; 0x80
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c96:	e26c      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a1b      	ldr	r2, [pc, #108]	; (8006d0c <UART_SetConfig+0x348>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d142      	bne.n	8006d28 <UART_SetConfig+0x364>
 8006ca2:	4b16      	ldr	r3, [pc, #88]	; (8006cfc <UART_SetConfig+0x338>)
 8006ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca6:	f003 0307 	and.w	r3, r3, #7
 8006caa:	2b05      	cmp	r3, #5
 8006cac:	d838      	bhi.n	8006d20 <UART_SetConfig+0x35c>
 8006cae:	a201      	add	r2, pc, #4	; (adr r2, 8006cb4 <UART_SetConfig+0x2f0>)
 8006cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb4:	08006ccd 	.word	0x08006ccd
 8006cb8:	08006cd5 	.word	0x08006cd5
 8006cbc:	08006cdd 	.word	0x08006cdd
 8006cc0:	08006ce5 	.word	0x08006ce5
 8006cc4:	08006d11 	.word	0x08006d11
 8006cc8:	08006d19 	.word	0x08006d19
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cd2:	e24e      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006cd4:	2304      	movs	r3, #4
 8006cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cda:	e24a      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006cdc:	2308      	movs	r3, #8
 8006cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ce2:	e246      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006ce4:	2310      	movs	r3, #16
 8006ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cea:	e242      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006cec:	cfff69f3 	.word	0xcfff69f3
 8006cf0:	58000c00 	.word	0x58000c00
 8006cf4:	11fff4ff 	.word	0x11fff4ff
 8006cf8:	40011000 	.word	0x40011000
 8006cfc:	58024400 	.word	0x58024400
 8006d00:	40004400 	.word	0x40004400
 8006d04:	40004800 	.word	0x40004800
 8006d08:	40004c00 	.word	0x40004c00
 8006d0c:	40005000 	.word	0x40005000
 8006d10:	2320      	movs	r3, #32
 8006d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d16:	e22c      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006d18:	2340      	movs	r3, #64	; 0x40
 8006d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d1e:	e228      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006d20:	2380      	movs	r3, #128	; 0x80
 8006d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d26:	e224      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4ab1      	ldr	r2, [pc, #708]	; (8006ff4 <UART_SetConfig+0x630>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d176      	bne.n	8006e20 <UART_SetConfig+0x45c>
 8006d32:	4bb1      	ldr	r3, [pc, #708]	; (8006ff8 <UART_SetConfig+0x634>)
 8006d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d3a:	2b28      	cmp	r3, #40	; 0x28
 8006d3c:	d86c      	bhi.n	8006e18 <UART_SetConfig+0x454>
 8006d3e:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <UART_SetConfig+0x380>)
 8006d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d44:	08006de9 	.word	0x08006de9
 8006d48:	08006e19 	.word	0x08006e19
 8006d4c:	08006e19 	.word	0x08006e19
 8006d50:	08006e19 	.word	0x08006e19
 8006d54:	08006e19 	.word	0x08006e19
 8006d58:	08006e19 	.word	0x08006e19
 8006d5c:	08006e19 	.word	0x08006e19
 8006d60:	08006e19 	.word	0x08006e19
 8006d64:	08006df1 	.word	0x08006df1
 8006d68:	08006e19 	.word	0x08006e19
 8006d6c:	08006e19 	.word	0x08006e19
 8006d70:	08006e19 	.word	0x08006e19
 8006d74:	08006e19 	.word	0x08006e19
 8006d78:	08006e19 	.word	0x08006e19
 8006d7c:	08006e19 	.word	0x08006e19
 8006d80:	08006e19 	.word	0x08006e19
 8006d84:	08006df9 	.word	0x08006df9
 8006d88:	08006e19 	.word	0x08006e19
 8006d8c:	08006e19 	.word	0x08006e19
 8006d90:	08006e19 	.word	0x08006e19
 8006d94:	08006e19 	.word	0x08006e19
 8006d98:	08006e19 	.word	0x08006e19
 8006d9c:	08006e19 	.word	0x08006e19
 8006da0:	08006e19 	.word	0x08006e19
 8006da4:	08006e01 	.word	0x08006e01
 8006da8:	08006e19 	.word	0x08006e19
 8006dac:	08006e19 	.word	0x08006e19
 8006db0:	08006e19 	.word	0x08006e19
 8006db4:	08006e19 	.word	0x08006e19
 8006db8:	08006e19 	.word	0x08006e19
 8006dbc:	08006e19 	.word	0x08006e19
 8006dc0:	08006e19 	.word	0x08006e19
 8006dc4:	08006e09 	.word	0x08006e09
 8006dc8:	08006e19 	.word	0x08006e19
 8006dcc:	08006e19 	.word	0x08006e19
 8006dd0:	08006e19 	.word	0x08006e19
 8006dd4:	08006e19 	.word	0x08006e19
 8006dd8:	08006e19 	.word	0x08006e19
 8006ddc:	08006e19 	.word	0x08006e19
 8006de0:	08006e19 	.word	0x08006e19
 8006de4:	08006e11 	.word	0x08006e11
 8006de8:	2301      	movs	r3, #1
 8006dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dee:	e1c0      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006df0:	2304      	movs	r3, #4
 8006df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006df6:	e1bc      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006df8:	2308      	movs	r3, #8
 8006dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dfe:	e1b8      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006e00:	2310      	movs	r3, #16
 8006e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e06:	e1b4      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006e08:	2320      	movs	r3, #32
 8006e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e0e:	e1b0      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006e10:	2340      	movs	r3, #64	; 0x40
 8006e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e16:	e1ac      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006e18:	2380      	movs	r3, #128	; 0x80
 8006e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e1e:	e1a8      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a75      	ldr	r2, [pc, #468]	; (8006ffc <UART_SetConfig+0x638>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d130      	bne.n	8006e8c <UART_SetConfig+0x4c8>
 8006e2a:	4b73      	ldr	r3, [pc, #460]	; (8006ff8 <UART_SetConfig+0x634>)
 8006e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2e:	f003 0307 	and.w	r3, r3, #7
 8006e32:	2b05      	cmp	r3, #5
 8006e34:	d826      	bhi.n	8006e84 <UART_SetConfig+0x4c0>
 8006e36:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <UART_SetConfig+0x478>)
 8006e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3c:	08006e55 	.word	0x08006e55
 8006e40:	08006e5d 	.word	0x08006e5d
 8006e44:	08006e65 	.word	0x08006e65
 8006e48:	08006e6d 	.word	0x08006e6d
 8006e4c:	08006e75 	.word	0x08006e75
 8006e50:	08006e7d 	.word	0x08006e7d
 8006e54:	2300      	movs	r3, #0
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e5a:	e18a      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e62:	e186      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006e64:	2308      	movs	r3, #8
 8006e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e6a:	e182      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006e6c:	2310      	movs	r3, #16
 8006e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e72:	e17e      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006e74:	2320      	movs	r3, #32
 8006e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e7a:	e17a      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006e7c:	2340      	movs	r3, #64	; 0x40
 8006e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e82:	e176      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006e84:	2380      	movs	r3, #128	; 0x80
 8006e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e8a:	e172      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a5b      	ldr	r2, [pc, #364]	; (8007000 <UART_SetConfig+0x63c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d130      	bne.n	8006ef8 <UART_SetConfig+0x534>
 8006e96:	4b58      	ldr	r3, [pc, #352]	; (8006ff8 <UART_SetConfig+0x634>)
 8006e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9a:	f003 0307 	and.w	r3, r3, #7
 8006e9e:	2b05      	cmp	r3, #5
 8006ea0:	d826      	bhi.n	8006ef0 <UART_SetConfig+0x52c>
 8006ea2:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <UART_SetConfig+0x4e4>)
 8006ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea8:	08006ec1 	.word	0x08006ec1
 8006eac:	08006ec9 	.word	0x08006ec9
 8006eb0:	08006ed1 	.word	0x08006ed1
 8006eb4:	08006ed9 	.word	0x08006ed9
 8006eb8:	08006ee1 	.word	0x08006ee1
 8006ebc:	08006ee9 	.word	0x08006ee9
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ec6:	e154      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006ec8:	2304      	movs	r3, #4
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ece:	e150      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006ed0:	2308      	movs	r3, #8
 8006ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ed6:	e14c      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006ed8:	2310      	movs	r3, #16
 8006eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ede:	e148      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006ee0:	2320      	movs	r3, #32
 8006ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ee6:	e144      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006ee8:	2340      	movs	r3, #64	; 0x40
 8006eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eee:	e140      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006ef0:	2380      	movs	r3, #128	; 0x80
 8006ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ef6:	e13c      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a41      	ldr	r2, [pc, #260]	; (8007004 <UART_SetConfig+0x640>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	f040 8082 	bne.w	8007008 <UART_SetConfig+0x644>
 8006f04:	4b3c      	ldr	r3, [pc, #240]	; (8006ff8 <UART_SetConfig+0x634>)
 8006f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f0c:	2b28      	cmp	r3, #40	; 0x28
 8006f0e:	d86d      	bhi.n	8006fec <UART_SetConfig+0x628>
 8006f10:	a201      	add	r2, pc, #4	; (adr r2, 8006f18 <UART_SetConfig+0x554>)
 8006f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f16:	bf00      	nop
 8006f18:	08006fbd 	.word	0x08006fbd
 8006f1c:	08006fed 	.word	0x08006fed
 8006f20:	08006fed 	.word	0x08006fed
 8006f24:	08006fed 	.word	0x08006fed
 8006f28:	08006fed 	.word	0x08006fed
 8006f2c:	08006fed 	.word	0x08006fed
 8006f30:	08006fed 	.word	0x08006fed
 8006f34:	08006fed 	.word	0x08006fed
 8006f38:	08006fc5 	.word	0x08006fc5
 8006f3c:	08006fed 	.word	0x08006fed
 8006f40:	08006fed 	.word	0x08006fed
 8006f44:	08006fed 	.word	0x08006fed
 8006f48:	08006fed 	.word	0x08006fed
 8006f4c:	08006fed 	.word	0x08006fed
 8006f50:	08006fed 	.word	0x08006fed
 8006f54:	08006fed 	.word	0x08006fed
 8006f58:	08006fcd 	.word	0x08006fcd
 8006f5c:	08006fed 	.word	0x08006fed
 8006f60:	08006fed 	.word	0x08006fed
 8006f64:	08006fed 	.word	0x08006fed
 8006f68:	08006fed 	.word	0x08006fed
 8006f6c:	08006fed 	.word	0x08006fed
 8006f70:	08006fed 	.word	0x08006fed
 8006f74:	08006fed 	.word	0x08006fed
 8006f78:	08006fd5 	.word	0x08006fd5
 8006f7c:	08006fed 	.word	0x08006fed
 8006f80:	08006fed 	.word	0x08006fed
 8006f84:	08006fed 	.word	0x08006fed
 8006f88:	08006fed 	.word	0x08006fed
 8006f8c:	08006fed 	.word	0x08006fed
 8006f90:	08006fed 	.word	0x08006fed
 8006f94:	08006fed 	.word	0x08006fed
 8006f98:	08006fdd 	.word	0x08006fdd
 8006f9c:	08006fed 	.word	0x08006fed
 8006fa0:	08006fed 	.word	0x08006fed
 8006fa4:	08006fed 	.word	0x08006fed
 8006fa8:	08006fed 	.word	0x08006fed
 8006fac:	08006fed 	.word	0x08006fed
 8006fb0:	08006fed 	.word	0x08006fed
 8006fb4:	08006fed 	.word	0x08006fed
 8006fb8:	08006fe5 	.word	0x08006fe5
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fc2:	e0d6      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006fc4:	2304      	movs	r3, #4
 8006fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fca:	e0d2      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006fcc:	2308      	movs	r3, #8
 8006fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd2:	e0ce      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006fd4:	2310      	movs	r3, #16
 8006fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fda:	e0ca      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006fdc:	2320      	movs	r3, #32
 8006fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe2:	e0c6      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006fe4:	2340      	movs	r3, #64	; 0x40
 8006fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fea:	e0c2      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006fec:	2380      	movs	r3, #128	; 0x80
 8006fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ff2:	e0be      	b.n	8007172 <UART_SetConfig+0x7ae>
 8006ff4:	40011400 	.word	0x40011400
 8006ff8:	58024400 	.word	0x58024400
 8006ffc:	40007800 	.word	0x40007800
 8007000:	40007c00 	.word	0x40007c00
 8007004:	40011800 	.word	0x40011800
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4aad      	ldr	r2, [pc, #692]	; (80072c4 <UART_SetConfig+0x900>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d176      	bne.n	8007100 <UART_SetConfig+0x73c>
 8007012:	4bad      	ldr	r3, [pc, #692]	; (80072c8 <UART_SetConfig+0x904>)
 8007014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800701a:	2b28      	cmp	r3, #40	; 0x28
 800701c:	d86c      	bhi.n	80070f8 <UART_SetConfig+0x734>
 800701e:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <UART_SetConfig+0x660>)
 8007020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007024:	080070c9 	.word	0x080070c9
 8007028:	080070f9 	.word	0x080070f9
 800702c:	080070f9 	.word	0x080070f9
 8007030:	080070f9 	.word	0x080070f9
 8007034:	080070f9 	.word	0x080070f9
 8007038:	080070f9 	.word	0x080070f9
 800703c:	080070f9 	.word	0x080070f9
 8007040:	080070f9 	.word	0x080070f9
 8007044:	080070d1 	.word	0x080070d1
 8007048:	080070f9 	.word	0x080070f9
 800704c:	080070f9 	.word	0x080070f9
 8007050:	080070f9 	.word	0x080070f9
 8007054:	080070f9 	.word	0x080070f9
 8007058:	080070f9 	.word	0x080070f9
 800705c:	080070f9 	.word	0x080070f9
 8007060:	080070f9 	.word	0x080070f9
 8007064:	080070d9 	.word	0x080070d9
 8007068:	080070f9 	.word	0x080070f9
 800706c:	080070f9 	.word	0x080070f9
 8007070:	080070f9 	.word	0x080070f9
 8007074:	080070f9 	.word	0x080070f9
 8007078:	080070f9 	.word	0x080070f9
 800707c:	080070f9 	.word	0x080070f9
 8007080:	080070f9 	.word	0x080070f9
 8007084:	080070e1 	.word	0x080070e1
 8007088:	080070f9 	.word	0x080070f9
 800708c:	080070f9 	.word	0x080070f9
 8007090:	080070f9 	.word	0x080070f9
 8007094:	080070f9 	.word	0x080070f9
 8007098:	080070f9 	.word	0x080070f9
 800709c:	080070f9 	.word	0x080070f9
 80070a0:	080070f9 	.word	0x080070f9
 80070a4:	080070e9 	.word	0x080070e9
 80070a8:	080070f9 	.word	0x080070f9
 80070ac:	080070f9 	.word	0x080070f9
 80070b0:	080070f9 	.word	0x080070f9
 80070b4:	080070f9 	.word	0x080070f9
 80070b8:	080070f9 	.word	0x080070f9
 80070bc:	080070f9 	.word	0x080070f9
 80070c0:	080070f9 	.word	0x080070f9
 80070c4:	080070f1 	.word	0x080070f1
 80070c8:	2301      	movs	r3, #1
 80070ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ce:	e050      	b.n	8007172 <UART_SetConfig+0x7ae>
 80070d0:	2304      	movs	r3, #4
 80070d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070d6:	e04c      	b.n	8007172 <UART_SetConfig+0x7ae>
 80070d8:	2308      	movs	r3, #8
 80070da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070de:	e048      	b.n	8007172 <UART_SetConfig+0x7ae>
 80070e0:	2310      	movs	r3, #16
 80070e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070e6:	e044      	b.n	8007172 <UART_SetConfig+0x7ae>
 80070e8:	2320      	movs	r3, #32
 80070ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ee:	e040      	b.n	8007172 <UART_SetConfig+0x7ae>
 80070f0:	2340      	movs	r3, #64	; 0x40
 80070f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070f6:	e03c      	b.n	8007172 <UART_SetConfig+0x7ae>
 80070f8:	2380      	movs	r3, #128	; 0x80
 80070fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070fe:	e038      	b.n	8007172 <UART_SetConfig+0x7ae>
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a71      	ldr	r2, [pc, #452]	; (80072cc <UART_SetConfig+0x908>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d130      	bne.n	800716c <UART_SetConfig+0x7a8>
 800710a:	4b6f      	ldr	r3, [pc, #444]	; (80072c8 <UART_SetConfig+0x904>)
 800710c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	2b05      	cmp	r3, #5
 8007114:	d826      	bhi.n	8007164 <UART_SetConfig+0x7a0>
 8007116:	a201      	add	r2, pc, #4	; (adr r2, 800711c <UART_SetConfig+0x758>)
 8007118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711c:	08007135 	.word	0x08007135
 8007120:	0800713d 	.word	0x0800713d
 8007124:	08007145 	.word	0x08007145
 8007128:	0800714d 	.word	0x0800714d
 800712c:	08007155 	.word	0x08007155
 8007130:	0800715d 	.word	0x0800715d
 8007134:	2302      	movs	r3, #2
 8007136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713a:	e01a      	b.n	8007172 <UART_SetConfig+0x7ae>
 800713c:	2304      	movs	r3, #4
 800713e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007142:	e016      	b.n	8007172 <UART_SetConfig+0x7ae>
 8007144:	2308      	movs	r3, #8
 8007146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714a:	e012      	b.n	8007172 <UART_SetConfig+0x7ae>
 800714c:	2310      	movs	r3, #16
 800714e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007152:	e00e      	b.n	8007172 <UART_SetConfig+0x7ae>
 8007154:	2320      	movs	r3, #32
 8007156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715a:	e00a      	b.n	8007172 <UART_SetConfig+0x7ae>
 800715c:	2340      	movs	r3, #64	; 0x40
 800715e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007162:	e006      	b.n	8007172 <UART_SetConfig+0x7ae>
 8007164:	2380      	movs	r3, #128	; 0x80
 8007166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800716a:	e002      	b.n	8007172 <UART_SetConfig+0x7ae>
 800716c:	2380      	movs	r3, #128	; 0x80
 800716e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a55      	ldr	r2, [pc, #340]	; (80072cc <UART_SetConfig+0x908>)
 8007178:	4293      	cmp	r3, r2
 800717a:	f040 80f8 	bne.w	800736e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800717e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007182:	2b20      	cmp	r3, #32
 8007184:	dc46      	bgt.n	8007214 <UART_SetConfig+0x850>
 8007186:	2b02      	cmp	r3, #2
 8007188:	db75      	blt.n	8007276 <UART_SetConfig+0x8b2>
 800718a:	3b02      	subs	r3, #2
 800718c:	2b1e      	cmp	r3, #30
 800718e:	d872      	bhi.n	8007276 <UART_SetConfig+0x8b2>
 8007190:	a201      	add	r2, pc, #4	; (adr r2, 8007198 <UART_SetConfig+0x7d4>)
 8007192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007196:	bf00      	nop
 8007198:	0800721b 	.word	0x0800721b
 800719c:	08007277 	.word	0x08007277
 80071a0:	08007223 	.word	0x08007223
 80071a4:	08007277 	.word	0x08007277
 80071a8:	08007277 	.word	0x08007277
 80071ac:	08007277 	.word	0x08007277
 80071b0:	08007233 	.word	0x08007233
 80071b4:	08007277 	.word	0x08007277
 80071b8:	08007277 	.word	0x08007277
 80071bc:	08007277 	.word	0x08007277
 80071c0:	08007277 	.word	0x08007277
 80071c4:	08007277 	.word	0x08007277
 80071c8:	08007277 	.word	0x08007277
 80071cc:	08007277 	.word	0x08007277
 80071d0:	08007243 	.word	0x08007243
 80071d4:	08007277 	.word	0x08007277
 80071d8:	08007277 	.word	0x08007277
 80071dc:	08007277 	.word	0x08007277
 80071e0:	08007277 	.word	0x08007277
 80071e4:	08007277 	.word	0x08007277
 80071e8:	08007277 	.word	0x08007277
 80071ec:	08007277 	.word	0x08007277
 80071f0:	08007277 	.word	0x08007277
 80071f4:	08007277 	.word	0x08007277
 80071f8:	08007277 	.word	0x08007277
 80071fc:	08007277 	.word	0x08007277
 8007200:	08007277 	.word	0x08007277
 8007204:	08007277 	.word	0x08007277
 8007208:	08007277 	.word	0x08007277
 800720c:	08007277 	.word	0x08007277
 8007210:	08007269 	.word	0x08007269
 8007214:	2b40      	cmp	r3, #64	; 0x40
 8007216:	d02a      	beq.n	800726e <UART_SetConfig+0x8aa>
 8007218:	e02d      	b.n	8007276 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800721a:	f7fd fb4d 	bl	80048b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800721e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007220:	e02f      	b.n	8007282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007226:	4618      	mov	r0, r3
 8007228:	f7fd fb5c 	bl	80048e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007230:	e027      	b.n	8007282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007232:	f107 0318 	add.w	r3, r7, #24
 8007236:	4618      	mov	r0, r3
 8007238:	f7fd fca8 	bl	8004b8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007240:	e01f      	b.n	8007282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007242:	4b21      	ldr	r3, [pc, #132]	; (80072c8 <UART_SetConfig+0x904>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0320 	and.w	r3, r3, #32
 800724a:	2b00      	cmp	r3, #0
 800724c:	d009      	beq.n	8007262 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800724e:	4b1e      	ldr	r3, [pc, #120]	; (80072c8 <UART_SetConfig+0x904>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	08db      	lsrs	r3, r3, #3
 8007254:	f003 0303 	and.w	r3, r3, #3
 8007258:	4a1d      	ldr	r2, [pc, #116]	; (80072d0 <UART_SetConfig+0x90c>)
 800725a:	fa22 f303 	lsr.w	r3, r2, r3
 800725e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007260:	e00f      	b.n	8007282 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007262:	4b1b      	ldr	r3, [pc, #108]	; (80072d0 <UART_SetConfig+0x90c>)
 8007264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007266:	e00c      	b.n	8007282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007268:	4b1a      	ldr	r3, [pc, #104]	; (80072d4 <UART_SetConfig+0x910>)
 800726a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800726c:	e009      	b.n	8007282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800726e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007274:	e005      	b.n	8007282 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007280:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 81ee 	beq.w	8007666 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	4a12      	ldr	r2, [pc, #72]	; (80072d8 <UART_SetConfig+0x914>)
 8007290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007294:	461a      	mov	r2, r3
 8007296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007298:	fbb3 f3f2 	udiv	r3, r3, r2
 800729c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	4613      	mov	r3, r2
 80072a4:	005b      	lsls	r3, r3, #1
 80072a6:	4413      	add	r3, r2
 80072a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d305      	bcc.n	80072ba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d910      	bls.n	80072dc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80072c0:	e1d1      	b.n	8007666 <UART_SetConfig+0xca2>
 80072c2:	bf00      	nop
 80072c4:	40011c00 	.word	0x40011c00
 80072c8:	58024400 	.word	0x58024400
 80072cc:	58000c00 	.word	0x58000c00
 80072d0:	03d09000 	.word	0x03d09000
 80072d4:	003d0900 	.word	0x003d0900
 80072d8:	080093dc 	.word	0x080093dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072de:	2200      	movs	r2, #0
 80072e0:	60bb      	str	r3, [r7, #8]
 80072e2:	60fa      	str	r2, [r7, #12]
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	4ac0      	ldr	r2, [pc, #768]	; (80075ec <UART_SetConfig+0xc28>)
 80072ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	2200      	movs	r2, #0
 80072f2:	603b      	str	r3, [r7, #0]
 80072f4:	607a      	str	r2, [r7, #4]
 80072f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072fe:	f7f9 f847 	bl	8000390 <__aeabi_uldivmod>
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	4610      	mov	r0, r2
 8007308:	4619      	mov	r1, r3
 800730a:	f04f 0200 	mov.w	r2, #0
 800730e:	f04f 0300 	mov.w	r3, #0
 8007312:	020b      	lsls	r3, r1, #8
 8007314:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007318:	0202      	lsls	r2, r0, #8
 800731a:	6979      	ldr	r1, [r7, #20]
 800731c:	6849      	ldr	r1, [r1, #4]
 800731e:	0849      	lsrs	r1, r1, #1
 8007320:	2000      	movs	r0, #0
 8007322:	460c      	mov	r4, r1
 8007324:	4605      	mov	r5, r0
 8007326:	eb12 0804 	adds.w	r8, r2, r4
 800732a:	eb43 0905 	adc.w	r9, r3, r5
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	469a      	mov	sl, r3
 8007336:	4693      	mov	fp, r2
 8007338:	4652      	mov	r2, sl
 800733a:	465b      	mov	r3, fp
 800733c:	4640      	mov	r0, r8
 800733e:	4649      	mov	r1, r9
 8007340:	f7f9 f826 	bl	8000390 <__aeabi_uldivmod>
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	4613      	mov	r3, r2
 800734a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007352:	d308      	bcc.n	8007366 <UART_SetConfig+0x9a2>
 8007354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800735a:	d204      	bcs.n	8007366 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007362:	60da      	str	r2, [r3, #12]
 8007364:	e17f      	b.n	8007666 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800736c:	e17b      	b.n	8007666 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007376:	f040 80bd 	bne.w	80074f4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800737a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800737e:	2b20      	cmp	r3, #32
 8007380:	dc48      	bgt.n	8007414 <UART_SetConfig+0xa50>
 8007382:	2b00      	cmp	r3, #0
 8007384:	db7b      	blt.n	800747e <UART_SetConfig+0xaba>
 8007386:	2b20      	cmp	r3, #32
 8007388:	d879      	bhi.n	800747e <UART_SetConfig+0xaba>
 800738a:	a201      	add	r2, pc, #4	; (adr r2, 8007390 <UART_SetConfig+0x9cc>)
 800738c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007390:	0800741b 	.word	0x0800741b
 8007394:	08007423 	.word	0x08007423
 8007398:	0800747f 	.word	0x0800747f
 800739c:	0800747f 	.word	0x0800747f
 80073a0:	0800742b 	.word	0x0800742b
 80073a4:	0800747f 	.word	0x0800747f
 80073a8:	0800747f 	.word	0x0800747f
 80073ac:	0800747f 	.word	0x0800747f
 80073b0:	0800743b 	.word	0x0800743b
 80073b4:	0800747f 	.word	0x0800747f
 80073b8:	0800747f 	.word	0x0800747f
 80073bc:	0800747f 	.word	0x0800747f
 80073c0:	0800747f 	.word	0x0800747f
 80073c4:	0800747f 	.word	0x0800747f
 80073c8:	0800747f 	.word	0x0800747f
 80073cc:	0800747f 	.word	0x0800747f
 80073d0:	0800744b 	.word	0x0800744b
 80073d4:	0800747f 	.word	0x0800747f
 80073d8:	0800747f 	.word	0x0800747f
 80073dc:	0800747f 	.word	0x0800747f
 80073e0:	0800747f 	.word	0x0800747f
 80073e4:	0800747f 	.word	0x0800747f
 80073e8:	0800747f 	.word	0x0800747f
 80073ec:	0800747f 	.word	0x0800747f
 80073f0:	0800747f 	.word	0x0800747f
 80073f4:	0800747f 	.word	0x0800747f
 80073f8:	0800747f 	.word	0x0800747f
 80073fc:	0800747f 	.word	0x0800747f
 8007400:	0800747f 	.word	0x0800747f
 8007404:	0800747f 	.word	0x0800747f
 8007408:	0800747f 	.word	0x0800747f
 800740c:	0800747f 	.word	0x0800747f
 8007410:	08007471 	.word	0x08007471
 8007414:	2b40      	cmp	r3, #64	; 0x40
 8007416:	d02e      	beq.n	8007476 <UART_SetConfig+0xab2>
 8007418:	e031      	b.n	800747e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800741a:	f7fc f863 	bl	80034e4 <HAL_RCC_GetPCLK1Freq>
 800741e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007420:	e033      	b.n	800748a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007422:	f7fc f875 	bl	8003510 <HAL_RCC_GetPCLK2Freq>
 8007426:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007428:	e02f      	b.n	800748a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800742a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800742e:	4618      	mov	r0, r3
 8007430:	f7fd fa58 	bl	80048e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007438:	e027      	b.n	800748a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800743a:	f107 0318 	add.w	r3, r7, #24
 800743e:	4618      	mov	r0, r3
 8007440:	f7fd fba4 	bl	8004b8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007448:	e01f      	b.n	800748a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800744a:	4b69      	ldr	r3, [pc, #420]	; (80075f0 <UART_SetConfig+0xc2c>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0320 	and.w	r3, r3, #32
 8007452:	2b00      	cmp	r3, #0
 8007454:	d009      	beq.n	800746a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007456:	4b66      	ldr	r3, [pc, #408]	; (80075f0 <UART_SetConfig+0xc2c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	08db      	lsrs	r3, r3, #3
 800745c:	f003 0303 	and.w	r3, r3, #3
 8007460:	4a64      	ldr	r2, [pc, #400]	; (80075f4 <UART_SetConfig+0xc30>)
 8007462:	fa22 f303 	lsr.w	r3, r2, r3
 8007466:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007468:	e00f      	b.n	800748a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800746a:	4b62      	ldr	r3, [pc, #392]	; (80075f4 <UART_SetConfig+0xc30>)
 800746c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800746e:	e00c      	b.n	800748a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007470:	4b61      	ldr	r3, [pc, #388]	; (80075f8 <UART_SetConfig+0xc34>)
 8007472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007474:	e009      	b.n	800748a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800747a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800747c:	e005      	b.n	800748a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800747e:	2300      	movs	r3, #0
 8007480:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007488:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800748a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 80ea 	beq.w	8007666 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	4a55      	ldr	r2, [pc, #340]	; (80075ec <UART_SetConfig+0xc28>)
 8007498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800749c:	461a      	mov	r2, r3
 800749e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80074a4:	005a      	lsls	r2, r3, #1
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	085b      	lsrs	r3, r3, #1
 80074ac:	441a      	add	r2, r3
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ba:	2b0f      	cmp	r3, #15
 80074bc:	d916      	bls.n	80074ec <UART_SetConfig+0xb28>
 80074be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c4:	d212      	bcs.n	80074ec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	f023 030f 	bic.w	r3, r3, #15
 80074ce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d2:	085b      	lsrs	r3, r3, #1
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	b29a      	uxth	r2, r3
 80074dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80074de:	4313      	orrs	r3, r2
 80074e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80074e8:	60da      	str	r2, [r3, #12]
 80074ea:	e0bc      	b.n	8007666 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80074f2:	e0b8      	b.n	8007666 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80074f8:	2b20      	cmp	r3, #32
 80074fa:	dc4b      	bgt.n	8007594 <UART_SetConfig+0xbd0>
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f2c0 8087 	blt.w	8007610 <UART_SetConfig+0xc4c>
 8007502:	2b20      	cmp	r3, #32
 8007504:	f200 8084 	bhi.w	8007610 <UART_SetConfig+0xc4c>
 8007508:	a201      	add	r2, pc, #4	; (adr r2, 8007510 <UART_SetConfig+0xb4c>)
 800750a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750e:	bf00      	nop
 8007510:	0800759b 	.word	0x0800759b
 8007514:	080075a3 	.word	0x080075a3
 8007518:	08007611 	.word	0x08007611
 800751c:	08007611 	.word	0x08007611
 8007520:	080075ab 	.word	0x080075ab
 8007524:	08007611 	.word	0x08007611
 8007528:	08007611 	.word	0x08007611
 800752c:	08007611 	.word	0x08007611
 8007530:	080075bb 	.word	0x080075bb
 8007534:	08007611 	.word	0x08007611
 8007538:	08007611 	.word	0x08007611
 800753c:	08007611 	.word	0x08007611
 8007540:	08007611 	.word	0x08007611
 8007544:	08007611 	.word	0x08007611
 8007548:	08007611 	.word	0x08007611
 800754c:	08007611 	.word	0x08007611
 8007550:	080075cb 	.word	0x080075cb
 8007554:	08007611 	.word	0x08007611
 8007558:	08007611 	.word	0x08007611
 800755c:	08007611 	.word	0x08007611
 8007560:	08007611 	.word	0x08007611
 8007564:	08007611 	.word	0x08007611
 8007568:	08007611 	.word	0x08007611
 800756c:	08007611 	.word	0x08007611
 8007570:	08007611 	.word	0x08007611
 8007574:	08007611 	.word	0x08007611
 8007578:	08007611 	.word	0x08007611
 800757c:	08007611 	.word	0x08007611
 8007580:	08007611 	.word	0x08007611
 8007584:	08007611 	.word	0x08007611
 8007588:	08007611 	.word	0x08007611
 800758c:	08007611 	.word	0x08007611
 8007590:	08007603 	.word	0x08007603
 8007594:	2b40      	cmp	r3, #64	; 0x40
 8007596:	d037      	beq.n	8007608 <UART_SetConfig+0xc44>
 8007598:	e03a      	b.n	8007610 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800759a:	f7fb ffa3 	bl	80034e4 <HAL_RCC_GetPCLK1Freq>
 800759e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80075a0:	e03c      	b.n	800761c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075a2:	f7fb ffb5 	bl	8003510 <HAL_RCC_GetPCLK2Freq>
 80075a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80075a8:	e038      	b.n	800761c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fd f998 	bl	80048e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075b8:	e030      	b.n	800761c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075ba:	f107 0318 	add.w	r3, r7, #24
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fd fae4 	bl	8004b8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075c8:	e028      	b.n	800761c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075ca:	4b09      	ldr	r3, [pc, #36]	; (80075f0 <UART_SetConfig+0xc2c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0320 	and.w	r3, r3, #32
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d012      	beq.n	80075fc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075d6:	4b06      	ldr	r3, [pc, #24]	; (80075f0 <UART_SetConfig+0xc2c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	08db      	lsrs	r3, r3, #3
 80075dc:	f003 0303 	and.w	r3, r3, #3
 80075e0:	4a04      	ldr	r2, [pc, #16]	; (80075f4 <UART_SetConfig+0xc30>)
 80075e2:	fa22 f303 	lsr.w	r3, r2, r3
 80075e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075e8:	e018      	b.n	800761c <UART_SetConfig+0xc58>
 80075ea:	bf00      	nop
 80075ec:	080093dc 	.word	0x080093dc
 80075f0:	58024400 	.word	0x58024400
 80075f4:	03d09000 	.word	0x03d09000
 80075f8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80075fc:	4b24      	ldr	r3, [pc, #144]	; (8007690 <UART_SetConfig+0xccc>)
 80075fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007600:	e00c      	b.n	800761c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007602:	4b24      	ldr	r3, [pc, #144]	; (8007694 <UART_SetConfig+0xcd0>)
 8007604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007606:	e009      	b.n	800761c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800760c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800760e:	e005      	b.n	800761c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800761a:	bf00      	nop
    }

    if (pclk != 0U)
 800761c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800761e:	2b00      	cmp	r3, #0
 8007620:	d021      	beq.n	8007666 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	4a1c      	ldr	r2, [pc, #112]	; (8007698 <UART_SetConfig+0xcd4>)
 8007628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800762c:	461a      	mov	r2, r3
 800762e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007630:	fbb3 f2f2 	udiv	r2, r3, r2
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	085b      	lsrs	r3, r3, #1
 800763a:	441a      	add	r2, r3
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	fbb2 f3f3 	udiv	r3, r2, r3
 8007644:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007648:	2b0f      	cmp	r3, #15
 800764a:	d909      	bls.n	8007660 <UART_SetConfig+0xc9c>
 800764c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007652:	d205      	bcs.n	8007660 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007656:	b29a      	uxth	r2, r3
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60da      	str	r2, [r3, #12]
 800765e:	e002      	b.n	8007666 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2201      	movs	r2, #1
 800766a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2201      	movs	r2, #1
 8007672:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2200      	movs	r2, #0
 800767a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	2200      	movs	r2, #0
 8007680:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007682:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007686:	4618      	mov	r0, r3
 8007688:	3748      	adds	r7, #72	; 0x48
 800768a:	46bd      	mov	sp, r7
 800768c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007690:	03d09000 	.word	0x03d09000
 8007694:	003d0900 	.word	0x003d0900
 8007698:	080093dc 	.word	0x080093dc

0800769c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00a      	beq.n	80076c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	430a      	orrs	r2, r1
 80076c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	430a      	orrs	r2, r1
 80076e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ec:	f003 0304 	and.w	r3, r3, #4
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00a      	beq.n	800770a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770e:	f003 0308 	and.w	r3, r3, #8
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00a      	beq.n	800772c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	430a      	orrs	r2, r1
 800772a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007730:	f003 0310 	and.w	r3, r3, #16
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00a      	beq.n	800774e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007752:	f003 0320 	and.w	r3, r3, #32
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00a      	beq.n	8007770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	430a      	orrs	r2, r1
 800776e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007778:	2b00      	cmp	r3, #0
 800777a:	d01a      	beq.n	80077b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	430a      	orrs	r2, r1
 8007790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800779a:	d10a      	bne.n	80077b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	430a      	orrs	r2, r1
 80077b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	430a      	orrs	r2, r1
 80077d2:	605a      	str	r2, [r3, #4]
  }
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b098      	sub	sp, #96	; 0x60
 80077e4:	af02      	add	r7, sp, #8
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077f0:	f7f9 fe04 	bl	80013fc <HAL_GetTick>
 80077f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0308 	and.w	r3, r3, #8
 8007800:	2b08      	cmp	r3, #8
 8007802:	d12f      	bne.n	8007864 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800780c:	2200      	movs	r2, #0
 800780e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f88e 	bl	8007934 <UART_WaitOnFlagUntilTimeout>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d022      	beq.n	8007864 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007826:	e853 3f00 	ldrex	r3, [r3]
 800782a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800782c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007832:	653b      	str	r3, [r7, #80]	; 0x50
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800783c:	647b      	str	r3, [r7, #68]	; 0x44
 800783e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007844:	e841 2300 	strex	r3, r2, [r1]
 8007848:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800784a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1e6      	bne.n	800781e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2220      	movs	r2, #32
 8007854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e063      	b.n	800792c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0304 	and.w	r3, r3, #4
 800786e:	2b04      	cmp	r3, #4
 8007870:	d149      	bne.n	8007906 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007872:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800787a:	2200      	movs	r2, #0
 800787c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f857 	bl	8007934 <UART_WaitOnFlagUntilTimeout>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d03c      	beq.n	8007906 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007894:	e853 3f00 	ldrex	r3, [r3]
 8007898:	623b      	str	r3, [r7, #32]
   return(result);
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078aa:	633b      	str	r3, [r7, #48]	; 0x30
 80078ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078b2:	e841 2300 	strex	r3, r2, [r1]
 80078b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1e6      	bne.n	800788c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3308      	adds	r3, #8
 80078c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	e853 3f00 	ldrex	r3, [r3]
 80078cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f023 0301 	bic.w	r3, r3, #1
 80078d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3308      	adds	r3, #8
 80078dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078de:	61fa      	str	r2, [r7, #28]
 80078e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e2:	69b9      	ldr	r1, [r7, #24]
 80078e4:	69fa      	ldr	r2, [r7, #28]
 80078e6:	e841 2300 	strex	r3, r2, [r1]
 80078ea:	617b      	str	r3, [r7, #20]
   return(result);
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1e5      	bne.n	80078be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e012      	b.n	800792c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2220      	movs	r2, #32
 800790a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2220      	movs	r2, #32
 8007912:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3758      	adds	r7, #88	; 0x58
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	603b      	str	r3, [r7, #0]
 8007940:	4613      	mov	r3, r2
 8007942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007944:	e049      	b.n	80079da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800794c:	d045      	beq.n	80079da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800794e:	f7f9 fd55 	bl	80013fc <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	429a      	cmp	r2, r3
 800795c:	d302      	bcc.n	8007964 <UART_WaitOnFlagUntilTimeout+0x30>
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e048      	b.n	80079fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0304 	and.w	r3, r3, #4
 8007972:	2b00      	cmp	r3, #0
 8007974:	d031      	beq.n	80079da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	f003 0308 	and.w	r3, r3, #8
 8007980:	2b08      	cmp	r3, #8
 8007982:	d110      	bne.n	80079a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2208      	movs	r2, #8
 800798a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 f95b 	bl	8007c48 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2208      	movs	r2, #8
 8007996:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e029      	b.n	80079fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079b4:	d111      	bne.n	80079da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f000 f941 	bl	8007c48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2220      	movs	r2, #32
 80079ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e00f      	b.n	80079fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	69da      	ldr	r2, [r3, #28]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4013      	ands	r3, r2
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	bf0c      	ite	eq
 80079ea:	2301      	moveq	r3, #1
 80079ec:	2300      	movne	r3, #0
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	461a      	mov	r2, r3
 80079f2:	79fb      	ldrb	r3, [r7, #7]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d0a6      	beq.n	8007946 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
	...

08007a04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b0a3      	sub	sp, #140	; 0x8c
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	88fa      	ldrh	r2, [r7, #6]
 8007a1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	88fa      	ldrh	r2, [r7, #6]
 8007a24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a36:	d10e      	bne.n	8007a56 <UART_Start_Receive_IT+0x52>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d105      	bne.n	8007a4c <UART_Start_Receive_IT+0x48>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a4a:	e02d      	b.n	8007aa8 <UART_Start_Receive_IT+0xa4>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	22ff      	movs	r2, #255	; 0xff
 8007a50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a54:	e028      	b.n	8007aa8 <UART_Start_Receive_IT+0xa4>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10d      	bne.n	8007a7a <UART_Start_Receive_IT+0x76>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d104      	bne.n	8007a70 <UART_Start_Receive_IT+0x6c>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	22ff      	movs	r2, #255	; 0xff
 8007a6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a6e:	e01b      	b.n	8007aa8 <UART_Start_Receive_IT+0xa4>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	227f      	movs	r2, #127	; 0x7f
 8007a74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a78:	e016      	b.n	8007aa8 <UART_Start_Receive_IT+0xa4>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a82:	d10d      	bne.n	8007aa0 <UART_Start_Receive_IT+0x9c>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d104      	bne.n	8007a96 <UART_Start_Receive_IT+0x92>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	227f      	movs	r2, #127	; 0x7f
 8007a90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a94:	e008      	b.n	8007aa8 <UART_Start_Receive_IT+0xa4>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	223f      	movs	r2, #63	; 0x3f
 8007a9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a9e:	e003      	b.n	8007aa8 <UART_Start_Receive_IT+0xa4>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2222      	movs	r2, #34	; 0x22
 8007ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3308      	adds	r3, #8
 8007abe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ac2:	e853 3f00 	ldrex	r3, [r3]
 8007ac6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007ac8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007aca:	f043 0301 	orr.w	r3, r3, #1
 8007ace:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	3308      	adds	r3, #8
 8007ad8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007adc:	673a      	str	r2, [r7, #112]	; 0x70
 8007ade:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007ae2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007ae4:	e841 2300 	strex	r3, r2, [r1]
 8007ae8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007aea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e3      	bne.n	8007ab8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007af8:	d14f      	bne.n	8007b9a <UART_Start_Receive_IT+0x196>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007b00:	88fa      	ldrh	r2, [r7, #6]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d349      	bcc.n	8007b9a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b0e:	d107      	bne.n	8007b20 <UART_Start_Receive_IT+0x11c>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d103      	bne.n	8007b20 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	4a47      	ldr	r2, [pc, #284]	; (8007c38 <UART_Start_Receive_IT+0x234>)
 8007b1c:	675a      	str	r2, [r3, #116]	; 0x74
 8007b1e:	e002      	b.n	8007b26 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4a46      	ldr	r2, [pc, #280]	; (8007c3c <UART_Start_Receive_IT+0x238>)
 8007b24:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d01a      	beq.n	8007b64 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b36:	e853 3f00 	ldrex	r3, [r3]
 8007b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b52:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b58:	e841 2300 	strex	r3, r2, [r1]
 8007b5c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1e4      	bne.n	8007b2e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	3308      	adds	r3, #8
 8007b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b6e:	e853 3f00 	ldrex	r3, [r3]
 8007b72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3308      	adds	r3, #8
 8007b82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007b84:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b86:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b8c:	e841 2300 	strex	r3, r2, [r1]
 8007b90:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1e5      	bne.n	8007b64 <UART_Start_Receive_IT+0x160>
 8007b98:	e046      	b.n	8007c28 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba2:	d107      	bne.n	8007bb4 <UART_Start_Receive_IT+0x1b0>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d103      	bne.n	8007bb4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4a24      	ldr	r2, [pc, #144]	; (8007c40 <UART_Start_Receive_IT+0x23c>)
 8007bb0:	675a      	str	r2, [r3, #116]	; 0x74
 8007bb2:	e002      	b.n	8007bba <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4a23      	ldr	r2, [pc, #140]	; (8007c44 <UART_Start_Receive_IT+0x240>)
 8007bb8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d019      	beq.n	8007bf6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bca:	e853 3f00 	ldrex	r3, [r3]
 8007bce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007bd6:	677b      	str	r3, [r7, #116]	; 0x74
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007be0:	637b      	str	r3, [r7, #52]	; 0x34
 8007be2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007be8:	e841 2300 	strex	r3, r2, [r1]
 8007bec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e6      	bne.n	8007bc2 <UART_Start_Receive_IT+0x1be>
 8007bf4:	e018      	b.n	8007c28 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	e853 3f00 	ldrex	r3, [r3]
 8007c02:	613b      	str	r3, [r7, #16]
   return(result);
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f043 0320 	orr.w	r3, r3, #32
 8007c0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	461a      	mov	r2, r3
 8007c12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c14:	623b      	str	r3, [r7, #32]
 8007c16:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c18:	69f9      	ldr	r1, [r7, #28]
 8007c1a:	6a3a      	ldr	r2, [r7, #32]
 8007c1c:	e841 2300 	strex	r3, r2, [r1]
 8007c20:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1e6      	bne.n	8007bf6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	378c      	adds	r7, #140	; 0x8c
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	08008469 	.word	0x08008469
 8007c3c:	08008109 	.word	0x08008109
 8007c40:	08007f51 	.word	0x08007f51
 8007c44:	08007d99 	.word	0x08007d99

08007c48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b095      	sub	sp, #84	; 0x54
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c6e:	643b      	str	r3, [r7, #64]	; 0x40
 8007c70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1e6      	bne.n	8007c50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3308      	adds	r3, #8
 8007c88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	e853 3f00 	ldrex	r3, [r3]
 8007c90:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c92:	69fa      	ldr	r2, [r7, #28]
 8007c94:	4b1e      	ldr	r3, [pc, #120]	; (8007d10 <UART_EndRxTransfer+0xc8>)
 8007c96:	4013      	ands	r3, r2
 8007c98:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ca4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007caa:	e841 2300 	strex	r3, r2, [r1]
 8007cae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1e5      	bne.n	8007c82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d118      	bne.n	8007cf0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f023 0310 	bic.w	r3, r3, #16
 8007cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cdc:	61bb      	str	r3, [r7, #24]
 8007cde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce0:	6979      	ldr	r1, [r7, #20]
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	e841 2300 	strex	r3, r2, [r1]
 8007ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1e6      	bne.n	8007cbe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007d04:	bf00      	nop
 8007d06:	3754      	adds	r7, #84	; 0x54
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	effffffe 	.word	0xeffffffe

08007d14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f7fe fe30 	bl	8006998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d38:	bf00      	nop
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b088      	sub	sp, #32
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	e853 3f00 	ldrex	r3, [r3]
 8007d54:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d5c:	61fb      	str	r3, [r7, #28]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	461a      	mov	r2, r3
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	61bb      	str	r3, [r7, #24]
 8007d68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6a:	6979      	ldr	r1, [r7, #20]
 8007d6c:	69ba      	ldr	r2, [r7, #24]
 8007d6e:	e841 2300 	strex	r3, r2, [r1]
 8007d72:	613b      	str	r3, [r7, #16]
   return(result);
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1e6      	bne.n	8007d48 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2220      	movs	r2, #32
 8007d7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7fe fdfb 	bl	8006984 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d8e:	bf00      	nop
 8007d90:	3720      	adds	r7, #32
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
	...

08007d98 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b09c      	sub	sp, #112	; 0x70
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007da6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007db0:	2b22      	cmp	r3, #34	; 0x22
 8007db2:	f040 80be 	bne.w	8007f32 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007dc0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007dc4:	b2d9      	uxtb	r1, r3
 8007dc6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd0:	400a      	ands	r2, r1
 8007dd2:	b2d2      	uxtb	r2, r2
 8007dd4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dda:	1c5a      	adds	r2, r3, #1
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	3b01      	subs	r3, #1
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f040 80a1 	bne.w	8007f42 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e14:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e6      	bne.n	8007e00 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	3308      	adds	r3, #8
 8007e38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3c:	e853 3f00 	ldrex	r3, [r3]
 8007e40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e44:	f023 0301 	bic.w	r3, r3, #1
 8007e48:	667b      	str	r3, [r7, #100]	; 0x64
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3308      	adds	r3, #8
 8007e50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007e52:	647a      	str	r2, [r7, #68]	; 0x44
 8007e54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e5a:	e841 2300 	strex	r3, r2, [r1]
 8007e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1e5      	bne.n	8007e32 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a33      	ldr	r2, [pc, #204]	; (8007f4c <UART_RxISR_8BIT+0x1b4>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d01f      	beq.n	8007ec4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d018      	beq.n	8007ec4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9a:	e853 3f00 	ldrex	r3, [r3]
 8007e9e:	623b      	str	r3, [r7, #32]
   return(result);
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ea6:	663b      	str	r3, [r7, #96]	; 0x60
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	461a      	mov	r2, r3
 8007eae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007eb0:	633b      	str	r3, [r7, #48]	; 0x30
 8007eb2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eb8:	e841 2300 	strex	r3, r2, [r1]
 8007ebc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1e6      	bne.n	8007e92 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d12e      	bne.n	8007f2a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	e853 3f00 	ldrex	r3, [r3]
 8007ede:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f023 0310 	bic.w	r3, r3, #16
 8007ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	461a      	mov	r2, r3
 8007eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ef0:	61fb      	str	r3, [r7, #28]
 8007ef2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef4:	69b9      	ldr	r1, [r7, #24]
 8007ef6:	69fa      	ldr	r2, [r7, #28]
 8007ef8:	e841 2300 	strex	r3, r2, [r1]
 8007efc:	617b      	str	r3, [r7, #20]
   return(result);
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1e6      	bne.n	8007ed2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	f003 0310 	and.w	r3, r3, #16
 8007f0e:	2b10      	cmp	r3, #16
 8007f10:	d103      	bne.n	8007f1a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2210      	movs	r2, #16
 8007f18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f20:	4619      	mov	r1, r3
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7fe fd42 	bl	80069ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f28:	e00b      	b.n	8007f42 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7f9 f998 	bl	8001260 <HAL_UART_RxCpltCallback>
}
 8007f30:	e007      	b.n	8007f42 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	699a      	ldr	r2, [r3, #24]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f042 0208 	orr.w	r2, r2, #8
 8007f40:	619a      	str	r2, [r3, #24]
}
 8007f42:	bf00      	nop
 8007f44:	3770      	adds	r7, #112	; 0x70
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	58000c00 	.word	0x58000c00

08007f50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b09c      	sub	sp, #112	; 0x70
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f5e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f68:	2b22      	cmp	r3, #34	; 0x22
 8007f6a:	f040 80be 	bne.w	80080ea <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f7c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f7e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007f82:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007f86:	4013      	ands	r3, r2
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f8c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f92:	1c9a      	adds	r2, r3, #2
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f040 80a1 	bne.w	80080fa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fc0:	e853 3f00 	ldrex	r3, [r3]
 8007fc4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fcc:	667b      	str	r3, [r7, #100]	; 0x64
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fd6:	657b      	str	r3, [r7, #84]	; 0x54
 8007fd8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007fdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007fde:	e841 2300 	strex	r3, r2, [r1]
 8007fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1e6      	bne.n	8007fb8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	3308      	adds	r3, #8
 8007ff0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff4:	e853 3f00 	ldrex	r3, [r3]
 8007ff8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffc:	f023 0301 	bic.w	r3, r3, #1
 8008000:	663b      	str	r3, [r7, #96]	; 0x60
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3308      	adds	r3, #8
 8008008:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800800a:	643a      	str	r2, [r7, #64]	; 0x40
 800800c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008010:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008012:	e841 2300 	strex	r3, r2, [r1]
 8008016:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1e5      	bne.n	8007fea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2220      	movs	r2, #32
 8008022:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a33      	ldr	r2, [pc, #204]	; (8008104 <UART_RxISR_16BIT+0x1b4>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d01f      	beq.n	800807c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d018      	beq.n	800807c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	e853 3f00 	ldrex	r3, [r3]
 8008056:	61fb      	str	r3, [r7, #28]
   return(result);
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800805e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	461a      	mov	r2, r3
 8008066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008068:	62fb      	str	r3, [r7, #44]	; 0x2c
 800806a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800806e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008070:	e841 2300 	strex	r3, r2, [r1]
 8008074:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e6      	bne.n	800804a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008080:	2b01      	cmp	r3, #1
 8008082:	d12e      	bne.n	80080e2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	e853 3f00 	ldrex	r3, [r3]
 8008096:	60bb      	str	r3, [r7, #8]
   return(result);
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f023 0310 	bic.w	r3, r3, #16
 800809e:	65bb      	str	r3, [r7, #88]	; 0x58
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	461a      	mov	r2, r3
 80080a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080a8:	61bb      	str	r3, [r7, #24]
 80080aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ac:	6979      	ldr	r1, [r7, #20]
 80080ae:	69ba      	ldr	r2, [r7, #24]
 80080b0:	e841 2300 	strex	r3, r2, [r1]
 80080b4:	613b      	str	r3, [r7, #16]
   return(result);
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e6      	bne.n	800808a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	f003 0310 	and.w	r3, r3, #16
 80080c6:	2b10      	cmp	r3, #16
 80080c8:	d103      	bne.n	80080d2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2210      	movs	r2, #16
 80080d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080d8:	4619      	mov	r1, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7fe fc66 	bl	80069ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080e0:	e00b      	b.n	80080fa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7f9 f8bc 	bl	8001260 <HAL_UART_RxCpltCallback>
}
 80080e8:	e007      	b.n	80080fa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	699a      	ldr	r2, [r3, #24]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f042 0208 	orr.w	r2, r2, #8
 80080f8:	619a      	str	r2, [r3, #24]
}
 80080fa:	bf00      	nop
 80080fc:	3770      	adds	r7, #112	; 0x70
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	58000c00 	.word	0x58000c00

08008108 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b0ac      	sub	sp, #176	; 0xb0
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008116:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	69db      	ldr	r3, [r3, #28]
 8008120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800813e:	2b22      	cmp	r3, #34	; 0x22
 8008140:	f040 8180 	bne.w	8008444 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800814a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800814e:	e123      	b.n	8008398 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008156:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800815a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800815e:	b2d9      	uxtb	r1, r3
 8008160:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008164:	b2da      	uxtb	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800816a:	400a      	ands	r2, r1
 800816c:	b2d2      	uxtb	r2, r2
 800816e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008174:	1c5a      	adds	r2, r3, #1
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008180:	b29b      	uxth	r3, r3
 8008182:	3b01      	subs	r3, #1
 8008184:	b29a      	uxth	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	69db      	ldr	r3, [r3, #28]
 8008192:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800819a:	f003 0307 	and.w	r3, r3, #7
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d053      	beq.n	800824a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081a6:	f003 0301 	and.w	r3, r3, #1
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d011      	beq.n	80081d2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80081ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80081b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00b      	beq.n	80081d2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2201      	movs	r2, #1
 80081c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c8:	f043 0201 	orr.w	r2, r3, #1
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d011      	beq.n	8008202 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80081de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00b      	beq.n	8008202 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2202      	movs	r2, #2
 80081f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081f8:	f043 0204 	orr.w	r2, r3, #4
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b00      	cmp	r3, #0
 800820c:	d011      	beq.n	8008232 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800820e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00b      	beq.n	8008232 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2204      	movs	r2, #4
 8008220:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008228:	f043 0202 	orr.w	r2, r3, #2
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008238:	2b00      	cmp	r3, #0
 800823a:	d006      	beq.n	800824a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7fe fbab 	bl	8006998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008250:	b29b      	uxth	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	f040 80a0 	bne.w	8008398 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008260:	e853 3f00 	ldrex	r3, [r3]
 8008264:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800826c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	461a      	mov	r2, r3
 8008276:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800827a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800827c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008280:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008282:	e841 2300 	strex	r3, r2, [r1]
 8008286:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008288:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1e4      	bne.n	8008258 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3308      	adds	r3, #8
 8008294:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008298:	e853 3f00 	ldrex	r3, [r3]
 800829c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800829e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082a0:	4b6e      	ldr	r3, [pc, #440]	; (800845c <UART_RxISR_8BIT_FIFOEN+0x354>)
 80082a2:	4013      	ands	r3, r2
 80082a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	3308      	adds	r3, #8
 80082ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80082b2:	66ba      	str	r2, [r7, #104]	; 0x68
 80082b4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80082b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082ba:	e841 2300 	strex	r3, r2, [r1]
 80082be:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80082c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e3      	bne.n	800828e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2220      	movs	r2, #32
 80082ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a60      	ldr	r2, [pc, #384]	; (8008460 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d021      	beq.n	8008328 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d01a      	beq.n	8008328 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082fa:	e853 3f00 	ldrex	r3, [r3]
 80082fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008302:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008306:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	461a      	mov	r2, r3
 8008310:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008314:	657b      	str	r3, [r7, #84]	; 0x54
 8008316:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008318:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800831a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800831c:	e841 2300 	strex	r3, r2, [r1]
 8008320:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1e4      	bne.n	80082f2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800832c:	2b01      	cmp	r3, #1
 800832e:	d130      	bne.n	8008392 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800833e:	e853 3f00 	ldrex	r3, [r3]
 8008342:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008346:	f023 0310 	bic.w	r3, r3, #16
 800834a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008358:	643b      	str	r3, [r7, #64]	; 0x40
 800835a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800835e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008360:	e841 2300 	strex	r3, r2, [r1]
 8008364:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1e4      	bne.n	8008336 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	69db      	ldr	r3, [r3, #28]
 8008372:	f003 0310 	and.w	r3, r3, #16
 8008376:	2b10      	cmp	r3, #16
 8008378:	d103      	bne.n	8008382 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2210      	movs	r2, #16
 8008380:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7fe fb0e 	bl	80069ac <HAL_UARTEx_RxEventCallback>
 8008390:	e002      	b.n	8008398 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7f8 ff64 	bl	8001260 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008398:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800839c:	2b00      	cmp	r3, #0
 800839e:	d006      	beq.n	80083ae <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80083a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083a4:	f003 0320 	and.w	r3, r3, #32
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f47f aed1 	bne.w	8008150 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80083b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d049      	beq.n	8008454 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80083c6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d242      	bcs.n	8008454 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3308      	adds	r3, #8
 80083d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d6:	6a3b      	ldr	r3, [r7, #32]
 80083d8:	e853 3f00 	ldrex	r3, [r3]
 80083dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	3308      	adds	r3, #8
 80083ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80083f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083fa:	e841 2300 	strex	r3, r2, [r1]
 80083fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1e3      	bne.n	80083ce <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a16      	ldr	r2, [pc, #88]	; (8008464 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800840a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	e853 3f00 	ldrex	r3, [r3]
 8008418:	60bb      	str	r3, [r7, #8]
   return(result);
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	f043 0320 	orr.w	r3, r3, #32
 8008420:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	461a      	mov	r2, r3
 800842a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800842e:	61bb      	str	r3, [r7, #24]
 8008430:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008432:	6979      	ldr	r1, [r7, #20]
 8008434:	69ba      	ldr	r2, [r7, #24]
 8008436:	e841 2300 	strex	r3, r2, [r1]
 800843a:	613b      	str	r3, [r7, #16]
   return(result);
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1e4      	bne.n	800840c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008442:	e007      	b.n	8008454 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	699a      	ldr	r2, [r3, #24]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f042 0208 	orr.w	r2, r2, #8
 8008452:	619a      	str	r2, [r3, #24]
}
 8008454:	bf00      	nop
 8008456:	37b0      	adds	r7, #176	; 0xb0
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	effffffe 	.word	0xeffffffe
 8008460:	58000c00 	.word	0x58000c00
 8008464:	08007d99 	.word	0x08007d99

08008468 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b0ae      	sub	sp, #184	; 0xb8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008476:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69db      	ldr	r3, [r3, #28]
 8008480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800849e:	2b22      	cmp	r3, #34	; 0x22
 80084a0:	f040 8184 	bne.w	80087ac <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80084aa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80084ae:	e127      	b.n	8008700 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80084c2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80084c6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80084ca:	4013      	ands	r3, r2
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80084d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084d8:	1c9a      	adds	r2, r3, #2
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	3b01      	subs	r3, #1
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80084fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084fe:	f003 0307 	and.w	r3, r3, #7
 8008502:	2b00      	cmp	r3, #0
 8008504:	d053      	beq.n	80085ae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008506:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	2b00      	cmp	r3, #0
 8008510:	d011      	beq.n	8008536 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00b      	beq.n	8008536 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2201      	movs	r2, #1
 8008524:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800852c:	f043 0201 	orr.w	r2, r3, #1
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008536:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	2b00      	cmp	r3, #0
 8008540:	d011      	beq.n	8008566 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008542:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00b      	beq.n	8008566 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2202      	movs	r2, #2
 8008554:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800855c:	f043 0204 	orr.w	r2, r3, #4
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008566:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800856a:	f003 0304 	and.w	r3, r3, #4
 800856e:	2b00      	cmp	r3, #0
 8008570:	d011      	beq.n	8008596 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008572:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00b      	beq.n	8008596 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2204      	movs	r2, #4
 8008584:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800858c:	f043 0202 	orr.w	r2, r3, #2
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800859c:	2b00      	cmp	r3, #0
 800859e:	d006      	beq.n	80085ae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f7fe f9f9 	bl	8006998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f040 80a2 	bne.w	8008700 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085c4:	e853 3f00 	ldrex	r3, [r3]
 80085c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80085ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	461a      	mov	r2, r3
 80085da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085e2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80085e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80085ea:	e841 2300 	strex	r3, r2, [r1]
 80085ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80085f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1e2      	bne.n	80085bc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3308      	adds	r3, #8
 80085fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008600:	e853 3f00 	ldrex	r3, [r3]
 8008604:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008606:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008608:	4b6e      	ldr	r3, [pc, #440]	; (80087c4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800860a:	4013      	ands	r3, r2
 800860c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3308      	adds	r3, #8
 8008616:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800861a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800861c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008620:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008622:	e841 2300 	strex	r3, r2, [r1]
 8008626:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1e3      	bne.n	80085f6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2220      	movs	r2, #32
 8008632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a60      	ldr	r2, [pc, #384]	; (80087c8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d021      	beq.n	8008690 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d01a      	beq.n	8008690 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008662:	e853 3f00 	ldrex	r3, [r3]
 8008666:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800866a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800866e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	461a      	mov	r2, r3
 8008678:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800867c:	65bb      	str	r3, [r7, #88]	; 0x58
 800867e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008682:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008684:	e841 2300 	strex	r3, r2, [r1]
 8008688:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800868a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e4      	bne.n	800865a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008694:	2b01      	cmp	r3, #1
 8008696:	d130      	bne.n	80086fa <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a6:	e853 3f00 	ldrex	r3, [r3]
 80086aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ae:	f023 0310 	bic.w	r3, r3, #16
 80086b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086c0:	647b      	str	r3, [r7, #68]	; 0x44
 80086c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086c8:	e841 2300 	strex	r3, r2, [r1]
 80086cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1e4      	bne.n	800869e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	69db      	ldr	r3, [r3, #28]
 80086da:	f003 0310 	and.w	r3, r3, #16
 80086de:	2b10      	cmp	r3, #16
 80086e0:	d103      	bne.n	80086ea <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2210      	movs	r2, #16
 80086e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086f0:	4619      	mov	r1, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7fe f95a 	bl	80069ac <HAL_UARTEx_RxEventCallback>
 80086f8:	e002      	b.n	8008700 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7f8 fdb0 	bl	8001260 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008700:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008704:	2b00      	cmp	r3, #0
 8008706:	d006      	beq.n	8008716 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8008708:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800870c:	f003 0320 	and.w	r3, r3, #32
 8008710:	2b00      	cmp	r3, #0
 8008712:	f47f aecd 	bne.w	80084b0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800871c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008720:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008724:	2b00      	cmp	r3, #0
 8008726:	d049      	beq.n	80087bc <UART_RxISR_16BIT_FIFOEN+0x354>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800872e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008732:	429a      	cmp	r2, r3
 8008734:	d242      	bcs.n	80087bc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	3308      	adds	r3, #8
 800873c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008740:	e853 3f00 	ldrex	r3, [r3]
 8008744:	623b      	str	r3, [r7, #32]
   return(result);
 8008746:	6a3b      	ldr	r3, [r7, #32]
 8008748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800874c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	3308      	adds	r3, #8
 8008756:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800875a:	633a      	str	r2, [r7, #48]	; 0x30
 800875c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1e3      	bne.n	8008736 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a16      	ldr	r2, [pc, #88]	; (80087cc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008772:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	60fb      	str	r3, [r7, #12]
   return(result);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f043 0320 	orr.w	r3, r3, #32
 8008788:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008796:	61fb      	str	r3, [r7, #28]
 8008798:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879a:	69b9      	ldr	r1, [r7, #24]
 800879c:	69fa      	ldr	r2, [r7, #28]
 800879e:	e841 2300 	strex	r3, r2, [r1]
 80087a2:	617b      	str	r3, [r7, #20]
   return(result);
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e4      	bne.n	8008774 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087aa:	e007      	b.n	80087bc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	699a      	ldr	r2, [r3, #24]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f042 0208 	orr.w	r2, r2, #8
 80087ba:	619a      	str	r2, [r3, #24]
}
 80087bc:	bf00      	nop
 80087be:	37b8      	adds	r7, #184	; 0xb8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	effffffe 	.word	0xeffffffe
 80087c8:	58000c00 	.word	0x58000c00
 80087cc:	08007f51 	.word	0x08007f51

080087d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800881a:	2b01      	cmp	r3, #1
 800881c:	d101      	bne.n	8008822 <HAL_UARTEx_DisableFifoMode+0x16>
 800881e:	2302      	movs	r3, #2
 8008820:	e027      	b.n	8008872 <HAL_UARTEx_DisableFifoMode+0x66>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2201      	movs	r2, #1
 8008826:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2224      	movs	r2, #36	; 0x24
 800882e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f022 0201 	bic.w	r2, r2, #1
 8008848:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008850:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2220      	movs	r2, #32
 8008864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800888e:	2b01      	cmp	r3, #1
 8008890:	d101      	bne.n	8008896 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008892:	2302      	movs	r3, #2
 8008894:	e02d      	b.n	80088f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2224      	movs	r2, #36	; 0x24
 80088a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f022 0201 	bic.w	r2, r2, #1
 80088bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f850 	bl	8008978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2220      	movs	r2, #32
 80088e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b084      	sub	sp, #16
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800890a:	2b01      	cmp	r3, #1
 800890c:	d101      	bne.n	8008912 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800890e:	2302      	movs	r3, #2
 8008910:	e02d      	b.n	800896e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2224      	movs	r2, #36	; 0x24
 800891e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f022 0201 	bic.w	r2, r2, #1
 8008938:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f812 	bl	8008978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2220      	movs	r2, #32
 8008960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
	...

08008978 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008984:	2b00      	cmp	r3, #0
 8008986:	d108      	bne.n	800899a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008998:	e031      	b.n	80089fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800899a:	2310      	movs	r3, #16
 800899c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800899e:	2310      	movs	r3, #16
 80089a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	0e5b      	lsrs	r3, r3, #25
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	f003 0307 	and.w	r3, r3, #7
 80089b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	0f5b      	lsrs	r3, r3, #29
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	f003 0307 	and.w	r3, r3, #7
 80089c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089c2:	7bbb      	ldrb	r3, [r7, #14]
 80089c4:	7b3a      	ldrb	r2, [r7, #12]
 80089c6:	4911      	ldr	r1, [pc, #68]	; (8008a0c <UARTEx_SetNbDataToProcess+0x94>)
 80089c8:	5c8a      	ldrb	r2, [r1, r2]
 80089ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80089ce:	7b3a      	ldrb	r2, [r7, #12]
 80089d0:	490f      	ldr	r1, [pc, #60]	; (8008a10 <UARTEx_SetNbDataToProcess+0x98>)
 80089d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80089d8:	b29a      	uxth	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
 80089e2:	7b7a      	ldrb	r2, [r7, #13]
 80089e4:	4909      	ldr	r1, [pc, #36]	; (8008a0c <UARTEx_SetNbDataToProcess+0x94>)
 80089e6:	5c8a      	ldrb	r2, [r1, r2]
 80089e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80089ec:	7b7a      	ldrb	r2, [r7, #13]
 80089ee:	4908      	ldr	r1, [pc, #32]	; (8008a10 <UARTEx_SetNbDataToProcess+0x98>)
 80089f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80089fe:	bf00      	nop
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	080093f4 	.word	0x080093f4
 8008a10:	080093fc 	.word	0x080093fc

08008a14 <__errno>:
 8008a14:	4b01      	ldr	r3, [pc, #4]	; (8008a1c <__errno+0x8>)
 8008a16:	6818      	ldr	r0, [r3, #0]
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	24000010 	.word	0x24000010

08008a20 <__libc_init_array>:
 8008a20:	b570      	push	{r4, r5, r6, lr}
 8008a22:	4d0d      	ldr	r5, [pc, #52]	; (8008a58 <__libc_init_array+0x38>)
 8008a24:	4c0d      	ldr	r4, [pc, #52]	; (8008a5c <__libc_init_array+0x3c>)
 8008a26:	1b64      	subs	r4, r4, r5
 8008a28:	10a4      	asrs	r4, r4, #2
 8008a2a:	2600      	movs	r6, #0
 8008a2c:	42a6      	cmp	r6, r4
 8008a2e:	d109      	bne.n	8008a44 <__libc_init_array+0x24>
 8008a30:	4d0b      	ldr	r5, [pc, #44]	; (8008a60 <__libc_init_array+0x40>)
 8008a32:	4c0c      	ldr	r4, [pc, #48]	; (8008a64 <__libc_init_array+0x44>)
 8008a34:	f000 fca2 	bl	800937c <_init>
 8008a38:	1b64      	subs	r4, r4, r5
 8008a3a:	10a4      	asrs	r4, r4, #2
 8008a3c:	2600      	movs	r6, #0
 8008a3e:	42a6      	cmp	r6, r4
 8008a40:	d105      	bne.n	8008a4e <__libc_init_array+0x2e>
 8008a42:	bd70      	pop	{r4, r5, r6, pc}
 8008a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a48:	4798      	blx	r3
 8008a4a:	3601      	adds	r6, #1
 8008a4c:	e7ee      	b.n	8008a2c <__libc_init_array+0xc>
 8008a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a52:	4798      	blx	r3
 8008a54:	3601      	adds	r6, #1
 8008a56:	e7f2      	b.n	8008a3e <__libc_init_array+0x1e>
 8008a58:	08009440 	.word	0x08009440
 8008a5c:	08009440 	.word	0x08009440
 8008a60:	08009440 	.word	0x08009440
 8008a64:	08009444 	.word	0x08009444

08008a68 <memset>:
 8008a68:	4402      	add	r2, r0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d100      	bne.n	8008a72 <memset+0xa>
 8008a70:	4770      	bx	lr
 8008a72:	f803 1b01 	strb.w	r1, [r3], #1
 8008a76:	e7f9      	b.n	8008a6c <memset+0x4>

08008a78 <sniprintf>:
 8008a78:	b40c      	push	{r2, r3}
 8008a7a:	b530      	push	{r4, r5, lr}
 8008a7c:	4b17      	ldr	r3, [pc, #92]	; (8008adc <sniprintf+0x64>)
 8008a7e:	1e0c      	subs	r4, r1, #0
 8008a80:	681d      	ldr	r5, [r3, #0]
 8008a82:	b09d      	sub	sp, #116	; 0x74
 8008a84:	da08      	bge.n	8008a98 <sniprintf+0x20>
 8008a86:	238b      	movs	r3, #139	; 0x8b
 8008a88:	602b      	str	r3, [r5, #0]
 8008a8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a8e:	b01d      	add	sp, #116	; 0x74
 8008a90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a94:	b002      	add	sp, #8
 8008a96:	4770      	bx	lr
 8008a98:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008a9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008aa0:	bf14      	ite	ne
 8008aa2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008aa6:	4623      	moveq	r3, r4
 8008aa8:	9304      	str	r3, [sp, #16]
 8008aaa:	9307      	str	r3, [sp, #28]
 8008aac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ab0:	9002      	str	r0, [sp, #8]
 8008ab2:	9006      	str	r0, [sp, #24]
 8008ab4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ab8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008aba:	ab21      	add	r3, sp, #132	; 0x84
 8008abc:	a902      	add	r1, sp, #8
 8008abe:	4628      	mov	r0, r5
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	f000 f869 	bl	8008b98 <_svfiprintf_r>
 8008ac6:	1c43      	adds	r3, r0, #1
 8008ac8:	bfbc      	itt	lt
 8008aca:	238b      	movlt	r3, #139	; 0x8b
 8008acc:	602b      	strlt	r3, [r5, #0]
 8008ace:	2c00      	cmp	r4, #0
 8008ad0:	d0dd      	beq.n	8008a8e <sniprintf+0x16>
 8008ad2:	9b02      	ldr	r3, [sp, #8]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	701a      	strb	r2, [r3, #0]
 8008ad8:	e7d9      	b.n	8008a8e <sniprintf+0x16>
 8008ada:	bf00      	nop
 8008adc:	24000010 	.word	0x24000010

08008ae0 <__ssputs_r>:
 8008ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae4:	688e      	ldr	r6, [r1, #8]
 8008ae6:	429e      	cmp	r6, r3
 8008ae8:	4682      	mov	sl, r0
 8008aea:	460c      	mov	r4, r1
 8008aec:	4690      	mov	r8, r2
 8008aee:	461f      	mov	r7, r3
 8008af0:	d838      	bhi.n	8008b64 <__ssputs_r+0x84>
 8008af2:	898a      	ldrh	r2, [r1, #12]
 8008af4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008af8:	d032      	beq.n	8008b60 <__ssputs_r+0x80>
 8008afa:	6825      	ldr	r5, [r4, #0]
 8008afc:	6909      	ldr	r1, [r1, #16]
 8008afe:	eba5 0901 	sub.w	r9, r5, r1
 8008b02:	6965      	ldr	r5, [r4, #20]
 8008b04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	444b      	add	r3, r9
 8008b10:	106d      	asrs	r5, r5, #1
 8008b12:	429d      	cmp	r5, r3
 8008b14:	bf38      	it	cc
 8008b16:	461d      	movcc	r5, r3
 8008b18:	0553      	lsls	r3, r2, #21
 8008b1a:	d531      	bpl.n	8008b80 <__ssputs_r+0xa0>
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	f000 fb63 	bl	80091e8 <_malloc_r>
 8008b22:	4606      	mov	r6, r0
 8008b24:	b950      	cbnz	r0, 8008b3c <__ssputs_r+0x5c>
 8008b26:	230c      	movs	r3, #12
 8008b28:	f8ca 3000 	str.w	r3, [sl]
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b32:	81a3      	strh	r3, [r4, #12]
 8008b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b3c:	6921      	ldr	r1, [r4, #16]
 8008b3e:	464a      	mov	r2, r9
 8008b40:	f000 fabe 	bl	80090c0 <memcpy>
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b4e:	81a3      	strh	r3, [r4, #12]
 8008b50:	6126      	str	r6, [r4, #16]
 8008b52:	6165      	str	r5, [r4, #20]
 8008b54:	444e      	add	r6, r9
 8008b56:	eba5 0509 	sub.w	r5, r5, r9
 8008b5a:	6026      	str	r6, [r4, #0]
 8008b5c:	60a5      	str	r5, [r4, #8]
 8008b5e:	463e      	mov	r6, r7
 8008b60:	42be      	cmp	r6, r7
 8008b62:	d900      	bls.n	8008b66 <__ssputs_r+0x86>
 8008b64:	463e      	mov	r6, r7
 8008b66:	6820      	ldr	r0, [r4, #0]
 8008b68:	4632      	mov	r2, r6
 8008b6a:	4641      	mov	r1, r8
 8008b6c:	f000 fab6 	bl	80090dc <memmove>
 8008b70:	68a3      	ldr	r3, [r4, #8]
 8008b72:	1b9b      	subs	r3, r3, r6
 8008b74:	60a3      	str	r3, [r4, #8]
 8008b76:	6823      	ldr	r3, [r4, #0]
 8008b78:	4433      	add	r3, r6
 8008b7a:	6023      	str	r3, [r4, #0]
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	e7db      	b.n	8008b38 <__ssputs_r+0x58>
 8008b80:	462a      	mov	r2, r5
 8008b82:	f000 fba5 	bl	80092d0 <_realloc_r>
 8008b86:	4606      	mov	r6, r0
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d1e1      	bne.n	8008b50 <__ssputs_r+0x70>
 8008b8c:	6921      	ldr	r1, [r4, #16]
 8008b8e:	4650      	mov	r0, sl
 8008b90:	f000 fabe 	bl	8009110 <_free_r>
 8008b94:	e7c7      	b.n	8008b26 <__ssputs_r+0x46>
	...

08008b98 <_svfiprintf_r>:
 8008b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9c:	4698      	mov	r8, r3
 8008b9e:	898b      	ldrh	r3, [r1, #12]
 8008ba0:	061b      	lsls	r3, r3, #24
 8008ba2:	b09d      	sub	sp, #116	; 0x74
 8008ba4:	4607      	mov	r7, r0
 8008ba6:	460d      	mov	r5, r1
 8008ba8:	4614      	mov	r4, r2
 8008baa:	d50e      	bpl.n	8008bca <_svfiprintf_r+0x32>
 8008bac:	690b      	ldr	r3, [r1, #16]
 8008bae:	b963      	cbnz	r3, 8008bca <_svfiprintf_r+0x32>
 8008bb0:	2140      	movs	r1, #64	; 0x40
 8008bb2:	f000 fb19 	bl	80091e8 <_malloc_r>
 8008bb6:	6028      	str	r0, [r5, #0]
 8008bb8:	6128      	str	r0, [r5, #16]
 8008bba:	b920      	cbnz	r0, 8008bc6 <_svfiprintf_r+0x2e>
 8008bbc:	230c      	movs	r3, #12
 8008bbe:	603b      	str	r3, [r7, #0]
 8008bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bc4:	e0d1      	b.n	8008d6a <_svfiprintf_r+0x1d2>
 8008bc6:	2340      	movs	r3, #64	; 0x40
 8008bc8:	616b      	str	r3, [r5, #20]
 8008bca:	2300      	movs	r3, #0
 8008bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8008bce:	2320      	movs	r3, #32
 8008bd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bd8:	2330      	movs	r3, #48	; 0x30
 8008bda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d84 <_svfiprintf_r+0x1ec>
 8008bde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008be2:	f04f 0901 	mov.w	r9, #1
 8008be6:	4623      	mov	r3, r4
 8008be8:	469a      	mov	sl, r3
 8008bea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bee:	b10a      	cbz	r2, 8008bf4 <_svfiprintf_r+0x5c>
 8008bf0:	2a25      	cmp	r2, #37	; 0x25
 8008bf2:	d1f9      	bne.n	8008be8 <_svfiprintf_r+0x50>
 8008bf4:	ebba 0b04 	subs.w	fp, sl, r4
 8008bf8:	d00b      	beq.n	8008c12 <_svfiprintf_r+0x7a>
 8008bfa:	465b      	mov	r3, fp
 8008bfc:	4622      	mov	r2, r4
 8008bfe:	4629      	mov	r1, r5
 8008c00:	4638      	mov	r0, r7
 8008c02:	f7ff ff6d 	bl	8008ae0 <__ssputs_r>
 8008c06:	3001      	adds	r0, #1
 8008c08:	f000 80aa 	beq.w	8008d60 <_svfiprintf_r+0x1c8>
 8008c0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c0e:	445a      	add	r2, fp
 8008c10:	9209      	str	r2, [sp, #36]	; 0x24
 8008c12:	f89a 3000 	ldrb.w	r3, [sl]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 80a2 	beq.w	8008d60 <_svfiprintf_r+0x1c8>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c26:	f10a 0a01 	add.w	sl, sl, #1
 8008c2a:	9304      	str	r3, [sp, #16]
 8008c2c:	9307      	str	r3, [sp, #28]
 8008c2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c32:	931a      	str	r3, [sp, #104]	; 0x68
 8008c34:	4654      	mov	r4, sl
 8008c36:	2205      	movs	r2, #5
 8008c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c3c:	4851      	ldr	r0, [pc, #324]	; (8008d84 <_svfiprintf_r+0x1ec>)
 8008c3e:	f7f7 fb57 	bl	80002f0 <memchr>
 8008c42:	9a04      	ldr	r2, [sp, #16]
 8008c44:	b9d8      	cbnz	r0, 8008c7e <_svfiprintf_r+0xe6>
 8008c46:	06d0      	lsls	r0, r2, #27
 8008c48:	bf44      	itt	mi
 8008c4a:	2320      	movmi	r3, #32
 8008c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c50:	0711      	lsls	r1, r2, #28
 8008c52:	bf44      	itt	mi
 8008c54:	232b      	movmi	r3, #43	; 0x2b
 8008c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8008c60:	d015      	beq.n	8008c8e <_svfiprintf_r+0xf6>
 8008c62:	9a07      	ldr	r2, [sp, #28]
 8008c64:	4654      	mov	r4, sl
 8008c66:	2000      	movs	r0, #0
 8008c68:	f04f 0c0a 	mov.w	ip, #10
 8008c6c:	4621      	mov	r1, r4
 8008c6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c72:	3b30      	subs	r3, #48	; 0x30
 8008c74:	2b09      	cmp	r3, #9
 8008c76:	d94e      	bls.n	8008d16 <_svfiprintf_r+0x17e>
 8008c78:	b1b0      	cbz	r0, 8008ca8 <_svfiprintf_r+0x110>
 8008c7a:	9207      	str	r2, [sp, #28]
 8008c7c:	e014      	b.n	8008ca8 <_svfiprintf_r+0x110>
 8008c7e:	eba0 0308 	sub.w	r3, r0, r8
 8008c82:	fa09 f303 	lsl.w	r3, r9, r3
 8008c86:	4313      	orrs	r3, r2
 8008c88:	9304      	str	r3, [sp, #16]
 8008c8a:	46a2      	mov	sl, r4
 8008c8c:	e7d2      	b.n	8008c34 <_svfiprintf_r+0x9c>
 8008c8e:	9b03      	ldr	r3, [sp, #12]
 8008c90:	1d19      	adds	r1, r3, #4
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	9103      	str	r1, [sp, #12]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	bfbb      	ittet	lt
 8008c9a:	425b      	neglt	r3, r3
 8008c9c:	f042 0202 	orrlt.w	r2, r2, #2
 8008ca0:	9307      	strge	r3, [sp, #28]
 8008ca2:	9307      	strlt	r3, [sp, #28]
 8008ca4:	bfb8      	it	lt
 8008ca6:	9204      	strlt	r2, [sp, #16]
 8008ca8:	7823      	ldrb	r3, [r4, #0]
 8008caa:	2b2e      	cmp	r3, #46	; 0x2e
 8008cac:	d10c      	bne.n	8008cc8 <_svfiprintf_r+0x130>
 8008cae:	7863      	ldrb	r3, [r4, #1]
 8008cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8008cb2:	d135      	bne.n	8008d20 <_svfiprintf_r+0x188>
 8008cb4:	9b03      	ldr	r3, [sp, #12]
 8008cb6:	1d1a      	adds	r2, r3, #4
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	9203      	str	r2, [sp, #12]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	bfb8      	it	lt
 8008cc0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008cc4:	3402      	adds	r4, #2
 8008cc6:	9305      	str	r3, [sp, #20]
 8008cc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d94 <_svfiprintf_r+0x1fc>
 8008ccc:	7821      	ldrb	r1, [r4, #0]
 8008cce:	2203      	movs	r2, #3
 8008cd0:	4650      	mov	r0, sl
 8008cd2:	f7f7 fb0d 	bl	80002f0 <memchr>
 8008cd6:	b140      	cbz	r0, 8008cea <_svfiprintf_r+0x152>
 8008cd8:	2340      	movs	r3, #64	; 0x40
 8008cda:	eba0 000a 	sub.w	r0, r0, sl
 8008cde:	fa03 f000 	lsl.w	r0, r3, r0
 8008ce2:	9b04      	ldr	r3, [sp, #16]
 8008ce4:	4303      	orrs	r3, r0
 8008ce6:	3401      	adds	r4, #1
 8008ce8:	9304      	str	r3, [sp, #16]
 8008cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cee:	4826      	ldr	r0, [pc, #152]	; (8008d88 <_svfiprintf_r+0x1f0>)
 8008cf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cf4:	2206      	movs	r2, #6
 8008cf6:	f7f7 fafb 	bl	80002f0 <memchr>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d038      	beq.n	8008d70 <_svfiprintf_r+0x1d8>
 8008cfe:	4b23      	ldr	r3, [pc, #140]	; (8008d8c <_svfiprintf_r+0x1f4>)
 8008d00:	bb1b      	cbnz	r3, 8008d4a <_svfiprintf_r+0x1b2>
 8008d02:	9b03      	ldr	r3, [sp, #12]
 8008d04:	3307      	adds	r3, #7
 8008d06:	f023 0307 	bic.w	r3, r3, #7
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	9303      	str	r3, [sp, #12]
 8008d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d10:	4433      	add	r3, r6
 8008d12:	9309      	str	r3, [sp, #36]	; 0x24
 8008d14:	e767      	b.n	8008be6 <_svfiprintf_r+0x4e>
 8008d16:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	2001      	movs	r0, #1
 8008d1e:	e7a5      	b.n	8008c6c <_svfiprintf_r+0xd4>
 8008d20:	2300      	movs	r3, #0
 8008d22:	3401      	adds	r4, #1
 8008d24:	9305      	str	r3, [sp, #20]
 8008d26:	4619      	mov	r1, r3
 8008d28:	f04f 0c0a 	mov.w	ip, #10
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d32:	3a30      	subs	r2, #48	; 0x30
 8008d34:	2a09      	cmp	r2, #9
 8008d36:	d903      	bls.n	8008d40 <_svfiprintf_r+0x1a8>
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d0c5      	beq.n	8008cc8 <_svfiprintf_r+0x130>
 8008d3c:	9105      	str	r1, [sp, #20]
 8008d3e:	e7c3      	b.n	8008cc8 <_svfiprintf_r+0x130>
 8008d40:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d44:	4604      	mov	r4, r0
 8008d46:	2301      	movs	r3, #1
 8008d48:	e7f0      	b.n	8008d2c <_svfiprintf_r+0x194>
 8008d4a:	ab03      	add	r3, sp, #12
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	462a      	mov	r2, r5
 8008d50:	4b0f      	ldr	r3, [pc, #60]	; (8008d90 <_svfiprintf_r+0x1f8>)
 8008d52:	a904      	add	r1, sp, #16
 8008d54:	4638      	mov	r0, r7
 8008d56:	f3af 8000 	nop.w
 8008d5a:	1c42      	adds	r2, r0, #1
 8008d5c:	4606      	mov	r6, r0
 8008d5e:	d1d6      	bne.n	8008d0e <_svfiprintf_r+0x176>
 8008d60:	89ab      	ldrh	r3, [r5, #12]
 8008d62:	065b      	lsls	r3, r3, #25
 8008d64:	f53f af2c 	bmi.w	8008bc0 <_svfiprintf_r+0x28>
 8008d68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d6a:	b01d      	add	sp, #116	; 0x74
 8008d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d70:	ab03      	add	r3, sp, #12
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	462a      	mov	r2, r5
 8008d76:	4b06      	ldr	r3, [pc, #24]	; (8008d90 <_svfiprintf_r+0x1f8>)
 8008d78:	a904      	add	r1, sp, #16
 8008d7a:	4638      	mov	r0, r7
 8008d7c:	f000 f87a 	bl	8008e74 <_printf_i>
 8008d80:	e7eb      	b.n	8008d5a <_svfiprintf_r+0x1c2>
 8008d82:	bf00      	nop
 8008d84:	08009404 	.word	0x08009404
 8008d88:	0800940e 	.word	0x0800940e
 8008d8c:	00000000 	.word	0x00000000
 8008d90:	08008ae1 	.word	0x08008ae1
 8008d94:	0800940a 	.word	0x0800940a

08008d98 <_printf_common>:
 8008d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d9c:	4616      	mov	r6, r2
 8008d9e:	4699      	mov	r9, r3
 8008da0:	688a      	ldr	r2, [r1, #8]
 8008da2:	690b      	ldr	r3, [r1, #16]
 8008da4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008da8:	4293      	cmp	r3, r2
 8008daa:	bfb8      	it	lt
 8008dac:	4613      	movlt	r3, r2
 8008dae:	6033      	str	r3, [r6, #0]
 8008db0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008db4:	4607      	mov	r7, r0
 8008db6:	460c      	mov	r4, r1
 8008db8:	b10a      	cbz	r2, 8008dbe <_printf_common+0x26>
 8008dba:	3301      	adds	r3, #1
 8008dbc:	6033      	str	r3, [r6, #0]
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	0699      	lsls	r1, r3, #26
 8008dc2:	bf42      	ittt	mi
 8008dc4:	6833      	ldrmi	r3, [r6, #0]
 8008dc6:	3302      	addmi	r3, #2
 8008dc8:	6033      	strmi	r3, [r6, #0]
 8008dca:	6825      	ldr	r5, [r4, #0]
 8008dcc:	f015 0506 	ands.w	r5, r5, #6
 8008dd0:	d106      	bne.n	8008de0 <_printf_common+0x48>
 8008dd2:	f104 0a19 	add.w	sl, r4, #25
 8008dd6:	68e3      	ldr	r3, [r4, #12]
 8008dd8:	6832      	ldr	r2, [r6, #0]
 8008dda:	1a9b      	subs	r3, r3, r2
 8008ddc:	42ab      	cmp	r3, r5
 8008dde:	dc26      	bgt.n	8008e2e <_printf_common+0x96>
 8008de0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008de4:	1e13      	subs	r3, r2, #0
 8008de6:	6822      	ldr	r2, [r4, #0]
 8008de8:	bf18      	it	ne
 8008dea:	2301      	movne	r3, #1
 8008dec:	0692      	lsls	r2, r2, #26
 8008dee:	d42b      	bmi.n	8008e48 <_printf_common+0xb0>
 8008df0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008df4:	4649      	mov	r1, r9
 8008df6:	4638      	mov	r0, r7
 8008df8:	47c0      	blx	r8
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	d01e      	beq.n	8008e3c <_printf_common+0xa4>
 8008dfe:	6823      	ldr	r3, [r4, #0]
 8008e00:	68e5      	ldr	r5, [r4, #12]
 8008e02:	6832      	ldr	r2, [r6, #0]
 8008e04:	f003 0306 	and.w	r3, r3, #6
 8008e08:	2b04      	cmp	r3, #4
 8008e0a:	bf08      	it	eq
 8008e0c:	1aad      	subeq	r5, r5, r2
 8008e0e:	68a3      	ldr	r3, [r4, #8]
 8008e10:	6922      	ldr	r2, [r4, #16]
 8008e12:	bf0c      	ite	eq
 8008e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e18:	2500      	movne	r5, #0
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	bfc4      	itt	gt
 8008e1e:	1a9b      	subgt	r3, r3, r2
 8008e20:	18ed      	addgt	r5, r5, r3
 8008e22:	2600      	movs	r6, #0
 8008e24:	341a      	adds	r4, #26
 8008e26:	42b5      	cmp	r5, r6
 8008e28:	d11a      	bne.n	8008e60 <_printf_common+0xc8>
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	e008      	b.n	8008e40 <_printf_common+0xa8>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4652      	mov	r2, sl
 8008e32:	4649      	mov	r1, r9
 8008e34:	4638      	mov	r0, r7
 8008e36:	47c0      	blx	r8
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d103      	bne.n	8008e44 <_printf_common+0xac>
 8008e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e44:	3501      	adds	r5, #1
 8008e46:	e7c6      	b.n	8008dd6 <_printf_common+0x3e>
 8008e48:	18e1      	adds	r1, r4, r3
 8008e4a:	1c5a      	adds	r2, r3, #1
 8008e4c:	2030      	movs	r0, #48	; 0x30
 8008e4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e52:	4422      	add	r2, r4
 8008e54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e5c:	3302      	adds	r3, #2
 8008e5e:	e7c7      	b.n	8008df0 <_printf_common+0x58>
 8008e60:	2301      	movs	r3, #1
 8008e62:	4622      	mov	r2, r4
 8008e64:	4649      	mov	r1, r9
 8008e66:	4638      	mov	r0, r7
 8008e68:	47c0      	blx	r8
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	d0e6      	beq.n	8008e3c <_printf_common+0xa4>
 8008e6e:	3601      	adds	r6, #1
 8008e70:	e7d9      	b.n	8008e26 <_printf_common+0x8e>
	...

08008e74 <_printf_i>:
 8008e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e78:	7e0f      	ldrb	r7, [r1, #24]
 8008e7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e7c:	2f78      	cmp	r7, #120	; 0x78
 8008e7e:	4691      	mov	r9, r2
 8008e80:	4680      	mov	r8, r0
 8008e82:	460c      	mov	r4, r1
 8008e84:	469a      	mov	sl, r3
 8008e86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e8a:	d807      	bhi.n	8008e9c <_printf_i+0x28>
 8008e8c:	2f62      	cmp	r7, #98	; 0x62
 8008e8e:	d80a      	bhi.n	8008ea6 <_printf_i+0x32>
 8008e90:	2f00      	cmp	r7, #0
 8008e92:	f000 80d8 	beq.w	8009046 <_printf_i+0x1d2>
 8008e96:	2f58      	cmp	r7, #88	; 0x58
 8008e98:	f000 80a3 	beq.w	8008fe2 <_printf_i+0x16e>
 8008e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ea4:	e03a      	b.n	8008f1c <_printf_i+0xa8>
 8008ea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008eaa:	2b15      	cmp	r3, #21
 8008eac:	d8f6      	bhi.n	8008e9c <_printf_i+0x28>
 8008eae:	a101      	add	r1, pc, #4	; (adr r1, 8008eb4 <_printf_i+0x40>)
 8008eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008eb4:	08008f0d 	.word	0x08008f0d
 8008eb8:	08008f21 	.word	0x08008f21
 8008ebc:	08008e9d 	.word	0x08008e9d
 8008ec0:	08008e9d 	.word	0x08008e9d
 8008ec4:	08008e9d 	.word	0x08008e9d
 8008ec8:	08008e9d 	.word	0x08008e9d
 8008ecc:	08008f21 	.word	0x08008f21
 8008ed0:	08008e9d 	.word	0x08008e9d
 8008ed4:	08008e9d 	.word	0x08008e9d
 8008ed8:	08008e9d 	.word	0x08008e9d
 8008edc:	08008e9d 	.word	0x08008e9d
 8008ee0:	0800902d 	.word	0x0800902d
 8008ee4:	08008f51 	.word	0x08008f51
 8008ee8:	0800900f 	.word	0x0800900f
 8008eec:	08008e9d 	.word	0x08008e9d
 8008ef0:	08008e9d 	.word	0x08008e9d
 8008ef4:	0800904f 	.word	0x0800904f
 8008ef8:	08008e9d 	.word	0x08008e9d
 8008efc:	08008f51 	.word	0x08008f51
 8008f00:	08008e9d 	.word	0x08008e9d
 8008f04:	08008e9d 	.word	0x08008e9d
 8008f08:	08009017 	.word	0x08009017
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	1d1a      	adds	r2, r3, #4
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	602a      	str	r2, [r5, #0]
 8008f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e0a3      	b.n	8009068 <_printf_i+0x1f4>
 8008f20:	6820      	ldr	r0, [r4, #0]
 8008f22:	6829      	ldr	r1, [r5, #0]
 8008f24:	0606      	lsls	r6, r0, #24
 8008f26:	f101 0304 	add.w	r3, r1, #4
 8008f2a:	d50a      	bpl.n	8008f42 <_printf_i+0xce>
 8008f2c:	680e      	ldr	r6, [r1, #0]
 8008f2e:	602b      	str	r3, [r5, #0]
 8008f30:	2e00      	cmp	r6, #0
 8008f32:	da03      	bge.n	8008f3c <_printf_i+0xc8>
 8008f34:	232d      	movs	r3, #45	; 0x2d
 8008f36:	4276      	negs	r6, r6
 8008f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f3c:	485e      	ldr	r0, [pc, #376]	; (80090b8 <_printf_i+0x244>)
 8008f3e:	230a      	movs	r3, #10
 8008f40:	e019      	b.n	8008f76 <_printf_i+0x102>
 8008f42:	680e      	ldr	r6, [r1, #0]
 8008f44:	602b      	str	r3, [r5, #0]
 8008f46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f4a:	bf18      	it	ne
 8008f4c:	b236      	sxthne	r6, r6
 8008f4e:	e7ef      	b.n	8008f30 <_printf_i+0xbc>
 8008f50:	682b      	ldr	r3, [r5, #0]
 8008f52:	6820      	ldr	r0, [r4, #0]
 8008f54:	1d19      	adds	r1, r3, #4
 8008f56:	6029      	str	r1, [r5, #0]
 8008f58:	0601      	lsls	r1, r0, #24
 8008f5a:	d501      	bpl.n	8008f60 <_printf_i+0xec>
 8008f5c:	681e      	ldr	r6, [r3, #0]
 8008f5e:	e002      	b.n	8008f66 <_printf_i+0xf2>
 8008f60:	0646      	lsls	r6, r0, #25
 8008f62:	d5fb      	bpl.n	8008f5c <_printf_i+0xe8>
 8008f64:	881e      	ldrh	r6, [r3, #0]
 8008f66:	4854      	ldr	r0, [pc, #336]	; (80090b8 <_printf_i+0x244>)
 8008f68:	2f6f      	cmp	r7, #111	; 0x6f
 8008f6a:	bf0c      	ite	eq
 8008f6c:	2308      	moveq	r3, #8
 8008f6e:	230a      	movne	r3, #10
 8008f70:	2100      	movs	r1, #0
 8008f72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f76:	6865      	ldr	r5, [r4, #4]
 8008f78:	60a5      	str	r5, [r4, #8]
 8008f7a:	2d00      	cmp	r5, #0
 8008f7c:	bfa2      	ittt	ge
 8008f7e:	6821      	ldrge	r1, [r4, #0]
 8008f80:	f021 0104 	bicge.w	r1, r1, #4
 8008f84:	6021      	strge	r1, [r4, #0]
 8008f86:	b90e      	cbnz	r6, 8008f8c <_printf_i+0x118>
 8008f88:	2d00      	cmp	r5, #0
 8008f8a:	d04d      	beq.n	8009028 <_printf_i+0x1b4>
 8008f8c:	4615      	mov	r5, r2
 8008f8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f92:	fb03 6711 	mls	r7, r3, r1, r6
 8008f96:	5dc7      	ldrb	r7, [r0, r7]
 8008f98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f9c:	4637      	mov	r7, r6
 8008f9e:	42bb      	cmp	r3, r7
 8008fa0:	460e      	mov	r6, r1
 8008fa2:	d9f4      	bls.n	8008f8e <_printf_i+0x11a>
 8008fa4:	2b08      	cmp	r3, #8
 8008fa6:	d10b      	bne.n	8008fc0 <_printf_i+0x14c>
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	07de      	lsls	r6, r3, #31
 8008fac:	d508      	bpl.n	8008fc0 <_printf_i+0x14c>
 8008fae:	6923      	ldr	r3, [r4, #16]
 8008fb0:	6861      	ldr	r1, [r4, #4]
 8008fb2:	4299      	cmp	r1, r3
 8008fb4:	bfde      	ittt	le
 8008fb6:	2330      	movle	r3, #48	; 0x30
 8008fb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fbc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008fc0:	1b52      	subs	r2, r2, r5
 8008fc2:	6122      	str	r2, [r4, #16]
 8008fc4:	f8cd a000 	str.w	sl, [sp]
 8008fc8:	464b      	mov	r3, r9
 8008fca:	aa03      	add	r2, sp, #12
 8008fcc:	4621      	mov	r1, r4
 8008fce:	4640      	mov	r0, r8
 8008fd0:	f7ff fee2 	bl	8008d98 <_printf_common>
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d14c      	bne.n	8009072 <_printf_i+0x1fe>
 8008fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fdc:	b004      	add	sp, #16
 8008fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe2:	4835      	ldr	r0, [pc, #212]	; (80090b8 <_printf_i+0x244>)
 8008fe4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008fe8:	6829      	ldr	r1, [r5, #0]
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ff0:	6029      	str	r1, [r5, #0]
 8008ff2:	061d      	lsls	r5, r3, #24
 8008ff4:	d514      	bpl.n	8009020 <_printf_i+0x1ac>
 8008ff6:	07df      	lsls	r7, r3, #31
 8008ff8:	bf44      	itt	mi
 8008ffa:	f043 0320 	orrmi.w	r3, r3, #32
 8008ffe:	6023      	strmi	r3, [r4, #0]
 8009000:	b91e      	cbnz	r6, 800900a <_printf_i+0x196>
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	f023 0320 	bic.w	r3, r3, #32
 8009008:	6023      	str	r3, [r4, #0]
 800900a:	2310      	movs	r3, #16
 800900c:	e7b0      	b.n	8008f70 <_printf_i+0xfc>
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	f043 0320 	orr.w	r3, r3, #32
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	2378      	movs	r3, #120	; 0x78
 8009018:	4828      	ldr	r0, [pc, #160]	; (80090bc <_printf_i+0x248>)
 800901a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800901e:	e7e3      	b.n	8008fe8 <_printf_i+0x174>
 8009020:	0659      	lsls	r1, r3, #25
 8009022:	bf48      	it	mi
 8009024:	b2b6      	uxthmi	r6, r6
 8009026:	e7e6      	b.n	8008ff6 <_printf_i+0x182>
 8009028:	4615      	mov	r5, r2
 800902a:	e7bb      	b.n	8008fa4 <_printf_i+0x130>
 800902c:	682b      	ldr	r3, [r5, #0]
 800902e:	6826      	ldr	r6, [r4, #0]
 8009030:	6961      	ldr	r1, [r4, #20]
 8009032:	1d18      	adds	r0, r3, #4
 8009034:	6028      	str	r0, [r5, #0]
 8009036:	0635      	lsls	r5, r6, #24
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	d501      	bpl.n	8009040 <_printf_i+0x1cc>
 800903c:	6019      	str	r1, [r3, #0]
 800903e:	e002      	b.n	8009046 <_printf_i+0x1d2>
 8009040:	0670      	lsls	r0, r6, #25
 8009042:	d5fb      	bpl.n	800903c <_printf_i+0x1c8>
 8009044:	8019      	strh	r1, [r3, #0]
 8009046:	2300      	movs	r3, #0
 8009048:	6123      	str	r3, [r4, #16]
 800904a:	4615      	mov	r5, r2
 800904c:	e7ba      	b.n	8008fc4 <_printf_i+0x150>
 800904e:	682b      	ldr	r3, [r5, #0]
 8009050:	1d1a      	adds	r2, r3, #4
 8009052:	602a      	str	r2, [r5, #0]
 8009054:	681d      	ldr	r5, [r3, #0]
 8009056:	6862      	ldr	r2, [r4, #4]
 8009058:	2100      	movs	r1, #0
 800905a:	4628      	mov	r0, r5
 800905c:	f7f7 f948 	bl	80002f0 <memchr>
 8009060:	b108      	cbz	r0, 8009066 <_printf_i+0x1f2>
 8009062:	1b40      	subs	r0, r0, r5
 8009064:	6060      	str	r0, [r4, #4]
 8009066:	6863      	ldr	r3, [r4, #4]
 8009068:	6123      	str	r3, [r4, #16]
 800906a:	2300      	movs	r3, #0
 800906c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009070:	e7a8      	b.n	8008fc4 <_printf_i+0x150>
 8009072:	6923      	ldr	r3, [r4, #16]
 8009074:	462a      	mov	r2, r5
 8009076:	4649      	mov	r1, r9
 8009078:	4640      	mov	r0, r8
 800907a:	47d0      	blx	sl
 800907c:	3001      	adds	r0, #1
 800907e:	d0ab      	beq.n	8008fd8 <_printf_i+0x164>
 8009080:	6823      	ldr	r3, [r4, #0]
 8009082:	079b      	lsls	r3, r3, #30
 8009084:	d413      	bmi.n	80090ae <_printf_i+0x23a>
 8009086:	68e0      	ldr	r0, [r4, #12]
 8009088:	9b03      	ldr	r3, [sp, #12]
 800908a:	4298      	cmp	r0, r3
 800908c:	bfb8      	it	lt
 800908e:	4618      	movlt	r0, r3
 8009090:	e7a4      	b.n	8008fdc <_printf_i+0x168>
 8009092:	2301      	movs	r3, #1
 8009094:	4632      	mov	r2, r6
 8009096:	4649      	mov	r1, r9
 8009098:	4640      	mov	r0, r8
 800909a:	47d0      	blx	sl
 800909c:	3001      	adds	r0, #1
 800909e:	d09b      	beq.n	8008fd8 <_printf_i+0x164>
 80090a0:	3501      	adds	r5, #1
 80090a2:	68e3      	ldr	r3, [r4, #12]
 80090a4:	9903      	ldr	r1, [sp, #12]
 80090a6:	1a5b      	subs	r3, r3, r1
 80090a8:	42ab      	cmp	r3, r5
 80090aa:	dcf2      	bgt.n	8009092 <_printf_i+0x21e>
 80090ac:	e7eb      	b.n	8009086 <_printf_i+0x212>
 80090ae:	2500      	movs	r5, #0
 80090b0:	f104 0619 	add.w	r6, r4, #25
 80090b4:	e7f5      	b.n	80090a2 <_printf_i+0x22e>
 80090b6:	bf00      	nop
 80090b8:	08009415 	.word	0x08009415
 80090bc:	08009426 	.word	0x08009426

080090c0 <memcpy>:
 80090c0:	440a      	add	r2, r1
 80090c2:	4291      	cmp	r1, r2
 80090c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80090c8:	d100      	bne.n	80090cc <memcpy+0xc>
 80090ca:	4770      	bx	lr
 80090cc:	b510      	push	{r4, lr}
 80090ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090d6:	4291      	cmp	r1, r2
 80090d8:	d1f9      	bne.n	80090ce <memcpy+0xe>
 80090da:	bd10      	pop	{r4, pc}

080090dc <memmove>:
 80090dc:	4288      	cmp	r0, r1
 80090de:	b510      	push	{r4, lr}
 80090e0:	eb01 0402 	add.w	r4, r1, r2
 80090e4:	d902      	bls.n	80090ec <memmove+0x10>
 80090e6:	4284      	cmp	r4, r0
 80090e8:	4623      	mov	r3, r4
 80090ea:	d807      	bhi.n	80090fc <memmove+0x20>
 80090ec:	1e43      	subs	r3, r0, #1
 80090ee:	42a1      	cmp	r1, r4
 80090f0:	d008      	beq.n	8009104 <memmove+0x28>
 80090f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090fa:	e7f8      	b.n	80090ee <memmove+0x12>
 80090fc:	4402      	add	r2, r0
 80090fe:	4601      	mov	r1, r0
 8009100:	428a      	cmp	r2, r1
 8009102:	d100      	bne.n	8009106 <memmove+0x2a>
 8009104:	bd10      	pop	{r4, pc}
 8009106:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800910a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800910e:	e7f7      	b.n	8009100 <memmove+0x24>

08009110 <_free_r>:
 8009110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009112:	2900      	cmp	r1, #0
 8009114:	d044      	beq.n	80091a0 <_free_r+0x90>
 8009116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800911a:	9001      	str	r0, [sp, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	f1a1 0404 	sub.w	r4, r1, #4
 8009122:	bfb8      	it	lt
 8009124:	18e4      	addlt	r4, r4, r3
 8009126:	f000 f913 	bl	8009350 <__malloc_lock>
 800912a:	4a1e      	ldr	r2, [pc, #120]	; (80091a4 <_free_r+0x94>)
 800912c:	9801      	ldr	r0, [sp, #4]
 800912e:	6813      	ldr	r3, [r2, #0]
 8009130:	b933      	cbnz	r3, 8009140 <_free_r+0x30>
 8009132:	6063      	str	r3, [r4, #4]
 8009134:	6014      	str	r4, [r2, #0]
 8009136:	b003      	add	sp, #12
 8009138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800913c:	f000 b90e 	b.w	800935c <__malloc_unlock>
 8009140:	42a3      	cmp	r3, r4
 8009142:	d908      	bls.n	8009156 <_free_r+0x46>
 8009144:	6825      	ldr	r5, [r4, #0]
 8009146:	1961      	adds	r1, r4, r5
 8009148:	428b      	cmp	r3, r1
 800914a:	bf01      	itttt	eq
 800914c:	6819      	ldreq	r1, [r3, #0]
 800914e:	685b      	ldreq	r3, [r3, #4]
 8009150:	1949      	addeq	r1, r1, r5
 8009152:	6021      	streq	r1, [r4, #0]
 8009154:	e7ed      	b.n	8009132 <_free_r+0x22>
 8009156:	461a      	mov	r2, r3
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	b10b      	cbz	r3, 8009160 <_free_r+0x50>
 800915c:	42a3      	cmp	r3, r4
 800915e:	d9fa      	bls.n	8009156 <_free_r+0x46>
 8009160:	6811      	ldr	r1, [r2, #0]
 8009162:	1855      	adds	r5, r2, r1
 8009164:	42a5      	cmp	r5, r4
 8009166:	d10b      	bne.n	8009180 <_free_r+0x70>
 8009168:	6824      	ldr	r4, [r4, #0]
 800916a:	4421      	add	r1, r4
 800916c:	1854      	adds	r4, r2, r1
 800916e:	42a3      	cmp	r3, r4
 8009170:	6011      	str	r1, [r2, #0]
 8009172:	d1e0      	bne.n	8009136 <_free_r+0x26>
 8009174:	681c      	ldr	r4, [r3, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	6053      	str	r3, [r2, #4]
 800917a:	4421      	add	r1, r4
 800917c:	6011      	str	r1, [r2, #0]
 800917e:	e7da      	b.n	8009136 <_free_r+0x26>
 8009180:	d902      	bls.n	8009188 <_free_r+0x78>
 8009182:	230c      	movs	r3, #12
 8009184:	6003      	str	r3, [r0, #0]
 8009186:	e7d6      	b.n	8009136 <_free_r+0x26>
 8009188:	6825      	ldr	r5, [r4, #0]
 800918a:	1961      	adds	r1, r4, r5
 800918c:	428b      	cmp	r3, r1
 800918e:	bf04      	itt	eq
 8009190:	6819      	ldreq	r1, [r3, #0]
 8009192:	685b      	ldreq	r3, [r3, #4]
 8009194:	6063      	str	r3, [r4, #4]
 8009196:	bf04      	itt	eq
 8009198:	1949      	addeq	r1, r1, r5
 800919a:	6021      	streq	r1, [r4, #0]
 800919c:	6054      	str	r4, [r2, #4]
 800919e:	e7ca      	b.n	8009136 <_free_r+0x26>
 80091a0:	b003      	add	sp, #12
 80091a2:	bd30      	pop	{r4, r5, pc}
 80091a4:	24000264 	.word	0x24000264

080091a8 <sbrk_aligned>:
 80091a8:	b570      	push	{r4, r5, r6, lr}
 80091aa:	4e0e      	ldr	r6, [pc, #56]	; (80091e4 <sbrk_aligned+0x3c>)
 80091ac:	460c      	mov	r4, r1
 80091ae:	6831      	ldr	r1, [r6, #0]
 80091b0:	4605      	mov	r5, r0
 80091b2:	b911      	cbnz	r1, 80091ba <sbrk_aligned+0x12>
 80091b4:	f000 f8bc 	bl	8009330 <_sbrk_r>
 80091b8:	6030      	str	r0, [r6, #0]
 80091ba:	4621      	mov	r1, r4
 80091bc:	4628      	mov	r0, r5
 80091be:	f000 f8b7 	bl	8009330 <_sbrk_r>
 80091c2:	1c43      	adds	r3, r0, #1
 80091c4:	d00a      	beq.n	80091dc <sbrk_aligned+0x34>
 80091c6:	1cc4      	adds	r4, r0, #3
 80091c8:	f024 0403 	bic.w	r4, r4, #3
 80091cc:	42a0      	cmp	r0, r4
 80091ce:	d007      	beq.n	80091e0 <sbrk_aligned+0x38>
 80091d0:	1a21      	subs	r1, r4, r0
 80091d2:	4628      	mov	r0, r5
 80091d4:	f000 f8ac 	bl	8009330 <_sbrk_r>
 80091d8:	3001      	adds	r0, #1
 80091da:	d101      	bne.n	80091e0 <sbrk_aligned+0x38>
 80091dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80091e0:	4620      	mov	r0, r4
 80091e2:	bd70      	pop	{r4, r5, r6, pc}
 80091e4:	24000268 	.word	0x24000268

080091e8 <_malloc_r>:
 80091e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ec:	1ccd      	adds	r5, r1, #3
 80091ee:	f025 0503 	bic.w	r5, r5, #3
 80091f2:	3508      	adds	r5, #8
 80091f4:	2d0c      	cmp	r5, #12
 80091f6:	bf38      	it	cc
 80091f8:	250c      	movcc	r5, #12
 80091fa:	2d00      	cmp	r5, #0
 80091fc:	4607      	mov	r7, r0
 80091fe:	db01      	blt.n	8009204 <_malloc_r+0x1c>
 8009200:	42a9      	cmp	r1, r5
 8009202:	d905      	bls.n	8009210 <_malloc_r+0x28>
 8009204:	230c      	movs	r3, #12
 8009206:	603b      	str	r3, [r7, #0]
 8009208:	2600      	movs	r6, #0
 800920a:	4630      	mov	r0, r6
 800920c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009210:	4e2e      	ldr	r6, [pc, #184]	; (80092cc <_malloc_r+0xe4>)
 8009212:	f000 f89d 	bl	8009350 <__malloc_lock>
 8009216:	6833      	ldr	r3, [r6, #0]
 8009218:	461c      	mov	r4, r3
 800921a:	bb34      	cbnz	r4, 800926a <_malloc_r+0x82>
 800921c:	4629      	mov	r1, r5
 800921e:	4638      	mov	r0, r7
 8009220:	f7ff ffc2 	bl	80091a8 <sbrk_aligned>
 8009224:	1c43      	adds	r3, r0, #1
 8009226:	4604      	mov	r4, r0
 8009228:	d14d      	bne.n	80092c6 <_malloc_r+0xde>
 800922a:	6834      	ldr	r4, [r6, #0]
 800922c:	4626      	mov	r6, r4
 800922e:	2e00      	cmp	r6, #0
 8009230:	d140      	bne.n	80092b4 <_malloc_r+0xcc>
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	4631      	mov	r1, r6
 8009236:	4638      	mov	r0, r7
 8009238:	eb04 0803 	add.w	r8, r4, r3
 800923c:	f000 f878 	bl	8009330 <_sbrk_r>
 8009240:	4580      	cmp	r8, r0
 8009242:	d13a      	bne.n	80092ba <_malloc_r+0xd2>
 8009244:	6821      	ldr	r1, [r4, #0]
 8009246:	3503      	adds	r5, #3
 8009248:	1a6d      	subs	r5, r5, r1
 800924a:	f025 0503 	bic.w	r5, r5, #3
 800924e:	3508      	adds	r5, #8
 8009250:	2d0c      	cmp	r5, #12
 8009252:	bf38      	it	cc
 8009254:	250c      	movcc	r5, #12
 8009256:	4629      	mov	r1, r5
 8009258:	4638      	mov	r0, r7
 800925a:	f7ff ffa5 	bl	80091a8 <sbrk_aligned>
 800925e:	3001      	adds	r0, #1
 8009260:	d02b      	beq.n	80092ba <_malloc_r+0xd2>
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	442b      	add	r3, r5
 8009266:	6023      	str	r3, [r4, #0]
 8009268:	e00e      	b.n	8009288 <_malloc_r+0xa0>
 800926a:	6822      	ldr	r2, [r4, #0]
 800926c:	1b52      	subs	r2, r2, r5
 800926e:	d41e      	bmi.n	80092ae <_malloc_r+0xc6>
 8009270:	2a0b      	cmp	r2, #11
 8009272:	d916      	bls.n	80092a2 <_malloc_r+0xba>
 8009274:	1961      	adds	r1, r4, r5
 8009276:	42a3      	cmp	r3, r4
 8009278:	6025      	str	r5, [r4, #0]
 800927a:	bf18      	it	ne
 800927c:	6059      	strne	r1, [r3, #4]
 800927e:	6863      	ldr	r3, [r4, #4]
 8009280:	bf08      	it	eq
 8009282:	6031      	streq	r1, [r6, #0]
 8009284:	5162      	str	r2, [r4, r5]
 8009286:	604b      	str	r3, [r1, #4]
 8009288:	4638      	mov	r0, r7
 800928a:	f104 060b 	add.w	r6, r4, #11
 800928e:	f000 f865 	bl	800935c <__malloc_unlock>
 8009292:	f026 0607 	bic.w	r6, r6, #7
 8009296:	1d23      	adds	r3, r4, #4
 8009298:	1af2      	subs	r2, r6, r3
 800929a:	d0b6      	beq.n	800920a <_malloc_r+0x22>
 800929c:	1b9b      	subs	r3, r3, r6
 800929e:	50a3      	str	r3, [r4, r2]
 80092a0:	e7b3      	b.n	800920a <_malloc_r+0x22>
 80092a2:	6862      	ldr	r2, [r4, #4]
 80092a4:	42a3      	cmp	r3, r4
 80092a6:	bf0c      	ite	eq
 80092a8:	6032      	streq	r2, [r6, #0]
 80092aa:	605a      	strne	r2, [r3, #4]
 80092ac:	e7ec      	b.n	8009288 <_malloc_r+0xa0>
 80092ae:	4623      	mov	r3, r4
 80092b0:	6864      	ldr	r4, [r4, #4]
 80092b2:	e7b2      	b.n	800921a <_malloc_r+0x32>
 80092b4:	4634      	mov	r4, r6
 80092b6:	6876      	ldr	r6, [r6, #4]
 80092b8:	e7b9      	b.n	800922e <_malloc_r+0x46>
 80092ba:	230c      	movs	r3, #12
 80092bc:	603b      	str	r3, [r7, #0]
 80092be:	4638      	mov	r0, r7
 80092c0:	f000 f84c 	bl	800935c <__malloc_unlock>
 80092c4:	e7a1      	b.n	800920a <_malloc_r+0x22>
 80092c6:	6025      	str	r5, [r4, #0]
 80092c8:	e7de      	b.n	8009288 <_malloc_r+0xa0>
 80092ca:	bf00      	nop
 80092cc:	24000264 	.word	0x24000264

080092d0 <_realloc_r>:
 80092d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092d4:	4680      	mov	r8, r0
 80092d6:	4614      	mov	r4, r2
 80092d8:	460e      	mov	r6, r1
 80092da:	b921      	cbnz	r1, 80092e6 <_realloc_r+0x16>
 80092dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092e0:	4611      	mov	r1, r2
 80092e2:	f7ff bf81 	b.w	80091e8 <_malloc_r>
 80092e6:	b92a      	cbnz	r2, 80092f4 <_realloc_r+0x24>
 80092e8:	f7ff ff12 	bl	8009110 <_free_r>
 80092ec:	4625      	mov	r5, r4
 80092ee:	4628      	mov	r0, r5
 80092f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092f4:	f000 f838 	bl	8009368 <_malloc_usable_size_r>
 80092f8:	4284      	cmp	r4, r0
 80092fa:	4607      	mov	r7, r0
 80092fc:	d802      	bhi.n	8009304 <_realloc_r+0x34>
 80092fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009302:	d812      	bhi.n	800932a <_realloc_r+0x5a>
 8009304:	4621      	mov	r1, r4
 8009306:	4640      	mov	r0, r8
 8009308:	f7ff ff6e 	bl	80091e8 <_malloc_r>
 800930c:	4605      	mov	r5, r0
 800930e:	2800      	cmp	r0, #0
 8009310:	d0ed      	beq.n	80092ee <_realloc_r+0x1e>
 8009312:	42bc      	cmp	r4, r7
 8009314:	4622      	mov	r2, r4
 8009316:	4631      	mov	r1, r6
 8009318:	bf28      	it	cs
 800931a:	463a      	movcs	r2, r7
 800931c:	f7ff fed0 	bl	80090c0 <memcpy>
 8009320:	4631      	mov	r1, r6
 8009322:	4640      	mov	r0, r8
 8009324:	f7ff fef4 	bl	8009110 <_free_r>
 8009328:	e7e1      	b.n	80092ee <_realloc_r+0x1e>
 800932a:	4635      	mov	r5, r6
 800932c:	e7df      	b.n	80092ee <_realloc_r+0x1e>
	...

08009330 <_sbrk_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	4d06      	ldr	r5, [pc, #24]	; (800934c <_sbrk_r+0x1c>)
 8009334:	2300      	movs	r3, #0
 8009336:	4604      	mov	r4, r0
 8009338:	4608      	mov	r0, r1
 800933a:	602b      	str	r3, [r5, #0]
 800933c:	f7f7 fc8a 	bl	8000c54 <_sbrk>
 8009340:	1c43      	adds	r3, r0, #1
 8009342:	d102      	bne.n	800934a <_sbrk_r+0x1a>
 8009344:	682b      	ldr	r3, [r5, #0]
 8009346:	b103      	cbz	r3, 800934a <_sbrk_r+0x1a>
 8009348:	6023      	str	r3, [r4, #0]
 800934a:	bd38      	pop	{r3, r4, r5, pc}
 800934c:	2400026c 	.word	0x2400026c

08009350 <__malloc_lock>:
 8009350:	4801      	ldr	r0, [pc, #4]	; (8009358 <__malloc_lock+0x8>)
 8009352:	f000 b811 	b.w	8009378 <__retarget_lock_acquire_recursive>
 8009356:	bf00      	nop
 8009358:	24000270 	.word	0x24000270

0800935c <__malloc_unlock>:
 800935c:	4801      	ldr	r0, [pc, #4]	; (8009364 <__malloc_unlock+0x8>)
 800935e:	f000 b80c 	b.w	800937a <__retarget_lock_release_recursive>
 8009362:	bf00      	nop
 8009364:	24000270 	.word	0x24000270

08009368 <_malloc_usable_size_r>:
 8009368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800936c:	1f18      	subs	r0, r3, #4
 800936e:	2b00      	cmp	r3, #0
 8009370:	bfbc      	itt	lt
 8009372:	580b      	ldrlt	r3, [r1, r0]
 8009374:	18c0      	addlt	r0, r0, r3
 8009376:	4770      	bx	lr

08009378 <__retarget_lock_acquire_recursive>:
 8009378:	4770      	bx	lr

0800937a <__retarget_lock_release_recursive>:
 800937a:	4770      	bx	lr

0800937c <_init>:
 800937c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937e:	bf00      	nop
 8009380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009382:	bc08      	pop	{r3}
 8009384:	469e      	mov	lr, r3
 8009386:	4770      	bx	lr

08009388 <_fini>:
 8009388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938a:	bf00      	nop
 800938c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800938e:	bc08      	pop	{r3}
 8009390:	469e      	mov	lr, r3
 8009392:	4770      	bx	lr
